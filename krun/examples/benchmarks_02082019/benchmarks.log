[2019-08-01 16:50:41: INFO] Wait 1 secs to allow system to cool prior to collecting initial temperature readings
[2019-08-01 16:54:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 16:54:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 16:54:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 16:54:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 16:54:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 17:05:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.482 s/op
Iteration   2: 12.578 s/op
Iteration   3: 12.251 s/op
Iteration   4: 12.474 s/op
Iteration   5: 12.227 s/op
Iteration   6: 12.446 s/op
Iteration   7: 12.264 s/op
Iteration   8: 12.236 s/op
Iteration   9: 12.188 s/op
Iteration  10: 12.321 s/op
Iteration  11: 12.212 s/op
Iteration  12: 12.173 s/op
Iteration  13: 12.342 s/op
Iteration  14: 12.257 s/op
Iteration  15: 12.368 s/op
Iteration  16: 12.105 s/op
Iteration  17: 12.189 s/op
Iteration  18: 12.343 s/op
Iteration  19: 12.255 s/op
Iteration  20: 12.314 s/op
Iteration  21: 12.270 s/op
Iteration  22: 12.356 s/op
Iteration  23: 12.158 s/op
Iteration  24: 12.265 s/op
Iteration  25: 12.194 s/op
Iteration  26: 12.331 s/op
Iteration  27: 12.173 s/op
Iteration  28: 12.291 s/op
Iteration  29: 12.229 s/op
Iteration  30: 12.156 s/op
Iteration  31: 12.225 s/op
Iteration  32: 12.341 s/op
Iteration  33: 12.321 s/op
Iteration  34: 12.236 s/op
Iteration  35: 12.246 s/op
Iteration  36: 12.247 s/op
Iteration  37: 12.182 s/op
Iteration  38: 12.201 s/op
Iteration  39: 12.294 s/op
Iteration  40: 12.224 s/op
Iteration  41: 12.326 s/op
Iteration  42: 12.205 s/op
Iteration  43: 12.148 s/op
Iteration  44: 12.193 s/op
Iteration  45: 12.320 s/op
Iteration  46: 12.337 s/op
Iteration  47: 12.210 s/op
Iteration  48: 12.280 s/op
Iteration  49: 12.088 s/op
Iteration  50: 12.302 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.268 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [12.000, 12.050) = 0 
    [12.050, 12.100) = 1 
    [12.100, 12.150) = 2 
    [12.150, 12.200) = 9 
    [12.200, 12.250) = 12 
    [12.250, 12.300) = 9 
    [12.300, 12.350) = 11 
    [12.350, 12.400) = 2 
    [12.400, 12.450) = 1 
    [12.450, 12.500) = 2 
    [12.500, 12.550) = 0 
    [12.550, 12.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.088 s/op
     p(50.0000) =     12.253 s/op
     p(90.0000) =     12.367 s/op
     p(95.0000) =     12.478 s/op
     p(99.0000) =     12.578 s/op
     p(99.9000) =     12.578 s/op
     p(99.9900) =     12.578 s/op
     p(99.9990) =     12.578 s/op
     p(99.9999) =     12.578 s/op
    p(100.0000) =     12.578 s/op


# Run complete. Total time: 00:10:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.268 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_11.0.4_1564671299427.json
{"wallclock_times": [614.437760987], "core_cycle_counts": [[773375213310], [474462248926], [592775017160], [354916166215]], "aperf_counts": [[771836515926], [474133313097], [592523470841], [354757844089]], "mperf_counts": [[786703549598], [482270056248], [603378246792], [360558541438]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 17:05:13: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_11.0.4'
[2019-08-01 17:05:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:05:14: INFO] 511 executions left in scheduler queue
[2019-08-01 17:05:14: INFO] Executions until ETA known: 4072
[2019-08-01 17:05:14: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-08-01 17:05:14: INFO] Estimated completion (next execution): 2019-08-01 17:17:59 (0:12:44 from now)
[2019-08-01 17:05:14: INFO] Reboot in preparation for next execution
[2019-08-01 17:13:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.516 s/op
Iteration   2: 5.443 s/op
Iteration   3: 5.308 s/op
Iteration   4: 5.455 s/op
Iteration   5: 5.195 s/op
Iteration   6: 5.245 s/op
Iteration   7: 5.159 s/op
Iteration   8: 5.191 s/op
Iteration   9: 5.241 s/op
Iteration  10: 5.288 s/op
Iteration  11: 5.116 s/op
Iteration  12: 6.403 s/op
Iteration  13: 5.055 s/op
Iteration  14: 5.264 s/op
Iteration  15: 5.126 s/op
Iteration  16: 5.125 s/op
Iteration  17: 5.313 s/op
Iteration  18: 5.124 s/op
Iteration  19: 5.123 s/op
Iteration  20: 5.317 s/op
Iteration  21: 5.130 s/op
Iteration  22: 5.147 s/op
Iteration  23: 5.136 s/op
Iteration  24: 5.282 s/op
Iteration  25: 5.129 s/op
Iteration  26: 5.137 s/op
Iteration  27: 5.301 s/op
Iteration  28: 5.151 s/op
Iteration  29: 5.142 s/op
Iteration  30: 5.315 s/op
Iteration  31: 5.143 s/op
Iteration  32: 5.163 s/op
Iteration  33: 5.136 s/op
Iteration  34: 5.317 s/op
Iteration  35: 6.075 s/op
Iteration  36: 5.075 s/op
Iteration  37: 5.296 s/op
Iteration  38: 5.147 s/op
Iteration  39: 5.134 s/op
Iteration  40: 5.161 s/op
Iteration  41: 5.301 s/op
Iteration  42: 5.130 s/op
Iteration  43: 5.157 s/op
Iteration  44: 5.141 s/op
Iteration  45: 5.142 s/op
Iteration  46: 6.002 s/op
Iteration  47: 5.144 s/op
Iteration  48: 5.285 s/op
Iteration  49: 5.160 s/op
Iteration  50: 5.143 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.263 ?(99.9%) 0.125 s/op

  Histogram, s/op:
    [5.000, 5.125) = 6 
    [5.125, 5.250) = 26 
    [5.250, 5.375) = 12 
    [5.375, 5.500) = 2 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.055 s/op
     p(50.0000) =      5.159 s/op
     p(90.0000) =      5.454 s/op
     p(95.0000) =      6.035 s/op
     p(99.0000) =      6.403 s/op
     p(99.9000) =      6.403 s/op
     p(99.9900) =      6.403 s/op
     p(99.9990) =      6.403 s/op
     p(99.9999) =      6.403 s/op
    p(100.0000) =      6.403 s/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.263 ? 0.125   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_graalvm-ee-19.1.1_1564672172039.json
{"wallclock_times": [264.314189889], "core_cycle_counts": [[236564666004], [257017435551], [303382470376], [263624391633]], "aperf_counts": [[235860062611], [256945579502], [303343676963], [263591046746]], "mperf_counts": [[235882735180], [256946208528], [303349260138], [263591451486]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:13:56: WARNING] Mail quota reached.
[2019-08-01 17:13:56: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-08-01 17:13:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:13:57: INFO] 510 executions left in scheduler queue
[2019-08-01 17:13:57: INFO] Executions until ETA known: 4054
[2019-08-01 17:13:57: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-08-01 17:13:57: INFO] Estimated completion (next execution): 2019-08-01 17:20:52 (0:06:54 from now)
[2019-08-01 17:13:57: INFO] Reboot in preparation for next execution
[2019-08-01 17:18:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 17:18:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 17:18:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 17:18:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 17:18:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 17:29:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.909 s/op
Iteration   2: 13.783 s/op
Iteration   3: 13.709 s/op
Iteration   4: 13.522 s/op
Iteration   5: 13.500 s/op
Iteration   6: 13.524 s/op
Iteration   7: 13.525 s/op
Iteration   8: 13.496 s/op
Iteration   9: 13.427 s/op
Iteration  10: 13.431 s/op
Iteration  11: 13.642 s/op
Iteration  12: 13.496 s/op
Iteration  13: 13.471 s/op
Iteration  14: 13.478 s/op
Iteration  15: 13.584 s/op
Iteration  16: 13.459 s/op
Iteration  17: 13.537 s/op
Iteration  18: 13.567 s/op
Iteration  19: 13.655 s/op
Iteration  20: 13.469 s/op
Iteration  21: 13.416 s/op
Iteration  22: 13.572 s/op
Iteration  23: 13.482 s/op
Iteration  24: 13.425 s/op
Iteration  25: 13.607 s/op
Iteration  26: 13.418 s/op
Iteration  27: 13.596 s/op
Iteration  28: 13.721 s/op
Iteration  29: 13.464 s/op
Iteration  30: 13.573 s/op
Iteration  31: 13.569 s/op
Iteration  32: 13.440 s/op
Iteration  33: 13.436 s/op
Iteration  34: 13.503 s/op
Iteration  35: 13.466 s/op
Iteration  36: 13.425 s/op
Iteration  37: 13.524 s/op
Iteration  38: 13.462 s/op
Iteration  39: 13.538 s/op
Iteration  40: 13.603 s/op
Iteration  41: 13.664 s/op
Iteration  42: 13.460 s/op
Iteration  43: 13.481 s/op
Iteration  44: 13.461 s/op
Iteration  45: 13.625 s/op
Iteration  46: 13.467 s/op
Iteration  47: 13.477 s/op
Iteration  48: 13.568 s/op
Iteration  49: 13.456 s/op
Iteration  50: 13.664 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.535 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [13.400, 13.450) = 8 
    [13.450, 13.500) = 16 
    [13.500, 13.550) = 8 
    [13.550, 13.600) = 7 
    [13.600, 13.650) = 4 
    [13.650, 13.700) = 3 
    [13.700, 13.750) = 2 
    [13.750, 13.800) = 1 
    [13.800, 13.850) = 0 
    [13.850, 13.900) = 0 
    [13.900, 13.950) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.416 s/op
     p(50.0000) =     13.501 s/op
     p(90.0000) =     13.664 s/op
     p(95.0000) =     13.749 s/op
     p(99.0000) =     13.909 s/op
     p(99.9000) =     13.909 s/op
     p(99.9900) =     13.909 s/op
     p(99.9990) =     13.909 s/op
     p(99.9999) =     13.909 s/op
    p(100.0000) =     13.909 s/op


# Run complete. Total time: 00:11:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.535 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_12.0.2_1564672694496.json
{"wallclock_times": [677.7933071719999], "core_cycle_counts": [[475972603503], [469924272540], [905072246640], [580939993905]], "aperf_counts": [[474014747475], [469774386963], [904966220289], [580856467341]], "mperf_counts": [[478982547978], [473470843964], [914912376300], [585848563510]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 17:29:32: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-08-01 17:29:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:29:33: INFO] 509 executions left in scheduler queue
[2019-08-01 17:29:33: INFO] Executions until ETA known: 4013
[2019-08-01 17:29:33: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:29:33: INFO] Estimated completion (next execution): 2019-08-01 17:43:21 (0:13:48 from now)
[2019-08-01 17:29:33: INFO] Reboot in preparation for next execution
[2019-08-01 17:38:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.530 s/op
Iteration   2: 5.366 s/op
Iteration   3: 5.423 s/op
Iteration   4: 5.304 s/op
Iteration   5: 5.286 s/op
Iteration   6: 5.290 s/op
Iteration   7: 5.309 s/op
Iteration   8: 5.303 s/op
Iteration   9: 5.302 s/op
Iteration  10: 5.306 s/op
Iteration  11: 5.310 s/op
Iteration  12: 5.287 s/op
Iteration  13: 5.302 s/op
Iteration  14: 5.310 s/op
Iteration  15: 5.303 s/op
Iteration  16: 5.308 s/op
Iteration  17: 5.302 s/op
Iteration  18: 5.287 s/op
Iteration  19: 5.294 s/op
Iteration  20: 5.295 s/op
Iteration  21: 5.311 s/op
Iteration  22: 5.298 s/op
Iteration  23: 5.304 s/op
Iteration  24: 5.309 s/op
Iteration  25: 5.305 s/op
Iteration  26: 5.300 s/op
Iteration  27: 5.311 s/op
Iteration  28: 5.292 s/op
Iteration  29: 5.305 s/op
Iteration  30: 5.298 s/op
Iteration  31: 5.304 s/op
Iteration  32: 5.299 s/op
Iteration  33: 5.281 s/op
Iteration  34: 5.278 s/op
Iteration  35: 5.298 s/op
Iteration  36: 5.279 s/op
Iteration  37: 5.300 s/op
Iteration  38: 5.297 s/op
Iteration  39: 5.303 s/op
Iteration  40: 5.279 s/op
Iteration  41: 5.306 s/op
Iteration  42: 5.298 s/op
Iteration  43: 5.310 s/op
Iteration  44: 5.301 s/op
Iteration  45: 5.287 s/op
Iteration  46: 5.305 s/op
Iteration  47: 5.297 s/op
Iteration  48: 5.282 s/op
Iteration  49: 5.304 s/op
Iteration  50: 5.297 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.307 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [5.200, 5.225) = 0 
    [5.225, 5.250) = 0 
    [5.250, 5.275) = 0 
    [5.275, 5.300) = 22 
    [5.300, 5.325) = 25 
    [5.325, 5.350) = 0 
    [5.350, 5.375) = 1 
    [5.375, 5.400) = 0 
    [5.400, 5.425) = 1 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 0 
    [5.475, 5.500) = 0 
    [5.500, 5.525) = 0 
    [5.525, 5.550) = 1 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.278 s/op
     p(50.0000) =      5.302 s/op
     p(90.0000) =      5.311 s/op
     p(95.0000) =      5.392 s/op
     p(99.0000) =      5.530 s/op
     p(99.9000) =      5.530 s/op
     p(99.9900) =      5.530 s/op
     p(99.9990) =      5.530 s/op
     p(99.9999) =      5.530 s/op
    p(100.0000) =      5.530 s/op


# Run complete. Total time: 00:04:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.307 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ce-19.1.1_1564673630524.json
{"wallclock_times": [266.219631081], "core_cycle_counts": [[188565352799], [300128532305], [206291222618], [166018200758]], "aperf_counts": [[187959022889], [300076937226], [206245838896], [165985393179]], "mperf_counts": [[187965676334], [300082113448], [206259558612], [165993423750]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:38:16: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:38:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:38:17: INFO] 508 executions left in scheduler queue
[2019-08-01 17:38:17: INFO] Executions until ETA known: 4007
[2019-08-01 17:38:17: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:38:17: INFO] Estimated completion (next execution): 2019-08-01 17:45:14 (0:06:56 from now)
[2019-08-01 17:38:17: INFO] Reboot in preparation for next execution
[2019-08-01 17:50:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.957 s/op
Iteration   2: 9.869 s/op
Iteration   3: 9.846 s/op
Iteration   4: 9.980 s/op
Iteration   5: 9.852 s/op
Iteration   6: 9.907 s/op
Iteration   7: 9.830 s/op
Iteration   8: 9.833 s/op
Iteration   9: 9.842 s/op
Iteration  10: 9.851 s/op
Iteration  11: 9.829 s/op
Iteration  12: 9.891 s/op
Iteration  13: 9.801 s/op
Iteration  14: 9.896 s/op
Iteration  15: 9.848 s/op
Iteration  16: 9.842 s/op
Iteration  17: 9.879 s/op
Iteration  18: 9.872 s/op
Iteration  19: 9.829 s/op
Iteration  20: 9.805 s/op
Iteration  21: 9.871 s/op
Iteration  22: 9.821 s/op
Iteration  23: 9.820 s/op
Iteration  24: 9.879 s/op
Iteration  25: 9.847 s/op
Iteration  26: 9.821 s/op
Iteration  27: 9.849 s/op
Iteration  28: 9.854 s/op
Iteration  29: 9.836 s/op
Iteration  30: 9.876 s/op
Iteration  31: 9.874 s/op
Iteration  32: 9.830 s/op
Iteration  33: 9.821 s/op
Iteration  34: 9.925 s/op
Iteration  35: 9.831 s/op
Iteration  36: 9.870 s/op
Iteration  37: 9.798 s/op
Iteration  38: 9.892 s/op
Iteration  39: 9.792 s/op
Iteration  40: 9.842 s/op
Iteration  41: 9.850 s/op
Iteration  42: 9.809 s/op
Iteration  43: 9.840 s/op
Iteration  44: 9.882 s/op
Iteration  45: 9.888 s/op
Iteration  46: 9.910 s/op
Iteration  47: 9.836 s/op
Iteration  48: 9.874 s/op
Iteration  49: 9.802 s/op
Iteration  50: 9.864 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.855 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [ 9.700,  9.725) = 0 
    [ 9.725,  9.750) = 0 
    [ 9.750,  9.775) = 0 
    [ 9.775,  9.800) = 2 
    [ 9.800,  9.825) = 8 
    [ 9.825,  9.850) = 17 
    [ 9.850,  9.875) = 10 
    [ 9.875,  9.900) = 8 
    [ 9.900,  9.925) = 3 
    [ 9.925,  9.950) = 0 
    [ 9.950,  9.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.792 s/op
     p(50.0000) =      9.848 s/op
     p(90.0000) =      9.906 s/op
     p(95.0000) =      9.939 s/op
     p(99.0000) =      9.980 s/op
     p(99.9000) =      9.980 s/op
     p(99.9900) =      9.980 s/op
     p(99.9990) =      9.980 s/op
     p(99.9999) =      9.980 s/op
    p(100.0000) =      9.980 s/op


# Run complete. Total time: 00:08:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  9.855 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ce-19.1.1_1564674154468.json
{"wallclock_times": [493.644053803], "core_cycle_counts": [[453332774364], [220463142936], [378866829485], [536941427984]], "aperf_counts": [[452288072381], [220375048465], [378793933359], [536880007256]], "mperf_counts": [[452306272298], [220379753560], [378800398110], [536888125854]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:50:48: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:50:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:50:49: INFO] 507 executions left in scheduler queue
[2019-08-01 17:50:49: INFO] Executions until ETA known: 4005
[2019-08-01 17:50:49: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:50:49: INFO] Estimated completion (next execution): 2019-08-01 18:01:33 (0:10:43 from now)
[2019-08-01 17:50:49: INFO] Reboot in preparation for next execution
[2019-08-01 17:57:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.776 s/op
Iteration   2: 3.300 s/op
Iteration   3: 3.313 s/op
Iteration   4: 3.406 s/op
Iteration   5: 3.276 s/op
Iteration   6: 3.307 s/op
Iteration   7: 3.270 s/op
Iteration   8: 3.302 s/op
Iteration   9: 3.325 s/op
Iteration  10: 3.311 s/op
Iteration  11: 3.306 s/op
Iteration  12: 3.310 s/op
Iteration  13: 3.299 s/op
Iteration  14: 3.304 s/op
Iteration  15: 3.315 s/op
Iteration  16: 3.304 s/op
Iteration  17: 3.312 s/op
Iteration  18: 3.290 s/op
Iteration  19: 3.306 s/op
Iteration  20: 3.300 s/op
Iteration  21: 3.327 s/op
Iteration  22: 3.310 s/op
Iteration  23: 3.312 s/op
Iteration  24: 3.294 s/op
Iteration  25: 3.312 s/op
Iteration  26: 3.310 s/op
Iteration  27: 3.307 s/op
Iteration  28: 3.289 s/op
Iteration  29: 3.309 s/op
Iteration  30: 3.290 s/op
Iteration  31: 3.310 s/op
Iteration  32: 3.307 s/op
Iteration  33: 3.305 s/op
Iteration  34: 3.307 s/op
Iteration  35: 3.324 s/op
Iteration  36: 3.288 s/op
Iteration  37: 3.322 s/op
Iteration  38: 3.293 s/op
Iteration  39: 3.318 s/op
Iteration  40: 3.303 s/op
Iteration  41: 3.314 s/op
Iteration  42: 3.300 s/op
Iteration  43: 3.322 s/op
Iteration  44: 3.309 s/op
Iteration  45: 3.311 s/op
Iteration  46: 3.286 s/op
Iteration  47: 3.327 s/op
Iteration  48: 3.302 s/op
Iteration  49: 3.318 s/op
Iteration  50: 3.306 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.317 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 11 
    [3.300, 3.350) = 37 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 1 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.270 s/op
     p(50.0000) =      3.307 s/op
     p(90.0000) =      3.325 s/op
     p(95.0000) =      3.363 s/op
     p(99.0000) =      3.776 s/op
     p(99.9000) =      3.776 s/op
     p(99.9900) =      3.776 s/op
     p(99.9990) =      3.776 s/op
     p(99.9999) =      3.776 s/op
    p(100.0000) =      3.776 s/op


# Run complete. Total time: 00:02:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.317 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ce-19.1.1_1564674904637.json
{"wallclock_times": [166.84144124500003], "core_cycle_counts": [[146656140983], [224552117849], [144649600495], [65477058820]], "aperf_counts": [[146253027812], [224521824938], [144610717061], [65439673359]], "mperf_counts": [[146261557594], [224537550078], [144613466086], [65442100368]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:57:51: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:57:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:57:52: INFO] 506 executions left in scheduler queue
[2019-08-01 17:57:52: INFO] Executions until ETA known: 3999
[2019-08-01 17:57:52: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:57:52: INFO] Estimated completion (next execution): 2019-08-01 18:03:09 (0:05:17 from now)
[2019-08-01 17:57:52: INFO] Reboot in preparation for next execution
[2019-08-01 18:04:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.640 s/op
Iteration   2: 3.218 s/op
Iteration   3: 3.154 s/op
Iteration   4: 3.277 s/op
Iteration   5: 3.155 s/op
Iteration   6: 3.194 s/op
Iteration   7: 3.130 s/op
Iteration   8: 3.144 s/op
Iteration   9: 3.137 s/op
Iteration  10: 3.176 s/op
Iteration  11: 3.159 s/op
Iteration  12: 3.161 s/op
Iteration  13: 3.122 s/op
Iteration  14: 3.145 s/op
Iteration  15: 3.144 s/op
Iteration  16: 3.175 s/op
Iteration  17: 3.120 s/op
Iteration  18: 3.129 s/op
Iteration  19: 3.158 s/op
Iteration  20: 3.146 s/op
Iteration  21: 3.139 s/op
Iteration  22: 3.132 s/op
Iteration  23: 3.110 s/op
Iteration  24: 3.123 s/op
Iteration  25: 3.162 s/op
Iteration  26: 3.161 s/op
Iteration  27: 3.129 s/op
Iteration  28: 3.167 s/op
Iteration  29: 3.121 s/op
Iteration  30: 3.127 s/op
Iteration  31: 3.122 s/op
Iteration  32: 3.146 s/op
Iteration  33: 3.155 s/op
Iteration  34: 3.157 s/op
Iteration  35: 3.169 s/op
Iteration  36: 3.164 s/op
Iteration  37: 3.115 s/op
Iteration  38: 3.172 s/op
Iteration  39: 3.117 s/op
Iteration  40: 3.142 s/op
Iteration  41: 3.155 s/op
Iteration  42: 3.150 s/op
Iteration  43: 3.136 s/op
Iteration  44: 3.154 s/op
Iteration  45: 3.129 s/op
Iteration  46: 3.135 s/op
Iteration  47: 3.131 s/op
Iteration  48: 3.162 s/op
Iteration  49: 3.131 s/op
Iteration  50: 3.167 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.159 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [3.100, 3.150) = 27 
    [3.150, 3.200) = 20 
    [3.200, 3.250) = 1 
    [3.250, 3.300) = 1 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.110 s/op
     p(50.0000) =      3.146 s/op
     p(90.0000) =      3.176 s/op
     p(95.0000) =      3.244 s/op
     p(99.0000) =      3.640 s/op
     p(99.9000) =      3.640 s/op
     p(99.9900) =      3.640 s/op
     p(99.9990) =      3.640 s/op
     p(99.9999) =      3.640 s/op
    p(100.0000) =      3.640 s/op


# Run complete. Total time: 00:02:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.159 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ce-19.1.1_1564675327601.json
{"wallclock_times": [158.91730055399998], "core_cycle_counts": [[163619945173], [124378167539], [136576129263], [95755922093]], "aperf_counts": [[163276103090], [124334230084], [136550647848], [95733442840]], "mperf_counts": [[163281877852], [124348025548], [136553276720], [95743754202]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 18:04:46: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 18:04:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:04:47: INFO] 505 executions left in scheduler queue
[2019-08-01 18:04:47: INFO] Executions until ETA known: 3987
[2019-08-01 18:04:47: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-08-01 18:04:47: INFO] Estimated completion (next execution): 2019-08-01 18:09:56 (0:05:09 from now)
[2019-08-01 18:04:47: INFO] Reboot in preparation for next execution
[2019-08-01 18:09:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 18:09:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 18:09:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 18:09:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 18:09:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 18:09:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 18:20:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.868 s/op
Iteration   2: 12.730 s/op
Iteration   3: 12.889 s/op
Iteration   4: 13.288 s/op
Iteration   5: 13.329 s/op
Iteration   6: 13.315 s/op
Iteration   7: 13.317 s/op
Iteration   8: 13.297 s/op
Iteration   9: 13.290 s/op
Iteration  10: 13.289 s/op
Iteration  11: 13.301 s/op
Iteration  12: 13.350 s/op
Iteration  13: 13.300 s/op
Iteration  14: 13.278 s/op
Iteration  15: 13.279 s/op
Iteration  16: 13.277 s/op
Iteration  17: 13.304 s/op
Iteration  18: 13.315 s/op
Iteration  19: 13.323 s/op
Iteration  20: 13.290 s/op
Iteration  21: 13.307 s/op
Iteration  22: 13.291 s/op
Iteration  23: 13.305 s/op
Iteration  24: 13.285 s/op
Iteration  25: 13.305 s/op
Iteration  26: 13.297 s/op
Iteration  27: 13.291 s/op
Iteration  28: 13.289 s/op
Iteration  29: 13.283 s/op
Iteration  30: 13.300 s/op
Iteration  31: 13.314 s/op
Iteration  32: 13.281 s/op
Iteration  33: 13.286 s/op
Iteration  34: 13.298 s/op
Iteration  35: 13.305 s/op
Iteration  36: 13.293 s/op
Iteration  37: 13.367 s/op
Iteration  38: 13.294 s/op
Iteration  39: 13.278 s/op
Iteration  40: 13.347 s/op
Iteration  41: 13.342 s/op
Iteration  42: 13.344 s/op
Iteration  43: 13.293 s/op
Iteration  44: 13.299 s/op
Iteration  45: 13.292 s/op
Iteration  46: 13.336 s/op
Iteration  47: 13.302 s/op
Iteration  48: 13.301 s/op
Iteration  49: 13.266 s/op
Iteration  50: 13.297 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.294 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 1 
    [12.750, 12.875) = 0 
    [12.875, 13.000) = 1 
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 47 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.730 s/op
     p(50.0000) =     13.298 s/op
     p(90.0000) =     13.343 s/op
     p(95.0000) =     13.357 s/op
     p(99.0000) =     13.868 s/op
     p(99.9000) =     13.868 s/op
     p(99.9900) =     13.868 s/op
     p(99.9990) =     13.868 s/op
     p(99.9999) =     13.868 s/op
    p(100.0000) =     13.868 s/op


# Run complete. Total time: 00:11:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.294 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_11.0.4_1564675750793.json
{"wallclock_times": [666.254303744], "core_cycle_counts": [[292751961173], [518499601739], [544072277933], [814542810085]], "aperf_counts": [[290624768434], [518362325554], [543944359219], [814450731957]], "mperf_counts": [[290631960830], [518362911532], [543944333534], [814450724152]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 18:20:17: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-08-01 18:20:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:20:18: INFO] 504 executions left in scheduler queue
[2019-08-01 18:20:18: INFO] Executions until ETA known: 3946
[2019-08-01 18:20:18: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:20:18: INFO] Estimated completion (next execution): 2019-08-01 18:33:54 (0:13:36 from now)
[2019-08-01 18:20:18: INFO] Reboot in preparation for next execution
[2019-08-01 18:24:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 18:24:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 18:24:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 18:24:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 18:24:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 18:26:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.674 s/op
Iteration   2: 2.542 s/op
Iteration   3: 2.513 s/op
Iteration   4: 2.470 s/op
Iteration   5: 2.529 s/op
Iteration   6: 2.517 s/op
Iteration   7: 2.478 s/op
Iteration   8: 2.531 s/op
Iteration   9: 2.515 s/op
Iteration  10: 2.524 s/op
Iteration  11: 2.533 s/op
Iteration  12: 2.516 s/op
Iteration  13: 2.506 s/op
Iteration  14: 2.387 s/op
Iteration  15: 2.429 s/op
Iteration  16: 2.492 s/op
Iteration  17: 2.516 s/op
Iteration  18: 2.513 s/op
Iteration  19: 2.323 s/op
Iteration  20: 2.443 s/op
Iteration  21: 2.518 s/op
Iteration  22: 2.496 s/op
Iteration  23: 2.488 s/op
Iteration  24: 2.399 s/op
Iteration  25: 2.517 s/op
Iteration  26: 2.514 s/op
Iteration  27: 2.244 s/op
Iteration  28: 2.482 s/op
Iteration  29: 2.484 s/op
Iteration  30: 2.522 s/op
Iteration  31: 2.506 s/op
Iteration  32: 2.514 s/op
Iteration  33: 2.438 s/op
Iteration  34: 2.517 s/op
Iteration  35: 2.506 s/op
Iteration  36: 2.392 s/op
Iteration  37: 2.400 s/op
Iteration  38: 2.526 s/op
Iteration  39: 2.517 s/op
Iteration  40: 2.469 s/op
Iteration  41: 2.505 s/op
Iteration  42: 2.527 s/op
Iteration  43: 2.518 s/op
Iteration  44: 2.507 s/op
Iteration  45: 2.515 s/op
Iteration  46: 2.432 s/op
Iteration  47: 2.515 s/op
Iteration  48: 2.502 s/op
Iteration  49: 2.513 s/op
Iteration  50: 2.518 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.489 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 3 
    [2.400, 2.450) = 5 
    [2.450, 2.500) = 8 
    [2.500, 2.550) = 31 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.244 s/op
     p(50.0000) =      2.513 s/op
     p(90.0000) =      2.528 s/op
     p(95.0000) =      2.537 s/op
     p(99.0000) =      2.674 s/op
     p(99.9000) =      2.674 s/op
     p(99.9900) =      2.674 s/op
     p(99.9990) =      2.674 s/op
     p(99.9999) =      2.674 s/op
    p(100.0000) =      2.674 s/op


# Run complete. Total time: 00:02:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.489 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_11.0.4_1564676667412.json
{"wallclock_times": [125.49670299100003], "core_cycle_counts": [[66371564465], [159951101582], [119419303960], [30728352759]], "aperf_counts": [[65985901522], [159917143946], [119383968075], [30699945287]], "mperf_counts": [[74396784540], [178894105588], [134011418790], [33783117016]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 18:26:32: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:26:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:26:33: INFO] 503 executions left in scheduler queue
[2019-08-01 18:26:33: INFO] Executions until ETA known: 3939
[2019-08-01 18:26:33: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:26:33: INFO] Estimated completion (next execution): 2019-08-01 18:31:09 (0:04:35 from now)
[2019-08-01 18:26:33: INFO] Reboot in preparation for next execution
[2019-08-01 18:30:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 18:30:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 18:30:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 18:30:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 18:30:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 18:31:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.435 s/op
Iteration   2: 2.403 s/op
Iteration   3: 2.446 s/op
Iteration   4: 2.611 s/op
Iteration   5: 2.268 s/op
Iteration   6: 2.275 s/op
Iteration   7: 2.249 s/op
Iteration   8: 2.249 s/op
Iteration   9: 2.244 s/op
Iteration  10: 2.248 s/op
Iteration  11: 2.249 s/op
Iteration  12: 2.247 s/op
Iteration  13: 2.247 s/op
Iteration  14: 2.245 s/op
Iteration  15: 2.248 s/op
Iteration  16: 2.251 s/op
Iteration  17: 2.241 s/op
Iteration  18: 2.243 s/op
Iteration  19: 2.243 s/op
Iteration  20: 2.243 s/op
Iteration  21: 2.247 s/op
Iteration  22: 2.241 s/op
Iteration  23: 2.242 s/op
Iteration  24: 2.242 s/op
Iteration  25: 2.244 s/op
Iteration  26: 2.238 s/op
Iteration  27: 2.241 s/op
Iteration  28: 2.241 s/op
Iteration  29: 2.240 s/op
Iteration  30: 2.244 s/op
Iteration  31: 2.242 s/op
Iteration  32: 2.242 s/op
Iteration  33: 2.242 s/op
Iteration  34: 2.240 s/op
Iteration  35: 2.251 s/op
Iteration  36: 2.242 s/op
Iteration  37: 2.244 s/op
Iteration  38: 2.241 s/op
Iteration  39: 2.240 s/op
Iteration  40: 2.242 s/op
Iteration  41: 2.244 s/op
Iteration  42: 2.243 s/op
Iteration  43: 2.240 s/op
Iteration  44: 2.243 s/op
Iteration  45: 2.239 s/op
Iteration  46: 2.240 s/op
Iteration  47: 2.245 s/op
Iteration  48: 2.246 s/op
Iteration  49: 2.247 s/op
Iteration  50: 2.241 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.263 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [2.200, 2.250) = 42 
    [2.250, 2.300) = 4 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 3 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.238 s/op
     p(50.0000) =      2.243 s/op
     p(90.0000) =      2.274 s/op
     p(95.0000) =      2.440 s/op
     p(99.0000) =      2.611 s/op
     p(99.9000) =      2.611 s/op
     p(99.9900) =      2.611 s/op
     p(99.9990) =      2.611 s/op
     p(99.9999) =      2.611 s/op
    p(100.0000) =      2.611 s/op


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.263 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_11.0.4_1564677005559.json
{"wallclock_times": [114.15204612600002], "core_cycle_counts": [[45933266164], [156604218397], [41999255319], [128840510091]], "aperf_counts": [[45603868658], [156577486418], [41966241218], [128818180550]], "mperf_counts": [[45756716688], [156632777480], [42139970912], [128884939996]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 18:31:59: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:32:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:32:00: INFO] 502 executions left in scheduler queue
[2019-08-01 18:32:00: INFO] Executions until ETA known: 3924
[2019-08-01 18:32:00: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:32:00: INFO] Estimated completion (next execution): 2019-08-01 18:36:25 (0:04:24 from now)
[2019-08-01 18:32:00: INFO] Reboot in preparation for next execution
[2019-08-01 18:42:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.753 s/op
Iteration   2: 7.286 s/op
Iteration   3: 7.229 s/op
Iteration   4: 7.247 s/op
Iteration   5: 7.260 s/op
Iteration   6: 7.214 s/op
Iteration   7: 7.276 s/op
Iteration   8: 7.233 s/op
Iteration   9: 7.239 s/op
Iteration  10: 7.248 s/op
Iteration  11: 7.224 s/op
Iteration  12: 7.256 s/op
Iteration  13: 7.233 s/op
Iteration  14: 7.246 s/op
Iteration  15: 7.280 s/op
Iteration  16: 7.265 s/op
Iteration  17: 7.238 s/op
Iteration  18: 7.276 s/op
Iteration  19: 7.230 s/op
Iteration  20: 7.239 s/op
Iteration  21: 7.254 s/op
Iteration  22: 7.234 s/op
Iteration  23: 7.247 s/op
Iteration  24: 7.285 s/op
Iteration  25: 7.251 s/op
Iteration  26: 7.251 s/op
Iteration  27: 7.289 s/op
Iteration  28: 7.242 s/op
Iteration  29: 7.249 s/op
Iteration  30: 7.271 s/op
Iteration  31: 7.220 s/op
Iteration  32: 7.283 s/op
Iteration  33: 7.241 s/op
Iteration  34: 7.247 s/op
Iteration  35: 7.281 s/op
Iteration  36: 7.240 s/op
Iteration  37: 7.243 s/op
Iteration  38: 7.282 s/op
Iteration  39: 7.233 s/op
Iteration  40: 7.220 s/op
Iteration  41: 7.298 s/op
Iteration  42: 7.239 s/op
Iteration  43: 7.252 s/op
Iteration  44: 7.284 s/op
Iteration  45: 7.236 s/op
Iteration  46: 7.226 s/op
Iteration  47: 7.284 s/op
Iteration  48: 7.258 s/op
Iteration  49: 7.272 s/op
Iteration  50: 7.274 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.263 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [7.200, 7.250) = 26 
    [7.250, 7.300) = 23 
    [7.300, 7.350) = 0 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 0 
    [7.450, 7.500) = 0 
    [7.500, 7.550) = 0 
    [7.550, 7.600) = 0 
    [7.600, 7.650) = 0 
    [7.650, 7.700) = 0 
    [7.700, 7.750) = 0 
    [7.750, 7.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.214 s/op
     p(50.0000) =      7.249 s/op
     p(90.0000) =      7.285 s/op
     p(95.0000) =      7.293 s/op
     p(99.0000) =      7.753 s/op
     p(99.9000) =      7.753 s/op
     p(99.9900) =      7.753 s/op
     p(99.9990) =      7.753 s/op
     p(99.9999) =      7.753 s/op
    p(100.0000) =      7.753 s/op


# Run complete. Total time: 00:06:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.263 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot-8u222-b10_1564677370671.json
{"wallclock_times": [364.144208748], "core_cycle_counts": [[299504571857], [360463253013], [221090457322], [366794276100]], "aperf_counts": [[298582851750], [360378139650], [221011257420], [366735212153]], "mperf_counts": [[298589096052], [360378209188], [221015544160], [366736029748]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 18:42:14: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:42:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:42:15: INFO] 501 executions left in scheduler queue
[2019-08-01 18:42:15: INFO] Executions until ETA known: 3905
[2019-08-01 18:42:15: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:42:15: INFO] Estimated completion (next execution): 2019-08-01 18:50:50 (0:08:34 from now)
[2019-08-01 18:42:15: INFO] Reboot in preparation for next execution
[2019-08-01 18:56:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.627 s/op
Iteration   2: 11.856 s/op
Iteration   3: 11.664 s/op
Iteration   4: 11.675 s/op
Iteration   5: 11.659 s/op
Iteration   6: 11.726 s/op
Iteration   7: 11.709 s/op
Iteration   8: 11.717 s/op
Iteration   9: 11.715 s/op
Iteration  10: 11.731 s/op
Iteration  11: 11.725 s/op
Iteration  12: 11.737 s/op
Iteration  13: 11.731 s/op
Iteration  14: 11.727 s/op
Iteration  15: 11.733 s/op
Iteration  16: 11.696 s/op
Iteration  17: 11.750 s/op
Iteration  18: 11.688 s/op
Iteration  19: 11.739 s/op
Iteration  20: 11.710 s/op
Iteration  21: 11.699 s/op
Iteration  22: 11.746 s/op
Iteration  23: 11.733 s/op
Iteration  24: 11.736 s/op
Iteration  25: 11.710 s/op
Iteration  26: 11.797 s/op
Iteration  27: 11.706 s/op
Iteration  28: 11.706 s/op
Iteration  29: 11.771 s/op
Iteration  30: 11.730 s/op
Iteration  31: 11.722 s/op
Iteration  32: 11.766 s/op
Iteration  33: 11.736 s/op
Iteration  34: 11.716 s/op
Iteration  35: 11.719 s/op
Iteration  36: 11.718 s/op
Iteration  37: 11.735 s/op
Iteration  38: 11.735 s/op
Iteration  39: 11.711 s/op
Iteration  40: 11.734 s/op
Iteration  41: 11.735 s/op
Iteration  42: 11.764 s/op
Iteration  43: 11.692 s/op
Iteration  44: 11.731 s/op
Iteration  45: 11.744 s/op
Iteration  46: 11.755 s/op
Iteration  47: 11.758 s/op
Iteration  48: 11.743 s/op
Iteration  49: 11.748 s/op
Iteration  50: 11.723 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.727 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [11.600, 11.625) = 0 
    [11.625, 11.650) = 1 
    [11.650, 11.675) = 2 
    [11.675, 11.700) = 5 
    [11.700, 11.725) = 13 
    [11.725, 11.750) = 22 
    [11.750, 11.775) = 5 
    [11.775, 11.800) = 1 
    [11.800, 11.825) = 0 
    [11.825, 11.850) = 0 
    [11.850, 11.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     11.627 s/op
     p(50.0000) =     11.730 s/op
     p(90.0000) =     11.764 s/op
     p(95.0000) =     11.783 s/op
     p(99.0000) =     11.856 s/op
     p(99.9000) =     11.856 s/op
     p(99.9900) =     11.856 s/op
     p(99.9990) =     11.856 s/op
     p(99.9999) =     11.856 s/op
    p(100.0000) =     11.856 s/op


# Run complete. Total time: 00:09:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.727 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot-8u222-b10_1564677991544.json
{"wallclock_times": [587.181676666], "core_cycle_counts": [[470840280866], [452238485308], [564973643448], [421793967077]], "aperf_counts": [[469530874643], [452139495288], [564942312089], [421760747673]], "mperf_counts": [[469538246210], [452149026478], [564944834196], [421760889248]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 18:56:18: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:56:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:56:19: INFO] 500 executions left in scheduler queue
[2019-08-01 18:56:19: INFO] Executions until ETA known: 3899
[2019-08-01 18:56:19: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:56:19: INFO] Estimated completion (next execution): 2019-08-01 19:08:37 (0:12:17 from now)
[2019-08-01 18:56:19: INFO] Reboot in preparation for next execution
[2019-08-01 19:06:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.195 s/op
Iteration   2: 6.587 s/op
Iteration   3: 6.394 s/op
Iteration   4: 6.503 s/op
Iteration   5: 6.513 s/op
Iteration   6: 6.482 s/op
Iteration   7: 6.487 s/op
Iteration   8: 6.476 s/op
Iteration   9: 6.538 s/op
Iteration  10: 6.510 s/op
Iteration  11: 6.514 s/op
Iteration  12: 6.490 s/op
Iteration  13: 6.541 s/op
Iteration  14: 6.496 s/op
Iteration  15: 6.490 s/op
Iteration  16: 6.486 s/op
Iteration  17: 6.504 s/op
Iteration  18: 6.501 s/op
Iteration  19: 6.491 s/op
Iteration  20: 6.484 s/op
Iteration  21: 6.551 s/op
Iteration  22: 6.542 s/op
Iteration  23: 6.491 s/op
Iteration  24: 6.504 s/op
Iteration  25: 6.478 s/op
Iteration  26: 6.498 s/op
Iteration  27: 6.497 s/op
Iteration  28: 6.480 s/op
Iteration  29: 6.511 s/op
Iteration  30: 6.488 s/op
Iteration  31: 6.495 s/op
Iteration  32: 6.535 s/op
Iteration  33: 6.500 s/op
Iteration  34: 6.509 s/op
Iteration  35: 6.490 s/op
Iteration  36: 6.491 s/op
Iteration  37: 6.499 s/op
Iteration  38: 6.488 s/op
Iteration  39: 6.513 s/op
Iteration  40: 6.498 s/op
Iteration  41: 6.469 s/op
Iteration  42: 6.512 s/op
Iteration  43: 6.492 s/op
Iteration  44: 6.460 s/op
Iteration  45: 6.518 s/op
Iteration  46: 6.494 s/op
Iteration  47: 6.488 s/op
Iteration  48: 6.493 s/op
Iteration  49: 6.500 s/op
Iteration  50: 6.503 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.513 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 1 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 28 
    [6.500, 6.550) = 18 
    [6.550, 6.600) = 2 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.394 s/op
     p(50.0000) =      6.498 s/op
     p(90.0000) =      6.541 s/op
     p(95.0000) =      6.567 s/op
     p(99.0000) =      7.195 s/op
     p(99.9000) =      7.195 s/op
     p(99.9900) =      7.195 s/op
     p(99.9990) =      7.195 s/op
     p(99.9999) =      7.195 s/op
    p(100.0000) =      7.195 s/op


# Run complete. Total time: 00:05:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.513 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot-8u222-b10_1564678848728.json
{"wallclock_times": [326.584868106], "core_cycle_counts": [[236920205690], [315864494822], [234802363929], [275383771058]], "aperf_counts": [[236137632961], [315801223485], [234776265857], [275362642553]], "mperf_counts": [[236144552636], [315803530010], [234776363204], [275362686410]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:06:15: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 19:06:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:06:16: INFO] 499 executions left in scheduler queue
[2019-08-01 19:06:16: INFO] Executions until ETA known: 3897
[2019-08-01 19:06:16: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 19:06:16: INFO] Estimated completion (next execution): 2019-08-01 19:14:13 (0:07:56 from now)
[2019-08-01 19:06:16: INFO] Reboot in preparation for next execution
[2019-08-01 19:24:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.173 s/op
Iteration   2: 16.614 s/op
Iteration   3: 16.444 s/op
Iteration   4: 16.420 s/op
Iteration   5: 16.453 s/op
Iteration   6: 16.425 s/op
Iteration   7: 16.433 s/op
Iteration   8: 16.465 s/op
Iteration   9: 16.417 s/op
Iteration  10: 16.448 s/op
Iteration  11: 16.433 s/op
Iteration  12: 16.396 s/op
Iteration  13: 16.454 s/op
Iteration  14: 16.464 s/op
Iteration  15: 16.404 s/op
Iteration  16: 16.431 s/op
Iteration  17: 16.372 s/op
Iteration  18: 16.366 s/op
Iteration  19: 16.376 s/op
Iteration  20: 16.359 s/op
Iteration  21: 16.413 s/op
Iteration  22: 16.379 s/op
Iteration  23: 16.445 s/op
Iteration  24: 16.418 s/op
Iteration  25: 16.417 s/op
Iteration  26: 16.372 s/op
Iteration  27: 16.721 s/op
Iteration  28: 16.370 s/op
Iteration  29: 16.423 s/op
Iteration  30: 16.414 s/op
Iteration  31: 16.385 s/op
Iteration  32: 16.361 s/op
Iteration  33: 16.369 s/op
Iteration  34: 16.385 s/op
Iteration  35: 16.350 s/op
Iteration  36: 16.436 s/op
Iteration  37: 16.401 s/op
Iteration  38: 16.451 s/op
Iteration  39: 16.416 s/op
Iteration  40: 16.366 s/op
Iteration  41: 16.374 s/op
Iteration  42: 16.423 s/op
Iteration  43: 16.383 s/op
Iteration  44: 16.402 s/op
Iteration  45: 16.409 s/op
Iteration  46: 16.422 s/op
Iteration  47: 16.422 s/op
Iteration  48: 16.379 s/op
Iteration  49: 16.439 s/op
Iteration  50: 16.402 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.414 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [16.100, 16.150) = 0 
    [16.150, 16.200) = 1 
    [16.200, 16.250) = 0 
    [16.250, 16.300) = 0 
    [16.300, 16.350) = 1 
    [16.350, 16.400) = 16 
    [16.400, 16.450) = 25 
    [16.450, 16.500) = 5 
    [16.500, 16.550) = 0 
    [16.550, 16.600) = 0 
    [16.600, 16.650) = 1 
    [16.650, 16.700) = 0 
    [16.700, 16.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.173 s/op
     p(50.0000) =     16.415 s/op
     p(90.0000) =     16.454 s/op
     p(95.0000) =     16.532 s/op
     p(99.0000) =     16.721 s/op
     p(99.9000) =     16.721 s/op
     p(99.9900) =     16.721 s/op
     p(99.9990) =     16.721 s/op
     p(99.9999) =     16.721 s/op
    p(100.0000) =     16.721 s/op


# Run complete. Total time: 00:13:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.414 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot-8u222-b10_1564679426503.json
{"wallclock_times": [821.571551638], "core_cycle_counts": [[708926540046], [581212015119], [447476820526], [905780241567]], "aperf_counts": [[707144821054], [581074404628], [447357459411], [905691177166]], "mperf_counts": [[707149874098], [581084255354], [447357514924], [905691347980]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:24:08: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 19:24:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:24:09: INFO] 498 executions left in scheduler queue
[2019-08-01 19:24:09: INFO] Executions until ETA known: 3895
[2019-08-01 19:24:09: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:24:09: INFO] Estimated completion (next execution): 2019-08-01 19:40:20 (0:16:11 from now)
[2019-08-01 19:24:09: INFO] Reboot in preparation for next execution
[2019-08-01 19:30:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.886 s/op
Iteration   2: 3.564 s/op
Iteration   3: 3.422 s/op
Iteration   4: 3.429 s/op
Iteration   5: 3.422 s/op
Iteration   6: 3.445 s/op
Iteration   7: 3.423 s/op
Iteration   8: 3.444 s/op
Iteration   9: 3.416 s/op
Iteration  10: 3.445 s/op
Iteration  11: 3.462 s/op
Iteration  12: 3.415 s/op
Iteration  13: 3.423 s/op
Iteration  14: 3.418 s/op
Iteration  15: 3.456 s/op
Iteration  16: 3.410 s/op
Iteration  17: 3.406 s/op
Iteration  18: 3.420 s/op
Iteration  19: 3.404 s/op
Iteration  20: 3.441 s/op
Iteration  21: 3.403 s/op
Iteration  22: 3.412 s/op
Iteration  23: 3.452 s/op
Iteration  24: 3.427 s/op
Iteration  25: 3.398 s/op
Iteration  26: 3.440 s/op
Iteration  27: 3.442 s/op
Iteration  28: 3.413 s/op
Iteration  29: 3.413 s/op
Iteration  30: 3.407 s/op
Iteration  31: 3.412 s/op
Iteration  32: 3.418 s/op
Iteration  33: 3.444 s/op
Iteration  34: 3.452 s/op
Iteration  35: 3.440 s/op
Iteration  36: 3.406 s/op
Iteration  37: 3.425 s/op
Iteration  38: 3.436 s/op
Iteration  39: 3.437 s/op
Iteration  40: 3.417 s/op
Iteration  41: 3.425 s/op
Iteration  42: 3.414 s/op
Iteration  43: 3.425 s/op
Iteration  44: 3.417 s/op
Iteration  45: 3.441 s/op
Iteration  46: 3.450 s/op
Iteration  47: 3.428 s/op
Iteration  48: 3.414 s/op
Iteration  49: 3.433 s/op
Iteration  50: 3.458 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.439 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 42 
    [3.450, 3.500) = 5 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.398 s/op
     p(50.0000) =      3.425 s/op
     p(90.0000) =      3.456 s/op
     p(95.0000) =      3.508 s/op
     p(99.0000) =      3.886 s/op
     p(99.9000) =      3.886 s/op
     p(99.9900) =      3.886 s/op
     p(99.9990) =      3.886 s/op
     p(99.9999) =      3.886 s/op
    p(100.0000) =      3.886 s/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.439 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_graalvm-ce-19.1.1_1564680457885.json
{"wallclock_times": [172.92850131199998], "core_cycle_counts": [[117848706905], [163389351006], [174781709150], [109415975631]], "aperf_counts": [[117438887942], [163345782164], [174746114765], [109387603667]], "mperf_counts": [[117457087646], [163346364086], [174749376800], [109393616444]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:30:30: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:30:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:30:31: INFO] 497 executions left in scheduler queue
[2019-08-01 19:30:31: INFO] Executions until ETA known: 3890
[2019-08-01 19:30:31: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:30:31: INFO] Estimated completion (next execution): 2019-08-01 19:35:55 (0:05:23 from now)
[2019-08-01 19:30:31: INFO] Reboot in preparation for next execution
[2019-08-01 19:39:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.953 s/op
Iteration   2: 5.829 s/op
Iteration   3: 5.664 s/op
Iteration   4: 5.651 s/op
Iteration   5: 5.637 s/op
Iteration   6: 5.635 s/op
Iteration   7: 5.632 s/op
Iteration   8: 5.628 s/op
Iteration   9: 5.652 s/op
Iteration  10: 5.632 s/op
Iteration  11: 5.635 s/op
Iteration  12: 5.644 s/op
Iteration  13: 5.641 s/op
Iteration  14: 5.631 s/op
Iteration  15: 5.630 s/op
Iteration  16: 5.641 s/op
Iteration  17: 5.648 s/op
Iteration  18: 5.639 s/op
Iteration  19: 5.640 s/op
Iteration  20: 5.640 s/op
Iteration  21: 5.642 s/op
Iteration  22: 5.630 s/op
Iteration  23: 5.639 s/op
Iteration  24: 5.646 s/op
Iteration  25: 5.635 s/op
Iteration  26: 5.649 s/op
Iteration  27: 5.652 s/op
Iteration  28: 5.655 s/op
Iteration  29: 5.655 s/op
Iteration  30: 5.635 s/op
Iteration  31: 5.629 s/op
Iteration  32: 5.627 s/op
Iteration  33: 5.659 s/op
Iteration  34: 5.640 s/op
Iteration  35: 5.652 s/op
Iteration  36: 5.641 s/op
Iteration  37: 5.643 s/op
Iteration  38: 5.644 s/op
Iteration  39: 5.647 s/op
Iteration  40: 5.650 s/op
Iteration  41: 5.627 s/op
Iteration  42: 5.642 s/op
Iteration  43: 5.643 s/op
Iteration  44: 5.654 s/op
Iteration  45: 5.655 s/op
Iteration  46: 5.639 s/op
Iteration  47: 5.664 s/op
Iteration  48: 5.652 s/op
Iteration  49: 5.636 s/op
Iteration  50: 5.656 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.653 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [5.600, 5.625) = 0 
    [5.625, 5.650) = 34 
    [5.650, 5.675) = 14 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 0 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 1 
    [5.850, 5.875) = 0 
    [5.875, 5.900) = 0 
    [5.900, 5.925) = 0 
    [5.925, 5.950) = 0 
    [5.950, 5.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.627 s/op
     p(50.0000) =      5.642 s/op
     p(90.0000) =      5.658 s/op
     p(95.0000) =      5.738 s/op
     p(99.0000) =      5.953 s/op
     p(99.9000) =      5.953 s/op
     p(99.9900) =      5.953 s/op
     p(99.9990) =      5.953 s/op
     p(99.9999) =      5.953 s/op
    p(100.0000) =      5.953 s/op


# Run complete. Total time: 00:04:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.653 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_graalvm-ce-19.1.1_1564680889469.json
{"wallclock_times": [283.53531459699997], "core_cycle_counts": [[151721287816], [221950714108], [194844397734], [348830403929]], "aperf_counts": [[150994079276], [221912788936], [194810256238], [348811793263]], "mperf_counts": [[151009346712], [221929412950], [194811764676], [348812108838]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:39:33: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:39:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:39:34: INFO] 496 executions left in scheduler queue
[2019-08-01 19:39:34: INFO] Executions until ETA known: 3888
[2019-08-01 19:39:34: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:39:34: INFO] Estimated completion (next execution): 2019-08-01 19:46:47 (0:07:13 from now)
[2019-08-01 19:39:34: INFO] Reboot in preparation for next execution
[2019-08-01 19:47:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.324 s/op
Iteration   2: 3.699 s/op
Iteration   3: 3.676 s/op
Iteration   4: 3.597 s/op
Iteration   5: 3.634 s/op
Iteration   6: 3.636 s/op
Iteration   7: 3.702 s/op
Iteration   8: 3.655 s/op
Iteration   9: 3.720 s/op
Iteration  10: 3.652 s/op
Iteration  11: 3.656 s/op
Iteration  12: 3.704 s/op
Iteration  13: 3.643 s/op
Iteration  14: 3.641 s/op
Iteration  15: 3.705 s/op
Iteration  16: 3.644 s/op
Iteration  17: 3.647 s/op
Iteration  18: 3.711 s/op
Iteration  19: 3.649 s/op
Iteration  20: 3.639 s/op
Iteration  21: 3.657 s/op
Iteration  22: 3.718 s/op
Iteration  23: 3.656 s/op
Iteration  24: 3.647 s/op
Iteration  25: 3.702 s/op
Iteration  26: 3.669 s/op
Iteration  27: 3.640 s/op
Iteration  28: 3.662 s/op
Iteration  29: 3.722 s/op
Iteration  30: 3.644 s/op
Iteration  31: 3.663 s/op
Iteration  32: 3.727 s/op
Iteration  33: 3.640 s/op
Iteration  34: 3.656 s/op
Iteration  35: 3.661 s/op
Iteration  36: 3.725 s/op
Iteration  37: 3.652 s/op
Iteration  38: 3.664 s/op
Iteration  39: 3.722 s/op
Iteration  40: 3.660 s/op
Iteration  41: 3.741 s/op
Iteration  42: 3.669 s/op
Iteration  43: 3.699 s/op
Iteration  44: 3.655 s/op
Iteration  45: 3.652 s/op
Iteration  46: 3.725 s/op
Iteration  47: 3.654 s/op
Iteration  48: 3.641 s/op
Iteration  49: 3.710 s/op
Iteration  50: 3.672 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.685 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 13 
    [3.650, 3.700) = 21 
    [3.700, 3.750) = 14 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 0 
    [4.200, 4.250) = 0 
    [4.250, 4.300) = 0 
    [4.300, 4.350) = 1 
    [4.350, 4.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.597 s/op
     p(50.0000) =      3.661 s/op
     p(90.0000) =      3.725 s/op
     p(95.0000) =      3.733 s/op
     p(99.0000) =      4.324 s/op
     p(99.9000) =      4.324 s/op
     p(99.9900) =      4.324 s/op
     p(99.9990) =      4.324 s/op
     p(99.9999) =      4.324 s/op
    p(100.0000) =      4.324 s/op


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.685 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_graalvm-ce-19.1.1_1564681448427.json
{"wallclock_times": [185.29196738100003], "core_cycle_counts": [[158222135200], [167317242530], [185800480572], [157789028212]], "aperf_counts": [[157732139683], [167263550369], [185751935083], [157753174560]], "mperf_counts": [[158278932564], [167265271864], [185756025364], [157757560962]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:47:13: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:47:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:47:14: INFO] 495 executions left in scheduler queue
[2019-08-01 19:47:14: INFO] Executions until ETA known: 3878
[2019-08-01 19:47:14: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:47:14: INFO] Estimated completion (next execution): 2019-08-01 19:52:50 (0:05:35 from now)
[2019-08-01 19:47:14: INFO] Reboot in preparation for next execution
[2019-08-01 19:59:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.427 s/op
Iteration   2: 10.343 s/op
Iteration   3: 10.179 s/op
Iteration   4: 10.212 s/op
Iteration   5: 10.171 s/op
Iteration   6: 10.155 s/op
Iteration   7: 10.152 s/op
Iteration   8: 10.133 s/op
Iteration   9: 10.178 s/op
Iteration  10: 10.174 s/op
Iteration  11: 10.192 s/op
Iteration  12: 10.170 s/op
Iteration  13: 10.200 s/op
Iteration  14: 10.190 s/op
Iteration  15: 10.186 s/op
Iteration  16: 10.196 s/op
Iteration  17: 10.194 s/op
Iteration  18: 10.242 s/op
Iteration  19: 10.201 s/op
Iteration  20: 10.327 s/op
Iteration  21: 10.154 s/op
Iteration  22: 10.159 s/op
Iteration  23: 10.148 s/op
Iteration  24: 10.187 s/op
Iteration  25: 10.197 s/op
Iteration  26: 10.588 s/op
Iteration  27: 10.176 s/op
Iteration  28: 10.165 s/op
Iteration  29: 10.151 s/op
Iteration  30: 10.154 s/op
Iteration  31: 10.131 s/op
Iteration  32: 10.194 s/op
Iteration  33: 10.145 s/op
Iteration  34: 10.187 s/op
Iteration  35: 10.207 s/op
Iteration  36: 10.214 s/op
Iteration  37: 10.215 s/op
Iteration  38: 10.148 s/op
Iteration  39: 10.165 s/op
Iteration  40: 10.143 s/op
Iteration  41: 10.230 s/op
Iteration  42: 10.174 s/op
Iteration  43: 10.182 s/op
Iteration  44: 10.160 s/op
Iteration  45: 10.219 s/op
Iteration  46: 10.168 s/op
Iteration  47: 10.150 s/op
Iteration  48: 10.151 s/op
Iteration  49: 10.177 s/op
Iteration  50: 10.176 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.197 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [10.100, 10.150) = 6 
    [10.150, 10.200) = 32 
    [10.200, 10.250) = 8 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 2 
    [10.350, 10.400) = 0 
    [10.400, 10.450) = 1 
    [10.450, 10.500) = 0 
    [10.500, 10.550) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.131 s/op
     p(50.0000) =     10.178 s/op
     p(90.0000) =     10.241 s/op
     p(95.0000) =     10.381 s/op
     p(99.0000) =     10.588 s/op
     p(99.9000) =     10.588 s/op
     p(99.9900) =     10.588 s/op
     p(99.9990) =     10.588 s/op
     p(99.9999) =     10.588 s/op
    p(100.0000) =     10.588 s/op


# Run complete. Total time: 00:08:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.197 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_graalvm-ce-19.1.1_1564681885520.json
{"wallclock_times": [510.71872010399994], "core_cycle_counts": [[270092745226], [356047516266], [605243921153], [414927384111]], "aperf_counts": [[268756314143], [355977423079], [605214879097], [414899766584]], "mperf_counts": [[268773472652], [355980167932], [605220914632], [414905603628]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:59:56: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:59:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:59:57: INFO] 494 executions left in scheduler queue
[2019-08-01 19:59:57: INFO] Executions until ETA known: 3854
[2019-08-01 19:59:57: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 19:59:57: INFO] Estimated completion (next execution): 2019-08-01 20:10:58 (0:11:01 from now)
[2019-08-01 19:59:57: INFO] Reboot in preparation for next execution
[2019-08-01 20:05:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.802 s/op
Iteration   2: 1.612 s/op
Iteration   3: 1.588 s/op
Iteration   4: 1.673 s/op
Iteration   5: 1.579 s/op
Iteration   6: 1.579 s/op
Iteration   7: 1.580 s/op
Iteration   8: 1.581 s/op
Iteration   9: 1.585 s/op
Iteration  10: 1.588 s/op
Iteration  11: 1.584 s/op
Iteration  12: 1.578 s/op
Iteration  13: 1.582 s/op
Iteration  14: 1.579 s/op
Iteration  15: 1.586 s/op
Iteration  16: 1.594 s/op
Iteration  17: 1.582 s/op
Iteration  18: 1.586 s/op
Iteration  19: 1.579 s/op
Iteration  20: 1.584 s/op
Iteration  21: 1.577 s/op
Iteration  22: 1.580 s/op
Iteration  23: 1.582 s/op
Iteration  24: 1.579 s/op
Iteration  25: 1.576 s/op
Iteration  26: 1.580 s/op
Iteration  27: 1.579 s/op
Iteration  28: 1.583 s/op
Iteration  29: 1.582 s/op
Iteration  30: 1.584 s/op
Iteration  31: 1.575 s/op
Iteration  32: 1.582 s/op
Iteration  33: 1.579 s/op
Iteration  34: 1.572 s/op
Iteration  35: 1.578 s/op
Iteration  36: 1.577 s/op
Iteration  37: 1.577 s/op
Iteration  38: 1.591 s/op
Iteration  39: 1.580 s/op
Iteration  40: 1.584 s/op
Iteration  41: 1.582 s/op
Iteration  42: 1.583 s/op
Iteration  43: 1.581 s/op
Iteration  44: 1.581 s/op
Iteration  45: 1.584 s/op
Iteration  46: 1.576 s/op
Iteration  47: 1.578 s/op
Iteration  48: 1.579 s/op
Iteration  49: 1.578 s/op
Iteration  50: 1.576 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.588 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 1 
    [1.575, 1.600) = 46 
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.572 s/op
     p(50.0000) =      1.581 s/op
     p(90.0000) =      1.591 s/op
     p(95.0000) =      1.640 s/op
     p(99.0000) =      1.802 s/op
     p(99.9000) =      1.802 s/op
     p(99.9900) =      1.802 s/op
     p(99.9990) =      1.802 s/op
     p(99.9999) =      1.802 s/op
    p(100.0000) =      1.802 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.588 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_graalvm-ce-19.1.1_1564682663559.json
{"wallclock_times": [80.302028181], "core_cycle_counts": [[60835577946], [53114093830], [63080625303], [90438494334]], "aperf_counts": [[60589236317], [53086100887], [63053268360], [90418710561]], "mperf_counts": [[60602684694], [53101155726], [63055703226], [90420615756]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:05:43: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 20:05:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:05:44: INFO] 493 executions left in scheduler queue
[2019-08-01 20:05:44: INFO] Executions until ETA known: 3851
[2019-08-01 20:05:44: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 20:05:44: INFO] Estimated completion (next execution): 2019-08-01 20:09:35 (0:03:50 from now)
[2019-08-01 20:05:44: INFO] Reboot in preparation for next execution
[2019-08-01 20:11:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.616 s/op
Iteration   2: 1.574 s/op
Iteration   3: 1.527 s/op
Iteration   4: 1.626 s/op
Iteration   5: 1.528 s/op
Iteration   6: 1.526 s/op
Iteration   7: 1.522 s/op
Iteration   8: 1.549 s/op
Iteration   9: 1.523 s/op
Iteration  10: 1.522 s/op
Iteration  11: 1.523 s/op
Iteration  12: 1.522 s/op
Iteration  13: 1.524 s/op
Iteration  14: 1.524 s/op
Iteration  15: 1.524 s/op
Iteration  16: 1.519 s/op
Iteration  17: 1.527 s/op
Iteration  18: 1.523 s/op
Iteration  19: 1.518 s/op
Iteration  20: 1.524 s/op
Iteration  21: 1.521 s/op
Iteration  22: 1.522 s/op
Iteration  23: 1.518 s/op
Iteration  24: 1.521 s/op
Iteration  25: 1.519 s/op
Iteration  26: 1.523 s/op
Iteration  27: 1.518 s/op
Iteration  28: 1.519 s/op
Iteration  29: 1.520 s/op
Iteration  30: 1.520 s/op
Iteration  31: 1.523 s/op
Iteration  32: 1.524 s/op
Iteration  33: 1.519 s/op
Iteration  34: 1.517 s/op
Iteration  35: 1.525 s/op
Iteration  36: 1.521 s/op
Iteration  37: 1.521 s/op
Iteration  38: 1.520 s/op
Iteration  39: 1.521 s/op
Iteration  40: 1.520 s/op
Iteration  41: 1.521 s/op
Iteration  42: 1.526 s/op
Iteration  43: 1.519 s/op
Iteration  44: 1.523 s/op
Iteration  45: 1.521 s/op
Iteration  46: 1.524 s/op
Iteration  47: 1.524 s/op
Iteration  48: 1.520 s/op
Iteration  49: 1.520 s/op
Iteration  50: 1.524 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.527 ?(99.9%) 0.010 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 41 
    [1.525, 1.538) = 5 
    [1.538, 1.550) = 1 
    [1.550, 1.563) = 0 
    [1.563, 1.575) = 1 
    [1.575, 1.588) = 0 
    [1.588, 1.600) = 0 
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 1 
    [1.625, 1.638) = 1 
    [1.638, 1.650) = 0 
    [1.650, 1.663) = 0 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.517 s/op
     p(50.0000) =      1.522 s/op
     p(90.0000) =      1.528 s/op
     p(95.0000) =      1.593 s/op
     p(99.0000) =      1.626 s/op
     p(99.9000) =      1.626 s/op
     p(99.9900) =      1.626 s/op
     p(99.9990) =      1.626 s/op
     p(99.9999) =      1.626 s/op
    p(100.0000) =      1.626 s/op


# Run complete. Total time: 00:01:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.527 ? 0.010   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_graalvm-ce-19.1.1_1564682993598.json
{"wallclock_times": [77.206611415], "core_cycle_counts": [[41665843310], [84645794342], [101519349213], [24790517306]], "aperf_counts": [[41465016906], [84629278950], [101506405855], [24777086253]], "mperf_counts": [[41479602100], [84630909724], [101524723682], [24781492492]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:11:10: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 20:11:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:11:11: INFO] 492 executions left in scheduler queue
[2019-08-01 20:11:11: INFO] Executions until ETA known: 3808
[2019-08-01 20:11:11: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-08-01 20:11:11: INFO] Estimated completion (next execution): 2019-08-01 20:14:59 (0:03:47 from now)
[2019-08-01 20:11:11: INFO] Reboot in preparation for next execution
[2019-08-01 20:24:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.329 s/op
Iteration   2: 11.416 s/op
Iteration   3: 11.011 s/op
Iteration   4: 11.149 s/op
Iteration   5: 11.188 s/op
Iteration   6: 11.112 s/op
Iteration   7: 11.164 s/op
Iteration   8: 11.067 s/op
Iteration   9: 11.015 s/op
Iteration  10: 11.086 s/op
Iteration  11: 11.116 s/op
Iteration  12: 11.760 s/op
Iteration  13: 11.115 s/op
Iteration  14: 11.114 s/op
Iteration  15: 11.165 s/op
Iteration  16: 10.976 s/op
Iteration  17: 10.984 s/op
Iteration  18: 11.112 s/op
Iteration  19: 11.054 s/op
Iteration  20: 11.081 s/op
Iteration  21: 11.143 s/op
Iteration  22: 11.154 s/op
Iteration  23: 11.775 s/op
Iteration  24: 11.148 s/op
Iteration  25: 11.193 s/op
Iteration  26: 11.164 s/op
Iteration  27: 10.997 s/op
Iteration  28: 11.013 s/op
Iteration  29: 11.069 s/op
Iteration  30: 11.040 s/op
Iteration  31: 11.053 s/op
Iteration  32: 11.121 s/op
Iteration  33: 11.127 s/op
Iteration  34: 11.788 s/op
Iteration  35: 11.186 s/op
Iteration  36: 11.159 s/op
Iteration  37: 11.171 s/op
Iteration  38: 11.001 s/op
Iteration  39: 11.063 s/op
Iteration  40: 11.138 s/op
Iteration  41: 11.041 s/op
Iteration  42: 11.037 s/op
Iteration  43: 11.095 s/op
Iteration  44: 11.189 s/op
Iteration  45: 11.749 s/op
Iteration  46: 11.152 s/op
Iteration  47: 11.211 s/op
Iteration  48: 11.161 s/op
Iteration  49: 11.028 s/op
Iteration  50: 11.018 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     11.164 ?(99.9%) 0.098 s/op

  Histogram, s/op:
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 3 
    [11.000, 11.050) = 9 
    [11.050, 11.100) = 8 
    [11.100, 11.150) = 11 
    [11.150, 11.200) = 12 
    [11.200, 11.250) = 1 
    [11.250, 11.300) = 0 
    [11.300, 11.350) = 1 
    [11.350, 11.400) = 0 
    [11.400, 11.450) = 1 
    [11.450, 11.500) = 0 
    [11.500, 11.550) = 0 
    [11.550, 11.600) = 0 
    [11.600, 11.650) = 0 
    [11.650, 11.700) = 0 
    [11.700, 11.750) = 1 
    [11.750, 11.800) = 3 

  Percentiles, s/op:
      p(0.0000) =     10.976 s/op
     p(50.0000) =     11.118 s/op
     p(90.0000) =     11.408 s/op
     p(95.0000) =     11.767 s/op
     p(99.0000) =     11.788 s/op
     p(99.9000) =     11.788 s/op
     p(99.9900) =     11.788 s/op
     p(99.9990) =     11.788 s/op
     p(99.9999) =     11.788 s/op
    p(100.0000) =     11.788 s/op


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.164 ? 0.098   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot-8u222-b10_1564683321578.json
{"wallclock_times": [559.1352332470001], "core_cycle_counts": [[317815921525], [581354806593], [723075117548], [459340460182]], "aperf_counts": [[316134282632], [581231334059], [722993756326], [459259831489]], "mperf_counts": [[316138715902], [581231463960], [723004319924], [459262576622]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:24:40: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-08-01 20:24:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:24:41: INFO] 491 executions left in scheduler queue
[2019-08-01 20:24:41: INFO] Executions until ETA known: 3790
[2019-08-01 20:24:41: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:24:41: INFO] Estimated completion (next execution): 2019-08-01 20:36:30 (0:11:49 from now)
[2019-08-01 20:24:41: INFO] Reboot in preparation for next execution
[2019-08-01 20:29:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 20:29:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 20:29:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 20:29:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 20:29:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 20:30:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.118 s/op
Iteration   2: 2.399 s/op
Iteration   3: 2.068 s/op
Iteration   4: 1.793 s/op
Iteration   5: 2.021 s/op
Iteration   6: 2.004 s/op
Iteration   7: 2.022 s/op
Iteration   8: 1.970 s/op
Iteration   9: 2.006 s/op
Iteration  10: 2.006 s/op
Iteration  11: 2.016 s/op
Iteration  12: 1.979 s/op
Iteration  13: 2.003 s/op
Iteration  14: 1.981 s/op
Iteration  15: 1.915 s/op
Iteration  16: 2.003 s/op
Iteration  17: 1.997 s/op
Iteration  18: 2.002 s/op
Iteration  19: 2.005 s/op
Iteration  20: 2.004 s/op
Iteration  21: 1.998 s/op
Iteration  22: 2.005 s/op
Iteration  23: 1.988 s/op
Iteration  24: 2.002 s/op
Iteration  25: 1.998 s/op
Iteration  26: 1.996 s/op
Iteration  27: 2.008 s/op
Iteration  28: 2.003 s/op
Iteration  29: 1.998 s/op
Iteration  30: 1.960 s/op
Iteration  31: 2.002 s/op
Iteration  32: 1.999 s/op
Iteration  33: 1.972 s/op
Iteration  34: 1.998 s/op
Iteration  35: 2.005 s/op
Iteration  36: 1.999 s/op
Iteration  37: 1.868 s/op
Iteration  38: 1.991 s/op
Iteration  39: 2.005 s/op
Iteration  40: 1.999 s/op
Iteration  41: 1.976 s/op
Iteration  42: 2.007 s/op
Iteration  43: 2.000 s/op
Iteration  44: 1.961 s/op
Iteration  45: 1.966 s/op
Iteration  46: 2.007 s/op
Iteration  47: 2.001 s/op
Iteration  48: 1.976 s/op
Iteration  49: 1.998 s/op
Iteration  50: 2.004 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.000 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 21 
    [2.000, 2.050) = 23 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.793 s/op
     p(50.0000) =      2.001 s/op
     p(90.0000) =      2.021 s/op
     p(95.0000) =      2.091 s/op
     p(99.0000) =      2.399 s/op
     p(99.9000) =      2.399 s/op
     p(99.9900) =      2.399 s/op
     p(99.9990) =      2.399 s/op
     p(99.9999) =      2.399 s/op
    p(100.0000) =      2.399 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.000 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot_12.0.2_1564684146551.json
{"wallclock_times": [101.02674241899999], "core_cycle_counts": [[119847883023], [58268901469], [62915048797], [59656030222]], "aperf_counts": [[119619289241], [58224469127], [62889959233], [59629449485]], "mperf_counts": [[135181904334], [66020741384], [70558862888], [66862110890]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 20:30:47: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:30:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:30:48: INFO] 490 executions left in scheduler queue
[2019-08-01 20:30:48: INFO] Executions until ETA known: 3787
[2019-08-01 20:30:48: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:30:48: INFO] Estimated completion (next execution): 2019-08-01 20:34:59 (0:04:11 from now)
[2019-08-01 20:30:48: INFO] Reboot in preparation for next execution
[2019-08-01 20:35:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 20:35:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 20:35:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 20:35:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 20:35:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 20:36:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.804 s/op
Iteration   2: 1.698 s/op
Iteration   3: 1.841 s/op
Iteration   4: 1.696 s/op
Iteration   5: 1.821 s/op
Iteration   6: 1.845 s/op
Iteration   7: 1.649 s/op
Iteration   8: 1.628 s/op
Iteration   9: 1.630 s/op
Iteration  10: 1.630 s/op
Iteration  11: 1.630 s/op
Iteration  12: 1.630 s/op
Iteration  13: 1.632 s/op
Iteration  14: 1.631 s/op
Iteration  15: 1.632 s/op
Iteration  16: 1.629 s/op
Iteration  17: 1.630 s/op
Iteration  18: 1.632 s/op
Iteration  19: 1.628 s/op
Iteration  20: 1.629 s/op
Iteration  21: 1.631 s/op
Iteration  22: 1.631 s/op
Iteration  23: 1.628 s/op
Iteration  24: 1.628 s/op
Iteration  25: 1.628 s/op
Iteration  26: 1.630 s/op
Iteration  27: 1.633 s/op
Iteration  28: 1.627 s/op
Iteration  29: 1.630 s/op
Iteration  30: 1.629 s/op
Iteration  31: 1.629 s/op
Iteration  32: 1.629 s/op
Iteration  33: 1.632 s/op
Iteration  34: 1.630 s/op
Iteration  35: 1.631 s/op
Iteration  36: 1.629 s/op
Iteration  37: 1.629 s/op
Iteration  38: 1.627 s/op
Iteration  39: 1.631 s/op
Iteration  40: 1.630 s/op
Iteration  41: 1.633 s/op
Iteration  42: 1.629 s/op
Iteration  43: 1.626 s/op
Iteration  44: 1.627 s/op
Iteration  45: 1.633 s/op
Iteration  46: 1.628 s/op
Iteration  47: 1.628 s/op
Iteration  48: 1.625 s/op
Iteration  49: 1.631 s/op
Iteration  50: 1.632 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.649 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 43 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 2 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 2 
    [1.825, 1.850) = 2 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.625 s/op
     p(50.0000) =      1.630 s/op
     p(90.0000) =      1.698 s/op
     p(95.0000) =      1.830 s/op
     p(99.0000) =      1.845 s/op
     p(99.9000) =      1.845 s/op
     p(99.9900) =      1.845 s/op
     p(99.9990) =      1.845 s/op
     p(99.9999) =      1.845 s/op
    p(100.0000) =      1.845 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.649 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot_12.0.2_1564684517772.json
{"wallclock_times": [83.368060447], "core_cycle_counts": [[56701602206], [48825894109], [90735577597], [75703482010]], "aperf_counts": [[56472542589], [48795010678], [90713281091], [75680775607]], "mperf_counts": [[57208200142], [49298418418], [91409769006], [76167755988]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 20:36:41: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:36:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:36:42: INFO] 489 executions left in scheduler queue
[2019-08-01 20:36:42: INFO] Executions until ETA known: 3740
[2019-08-01 20:36:42: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-08-01 20:36:42: INFO] Estimated completion (next execution): 2019-08-01 20:40:35 (0:03:53 from now)
[2019-08-01 20:36:42: INFO] Reboot in preparation for next execution
[2019-08-01 20:51:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.594 s/op
Iteration   2: 12.206 s/op
Iteration   3: 12.310 s/op
Iteration   4: 12.310 s/op
Iteration   5: 12.303 s/op
Iteration   6: 12.476 s/op
Iteration   7: 12.192 s/op
Iteration   8: 12.352 s/op
Iteration   9: 12.239 s/op
Iteration  10: 12.392 s/op
Iteration  11: 12.289 s/op
Iteration  12: 12.836 s/op
Iteration  13: 12.193 s/op
Iteration  14: 12.470 s/op
Iteration  15: 12.142 s/op
Iteration  16: 12.536 s/op
Iteration  17: 12.248 s/op
Iteration  18: 12.582 s/op
Iteration  19: 12.194 s/op
Iteration  20: 12.579 s/op
Iteration  21: 12.221 s/op
Iteration  22: 12.528 s/op
Iteration  23: 12.805 s/op
Iteration  24: 12.515 s/op
Iteration  25: 12.178 s/op
Iteration  26: 12.505 s/op
Iteration  27: 12.194 s/op
Iteration  28: 12.329 s/op
Iteration  29: 12.375 s/op
Iteration  30: 12.315 s/op
Iteration  31: 12.398 s/op
Iteration  32: 12.312 s/op
Iteration  33: 12.449 s/op
Iteration  34: 12.793 s/op
Iteration  35: 12.379 s/op
Iteration  36: 12.256 s/op
Iteration  37: 12.399 s/op
Iteration  38: 12.259 s/op
Iteration  39: 12.428 s/op
Iteration  40: 12.273 s/op
Iteration  41: 12.419 s/op
Iteration  42: 12.284 s/op
Iteration  43: 12.427 s/op
Iteration  44: 12.286 s/op
Iteration  45: 12.902 s/op
Iteration  46: 12.277 s/op
Iteration  47: 12.357 s/op
Iteration  48: 12.251 s/op
Iteration  49: 12.365 s/op
Iteration  50: 12.271 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     12.384 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [12.100, 12.150) = 1 
    [12.150, 12.200) = 5 
    [12.200, 12.250) = 4 
    [12.250, 12.300) = 9 
    [12.300, 12.350) = 6 
    [12.350, 12.400) = 8 
    [12.400, 12.450) = 4 
    [12.450, 12.500) = 2 
    [12.500, 12.550) = 4 
    [12.550, 12.600) = 3 
    [12.600, 12.650) = 0 
    [12.650, 12.700) = 0 
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 1 
    [12.800, 12.850) = 2 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.142 s/op
     p(50.0000) =     12.340 s/op
     p(90.0000) =     12.593 s/op
     p(95.0000) =     12.819 s/op
     p(99.0000) =     12.902 s/op
     p(99.9000) =     12.902 s/op
     p(99.9900) =     12.902 s/op
     p(99.9990) =     12.902 s/op
     p(99.9999) =     12.902 s/op
    p(100.0000) =     12.902 s/op


# Run complete. Total time: 00:10:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.384 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot-8u222-b10_1564684854570.json
{"wallclock_times": [620.1365547820001], "core_cycle_counts": [[526813543863], [586215969268], [505569351096], [668419655203]], "aperf_counts": [[525110019296], [586042551889], [505474354006], [668343492672]], "mperf_counts": [[525113294798], [586043312248], [505474546290], [668360377068]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:51:14: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-08-01 20:51:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:51:15: INFO] 488 executions left in scheduler queue
[2019-08-01 20:51:15: INFO] Executions until ETA known: 3726
[2019-08-01 20:51:15: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 20:51:15: INFO] Estimated completion (next execution): 2019-08-01 21:04:06 (0:12:50 from now)
[2019-08-01 20:51:15: INFO] Reboot in preparation for next execution
[2019-08-01 20:55:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 20:57:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.782 s/op
Iteration   2: 2.293 s/op
Iteration   3: 2.116 s/op
Iteration   4: 1.969 s/op
Iteration   5: 1.931 s/op
Iteration   6: 1.897 s/op
Iteration   7: 1.892 s/op
Iteration   8: 1.875 s/op
Iteration   9: 1.868 s/op
Iteration  10: 1.833 s/op
Iteration  11: 1.851 s/op
Iteration  12: 1.848 s/op
Iteration  13: 1.882 s/op
Iteration  14: 1.860 s/op
Iteration  15: 1.869 s/op
Iteration  16: 1.872 s/op
Iteration  17: 1.881 s/op
Iteration  18: 1.883 s/op
Iteration  19: 1.840 s/op
Iteration  20: 1.878 s/op
Iteration  21: 1.846 s/op
Iteration  22: 1.866 s/op
Iteration  23: 1.851 s/op
Iteration  24: 1.833 s/op
Iteration  25: 1.881 s/op
Iteration  26: 1.833 s/op
Iteration  27: 1.835 s/op
Iteration  28: 1.885 s/op
Iteration  29: 1.851 s/op
Iteration  30: 1.852 s/op
Iteration  31: 1.854 s/op
Iteration  32: 1.879 s/op
Iteration  33: 1.872 s/op
Iteration  34: 1.867 s/op
Iteration  35: 1.851 s/op
Iteration  36: 1.872 s/op
Iteration  37: 1.884 s/op
Iteration  38: 1.886 s/op
Iteration  39: 1.844 s/op
Iteration  40: 1.865 s/op
Iteration  41: 1.862 s/op
Iteration  42: 1.851 s/op
Iteration  43: 1.881 s/op
Iteration  44: 1.853 s/op
Iteration  45: 1.847 s/op
Iteration  46: 1.838 s/op
Iteration  47: 1.856 s/op
Iteration  48: 1.862 s/op
Iteration  49: 1.872 s/op
Iteration  50: 1.866 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.898 ?(99.9%) 0.073 s/op

  Histogram, s/op:
    [1.800, 1.900) = 45 
    [1.900, 2.000) = 2 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.833 s/op
     p(50.0000) =      1.867 s/op
     p(90.0000) =      1.928 s/op
     p(95.0000) =      2.196 s/op
     p(99.0000) =      2.782 s/op
     p(99.9000) =      2.782 s/op
     p(99.9900) =      2.782 s/op
     p(99.9990) =      2.782 s/op
     p(99.9999) =      2.782 s/op
    p(100.0000) =      2.782 s/op


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.898 ? 0.073   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9-8u222-b10_1564685747061.json
{"wallclock_times": [96.200330914], "core_cycle_counts": [[129369739439], [65713220895], [78340409910], [60383715564]], "aperf_counts": [[129086409210], [65636075532], [78275624357], [60328194279]], "mperf_counts": [[129088934432], [65636087982], [78275746334], [60330970134]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 20:57:23: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 20:57:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:57:24: INFO] 487 executions left in scheduler queue
[2019-08-01 20:57:24: INFO] Executions until ETA known: 3723
[2019-08-01 20:57:24: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 20:57:24: INFO] Estimated completion (next execution): 2019-08-01 21:01:30 (0:04:06 from now)
[2019-08-01 20:57:24: INFO] Reboot in preparation for next execution
[2019-08-01 21:01:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 21:03:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.018 s/op
Iteration   2: 2.675 s/op
Iteration   3: 2.508 s/op
Iteration   4: 2.568 s/op
Iteration   5: 2.325 s/op
Iteration   6: 2.357 s/op
Iteration   7: 2.386 s/op
Iteration   8: 2.381 s/op
Iteration   9: 2.392 s/op
Iteration  10: 2.357 s/op
Iteration  11: 2.383 s/op
Iteration  12: 2.337 s/op
Iteration  13: 2.345 s/op
Iteration  14: 2.376 s/op
Iteration  15: 2.362 s/op
Iteration  16: 2.334 s/op
Iteration  17: 2.387 s/op
Iteration  18: 2.388 s/op
Iteration  19: 2.369 s/op
Iteration  20: 2.386 s/op
Iteration  21: 2.375 s/op
Iteration  22: 2.337 s/op
Iteration  23: 2.330 s/op
Iteration  24: 2.320 s/op
Iteration  25: 2.317 s/op
Iteration  26: 2.320 s/op
Iteration  27: 2.324 s/op
Iteration  28: 2.325 s/op
Iteration  29: 2.320 s/op
Iteration  30: 2.325 s/op
Iteration  31: 2.327 s/op
Iteration  32: 2.303 s/op
Iteration  33: 2.309 s/op
Iteration  34: 2.309 s/op
Iteration  35: 2.293 s/op
Iteration  36: 2.284 s/op
Iteration  37: 2.291 s/op
Iteration  38: 2.299 s/op
Iteration  39: 2.306 s/op
Iteration  40: 2.280 s/op
Iteration  41: 2.303 s/op
Iteration  42: 2.302 s/op
Iteration  43: 2.278 s/op
Iteration  44: 2.305 s/op
Iteration  45: 2.301 s/op
Iteration  46: 2.299 s/op
Iteration  47: 2.310 s/op
Iteration  48: 2.292 s/op
Iteration  49: 2.296 s/op
Iteration  50: 2.295 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.358 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 10 
    [2.300, 2.350) = 23 
    [2.350, 2.400) = 13 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 1 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.278 s/op
     p(50.0000) =      2.325 s/op
     p(90.0000) =      2.391 s/op
     p(95.0000) =      2.616 s/op
     p(99.0000) =      3.018 s/op
     p(99.9000) =      3.018 s/op
     p(99.9900) =      3.018 s/op
     p(99.9990) =      3.018 s/op
     p(99.9999) =      3.018 s/op
    p(100.0000) =      3.018 s/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.358 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9-8u222-b10_1564686111510.json
{"wallclock_times": [119.03707611799999], "core_cycle_counts": [[124375199395], [107691447973], [82925405583], [90546445754]], "aperf_counts": [[124063818244], [107633961763], [82876813162], [90517930536]], "mperf_counts": [[124067804020], [107633948424], [82876893152], [90517966988]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 21:03:50: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 21:03:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:03:51: INFO] 486 executions left in scheduler queue
[2019-08-01 21:03:51: INFO] Executions until ETA known: 3703
[2019-08-01 21:03:51: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:03:51: INFO] Estimated completion (next execution): 2019-08-01 21:08:20 (0:04:29 from now)
[2019-08-01 21:03:51: INFO] Reboot in preparation for next execution
[2019-08-01 21:08:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:08:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:08:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:08:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:08:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:14:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.156 s/op
Iteration   2: 7.100 s/op
Iteration   3: 7.028 s/op
Iteration   4: 7.170 s/op
Iteration   5: 6.439 s/op
Iteration   6: 6.848 s/op
Iteration   7: 6.873 s/op
Iteration   8: 6.872 s/op
Iteration   9: 6.149 s/op
Iteration  10: 6.850 s/op
Iteration  11: 6.874 s/op
Iteration  12: 6.894 s/op
Iteration  13: 6.857 s/op
Iteration  14: 6.835 s/op
Iteration  15: 6.632 s/op
Iteration  16: 6.887 s/op
Iteration  17: 6.889 s/op
Iteration  18: 6.878 s/op
Iteration  19: 6.920 s/op
Iteration  20: 6.887 s/op
Iteration  21: 6.866 s/op
Iteration  22: 6.344 s/op
Iteration  23: 6.871 s/op
Iteration  24: 6.920 s/op
Iteration  25: 6.885 s/op
Iteration  26: 6.901 s/op
Iteration  27: 6.511 s/op
Iteration  28: 6.867 s/op
Iteration  29: 6.859 s/op
Iteration  30: 6.853 s/op
Iteration  31: 6.860 s/op
Iteration  32: 6.900 s/op
Iteration  33: 6.847 s/op
Iteration  34: 6.875 s/op
Iteration  35: 6.871 s/op
Iteration  36: 6.870 s/op
Iteration  37: 6.856 s/op
Iteration  38: 6.860 s/op
Iteration  39: 6.881 s/op
Iteration  40: 6.849 s/op
Iteration  41: 6.842 s/op
Iteration  42: 6.739 s/op
Iteration  43: 6.833 s/op
Iteration  44: 6.319 s/op
Iteration  45: 6.864 s/op
Iteration  46: 6.874 s/op
Iteration  47: 6.847 s/op
Iteration  48: 6.856 s/op
Iteration  49: 6.886 s/op
Iteration  50: 6.898 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.831 ?(99.9%) 0.092 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 2 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 2 
    [6.750, 6.875) = 25 
    [6.875, 7.000) = 14 
    [7.000, 7.125) = 2 
    [7.125, 7.250) = 2 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.149 s/op
     p(50.0000) =      6.869 s/op
     p(90.0000) =      6.920 s/op
     p(95.0000) =      7.125 s/op
     p(99.0000) =      7.170 s/op
     p(99.9000) =      7.170 s/op
     p(99.9900) =      7.170 s/op
     p(99.9990) =      7.170 s/op
     p(99.9999) =      7.170 s/op
    p(100.0000) =      7.170 s/op


# Run complete. Total time: 00:05:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.831 ? 0.092   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot_12.0.2_1564686498005.json
{"wallclock_times": [342.63843436700006], "core_cycle_counts": [[210605850035], [147054304982], [339073927839], [291164325172]], "aperf_counts": [[209701209064], [146985396349], [339032595622], [291136283830]], "mperf_counts": [[234454029246], [163437580806], [384791084480], [331834062876]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:14:00: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:14:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:14:01: INFO] 485 executions left in scheduler queue
[2019-08-01 21:14:01: INFO] Executions until ETA known: 3698
[2019-08-01 21:14:01: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:14:01: INFO] Estimated completion (next execution): 2019-08-01 21:22:14 (0:08:12 from now)
[2019-08-01 21:14:01: INFO] Reboot in preparation for next execution
[2019-08-01 21:18:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:18:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:18:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:18:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:18:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:27:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.655 s/op
Iteration   2: 11.272 s/op
Iteration   3: 10.920 s/op
Iteration   4: 10.659 s/op
Iteration   5: 10.678 s/op
Iteration   6: 10.674 s/op
Iteration   7: 10.705 s/op
Iteration   8: 10.667 s/op
Iteration   9: 10.695 s/op
Iteration  10: 10.692 s/op
Iteration  11: 10.684 s/op
Iteration  12: 10.684 s/op
Iteration  13: 10.694 s/op
Iteration  14: 10.668 s/op
Iteration  15: 10.679 s/op
Iteration  16: 10.689 s/op
Iteration  17: 10.645 s/op
Iteration  18: 10.666 s/op
Iteration  19: 10.659 s/op
Iteration  20: 10.665 s/op
Iteration  21: 10.671 s/op
Iteration  22: 10.658 s/op
Iteration  23: 10.675 s/op
Iteration  24: 10.655 s/op
Iteration  25: 10.659 s/op
Iteration  26: 10.665 s/op
Iteration  27: 10.661 s/op
Iteration  28: 10.641 s/op
Iteration  29: 10.654 s/op
Iteration  30: 10.647 s/op
Iteration  31: 10.658 s/op
Iteration  32: 10.653 s/op
Iteration  33: 10.662 s/op
Iteration  34: 10.663 s/op
Iteration  35: 10.675 s/op
Iteration  36: 10.657 s/op
Iteration  37: 10.661 s/op
Iteration  38: 10.689 s/op
Iteration  39: 10.670 s/op
Iteration  40: 10.662 s/op
Iteration  41: 10.652 s/op
Iteration  42: 10.660 s/op
Iteration  43: 10.649 s/op
Iteration  44: 10.682 s/op
Iteration  45: 10.673 s/op
Iteration  46: 10.643 s/op
Iteration  47: 10.663 s/op
Iteration  48: 10.672 s/op
Iteration  49: 10.675 s/op
Iteration  50: 10.676 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.685 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [10.600, 10.650) = 5 
    [10.650, 10.700) = 42 
    [10.700, 10.750) = 1 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 1 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 0 
    [11.100, 11.150) = 0 
    [11.150, 11.200) = 0 
    [11.200, 11.250) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.641 s/op
     p(50.0000) =     10.666 s/op
     p(90.0000) =     10.693 s/op
     p(95.0000) =     10.802 s/op
     p(99.0000) =     11.272 s/op
     p(99.9000) =     11.272 s/op
     p(99.9900) =     11.272 s/op
     p(99.9990) =     11.272 s/op
     p(99.9999) =     11.272 s/op
    p(100.0000) =     11.272 s/op


# Run complete. Total time: 00:08:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.685 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot_12.0.2_1564687093432.json
{"wallclock_times": [535.253234622], "core_cycle_counts": [[376817829230], [474617964320], [519427993545], [366327023341]], "aperf_counts": [[375432903380], [474509933194], [519386100696], [366287000487]], "mperf_counts": [[375915768978], [474557140964], [519427411686], [366372096946]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:27:08: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:27:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:27:09: INFO] 484 executions left in scheduler queue
[2019-08-01 21:27:09: INFO] Executions until ETA known: 3696
[2019-08-01 21:27:09: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:27:09: INFO] Estimated completion (next execution): 2019-08-01 21:38:35 (0:11:25 from now)
[2019-08-01 21:27:09: INFO] Reboot in preparation for next execution
[2019-08-01 21:31:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:31:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:31:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:31:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:31:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:37:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.187 s/op
Iteration   2: 6.759 s/op
Iteration   3: 6.727 s/op
Iteration   4: 6.905 s/op
Iteration   5: 6.733 s/op
Iteration   6: 6.723 s/op
Iteration   7: 6.609 s/op
Iteration   8: 6.742 s/op
Iteration   9: 6.764 s/op
Iteration  10: 6.623 s/op
Iteration  11: 6.761 s/op
Iteration  12: 6.640 s/op
Iteration  13: 6.745 s/op
Iteration  14: 6.783 s/op
Iteration  15: 6.625 s/op
Iteration  16: 6.737 s/op
Iteration  17: 6.607 s/op
Iteration  18: 6.744 s/op
Iteration  19: 6.758 s/op
Iteration  20: 6.624 s/op
Iteration  21: 6.742 s/op
Iteration  22: 6.736 s/op
Iteration  23: 6.600 s/op
Iteration  24: 6.731 s/op
Iteration  25: 6.734 s/op
Iteration  26: 6.709 s/op
Iteration  27: 6.689 s/op
Iteration  28: 6.716 s/op
Iteration  29: 6.673 s/op
Iteration  30: 6.687 s/op
Iteration  31: 6.784 s/op
Iteration  32: 6.701 s/op
Iteration  33: 6.683 s/op
Iteration  34: 6.721 s/op
Iteration  35: 6.628 s/op
Iteration  36: 6.768 s/op
Iteration  37: 6.757 s/op
Iteration  38: 6.611 s/op
Iteration  39: 6.738 s/op
Iteration  40: 6.612 s/op
Iteration  41: 6.769 s/op
Iteration  42: 6.742 s/op
Iteration  43: 6.658 s/op
Iteration  44: 6.740 s/op
Iteration  45: 6.759 s/op
Iteration  46: 6.612 s/op
Iteration  47: 6.751 s/op
Iteration  48: 6.765 s/op
Iteration  49: 6.645 s/op
Iteration  50: 6.756 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.720 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 1 
    [6.600, 6.650) = 11 
    [6.650, 6.700) = 5 
    [6.700, 6.750) = 18 
    [6.750, 6.800) = 13 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.600 s/op
     p(50.0000) =      6.733 s/op
     p(90.0000) =      6.769 s/op
     p(95.0000) =      6.838 s/op
     p(99.0000) =      7.187 s/op
     p(99.9000) =      7.187 s/op
     p(99.9900) =      7.187 s/op
     p(99.9990) =      7.187 s/op
     p(99.9999) =      7.187 s/op
    p(100.0000) =      7.187 s/op


# Run complete. Total time: 00:05:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.720 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot_12.0.2_1564687894663.json
{"wallclock_times": [337.145910611], "core_cycle_counts": [[395224456754], [209715610943], [255470854810], [340049650360]], "aperf_counts": [[394489317149], [209615777132], [255409816482], [340010099816]], "mperf_counts": [[395179164562], [209717891608], [255682293176], [340539825962]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:37:11: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:37:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:37:12: INFO] 483 executions left in scheduler queue
[2019-08-01 21:37:12: INFO] Executions until ETA known: 3686
[2019-08-01 21:37:12: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:37:12: INFO] Estimated completion (next execution): 2019-08-01 21:45:20 (0:08:07 from now)
[2019-08-01 21:37:12: INFO] Reboot in preparation for next execution
[2019-08-01 21:41:23: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:41:23: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:41:23: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:41:23: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:41:23: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:54:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.559 s/op
Iteration   2: 16.111 s/op
Iteration   3: 16.234 s/op
Iteration   4: 16.035 s/op
Iteration   5: 15.885 s/op
Iteration   6: 16.133 s/op
Iteration   7: 15.933 s/op
Iteration   8: 15.870 s/op
Iteration   9: 15.871 s/op
Iteration  10: 15.867 s/op
Iteration  11: 15.862 s/op
Iteration  12: 15.951 s/op
Iteration  13: 15.843 s/op
Iteration  14: 15.846 s/op
Iteration  15: 15.867 s/op
Iteration  16: 15.888 s/op
Iteration  17: 15.928 s/op
Iteration  18: 15.835 s/op
Iteration  19: 15.869 s/op
Iteration  20: 15.919 s/op
Iteration  21: 15.874 s/op
Iteration  22: 15.841 s/op
Iteration  23: 15.884 s/op
Iteration  24: 16.091 s/op
Iteration  25: 15.914 s/op
Iteration  26: 15.841 s/op
Iteration  27: 15.857 s/op
Iteration  28: 15.918 s/op
Iteration  29: 15.864 s/op
Iteration  30: 15.832 s/op
Iteration  31: 15.882 s/op
Iteration  32: 15.948 s/op
Iteration  33: 15.903 s/op
Iteration  34: 15.865 s/op
Iteration  35: 15.830 s/op
Iteration  36: 15.866 s/op
Iteration  37: 15.909 s/op
Iteration  38: 15.843 s/op
Iteration  39: 15.889 s/op
Iteration  40: 15.885 s/op
Iteration  41: 15.946 s/op
Iteration  42: 15.844 s/op
Iteration  43: 15.970 s/op
Iteration  44: 15.912 s/op
Iteration  45: 15.897 s/op
Iteration  46: 15.949 s/op
Iteration  47: 15.868 s/op
Iteration  48: 15.877 s/op
Iteration  49: 15.881 s/op
Iteration  50: 15.829 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.920 ?(99.9%) 0.061 s/op

  Histogram, s/op:
    [15.800, 15.850) = 10 
    [15.850, 15.900) = 21 
    [15.900, 15.950) = 11 
    [15.950, 16.000) = 2 
    [16.000, 16.050) = 1 
    [16.050, 16.100) = 1 
    [16.100, 16.150) = 2 
    [16.150, 16.200) = 0 
    [16.200, 16.250) = 1 
    [16.250, 16.300) = 0 
    [16.300, 16.350) = 0 
    [16.350, 16.400) = 0 
    [16.400, 16.450) = 0 
    [16.450, 16.500) = 0 
    [16.500, 16.550) = 0 
    [16.550, 16.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.829 s/op
     p(50.0000) =     15.883 s/op
     p(90.0000) =     16.086 s/op
     p(95.0000) =     16.178 s/op
     p(99.0000) =     16.559 s/op
     p(99.9000) =     16.559 s/op
     p(99.9900) =     16.559 s/op
     p(99.9990) =     16.559 s/op
     p(99.9999) =     16.559 s/op
    p(100.0000) =     16.559 s/op


# Run complete. Total time: 00:13:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.920 ? 0.061   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot_12.0.2_1564688483700.json
{"wallclock_times": [797.025391792], "core_cycle_counts": [[323059627149], [482399837168], [1000317910534], [766236446469]], "aperf_counts": [[320897916535], [482204716098], [1000228523364], [766174872928]], "mperf_counts": [[321738116804], [482300196262], [1000346622868], [766300990464]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:54:40: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:54:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:54:41: INFO] 482 executions left in scheduler queue
[2019-08-01 21:54:41: INFO] Executions until ETA known: 3670
[2019-08-01 21:54:41: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-08-01 21:54:41: INFO] Estimated completion (next execution): 2019-08-01 22:10:28 (0:15:47 from now)
[2019-08-01 21:54:41: INFO] Reboot in preparation for next execution
[2019-08-01 22:03:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.564 s/op
Iteration   2: 5.205 s/op
Iteration   3: 5.371 s/op
Iteration   4: 5.220 s/op
Iteration   5: 5.336 s/op
Iteration   6: 5.085 s/op
Iteration   7: 5.137 s/op
Iteration   8: 5.152 s/op
Iteration   9: 5.215 s/op
Iteration  10: 5.072 s/op
Iteration  11: 5.221 s/op
Iteration  12: 5.994 s/op
Iteration  13: 5.111 s/op
Iteration  14: 5.091 s/op
Iteration  15: 5.264 s/op
Iteration  16: 5.111 s/op
Iteration  17: 5.134 s/op
Iteration  18: 5.142 s/op
Iteration  19: 5.137 s/op
Iteration  20: 5.125 s/op
Iteration  21: 5.132 s/op
Iteration  22: 5.142 s/op
Iteration  23: 6.048 s/op
Iteration  24: 5.052 s/op
Iteration  25: 5.115 s/op
Iteration  26: 5.137 s/op
Iteration  27: 5.118 s/op
Iteration  28: 5.125 s/op
Iteration  29: 5.113 s/op
Iteration  30: 5.136 s/op
Iteration  31: 5.114 s/op
Iteration  32: 5.156 s/op
Iteration  33: 5.108 s/op
Iteration  34: 6.063 s/op
Iteration  35: 5.055 s/op
Iteration  36: 5.147 s/op
Iteration  37: 5.150 s/op
Iteration  38: 5.126 s/op
Iteration  39: 5.134 s/op
Iteration  40: 5.122 s/op
Iteration  41: 5.142 s/op
Iteration  42: 5.120 s/op
Iteration  43: 5.131 s/op
Iteration  44: 5.125 s/op
Iteration  45: 6.160 s/op
Iteration  46: 5.060 s/op
Iteration  47: 5.119 s/op
Iteration  48: 5.130 s/op
Iteration  49: 5.129 s/op
Iteration  50: 5.129 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.224 ?(99.9%) 0.131 s/op

  Histogram, s/op:
    [5.000, 5.125) = 17 
    [5.125, 5.250) = 25 
    [5.250, 5.375) = 3 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 1 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.052 s/op
     p(50.0000) =      5.133 s/op
     p(90.0000) =      5.545 s/op
     p(95.0000) =      6.055 s/op
     p(99.0000) =      6.160 s/op
     p(99.9000) =      6.160 s/op
     p(99.9900) =      6.160 s/op
     p(99.9990) =      6.160 s/op
     p(99.9999) =      6.160 s/op
    p(100.0000) =      6.160 s/op


# Run complete. Total time: 00:04:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.224 ? 0.131   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_graalvm-ee-19.1.1_1564689530460.json
{"wallclock_times": [262.209268597], "core_cycle_counts": [[280962837058], [267342698268], [273892871709], [233474056625]], "aperf_counts": [[280323109957], [267272898440], [273855115555], [233440381522]], "mperf_counts": [[280341211888], [267277214672], [273856357530], [233441778200]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 22:03:12: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-08-01 22:03:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:03:13: INFO] 481 executions left in scheduler queue
[2019-08-01 22:03:13: INFO] Executions until ETA known: 3629
[2019-08-01 22:03:13: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:03:13: INFO] Estimated completion (next execution): 2019-08-01 22:10:06 (0:06:52 from now)
[2019-08-01 22:03:13: INFO] Reboot in preparation for next execution
[2019-08-01 22:07:23: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:07:23: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:07:23: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:07:23: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:07:23: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:15:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.637 s/op
Iteration   2: 9.649 s/op
Iteration   3: 9.372 s/op
Iteration   4: 9.678 s/op
Iteration   5: 9.303 s/op
Iteration   6: 9.318 s/op
Iteration   7: 9.294 s/op
Iteration   8: 9.338 s/op
Iteration   9: 9.319 s/op
Iteration  10: 9.329 s/op
Iteration  11: 9.329 s/op
Iteration  12: 9.320 s/op
Iteration  13: 9.333 s/op
Iteration  14: 9.363 s/op
Iteration  15: 9.332 s/op
Iteration  16: 9.311 s/op
Iteration  17: 9.339 s/op
Iteration  18: 9.387 s/op
Iteration  19: 9.322 s/op
Iteration  20: 9.328 s/op
Iteration  21: 9.340 s/op
Iteration  22: 9.341 s/op
Iteration  23: 9.321 s/op
Iteration  24: 9.322 s/op
Iteration  25: 9.335 s/op
Iteration  26: 9.325 s/op
Iteration  27: 9.353 s/op
Iteration  28: 9.337 s/op
Iteration  29: 9.350 s/op
Iteration  30: 9.368 s/op
Iteration  31: 9.358 s/op
Iteration  32: 9.321 s/op
Iteration  33: 9.344 s/op
Iteration  34: 9.345 s/op
Iteration  35: 9.329 s/op
Iteration  36: 9.326 s/op
Iteration  37: 9.324 s/op
Iteration  38: 9.333 s/op
Iteration  39: 9.315 s/op
Iteration  40: 9.357 s/op
Iteration  41: 9.307 s/op
Iteration  42: 9.341 s/op
Iteration  43: 9.316 s/op
Iteration  44: 9.346 s/op
Iteration  45: 9.324 s/op
Iteration  46: 9.357 s/op
Iteration  47: 9.342 s/op
Iteration  48: 9.325 s/op
Iteration  49: 9.330 s/op
Iteration  50: 9.333 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.353 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [9.200, 9.250) = 0 
    [9.250, 9.300) = 1 
    [9.300, 9.350) = 38 
    [9.350, 9.400) = 8 
    [9.400, 9.450) = 0 
    [9.450, 9.500) = 0 
    [9.500, 9.550) = 0 
    [9.550, 9.600) = 0 
    [9.600, 9.650) = 2 

  Percentiles, s/op:
      p(0.0000) =      9.294 s/op
     p(50.0000) =      9.333 s/op
     p(90.0000) =      9.372 s/op
     p(95.0000) =      9.642 s/op
     p(99.0000) =      9.678 s/op
     p(99.9000) =      9.678 s/op
     p(99.9900) =      9.678 s/op
     p(99.9990) =      9.678 s/op
     p(99.9999) =      9.678 s/op
    p(100.0000) =      9.678 s/op


# Run complete. Total time: 00:07:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.353 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot_11.0.4_1564690043525.json
{"wallclock_times": [468.6899874420001], "core_cycle_counts": [[241331959469], [429176336237], [722640218564], [122560611780]], "aperf_counts": [[240026392084], [429095625644], [722603793275], [122522177575]], "mperf_counts": [[240590006336], [429131717882], [722649932480], [122661799634]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:15:12: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:15:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:15:13: INFO] 480 executions left in scheduler queue
[2019-08-01 22:15:13: INFO] Executions until ETA known: 3623
[2019-08-01 22:15:13: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:15:13: INFO] Estimated completion (next execution): 2019-08-01 22:25:32 (0:10:18 from now)
[2019-08-01 22:15:13: INFO] Reboot in preparation for next execution
[2019-08-01 22:19:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:19:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:19:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:19:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:19:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:32:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.497 s/op
Iteration   2: 16.044 s/op
Iteration   3: 15.809 s/op
Iteration   4: 15.883 s/op
Iteration   5: 16.973 s/op
Iteration   6: 15.899 s/op
Iteration   7: 15.766 s/op
Iteration   8: 15.790 s/op
Iteration   9: 15.780 s/op
Iteration  10: 15.746 s/op
Iteration  11: 15.807 s/op
Iteration  12: 15.829 s/op
Iteration  13: 15.930 s/op
Iteration  14: 15.883 s/op
Iteration  15: 15.910 s/op
Iteration  16: 15.806 s/op
Iteration  17: 15.839 s/op
Iteration  18: 15.811 s/op
Iteration  19: 15.741 s/op
Iteration  20: 15.750 s/op
Iteration  21: 15.730 s/op
Iteration  22: 15.873 s/op
Iteration  23: 15.781 s/op
Iteration  24: 15.758 s/op
Iteration  25: 15.819 s/op
Iteration  26: 15.797 s/op
Iteration  27: 15.944 s/op
Iteration  28: 15.824 s/op
Iteration  29: 15.799 s/op
Iteration  30: 15.750 s/op
Iteration  31: 15.772 s/op
Iteration  32: 15.705 s/op
Iteration  33: 15.745 s/op
Iteration  34: 15.843 s/op
Iteration  35: 15.767 s/op
Iteration  36: 15.758 s/op
Iteration  37: 15.810 s/op
Iteration  38: 16.294 s/op
Iteration  39: 16.419 s/op
Iteration  40: 15.727 s/op
Iteration  41: 15.709 s/op
Iteration  42: 15.770 s/op
Iteration  43: 15.759 s/op
Iteration  44: 15.761 s/op
Iteration  45: 15.734 s/op
Iteration  46: 15.832 s/op
Iteration  47: 15.761 s/op
Iteration  48: 15.811 s/op
Iteration  49: 15.877 s/op
Iteration  50: 15.927 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.847 ?(99.9%) 0.105 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 1 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 10 
    [15.750, 15.875) = 27 
    [15.875, 16.000) = 8 
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 1 
    [16.375, 16.500) = 1 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 0 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.497 s/op
     p(50.0000) =     15.802 s/op
     p(90.0000) =     15.942 s/op
     p(95.0000) =     16.350 s/op
     p(99.0000) =     16.973 s/op
     p(99.9000) =     16.973 s/op
     p(99.9900) =     16.973 s/op
     p(99.9990) =     16.973 s/op
     p(99.9999) =     16.973 s/op
    p(100.0000) =     16.973 s/op


# Run complete. Total time: 00:13:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.847 ? 0.105   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot_11.0.4_1564690762556.json
{"wallclock_times": [793.383620508], "core_cycle_counts": [[613063491125], [909993775804], [565297962155], [466764989081]], "aperf_counts": [[611044726591], [909821431052], [565239687278], [466713117881]], "mperf_counts": [[613052464302], [910060472286], [566882108186], [466752818512]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:32:35: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:32:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:32:36: INFO] 479 executions left in scheduler queue
[2019-08-01 22:32:36: INFO] Executions until ETA known: 3621
[2019-08-01 22:32:36: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:32:36: INFO] Estimated completion (next execution): 2019-08-01 22:48:20 (0:15:43 from now)
[2019-08-01 22:32:36: INFO] Reboot in preparation for next execution
[2019-08-01 22:36:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:36:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:36:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:36:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:36:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:42:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.642 s/op
Iteration   2: 6.853 s/op
Iteration   3: 6.287 s/op
Iteration   4: 6.278 s/op
Iteration   5: 6.303 s/op
Iteration   6: 6.362 s/op
Iteration   7: 6.359 s/op
Iteration   8: 6.281 s/op
Iteration   9: 6.260 s/op
Iteration  10: 6.400 s/op
Iteration  11: 6.268 s/op
Iteration  12: 6.251 s/op
Iteration  13: 6.266 s/op
Iteration  14: 6.260 s/op
Iteration  15: 6.428 s/op
Iteration  16: 6.297 s/op
Iteration  17: 6.281 s/op
Iteration  18: 6.301 s/op
Iteration  19: 6.256 s/op
Iteration  20: 6.259 s/op
Iteration  21: 6.266 s/op
Iteration  22: 6.238 s/op
Iteration  23: 6.252 s/op
Iteration  24: 6.384 s/op
Iteration  25: 6.258 s/op
Iteration  26: 6.246 s/op
Iteration  27: 6.219 s/op
Iteration  28: 6.341 s/op
Iteration  29: 6.230 s/op
Iteration  30: 6.330 s/op
Iteration  31: 6.230 s/op
Iteration  32: 6.317 s/op
Iteration  33: 6.228 s/op
Iteration  34: 6.203 s/op
Iteration  35: 6.345 s/op
Iteration  36: 6.256 s/op
Iteration  37: 6.257 s/op
Iteration  38: 6.270 s/op
Iteration  39: 6.268 s/op
Iteration  40: 6.254 s/op
Iteration  41: 6.249 s/op
Iteration  42: 6.235 s/op
Iteration  43: 6.234 s/op
Iteration  44: 6.244 s/op
Iteration  45: 6.376 s/op
Iteration  46: 6.253 s/op
Iteration  47: 6.275 s/op
Iteration  48: 6.242 s/op
Iteration  49: 6.255 s/op
Iteration  50: 6.234 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.298 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [6.200, 6.250) = 13 
    [6.250, 6.300) = 23 
    [6.300, 6.350) = 6 
    [6.350, 6.400) = 5 
    [6.400, 6.450) = 1 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.203 s/op
     p(50.0000) =      6.263 s/op
     p(90.0000) =      6.383 s/op
     p(95.0000) =      6.524 s/op
     p(99.0000) =      6.853 s/op
     p(99.9000) =      6.853 s/op
     p(99.9900) =      6.853 s/op
     p(99.9990) =      6.853 s/op
     p(99.9999) =      6.853 s/op
    p(100.0000) =      6.853 s/op


# Run complete. Total time: 00:05:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.298 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot_11.0.4_1564691808483.json
{"wallclock_times": [316.05888993], "core_cycle_counts": [[279820392003], [257940795260], [273791799991], [297692768078]], "aperf_counts": [[279040388685], [257859333534], [273742273999], [297653590620]], "mperf_counts": [[279507483064], [257933464418], [273808170950], [298808597944]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:42:04: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:42:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:42:05: INFO] 478 executions left in scheduler queue
[2019-08-01 22:42:05: INFO] Executions until ETA known: 3615
[2019-08-01 22:42:05: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:42:05: INFO] Estimated completion (next execution): 2019-08-01 22:49:51 (0:07:46 from now)
[2019-08-01 22:42:05: INFO] Reboot in preparation for next execution
[2019-08-01 22:46:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:46:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:46:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:46:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:46:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:51:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.619 s/op
Iteration   2: 5.127 s/op
Iteration   3: 6.448 s/op
Iteration   4: 6.481 s/op
Iteration   5: 6.763 s/op
Iteration   6: 6.226 s/op
Iteration   7: 6.334 s/op
Iteration   8: 6.383 s/op
Iteration   9: 6.365 s/op
Iteration  10: 6.358 s/op
Iteration  11: 6.362 s/op
Iteration  12: 6.346 s/op
Iteration  13: 6.369 s/op
Iteration  14: 6.332 s/op
Iteration  15: 6.366 s/op
Iteration  16: 6.344 s/op
Iteration  17: 6.347 s/op
Iteration  18: 6.070 s/op
Iteration  19: 6.369 s/op
Iteration  20: 6.353 s/op
Iteration  21: 6.344 s/op
Iteration  22: 6.355 s/op
Iteration  23: 6.354 s/op
Iteration  24: 6.336 s/op
Iteration  25: 6.347 s/op
Iteration  26: 6.354 s/op
Iteration  27: 6.332 s/op
Iteration  28: 6.364 s/op
Iteration  29: 6.338 s/op
Iteration  30: 6.350 s/op
Iteration  31: 6.372 s/op
Iteration  32: 6.356 s/op
Iteration  33: 6.344 s/op
Iteration  34: 6.353 s/op
Iteration  35: 5.544 s/op
Iteration  36: 6.378 s/op
Iteration  37: 6.368 s/op
Iteration  38: 6.391 s/op
Iteration  39: 6.362 s/op
Iteration  40: 6.373 s/op
Iteration  41: 6.352 s/op
Iteration  42: 6.078 s/op
Iteration  43: 6.094 s/op
Iteration  44: 6.377 s/op
Iteration  45: 6.368 s/op
Iteration  46: 6.375 s/op
Iteration  47: 6.362 s/op
Iteration  48: 6.373 s/op
Iteration  49: 6.386 s/op
Iteration  50: 6.353 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.316 ?(99.9%) 0.114 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 1 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 3 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 35 
    [6.375, 6.500) = 7 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.127 s/op
     p(50.0000) =      6.355 s/op
     p(90.0000) =      6.391 s/op
     p(95.0000) =      6.543 s/op
     p(99.0000) =      6.763 s/op
     p(99.9000) =      6.763 s/op
     p(99.9900) =      6.763 s/op
     p(99.9990) =      6.763 s/op
     p(99.9999) =      6.763 s/op
    p(100.0000) =      6.763 s/op


# Run complete. Total time: 00:05:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.316 ? 0.114   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot_11.0.4_1564692377527.json
{"wallclock_times": [316.932753378], "core_cycle_counts": [[178649059904], [404012969807], [224134561818], [105796286571]], "aperf_counts": [[177796681937], [403946051095], [224101405343], [105760756151]], "mperf_counts": [[202213366220], [459609780088], [248624181312], [120396062344]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:51:34: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:51:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:51:35: INFO] 477 executions left in scheduler queue
[2019-08-01 22:51:35: INFO] Executions until ETA known: 3604
[2019-08-01 22:51:35: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 22:51:35: INFO] Estimated completion (next execution): 2019-08-01 22:59:22 (0:07:47 from now)
[2019-08-01 22:51:35: INFO] Reboot in preparation for next execution
[2019-08-01 22:55:46: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:55:46: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:55:46: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:55:46: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:55:46: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:55:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:01:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.640 s/op
Iteration   2: 7.221 s/op
Iteration   3: 7.116 s/op
Iteration   4: 7.142 s/op
Iteration   5: 6.985 s/op
Iteration   6: 6.977 s/op
Iteration   7: 6.974 s/op
Iteration   8: 7.064 s/op
Iteration   9: 7.080 s/op
Iteration  10: 7.028 s/op
Iteration  11: 7.049 s/op
Iteration  12: 7.013 s/op
Iteration  13: 7.028 s/op
Iteration  14: 7.008 s/op
Iteration  15: 7.029 s/op
Iteration  16: 7.026 s/op
Iteration  17: 6.990 s/op
Iteration  18: 7.008 s/op
Iteration  19: 6.977 s/op
Iteration  20: 6.977 s/op
Iteration  21: 6.965 s/op
Iteration  22: 7.025 s/op
Iteration  23: 7.032 s/op
Iteration  24: 7.030 s/op
Iteration  25: 7.020 s/op
Iteration  26: 7.039 s/op
Iteration  27: 7.048 s/op
Iteration  28: 6.997 s/op
Iteration  29: 6.957 s/op
Iteration  30: 7.022 s/op
Iteration  31: 6.987 s/op
Iteration  32: 6.982 s/op
Iteration  33: 7.021 s/op
Iteration  34: 6.974 s/op
Iteration  35: 7.015 s/op
Iteration  36: 7.014 s/op
Iteration  37: 7.024 s/op
Iteration  38: 7.049 s/op
Iteration  39: 7.063 s/op
Iteration  40: 7.043 s/op
Iteration  41: 7.031 s/op
Iteration  42: 7.003 s/op
Iteration  43: 6.991 s/op
Iteration  44: 6.959 s/op
Iteration  45: 7.001 s/op
Iteration  46: 6.946 s/op
Iteration  47: 6.981 s/op
Iteration  48: 6.971 s/op
Iteration  49: 6.974 s/op
Iteration  50: 6.975 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.049 ?(99.9%) 0.116 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 19 
    [7.000, 7.250) = 30 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.946 s/op
     p(50.0000) =      7.015 s/op
     p(90.0000) =      7.078 s/op
     p(95.0000) =      7.177 s/op
     p(99.0000) =      8.640 s/op
     p(99.9000) =      8.640 s/op
     p(99.9900) =      8.640 s/op
     p(99.9990) =      8.640 s/op
     p(99.9999) =      8.640 s/op
    p(100.0000) =      8.640 s/op


# Run complete. Total time: 00:05:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.049 ? 0.116   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_12.0.1_1564692946845.json
{"wallclock_times": [354.421179318], "core_cycle_counts": [[374674042637], [232074569405], [238542587351], [478008012408]], "aperf_counts": [[373740254234], [231917876234], [238399995418], [477896594677]], "mperf_counts": [[373748800614], [231917873948], [238399982896], [477896572264]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:01:41: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:01:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:01:42: INFO] 476 executions left in scheduler queue
[2019-08-01 23:01:42: INFO] Executions until ETA known: 3585
[2019-08-01 23:01:42: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:01:42: INFO] Estimated completion (next execution): 2019-08-01 23:10:07 (0:08:24 from now)
[2019-08-01 23:01:42: INFO] Reboot in preparation for next execution
[2019-08-01 23:05:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:05:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:05:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:05:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:05:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:05:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:15:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.521 s/op
Iteration   2: 11.446 s/op
Iteration   3: 11.630 s/op
Iteration   4: 11.742 s/op
Iteration   5: 11.645 s/op
Iteration   6: 11.657 s/op
Iteration   7: 11.671 s/op
Iteration   8: 11.669 s/op
Iteration   9: 11.567 s/op
Iteration  10: 11.607 s/op
Iteration  11: 11.643 s/op
Iteration  12: 11.676 s/op
Iteration  13: 11.637 s/op
Iteration  14: 11.628 s/op
Iteration  15: 11.589 s/op
Iteration  16: 11.586 s/op
Iteration  17: 11.671 s/op
Iteration  18: 11.598 s/op
Iteration  19: 11.547 s/op
Iteration  20: 11.687 s/op
Iteration  21: 11.702 s/op
Iteration  22: 11.709 s/op
Iteration  23: 11.683 s/op
Iteration  24: 11.659 s/op
Iteration  25: 11.717 s/op
Iteration  26: 11.705 s/op
Iteration  27: 11.686 s/op
Iteration  28: 11.725 s/op
Iteration  29: 11.705 s/op
Iteration  30: 11.622 s/op
Iteration  31: 11.660 s/op
Iteration  32: 11.598 s/op
Iteration  33: 11.703 s/op
Iteration  34: 11.683 s/op
Iteration  35: 11.620 s/op
Iteration  36: 11.623 s/op
Iteration  37: 11.718 s/op
Iteration  38: 11.654 s/op
Iteration  39: 11.691 s/op
Iteration  40: 11.666 s/op
Iteration  41: 11.584 s/op
Iteration  42: 11.651 s/op
Iteration  43: 11.654 s/op
Iteration  44: 11.740 s/op
Iteration  45: 11.705 s/op
Iteration  46: 11.594 s/op
Iteration  47: 11.725 s/op
Iteration  48: 11.710 s/op
Iteration  49: 11.666 s/op
Iteration  50: 11.587 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.671 ?(99.9%) 0.067 s/op

  Histogram, s/op:
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 1 
    [11.500, 11.625) = 13 
    [11.625, 11.750) = 35 
    [11.750, 11.875) = 0 
    [11.875, 12.000) = 0 
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 1 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.446 s/op
     p(50.0000) =     11.663 s/op
     p(90.0000) =     11.724 s/op
     p(95.0000) =     11.741 s/op
     p(99.0000) =     12.521 s/op
     p(99.9000) =     12.521 s/op
     p(99.9900) =     12.521 s/op
     p(99.9990) =     12.521 s/op
     p(99.9999) =     12.521 s/op
    p(100.0000) =     12.521 s/op


# Run complete. Total time: 00:09:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.671 ? 0.067   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_12.0.1_1564693554968.json
{"wallclock_times": [585.1119948820001], "core_cycle_counts": [[624308535507], [782639119760], [190463201283], [303889006831]], "aperf_counts": [[622945727659], [782468025979], [190281454182], [303794639443]], "mperf_counts": [[622957723500], [782468138970], [190281392612], [303794728786]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:15:40: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:15:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:15:41: INFO] 475 executions left in scheduler queue
[2019-08-01 23:15:41: INFO] Executions until ETA known: 3579
[2019-08-01 23:15:41: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:15:41: INFO] Estimated completion (next execution): 2019-08-01 23:27:56 (0:12:15 from now)
[2019-08-01 23:15:41: INFO] Reboot in preparation for next execution
[2019-08-01 23:19:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:19:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:19:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:19:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:19:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:19:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:26:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.432 s/op
Iteration   2: 8.635 s/op
Iteration   3: 7.830 s/op
Iteration   4: 7.955 s/op
Iteration   5: 7.848 s/op
Iteration   6: 7.965 s/op
Iteration   7: 7.905 s/op
Iteration   8: 7.965 s/op
Iteration   9: 7.946 s/op
Iteration  10: 7.882 s/op
Iteration  11: 7.999 s/op
Iteration  12: 7.904 s/op
Iteration  13: 7.967 s/op
Iteration  14: 7.893 s/op
Iteration  15: 7.883 s/op
Iteration  16: 7.943 s/op
Iteration  17: 7.900 s/op
Iteration  18: 7.912 s/op
Iteration  19: 7.853 s/op
Iteration  20: 7.954 s/op
Iteration  21: 7.906 s/op
Iteration  22: 7.861 s/op
Iteration  23: 7.887 s/op
Iteration  24: 7.822 s/op
Iteration  25: 7.823 s/op
Iteration  26: 7.764 s/op
Iteration  27: 7.710 s/op
Iteration  28: 7.761 s/op
Iteration  29: 7.750 s/op
Iteration  30: 7.814 s/op
Iteration  31: 7.805 s/op
Iteration  32: 7.802 s/op
Iteration  33: 7.809 s/op
Iteration  34: 7.747 s/op
Iteration  35: 7.799 s/op
Iteration  36: 7.742 s/op
Iteration  37: 7.806 s/op
Iteration  38: 7.771 s/op
Iteration  39: 7.829 s/op
Iteration  40: 7.779 s/op
Iteration  41: 7.737 s/op
Iteration  42: 7.810 s/op
Iteration  43: 7.751 s/op
Iteration  44: 7.869 s/op
Iteration  45: 7.743 s/op
Iteration  46: 7.697 s/op
Iteration  47: 7.785 s/op
Iteration  48: 7.738 s/op
Iteration  49: 7.830 s/op
Iteration  50: 7.771 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.886 ?(99.9%) 0.129 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 8 
    [ 7.750,  8.000) = 40 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.697 s/op
     p(50.0000) =      7.829 s/op
     p(90.0000) =      7.965 s/op
     p(95.0000) =      8.285 s/op
     p(99.0000) =      9.432 s/op
     p(99.9000) =      9.432 s/op
     p(99.9900) =      9.432 s/op
     p(99.9990) =      9.432 s/op
     p(99.9999) =      9.432 s/op
    p(100.0000) =      9.432 s/op


# Run complete. Total time: 00:06:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.886 ? 0.129   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_12.0.1_1564694392756.json
{"wallclock_times": [396.13895682300006], "core_cycle_counts": [[476998180528], [293715202989], [346687172415], [236621218188]], "aperf_counts": [[476119748314], [293570547276], [346553008126], [236502939671]], "mperf_counts": [[476124048440], [293571329498], [346552975564], [236502924844]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:26:28: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:26:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:26:29: INFO] 474 executions left in scheduler queue
[2019-08-01 23:26:29: INFO] Executions until ETA known: 3577
[2019-08-01 23:26:29: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:26:29: INFO] Estimated completion (next execution): 2019-08-01 23:35:36 (0:09:06 from now)
[2019-08-01 23:26:29: INFO] Reboot in preparation for next execution
[2019-08-01 23:30:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:30:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:30:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:30:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:30:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:30:53: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:45:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.142 s/op
Iteration   2: 17.856 s/op
Iteration   3: 17.850 s/op
Iteration   4: 17.924 s/op
Iteration   5: 17.894 s/op
Iteration   6: 17.818 s/op
Iteration   7: 17.881 s/op
Iteration   8: 17.834 s/op
Iteration   9: 17.961 s/op
Iteration  10: 17.776 s/op
Iteration  11: 17.876 s/op
Iteration  12: 17.791 s/op
Iteration  13: 17.877 s/op
Iteration  14: 17.747 s/op
Iteration  15: 17.867 s/op
Iteration  16: 17.837 s/op
Iteration  17: 17.891 s/op
Iteration  18: 17.790 s/op
Iteration  19: 17.857 s/op
Iteration  20: 17.797 s/op
Iteration  21: 17.882 s/op
Iteration  22: 18.275 s/op
Iteration  23: 17.859 s/op
Iteration  24: 17.864 s/op
Iteration  25: 17.806 s/op
Iteration  26: 17.764 s/op
Iteration  27: 17.794 s/op
Iteration  28: 17.819 s/op
Iteration  29: 17.821 s/op
Iteration  30: 17.780 s/op
Iteration  31: 17.788 s/op
Iteration  32: 17.882 s/op
Iteration  33: 17.917 s/op
Iteration  34: 17.746 s/op
Iteration  35: 17.834 s/op
Iteration  36: 17.798 s/op
Iteration  37: 17.728 s/op
Iteration  38: 17.735 s/op
Iteration  39: 17.808 s/op
Iteration  40: 17.861 s/op
Iteration  41: 17.839 s/op
Iteration  42: 17.808 s/op
Iteration  43: 17.835 s/op
Iteration  44: 17.966 s/op
Iteration  45: 18.397 s/op
Iteration  46: 17.875 s/op
Iteration  47: 17.862 s/op
Iteration  48: 17.791 s/op
Iteration  49: 17.786 s/op
Iteration  50: 17.817 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.880 ?(99.9%) 0.106 s/op

  Histogram, s/op:
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 4 
    [17.750, 18.000) = 43 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 2 
    [18.500, 18.750) = 0 
    [18.750, 19.000) = 0 
    [19.000, 19.250) = 1 
    [19.250, 19.500) = 0 
    [19.500, 19.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.728 s/op
     p(50.0000) =     17.836 s/op
     p(90.0000) =     17.957 s/op
     p(95.0000) =     18.330 s/op
     p(99.0000) =     19.142 s/op
     p(99.9000) =     19.142 s/op
     p(99.9900) =     19.142 s/op
     p(99.9990) =     19.142 s/op
     p(99.9999) =     19.142 s/op
    p(100.0000) =     19.142 s/op


# Run complete. Total time: 00:14:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.880 ? 0.106   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_12.0.1_1564695052881.json
{"wallclock_times": [895.641954751], "core_cycle_counts": [[584786852161], [678178210358], [1000312281261], [636402386272]], "aperf_counts": [[582334740556], [677996586145], [1000136001167], [636305636100]], "mperf_counts": [[582350165606], [677996742350], [1000135939052], [636305628924]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:45:48: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:45:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:45:49: INFO] 473 executions left in scheduler queue
[2019-08-01 23:45:49: INFO] Executions until ETA known: 3564
[2019-08-01 23:45:49: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-08-01 23:45:49: INFO] Estimated completion (next execution): 2019-08-02 00:03:15 (0:17:26 from now)
[2019-08-01 23:45:49: INFO] Reboot in preparation for next execution
[2019-08-01 23:54:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.483 s/op
Iteration   2: 5.612 s/op
Iteration   3: 5.332 s/op
Iteration   4: 5.343 s/op
Iteration   5: 5.347 s/op
Iteration   6: 5.341 s/op
Iteration   7: 5.341 s/op
Iteration   8: 5.341 s/op
Iteration   9: 5.348 s/op
Iteration  10: 5.345 s/op
Iteration  11: 5.354 s/op
Iteration  12: 5.346 s/op
Iteration  13: 5.341 s/op
Iteration  14: 5.343 s/op
Iteration  15: 5.357 s/op
Iteration  16: 5.340 s/op
Iteration  17: 5.338 s/op
Iteration  18: 5.343 s/op
Iteration  19: 5.340 s/op
Iteration  20: 5.340 s/op
Iteration  21: 5.344 s/op
Iteration  22: 5.347 s/op
Iteration  23: 5.353 s/op
Iteration  24: 5.344 s/op
Iteration  25: 5.340 s/op
Iteration  26: 5.354 s/op
Iteration  27: 5.340 s/op
Iteration  28: 5.339 s/op
Iteration  29: 5.339 s/op
Iteration  30: 5.341 s/op
Iteration  31: 5.341 s/op
Iteration  32: 5.339 s/op
Iteration  33: 5.341 s/op
Iteration  34: 5.343 s/op
Iteration  35: 5.341 s/op
Iteration  36: 5.342 s/op
Iteration  37: 5.342 s/op
Iteration  38: 5.345 s/op
Iteration  39: 5.339 s/op
Iteration  40: 5.346 s/op
Iteration  41: 5.344 s/op
Iteration  42: 5.340 s/op
Iteration  43: 5.345 s/op
Iteration  44: 5.342 s/op
Iteration  45: 5.337 s/op
Iteration  46: 5.346 s/op
Iteration  47: 5.341 s/op
Iteration  48: 5.341 s/op
Iteration  49: 5.343 s/op
Iteration  50: 5.354 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.351 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [5.300, 5.325) = 0 
    [5.325, 5.350) = 43 
    [5.350, 5.375) = 5 
    [5.375, 5.400) = 0 
    [5.400, 5.425) = 0 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 0 
    [5.475, 5.500) = 1 
    [5.500, 5.525) = 0 
    [5.525, 5.550) = 0 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 0 
    [5.600, 5.625) = 1 
    [5.625, 5.650) = 0 
    [5.650, 5.675) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.332 s/op
     p(50.0000) =      5.342 s/op
     p(90.0000) =      5.354 s/op
     p(95.0000) =      5.414 s/op
     p(99.0000) =      5.612 s/op
     p(99.9000) =      5.612 s/op
     p(99.9900) =      5.612 s/op
     p(99.9990) =      5.612 s/op
     p(99.9999) =      5.612 s/op
    p(100.0000) =      5.612 s/op


# Run complete. Total time: 00:04:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.351 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot-8u222-b10_1564696200584.json
{"wallclock_times": [268.380291132], "core_cycle_counts": [[295607929909], [200688871921], [139373554584], [229300098347]], "aperf_counts": [[295037945026], [200611627543], [139338744582], [229271275884]], "mperf_counts": [[295041447720], [200616987616], [139341622280], [229272293556]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 23:54:28: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-08-01 23:54:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:54:29: INFO] 472 executions left in scheduler queue
[2019-08-01 23:54:29: INFO] Executions until ETA known: 3514
[2019-08-01 23:54:29: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-08-01 23:54:29: INFO] Estimated completion (next execution): 2019-08-02 00:01:28 (0:06:58 from now)
[2019-08-01 23:54:29: INFO] Reboot in preparation for next execution
[2019-08-01 23:58:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:58:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:58:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:58:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:58:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:58:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 00:13:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.689 s/op
Iteration   2: 16.943 s/op
Iteration   3: 16.441 s/op
Iteration   4: 18.000 s/op
Iteration   5: 17.989 s/op
Iteration   6: 17.985 s/op
Iteration   7: 17.946 s/op
Iteration   8: 18.020 s/op
Iteration   9: 18.062 s/op
Iteration  10: 18.048 s/op
Iteration  11: 17.967 s/op
Iteration  12: 18.051 s/op
Iteration  13: 17.979 s/op
Iteration  14: 18.027 s/op
Iteration  15: 17.992 s/op
Iteration  16: 17.965 s/op
Iteration  17: 18.001 s/op
Iteration  18: 17.994 s/op
Iteration  19: 18.052 s/op
Iteration  20: 18.008 s/op
Iteration  21: 18.001 s/op
Iteration  22: 17.988 s/op
Iteration  23: 17.962 s/op
Iteration  24: 17.984 s/op
Iteration  25: 17.995 s/op
Iteration  26: 18.014 s/op
Iteration  27: 18.018 s/op
Iteration  28: 18.021 s/op
Iteration  29: 18.002 s/op
Iteration  30: 17.975 s/op
Iteration  31: 17.997 s/op
Iteration  32: 17.993 s/op
Iteration  33: 18.010 s/op
Iteration  34: 17.989 s/op
Iteration  35: 18.016 s/op
Iteration  36: 18.033 s/op
Iteration  37: 17.985 s/op
Iteration  38: 17.975 s/op
Iteration  39: 18.023 s/op
Iteration  40: 17.964 s/op
Iteration  41: 17.943 s/op
Iteration  42: 17.953 s/op
Iteration  43: 17.947 s/op
Iteration  44: 18.037 s/op
Iteration  45: 18.008 s/op
Iteration  46: 17.946 s/op
Iteration  47: 18.002 s/op
Iteration  48: 18.032 s/op
Iteration  49: 18.006 s/op
Iteration  50: 17.933 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     17.958 ?(99.9%) 0.141 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 24 
    [18.000, 18.250) = 23 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.441 s/op
     p(50.0000) =     17.996 s/op
     p(90.0000) =     18.047 s/op
     p(95.0000) =     18.057 s/op
     p(99.0000) =     18.689 s/op
     p(99.9000) =     18.689 s/op
     p(99.9900) =     18.689 s/op
     p(99.9990) =     18.689 s/op
     p(99.9999) =     18.689 s/op
    p(100.0000) =     18.689 s/op


# Run complete. Total time: 00:14:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  17.958 ? 0.141   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_11.0.4_1564696719860.json
{"wallclock_times": [899.429950834], "core_cycle_counts": [[734102999829], [579269123583], [821357165684], [777024556853]], "aperf_counts": [[731695153590], [579045063346], [821178872745], [776849288480]], "mperf_counts": [[731698780058], [579044997416], [821178888086], [776849292248]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 00:13:39: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-08-02 00:13:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:13:40: INFO] 471 executions left in scheduler queue
[2019-08-02 00:13:40: INFO] Executions until ETA known: 3498
[2019-08-02 00:13:40: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:13:40: INFO] Estimated completion (next execution): 2019-08-02 00:31:10 (0:17:29 from now)
[2019-08-02 00:13:40: INFO] Reboot in preparation for next execution
[2019-08-02 00:17:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 00:17:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 00:17:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 00:17:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 00:17:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 00:17:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 00:18:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.009 s/op
Iteration   2: 2.394 s/op
Iteration   3: 2.328 s/op
Iteration   4: 2.342 s/op
Iteration   5: 2.360 s/op
Iteration   6: 1.947 s/op
Iteration   7: 1.892 s/op
Iteration   8: 1.918 s/op
Iteration   9: 1.930 s/op
Iteration  10: 1.911 s/op
Iteration  11: 1.924 s/op
Iteration  12: 1.916 s/op
Iteration  13: 1.924 s/op
Iteration  14: 1.879 s/op
Iteration  15: 1.897 s/op
Iteration  16: 1.891 s/op
Iteration  17: 1.883 s/op
Iteration  18: 1.910 s/op
Iteration  19: 1.916 s/op
Iteration  20: 1.883 s/op
Iteration  21: 1.869 s/op
Iteration  22: 1.920 s/op
Iteration  23: 1.907 s/op
Iteration  24: 1.917 s/op
Iteration  25: 1.883 s/op
Iteration  26: 1.921 s/op
Iteration  27: 1.961 s/op
Iteration  28: 1.977 s/op
Iteration  29: 1.976 s/op
Iteration  30: 1.948 s/op
Iteration  31: 1.938 s/op
Iteration  32: 1.930 s/op
Iteration  33: 1.941 s/op
Iteration  34: 1.948 s/op
Iteration  35: 1.948 s/op
Iteration  36: 1.925 s/op
Iteration  37: 1.959 s/op
Iteration  38: 1.958 s/op
Iteration  39: 1.922 s/op
Iteration  40: 1.977 s/op
Iteration  41: 1.971 s/op
Iteration  42: 1.954 s/op
Iteration  43: 1.939 s/op
Iteration  44: 1.951 s/op
Iteration  45: 1.939 s/op
Iteration  46: 1.942 s/op
Iteration  47: 1.951 s/op
Iteration  48: 1.941 s/op
Iteration  49: 1.947 s/op
Iteration  50: 1.938 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.985 ?(99.9%) 0.094 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 45 
    [2.000, 2.250) = 0 
    [2.250, 2.500) = 4 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 0 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.869 s/op
     p(50.0000) =      1.938 s/op
     p(90.0000) =      2.293 s/op
     p(95.0000) =      2.375 s/op
     p(99.0000) =      3.009 s/op
     p(99.9000) =      3.009 s/op
     p(99.9900) =      3.009 s/op
     p(99.9990) =      3.009 s/op
     p(99.9999) =      3.009 s/op
    p(100.0000) =      3.009 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.985 ? 0.094   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9_12.0.1_1564697830806.json
{"wallclock_times": [100.92282106599998], "core_cycle_counts": [[135510982014], [56574835412], [85401527444], [76197466338]], "aperf_counts": [[135221386167], [56497603798], [85331594802], [76122311147]], "mperf_counts": [[135229920778], [56497603064], [85332124678], [76122306832]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 00:18:51: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:18:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:18:52: INFO] 470 executions left in scheduler queue
[2019-08-02 00:18:52: INFO] Executions until ETA known: 3491
[2019-08-02 00:18:52: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:18:52: INFO] Estimated completion (next execution): 2019-08-02 00:23:04 (0:04:11 from now)
[2019-08-02 00:18:52: INFO] Reboot in preparation for next execution
[2019-08-02 00:23:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 00:23:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 00:23:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 00:23:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 00:23:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 00:23:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 00:25:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.663 s/op
Iteration   2: 3.683 s/op
Iteration   3: 3.844 s/op
Iteration   4: 3.446 s/op
Iteration   5: 3.466 s/op
Iteration   6: 3.455 s/op
Iteration   7: 3.478 s/op
Iteration   8: 3.429 s/op
Iteration   9: 3.393 s/op
Iteration  10: 3.411 s/op
Iteration  11: 3.417 s/op
Iteration  12: 3.400 s/op
Iteration  13: 3.438 s/op
Iteration  14: 3.409 s/op
Iteration  15: 3.443 s/op
Iteration  16: 3.407 s/op
Iteration  17: 3.389 s/op
Iteration  18: 3.401 s/op
Iteration  19: 3.399 s/op
Iteration  20: 3.401 s/op
Iteration  21: 3.413 s/op
Iteration  22: 3.414 s/op
Iteration  23: 3.403 s/op
Iteration  24: 3.419 s/op
Iteration  25: 3.386 s/op
Iteration  26: 3.429 s/op
Iteration  27: 3.392 s/op
Iteration  28: 3.409 s/op
Iteration  29: 3.405 s/op
Iteration  30: 3.420 s/op
Iteration  31: 3.408 s/op
Iteration  32: 3.434 s/op
Iteration  33: 3.420 s/op
Iteration  34: 3.398 s/op
Iteration  35: 3.378 s/op
Iteration  36: 3.413 s/op
Iteration  37: 3.408 s/op
Iteration  38: 3.397 s/op
Iteration  39: 3.406 s/op
Iteration  40: 3.414 s/op
Iteration  41: 3.422 s/op
Iteration  42: 3.403 s/op
Iteration  43: 3.398 s/op
Iteration  44: 3.412 s/op
Iteration  45: 3.418 s/op
Iteration  46: 3.430 s/op
Iteration  47: 3.418 s/op
Iteration  48: 3.402 s/op
Iteration  49: 3.440 s/op
Iteration  50: 3.405 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.434 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 9 
    [3.400, 3.450) = 35 
    [3.450, 3.500) = 3 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 2 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 1 
    [3.850, 3.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.378 s/op
     p(50.0000) =      3.412 s/op
     p(90.0000) =      3.464 s/op
     p(95.0000) =      3.672 s/op
     p(99.0000) =      3.844 s/op
     p(99.9000) =      3.844 s/op
     p(99.9900) =      3.844 s/op
     p(99.9990) =      3.844 s/op
     p(99.9999) =      3.844 s/op
    p(100.0000) =      3.844 s/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.434 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9_12.0.1_1564698186207.json
{"wallclock_times": [173.18048023800003], "core_cycle_counts": [[116505694802], [123134124962], [183599618260], [164658881745]], "aperf_counts": [[115981225899], [123052577613], [183552888486], [164604922642]], "mperf_counts": [[115991573944], [123052710342], [183552966534], [164604938054]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 00:25:59: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:26:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:26:00: INFO] 469 executions left in scheduler queue
[2019-08-02 00:26:00: INFO] Executions until ETA known: 3456
[2019-08-02 00:26:00: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-08-02 00:26:00: INFO] Estimated completion (next execution): 2019-08-02 00:31:23 (0:05:23 from now)
[2019-08-02 00:26:00: INFO] Reboot in preparation for next execution
[2019-08-02 00:33:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.993 s/op
Iteration   2: 4.651 s/op
Iteration   3: 4.280 s/op
Iteration   4: 4.332 s/op
Iteration   5: 4.329 s/op
Iteration   6: 4.320 s/op
Iteration   7: 4.529 s/op
Iteration   8: 4.612 s/op
Iteration   9: 4.459 s/op
Iteration  10: 4.483 s/op
Iteration  11: 4.551 s/op
Iteration  12: 4.535 s/op
Iteration  13: 4.394 s/op
Iteration  14: 4.340 s/op
Iteration  15: 4.658 s/op
Iteration  16: 4.454 s/op
Iteration  17: 4.296 s/op
Iteration  18: 4.353 s/op
Iteration  19: 4.463 s/op
Iteration  20: 4.309 s/op
Iteration  21: 4.392 s/op
Iteration  22: 4.460 s/op
Iteration  23: 4.287 s/op
Iteration  24: 4.260 s/op
Iteration  25: 4.362 s/op
Iteration  26: 5.366 s/op
Iteration  27: 4.339 s/op
Iteration  28: 4.273 s/op
Iteration  29: 4.337 s/op
Iteration  30: 4.465 s/op
Iteration  31: 4.309 s/op
Iteration  32: 4.257 s/op
Iteration  33: 4.348 s/op
Iteration  34: 4.451 s/op
Iteration  35: 4.314 s/op
Iteration  36: 4.258 s/op
Iteration  37: 4.331 s/op
Iteration  38: 4.485 s/op
Iteration  39: 4.287 s/op
Iteration  40: 4.263 s/op
Iteration  41: 4.321 s/op
Iteration  42: 4.475 s/op
Iteration  43: 4.308 s/op
Iteration  44: 4.261 s/op
Iteration  45: 4.344 s/op
Iteration  46: 4.503 s/op
Iteration  47: 4.321 s/op
Iteration  48: 4.246 s/op
Iteration  49: 4.334 s/op
Iteration  50: 4.470 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.415 ?(99.9%) 0.096 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 1 
    [4.250, 4.375) = 28 
    [4.375, 4.500) = 12 
    [4.500, 4.625) = 5 
    [4.625, 4.750) = 2 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 1 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 1 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.246 s/op
     p(50.0000) =      4.342 s/op
     p(90.0000) =      4.606 s/op
     p(95.0000) =      4.809 s/op
     p(99.0000) =      5.366 s/op
     p(99.9000) =      5.366 s/op
     p(99.9900) =      5.366 s/op
     p(99.9990) =      5.366 s/op
     p(99.9999) =      5.366 s/op
    p(100.0000) =      5.366 s/op


# Run complete. Total time: 00:03:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  4.415 ? 0.096   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ee-19.1.1_1564698611406.json
{"wallclock_times": [221.74282033400002], "core_cycle_counts": [[181057438903], [207883374833], [212399194577], [202701116558]], "aperf_counts": [[180492303998], [207836324865], [212367345351], [202680047338]], "mperf_counts": [[180506623804], [207847166920], [212367802414], [202680126918]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 00:33:53: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-08-02 00:33:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:33:54: INFO] 468 executions left in scheduler queue
[2019-08-02 00:33:54: INFO] Executions until ETA known: 3420
[2019-08-02 00:33:54: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-08-02 00:33:54: INFO] Estimated completion (next execution): 2019-08-02 00:40:06 (0:06:12 from now)
[2019-08-02 00:33:54: INFO] Reboot in preparation for next execution
[2019-08-02 00:45:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.801 s/op
Iteration   2: 9.362 s/op
Iteration   3: 9.680 s/op
Iteration   4: 9.388 s/op
Iteration   5: 9.328 s/op
Iteration   6: 9.372 s/op
Iteration   7: 9.292 s/op
Iteration   8: 9.466 s/op
Iteration   9: 9.362 s/op
Iteration  10: 9.216 s/op
Iteration  11: 9.362 s/op
Iteration  12: 10.421 s/op
Iteration  13: 9.155 s/op
Iteration  14: 9.342 s/op
Iteration  15: 9.417 s/op
Iteration  16: 9.235 s/op
Iteration  17: 9.407 s/op
Iteration  18: 9.250 s/op
Iteration  19: 9.367 s/op
Iteration  20: 9.395 s/op
Iteration  21: 9.266 s/op
Iteration  22: 9.383 s/op
Iteration  23: 9.996 s/op
Iteration  24: 9.281 s/op
Iteration  25: 9.261 s/op
Iteration  26: 9.388 s/op
Iteration  27: 9.437 s/op
Iteration  28: 9.244 s/op
Iteration  29: 9.403 s/op
Iteration  30: 9.253 s/op
Iteration  31: 9.369 s/op
Iteration  32: 9.249 s/op
Iteration  33: 9.379 s/op
Iteration  34: 9.968 s/op
Iteration  35: 9.286 s/op
Iteration  36: 9.219 s/op
Iteration  37: 9.368 s/op
Iteration  38: 9.392 s/op
Iteration  39: 9.211 s/op
Iteration  40: 9.381 s/op
Iteration  41: 9.222 s/op
Iteration  42: 9.358 s/op
Iteration  43: 9.250 s/op
Iteration  44: 9.385 s/op
Iteration  45: 9.997 s/op
Iteration  46: 9.308 s/op
Iteration  47: 9.212 s/op
Iteration  48: 9.360 s/op
Iteration  49: 9.407 s/op
Iteration  50: 9.239 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      9.402 ?(99.9%) 0.119 s/op

  Histogram, s/op:
    [ 9.000,  9.125) = 0 
    [ 9.125,  9.250) = 12 
    [ 9.250,  9.375) = 18 
    [ 9.375,  9.500) = 14 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 1 
    [ 9.750,  9.875) = 1 
    [ 9.875, 10.000) = 3 
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 0 
    [10.375, 10.500) = 1 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.155 s/op
     p(50.0000) =      9.362 s/op
     p(90.0000) =      9.789 s/op
     p(95.0000) =      9.996 s/op
     p(99.0000) =     10.421 s/op
     p(99.9000) =     10.421 s/op
     p(99.9900) =     10.421 s/op
     p(99.9990) =     10.421 s/op
     p(99.9999) =     10.421 s/op
    p(100.0000) =     10.421 s/op


# Run complete. Total time: 00:07:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  9.402 ? 0.119   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_graalvm-ce-19.1.1_1564699087174.json
{"wallclock_times": [471.06350346899995], "core_cycle_counts": [[447741963143], [603704252057], [328173254410], [350202947429]], "aperf_counts": [[446568594103], [603599362473], [328125733306], [350155157324]], "mperf_counts": [[446583570776], [603603599496], [328131414376], [350158397464]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 00:45:58: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-08-02 00:45:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:45:59: INFO] 467 executions left in scheduler queue
[2019-08-02 00:45:59: INFO] Executions until ETA known: 3415
[2019-08-02 00:45:59: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 00:45:59: INFO] Estimated completion (next execution): 2019-08-02 00:56:20 (0:10:21 from now)
[2019-08-02 00:45:59: INFO] Reboot in preparation for next execution
[2019-08-02 00:54:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.025 s/op
Iteration   2: 5.836 s/op
Iteration   3: 5.588 s/op
Iteration   4: 5.572 s/op
Iteration   5: 5.605 s/op
Iteration   6: 5.584 s/op
Iteration   7: 5.615 s/op
Iteration   8: 5.603 s/op
Iteration   9: 5.612 s/op
Iteration  10: 5.587 s/op
Iteration  11: 5.585 s/op
Iteration  12: 5.577 s/op
Iteration  13: 5.593 s/op
Iteration  14: 5.562 s/op
Iteration  15: 5.597 s/op
Iteration  16: 5.597 s/op
Iteration  17: 5.593 s/op
Iteration  18: 5.567 s/op
Iteration  19: 5.583 s/op
Iteration  20: 5.569 s/op
Iteration  21: 5.574 s/op
Iteration  22: 5.579 s/op
Iteration  23: 5.566 s/op
Iteration  24: 5.574 s/op
Iteration  25: 5.583 s/op
Iteration  26: 5.592 s/op
Iteration  27: 5.587 s/op
Iteration  28: 5.587 s/op
Iteration  29: 5.568 s/op
Iteration  30: 5.586 s/op
Iteration  31: 5.579 s/op
Iteration  32: 5.572 s/op
Iteration  33: 5.566 s/op
Iteration  34: 5.598 s/op
Iteration  35: 5.580 s/op
Iteration  36: 5.557 s/op
Iteration  37: 5.599 s/op
Iteration  38: 5.569 s/op
Iteration  39: 5.579 s/op
Iteration  40: 5.588 s/op
Iteration  41: 5.587 s/op
Iteration  42: 5.586 s/op
Iteration  43: 5.595 s/op
Iteration  44: 5.586 s/op
Iteration  45: 5.578 s/op
Iteration  46: 5.565 s/op
Iteration  47: 5.570 s/op
Iteration  48: 5.573 s/op
Iteration  49: 5.571 s/op
Iteration  50: 5.557 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.596 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 44 
    [5.600, 5.650) = 4 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 0 
    [5.800, 5.850) = 1 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 1 
    [6.050, 6.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.557 s/op
     p(50.0000) =      5.584 s/op
     p(90.0000) =      5.604 s/op
     p(95.0000) =      5.714 s/op
     p(99.0000) =      6.025 s/op
     p(99.9000) =      6.025 s/op
     p(99.9900) =      6.025 s/op
     p(99.9990) =      6.025 s/op
     p(99.9999) =      6.025 s/op
    p(100.0000) =      6.025 s/op


# Run complete. Total time: 00:04:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.596 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot-8u222-b10_1564699811550.json
{"wallclock_times": [280.730036702], "core_cycle_counts": [[191884845809], [286792587172], [210678984438], [224674088651]], "aperf_counts": [[191224113557], [286731209905], [210640997602], [224645986497]], "mperf_counts": [[191229047458], [286734063292], [210641033870], [224646061932]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 00:54:52: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 00:54:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:54:53: INFO] 466 executions left in scheduler queue
[2019-08-02 00:54:53: INFO] Executions until ETA known: 3410
[2019-08-02 00:54:53: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 00:54:53: INFO] Estimated completion (next execution): 2019-08-02 01:02:04 (0:07:10 from now)
[2019-08-02 00:54:53: INFO] Reboot in preparation for next execution
[2019-08-02 01:07:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.928 s/op
Iteration   2: 10.384 s/op
Iteration   3: 9.944 s/op
Iteration   4: 9.971 s/op
Iteration   5: 9.955 s/op
Iteration   6: 9.938 s/op
Iteration   7: 9.988 s/op
Iteration   8: 9.954 s/op
Iteration   9: 9.959 s/op
Iteration  10: 9.946 s/op
Iteration  11: 9.951 s/op
Iteration  12: 9.931 s/op
Iteration  13: 9.952 s/op
Iteration  14: 9.966 s/op
Iteration  15: 9.944 s/op
Iteration  16: 9.949 s/op
Iteration  17: 9.960 s/op
Iteration  18: 9.979 s/op
Iteration  19: 9.952 s/op
Iteration  20: 9.964 s/op
Iteration  21: 10.009 s/op
Iteration  22: 9.961 s/op
Iteration  23: 9.970 s/op
Iteration  24: 9.946 s/op
Iteration  25: 9.970 s/op
Iteration  26: 9.962 s/op
Iteration  27: 9.941 s/op
Iteration  28: 9.952 s/op
Iteration  29: 9.980 s/op
Iteration  30: 9.965 s/op
Iteration  31: 9.968 s/op
Iteration  32: 9.964 s/op
Iteration  33: 9.933 s/op
Iteration  34: 9.961 s/op
Iteration  35: 9.981 s/op
Iteration  36: 9.988 s/op
Iteration  37: 9.957 s/op
Iteration  38: 9.969 s/op
Iteration  39: 9.982 s/op
Iteration  40: 9.971 s/op
Iteration  41: 9.953 s/op
Iteration  42: 9.988 s/op
Iteration  43: 9.936 s/op
Iteration  44: 9.970 s/op
Iteration  45: 9.949 s/op
Iteration  46: 9.937 s/op
Iteration  47: 9.976 s/op
Iteration  48: 9.933 s/op
Iteration  49: 9.980 s/op
Iteration  50: 9.961 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.969 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [ 9.900,  9.950) = 14 
    [ 9.950, 10.000) = 34 
    [10.000, 10.050) = 1 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 0 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 0 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.928 s/op
     p(50.0000) =      9.961 s/op
     p(90.0000) =      9.987 s/op
     p(95.0000) =      9.998 s/op
     p(99.0000) =     10.384 s/op
     p(99.9000) =     10.384 s/op
     p(99.9900) =     10.384 s/op
     p(99.9990) =     10.384 s/op
     p(99.9999) =     10.384 s/op
    p(100.0000) =     10.384 s/op


# Run complete. Total time: 00:08:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.969 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot-8u222-b10_1564700345738.json
{"wallclock_times": [499.28104179], "core_cycle_counts": [[476673390145], [485867707562], [241191282353], [407008624460]], "aperf_counts": [[475624724134], [485782456438], [241144233783], [406980505076]], "mperf_counts": [[475631136062], [485792220566], [241158091280], [406981166784]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:07:25: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:07:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:07:25: INFO] 465 executions left in scheduler queue
[2019-08-02 01:07:25: INFO] Executions until ETA known: 3408
[2019-08-02 01:07:25: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:07:25: INFO] Estimated completion (next execution): 2019-08-02 01:18:15 (0:10:49 from now)
[2019-08-02 01:07:25: INFO] Reboot in preparation for next execution
[2019-08-02 01:16:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.661 s/op
Iteration   2: 6.016 s/op
Iteration   3: 6.031 s/op
Iteration   4: 5.992 s/op
Iteration   5: 6.036 s/op
Iteration   6: 6.037 s/op
Iteration   7: 6.040 s/op
Iteration   8: 6.045 s/op
Iteration   9: 5.993 s/op
Iteration  10: 6.041 s/op
Iteration  11: 6.051 s/op
Iteration  12: 6.054 s/op
Iteration  13: 5.994 s/op
Iteration  14: 6.044 s/op
Iteration  15: 6.044 s/op
Iteration  16: 6.044 s/op
Iteration  17: 5.994 s/op
Iteration  18: 6.044 s/op
Iteration  19: 6.035 s/op
Iteration  20: 5.984 s/op
Iteration  21: 6.049 s/op
Iteration  22: 6.040 s/op
Iteration  23: 6.040 s/op
Iteration  24: 6.005 s/op
Iteration  25: 6.059 s/op
Iteration  26: 6.054 s/op
Iteration  27: 6.042 s/op
Iteration  28: 5.993 s/op
Iteration  29: 6.059 s/op
Iteration  30: 6.057 s/op
Iteration  31: 6.000 s/op
Iteration  32: 6.022 s/op
Iteration  33: 6.053 s/op
Iteration  34: 6.042 s/op
Iteration  35: 6.008 s/op
Iteration  36: 6.043 s/op
Iteration  37: 6.051 s/op
Iteration  38: 5.996 s/op
Iteration  39: 6.038 s/op
Iteration  40: 6.051 s/op
Iteration  41: 6.051 s/op
Iteration  42: 5.998 s/op
Iteration  43: 6.048 s/op
Iteration  44: 6.058 s/op
Iteration  45: 6.050 s/op
Iteration  46: 5.998 s/op
Iteration  47: 6.034 s/op
Iteration  48: 6.033 s/op
Iteration  49: 6.000 s/op
Iteration  50: 6.069 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.044 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 10 
    [6.000, 6.050) = 26 
    [6.050, 6.100) = 13 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.984 s/op
     p(50.0000) =      6.041 s/op
     p(90.0000) =      6.058 s/op
     p(95.0000) =      6.063 s/op
     p(99.0000) =      6.661 s/op
     p(99.9000) =      6.661 s/op
     p(99.9900) =      6.661 s/op
     p(99.9990) =      6.661 s/op
     p(99.9999) =      6.661 s/op
    p(100.0000) =      6.661 s/op


# Run complete. Total time: 00:05:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.044 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot-8u222-b10_1564701096559.json
{"wallclock_times": [303.23291556099997], "core_cycle_counts": [[195128666334], [298916438831], [304100644492], [250700124014]], "aperf_counts": [[194306059109], [298843581327], [304040740761], [250651763092]], "mperf_counts": [[194319945536], [298846089360], [304040794444], [250652409952]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:16:39: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:16:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:16:40: INFO] 464 executions left in scheduler queue
[2019-08-02 01:16:40: INFO] Executions until ETA known: 3398
[2019-08-02 01:16:40: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:16:40: INFO] Estimated completion (next execution): 2019-08-02 01:24:14 (0:07:33 from now)
[2019-08-02 01:16:40: INFO] Reboot in preparation for next execution
[2019-08-02 01:33:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.155 s/op
Iteration   2: 15.473 s/op
Iteration   3: 15.290 s/op
Iteration   4: 15.246 s/op
Iteration   5: 15.246 s/op
Iteration   6: 15.282 s/op
Iteration   7: 15.304 s/op
Iteration   8: 15.253 s/op
Iteration   9: 15.261 s/op
Iteration  10: 15.264 s/op
Iteration  11: 15.263 s/op
Iteration  12: 15.266 s/op
Iteration  13: 15.235 s/op
Iteration  14: 15.442 s/op
Iteration  15: 15.793 s/op
Iteration  16: 15.258 s/op
Iteration  17: 15.249 s/op
Iteration  18: 15.249 s/op
Iteration  19: 15.242 s/op
Iteration  20: 15.245 s/op
Iteration  21: 15.255 s/op
Iteration  22: 15.257 s/op
Iteration  23: 15.278 s/op
Iteration  24: 15.242 s/op
Iteration  25: 15.631 s/op
Iteration  26: 15.276 s/op
Iteration  27: 15.255 s/op
Iteration  28: 15.223 s/op
Iteration  29: 15.263 s/op
Iteration  30: 15.242 s/op
Iteration  31: 15.271 s/op
Iteration  32: 15.270 s/op
Iteration  33: 15.256 s/op
Iteration  34: 15.226 s/op
Iteration  35: 15.227 s/op
Iteration  36: 15.237 s/op
Iteration  37: 15.254 s/op
Iteration  38: 15.260 s/op
Iteration  39: 15.264 s/op
Iteration  40: 15.304 s/op
Iteration  41: 15.274 s/op
Iteration  42: 15.247 s/op
Iteration  43: 15.322 s/op
Iteration  44: 15.284 s/op
Iteration  45: 15.268 s/op
Iteration  46: 15.268 s/op
Iteration  47: 15.294 s/op
Iteration  48: 15.283 s/op
Iteration  49: 15.267 s/op
Iteration  50: 15.260 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.285 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [15.100, 15.150) = 0 
    [15.150, 15.200) = 1 
    [15.200, 15.250) = 14 
    [15.250, 15.300) = 28 
    [15.300, 15.350) = 3 
    [15.350, 15.400) = 0 
    [15.400, 15.450) = 1 
    [15.450, 15.500) = 1 
    [15.500, 15.550) = 0 
    [15.550, 15.600) = 0 
    [15.600, 15.650) = 1 
    [15.650, 15.700) = 0 
    [15.700, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.155 s/op
     p(50.0000) =     15.262 s/op
     p(90.0000) =     15.320 s/op
     p(95.0000) =     15.544 s/op
     p(99.0000) =     15.793 s/op
     p(99.9000) =     15.793 s/op
     p(99.9900) =     15.793 s/op
     p(99.9990) =     15.793 s/op
     p(99.9999) =     15.793 s/op
    p(100.0000) =     15.793 s/op


# Run complete. Total time: 00:12:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.285 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot-8u222-b10_1564701651510.json
{"wallclock_times": [765.139679732], "core_cycle_counts": [[645300235531], [717770926705], [564967835572], [536308740270]], "aperf_counts": [[643582634319], [717666954106], [564858697656], [536240905099]], "mperf_counts": [[643599558378], [717668174646], [564860141276], [536240963992]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:33:36: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:33:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:33:37: INFO] 463 executions left in scheduler queue
[2019-08-02 01:33:37: INFO] Executions until ETA known: 3358
[2019-08-02 01:33:37: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-08-02 01:33:37: INFO] Estimated completion (next execution): 2019-08-02 01:48:52 (0:15:15 from now)
[2019-08-02 01:33:37: INFO] Reboot in preparation for next execution
[2019-08-02 01:38:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 01:51:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.362 s/op
Iteration   2: 16.633 s/op
Iteration   3: 15.806 s/op
Iteration   4: 15.810 s/op
Iteration   5: 15.835 s/op
Iteration   6: 15.830 s/op
Iteration   7: 15.836 s/op
Iteration   8: 15.860 s/op
Iteration   9: 15.951 s/op
Iteration  10: 15.781 s/op
Iteration  11: 15.819 s/op
Iteration  12: 15.846 s/op
Iteration  13: 15.796 s/op
Iteration  14: 15.787 s/op
Iteration  15: 15.801 s/op
Iteration  16: 15.789 s/op
Iteration  17: 15.782 s/op
Iteration  18: 15.821 s/op
Iteration  19: 15.724 s/op
Iteration  20: 15.724 s/op
Iteration  21: 15.818 s/op
Iteration  22: 15.819 s/op
Iteration  23: 15.742 s/op
Iteration  24: 15.783 s/op
Iteration  25: 15.742 s/op
Iteration  26: 15.758 s/op
Iteration  27: 15.724 s/op
Iteration  28: 15.743 s/op
Iteration  29: 15.819 s/op
Iteration  30: 15.857 s/op
Iteration  31: 15.922 s/op
Iteration  32: 15.782 s/op
Iteration  33: 15.786 s/op
Iteration  34: 15.794 s/op
Iteration  35: 15.734 s/op
Iteration  36: 15.766 s/op
Iteration  37: 15.828 s/op
Iteration  38: 15.806 s/op
Iteration  39: 15.756 s/op
Iteration  40: 15.731 s/op
Iteration  41: 15.824 s/op
Iteration  42: 15.745 s/op
Iteration  43: 15.829 s/op
Iteration  44: 15.833 s/op
Iteration  45: 15.761 s/op
Iteration  46: 15.802 s/op
Iteration  47: 15.767 s/op
Iteration  48: 15.731 s/op
Iteration  49: 15.745 s/op
Iteration  50: 15.795 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     15.863 ?(99.9%) 0.189 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 11 
    [15.750, 16.000) = 37 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 1 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.724 s/op
     p(50.0000) =     15.795 s/op
     p(90.0000) =     15.860 s/op
     p(95.0000) =     16.258 s/op
     p(99.0000) =     18.362 s/op
     p(99.9000) =     18.362 s/op
     p(99.9900) =     18.362 s/op
     p(99.9990) =     18.362 s/op
     p(99.9999) =     18.362 s/op
    p(100.0000) =     18.362 s/op


# Run complete. Total time: 00:13:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  15.863 ? 0.189   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9-8u222-b10_1564702681812.json
{"wallclock_times": [794.276919383], "core_cycle_counts": [[618594706566], [662968351139], [603408948928], [680455025392]], "aperf_counts": [[616464848128], [662768088957], [603274640510], [680365781086]], "mperf_counts": [[616473585010], [662777830618], [603274885622], [680366675832]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 01:51:16: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-08-02 01:51:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:51:17: INFO] 462 executions left in scheduler queue
[2019-08-02 01:51:17: INFO] Executions until ETA known: 3322
[2019-08-02 01:51:17: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-08-02 01:51:17: INFO] Estimated completion (next execution): 2019-08-02 02:07:01 (0:15:44 from now)
[2019-08-02 01:51:17: INFO] Reboot in preparation for next execution
[2019-08-02 01:59:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.699 s/op
Iteration   2: 5.469 s/op
Iteration   3: 5.332 s/op
Iteration   4: 5.277 s/op
Iteration   5: 5.282 s/op
Iteration   6: 5.283 s/op
Iteration   7: 5.276 s/op
Iteration   8: 5.281 s/op
Iteration   9: 5.275 s/op
Iteration  10: 5.279 s/op
Iteration  11: 5.274 s/op
Iteration  12: 5.274 s/op
Iteration  13: 5.278 s/op
Iteration  14: 5.277 s/op
Iteration  15: 5.300 s/op
Iteration  16: 5.285 s/op
Iteration  17: 5.275 s/op
Iteration  18: 5.279 s/op
Iteration  19: 5.288 s/op
Iteration  20: 5.280 s/op
Iteration  21: 5.271 s/op
Iteration  22: 5.279 s/op
Iteration  23: 5.287 s/op
Iteration  24: 5.282 s/op
Iteration  25: 5.279 s/op
Iteration  26: 5.278 s/op
Iteration  27: 5.282 s/op
Iteration  28: 5.275 s/op
Iteration  29: 5.282 s/op
Iteration  30: 5.272 s/op
Iteration  31: 5.279 s/op
Iteration  32: 5.309 s/op
Iteration  33: 5.282 s/op
Iteration  34: 5.288 s/op
Iteration  35: 5.280 s/op
Iteration  36: 5.274 s/op
Iteration  37: 5.284 s/op
Iteration  38: 5.278 s/op
Iteration  39: 5.290 s/op
Iteration  40: 5.278 s/op
Iteration  41: 5.279 s/op
Iteration  42: 5.280 s/op
Iteration  43: 5.276 s/op
Iteration  44: 5.280 s/op
Iteration  45: 5.295 s/op
Iteration  46: 5.272 s/op
Iteration  47: 5.282 s/op
Iteration  48: 5.281 s/op
Iteration  49: 5.289 s/op
Iteration  50: 5.279 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.294 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 46 
    [5.300, 5.350) = 2 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 1 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.271 s/op
     p(50.0000) =      5.280 s/op
     p(90.0000) =      5.299 s/op
     p(95.0000) =      5.394 s/op
     p(99.0000) =      5.699 s/op
     p(99.9000) =      5.699 s/op
     p(99.9900) =      5.699 s/op
     p(99.9990) =      5.699 s/op
     p(99.9999) =      5.699 s/op
    p(100.0000) =      5.699 s/op


# Run complete. Total time: 00:04:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.294 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot-8u222-b10_1564703728531.json
{"wallclock_times": [265.53932235], "core_cycle_counts": [[192573130679], [224345809407], [268049064563], [171201420563]], "aperf_counts": [[191924102319], [224286433409], [268018686994], [171166673291]], "mperf_counts": [[191945850142], [224291441526], [268019151132], [171166861700]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:59:54: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-08-02 01:59:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:59:55: INFO] 461 executions left in scheduler queue
[2019-08-02 01:59:55: INFO] Executions until ETA known: 3296
[2019-08-02 01:59:55: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-08-02 01:59:55: INFO] Estimated completion (next execution): 2019-08-02 02:06:50 (0:06:55 from now)
[2019-08-02 01:59:55: INFO] Reboot in preparation for next execution
[2019-08-02 02:04:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 02:04:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 02:04:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 02:04:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 02:04:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 02:04:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 02:16:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.751 s/op
Iteration   2: 16.283 s/op
Iteration   3: 14.801 s/op
Iteration   4: 15.877 s/op
Iteration   5: 15.094 s/op
Iteration   6: 15.341 s/op
Iteration   7: 15.242 s/op
Iteration   8: 14.668 s/op
Iteration   9: 15.795 s/op
Iteration  10: 15.059 s/op
Iteration  11: 15.872 s/op
Iteration  12: 14.683 s/op
Iteration  13: 15.133 s/op
Iteration  14: 15.059 s/op
Iteration  15: 14.716 s/op
Iteration  16: 15.835 s/op
Iteration  17: 15.385 s/op
Iteration  18: 14.903 s/op
Iteration  19: 16.031 s/op
Iteration  20: 15.845 s/op
Iteration  21: 14.565 s/op
Iteration  22: 15.296 s/op
Iteration  23: 15.005 s/op
Iteration  24: 15.225 s/op
Iteration  25: 15.162 s/op
Iteration  26: 15.295 s/op
Iteration  27: 16.166 s/op
Iteration  28: 14.918 s/op
Iteration  29: 15.587 s/op
Iteration  30: 15.728 s/op
Iteration  31: 15.785 s/op
Iteration  32: 14.876 s/op
Iteration  33: 14.942 s/op
Iteration  34: 16.066 s/op
Iteration  35: 14.935 s/op
Iteration  36: 15.999 s/op
Iteration  37: 15.519 s/op
Iteration  38: 15.327 s/op
Iteration  39: 14.867 s/op
Iteration  40: 15.238 s/op
Iteration  41: 15.087 s/op
Iteration  42: 14.744 s/op
Iteration  43: 15.177 s/op
Iteration  44: 15.473 s/op
Iteration  45: 15.396 s/op
Iteration  46: 15.014 s/op
Iteration  47: 16.004 s/op
Iteration  48: 14.839 s/op
Iteration  49: 15.184 s/op
Iteration  50: 16.012 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.336 ?(99.9%) 0.228 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 5 
    [14.750, 15.000) = 8 
    [15.000, 15.250) = 13 
    [15.250, 15.500) = 7 
    [15.500, 15.750) = 3 
    [15.750, 16.000) = 8 
    [16.000, 16.250) = 5 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.565 s/op
     p(50.0000) =     15.240 s/op
     p(90.0000) =     16.011 s/op
     p(95.0000) =     16.111 s/op
     p(99.0000) =     16.283 s/op
     p(99.9000) =     16.283 s/op
     p(99.9900) =     16.283 s/op
     p(99.9990) =     16.283 s/op
     p(99.9999) =     16.283 s/op
    p(100.0000) =     16.283 s/op


# Run complete. Total time: 00:12:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  15.336 ? 0.228   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9_12.0.1_1564704247268.json
{"wallclock_times": [768.589444841], "core_cycle_counts": [[471974953150], [792206892376], [597560900890], [923601794754]], "aperf_counts": [[469771157752], [792080341741], [597394225005], [923484075259]], "mperf_counts": [[469781436718], [792086326546], [597394243824], [923484149790]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 02:16:55: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-08-02 02:16:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:16:56: INFO] 460 executions left in scheduler queue
[2019-08-02 02:16:56: INFO] Executions until ETA known: 3260
[2019-08-02 02:16:56: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-08-02 02:16:56: INFO] Estimated completion (next execution): 2019-08-02 02:32:15 (0:15:19 from now)
[2019-08-02 02:16:56: INFO] Reboot in preparation for next execution
[2019-08-02 02:21:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 02:36:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.332 s/op
Iteration   2: 18.254 s/op
Iteration   3: 18.506 s/op
Iteration   4: 17.169 s/op
Iteration   5: 18.418 s/op
Iteration   6: 18.477 s/op
Iteration   7: 17.570 s/op
Iteration   8: 17.759 s/op
Iteration   9: 18.144 s/op
Iteration  10: 18.129 s/op
Iteration  11: 18.582 s/op
Iteration  12: 18.388 s/op
Iteration  13: 18.351 s/op
Iteration  14: 17.950 s/op
Iteration  15: 17.785 s/op
Iteration  16: 17.988 s/op
Iteration  17: 17.913 s/op
Iteration  18: 17.436 s/op
Iteration  19: 18.025 s/op
Iteration  20: 17.892 s/op
Iteration  21: 17.843 s/op
Iteration  22: 18.060 s/op
Iteration  23: 17.836 s/op
Iteration  24: 17.797 s/op
Iteration  25: 18.088 s/op
Iteration  26: 17.110 s/op
Iteration  27: 17.892 s/op
Iteration  28: 16.986 s/op
Iteration  29: 17.953 s/op
Iteration  30: 18.065 s/op
Iteration  31: 17.804 s/op
Iteration  32: 17.236 s/op
Iteration  33: 17.924 s/op
Iteration  34: 17.868 s/op
Iteration  35: 17.574 s/op
Iteration  36: 17.796 s/op
Iteration  37: 18.094 s/op
Iteration  38: 17.107 s/op
Iteration  39: 18.034 s/op
Iteration  40: 17.326 s/op
Iteration  41: 17.775 s/op
Iteration  42: 17.820 s/op
Iteration  43: 18.093 s/op
Iteration  44: 17.975 s/op
Iteration  45: 17.726 s/op
Iteration  46: 18.022 s/op
Iteration  47: 18.109 s/op
Iteration  48: 17.427 s/op
Iteration  49: 18.101 s/op
Iteration  50: 17.751 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     17.885 ?(99.9%) 0.184 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 4 
    [17.250, 17.500) = 3 
    [17.500, 17.750) = 3 
    [17.750, 18.000) = 19 
    [18.000, 18.250) = 12 
    [18.250, 18.500) = 6 
    [18.500, 18.750) = 2 

  Percentiles, s/op:
      p(0.0000) =     16.986 s/op
     p(50.0000) =     17.919 s/op
     p(90.0000) =     18.385 s/op
     p(95.0000) =     18.490 s/op
     p(99.0000) =     18.582 s/op
     p(99.9000) =     18.582 s/op
     p(99.9900) =     18.582 s/op
     p(99.9990) =     18.582 s/op
     p(99.9999) =     18.582 s/op
    p(100.0000) =     18.582 s/op


# Run complete. Total time: 00:14:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.885 ? 0.184   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9-8u222-b10_1564705269603.json
{"wallclock_times": [895.619258759], "core_cycle_counts": [[811610489176], [592831654644], [675847720015], [1079911241558]], "aperf_counts": [[809326833640], [592634624803], [675591407030], [1079742445730]], "mperf_counts": [[809330066408], [592634663874], [675592255398], [1079742521304]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 02:36:05: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-08-02 02:36:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:36:06: INFO] 459 executions left in scheduler queue
[2019-08-02 02:36:06: INFO] Executions until ETA known: 3234
[2019-08-02 02:36:06: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:36:06: INFO] Estimated completion (next execution): 2019-08-02 02:53:32 (0:17:25 from now)
[2019-08-02 02:36:06: INFO] Reboot in preparation for next execution
[2019-08-02 02:41:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.813 s/op
Iteration   2: 1.597 s/op
Iteration   3: 1.581 s/op
Iteration   4: 1.667 s/op
Iteration   5: 1.577 s/op
Iteration   6: 1.576 s/op
Iteration   7: 1.576 s/op
Iteration   8: 1.576 s/op
Iteration   9: 1.586 s/op
Iteration  10: 1.580 s/op
Iteration  11: 1.580 s/op
Iteration  12: 1.578 s/op
Iteration  13: 1.578 s/op
Iteration  14: 1.589 s/op
Iteration  15: 1.584 s/op
Iteration  16: 1.576 s/op
Iteration  17: 1.574 s/op
Iteration  18: 1.577 s/op
Iteration  19: 1.581 s/op
Iteration  20: 1.582 s/op
Iteration  21: 1.588 s/op
Iteration  22: 1.584 s/op
Iteration  23: 1.583 s/op
Iteration  24: 1.585 s/op
Iteration  25: 1.584 s/op
Iteration  26: 1.582 s/op
Iteration  27: 1.581 s/op
Iteration  28: 1.578 s/op
Iteration  29: 1.582 s/op
Iteration  30: 1.582 s/op
Iteration  31: 1.583 s/op
Iteration  32: 1.582 s/op
Iteration  33: 1.584 s/op
Iteration  34: 1.578 s/op
Iteration  35: 1.572 s/op
Iteration  36: 1.580 s/op
Iteration  37: 1.576 s/op
Iteration  38: 1.573 s/op
Iteration  39: 1.575 s/op
Iteration  40: 1.578 s/op
Iteration  41: 1.573 s/op
Iteration  42: 1.578 s/op
Iteration  43: 1.583 s/op
Iteration  44: 1.581 s/op
Iteration  45: 1.582 s/op
Iteration  46: 1.571 s/op
Iteration  47: 1.576 s/op
Iteration  48: 1.584 s/op
Iteration  49: 1.574 s/op
Iteration  50: 1.577 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.586 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 6 
    [1.575, 1.600) = 42 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.571 s/op
     p(50.0000) =      1.581 s/op
     p(90.0000) =      1.587 s/op
     p(95.0000) =      1.629 s/op
     p(99.0000) =      1.813 s/op
     p(99.9000) =      1.813 s/op
     p(99.9900) =      1.813 s/op
     p(99.9990) =      1.813 s/op
     p(99.9999) =      1.813 s/op
    p(100.0000) =      1.813 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.586 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ce-19.1.1_1564706415417.json
{"wallclock_times": [80.22096943800003], "core_cycle_counts": [[63186258465], [52999803472], [102478278297], [49052564180]], "aperf_counts": [[62917910479], [52966050368], [102462613480], [49030444427]], "mperf_counts": [[62935479604], [52980136100], [102463034704], [49036428646]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:41:35: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:41:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:41:36: INFO] 458 executions left in scheduler queue
[2019-08-02 02:41:36: INFO] Executions until ETA known: 3224
[2019-08-02 02:41:36: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:41:36: INFO] Estimated completion (next execution): 2019-08-02 02:45:27 (0:03:50 from now)
[2019-08-02 02:41:36: INFO] Reboot in preparation for next execution
[2019-08-02 02:46:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.777 s/op
Iteration   2: 1.723 s/op
Iteration   3: 1.766 s/op
Iteration   4: 1.656 s/op
Iteration   5: 1.655 s/op
Iteration   6: 1.657 s/op
Iteration   7: 1.655 s/op
Iteration   8: 1.656 s/op
Iteration   9: 1.655 s/op
Iteration  10: 1.653 s/op
Iteration  11: 1.654 s/op
Iteration  12: 1.654 s/op
Iteration  13: 1.656 s/op
Iteration  14: 1.656 s/op
Iteration  15: 1.656 s/op
Iteration  16: 1.657 s/op
Iteration  17: 1.658 s/op
Iteration  18: 1.658 s/op
Iteration  19: 1.656 s/op
Iteration  20: 1.658 s/op
Iteration  21: 1.658 s/op
Iteration  22: 1.652 s/op
Iteration  23: 1.654 s/op
Iteration  24: 1.654 s/op
Iteration  25: 1.655 s/op
Iteration  26: 1.654 s/op
Iteration  27: 1.655 s/op
Iteration  28: 1.654 s/op
Iteration  29: 1.653 s/op
Iteration  30: 1.653 s/op
Iteration  31: 1.654 s/op
Iteration  32: 1.654 s/op
Iteration  33: 1.654 s/op
Iteration  34: 1.656 s/op
Iteration  35: 1.652 s/op
Iteration  36: 1.654 s/op
Iteration  37: 1.654 s/op
Iteration  38: 1.652 s/op
Iteration  39: 1.652 s/op
Iteration  40: 1.653 s/op
Iteration  41: 1.653 s/op
Iteration  42: 1.651 s/op
Iteration  43: 1.653 s/op
Iteration  44: 1.653 s/op
Iteration  45: 1.652 s/op
Iteration  46: 1.653 s/op
Iteration  47: 1.655 s/op
Iteration  48: 1.656 s/op
Iteration  49: 1.657 s/op
Iteration  50: 1.656 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.661 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 0 
    [1.650, 1.663) = 47 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 
    [1.700, 1.713) = 0 
    [1.713, 1.725) = 1 
    [1.725, 1.738) = 0 
    [1.738, 1.750) = 0 
    [1.750, 1.763) = 0 
    [1.763, 1.775) = 1 
    [1.775, 1.788) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.651 s/op
     p(50.0000) =      1.654 s/op
     p(90.0000) =      1.658 s/op
     p(95.0000) =      1.742 s/op
     p(99.0000) =      1.777 s/op
     p(99.9000) =      1.777 s/op
     p(99.9900) =      1.777 s/op
     p(99.9990) =      1.777 s/op
     p(99.9999) =      1.777 s/op
    p(100.0000) =      1.777 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.661 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ce-19.1.1_1564706704654.json
{"wallclock_times": [83.880430598], "core_cycle_counts": [[131890165732], [81011106987], [19298926415], [41738602514]], "aperf_counts": [[131752802328], [80981290707], [19279799351], [41721284196]], "mperf_counts": [[131770519430], [80984796246], [19292749062], [41737273388]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:46:28: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:46:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:46:29: INFO] 457 executions left in scheduler queue
[2019-08-02 02:46:29: INFO] Executions until ETA known: 3202
[2019-08-02 02:46:29: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:46:29: INFO] Estimated completion (next execution): 2019-08-02 02:50:23 (0:03:54 from now)
[2019-08-02 02:46:29: INFO] Reboot in preparation for next execution
[2019-08-02 02:52:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.038 s/op
Iteration   2: 1.539 s/op
Iteration   3: 1.858 s/op
Iteration   4: 1.928 s/op
Iteration   5: 1.862 s/op
Iteration   6: 1.856 s/op
Iteration   7: 1.852 s/op
Iteration   8: 1.855 s/op
Iteration   9: 1.864 s/op
Iteration  10: 1.855 s/op
Iteration  11: 1.856 s/op
Iteration  12: 1.852 s/op
Iteration  13: 1.857 s/op
Iteration  14: 1.852 s/op
Iteration  15: 1.858 s/op
Iteration  16: 1.855 s/op
Iteration  17: 1.868 s/op
Iteration  18: 1.852 s/op
Iteration  19: 1.853 s/op
Iteration  20: 1.857 s/op
Iteration  21: 1.855 s/op
Iteration  22: 1.854 s/op
Iteration  23: 1.853 s/op
Iteration  24: 1.855 s/op
Iteration  25: 1.856 s/op
Iteration  26: 1.861 s/op
Iteration  27: 1.857 s/op
Iteration  28: 1.857 s/op
Iteration  29: 1.857 s/op
Iteration  30: 1.852 s/op
Iteration  31: 1.857 s/op
Iteration  32: 1.857 s/op
Iteration  33: 1.856 s/op
Iteration  34: 1.861 s/op
Iteration  35: 1.862 s/op
Iteration  36: 1.859 s/op
Iteration  37: 1.859 s/op
Iteration  38: 1.861 s/op
Iteration  39: 1.861 s/op
Iteration  40: 1.855 s/op
Iteration  41: 1.853 s/op
Iteration  42: 1.853 s/op
Iteration  43: 1.848 s/op
Iteration  44: 1.857 s/op
Iteration  45: 1.853 s/op
Iteration  46: 1.860 s/op
Iteration  47: 1.864 s/op
Iteration  48: 1.852 s/op
Iteration  49: 1.855 s/op
Iteration  50: 1.859 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.855 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 46 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.539 s/op
     p(50.0000) =      1.856 s/op
     p(90.0000) =      1.864 s/op
     p(95.0000) =      1.895 s/op
     p(99.0000) =      2.038 s/op
     p(99.9000) =      2.038 s/op
     p(99.9900) =      2.038 s/op
     p(99.9990) =      2.038 s/op
     p(99.9999) =      2.038 s/op
    p(100.0000) =      2.038 s/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.855 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot-8u222-b10_1564707043207.json
{"wallclock_times": [93.63268721799997], "core_cycle_counts": [[77878225073], [50686113143], [63007659029], [123466223691]], "aperf_counts": [[77603188292], [50644329566], [62980678622], [123447220389]], "mperf_counts": [[77620681680], [50646638492], [62980765670], [123447322736]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:52:16: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:52:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:52:17: INFO] 456 executions left in scheduler queue
[2019-08-02 02:52:17: INFO] Executions until ETA known: 3192
[2019-08-02 02:52:17: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:52:17: INFO] Estimated completion (next execution): 2019-08-02 02:56:21 (0:04:03 from now)
[2019-08-02 02:52:17: INFO] Reboot in preparation for next execution
[2019-08-02 02:58:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.294 s/op
Iteration   2: 1.713 s/op
Iteration   3: 1.880 s/op
Iteration   4: 1.762 s/op
Iteration   5: 1.999 s/op
Iteration   6: 2.154 s/op
Iteration   7: 2.156 s/op
Iteration   8: 2.131 s/op
Iteration   9: 2.151 s/op
Iteration  10: 2.146 s/op
Iteration  11: 2.177 s/op
Iteration  12: 2.141 s/op
Iteration  13: 2.112 s/op
Iteration  14: 2.164 s/op
Iteration  15: 2.128 s/op
Iteration  16: 2.148 s/op
Iteration  17: 2.148 s/op
Iteration  18: 2.139 s/op
Iteration  19: 2.112 s/op
Iteration  20: 2.127 s/op
Iteration  21: 2.180 s/op
Iteration  22: 2.146 s/op
Iteration  23: 2.149 s/op
Iteration  24: 2.145 s/op
Iteration  25: 2.168 s/op
Iteration  26: 2.150 s/op
Iteration  27: 2.159 s/op
Iteration  28: 2.150 s/op
Iteration  29: 2.142 s/op
Iteration  30: 2.167 s/op
Iteration  31: 2.155 s/op
Iteration  32: 2.177 s/op
Iteration  33: 2.150 s/op
Iteration  34: 2.137 s/op
Iteration  35: 2.156 s/op
Iteration  36: 2.148 s/op
Iteration  37: 2.163 s/op
Iteration  38: 2.178 s/op
Iteration  39: 2.147 s/op
Iteration  40: 2.137 s/op
Iteration  41: 2.149 s/op
Iteration  42: 2.148 s/op
Iteration  43: 2.150 s/op
Iteration  44: 2.144 s/op
Iteration  45: 2.151 s/op
Iteration  46: 2.149 s/op
Iteration  47: 2.130 s/op
Iteration  48: 2.153 s/op
Iteration  49: 2.139 s/op
Iteration  50: 2.140 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.127 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [1.700, 1.750) = 1 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 28 
    [2.150, 2.200) = 17 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.713 s/op
     p(50.0000) =      2.148 s/op
     p(90.0000) =      2.176 s/op
     p(95.0000) =      2.179 s/op
     p(99.0000) =      2.294 s/op
     p(99.9000) =      2.294 s/op
     p(99.9900) =      2.294 s/op
     p(99.9990) =      2.294 s/op
     p(99.9999) =      2.294 s/op
    p(100.0000) =      2.294 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.127 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot-8u222-b10_1564707388404.json
{"wallclock_times": [107.15450159200003], "core_cycle_counts": [[105919983312], [77569069514], [50191846967], [119802662311]], "aperf_counts": [[105686461867], [77541077124], [50175123166], [119787483981]], "mperf_counts": [[105693519810], [77556602986], [50184511152], [119787727540]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:58:15: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:58:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:58:16: INFO] 455 executions left in scheduler queue
[2019-08-02 02:58:16: INFO] Executions until ETA known: 3185
[2019-08-02 02:58:16: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 02:58:16: INFO] Estimated completion (next execution): 2019-08-02 03:02:33 (0:04:17 from now)
[2019-08-02 02:58:16: INFO] Reboot in preparation for next execution
[2019-08-02 03:02:28: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 03:04:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.803 s/op
Iteration   2: 2.214 s/op
Iteration   3: 2.230 s/op
Iteration   4: 2.354 s/op
Iteration   5: 2.102 s/op
Iteration   6: 1.975 s/op
Iteration   7: 1.979 s/op
Iteration   8: 1.984 s/op
Iteration   9: 1.968 s/op
Iteration  10: 1.932 s/op
Iteration  11: 1.939 s/op
Iteration  12: 1.935 s/op
Iteration  13: 1.935 s/op
Iteration  14: 1.918 s/op
Iteration  15: 1.920 s/op
Iteration  16: 1.920 s/op
Iteration  17: 1.976 s/op
Iteration  18: 1.938 s/op
Iteration  19: 1.951 s/op
Iteration  20: 1.936 s/op
Iteration  21: 1.945 s/op
Iteration  22: 1.970 s/op
Iteration  23: 1.966 s/op
Iteration  24: 1.951 s/op
Iteration  25: 1.942 s/op
Iteration  26: 1.966 s/op
Iteration  27: 1.958 s/op
Iteration  28: 1.966 s/op
Iteration  29: 1.963 s/op
Iteration  30: 1.968 s/op
Iteration  31: 1.960 s/op
Iteration  32: 1.952 s/op
Iteration  33: 1.950 s/op
Iteration  34: 1.960 s/op
Iteration  35: 1.985 s/op
Iteration  36: 1.981 s/op
Iteration  37: 1.968 s/op
Iteration  38: 1.947 s/op
Iteration  39: 1.961 s/op
Iteration  40: 1.984 s/op
Iteration  41: 1.980 s/op
Iteration  42: 1.969 s/op
Iteration  43: 1.971 s/op
Iteration  44: 1.956 s/op
Iteration  45: 1.962 s/op
Iteration  46: 1.967 s/op
Iteration  47: 1.965 s/op
Iteration  48: 1.977 s/op
Iteration  49: 1.953 s/op
Iteration  50: 1.972 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.997 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [1.900, 2.000) = 45 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 2 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.918 s/op
     p(50.0000) =      1.965 s/op
     p(90.0000) =      2.091 s/op
     p(95.0000) =      2.286 s/op
     p(99.0000) =      2.803 s/op
     p(99.9000) =      2.803 s/op
     p(99.9900) =      2.803 s/op
     p(99.9990) =      2.803 s/op
     p(99.9999) =      2.803 s/op
    p(100.0000) =      2.803 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.997 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9-8u222-b10_1564707748609.json
{"wallclock_times": [101.07482129199997], "core_cycle_counts": [[132186592780], [64833277404], [77875728125], [75165160461]], "aperf_counts": [[131897372574], [64750728532], [77804370265], [75113835498]], "mperf_counts": [[131901023394], [64750822506], [77804386490], [75113926910]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:04:09: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 03:04:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:04:10: INFO] 454 executions left in scheduler queue
[2019-08-02 03:04:10: INFO] Executions until ETA known: 3165
[2019-08-02 03:04:10: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 03:04:10: INFO] Estimated completion (next execution): 2019-08-02 03:08:21 (0:04:11 from now)
[2019-08-02 03:04:10: INFO] Reboot in preparation for next execution
[2019-08-02 03:07:38: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 03:09:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.518 s/op
Iteration   2: 3.003 s/op
Iteration   3: 3.302 s/op
Iteration   4: 2.723 s/op
Iteration   5: 2.680 s/op
Iteration   6: 2.638 s/op
Iteration   7: 2.619 s/op
Iteration   8: 2.585 s/op
Iteration   9: 2.602 s/op
Iteration  10: 2.659 s/op
Iteration  11: 2.646 s/op
Iteration  12: 2.636 s/op
Iteration  13: 2.696 s/op
Iteration  14: 2.593 s/op
Iteration  15: 2.702 s/op
Iteration  16: 2.643 s/op
Iteration  17: 2.690 s/op
Iteration  18: 2.633 s/op
Iteration  19: 2.672 s/op
Iteration  20: 2.677 s/op
Iteration  21: 2.685 s/op
Iteration  22: 2.679 s/op
Iteration  23: 2.592 s/op
Iteration  24: 2.680 s/op
Iteration  25: 2.653 s/op
Iteration  26: 2.688 s/op
Iteration  27: 2.674 s/op
Iteration  28: 2.686 s/op
Iteration  29: 2.659 s/op
Iteration  30: 2.641 s/op
Iteration  31: 2.695 s/op
Iteration  32: 2.701 s/op
Iteration  33: 2.664 s/op
Iteration  34: 2.690 s/op
Iteration  35: 2.668 s/op
Iteration  36: 2.677 s/op
Iteration  37: 2.656 s/op
Iteration  38: 2.709 s/op
Iteration  39: 2.628 s/op
Iteration  40: 2.685 s/op
Iteration  41: 2.699 s/op
Iteration  42: 2.658 s/op
Iteration  43: 2.648 s/op
Iteration  44: 2.681 s/op
Iteration  45: 2.678 s/op
Iteration  46: 2.588 s/op
Iteration  47: 2.665 s/op
Iteration  48: 2.625 s/op
Iteration  49: 2.687 s/op
Iteration  50: 2.658 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.698 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [2.500, 2.600) = 4 
    [2.600, 2.700) = 39 
    [2.700, 2.800) = 4 
    [2.800, 2.900) = 0 
    [2.900, 3.000) = 0 
    [3.000, 3.100) = 1 
    [3.100, 3.200) = 0 
    [3.200, 3.300) = 0 
    [3.300, 3.400) = 1 
    [3.400, 3.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.585 s/op
     p(50.0000) =      2.673 s/op
     p(90.0000) =      2.708 s/op
     p(95.0000) =      3.137 s/op
     p(99.0000) =      3.518 s/op
     p(99.9000) =      3.518 s/op
     p(99.9900) =      3.518 s/op
     p(99.9990) =      3.518 s/op
     p(99.9999) =      3.518 s/op
    p(100.0000) =      3.518 s/op


# Run complete. Total time: 00:02:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.698 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9-8u222-b10_1564708058691.json
{"wallclock_times": [136.01195751000003], "core_cycle_counts": [[117559904740], [143085034295], [111316248775], [88069212746]], "aperf_counts": [[117185768631], [143028553800], [111267946371], [88035531592]], "mperf_counts": [[117190468842], [143032297290], [111268823154], [88035612056]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:09:54: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 03:09:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:09:55: INFO] 453 executions left in scheduler queue
[2019-08-02 03:09:55: INFO] Executions until ETA known: 3153
[2019-08-02 03:09:55: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:09:55: INFO] Estimated completion (next execution): 2019-08-02 03:14:41 (0:04:46 from now)
[2019-08-02 03:09:55: INFO] Reboot in preparation for next execution
[2019-08-02 03:14:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:14:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:14:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:14:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:14:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:14:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 03:15:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.867 s/op
Iteration   2: 2.490 s/op
Iteration   3: 2.484 s/op
Iteration   4: 2.257 s/op
Iteration   5: 2.245 s/op
Iteration   6: 2.060 s/op
Iteration   7: 2.056 s/op
Iteration   8: 2.026 s/op
Iteration   9: 2.034 s/op
Iteration  10: 2.018 s/op
Iteration  11: 2.019 s/op
Iteration  12: 2.025 s/op
Iteration  13: 2.015 s/op
Iteration  14: 2.010 s/op
Iteration  15: 2.030 s/op
Iteration  16: 1.987 s/op
Iteration  17: 2.008 s/op
Iteration  18: 2.019 s/op
Iteration  19: 2.047 s/op
Iteration  20: 2.027 s/op
Iteration  21: 2.000 s/op
Iteration  22: 2.032 s/op
Iteration  23: 2.018 s/op
Iteration  24: 2.032 s/op
Iteration  25: 2.032 s/op
Iteration  26: 1.997 s/op
Iteration  27: 2.044 s/op
Iteration  28: 2.047 s/op
Iteration  29: 2.022 s/op
Iteration  30: 2.063 s/op
Iteration  31: 2.058 s/op
Iteration  32: 2.078 s/op
Iteration  33: 2.069 s/op
Iteration  34: 2.082 s/op
Iteration  35: 2.079 s/op
Iteration  36: 2.047 s/op
Iteration  37: 2.036 s/op
Iteration  38: 2.097 s/op
Iteration  39: 2.078 s/op
Iteration  40: 2.058 s/op
Iteration  41: 2.049 s/op
Iteration  42: 2.064 s/op
Iteration  43: 2.064 s/op
Iteration  44: 2.058 s/op
Iteration  45: 2.070 s/op
Iteration  46: 2.048 s/op
Iteration  47: 2.076 s/op
Iteration  48: 2.078 s/op
Iteration  49: 2.036 s/op
Iteration  50: 2.089 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.086 ?(99.9%) 0.074 s/op

  Histogram, s/op:
    [1.900, 2.000) = 2 
    [2.000, 2.100) = 43 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 2 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 2 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.987 s/op
     p(50.0000) =      2.048 s/op
     p(90.0000) =      2.230 s/op
     p(95.0000) =      2.487 s/op
     p(99.0000) =      2.867 s/op
     p(99.9000) =      2.867 s/op
     p(99.9900) =      2.867 s/op
     p(99.9990) =      2.867 s/op
     p(99.9999) =      2.867 s/op
    p(100.0000) =      2.867 s/op


# Run complete. Total time: 00:01:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.086 ? 0.074   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_12.0.1_1564708446788.json
{"wallclock_times": [106.02849967099999], "core_cycle_counts": [[128069161138], [64625327142], [80013901015], [95401480321]], "aperf_counts": [[127739811238], [64547817923], [79940185842], [95326708093]], "mperf_counts": [[127748001316], [64547824066], [79940256548], [95326715550]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:15:52: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:15:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:15:53: INFO] 452 executions left in scheduler queue
[2019-08-02 03:15:53: INFO] Executions until ETA known: 3133
[2019-08-02 03:15:53: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:15:53: INFO] Estimated completion (next execution): 2019-08-02 03:20:10 (0:04:16 from now)
[2019-08-02 03:15:53: INFO] Reboot in preparation for next execution
[2019-08-02 03:20:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:20:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:20:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:20:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:20:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:20:18: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 03:22:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.297 s/op
Iteration   2: 3.126 s/op
Iteration   3: 2.921 s/op
Iteration   4: 2.816 s/op
Iteration   5: 2.871 s/op
Iteration   6: 2.894 s/op
Iteration   7: 2.893 s/op
Iteration   8: 2.908 s/op
Iteration   9: 2.945 s/op
Iteration  10: 3.008 s/op
Iteration  11: 2.951 s/op
Iteration  12: 2.938 s/op
Iteration  13: 2.890 s/op
Iteration  14: 2.861 s/op
Iteration  15: 2.886 s/op
Iteration  16: 2.867 s/op
Iteration  17: 2.864 s/op
Iteration  18: 2.861 s/op
Iteration  19: 2.899 s/op
Iteration  20: 2.870 s/op
Iteration  21: 2.925 s/op
Iteration  22: 2.832 s/op
Iteration  23: 2.920 s/op
Iteration  24: 2.897 s/op
Iteration  25: 2.795 s/op
Iteration  26: 2.920 s/op
Iteration  27: 2.809 s/op
Iteration  28: 2.877 s/op
Iteration  29: 2.862 s/op
Iteration  30: 2.858 s/op
Iteration  31: 2.915 s/op
Iteration  32: 2.840 s/op
Iteration  33: 2.863 s/op
Iteration  34: 2.870 s/op
Iteration  35: 2.916 s/op
Iteration  36: 2.868 s/op
Iteration  37: 2.888 s/op
Iteration  38: 2.888 s/op
Iteration  39: 2.868 s/op
Iteration  40: 2.915 s/op
Iteration  41: 2.871 s/op
Iteration  42: 2.898 s/op
Iteration  43: 2.852 s/op
Iteration  44: 2.874 s/op
Iteration  45: 2.856 s/op
Iteration  46: 2.865 s/op
Iteration  47: 2.884 s/op
Iteration  48: 2.840 s/op
Iteration  49: 2.889 s/op
Iteration  50: 2.855 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.896 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 1 
    [2.800, 2.850) = 5 
    [2.850, 2.900) = 30 
    [2.900, 2.950) = 10 
    [2.950, 3.000) = 1 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 1 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.795 s/op
     p(50.0000) =      2.881 s/op
     p(90.0000) =      2.945 s/op
     p(95.0000) =      3.061 s/op
     p(99.0000) =      3.297 s/op
     p(99.9000) =      3.297 s/op
     p(99.9900) =      3.297 s/op
     p(99.9990) =      3.297 s/op
     p(99.9999) =      3.297 s/op
    p(100.0000) =      3.297 s/op


# Run complete. Total time: 00:02:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.896 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_12.0.1_1564708817906.json
{"wallclock_times": [146.29668953399997], "core_cycle_counts": [[190230069081], [125659971350], [106958530861], [81321552528]], "aperf_counts": [[189900680984], [125591264188], [106887236165], [81257267419]], "mperf_counts": [[189909878696], [125594026896], [106887224856], [81257548268]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:22:44: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:22:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:22:45: INFO] 451 executions left in scheduler queue
[2019-08-02 03:22:45: INFO] Executions until ETA known: 3123
[2019-08-02 03:22:45: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-08-02 03:22:45: INFO] Estimated completion (next execution): 2019-08-02 03:27:41 (0:04:56 from now)
[2019-08-02 03:22:45: INFO] Reboot in preparation for next execution
[2019-08-02 03:26:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:26:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:26:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:26:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:26:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:31:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.617 s/op
Iteration   2: 6.260 s/op
Iteration   3: 5.355 s/op
Iteration   4: 5.359 s/op
Iteration   5: 5.355 s/op
Iteration   6: 5.361 s/op
Iteration   7: 5.353 s/op
Iteration   8: 5.369 s/op
Iteration   9: 5.354 s/op
Iteration  10: 5.354 s/op
Iteration  11: 5.381 s/op
Iteration  12: 5.354 s/op
Iteration  13: 5.361 s/op
Iteration  14: 5.354 s/op
Iteration  15: 5.368 s/op
Iteration  16: 5.355 s/op
Iteration  17: 5.352 s/op
Iteration  18: 5.356 s/op
Iteration  19: 5.357 s/op
Iteration  20: 5.354 s/op
Iteration  21: 5.355 s/op
Iteration  22: 5.355 s/op
Iteration  23: 5.354 s/op
Iteration  24: 5.357 s/op
Iteration  25: 5.354 s/op
Iteration  26: 5.358 s/op
Iteration  27: 5.353 s/op
Iteration  28: 5.356 s/op
Iteration  29: 5.349 s/op
Iteration  30: 5.358 s/op
Iteration  31: 5.352 s/op
Iteration  32: 5.353 s/op
Iteration  33: 5.362 s/op
Iteration  34: 5.349 s/op
Iteration  35: 5.365 s/op
Iteration  36: 5.356 s/op
Iteration  37: 5.354 s/op
Iteration  38: 5.353 s/op
Iteration  39: 5.351 s/op
Iteration  40: 5.354 s/op
Iteration  41: 5.383 s/op
Iteration  42: 5.354 s/op
Iteration  43: 5.361 s/op
Iteration  44: 5.360 s/op
Iteration  45: 5.351 s/op
Iteration  46: 5.360 s/op
Iteration  47: 5.357 s/op
Iteration  48: 5.349 s/op
Iteration  49: 5.355 s/op
Iteration  50: 5.362 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      5.380 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [5.300, 5.400) = 48 
    [5.400, 5.500) = 0 
    [5.500, 5.600) = 0 
    [5.600, 5.700) = 1 
    [5.700, 5.800) = 0 
    [5.800, 5.900) = 0 
    [5.900, 6.000) = 0 
    [6.000, 6.100) = 0 
    [6.100, 6.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.349 s/op
     p(50.0000) =      5.355 s/op
     p(90.0000) =      5.369 s/op
     p(95.0000) =      5.488 s/op
     p(99.0000) =      6.260 s/op
     p(99.9000) =      6.260 s/op
     p(99.9900) =      6.260 s/op
     p(99.9990) =      6.260 s/op
     p(99.9999) =      6.260 s/op
    p(100.0000) =      6.260 s/op


# Run complete. Total time: 00:04:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.380 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot_11.0.4_1564709217955.json
{"wallclock_times": [270.04542022000004], "core_cycle_counts": [[93111558709], [217936540930], [496109155891], [64647614572]], "aperf_counts": [[92307266256], [217875148419], [496079827932], [64607942971]], "mperf_counts": [[93168206508], [218022036864], [496446959764], [64714261504]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 03:31:27: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-08-02 03:31:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:31:28: INFO] 450 executions left in scheduler queue
[2019-08-02 03:31:28: INFO] Executions until ETA known: 3084
[2019-08-02 03:31:28: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-08-02 03:31:28: INFO] Estimated completion (next execution): 2019-08-02 03:38:29 (0:07:00 from now)
[2019-08-02 03:31:28: INFO] Reboot in preparation for next execution
[2019-08-02 03:35:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:35:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:35:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:35:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:35:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:35:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 03:48:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.445 s/op
Iteration   2: 14.576 s/op
Iteration   3: 15.646 s/op
Iteration   4: 15.648 s/op
Iteration   5: 15.643 s/op
Iteration   6: 15.649 s/op
Iteration   7: 15.637 s/op
Iteration   8: 15.656 s/op
Iteration   9: 15.602 s/op
Iteration  10: 15.645 s/op
Iteration  11: 15.644 s/op
Iteration  12: 15.623 s/op
Iteration  13: 15.671 s/op
Iteration  14: 15.668 s/op
Iteration  15: 15.626 s/op
Iteration  16: 15.654 s/op
Iteration  17: 15.649 s/op
Iteration  18: 15.640 s/op
Iteration  19: 15.636 s/op
Iteration  20: 15.621 s/op
Iteration  21: 15.595 s/op
Iteration  22: 15.633 s/op
Iteration  23: 15.600 s/op
Iteration  24: 15.628 s/op
Iteration  25: 15.625 s/op
Iteration  26: 15.657 s/op
Iteration  27: 15.659 s/op
Iteration  28: 15.683 s/op
Iteration  29: 15.631 s/op
Iteration  30: 15.616 s/op
Iteration  31: 15.649 s/op
Iteration  32: 15.597 s/op
Iteration  33: 15.623 s/op
Iteration  34: 15.671 s/op
Iteration  35: 15.662 s/op
Iteration  36: 15.611 s/op
Iteration  37: 15.646 s/op
Iteration  38: 15.651 s/op
Iteration  39: 15.632 s/op
Iteration  40: 15.602 s/op
Iteration  41: 15.643 s/op
Iteration  42: 15.622 s/op
Iteration  43: 15.642 s/op
Iteration  44: 15.623 s/op
Iteration  45: 15.630 s/op
Iteration  46: 15.623 s/op
Iteration  47: 15.625 s/op
Iteration  48: 15.616 s/op
Iteration  49: 15.626 s/op
Iteration  50: 15.587 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     15.630 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 1 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 48 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.576 s/op
     p(50.0000) =     15.634 s/op
     p(90.0000) =     15.667 s/op
     p(95.0000) =     15.677 s/op
     p(99.0000) =     16.445 s/op
     p(99.9000) =     16.445 s/op
     p(99.9900) =     16.445 s/op
     p(99.9990) =     16.445 s/op
     p(99.9999) =     16.445 s/op
    p(100.0000) =     16.445 s/op


# Run complete. Total time: 00:13:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  15.630 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9_11.0.4_1564709739821.json
{"wallclock_times": [783.065571006], "core_cycle_counts": [[552401907923], [484081567479], [636636066141], [909291905485]], "aperf_counts": [[550187845042], [483936619532], [636397884928], [909186875700]], "mperf_counts": [[550191940358], [483936682740], [636397820742], [909186852524]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:48:42: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-08-02 03:48:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:48:43: INFO] 449 executions left in scheduler queue
[2019-08-02 03:48:43: INFO] Executions until ETA known: 3042
[2019-08-02 03:48:43: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 03:48:43: INFO] Estimated completion (next execution): 2019-08-02 04:04:17 (0:15:33 from now)
[2019-08-02 03:48:43: INFO] Reboot in preparation for next execution
[2019-08-02 03:52:54: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 03:54:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.032 s/op
Iteration   2: 2.483 s/op
Iteration   3: 2.017 s/op
Iteration   4: 2.236 s/op
Iteration   5: 1.927 s/op
Iteration   6: 1.859 s/op
Iteration   7: 1.836 s/op
Iteration   8: 1.856 s/op
Iteration   9: 1.833 s/op
Iteration  10: 1.815 s/op
Iteration  11: 1.858 s/op
Iteration  12: 1.835 s/op
Iteration  13: 1.863 s/op
Iteration  14: 1.823 s/op
Iteration  15: 1.829 s/op
Iteration  16: 1.844 s/op
Iteration  17: 1.863 s/op
Iteration  18: 1.886 s/op
Iteration  19: 1.878 s/op
Iteration  20: 1.874 s/op
Iteration  21: 1.848 s/op
Iteration  22: 1.882 s/op
Iteration  23: 1.863 s/op
Iteration  24: 1.897 s/op
Iteration  25: 1.892 s/op
Iteration  26: 1.871 s/op
Iteration  27: 1.848 s/op
Iteration  28: 1.870 s/op
Iteration  29: 1.878 s/op
Iteration  30: 1.893 s/op
Iteration  31: 1.872 s/op
Iteration  32: 1.874 s/op
Iteration  33: 1.873 s/op
Iteration  34: 1.882 s/op
Iteration  35: 1.881 s/op
Iteration  36: 1.844 s/op
Iteration  37: 1.901 s/op
Iteration  38: 1.864 s/op
Iteration  39: 1.853 s/op
Iteration  40: 1.891 s/op
Iteration  41: 1.894 s/op
Iteration  42: 1.881 s/op
Iteration  43: 1.841 s/op
Iteration  44: 1.870 s/op
Iteration  45: 1.847 s/op
Iteration  46: 1.873 s/op
Iteration  47: 1.882 s/op
Iteration  48: 1.889 s/op
Iteration  49: 1.870 s/op
Iteration  50: 1.874 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.913 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 46 
    [2.000, 2.250) = 2 
    [2.250, 2.500) = 1 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 0 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.815 s/op
     p(50.0000) =      1.873 s/op
     p(90.0000) =      1.924 s/op
     p(95.0000) =      2.347 s/op
     p(99.0000) =      3.032 s/op
     p(99.9000) =      3.032 s/op
     p(99.9900) =      3.032 s/op
     p(99.9990) =      3.032 s/op
     p(99.9999) =      3.032 s/op
    p(100.0000) =      3.032 s/op


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.913 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9-8u222-b10_1564710774597.json
{"wallclock_times": [96.91141437600001], "core_cycle_counts": [[79097301002], [62276045066], [95898025085], [97875965806]], "aperf_counts": [[78738740640], [62206379428], [95843158924], [97832461224]], "mperf_counts": [[78739696014], [62206391768], [95843153484], [97832464494]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:54:31: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 03:54:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:54:32: INFO] 448 executions left in scheduler queue
[2019-08-02 03:54:32: INFO] Executions until ETA known: 3032
[2019-08-02 03:54:32: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 03:54:32: INFO] Estimated completion (next execution): 2019-08-02 03:58:39 (0:04:07 from now)
[2019-08-02 03:54:32: INFO] Reboot in preparation for next execution
[2019-08-02 03:58:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 04:01:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.610 s/op
Iteration   2: 3.258 s/op
Iteration   3: 3.242 s/op
Iteration   4: 3.067 s/op
Iteration   5: 2.912 s/op
Iteration   6: 2.959 s/op
Iteration   7: 2.933 s/op
Iteration   8: 2.908 s/op
Iteration   9: 2.860 s/op
Iteration  10: 2.848 s/op
Iteration  11: 2.837 s/op
Iteration  12: 2.823 s/op
Iteration  13: 2.846 s/op
Iteration  14: 2.834 s/op
Iteration  15: 2.903 s/op
Iteration  16: 2.850 s/op
Iteration  17: 2.870 s/op
Iteration  18: 2.866 s/op
Iteration  19: 2.795 s/op
Iteration  20: 2.892 s/op
Iteration  21: 2.899 s/op
Iteration  22: 2.888 s/op
Iteration  23: 2.824 s/op
Iteration  24: 2.842 s/op
Iteration  25: 2.908 s/op
Iteration  26: 2.873 s/op
Iteration  27: 2.794 s/op
Iteration  28: 2.898 s/op
Iteration  29: 2.881 s/op
Iteration  30: 2.855 s/op
Iteration  31: 2.860 s/op
Iteration  32: 2.820 s/op
Iteration  33: 2.857 s/op
Iteration  34: 2.904 s/op
Iteration  35: 2.857 s/op
Iteration  36: 2.873 s/op
Iteration  37: 2.874 s/op
Iteration  38: 2.880 s/op
Iteration  39: 2.876 s/op
Iteration  40: 2.834 s/op
Iteration  41: 2.886 s/op
Iteration  42: 2.822 s/op
Iteration  43: 2.832 s/op
Iteration  44: 2.900 s/op
Iteration  45: 2.885 s/op
Iteration  46: 2.782 s/op
Iteration  47: 2.863 s/op
Iteration  48: 2.982 s/op
Iteration  49: 2.991 s/op
Iteration  50: 2.974 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.907 ?(99.9%) 0.067 s/op

  Histogram, s/op:
    [2.700, 2.800) = 3 
    [2.800, 2.900) = 33 
    [2.900, 3.000) = 10 
    [3.000, 3.100) = 1 
    [3.100, 3.200) = 0 
    [3.200, 3.300) = 2 
    [3.300, 3.400) = 0 
    [3.400, 3.500) = 0 
    [3.500, 3.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.782 s/op
     p(50.0000) =      2.874 s/op
     p(90.0000) =      2.990 s/op
     p(95.0000) =      3.250 s/op
     p(99.0000) =      3.610 s/op
     p(99.9000) =      3.610 s/op
     p(99.9900) =      3.610 s/op
     p(99.9990) =      3.610 s/op
     p(99.9999) =      3.610 s/op
    p(100.0000) =      3.610 s/op


# Run complete. Total time: 00:02:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.907 ? 0.067   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9-8u222-b10_1564711125242.json
{"wallclock_times": [146.44790680599996], "core_cycle_counts": [[161652469031], [91133674703], [134330922859], [106986961741]], "aperf_counts": [[161300623483], [91062105897], [134285403423], [106940306177]], "mperf_counts": [[161303928170], [91062128136], [134287792662], [106940299726]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:01:11: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 04:01:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:01:12: INFO] 447 executions left in scheduler queue
[2019-08-02 04:01:12: INFO] Executions until ETA known: 3029
[2019-08-02 04:01:12: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:01:12: INFO] Estimated completion (next execution): 2019-08-02 04:06:09 (0:04:56 from now)
[2019-08-02 04:01:12: INFO] Reboot in preparation for next execution
[2019-08-02 04:10:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.874 s/op
Iteration   2: 5.826 s/op
Iteration   3: 5.668 s/op
Iteration   4: 5.655 s/op
Iteration   5: 5.648 s/op
Iteration   6: 5.652 s/op
Iteration   7: 5.651 s/op
Iteration   8: 5.649 s/op
Iteration   9: 5.651 s/op
Iteration  10: 5.661 s/op
Iteration  11: 5.649 s/op
Iteration  12: 5.667 s/op
Iteration  13: 5.665 s/op
Iteration  14: 5.654 s/op
Iteration  15: 5.655 s/op
Iteration  16: 5.645 s/op
Iteration  17: 5.661 s/op
Iteration  18: 5.641 s/op
Iteration  19: 5.668 s/op
Iteration  20: 5.664 s/op
Iteration  21: 5.660 s/op
Iteration  22: 5.653 s/op
Iteration  23: 5.648 s/op
Iteration  24: 5.650 s/op
Iteration  25: 5.659 s/op
Iteration  26: 5.657 s/op
Iteration  27: 5.647 s/op
Iteration  28: 5.669 s/op
Iteration  29: 5.661 s/op
Iteration  30: 5.658 s/op
Iteration  31: 5.644 s/op
Iteration  32: 5.660 s/op
Iteration  33: 5.662 s/op
Iteration  34: 5.648 s/op
Iteration  35: 5.655 s/op
Iteration  36: 5.641 s/op
Iteration  37: 5.659 s/op
Iteration  38: 5.661 s/op
Iteration  39: 5.661 s/op
Iteration  40: 5.661 s/op
Iteration  41: 5.648 s/op
Iteration  42: 5.648 s/op
Iteration  43: 5.639 s/op
Iteration  44: 5.658 s/op
Iteration  45: 5.664 s/op
Iteration  46: 5.673 s/op
Iteration  47: 5.639 s/op
Iteration  48: 5.651 s/op
Iteration  49: 5.665 s/op
Iteration  50: 5.657 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.663 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [5.600, 5.625) = 0 
    [5.625, 5.650) = 14 
    [5.650, 5.675) = 34 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 0 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 1 
    [5.850, 5.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.639 s/op
     p(50.0000) =      5.657 s/op
     p(90.0000) =      5.668 s/op
     p(95.0000) =      5.742 s/op
     p(99.0000) =      5.874 s/op
     p(99.9000) =      5.874 s/op
     p(99.9900) =      5.874 s/op
     p(99.9990) =      5.874 s/op
     p(99.9999) =      5.874 s/op
    p(100.0000) =      5.874 s/op


# Run complete. Total time: 00:04:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.663 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ce-19.1.1_1564711524559.json
{"wallclock_times": [284.06100328499997], "core_cycle_counts": [[198152520580], [308397247041], [299806043119], [112476718274]], "aperf_counts": [[197466270740], [308345993903], [299782870412], [112453766389]], "mperf_counts": [[197492703338], [308348038936], [299785601840], [112461404448]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:10:08: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:10:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:10:09: INFO] 446 executions left in scheduler queue
[2019-08-02 04:10:09: INFO] Executions until ETA known: 3023
[2019-08-02 04:10:09: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:10:09: INFO] Estimated completion (next execution): 2019-08-02 04:17:23 (0:07:14 from now)
[2019-08-02 04:10:09: INFO] Reboot in preparation for next execution
[2019-08-02 04:17:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.914 s/op
Iteration   2: 3.535 s/op
Iteration   3: 3.434 s/op
Iteration   4: 3.449 s/op
Iteration   5: 3.434 s/op
Iteration   6: 3.449 s/op
Iteration   7: 3.415 s/op
Iteration   8: 3.437 s/op
Iteration   9: 3.435 s/op
Iteration  10: 3.417 s/op
Iteration  11: 3.446 s/op
Iteration  12: 3.417 s/op
Iteration  13: 3.450 s/op
Iteration  14: 3.439 s/op
Iteration  15: 3.430 s/op
Iteration  16: 3.411 s/op
Iteration  17: 3.414 s/op
Iteration  18: 3.417 s/op
Iteration  19: 3.427 s/op
Iteration  20: 3.432 s/op
Iteration  21: 3.439 s/op
Iteration  22: 3.434 s/op
Iteration  23: 3.406 s/op
Iteration  24: 3.447 s/op
Iteration  25: 3.397 s/op
Iteration  26: 3.415 s/op
Iteration  27: 3.417 s/op
Iteration  28: 3.406 s/op
Iteration  29: 3.417 s/op
Iteration  30: 3.466 s/op
Iteration  31: 3.437 s/op
Iteration  32: 3.400 s/op
Iteration  33: 3.441 s/op
Iteration  34: 3.448 s/op
Iteration  35: 3.415 s/op
Iteration  36: 3.408 s/op
Iteration  37: 3.423 s/op
Iteration  38: 3.407 s/op
Iteration  39: 3.401 s/op
Iteration  40: 3.457 s/op
Iteration  41: 3.425 s/op
Iteration  42: 3.438 s/op
Iteration  43: 3.455 s/op
Iteration  44: 3.443 s/op
Iteration  45: 3.453 s/op
Iteration  46: 3.439 s/op
Iteration  47: 3.446 s/op
Iteration  48: 3.454 s/op
Iteration  49: 3.409 s/op
Iteration  50: 3.439 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.442 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 41 
    [3.450, 3.500) = 6 
    [3.500, 3.550) = 1 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.397 s/op
     p(50.0000) =      3.434 s/op
     p(90.0000) =      3.455 s/op
     p(95.0000) =      3.497 s/op
     p(99.0000) =      3.914 s/op
     p(99.9000) =      3.914 s/op
     p(99.9900) =      3.914 s/op
     p(99.9990) =      3.914 s/op
     p(99.9999) =      3.914 s/op
    p(100.0000) =      3.914 s/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.442 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ce-19.1.1_1564712061449.json
{"wallclock_times": [173.06652301600002], "core_cycle_counts": [[169362992968], [158613623569], [110258986808], [132992923863]], "aperf_counts": [[168980880592], [158563370599], [110237832276], [132975594518]], "mperf_counts": [[169001895610], [158579822428], [110238888648], [132979214186]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:17:14: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:17:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:17:15: INFO] 445 executions left in scheduler queue
[2019-08-02 04:17:15: INFO] Executions until ETA known: 3017
[2019-08-02 04:17:15: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:17:15: INFO] Estimated completion (next execution): 2019-08-02 04:22:38 (0:05:23 from now)
[2019-08-02 04:17:15: INFO] Reboot in preparation for next execution
[2019-08-02 04:24:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.158 s/op
Iteration   2: 3.661 s/op
Iteration   3: 3.639 s/op
Iteration   4: 3.637 s/op
Iteration   5: 3.621 s/op
Iteration   6: 3.685 s/op
Iteration   7: 3.624 s/op
Iteration   8: 3.638 s/op
Iteration   9: 3.683 s/op
Iteration  10: 3.645 s/op
Iteration  11: 3.687 s/op
Iteration  12: 3.633 s/op
Iteration  13: 3.629 s/op
Iteration  14: 3.677 s/op
Iteration  15: 3.650 s/op
Iteration  16: 3.627 s/op
Iteration  17: 3.713 s/op
Iteration  18: 3.635 s/op
Iteration  19: 3.646 s/op
Iteration  20: 3.689 s/op
Iteration  21: 3.629 s/op
Iteration  22: 3.628 s/op
Iteration  23: 3.685 s/op
Iteration  24: 3.635 s/op
Iteration  25: 3.627 s/op
Iteration  26: 3.689 s/op
Iteration  27: 3.625 s/op
Iteration  28: 3.636 s/op
Iteration  29: 3.700 s/op
Iteration  30: 3.642 s/op
Iteration  31: 3.620 s/op
Iteration  32: 3.686 s/op
Iteration  33: 3.636 s/op
Iteration  34: 3.637 s/op
Iteration  35: 3.688 s/op
Iteration  36: 3.625 s/op
Iteration  37: 3.632 s/op
Iteration  38: 3.710 s/op
Iteration  39: 3.644 s/op
Iteration  40: 3.642 s/op
Iteration  41: 3.643 s/op
Iteration  42: 3.693 s/op
Iteration  43: 3.638 s/op
Iteration  44: 3.633 s/op
Iteration  45: 3.703 s/op
Iteration  46: 3.635 s/op
Iteration  47: 3.644 s/op
Iteration  48: 3.709 s/op
Iteration  49: 3.645 s/op
Iteration  50: 3.726 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.665 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [3.600, 3.650) = 31 
    [3.650, 3.700) = 13 
    [3.700, 3.750) = 5 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.620 s/op
     p(50.0000) =      3.642 s/op
     p(90.0000) =      3.708 s/op
     p(95.0000) =      3.719 s/op
     p(99.0000) =      4.158 s/op
     p(99.9000) =      4.158 s/op
     p(99.9900) =      4.158 s/op
     p(99.9990) =      4.158 s/op
     p(99.9999) =      4.158 s/op
    p(100.0000) =      4.158 s/op


# Run complete. Total time: 00:03:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.665 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ce-19.1.1_1564712487675.json
{"wallclock_times": [184.31221474000003], "core_cycle_counts": [[170219864419], [178722740961], [127019097303], [188186552446]], "aperf_counts": [[169738079570], [178668896769], [126973931465], [188146757694]], "mperf_counts": [[169752700522], [178681365822], [126981113942], [188147076990]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:24:31: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:24:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:24:32: INFO] 444 executions left in scheduler queue
[2019-08-02 04:24:32: INFO] Executions until ETA known: 3012
[2019-08-02 04:24:32: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:24:32: INFO] Estimated completion (next execution): 2019-08-02 04:30:07 (0:05:34 from now)
[2019-08-02 04:24:32: INFO] Reboot in preparation for next execution
[2019-08-02 04:37:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.394 s/op
Iteration   2: 10.353 s/op
Iteration   3: 10.220 s/op
Iteration   4: 10.208 s/op
Iteration   5: 10.183 s/op
Iteration   6: 10.210 s/op
Iteration   7: 10.220 s/op
Iteration   8: 10.187 s/op
Iteration   9: 10.228 s/op
Iteration  10: 10.203 s/op
Iteration  11: 10.242 s/op
Iteration  12: 10.196 s/op
Iteration  13: 10.180 s/op
Iteration  14: 10.178 s/op
Iteration  15: 10.193 s/op
Iteration  16: 10.191 s/op
Iteration  17: 10.164 s/op
Iteration  18: 10.195 s/op
Iteration  19: 10.191 s/op
Iteration  20: 10.201 s/op
Iteration  21: 10.199 s/op
Iteration  22: 10.185 s/op
Iteration  23: 10.217 s/op
Iteration  24: 10.239 s/op
Iteration  25: 10.217 s/op
Iteration  26: 10.188 s/op
Iteration  27: 10.197 s/op
Iteration  28: 10.212 s/op
Iteration  29: 10.178 s/op
Iteration  30: 10.209 s/op
Iteration  31: 10.245 s/op
Iteration  32: 10.222 s/op
Iteration  33: 10.220 s/op
Iteration  34: 10.192 s/op
Iteration  35: 10.231 s/op
Iteration  36: 10.214 s/op
Iteration  37: 10.212 s/op
Iteration  38: 10.183 s/op
Iteration  39: 10.186 s/op
Iteration  40: 10.213 s/op
Iteration  41: 10.204 s/op
Iteration  42: 10.195 s/op
Iteration  43: 10.226 s/op
Iteration  44: 10.351 s/op
Iteration  45: 10.206 s/op
Iteration  46: 10.173 s/op
Iteration  47: 10.198 s/op
Iteration  48: 10.207 s/op
Iteration  49: 10.211 s/op
Iteration  50: 10.186 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.213 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [10.100, 10.125) = 0 
    [10.125, 10.150) = 0 
    [10.150, 10.175) = 2 
    [10.175, 10.200) = 20 
    [10.200, 10.225) = 19 
    [10.225, 10.250) = 6 
    [10.250, 10.275) = 0 
    [10.275, 10.300) = 0 
    [10.300, 10.325) = 0 
    [10.325, 10.350) = 0 
    [10.350, 10.375) = 2 

  Percentiles, s/op:
      p(0.0000) =     10.164 s/op
     p(50.0000) =     10.205 s/op
     p(90.0000) =     10.242 s/op
     p(95.0000) =     10.352 s/op
     p(99.0000) =     10.394 s/op
     p(99.9000) =     10.394 s/op
     p(99.9900) =     10.394 s/op
     p(99.9990) =     10.394 s/op
     p(99.9999) =     10.394 s/op
    p(100.0000) =     10.394 s/op


# Run complete. Total time: 00:08:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.213 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ce-19.1.1_1564712936565.json
{"wallclock_times": [511.54919598199996], "core_cycle_counts": [[510764580321], [528437148899], [276699060672], [331403791177]], "aperf_counts": [[509670846122], [528329330962], [276666811024], [331378221484]], "mperf_counts": [[509689416824], [528334861922], [276666908066], [331384281154]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:37:28: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:37:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:37:29: INFO] 443 executions left in scheduler queue
[2019-08-02 04:37:29: INFO] Executions until ETA known: 2978
[2019-08-02 04:37:29: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:37:29: INFO] Estimated completion (next execution): 2019-08-02 04:48:30 (0:11:01 from now)
[2019-08-02 04:37:29: INFO] Reboot in preparation for next execution
[2019-08-02 04:41:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 04:41:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 04:41:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 04:41:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 04:41:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 04:41:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 04:43:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.897 s/op
Iteration   2: 2.190 s/op
Iteration   3: 2.287 s/op
Iteration   4: 2.037 s/op
Iteration   5: 2.061 s/op
Iteration   6: 2.017 s/op
Iteration   7: 1.983 s/op
Iteration   8: 1.937 s/op
Iteration   9: 1.950 s/op
Iteration  10: 1.936 s/op
Iteration  11: 1.891 s/op
Iteration  12: 1.933 s/op
Iteration  13: 1.927 s/op
Iteration  14: 1.933 s/op
Iteration  15: 1.909 s/op
Iteration  16: 1.911 s/op
Iteration  17: 1.962 s/op
Iteration  18: 1.953 s/op
Iteration  19: 1.960 s/op
Iteration  20: 1.945 s/op
Iteration  21: 1.948 s/op
Iteration  22: 1.936 s/op
Iteration  23: 1.945 s/op
Iteration  24: 1.963 s/op
Iteration  25: 1.916 s/op
Iteration  26: 1.904 s/op
Iteration  27: 1.944 s/op
Iteration  28: 1.939 s/op
Iteration  29: 1.935 s/op
Iteration  30: 1.932 s/op
Iteration  31: 1.947 s/op
Iteration  32: 1.959 s/op
Iteration  33: 1.952 s/op
Iteration  34: 1.933 s/op
Iteration  35: 1.941 s/op
Iteration  36: 1.948 s/op
Iteration  37: 1.943 s/op
Iteration  38: 1.929 s/op
Iteration  39: 1.912 s/op
Iteration  40: 1.953 s/op
Iteration  41: 1.959 s/op
Iteration  42: 1.963 s/op
Iteration  43: 1.956 s/op
Iteration  44: 1.942 s/op
Iteration  45: 1.951 s/op
Iteration  46: 1.930 s/op
Iteration  47: 1.950 s/op
Iteration  48: 1.902 s/op
Iteration  49: 1.915 s/op
Iteration  50: 1.933 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.976 ?(99.9%) 0.073 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 0 
    [1.875, 2.000) = 44 
    [2.000, 2.125) = 3 
    [2.125, 2.250) = 1 
    [2.250, 2.375) = 1 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.891 s/op
     p(50.0000) =      1.944 s/op
     p(90.0000) =      2.035 s/op
     p(95.0000) =      2.233 s/op
     p(99.0000) =      2.897 s/op
     p(99.9000) =      2.897 s/op
     p(99.9900) =      2.897 s/op
     p(99.9990) =      2.897 s/op
     p(99.9999) =      2.897 s/op
    p(100.0000) =      2.897 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.976 ? 0.073   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_11.0.4_1564713701828.json
{"wallclock_times": [100.43186240199998], "core_cycle_counts": [[110881809262], [96189993255], [89891082211], [55431525682]], "aperf_counts": [[110554277703], [96102544371], [89833308749], [55375486603]], "mperf_counts": [[110563581294], [96102700028], [89834071886], [55375497460]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:43:22: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:43:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:43:23: INFO] 442 executions left in scheduler queue
[2019-08-02 04:43:23: INFO] Executions until ETA known: 2968
[2019-08-02 04:43:23: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:43:23: INFO] Estimated completion (next execution): 2019-08-02 04:47:34 (0:04:11 from now)
[2019-08-02 04:43:23: INFO] Reboot in preparation for next execution
[2019-08-02 04:47:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 04:47:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 04:47:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 04:47:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 04:47:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 04:47:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 04:50:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.164 s/op
Iteration   2: 3.215 s/op
Iteration   3: 3.175 s/op
Iteration   4: 2.880 s/op
Iteration   5: 2.913 s/op
Iteration   6: 2.910 s/op
Iteration   7: 2.896 s/op
Iteration   8: 2.866 s/op
Iteration   9: 2.830 s/op
Iteration  10: 2.789 s/op
Iteration  11: 2.896 s/op
Iteration  12: 2.840 s/op
Iteration  13: 2.843 s/op
Iteration  14: 2.822 s/op
Iteration  15: 2.819 s/op
Iteration  16: 2.894 s/op
Iteration  17: 2.897 s/op
Iteration  18: 2.824 s/op
Iteration  19: 2.857 s/op
Iteration  20: 2.933 s/op
Iteration  21: 2.910 s/op
Iteration  22: 2.868 s/op
Iteration  23: 2.867 s/op
Iteration  24: 2.929 s/op
Iteration  25: 2.933 s/op
Iteration  26: 2.839 s/op
Iteration  27: 2.867 s/op
Iteration  28: 2.855 s/op
Iteration  29: 2.842 s/op
Iteration  30: 2.901 s/op
Iteration  31: 2.835 s/op
Iteration  32: 2.926 s/op
Iteration  33: 2.870 s/op
Iteration  34: 2.881 s/op
Iteration  35: 2.889 s/op
Iteration  36: 2.904 s/op
Iteration  37: 2.890 s/op
Iteration  38: 2.922 s/op
Iteration  39: 2.904 s/op
Iteration  40: 2.916 s/op
Iteration  41: 2.871 s/op
Iteration  42: 2.882 s/op
Iteration  43: 2.922 s/op
Iteration  44: 2.960 s/op
Iteration  45: 3.013 s/op
Iteration  46: 2.928 s/op
Iteration  47: 2.980 s/op
Iteration  48: 2.960 s/op
Iteration  49: 2.987 s/op
Iteration  50: 2.968 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.930 ?(99.9%) 0.096 s/op

  Histogram, s/op:
    [2.000, 2.250) = 0 
    [2.250, 2.500) = 0 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 46 
    [3.000, 3.250) = 3 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 
    [3.750, 4.000) = 0 
    [4.000, 4.250) = 1 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.789 s/op
     p(50.0000) =      2.896 s/op
     p(90.0000) =      2.986 s/op
     p(95.0000) =      3.193 s/op
     p(99.0000) =      4.164 s/op
     p(99.9000) =      4.164 s/op
     p(99.9900) =      4.164 s/op
     p(99.9990) =      4.164 s/op
     p(99.9999) =      4.164 s/op
    p(100.0000) =      4.164 s/op


# Run complete. Total time: 00:02:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.930 ? 0.096   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_11.0.4_1564714069327.json
{"wallclock_times": [147.98792163099998], "core_cycle_counts": [[204404926802], [88850219899], [99021896501], [114357957093]], "aperf_counts": [[204092449343], [88774807150], [98941420173], [114285886693]], "mperf_counts": [[204096594336], [88775336254], [98941480448], [114286283474]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:50:17: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:50:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:50:18: INFO] 441 executions left in scheduler queue
[2019-08-02 04:50:18: INFO] Executions until ETA known: 2958
[2019-08-02 04:50:18: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 04:50:18: INFO] Estimated completion (next execution): 2019-08-02 04:55:16 (0:04:58 from now)
[2019-08-02 04:50:18: INFO] Reboot in preparation for next execution
[2019-08-02 04:54:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 04:54:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 04:54:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 04:54:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 04:54:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 04:54:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 04:56:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.801 s/op
Iteration   2: 2.358 s/op
Iteration   3: 2.318 s/op
Iteration   4: 2.311 s/op
Iteration   5: 2.358 s/op
Iteration   6: 1.934 s/op
Iteration   7: 1.931 s/op
Iteration   8: 1.928 s/op
Iteration   9: 1.954 s/op
Iteration  10: 1.946 s/op
Iteration  11: 1.936 s/op
Iteration  12: 1.936 s/op
Iteration  13: 1.969 s/op
Iteration  14: 1.939 s/op
Iteration  15: 1.945 s/op
Iteration  16: 1.913 s/op
Iteration  17: 1.936 s/op
Iteration  18: 1.967 s/op
Iteration  19: 1.942 s/op
Iteration  20: 1.923 s/op
Iteration  21: 1.935 s/op
Iteration  22: 1.957 s/op
Iteration  23: 1.959 s/op
Iteration  24: 1.942 s/op
Iteration  25: 1.928 s/op
Iteration  26: 1.908 s/op
Iteration  27: 1.950 s/op
Iteration  28: 1.954 s/op
Iteration  29: 1.958 s/op
Iteration  30: 1.951 s/op
Iteration  31: 1.938 s/op
Iteration  32: 1.944 s/op
Iteration  33: 1.959 s/op
Iteration  34: 1.953 s/op
Iteration  35: 1.956 s/op
Iteration  36: 1.907 s/op
Iteration  37: 1.950 s/op
Iteration  38: 1.948 s/op
Iteration  39: 1.959 s/op
Iteration  40: 1.948 s/op
Iteration  41: 1.967 s/op
Iteration  42: 1.937 s/op
Iteration  43: 1.930 s/op
Iteration  44: 1.955 s/op
Iteration  45: 1.944 s/op
Iteration  46: 1.941 s/op
Iteration  47: 1.970 s/op
Iteration  48: 1.930 s/op
Iteration  49: 1.910 s/op
Iteration  50: 1.950 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.992 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [1.900, 2.000) = 45 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 4 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.907 s/op
     p(50.0000) =      1.947 s/op
     p(90.0000) =      2.277 s/op
     p(95.0000) =      2.358 s/op
     p(99.0000) =      2.801 s/op
     p(99.9000) =      2.801 s/op
     p(99.9900) =      2.801 s/op
     p(99.9990) =      2.801 s/op
     p(99.9999) =      2.801 s/op
    p(100.0000) =      2.801 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.992 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9_12.0.1_1564714469266.json
{"wallclock_times": [101.263414447], "core_cycle_counts": [[100382861329], [62733727828], [77170878370], [111318153660]], "aperf_counts": [[100039742970], [62671577495], [77096802661], [111256062498]], "mperf_counts": [[100048057526], [62671675284], [77096907542], [111256065930]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:56:10: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 04:56:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:56:11: INFO] 440 executions left in scheduler queue
[2019-08-02 04:56:11: INFO] Executions until ETA known: 2955
[2019-08-02 04:56:11: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 04:56:11: INFO] Estimated completion (next execution): 2019-08-02 05:00:23 (0:04:11 from now)
[2019-08-02 04:56:11: INFO] Reboot in preparation for next execution
[2019-08-02 05:00:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:00:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:00:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:00:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:00:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:00:22: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 05:02:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.032 s/op
Iteration   2: 2.564 s/op
Iteration   3: 2.536 s/op
Iteration   4: 2.443 s/op
Iteration   5: 2.449 s/op
Iteration   6: 2.434 s/op
Iteration   7: 2.406 s/op
Iteration   8: 2.402 s/op
Iteration   9: 2.469 s/op
Iteration  10: 2.471 s/op
Iteration  11: 2.508 s/op
Iteration  12: 2.449 s/op
Iteration  13: 2.478 s/op
Iteration  14: 2.447 s/op
Iteration  15: 2.461 s/op
Iteration  16: 2.420 s/op
Iteration  17: 2.466 s/op
Iteration  18: 2.485 s/op
Iteration  19: 2.423 s/op
Iteration  20: 2.458 s/op
Iteration  21: 2.474 s/op
Iteration  22: 2.420 s/op
Iteration  23: 2.445 s/op
Iteration  24: 2.489 s/op
Iteration  25: 2.443 s/op
Iteration  26: 2.461 s/op
Iteration  27: 2.451 s/op
Iteration  28: 2.478 s/op
Iteration  29: 2.460 s/op
Iteration  30: 2.486 s/op
Iteration  31: 2.483 s/op
Iteration  32: 2.424 s/op
Iteration  33: 2.457 s/op
Iteration  34: 2.434 s/op
Iteration  35: 2.398 s/op
Iteration  36: 2.458 s/op
Iteration  37: 2.465 s/op
Iteration  38: 2.445 s/op
Iteration  39: 2.474 s/op
Iteration  40: 2.467 s/op
Iteration  41: 2.403 s/op
Iteration  42: 2.471 s/op
Iteration  43: 2.448 s/op
Iteration  44: 2.456 s/op
Iteration  45: 2.482 s/op
Iteration  46: 2.404 s/op
Iteration  47: 2.438 s/op
Iteration  48: 2.446 s/op
Iteration  49: 2.445 s/op
Iteration  50: 2.473 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.468 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 21 
    [2.450, 2.500) = 24 
    [2.500, 2.550) = 2 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.398 s/op
     p(50.0000) =      2.458 s/op
     p(90.0000) =      2.489 s/op
     p(95.0000) =      2.549 s/op
     p(99.0000) =      3.032 s/op
     p(99.9000) =      3.032 s/op
     p(99.9900) =      3.032 s/op
     p(99.9990) =      3.032 s/op
     p(99.9999) =      3.032 s/op
    p(100.0000) =      3.032 s/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.468 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9_12.0.1_1564714822313.json
{"wallclock_times": [124.92559773800002], "core_cycle_counts": [[120268069178], [127821296961], [83040007810], [95545578839]], "aperf_counts": [[119924569256], [127759203139], [82989465684], [95488325039]], "mperf_counts": [[119927885556], [127760976270], [82989473404], [95488403614]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 05:02:27: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 05:02:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:02:28: INFO] 439 executions left in scheduler queue
[2019-08-02 05:02:28: INFO] Executions until ETA known: 2929
[2019-08-02 05:02:28: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:02:28: INFO] Estimated completion (next execution): 2019-08-02 05:07:03 (0:04:35 from now)
[2019-08-02 05:02:28: INFO] Reboot in preparation for next execution
[2019-08-02 05:06:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:06:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:06:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:06:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:06:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:06:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 05:08:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.805 s/op
Iteration   2: 2.278 s/op
Iteration   3: 2.120 s/op
Iteration   4: 2.017 s/op
Iteration   5: 2.047 s/op
Iteration   6: 1.930 s/op
Iteration   7: 1.903 s/op
Iteration   8: 1.921 s/op
Iteration   9: 1.903 s/op
Iteration  10: 1.892 s/op
Iteration  11: 1.962 s/op
Iteration  12: 1.935 s/op
Iteration  13: 1.954 s/op
Iteration  14: 1.942 s/op
Iteration  15: 1.922 s/op
Iteration  16: 1.887 s/op
Iteration  17: 1.893 s/op
Iteration  18: 1.902 s/op
Iteration  19: 1.892 s/op
Iteration  20: 1.873 s/op
Iteration  21: 1.896 s/op
Iteration  22: 1.912 s/op
Iteration  23: 1.911 s/op
Iteration  24: 1.893 s/op
Iteration  25: 1.899 s/op
Iteration  26: 1.906 s/op
Iteration  27: 1.890 s/op
Iteration  28: 1.917 s/op
Iteration  29: 1.911 s/op
Iteration  30: 1.899 s/op
Iteration  31: 1.907 s/op
Iteration  32: 1.903 s/op
Iteration  33: 1.908 s/op
Iteration  34: 1.915 s/op
Iteration  35: 1.890 s/op
Iteration  36: 1.903 s/op
Iteration  37: 1.895 s/op
Iteration  38: 1.871 s/op
Iteration  39: 1.892 s/op
Iteration  40: 1.920 s/op
Iteration  41: 1.904 s/op
Iteration  42: 1.898 s/op
Iteration  43: 1.903 s/op
Iteration  44: 1.905 s/op
Iteration  45: 1.893 s/op
Iteration  46: 1.905 s/op
Iteration  47: 1.930 s/op
Iteration  48: 1.901 s/op
Iteration  49: 1.876 s/op
Iteration  50: 1.901 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.941 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [1.800, 1.900) = 17 
    [1.900, 2.000) = 28 
    [2.000, 2.100) = 2 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.871 s/op
     p(50.0000) =      1.903 s/op
     p(90.0000) =      2.011 s/op
     p(95.0000) =      2.191 s/op
     p(99.0000) =      2.805 s/op
     p(99.9000) =      2.805 s/op
     p(99.9900) =      2.805 s/op
     p(99.9990) =      2.805 s/op
     p(99.9999) =      2.805 s/op
    p(100.0000) =      2.805 s/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.941 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_11.0.4_1564715215811.json
{"wallclock_times": [98.69350151200001], "core_cycle_counts": [[137351166010], [69621871510], [54269483959], [87070129855]], "aperf_counts": [[137070492684], [69536392357], [54197707107], [87006525466]], "mperf_counts": [[137072129406], [69536766926], [54197703614], [87007213060]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 05:08:34: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:08:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:08:35: INFO] 438 executions left in scheduler queue
[2019-08-02 05:08:35: INFO] Executions until ETA known: 2909
[2019-08-02 05:08:35: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:08:35: INFO] Estimated completion (next execution): 2019-08-02 05:12:44 (0:04:09 from now)
[2019-08-02 05:08:35: INFO] Reboot in preparation for next execution
[2019-08-02 05:12:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:12:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:12:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:12:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:12:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:12:48: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 05:15:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.458 s/op
Iteration   2: 3.012 s/op
Iteration   3: 3.354 s/op
Iteration   4: 2.769 s/op
Iteration   5: 2.771 s/op
Iteration   6: 2.804 s/op
Iteration   7: 2.786 s/op
Iteration   8: 2.626 s/op
Iteration   9: 2.682 s/op
Iteration  10: 2.693 s/op
Iteration  11: 2.660 s/op
Iteration  12: 2.734 s/op
Iteration  13: 2.715 s/op
Iteration  14: 2.697 s/op
Iteration  15: 2.684 s/op
Iteration  16: 2.741 s/op
Iteration  17: 2.697 s/op
Iteration  18: 2.697 s/op
Iteration  19: 2.729 s/op
Iteration  20: 2.739 s/op
Iteration  21: 2.690 s/op
Iteration  22: 2.680 s/op
Iteration  23: 2.651 s/op
Iteration  24: 2.719 s/op
Iteration  25: 2.774 s/op
Iteration  26: 2.776 s/op
Iteration  27: 2.774 s/op
Iteration  28: 2.782 s/op
Iteration  29: 2.810 s/op
Iteration  30: 2.757 s/op
Iteration  31: 2.691 s/op
Iteration  32: 2.826 s/op
Iteration  33: 2.817 s/op
Iteration  34: 2.785 s/op
Iteration  35: 2.724 s/op
Iteration  36: 2.795 s/op
Iteration  37: 2.749 s/op
Iteration  38: 2.817 s/op
Iteration  39: 2.770 s/op
Iteration  40: 2.707 s/op
Iteration  41: 2.749 s/op
Iteration  42: 2.741 s/op
Iteration  43: 2.760 s/op
Iteration  44: 2.798 s/op
Iteration  45: 2.792 s/op
Iteration  46: 2.703 s/op
Iteration  47: 2.720 s/op
Iteration  48: 2.775 s/op
Iteration  49: 2.777 s/op
Iteration  50: 2.761 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.774 ?(99.9%) 0.071 s/op

  Histogram, s/op:
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 11 
    [2.700, 2.750) = 13 
    [2.750, 2.800) = 17 
    [2.800, 2.850) = 5 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.626 s/op
     p(50.0000) =      2.753 s/op
     p(90.0000) =      2.817 s/op
     p(95.0000) =      3.166 s/op
     p(99.0000) =      3.458 s/op
     p(99.9000) =      3.458 s/op
     p(99.9900) =      3.458 s/op
     p(99.9990) =      3.458 s/op
     p(99.9999) =      3.458 s/op
    p(100.0000) =      3.458 s/op


# Run complete. Total time: 00:02:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.774 ? 0.071   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_11.0.4_1564715568221.json
{"wallclock_times": [140.24956468099998], "core_cycle_counts": [[160308760779], [81482236704], [160356906589], [77205356962]], "aperf_counts": [[159966485323], [81411013035], [160301956843], [77142854451]], "mperf_counts": [[159972519590], [81412820710], [160301946392], [77142921896]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 05:15:08: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:15:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:15:09: INFO] 437 executions left in scheduler queue
[2019-08-02 05:15:09: INFO] Executions until ETA known: 2901
[2019-08-02 05:15:09: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:15:09: INFO] Estimated completion (next execution): 2019-08-02 05:20:00 (0:04:50 from now)
[2019-08-02 05:15:09: INFO] Reboot in preparation for next execution
[2019-08-02 05:19:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:19:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:19:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:19:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:19:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:28:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.663 s/op
Iteration   2: 10.995 s/op
Iteration   3: 10.889 s/op
Iteration   4: 10.633 s/op
Iteration   5: 10.691 s/op
Iteration   6: 10.590 s/op
Iteration   7: 10.653 s/op
Iteration   8: 10.634 s/op
Iteration   9: 10.621 s/op
Iteration  10: 10.669 s/op
Iteration  11: 10.624 s/op
Iteration  12: 10.647 s/op
Iteration  13: 10.625 s/op
Iteration  14: 10.638 s/op
Iteration  15: 10.676 s/op
Iteration  16: 10.650 s/op
Iteration  17: 10.672 s/op
Iteration  18: 10.586 s/op
Iteration  19: 10.603 s/op
Iteration  20: 10.602 s/op
Iteration  21: 10.606 s/op
Iteration  22: 10.609 s/op
Iteration  23: 10.599 s/op
Iteration  24: 10.612 s/op
Iteration  25: 10.608 s/op
Iteration  26: 10.657 s/op
Iteration  27: 10.660 s/op
Iteration  28: 10.611 s/op
Iteration  29: 10.596 s/op
Iteration  30: 10.588 s/op
Iteration  31: 10.585 s/op
Iteration  32: 10.641 s/op
Iteration  33: 10.595 s/op
Iteration  34: 10.615 s/op
Iteration  35: 10.665 s/op
Iteration  36: 10.633 s/op
Iteration  37: 10.611 s/op
Iteration  38: 10.611 s/op
Iteration  39: 10.648 s/op
Iteration  40: 10.594 s/op
Iteration  41: 10.609 s/op
Iteration  42: 10.597 s/op
Iteration  43: 10.615 s/op
Iteration  44: 10.601 s/op
Iteration  45: 10.616 s/op
Iteration  46: 10.658 s/op
Iteration  47: 10.619 s/op
Iteration  48: 10.685 s/op
Iteration  49: 10.630 s/op
Iteration  50: 10.617 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.639 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [10.500, 10.550) = 0 
    [10.550, 10.600) = 9 
    [10.600, 10.650) = 27 
    [10.650, 10.700) = 12 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 1 
    [10.900, 10.950) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.585 s/op
     p(50.0000) =     10.620 s/op
     p(90.0000) =     10.676 s/op
     p(95.0000) =     10.780 s/op
     p(99.0000) =     10.995 s/op
     p(99.9000) =     10.995 s/op
     p(99.9900) =     10.995 s/op
     p(99.9990) =     10.995 s/op
     p(99.9999) =     10.995 s/op
    p(100.0000) =     10.995 s/op


# Run complete. Total time: 00:08:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.639 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot_12.0.2_1564715977751.json
{"wallclock_times": [532.9170731309999], "core_cycle_counts": [[265339812677], [159479193556], [642496306480], [654315358051]], "aperf_counts": [[263871322719], [159373653591], [642464207102], [654261728773]], "mperf_counts": [[264146187730], [159416175586], [642510272978], [654344837074]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 05:28:30: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:28:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:28:31: INFO] 436 executions left in scheduler queue
[2019-08-02 05:28:31: INFO] Executions until ETA known: 2895
[2019-08-02 05:28:31: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:28:31: INFO] Estimated completion (next execution): 2019-08-02 05:39:54 (0:11:23 from now)
[2019-08-02 05:28:31: INFO] Reboot in preparation for next execution
[2019-08-02 05:32:44: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:32:44: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:32:44: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:32:44: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:32:44: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:38:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.556 s/op
Iteration   2: 7.300 s/op
Iteration   3: 7.548 s/op
Iteration   4: 7.235 s/op
Iteration   5: 7.470 s/op
Iteration   6: 7.424 s/op
Iteration   7: 7.202 s/op
Iteration   8: 7.521 s/op
Iteration   9: 7.301 s/op
Iteration  10: 7.501 s/op
Iteration  11: 7.503 s/op
Iteration  12: 7.357 s/op
Iteration  13: 7.497 s/op
Iteration  14: 6.551 s/op
Iteration  15: 6.591 s/op
Iteration  16: 7.506 s/op
Iteration  17: 7.549 s/op
Iteration  18: 7.511 s/op
Iteration  19: 7.521 s/op
Iteration  20: 7.477 s/op
Iteration  21: 7.508 s/op
Iteration  22: 7.503 s/op
Iteration  23: 7.531 s/op
Iteration  24: 7.501 s/op
Iteration  25: 7.478 s/op
Iteration  26: 6.735 s/op
Iteration  27: 7.496 s/op
Iteration  28: 7.491 s/op
Iteration  29: 7.476 s/op
Iteration  30: 7.498 s/op
Iteration  31: 7.491 s/op
Iteration  32: 7.383 s/op
Iteration  33: 7.424 s/op
Iteration  34: 7.322 s/op
Iteration  35: 7.477 s/op
Iteration  36: 7.080 s/op
Iteration  37: 7.466 s/op
Iteration  38: 7.476 s/op
Iteration  39: 7.500 s/op
Iteration  40: 7.464 s/op
Iteration  41: 7.543 s/op
Iteration  42: 7.487 s/op
Iteration  43: 6.600 s/op
Iteration  44: 6.617 s/op
Iteration  45: 7.498 s/op
Iteration  46: 6.901 s/op
Iteration  47: 7.562 s/op
Iteration  48: 7.227 s/op
Iteration  49: 7.535 s/op
Iteration  50: 7.510 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.358 ?(99.9%) 0.139 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 4 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 0 
    [6.875, 7.000) = 1 
    [7.000, 7.125) = 1 
    [7.125, 7.250) = 3 
    [7.250, 7.375) = 4 
    [7.375, 7.500) = 18 
    [7.500, 7.625) = 18 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.551 s/op
     p(50.0000) =      7.482 s/op
     p(90.0000) =      7.542 s/op
     p(95.0000) =      7.552 s/op
     p(99.0000) =      7.562 s/op
     p(99.9000) =      7.562 s/op
     p(99.9900) =      7.562 s/op
     p(99.9990) =      7.562 s/op
     p(99.9999) =      7.562 s/op
    p(100.0000) =      7.562 s/op


# Run complete. Total time: 00:06:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.358 ? 0.139   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot_12.0.2_1564716764130.json
{"wallclock_times": [369.011202185], "core_cycle_counts": [[135472397794], [443102285587], [359343452354], [139814517182]], "aperf_counts": [[134411623924], [443046862698], [359302566987], [139777393522]], "mperf_counts": [[148397314322], [497248021400], [402894994308], [152965256994]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 05:38:53: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:38:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:38:54: INFO] 435 executions left in scheduler queue
[2019-08-02 05:38:54: INFO] Executions until ETA known: 2889
[2019-08-02 05:38:54: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:38:54: INFO] Estimated completion (next execution): 2019-08-02 05:47:33 (0:08:39 from now)
[2019-08-02 05:38:54: INFO] Reboot in preparation for next execution
[2019-08-02 05:43:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:43:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:43:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:43:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:43:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:49:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.375 s/op
Iteration   2: 7.429 s/op
Iteration   3: 7.342 s/op
Iteration   4: 7.162 s/op
Iteration   5: 6.965 s/op
Iteration   6: 7.085 s/op
Iteration   7: 7.094 s/op
Iteration   8: 6.993 s/op
Iteration   9: 7.135 s/op
Iteration  10: 7.015 s/op
Iteration  11: 7.113 s/op
Iteration  12: 7.102 s/op
Iteration  13: 6.984 s/op
Iteration  14: 7.133 s/op
Iteration  15: 6.964 s/op
Iteration  16: 7.108 s/op
Iteration  17: 7.119 s/op
Iteration  18: 6.990 s/op
Iteration  19: 7.132 s/op
Iteration  20: 6.990 s/op
Iteration  21: 7.145 s/op
Iteration  22: 7.121 s/op
Iteration  23: 7.119 s/op
Iteration  24: 6.954 s/op
Iteration  25: 7.095 s/op
Iteration  26: 7.093 s/op
Iteration  27: 7.081 s/op
Iteration  28: 7.064 s/op
Iteration  29: 7.137 s/op
Iteration  30: 7.058 s/op
Iteration  31: 7.150 s/op
Iteration  32: 7.042 s/op
Iteration  33: 7.031 s/op
Iteration  34: 7.095 s/op
Iteration  35: 6.990 s/op
Iteration  36: 7.123 s/op
Iteration  37: 6.978 s/op
Iteration  38: 7.119 s/op
Iteration  39: 7.127 s/op
Iteration  40: 6.987 s/op
Iteration  41: 7.116 s/op
Iteration  42: 6.969 s/op
Iteration  43: 7.124 s/op
Iteration  44: 7.125 s/op
Iteration  45: 6.984 s/op
Iteration  46: 7.104 s/op
Iteration  47: 7.008 s/op
Iteration  48: 7.115 s/op
Iteration  49: 7.140 s/op
Iteration  50: 7.102 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.091 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 12 
    [7.000, 7.050) = 4 
    [7.050, 7.100) = 8 
    [7.100, 7.150) = 21 
    [7.150, 7.200) = 2 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 1 
    [7.350, 7.400) = 1 
    [7.400, 7.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.954 s/op
     p(50.0000) =      7.102 s/op
     p(90.0000) =      7.150 s/op
     p(95.0000) =      7.357 s/op
     p(99.0000) =      7.429 s/op
     p(99.9000) =      7.429 s/op
     p(99.9900) =      7.429 s/op
     p(99.9990) =      7.429 s/op
     p(99.9999) =      7.429 s/op
    p(100.0000) =      7.429 s/op


# Run complete. Total time: 00:05:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.091 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot_12.0.2_1564717390054.json
{"wallclock_times": [355.685864539], "core_cycle_counts": [[247673579795], [238529562165], [437774056150], [336803424109]], "aperf_counts": [[246730931780], [238449435667], [437721501888], [336763837066]], "mperf_counts": [[247828429168], [238897271884], [438292413102], [336874846044]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 05:49:05: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:49:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:49:06: INFO] 434 executions left in scheduler queue
[2019-08-02 05:49:06: INFO] Executions until ETA known: 2884
[2019-08-02 05:49:06: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:49:06: INFO] Estimated completion (next execution): 2019-08-02 05:57:32 (0:08:25 from now)
[2019-08-02 05:49:06: INFO] Reboot in preparation for next execution
[2019-08-02 05:52:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:52:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:52:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:52:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:52:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 06:06:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 22.136 s/op
Iteration   2: 17.181 s/op
Iteration   3: 16.938 s/op
Iteration   4: 17.506 s/op
Iteration   5: 16.812 s/op
Iteration   6: 16.850 s/op
Iteration   7: 16.809 s/op
Iteration   8: 16.833 s/op
Iteration   9: 16.843 s/op
Iteration  10: 16.754 s/op
Iteration  11: 16.866 s/op
Iteration  12: 16.817 s/op
Iteration  13: 16.887 s/op
Iteration  14: 16.811 s/op
Iteration  15: 16.838 s/op
Iteration  16: 16.943 s/op
Iteration  17: 16.851 s/op
Iteration  18: 16.807 s/op
Iteration  19: 16.822 s/op
Iteration  20: 16.856 s/op
Iteration  21: 16.827 s/op
Iteration  22: 16.871 s/op
Iteration  23: 16.836 s/op
Iteration  24: 16.798 s/op
Iteration  25: 16.823 s/op
Iteration  26: 16.860 s/op
Iteration  27: 16.855 s/op
Iteration  28: 16.850 s/op
Iteration  29: 16.896 s/op
Iteration  30: 16.778 s/op
Iteration  31: 16.817 s/op
Iteration  32: 16.800 s/op
Iteration  33: 16.844 s/op
Iteration  34: 16.825 s/op
Iteration  35: 16.944 s/op
Iteration  36: 16.861 s/op
Iteration  37: 16.792 s/op
Iteration  38: 16.870 s/op
Iteration  39: 16.817 s/op
Iteration  40: 16.793 s/op
Iteration  41: 16.796 s/op
Iteration  42: 16.863 s/op
Iteration  43: 16.821 s/op
Iteration  44: 16.810 s/op
Iteration  45: 16.886 s/op
Iteration  46: 16.875 s/op
Iteration  47: 16.837 s/op
Iteration  48: 16.883 s/op
Iteration  49: 16.901 s/op
Iteration  50: 16.827 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.968 ?(99.9%) 0.373 s/op

  Histogram, s/op:
    [16.000, 16.500) = 0 
    [16.500, 17.000) = 47 
    [17.000, 17.500) = 1 
    [17.500, 18.000) = 1 
    [18.000, 18.500) = 0 
    [18.500, 19.000) = 0 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 0 
    [20.500, 21.000) = 0 
    [21.000, 21.500) = 0 
    [21.500, 22.000) = 0 
    [22.000, 22.500) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.754 s/op
     p(50.0000) =     16.840 s/op
     p(90.0000) =     16.942 s/op
     p(95.0000) =     17.327 s/op
     p(99.0000) =     22.136 s/op
     p(99.9000) =     22.136 s/op
     p(99.9900) =     22.136 s/op
     p(99.9990) =     22.136 s/op
     p(99.9999) =     22.136 s/op
    p(100.0000) =     22.136 s/op


# Run complete. Total time: 00:14:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.968 ? 0.373   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot_12.0.2_1564717956567.json
{"wallclock_times": [849.4685127509999], "core_cycle_counts": [[584095294054], [453228491517], [738253215640], [960819877172]], "aperf_counts": [[581981262181], [453047385367], [738178692563], [960774367215]], "mperf_counts": [[582482187942], [453639165164], [739771696046], [961091843220]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 06:06:46: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 06:06:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:06:46: INFO] 433 executions left in scheduler queue
[2019-08-02 06:06:46: INFO] Executions until ETA known: 2865
[2019-08-02 06:06:46: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:06:46: INFO] Estimated completion (next execution): 2019-08-02 06:23:26 (0:16:39 from now)
[2019-08-02 06:06:46: INFO] Reboot in preparation for next execution
[2019-08-02 06:12:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.819 s/op
Iteration   2: 1.631 s/op
Iteration   3: 1.615 s/op
Iteration   4: 1.707 s/op
Iteration   5: 1.615 s/op
Iteration   6: 1.612 s/op
Iteration   7: 1.625 s/op
Iteration   8: 1.604 s/op
Iteration   9: 1.618 s/op
Iteration  10: 1.617 s/op
Iteration  11: 1.619 s/op
Iteration  12: 1.619 s/op
Iteration  13: 1.610 s/op
Iteration  14: 1.615 s/op
Iteration  15: 1.632 s/op
Iteration  16: 1.610 s/op
Iteration  17: 1.610 s/op
Iteration  18: 1.610 s/op
Iteration  19: 1.606 s/op
Iteration  20: 1.617 s/op
Iteration  21: 1.611 s/op
Iteration  22: 1.616 s/op
Iteration  23: 1.614 s/op
Iteration  24: 1.617 s/op
Iteration  25: 1.609 s/op
Iteration  26: 1.607 s/op
Iteration  27: 1.608 s/op
Iteration  28: 1.607 s/op
Iteration  29: 1.611 s/op
Iteration  30: 1.606 s/op
Iteration  31: 1.612 s/op
Iteration  32: 1.613 s/op
Iteration  33: 1.613 s/op
Iteration  34: 1.616 s/op
Iteration  35: 1.605 s/op
Iteration  36: 1.614 s/op
Iteration  37: 1.608 s/op
Iteration  38: 1.604 s/op
Iteration  39: 1.609 s/op
Iteration  40: 1.610 s/op
Iteration  41: 1.609 s/op
Iteration  42: 1.619 s/op
Iteration  43: 1.612 s/op
Iteration  44: 1.608 s/op
Iteration  45: 1.610 s/op
Iteration  46: 1.605 s/op
Iteration  47: 1.605 s/op
Iteration  48: 1.612 s/op
Iteration  49: 1.614 s/op
Iteration  50: 1.614 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.619 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [1.600, 1.625) = 46 
    [1.625, 1.650) = 2 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.604 s/op
     p(50.0000) =      1.612 s/op
     p(90.0000) =      1.624 s/op
     p(95.0000) =      1.666 s/op
     p(99.0000) =      1.819 s/op
     p(99.9000) =      1.819 s/op
     p(99.9900) =      1.819 s/op
     p(99.9990) =      1.819 s/op
     p(99.9999) =      1.819 s/op
    p(100.0000) =      1.819 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.619 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_graalvm-ce-19.1.1_1564719062201.json
{"wallclock_times": [81.85013434300001], "core_cycle_counts": [[80920069420], [80391672772], [63646301953], [47872633228]], "aperf_counts": [[80665654739], [80361834483], [63621210605], [47849700992]], "mperf_counts": [[80690156050], [80370662696], [63628681734], [47851186714]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:12:24: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:12:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:12:24: INFO] 432 executions left in scheduler queue
[2019-08-02 06:12:24: INFO] Executions until ETA known: 2845
[2019-08-02 06:12:24: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:12:24: INFO] Estimated completion (next execution): 2019-08-02 06:16:17 (0:03:52 from now)
[2019-08-02 06:12:24: INFO] Reboot in preparation for next execution
[2019-08-02 06:18:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.645 s/op
Iteration   2: 1.591 s/op
Iteration   3: 1.651 s/op
Iteration   4: 1.539 s/op
Iteration   5: 1.537 s/op
Iteration   6: 1.537 s/op
Iteration   7: 1.534 s/op
Iteration   8: 1.536 s/op
Iteration   9: 1.534 s/op
Iteration  10: 1.535 s/op
Iteration  11: 1.537 s/op
Iteration  12: 1.535 s/op
Iteration  13: 1.533 s/op
Iteration  14: 1.535 s/op
Iteration  15: 1.534 s/op
Iteration  16: 1.538 s/op
Iteration  17: 1.532 s/op
Iteration  18: 1.533 s/op
Iteration  19: 1.534 s/op
Iteration  20: 1.534 s/op
Iteration  21: 1.536 s/op
Iteration  22: 1.536 s/op
Iteration  23: 1.534 s/op
Iteration  24: 1.533 s/op
Iteration  25: 1.533 s/op
Iteration  26: 1.533 s/op
Iteration  27: 1.536 s/op
Iteration  28: 1.532 s/op
Iteration  29: 1.534 s/op
Iteration  30: 1.533 s/op
Iteration  31: 1.535 s/op
Iteration  32: 1.534 s/op
Iteration  33: 1.533 s/op
Iteration  34: 1.534 s/op
Iteration  35: 1.533 s/op
Iteration  36: 1.532 s/op
Iteration  37: 1.535 s/op
Iteration  38: 1.536 s/op
Iteration  39: 1.535 s/op
Iteration  40: 1.534 s/op
Iteration  41: 1.537 s/op
Iteration  42: 1.534 s/op
Iteration  43: 1.534 s/op
Iteration  44: 1.536 s/op
Iteration  45: 1.537 s/op
Iteration  46: 1.535 s/op
Iteration  47: 1.534 s/op
Iteration  48: 1.533 s/op
Iteration  49: 1.535 s/op
Iteration  50: 1.534 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.540 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 0 
    [1.525, 1.538) = 45 
    [1.538, 1.550) = 2 
    [1.550, 1.563) = 0 
    [1.563, 1.575) = 0 
    [1.575, 1.588) = 0 
    [1.588, 1.600) = 1 
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 1 
    [1.650, 1.663) = 1 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.532 s/op
     p(50.0000) =      1.534 s/op
     p(90.0000) =      1.538 s/op
     p(95.0000) =      1.616 s/op
     p(99.0000) =      1.651 s/op
     p(99.9000) =      1.651 s/op
     p(99.9900) =      1.651 s/op
     p(99.9990) =      1.651 s/op
     p(99.9999) =      1.651 s/op
    p(100.0000) =      1.651 s/op


# Run complete. Total time: 00:01:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.540 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_graalvm-ce-19.1.1_1564719422817.json
{"wallclock_times": [77.858481229], "core_cycle_counts": [[36178334503], [83470012741], [58904058900], [76301895273]], "aperf_counts": [[35964864860], [83453151295], [58892190868], [76287074203]], "mperf_counts": [[35981619626], [83471262844], [58896120928], [76292147646]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:18:20: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:18:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:18:21: INFO] 431 executions left in scheduler queue
[2019-08-02 06:18:21: INFO] Executions until ETA known: 2814
[2019-08-02 06:18:21: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-08-02 06:18:21: INFO] Estimated completion (next execution): 2019-08-02 06:22:09 (0:03:48 from now)
[2019-08-02 06:18:21: INFO] Reboot in preparation for next execution
[2019-08-02 06:22:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 06:22:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 06:22:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 06:22:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 06:22:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 06:31:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.616 s/op
Iteration   2: 11.282 s/op
Iteration   3: 10.804 s/op
Iteration   4: 10.799 s/op
Iteration   5: 10.804 s/op
Iteration   6: 10.796 s/op
Iteration   7: 10.792 s/op
Iteration   8: 10.790 s/op
Iteration   9: 10.800 s/op
Iteration  10: 10.794 s/op
Iteration  11: 10.796 s/op
Iteration  12: 10.798 s/op
Iteration  13: 10.792 s/op
Iteration  14: 10.795 s/op
Iteration  15: 10.798 s/op
Iteration  16: 10.798 s/op
Iteration  17: 10.803 s/op
Iteration  18: 10.809 s/op
Iteration  19: 10.795 s/op
Iteration  20: 10.800 s/op
Iteration  21: 10.807 s/op
Iteration  22: 10.796 s/op
Iteration  23: 10.799 s/op
Iteration  24: 10.801 s/op
Iteration  25: 10.797 s/op
Iteration  26: 10.800 s/op
Iteration  27: 10.797 s/op
Iteration  28: 10.805 s/op
Iteration  29: 10.799 s/op
Iteration  30: 10.802 s/op
Iteration  31: 10.806 s/op
Iteration  32: 10.795 s/op
Iteration  33: 10.805 s/op
Iteration  34: 10.800 s/op
Iteration  35: 10.807 s/op
Iteration  36: 10.794 s/op
Iteration  37: 10.800 s/op
Iteration  38: 10.801 s/op
Iteration  39: 10.797 s/op
Iteration  40: 10.798 s/op
Iteration  41: 10.797 s/op
Iteration  42: 10.800 s/op
Iteration  43: 10.796 s/op
Iteration  44: 10.801 s/op
Iteration  45: 10.795 s/op
Iteration  46: 10.802 s/op
Iteration  47: 10.803 s/op
Iteration  48: 10.801 s/op
Iteration  49: 10.805 s/op
Iteration  50: 10.804 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     10.825 ?(99.9%) 0.066 s/op

  Histogram, s/op:
    [10.700, 10.800) = 26 
    [10.800, 10.900) = 22 
    [10.900, 11.000) = 0 
    [11.000, 11.100) = 0 
    [11.100, 11.200) = 0 
    [11.200, 11.300) = 1 
    [11.300, 11.400) = 0 
    [11.400, 11.500) = 0 
    [11.500, 11.600) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.790 s/op
     p(50.0000) =     10.800 s/op
     p(90.0000) =     10.807 s/op
     p(95.0000) =     11.022 s/op
     p(99.0000) =     11.616 s/op
     p(99.9000) =     11.616 s/op
     p(99.9900) =     11.616 s/op
     p(99.9990) =     11.616 s/op
     p(99.9999) =     11.616 s/op
    p(100.0000) =     11.616 s/op


# Run complete. Total time: 00:09:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  10.825 ? 0.066   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot_11.0.4_1564719768154.json
{"wallclock_times": [542.295472319], "core_cycle_counts": [[121317508561], [692641578428], [125685521653], [808303237248]], "aperf_counts": [[119622057160], [692575724279], [125617967250], [808261803751]], "mperf_counts": [[119897678112], [692727876582], [125653198800], [808303556216]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 06:31:50: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-08-02 06:31:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:31:51: INFO] 430 executions left in scheduler queue
[2019-08-02 06:31:51: INFO] Executions until ETA known: 2794
[2019-08-02 06:31:51: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:31:51: INFO] Estimated completion (next execution): 2019-08-02 06:43:23 (0:11:32 from now)
[2019-08-02 06:31:51: INFO] Reboot in preparation for next execution
[2019-08-02 06:38:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.892 s/op
Iteration   2: 1.630 s/op
Iteration   3: 1.607 s/op
Iteration   4: 1.701 s/op
Iteration   5: 1.613 s/op
Iteration   6: 1.618 s/op
Iteration   7: 1.612 s/op
Iteration   8: 1.611 s/op
Iteration   9: 1.609 s/op
Iteration  10: 1.606 s/op
Iteration  11: 1.610 s/op
Iteration  12: 1.609 s/op
Iteration  13: 1.606 s/op
Iteration  14: 1.610 s/op
Iteration  15: 1.606 s/op
Iteration  16: 1.602 s/op
Iteration  17: 1.605 s/op
Iteration  18: 1.603 s/op
Iteration  19: 1.597 s/op
Iteration  20: 1.601 s/op
Iteration  21: 1.603 s/op
Iteration  22: 1.604 s/op
Iteration  23: 1.609 s/op
Iteration  24: 1.610 s/op
Iteration  25: 1.611 s/op
Iteration  26: 1.609 s/op
Iteration  27: 1.610 s/op
Iteration  28: 1.611 s/op
Iteration  29: 1.610 s/op
Iteration  30: 1.609 s/op
Iteration  31: 1.618 s/op
Iteration  32: 1.613 s/op
Iteration  33: 1.607 s/op
Iteration  34: 1.605 s/op
Iteration  35: 1.599 s/op
Iteration  36: 1.610 s/op
Iteration  37: 1.607 s/op
Iteration  38: 1.605 s/op
Iteration  39: 1.600 s/op
Iteration  40: 1.609 s/op
Iteration  41: 1.604 s/op
Iteration  42: 1.613 s/op
Iteration  43: 1.602 s/op
Iteration  44: 1.603 s/op
Iteration  45: 1.603 s/op
Iteration  46: 1.604 s/op
Iteration  47: 1.605 s/op
Iteration  48: 1.600 s/op
Iteration  49: 1.602 s/op
Iteration  50: 1.605 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.615 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 3 
    [1.600, 1.625) = 44 
    [1.625, 1.650) = 1 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.597 s/op
     p(50.0000) =      1.607 s/op
     p(90.0000) =      1.617 s/op
     p(95.0000) =      1.662 s/op
     p(99.0000) =      1.892 s/op
     p(99.9000) =      1.892 s/op
     p(99.9900) =      1.892 s/op
     p(99.9990) =      1.892 s/op
     p(99.9999) =      1.892 s/op
    p(100.0000) =      1.892 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.615 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ce-19.1.1_1564720607168.json
{"wallclock_times": [81.655023223], "core_cycle_counts": [[63120529915], [90405637443], [37562014748], [82175520962]], "aperf_counts": [[62847099032], [90370664197], [37539731000], [82157399676]], "mperf_counts": [[62866293840], [90378566190], [37542774752], [82159121030]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:38:08: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:38:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:38:09: INFO] 429 executions left in scheduler queue
[2019-08-02 06:38:09: INFO] Executions until ETA known: 2787
[2019-08-02 06:38:09: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:38:09: INFO] Estimated completion (next execution): 2019-08-02 06:42:01 (0:03:51 from now)
[2019-08-02 06:38:09: INFO] Reboot in preparation for next execution
[2019-08-02 06:43:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.924 s/op
Iteration   2: 1.709 s/op
Iteration   3: 1.763 s/op
Iteration   4: 1.649 s/op
Iteration   5: 1.652 s/op
Iteration   6: 1.652 s/op
Iteration   7: 1.651 s/op
Iteration   8: 1.653 s/op
Iteration   9: 1.649 s/op
Iteration  10: 1.649 s/op
Iteration  11: 1.650 s/op
Iteration  12: 1.652 s/op
Iteration  13: 1.651 s/op
Iteration  14: 1.651 s/op
Iteration  15: 1.650 s/op
Iteration  16: 1.650 s/op
Iteration  17: 1.651 s/op
Iteration  18: 1.650 s/op
Iteration  19: 1.653 s/op
Iteration  20: 1.653 s/op
Iteration  21: 1.652 s/op
Iteration  22: 1.651 s/op
Iteration  23: 1.650 s/op
Iteration  24: 1.651 s/op
Iteration  25: 1.651 s/op
Iteration  26: 1.651 s/op
Iteration  27: 1.653 s/op
Iteration  28: 1.652 s/op
Iteration  29: 1.651 s/op
Iteration  30: 1.652 s/op
Iteration  31: 1.654 s/op
Iteration  32: 1.652 s/op
Iteration  33: 1.653 s/op
Iteration  34: 1.652 s/op
Iteration  35: 1.654 s/op
Iteration  36: 1.653 s/op
Iteration  37: 1.653 s/op
Iteration  38: 1.653 s/op
Iteration  39: 1.651 s/op
Iteration  40: 1.651 s/op
Iteration  41: 1.652 s/op
Iteration  42: 1.651 s/op
Iteration  43: 1.651 s/op
Iteration  44: 1.652 s/op
Iteration  45: 1.651 s/op
Iteration  46: 1.652 s/op
Iteration  47: 1.653 s/op
Iteration  48: 1.652 s/op
Iteration  49: 1.651 s/op
Iteration  50: 1.650 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.660 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 6 
    [1.650, 1.675) = 41 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 1 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 1 
    [1.925, 1.950) = 0 
    [1.950, 1.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.649 s/op
     p(50.0000) =      1.652 s/op
     p(90.0000) =      1.654 s/op
     p(95.0000) =      1.733 s/op
     p(99.0000) =      1.924 s/op
     p(99.9000) =      1.924 s/op
     p(99.9900) =      1.924 s/op
     p(99.9990) =      1.924 s/op
     p(99.9999) =      1.924 s/op
    p(100.0000) =      1.924 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.660 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ce-19.1.1_1564720943177.json
{"wallclock_times": [83.85609743199998], "core_cycle_counts": [[43521137238], [54968602707], [104650005255], [71184317532]], "aperf_counts": [[43296012898], [54948950859], [104635391159], [71170633886]], "mperf_counts": [[43307862604], [54965752208], [104643958528], [71173690758]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:43:47: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:43:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:43:47: INFO] 428 executions left in scheduler queue
[2019-08-02 06:43:47: INFO] Executions until ETA known: 2765
[2019-08-02 06:43:47: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 06:43:47: INFO] Estimated completion (next execution): 2019-08-02 06:47:42 (0:03:54 from now)
[2019-08-02 06:43:47: INFO] Reboot in preparation for next execution
[2019-08-02 06:54:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.794 s/op
Iteration   2: 7.573 s/op
Iteration   3: 7.701 s/op
Iteration   4: 7.611 s/op
Iteration   5: 7.608 s/op
Iteration   6: 7.611 s/op
Iteration   7: 7.610 s/op
Iteration   8: 7.621 s/op
Iteration   9: 7.617 s/op
Iteration  10: 7.603 s/op
Iteration  11: 7.609 s/op
Iteration  12: 7.613 s/op
Iteration  13: 7.603 s/op
Iteration  14: 7.608 s/op
Iteration  15: 7.614 s/op
Iteration  16: 7.586 s/op
Iteration  17: 7.626 s/op
Iteration  18: 7.646 s/op
Iteration  19: 7.643 s/op
Iteration  20: 7.622 s/op
Iteration  21: 7.631 s/op
Iteration  22: 7.642 s/op
Iteration  23: 7.627 s/op
Iteration  24: 7.634 s/op
Iteration  25: 7.627 s/op
Iteration  26: 7.647 s/op
Iteration  27: 7.631 s/op
Iteration  28: 7.639 s/op
Iteration  29: 7.629 s/op
Iteration  30: 7.635 s/op
Iteration  31: 7.634 s/op
Iteration  32: 7.623 s/op
Iteration  33: 7.647 s/op
Iteration  34: 7.636 s/op
Iteration  35: 7.630 s/op
Iteration  36: 7.637 s/op
Iteration  37: 7.636 s/op
Iteration  38: 7.615 s/op
Iteration  39: 7.607 s/op
Iteration  40: 7.637 s/op
Iteration  41: 7.631 s/op
Iteration  42: 7.639 s/op
Iteration  43: 7.634 s/op
Iteration  44: 7.657 s/op
Iteration  45: 7.627 s/op
Iteration  46: 7.637 s/op
Iteration  47: 7.611 s/op
Iteration  48: 7.636 s/op
Iteration  49: 7.632 s/op
Iteration  50: 7.625 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.630 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [7.500, 7.525) = 0 
    [7.525, 7.550) = 0 
    [7.550, 7.575) = 1 
    [7.575, 7.600) = 1 
    [7.600, 7.625) = 17 
    [7.625, 7.650) = 28 
    [7.650, 7.675) = 1 
    [7.675, 7.700) = 0 
    [7.700, 7.725) = 1 
    [7.725, 7.750) = 0 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.573 s/op
     p(50.0000) =      7.629 s/op
     p(90.0000) =      7.646 s/op
     p(95.0000) =      7.677 s/op
     p(99.0000) =      7.794 s/op
     p(99.9000) =      7.794 s/op
     p(99.9900) =      7.794 s/op
     p(99.9990) =      7.794 s/op
     p(99.9999) =      7.794 s/op
    p(100.0000) =      7.794 s/op


# Run complete. Total time: 00:06:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.630 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ee-19.1.1_1564721279828.json
{"wallclock_times": [382.37638094], "core_cycle_counts": [[126182567162], [183164135967], [544204478216], [378879798764]], "aperf_counts": [[125140183997], [183125083664], [544184404939], [378860302436]], "mperf_counts": [[125153804454], [183128560952], [544199230944], [378861892066]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:54:22: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 06:54:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:54:23: INFO] 427 executions left in scheduler queue
[2019-08-02 06:54:23: INFO] Executions until ETA known: 2759
[2019-08-02 06:54:23: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 06:54:23: INFO] Estimated completion (next execution): 2019-08-02 07:03:15 (0:08:52 from now)
[2019-08-02 06:54:23: INFO] Reboot in preparation for next execution
[2019-08-02 07:04:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.810 s/op
Iteration   2: 6.592 s/op
Iteration   3: 6.647 s/op
Iteration   4: 6.687 s/op
Iteration   5: 6.611 s/op
Iteration   6: 6.638 s/op
Iteration   7: 6.613 s/op
Iteration   8: 6.630 s/op
Iteration   9: 6.631 s/op
Iteration  10: 6.621 s/op
Iteration  11: 6.630 s/op
Iteration  12: 6.624 s/op
Iteration  13: 6.600 s/op
Iteration  14: 6.593 s/op
Iteration  15: 6.625 s/op
Iteration  16: 6.644 s/op
Iteration  17: 6.598 s/op
Iteration  18: 6.621 s/op
Iteration  19: 6.658 s/op
Iteration  20: 6.585 s/op
Iteration  21: 6.605 s/op
Iteration  22: 6.635 s/op
Iteration  23: 6.613 s/op
Iteration  24: 6.590 s/op
Iteration  25: 6.600 s/op
Iteration  26: 6.652 s/op
Iteration  27: 6.599 s/op
Iteration  28: 6.617 s/op
Iteration  29: 6.634 s/op
Iteration  30: 6.614 s/op
Iteration  31: 6.589 s/op
Iteration  32: 6.615 s/op
Iteration  33: 6.630 s/op
Iteration  34: 6.646 s/op
Iteration  35: 6.599 s/op
Iteration  36: 6.609 s/op
Iteration  37: 6.624 s/op
Iteration  38: 6.632 s/op
Iteration  39: 6.614 s/op
Iteration  40: 6.610 s/op
Iteration  41: 6.622 s/op
Iteration  42: 6.592 s/op
Iteration  43: 6.609 s/op
Iteration  44: 6.611 s/op
Iteration  45: 6.607 s/op
Iteration  46: 6.591 s/op
Iteration  47: 6.618 s/op
Iteration  48: 6.610 s/op
Iteration  49: 6.609 s/op
Iteration  50: 6.609 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.621 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [6.500, 6.525) = 0 
    [6.525, 6.550) = 0 
    [6.550, 6.575) = 0 
    [6.575, 6.600) = 10 
    [6.600, 6.625) = 25 
    [6.625, 6.650) = 11 
    [6.650, 6.675) = 2 
    [6.675, 6.700) = 1 
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 0 
    [6.775, 6.800) = 0 
    [6.800, 6.825) = 1 
    [6.825, 6.850) = 0 
    [6.850, 6.875) = 0 
    [6.875, 6.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.585 s/op
     p(50.0000) =      6.614 s/op
     p(90.0000) =      6.647 s/op
     p(95.0000) =      6.671 s/op
     p(99.0000) =      6.810 s/op
     p(99.9000) =      6.810 s/op
     p(99.9900) =      6.810 s/op
     p(99.9990) =      6.810 s/op
     p(99.9999) =      6.810 s/op
    p(100.0000) =      6.810 s/op


# Run complete. Total time: 00:05:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.621 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ee-19.1.1_1564721915627.json
{"wallclock_times": [332.005534009], "core_cycle_counts": [[385172694814], [215116438101], [290768141184], [183865461827]], "aperf_counts": [[384491607590], [215022199030], [290741263663], [183845389371]], "mperf_counts": [[384515314508], [215023057314], [290741759186], [183852961810]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 07:04:07: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:04:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:04:08: INFO] 426 executions left in scheduler queue
[2019-08-02 07:04:08: INFO] Executions until ETA known: 2757
[2019-08-02 07:04:08: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:04:08: INFO] Estimated completion (next execution): 2019-08-02 07:12:10 (0:08:02 from now)
[2019-08-02 07:04:08: INFO] Reboot in preparation for next execution
[2019-08-02 07:11:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.061 s/op
Iteration   2: 3.543 s/op
Iteration   3: 3.540 s/op
Iteration   4: 3.626 s/op
Iteration   5: 3.556 s/op
Iteration   6: 3.594 s/op
Iteration   7: 3.638 s/op
Iteration   8: 3.616 s/op
Iteration   9: 3.555 s/op
Iteration  10: 3.546 s/op
Iteration  11: 3.553 s/op
Iteration  12: 3.523 s/op
Iteration  13: 3.627 s/op
Iteration  14: 3.522 s/op
Iteration  15: 3.520 s/op
Iteration  16: 3.546 s/op
Iteration  17: 3.518 s/op
Iteration  18: 3.538 s/op
Iteration  19: 3.507 s/op
Iteration  20: 3.519 s/op
Iteration  21: 3.523 s/op
Iteration  22: 3.511 s/op
Iteration  23: 3.515 s/op
Iteration  24: 3.520 s/op
Iteration  25: 3.605 s/op
Iteration  26: 3.522 s/op
Iteration  27: 3.526 s/op
Iteration  28: 3.521 s/op
Iteration  29: 3.517 s/op
Iteration  30: 3.633 s/op
Iteration  31: 3.522 s/op
Iteration  32: 3.525 s/op
Iteration  33: 3.536 s/op
Iteration  34: 3.509 s/op
Iteration  35: 3.546 s/op
Iteration  36: 3.516 s/op
Iteration  37: 3.621 s/op
Iteration  38: 3.539 s/op
Iteration  39: 3.510 s/op
Iteration  40: 3.609 s/op
Iteration  41: 3.518 s/op
Iteration  42: 3.520 s/op
Iteration  43: 3.527 s/op
Iteration  44: 3.507 s/op
Iteration  45: 3.552 s/op
Iteration  46: 3.521 s/op
Iteration  47: 3.600 s/op
Iteration  48: 3.536 s/op
Iteration  49: 3.506 s/op
Iteration  50: 3.524 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.556 ?(99.9%) 0.041 s/op

  Histogram, s/op:
    [3.500, 3.550) = 35 
    [3.550, 3.600) = 5 
    [3.600, 3.650) = 9 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.506 s/op
     p(50.0000) =      3.527 s/op
     p(90.0000) =      3.625 s/op
     p(95.0000) =      3.635 s/op
     p(99.0000) =      4.061 s/op
     p(99.9000) =      4.061 s/op
     p(99.9900) =      4.061 s/op
     p(99.9990) =      4.061 s/op
     p(99.9999) =      4.061 s/op
    p(100.0000) =      4.061 s/op


# Run complete. Total time: 00:02:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.556 ? 0.041   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ee-19.1.1_1564722537532.json
{"wallclock_times": [178.870631435], "core_cycle_counts": [[106240729961], [240871195120], [158085229353], [120299297367]], "aperf_counts": [[105745611832], [240832620460], [158050995032], [120263823152]], "mperf_counts": [[105770764278], [240832836246], [158051409460], [120270492848]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 07:11:56: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:11:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:11:57: INFO] 425 executions left in scheduler queue
[2019-08-02 07:11:57: INFO] Executions until ETA known: 2751
[2019-08-02 07:11:57: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:11:57: INFO] Estimated completion (next execution): 2019-08-02 07:17:26 (0:05:29 from now)
[2019-08-02 07:11:57: INFO] Reboot in preparation for next execution
[2019-08-02 07:18:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.273 s/op
Iteration   2: 2.976 s/op
Iteration   3: 2.996 s/op
Iteration   4: 3.086 s/op
Iteration   5: 3.032 s/op
Iteration   6: 3.005 s/op
Iteration   7: 2.981 s/op
Iteration   8: 2.969 s/op
Iteration   9: 2.978 s/op
Iteration  10: 2.979 s/op
Iteration  11: 2.987 s/op
Iteration  12: 2.978 s/op
Iteration  13: 2.976 s/op
Iteration  14: 2.984 s/op
Iteration  15: 2.991 s/op
Iteration  16: 2.992 s/op
Iteration  17: 2.989 s/op
Iteration  18: 2.979 s/op
Iteration  19: 2.978 s/op
Iteration  20: 2.983 s/op
Iteration  21: 2.996 s/op
Iteration  22: 2.976 s/op
Iteration  23: 2.993 s/op
Iteration  24: 2.994 s/op
Iteration  25: 3.007 s/op
Iteration  26: 3.002 s/op
Iteration  27: 2.982 s/op
Iteration  28: 2.997 s/op
Iteration  29: 2.968 s/op
Iteration  30: 3.004 s/op
Iteration  31: 2.975 s/op
Iteration  32: 2.998 s/op
Iteration  33: 2.986 s/op
Iteration  34: 2.980 s/op
Iteration  35: 2.993 s/op
Iteration  36: 2.986 s/op
Iteration  37: 2.983 s/op
Iteration  38: 2.977 s/op
Iteration  39: 2.998 s/op
Iteration  40: 2.975 s/op
Iteration  41: 2.971 s/op
Iteration  42: 2.976 s/op
Iteration  43: 2.968 s/op
Iteration  44: 2.982 s/op
Iteration  45: 2.985 s/op
Iteration  46: 2.987 s/op
Iteration  47: 2.976 s/op
Iteration  48: 2.983 s/op
Iteration  49: 2.995 s/op
Iteration  50: 2.980 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      2.994 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 0 
    [2.950, 2.975) = 6 
    [2.975, 3.000) = 37 
    [3.000, 3.025) = 4 
    [3.025, 3.050) = 1 
    [3.050, 3.075) = 0 
    [3.075, 3.100) = 1 
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 0 
    [3.150, 3.175) = 0 
    [3.175, 3.200) = 0 
    [3.200, 3.225) = 0 
    [3.225, 3.250) = 0 
    [3.250, 3.275) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.968 s/op
     p(50.0000) =      2.984 s/op
     p(90.0000) =      3.005 s/op
     p(95.0000) =      3.056 s/op
     p(99.0000) =      3.273 s/op
     p(99.9000) =      3.273 s/op
     p(99.9900) =      3.273 s/op
     p(99.9990) =      3.273 s/op
     p(99.9999) =      3.273 s/op
    p(100.0000) =      3.273 s/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  2.994 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ee-19.1.1_1564722971153.json
{"wallclock_times": [150.654066509], "core_cycle_counts": [[156155779071], [101969975471], [106181273138], [128064296285]], "aperf_counts": [[155828985927], [101929654311], [106163110964], [128046373991]], "mperf_counts": [[155841783044], [101931419654], [106178799210], [128047799808]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 07:18:41: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:18:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:18:42: INFO] 424 executions left in scheduler queue
[2019-08-02 07:18:42: INFO] Executions until ETA known: 2740
[2019-08-02 07:18:42: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:18:42: INFO] Estimated completion (next execution): 2019-08-02 07:23:43 (0:05:00 from now)
[2019-08-02 07:18:42: INFO] Reboot in preparation for next execution
[2019-08-02 07:23:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 07:23:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 07:23:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 07:23:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 07:23:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 07:23:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 07:30:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.231 s/op
Iteration   2: 8.267 s/op
Iteration   3: 8.123 s/op
Iteration   4: 8.192 s/op
Iteration   5: 8.030 s/op
Iteration   6: 7.996 s/op
Iteration   7: 8.013 s/op
Iteration   8: 8.001 s/op
Iteration   9: 7.960 s/op
Iteration  10: 8.001 s/op
Iteration  11: 8.010 s/op
Iteration  12: 7.990 s/op
Iteration  13: 8.002 s/op
Iteration  14: 7.905 s/op
Iteration  15: 7.855 s/op
Iteration  16: 7.942 s/op
Iteration  17: 8.021 s/op
Iteration  18: 8.012 s/op
Iteration  19: 7.992 s/op
Iteration  20: 8.044 s/op
Iteration  21: 8.069 s/op
Iteration  22: 8.045 s/op
Iteration  23: 8.040 s/op
Iteration  24: 8.087 s/op
Iteration  25: 7.948 s/op
Iteration  26: 7.910 s/op
Iteration  27: 7.980 s/op
Iteration  28: 8.080 s/op
Iteration  29: 8.082 s/op
Iteration  30: 8.052 s/op
Iteration  31: 8.015 s/op
Iteration  32: 8.057 s/op
Iteration  33: 7.973 s/op
Iteration  34: 8.023 s/op
Iteration  35: 8.008 s/op
Iteration  36: 8.006 s/op
Iteration  37: 7.988 s/op
Iteration  38: 8.007 s/op
Iteration  39: 8.000 s/op
Iteration  40: 8.019 s/op
Iteration  41: 8.004 s/op
Iteration  42: 8.026 s/op
Iteration  43: 7.985 s/op
Iteration  44: 8.040 s/op
Iteration  45: 8.023 s/op
Iteration  46: 8.008 s/op
Iteration  47: 7.963 s/op
Iteration  48: 8.041 s/op
Iteration  49: 7.977 s/op
Iteration  50: 8.011 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.041 ?(99.9%) 0.091 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 16 
    [ 8.000,  8.250) = 32 
    [ 8.250,  8.500) = 1 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.855 s/op
     p(50.0000) =      8.011 s/op
     p(90.0000) =      8.087 s/op
     p(95.0000) =      8.226 s/op
     p(99.0000) =      9.231 s/op
     p(99.9000) =      9.231 s/op
     p(99.9900) =      9.231 s/op
     p(99.9990) =      9.231 s/op
     p(99.9999) =      9.231 s/op
    p(100.0000) =      9.231 s/op


# Run complete. Total time: 00:06:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  8.041 ? 0.091   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_11.0.4_1564723422688.json
{"wallclock_times": [403.88759690399996], "core_cycle_counts": [[321216222146], [444544227858], [317631576993], [375318482605]], "aperf_counts": [[320050821918], [444412473472], [317489980929], [375188221499]], "mperf_counts": [[320056846560], [444412454144], [317489953246], [375188565018]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 07:30:26: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:30:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:30:27: INFO] 423 executions left in scheduler queue
[2019-08-02 07:30:27: INFO] Executions until ETA known: 2721
[2019-08-02 07:30:27: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:30:27: INFO] Estimated completion (next execution): 2019-08-02 07:39:41 (0:09:14 from now)
[2019-08-02 07:30:27: INFO] Reboot in preparation for next execution
[2019-08-02 07:34:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 07:34:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 07:34:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 07:34:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 07:34:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 07:34:41: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 07:44:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.506 s/op
Iteration   2: 12.176 s/op
Iteration   3: 12.329 s/op
Iteration   4: 12.317 s/op
Iteration   5: 12.239 s/op
Iteration   6: 12.229 s/op
Iteration   7: 12.278 s/op
Iteration   8: 12.170 s/op
Iteration   9: 12.182 s/op
Iteration  10: 12.195 s/op
Iteration  11: 12.182 s/op
Iteration  12: 12.212 s/op
Iteration  13: 12.205 s/op
Iteration  14: 12.208 s/op
Iteration  15: 12.218 s/op
Iteration  16: 12.154 s/op
Iteration  17: 12.187 s/op
Iteration  18: 12.178 s/op
Iteration  19: 12.161 s/op
Iteration  20: 12.171 s/op
Iteration  21: 12.162 s/op
Iteration  22: 12.195 s/op
Iteration  23: 12.175 s/op
Iteration  24: 12.131 s/op
Iteration  25: 12.188 s/op
Iteration  26: 12.155 s/op
Iteration  27: 12.147 s/op
Iteration  28: 12.115 s/op
Iteration  29: 12.183 s/op
Iteration  30: 12.137 s/op
Iteration  31: 12.138 s/op
Iteration  32: 12.184 s/op
Iteration  33: 12.111 s/op
Iteration  34: 12.180 s/op
Iteration  35: 12.106 s/op
Iteration  36: 12.170 s/op
Iteration  37: 12.170 s/op
Iteration  38: 12.183 s/op
Iteration  39: 12.190 s/op
Iteration  40: 12.186 s/op
Iteration  41: 12.207 s/op
Iteration  42: 12.220 s/op
Iteration  43: 12.227 s/op
Iteration  44: 12.140 s/op
Iteration  45: 12.172 s/op
Iteration  46: 12.159 s/op
Iteration  47: 12.198 s/op
Iteration  48: 12.193 s/op
Iteration  49: 12.172 s/op
Iteration  50: 12.190 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.212 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [12.000, 12.125) = 3 
    [12.125, 12.250) = 43 
    [12.250, 12.375) = 3 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 
    [12.875, 13.000) = 0 
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 0 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 1 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.106 s/op
     p(50.0000) =     12.182 s/op
     p(90.0000) =     12.238 s/op
     p(95.0000) =     12.322 s/op
     p(99.0000) =     13.506 s/op
     p(99.9000) =     13.506 s/op
     p(99.9900) =     13.506 s/op
     p(99.9990) =     13.506 s/op
     p(99.9999) =     13.506 s/op
    p(100.0000) =     13.506 s/op


# Run complete. Total time: 00:10:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.212 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_11.0.4_1564724081325.json
{"wallclock_times": [612.161882551], "core_cycle_counts": [[689790158598], [341034647671], [459918768393], [569880009534]], "aperf_counts": [[688364246278], [340834816562], [459733434565], [569772181993]], "mperf_counts": [[688371352704], [340835747416], [459733381040], [569772162688]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 07:44:53: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:44:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:44:54: INFO] 422 executions left in scheduler queue
[2019-08-02 07:44:54: INFO] Executions until ETA known: 2715
[2019-08-02 07:44:54: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:44:54: INFO] Estimated completion (next execution): 2019-08-02 07:57:37 (0:12:42 from now)
[2019-08-02 07:44:54: INFO] Reboot in preparation for next execution
[2019-08-02 07:50:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 07:50:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 07:50:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 07:50:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 07:50:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 07:50:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 07:57:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.579 s/op
Iteration   2: 8.528 s/op
Iteration   3: 8.304 s/op
Iteration   4: 8.017 s/op
Iteration   5: 8.068 s/op
Iteration   6: 8.034 s/op
Iteration   7: 7.965 s/op
Iteration   8: 7.979 s/op
Iteration   9: 7.849 s/op
Iteration  10: 7.914 s/op
Iteration  11: 8.041 s/op
Iteration  12: 7.973 s/op
Iteration  13: 7.962 s/op
Iteration  14: 7.895 s/op
Iteration  15: 7.987 s/op
Iteration  16: 8.028 s/op
Iteration  17: 7.868 s/op
Iteration  18: 8.044 s/op
Iteration  19: 7.960 s/op
Iteration  20: 7.918 s/op
Iteration  21: 7.889 s/op
Iteration  22: 7.942 s/op
Iteration  23: 8.063 s/op
Iteration  24: 8.088 s/op
Iteration  25: 8.077 s/op
Iteration  26: 8.062 s/op
Iteration  27: 7.993 s/op
Iteration  28: 7.903 s/op
Iteration  29: 7.998 s/op
Iteration  30: 7.970 s/op
Iteration  31: 7.946 s/op
Iteration  32: 8.010 s/op
Iteration  33: 7.905 s/op
Iteration  34: 7.902 s/op
Iteration  35: 7.986 s/op
Iteration  36: 8.080 s/op
Iteration  37: 7.999 s/op
Iteration  38: 7.950 s/op
Iteration  39: 7.995 s/op
Iteration  40: 7.873 s/op
Iteration  41: 7.961 s/op
Iteration  42: 8.139 s/op
Iteration  43: 7.923 s/op
Iteration  44: 8.002 s/op
Iteration  45: 7.963 s/op
Iteration  46: 7.938 s/op
Iteration  47: 7.928 s/op
Iteration  48: 7.924 s/op
Iteration  49: 7.919 s/op
Iteration  50: 7.844 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.022 ?(99.9%) 0.124 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 33 
    [ 8.000,  8.250) = 14 
    [ 8.250,  8.500) = 1 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.844 s/op
     p(50.0000) =      7.972 s/op
     p(90.0000) =      8.087 s/op
     p(95.0000) =      8.405 s/op
     p(99.0000) =      9.579 s/op
     p(99.9000) =      9.579 s/op
     p(99.9900) =      9.579 s/op
     p(99.9990) =      9.579 s/op
     p(99.9999) =      9.579 s/op
    p(100.0000) =      9.579 s/op


# Run complete. Total time: 00:06:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.022 ? 0.124   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_11.0.4_1564725051135.json
{"wallclock_times": [402.843902875], "core_cycle_counts": [[398534707558], [132240476136], [507714944003], [327051664496]], "aperf_counts": [[397533234340], [132085200685], [507591066083], [326954205418]], "mperf_counts": [[397539432090], [132085216680], [507594171026], [326955089918]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 07:57:34: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:57:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:57:34: INFO] 421 executions left in scheduler queue
[2019-08-02 07:57:34: INFO] Executions until ETA known: 2713
[2019-08-02 07:57:34: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:57:34: INFO] Estimated completion (next execution): 2019-08-02 08:06:48 (0:09:13 from now)
[2019-08-02 07:57:34: INFO] Reboot in preparation for next execution
[2019-08-02 08:02:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 08:02:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 08:02:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 08:02:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 08:02:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 08:02:13: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 08:14:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.696 s/op
Iteration   2: 15.645 s/op
Iteration   3: 14.798 s/op
Iteration   4: 15.212 s/op
Iteration   5: 14.765 s/op
Iteration   6: 14.633 s/op
Iteration   7: 14.649 s/op
Iteration   8: 14.694 s/op
Iteration   9: 15.267 s/op
Iteration  10: 14.760 s/op
Iteration  11: 14.852 s/op
Iteration  12: 14.864 s/op
Iteration  13: 14.712 s/op
Iteration  14: 15.290 s/op
Iteration  15: 14.827 s/op
Iteration  16: 14.913 s/op
Iteration  17: 15.325 s/op
Iteration  18: 15.283 s/op
Iteration  19: 14.840 s/op
Iteration  20: 15.365 s/op
Iteration  21: 15.190 s/op
Iteration  22: 14.798 s/op
Iteration  23: 15.314 s/op
Iteration  24: 14.797 s/op
Iteration  25: 15.274 s/op
Iteration  26: 14.709 s/op
Iteration  27: 14.768 s/op
Iteration  28: 14.770 s/op
Iteration  29: 14.853 s/op
Iteration  30: 15.227 s/op
Iteration  31: 14.746 s/op
Iteration  32: 14.775 s/op
Iteration  33: 14.819 s/op
Iteration  34: 14.793 s/op
Iteration  35: 14.755 s/op
Iteration  36: 14.793 s/op
Iteration  37: 14.838 s/op
Iteration  38: 14.846 s/op
Iteration  39: 15.363 s/op
Iteration  40: 14.774 s/op
Iteration  41: 14.857 s/op
Iteration  42: 15.229 s/op
Iteration  43: 14.815 s/op
Iteration  44: 14.859 s/op
Iteration  45: 15.232 s/op
Iteration  46: 14.759 s/op
Iteration  47: 14.789 s/op
Iteration  48: 14.774 s/op
Iteration  49: 15.296 s/op
Iteration  50: 14.680 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.978 ?(99.9%) 0.174 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 7 
    [14.750, 15.000) = 27 
    [15.000, 15.250) = 5 
    [15.250, 15.500) = 9 
    [15.500, 15.750) = 1 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.633 s/op
     p(50.0000) =     14.833 s/op
     p(90.0000) =     15.324 s/op
     p(95.0000) =     15.491 s/op
     p(99.0000) =     16.696 s/op
     p(99.9000) =     16.696 s/op
     p(99.9900) =     16.696 s/op
     p(99.9990) =     16.696 s/op
     p(99.9999) =     16.696 s/op
    p(100.0000) =     16.696 s/op


# Run complete. Total time: 00:12:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.978 ? 0.174   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_11.0.4_1564725733046.json
{"wallclock_times": [750.634702005], "core_cycle_counts": [[1022003134575], [561544129614], [449945370154], [460967831996]], "aperf_counts": [[1020476366699], [561272059091], [449700769368], [460774870011]], "mperf_counts": [[1020476722168], [561273904394], [449700683656], [460774808316]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 08:14:43: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 08:14:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:14:44: INFO] 420 executions left in scheduler queue
[2019-08-02 08:14:44: INFO] Executions until ETA known: 2682
[2019-08-02 08:14:44: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:14:44: INFO] Estimated completion (next execution): 2019-08-02 08:29:45 (0:15:01 from now)
[2019-08-02 08:14:44: INFO] Reboot in preparation for next execution
[2019-08-02 08:21:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.253 s/op
Iteration   2: 2.950 s/op
Iteration   3: 2.721 s/op
Iteration   4: 2.703 s/op
Iteration   5: 2.729 s/op
Iteration   6: 2.693 s/op
Iteration   7: 2.715 s/op
Iteration   8: 2.697 s/op
Iteration   9: 2.700 s/op
Iteration  10: 2.711 s/op
Iteration  11: 2.693 s/op
Iteration  12: 2.707 s/op
Iteration  13: 2.708 s/op
Iteration  14: 2.698 s/op
Iteration  15: 2.701 s/op
Iteration  16: 2.703 s/op
Iteration  17: 2.702 s/op
Iteration  18: 2.701 s/op
Iteration  19: 2.702 s/op
Iteration  20: 2.697 s/op
Iteration  21: 2.723 s/op
Iteration  22: 2.699 s/op
Iteration  23: 2.698 s/op
Iteration  24: 2.697 s/op
Iteration  25: 2.720 s/op
Iteration  26: 2.697 s/op
Iteration  27: 2.703 s/op
Iteration  28: 2.698 s/op
Iteration  29: 2.698 s/op
Iteration  30: 2.703 s/op
Iteration  31: 2.699 s/op
Iteration  32: 2.709 s/op
Iteration  33: 2.700 s/op
Iteration  34: 2.714 s/op
Iteration  35: 2.697 s/op
Iteration  36: 2.707 s/op
Iteration  37: 2.695 s/op
Iteration  38: 2.697 s/op
Iteration  39: 2.702 s/op
Iteration  40: 2.696 s/op
Iteration  41: 2.709 s/op
Iteration  42: 2.698 s/op
Iteration  43: 2.734 s/op
Iteration  44: 2.696 s/op
Iteration  45: 2.707 s/op
Iteration  46: 2.699 s/op
Iteration  47: 2.701 s/op
Iteration  48: 2.705 s/op
Iteration  49: 2.694 s/op
Iteration  50: 2.711 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      2.720 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 21 
    [2.700, 2.750) = 27 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 1 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.693 s/op
     p(50.0000) =      2.702 s/op
     p(90.0000) =      2.723 s/op
     p(95.0000) =      2.831 s/op
     p(99.0000) =      3.253 s/op
     p(99.9000) =      3.253 s/op
     p(99.9900) =      3.253 s/op
     p(99.9990) =      3.253 s/op
     p(99.9999) =      3.253 s/op
    p(100.0000) =      3.253 s/op


# Run complete. Total time: 00:02:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.720 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_graalvm-ee-19.1.1_1564726738608.json
{"wallclock_times": [136.869659129], "core_cycle_counts": [[110438219300], [84580921658], [125756798491], [123893838317]], "aperf_counts": [[110096259234], [84533160750], [125726856695], [123863553433]], "mperf_counts": [[110126306206], [84534305032], [125738866552], [123866010960]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 08:21:15: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:21:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:21:16: INFO] 419 executions left in scheduler queue
[2019-08-02 08:21:16: INFO] Executions until ETA known: 2656
[2019-08-02 08:21:16: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-08-02 08:21:16: INFO] Estimated completion (next execution): 2019-08-02 08:26:03 (0:04:47 from now)
[2019-08-02 08:21:16: INFO] Reboot in preparation for next execution
[2019-08-02 08:25:30: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 08:25:30: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 08:25:30: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 08:25:30: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 08:25:30: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 08:37:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.058 s/op
Iteration   2: 13.679 s/op
Iteration   3: 13.809 s/op
Iteration   4: 13.989 s/op
Iteration   5: 13.798 s/op
Iteration   6: 13.863 s/op
Iteration   7: 13.811 s/op
Iteration   8: 13.831 s/op
Iteration   9: 13.645 s/op
Iteration  10: 13.771 s/op
Iteration  11: 13.721 s/op
Iteration  12: 13.715 s/op
Iteration  13: 13.819 s/op
Iteration  14: 13.815 s/op
Iteration  15: 13.845 s/op
Iteration  16: 13.671 s/op
Iteration  17: 13.733 s/op
Iteration  18: 13.843 s/op
Iteration  19: 13.830 s/op
Iteration  20: 13.928 s/op
Iteration  21: 13.891 s/op
Iteration  22: 13.981 s/op
Iteration  23: 13.855 s/op
Iteration  24: 13.861 s/op
Iteration  25: 13.930 s/op
Iteration  26: 13.985 s/op
Iteration  27: 13.876 s/op
Iteration  28: 13.929 s/op
Iteration  29: 13.865 s/op
Iteration  30: 13.833 s/op
Iteration  31: 13.940 s/op
Iteration  32: 13.956 s/op
Iteration  33: 13.849 s/op
Iteration  34: 14.007 s/op
Iteration  35: 13.783 s/op
Iteration  36: 13.947 s/op
Iteration  37: 13.623 s/op
Iteration  38: 13.896 s/op
Iteration  39: 13.977 s/op
Iteration  40: 13.782 s/op
Iteration  41: 13.920 s/op
Iteration  42: 13.919 s/op
Iteration  43: 13.894 s/op
Iteration  44: 13.820 s/op
Iteration  45: 13.957 s/op
Iteration  46: 13.976 s/op
Iteration  47: 13.872 s/op
Iteration  48: 13.846 s/op
Iteration  49: 14.007 s/op
Iteration  50: 13.821 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     13.839 ?(99.9%) 0.073 s/op

  Histogram, s/op:
    [13.000, 13.100) = 1 
    [13.100, 13.200) = 0 
    [13.200, 13.300) = 0 
    [13.300, 13.400) = 0 
    [13.400, 13.500) = 0 
    [13.500, 13.600) = 0 
    [13.600, 13.700) = 4 
    [13.700, 13.800) = 7 
    [13.800, 13.900) = 22 
    [13.900, 14.000) = 14 
    [14.000, 14.100) = 2 

  Percentiles, s/op:
      p(0.0000) =     13.058 s/op
     p(50.0000) =     13.852 s/op
     p(90.0000) =     13.981 s/op
     p(95.0000) =     13.997 s/op
     p(99.0000) =     14.007 s/op
     p(99.9000) =     14.007 s/op
     p(99.9900) =     14.007 s/op
     p(99.9990) =     14.007 s/op
     p(99.9999) =     14.007 s/op
    p(100.0000) =     14.007 s/op


# Run complete. Total time: 00:11:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.839 ? 0.073   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_12.0.2_1564727130060.json
{"wallclock_times": [693.026812089], "core_cycle_counts": [[417685142918], [375647756031], [721421709290], [756509321968]], "aperf_counts": [[415447036897], [375319286045], [720925696339], [755959359279]], "mperf_counts": [[450696220104], [405345168228], [787703451620], [826338580156]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 08:37:03: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-08-02 08:37:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:37:04: INFO] 418 executions left in scheduler queue
[2019-08-02 08:37:04: INFO] Executions until ETA known: 2626
[2019-08-02 08:37:04: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:37:04: INFO] Estimated completion (next execution): 2019-08-02 08:51:07 (0:14:03 from now)
[2019-08-02 08:37:04: INFO] Reboot in preparation for next execution
[2019-08-02 08:56:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.354 s/op
Iteration   2: 0.850 s/op
Iteration   3: 0.832 s/op
Iteration   4: 0.918 s/op
Iteration   5: 0.829 s/op
Iteration   6: 0.838 s/op
Iteration   7: 0.828 s/op
Iteration   8: 0.830 s/op
Iteration   9: 0.833 s/op
Iteration  10: 0.831 s/op
Iteration  11: 0.826 s/op
Iteration  12: 0.834 s/op
Iteration  13: 0.828 s/op
Iteration  14: 0.831 s/op
Iteration  15: 0.829 s/op
Iteration  16: 0.830 s/op
Iteration  17: 0.828 s/op
Iteration  18: 0.835 s/op
Iteration  19: 0.825 s/op
Iteration  20: 0.829 s/op
Iteration  21: 0.829 s/op
Iteration  22: 0.831 s/op
Iteration  23: 0.832 s/op
Iteration  24: 0.830 s/op
Iteration  25: 0.827 s/op
Iteration  26: 0.831 s/op
Iteration  27: 0.824 s/op
Iteration  28: 0.827 s/op
Iteration  29: 0.829 s/op
Iteration  30: 0.835 s/op
Iteration  31: 0.831 s/op
Iteration  32: 0.833 s/op
Iteration  33: 0.826 s/op
Iteration  34: 0.827 s/op
Iteration  35: 0.832 s/op
Iteration  36: 0.826 s/op
Iteration  37: 0.828 s/op
Iteration  38: 0.831 s/op
Iteration  39: 0.826 s/op
Iteration  40: 0.833 s/op
Iteration  41: 0.829 s/op
Iteration  42: 0.831 s/op
Iteration  43: 0.830 s/op
Iteration  44: 0.820 s/op
Iteration  45: 0.828 s/op
Iteration  46: 0.825 s/op
Iteration  47: 0.822 s/op
Iteration  48: 0.825 s/op
Iteration  49: 0.827 s/op
Iteration  50: 0.826 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      0.842 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [0.800, 0.850) = 48 
    [0.850, 0.900) = 0 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.820 s/op
     p(50.0000) =      0.829 s/op
     p(90.0000) =      0.835 s/op
     p(95.0000) =      0.880 s/op
     p(99.0000) =      1.354 s/op
     p(99.9000) =      1.354 s/op
     p(99.9900) =      1.354 s/op
     p(99.9990) =      1.354 s/op
     p(99.9999) =      1.354 s/op
    p(100.0000) =      1.354 s/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.842 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ee-19.1.1_1564728947098.json
{"wallclock_times": [43.02063011899986], "core_cycle_counts": [[42266037010], [16621180697], [35836672505], [54845483679]], "aperf_counts": [[42118688941], [16590657375], [35815888923], [54826660918]], "mperf_counts": [[42144104246], [16594191908], [35816720718], [54838669372]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 08:56:30: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:56:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:56:31: INFO] 417 executions left in scheduler queue
[2019-08-02 08:56:31: INFO] Executions until ETA known: 2616
[2019-08-02 08:56:31: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:56:31: INFO] Estimated completion (next execution): 2019-08-02 08:59:44 (0:03:13 from now)
[2019-08-02 08:56:31: INFO] Reboot in preparation for next execution
[2019-08-02 09:07:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.743 s/op
Iteration   2: 1.456 s/op
Iteration   3: 1.535 s/op
Iteration   4: 1.419 s/op
Iteration   5: 1.368 s/op
Iteration   6: 1.401 s/op
Iteration   7: 1.377 s/op
Iteration   8: 1.403 s/op
Iteration   9: 1.433 s/op
Iteration  10: 1.377 s/op
Iteration  11: 1.365 s/op
Iteration  12: 1.400 s/op
Iteration  13: 1.430 s/op
Iteration  14: 1.449 s/op
Iteration  15: 1.432 s/op
Iteration  16: 1.401 s/op
Iteration  17: 1.368 s/op
Iteration  18: 1.405 s/op
Iteration  19: 1.395 s/op
Iteration  20: 1.391 s/op
Iteration  21: 1.446 s/op
Iteration  22: 1.401 s/op
Iteration  23: 1.405 s/op
Iteration  24: 1.398 s/op
Iteration  25: 1.400 s/op
Iteration  26: 1.424 s/op
Iteration  27: 1.381 s/op
Iteration  28: 1.379 s/op
Iteration  29: 1.366 s/op
Iteration  30: 1.398 s/op
Iteration  31: 1.374 s/op
Iteration  32: 1.393 s/op
Iteration  33: 1.401 s/op
Iteration  34: 1.383 s/op
Iteration  35: 1.378 s/op
Iteration  36: 1.411 s/op
Iteration  37: 1.376 s/op
Iteration  38: 1.408 s/op
Iteration  39: 1.369 s/op
Iteration  40: 1.441 s/op
Iteration  41: 1.454 s/op
Iteration  42: 1.385 s/op
Iteration  43: 1.410 s/op
Iteration  44: 1.406 s/op
Iteration  45: 1.413 s/op
Iteration  46: 1.404 s/op
Iteration  47: 1.432 s/op
Iteration  48: 1.379 s/op
Iteration  49: 1.377 s/op
Iteration  50: 1.407 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.411 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 22 
    [1.400, 1.450) = 24 
    [1.450, 1.500) = 2 
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.365 s/op
     p(50.0000) =      1.401 s/op
     p(90.0000) =      1.449 s/op
     p(95.0000) =      1.491 s/op
     p(99.0000) =      1.743 s/op
     p(99.9000) =      1.743 s/op
     p(99.9900) =      1.743 s/op
     p(99.9990) =      1.743 s/op
     p(99.9999) =      1.743 s/op
    p(100.0000) =      1.743 s/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.411 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ee-19.1.1_1564729606894.json
{"wallclock_times": [71.4162069360001], "core_cycle_counts": [[57403372198], [68719577072], [74461816035], [33770879623]], "aperf_counts": [[57228400920], [68698347487], [74446058042], [33756702744]], "mperf_counts": [[57259073772], [68713564730], [74447145536], [33757959408]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 09:07:58: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 09:07:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 09:07:59: INFO] 416 executions left in scheduler queue
[2019-08-02 09:07:59: INFO] Executions until ETA known: 2604
[2019-08-02 09:07:59: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-08-02 09:07:59: INFO] Estimated completion (next execution): 2019-08-02 09:11:40 (0:03:41 from now)
[2019-08-02 09:07:59: INFO] Reboot in preparation for next execution
[2019-08-02 09:23:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.287 s/op
Iteration   2: 2.370 s/op
Iteration   3: 2.861 s/op
Iteration   4: 2.986 s/op
Iteration   5: 3.012 s/op
Iteration   6: 3.009 s/op
Iteration   7: 3.013 s/op
Iteration   8: 3.020 s/op
Iteration   9: 3.014 s/op
Iteration  10: 3.014 s/op
Iteration  11: 3.018 s/op
Iteration  12: 3.003 s/op
Iteration  13: 3.019 s/op
Iteration  14: 3.021 s/op
Iteration  15: 3.010 s/op
Iteration  16: 3.012 s/op
Iteration  17: 3.036 s/op
Iteration  18: 2.999 s/op
Iteration  19: 3.033 s/op
Iteration  20: 3.017 s/op
Iteration  21: 3.010 s/op
Iteration  22: 3.014 s/op
Iteration  23: 3.012 s/op
Iteration  24: 2.974 s/op
Iteration  25: 2.991 s/op
Iteration  26: 3.005 s/op
Iteration  27: 3.016 s/op
Iteration  28: 3.019 s/op
Iteration  29: 3.012 s/op
Iteration  30: 3.014 s/op
Iteration  31: 3.012 s/op
Iteration  32: 3.013 s/op
Iteration  33: 3.017 s/op
Iteration  34: 3.013 s/op
Iteration  35: 2.996 s/op
Iteration  36: 3.015 s/op
Iteration  37: 3.010 s/op
Iteration  38: 3.016 s/op
Iteration  39: 3.021 s/op
Iteration  40: 3.015 s/op
Iteration  41: 3.020 s/op
Iteration  42: 3.012 s/op
Iteration  43: 3.020 s/op
Iteration  44: 3.005 s/op
Iteration  45: 3.018 s/op
Iteration  46: 3.027 s/op
Iteration  47: 3.008 s/op
Iteration  48: 3.016 s/op
Iteration  49: 3.001 s/op
Iteration  50: 3.012 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      3.002 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 
    [2.900, 3.000) = 5 
    [3.000, 3.100) = 42 
    [3.100, 3.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.370 s/op
     p(50.0000) =      3.013 s/op
     p(90.0000) =      3.021 s/op
     p(95.0000) =      3.034 s/op
     p(99.0000) =      3.287 s/op
     p(99.9000) =      3.287 s/op
     p(99.9900) =      3.287 s/op
     p(99.9990) =      3.287 s/op
     p(99.9999) =      3.287 s/op
    p(100.0000) =      3.287 s/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  3.002 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_graalvm-ee-19.1.1_1564730442682.json
{"wallclock_times": [150.95487441600005], "core_cycle_counts": [[113114476036], [106853185929], [132963868924], [137803467906]], "aperf_counts": [[112732598215], [106805878724], [132934093216], [137777683353]], "mperf_counts": [[112750471626], [106806963140], [132934613212], [137783716026]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 09:23:13: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-08-02 09:23:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 09:23:14: INFO] 415 executions left in scheduler queue
[2019-08-02 09:23:14: INFO] Executions until ETA known: 2568
[2019-08-02 09:23:14: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-08-02 09:23:14: INFO] Estimated completion (next execution): 2019-08-02 09:28:15 (0:05:01 from now)
[2019-08-02 09:23:14: INFO] Reboot in preparation for next execution
[2019-08-02 09:49:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.062 s/op
Iteration   2: 11.874 s/op
Iteration   3: 11.921 s/op
Iteration   4: 11.610 s/op
Iteration   5: 11.813 s/op
Iteration   6: 11.743 s/op
Iteration   7: 11.871 s/op
Iteration   8: 11.725 s/op
Iteration   9: 11.770 s/op
Iteration  10: 11.901 s/op
Iteration  11: 11.700 s/op
Iteration  12: 12.372 s/op
Iteration  13: 11.750 s/op
Iteration  14: 11.827 s/op
Iteration  15: 11.697 s/op
Iteration  16: 11.721 s/op
Iteration  17: 11.806 s/op
Iteration  18: 11.661 s/op
Iteration  19: 11.777 s/op
Iteration  20: 11.743 s/op
Iteration  21: 11.839 s/op
Iteration  22: 11.714 s/op
Iteration  23: 12.302 s/op
Iteration  24: 11.977 s/op
Iteration  25: 11.601 s/op
Iteration  26: 11.684 s/op
Iteration  27: 11.749 s/op
Iteration  28: 11.811 s/op
Iteration  29: 11.677 s/op
Iteration  30: 11.731 s/op
Iteration  31: 11.758 s/op
Iteration  32: 11.880 s/op
Iteration  33: 11.663 s/op
Iteration  34: 12.285 s/op
Iteration  35: 11.969 s/op
Iteration  36: 11.632 s/op
Iteration  37: 11.721 s/op
Iteration  38: 11.740 s/op
Iteration  39: 11.808 s/op
Iteration  40: 11.657 s/op
Iteration  41: 11.734 s/op
Iteration  42: 11.783 s/op
Iteration  43: 11.880 s/op
Iteration  44: 11.695 s/op
Iteration  45: 12.335 s/op
Iteration  46: 11.833 s/op
Iteration  47: 11.640 s/op
Iteration  48: 11.676 s/op
Iteration  49: 11.693 s/op
Iteration  50: 11.837 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.813 ?(99.9%) 0.090 s/op

  Histogram, s/op:
    [11.600, 11.650) = 4 
    [11.650, 11.700) = 10 
    [11.700, 11.750) = 10 
    [11.750, 11.800) = 5 
    [11.800, 11.850) = 8 
    [11.850, 11.900) = 4 
    [11.900, 11.950) = 2 
    [11.950, 12.000) = 2 
    [12.000, 12.050) = 0 
    [12.050, 12.100) = 1 
    [12.100, 12.150) = 0 
    [12.150, 12.200) = 0 
    [12.200, 12.250) = 0 
    [12.250, 12.300) = 1 
    [12.300, 12.350) = 2 

  Percentiles, s/op:
      p(0.0000) =     11.601 s/op
     p(50.0000) =     11.754 s/op
     p(90.0000) =     12.054 s/op
     p(95.0000) =     12.317 s/op
     p(99.0000) =     12.372 s/op
     p(99.9000) =     12.372 s/op
     p(99.9900) =     12.372 s/op
     p(99.9990) =     12.372 s/op
     p(99.9999) =     12.372 s/op
    p(100.0000) =     12.372 s/op


# Run complete. Total time: 00:09:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.813 ? 0.090   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot-8u222-b10_1564731585976.json
{"wallclock_times": [591.604944922], "core_cycle_counts": [[703918824096], [506191009817], [531711364830], [452432715493]], "aperf_counts": [[702487450407], [505989824986], [531620131524], [452348003227]], "mperf_counts": [[702493232526], [505999891824], [531632940392], [452348107176]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 09:49:37: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-08-02 09:49:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 09:49:38: INFO] 414 executions left in scheduler queue
[2019-08-02 09:49:38: INFO] Executions until ETA known: 2549
[2019-08-02 09:49:38: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 09:49:38: INFO] Estimated completion (next execution): 2019-08-02 10:02:00 (0:12:21 from now)
[2019-08-02 09:49:38: INFO] Reboot in preparation for next execution
[2019-08-02 09:56:46: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 09:56:46: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 09:56:46: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 09:56:46: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 09:56:46: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 09:56:46: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:03:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.199 s/op
Iteration   2: 7.927 s/op
Iteration   3: 7.923 s/op
Iteration   4: 7.627 s/op
Iteration   5: 7.675 s/op
Iteration   6: 7.533 s/op
Iteration   7: 7.600 s/op
Iteration   8: 7.620 s/op
Iteration   9: 7.598 s/op
Iteration  10: 7.637 s/op
Iteration  11: 7.554 s/op
Iteration  12: 7.578 s/op
Iteration  13: 7.657 s/op
Iteration  14: 7.598 s/op
Iteration  15: 7.602 s/op
Iteration  16: 7.594 s/op
Iteration  17: 7.633 s/op
Iteration  18: 7.520 s/op
Iteration  19: 7.574 s/op
Iteration  20: 7.629 s/op
Iteration  21: 7.502 s/op
Iteration  22: 7.583 s/op
Iteration  23: 7.501 s/op
Iteration  24: 7.605 s/op
Iteration  25: 7.557 s/op
Iteration  26: 7.533 s/op
Iteration  27: 7.542 s/op
Iteration  28: 7.550 s/op
Iteration  29: 7.531 s/op
Iteration  30: 7.552 s/op
Iteration  31: 7.500 s/op
Iteration  32: 7.537 s/op
Iteration  33: 7.569 s/op
Iteration  34: 7.553 s/op
Iteration  35: 7.555 s/op
Iteration  36: 7.547 s/op
Iteration  37: 7.502 s/op
Iteration  38: 7.504 s/op
Iteration  39: 7.586 s/op
Iteration  40: 7.578 s/op
Iteration  41: 7.548 s/op
Iteration  42: 7.632 s/op
Iteration  43: 7.525 s/op
Iteration  44: 7.507 s/op
Iteration  45: 7.524 s/op
Iteration  46: 7.539 s/op
Iteration  47: 7.502 s/op
Iteration  48: 7.525 s/op
Iteration  49: 7.561 s/op
Iteration  50: 7.637 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.613 ?(99.9%) 0.121 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 47 
    [ 7.750,  8.000) = 2 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.500 s/op
     p(50.0000) =      7.559 s/op
     p(90.0000) =      7.655 s/op
     p(95.0000) =      7.925 s/op
     p(99.0000) =      9.199 s/op
     p(99.9000) =      9.199 s/op
     p(99.9900) =      9.199 s/op
     p(99.9990) =      9.199 s/op
     p(99.9999) =      9.199 s/op
    p(100.0000) =      9.199 s/op


# Run complete. Total time: 00:06:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.613 ? 0.121   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_11.0.4_1564732606552.json
{"wallclock_times": [382.296164844], "core_cycle_counts": [[301716924956], [336924815105], [308018056761], [325266108031]], "aperf_counts": [[300655263683], [336829307239], [307898104475], [325191386194]], "mperf_counts": [[300657315172], [336829286776], [307898088360], [325197306192]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:03:08: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:03:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:03:09: INFO] 413 executions left in scheduler queue
[2019-08-02 10:03:09: INFO] Executions until ETA known: 2543
[2019-08-02 10:03:09: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:03:09: INFO] Estimated completion (next execution): 2019-08-02 10:12:02 (0:08:52 from now)
[2019-08-02 10:03:09: INFO] Reboot in preparation for next execution
[2019-08-02 10:08:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 10:08:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 10:08:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 10:08:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 10:08:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 10:08:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:13:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.634 s/op
Iteration   2: 6.932 s/op
Iteration   3: 6.730 s/op
Iteration   4: 6.366 s/op
Iteration   5: 5.827 s/op
Iteration   6: 5.956 s/op
Iteration   7: 6.309 s/op
Iteration   8: 5.915 s/op
Iteration   9: 5.756 s/op
Iteration  10: 5.766 s/op
Iteration  11: 6.118 s/op
Iteration  12: 6.194 s/op
Iteration  13: 6.349 s/op
Iteration  14: 5.780 s/op
Iteration  15: 6.282 s/op
Iteration  16: 6.216 s/op
Iteration  17: 5.766 s/op
Iteration  18: 5.848 s/op
Iteration  19: 6.361 s/op
Iteration  20: 5.807 s/op
Iteration  21: 5.758 s/op
Iteration  22: 5.807 s/op
Iteration  23: 6.271 s/op
Iteration  24: 5.858 s/op
Iteration  25: 5.807 s/op
Iteration  26: 5.984 s/op
Iteration  27: 6.136 s/op
Iteration  28: 5.812 s/op
Iteration  29: 6.030 s/op
Iteration  30: 6.202 s/op
Iteration  31: 5.750 s/op
Iteration  32: 5.812 s/op
Iteration  33: 6.132 s/op
Iteration  34: 5.854 s/op
Iteration  35: 5.791 s/op
Iteration  36: 5.713 s/op
Iteration  37: 5.872 s/op
Iteration  38: 5.824 s/op
Iteration  39: 5.865 s/op
Iteration  40: 6.172 s/op
Iteration  41: 5.750 s/op
Iteration  42: 5.949 s/op
Iteration  43: 6.311 s/op
Iteration  44: 6.286 s/op
Iteration  45: 6.125 s/op
Iteration  46: 6.115 s/op
Iteration  47: 6.151 s/op
Iteration  48: 5.803 s/op
Iteration  49: 5.785 s/op
Iteration  50: 6.146 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.056 ?(99.9%) 0.173 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 2 
    [5.750, 6.000) = 25 
    [6.000, 6.250) = 12 
    [6.250, 6.500) = 8 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.713 s/op
     p(50.0000) =      5.953 s/op
     p(90.0000) =      6.360 s/op
     p(95.0000) =      6.821 s/op
     p(99.0000) =      7.634 s/op
     p(99.9000) =      7.634 s/op
     p(99.9900) =      7.634 s/op
     p(99.9990) =      7.634 s/op
     p(99.9999) =      7.634 s/op
    p(100.0000) =      7.634 s/op


# Run complete. Total time: 00:05:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.056 ? 0.173   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_11.0.4_1564733290974.json
{"wallclock_times": [304.688879307], "core_cycle_counts": [[342938543398], [193031985074], [275499869318], [250525411954]], "aperf_counts": [[342224020615], [192877513597], [275389483928], [250418568791]], "mperf_counts": [[342230472044], [192877497160], [275389957480], [250418969238]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:13:15: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:13:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:13:16: INFO] 412 executions left in scheduler queue
[2019-08-02 10:13:16: INFO] Executions until ETA known: 2537
[2019-08-02 10:13:16: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:13:16: INFO] Estimated completion (next execution): 2019-08-02 10:20:51 (0:07:35 from now)
[2019-08-02 10:13:16: INFO] Reboot in preparation for next execution
[2019-08-02 10:18:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 10:18:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 10:18:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 10:18:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 10:18:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 10:18:22: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:22:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.224 s/op
Iteration   2: 5.934 s/op
Iteration   3: 5.375 s/op
Iteration   4: 5.445 s/op
Iteration   5: 5.473 s/op
Iteration   6: 5.440 s/op
Iteration   7: 5.319 s/op
Iteration   8: 5.317 s/op
Iteration   9: 5.279 s/op
Iteration  10: 5.324 s/op
Iteration  11: 5.301 s/op
Iteration  12: 5.282 s/op
Iteration  13: 5.245 s/op
Iteration  14: 5.279 s/op
Iteration  15: 5.292 s/op
Iteration  16: 5.286 s/op
Iteration  17: 5.298 s/op
Iteration  18: 5.296 s/op
Iteration  19: 5.270 s/op
Iteration  20: 5.260 s/op
Iteration  21: 5.198 s/op
Iteration  22: 5.241 s/op
Iteration  23: 5.247 s/op
Iteration  24: 5.232 s/op
Iteration  25: 5.236 s/op
Iteration  26: 5.232 s/op
Iteration  27: 5.233 s/op
Iteration  28: 5.212 s/op
Iteration  29: 5.212 s/op
Iteration  30: 5.267 s/op
Iteration  31: 5.268 s/op
Iteration  32: 5.235 s/op
Iteration  33: 5.254 s/op
Iteration  34: 5.236 s/op
Iteration  35: 5.188 s/op
Iteration  36: 5.223 s/op
Iteration  37: 5.195 s/op
Iteration  38: 5.230 s/op
Iteration  39: 5.227 s/op
Iteration  40: 5.236 s/op
Iteration  41: 5.211 s/op
Iteration  42: 5.224 s/op
Iteration  43: 5.228 s/op
Iteration  44: 5.181 s/op
Iteration  45: 5.207 s/op
Iteration  46: 5.220 s/op
Iteration  47: 5.249 s/op
Iteration  48: 5.251 s/op
Iteration  49: 5.190 s/op
Iteration  50: 5.211 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.314 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [5.000, 5.250) = 27 
    [5.250, 5.500) = 21 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 1 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.181 s/op
     p(50.0000) =      5.246 s/op
     p(90.0000) =      5.434 s/op
     p(95.0000) =      5.680 s/op
     p(99.0000) =      7.224 s/op
     p(99.9000) =      7.224 s/op
     p(99.9900) =      7.224 s/op
     p(99.9990) =      7.224 s/op
     p(99.9999) =      7.224 s/op
    p(100.0000) =      7.224 s/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.314 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_11.0.4_1564733902521.json
{"wallclock_times": [267.630191953], "core_cycle_counts": [[288884076362], [269632970818], [190977562243], [284369613272]], "aperf_counts": [[288138869306], [269524112531], [190831598927], [284234849824]], "mperf_counts": [[288145785104], [269524258510], [190831632246], [284234823052]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:22:50: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:22:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:22:51: INFO] 411 executions left in scheduler queue
[2019-08-02 10:22:51: INFO] Executions until ETA known: 2532
[2019-08-02 10:22:51: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:22:51: INFO] Estimated completion (next execution): 2019-08-02 10:29:49 (0:06:58 from now)
[2019-08-02 10:22:51: INFO] Reboot in preparation for next execution
[2019-08-02 10:27:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 10:27:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 10:27:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 10:27:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 10:27:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 10:27:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:38:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.569 s/op
Iteration   2: 14.153 s/op
Iteration   3: 13.234 s/op
Iteration   4: 13.394 s/op
Iteration   5: 13.285 s/op
Iteration   6: 13.757 s/op
Iteration   7: 13.428 s/op
Iteration   8: 13.258 s/op
Iteration   9: 13.502 s/op
Iteration  10: 13.227 s/op
Iteration  11: 13.362 s/op
Iteration  12: 13.684 s/op
Iteration  13: 13.313 s/op
Iteration  14: 14.014 s/op
Iteration  15: 13.154 s/op
Iteration  16: 13.242 s/op
Iteration  17: 13.317 s/op
Iteration  18: 13.744 s/op
Iteration  19: 13.301 s/op
Iteration  20: 13.267 s/op
Iteration  21: 13.252 s/op
Iteration  22: 13.722 s/op
Iteration  23: 13.175 s/op
Iteration  24: 13.190 s/op
Iteration  25: 13.252 s/op
Iteration  26: 13.180 s/op
Iteration  27: 13.226 s/op
Iteration  28: 13.233 s/op
Iteration  29: 13.726 s/op
Iteration  30: 13.210 s/op
Iteration  31: 13.273 s/op
Iteration  32: 13.222 s/op
Iteration  33: 13.776 s/op
Iteration  34: 13.261 s/op
Iteration  35: 13.240 s/op
Iteration  36: 13.216 s/op
Iteration  37: 13.256 s/op
Iteration  38: 13.222 s/op
Iteration  39: 13.155 s/op
Iteration  40: 13.221 s/op
Iteration  41: 13.189 s/op
Iteration  42: 13.222 s/op
Iteration  43: 13.256 s/op
Iteration  44: 13.232 s/op
Iteration  45: 13.239 s/op
Iteration  46: 13.289 s/op
Iteration  47: 13.121 s/op
Iteration  48: 13.244 s/op
Iteration  49: 13.262 s/op
Iteration  50: 13.248 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     13.390 ?(99.9%) 0.193 s/op

  Histogram, s/op:
    [13.000, 13.250) = 23 
    [13.250, 13.500) = 17 
    [13.500, 13.750) = 5 
    [13.750, 14.000) = 2 
    [14.000, 14.250) = 2 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.121 s/op
     p(50.0000) =     13.254 s/op
     p(90.0000) =     13.755 s/op
     p(95.0000) =     14.076 s/op
     p(99.0000) =     15.569 s/op
     p(99.9000) =     15.569 s/op
     p(99.9900) =     15.569 s/op
     p(99.9990) =     15.569 s/op
     p(99.9999) =     15.569 s/op
    p(100.0000) =     15.569 s/op


# Run complete. Total time: 00:11:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  13.390 ? 0.193   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_11.0.4_1564734452206.json
{"wallclock_times": [671.1586773299999], "core_cycle_counts": [[723671278223], [399904161271], [698057451888], [397149761231]], "aperf_counts": [[722135193951], [399696974362], [697835389696], [396966272404]], "mperf_counts": [[722147056620], [399696956026], [697835394536], [396966517832]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:38:43: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:38:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:38:44: INFO] 410 executions left in scheduler queue
[2019-08-02 10:38:44: INFO] Executions until ETA known: 2509
[2019-08-02 10:38:44: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 10:38:44: INFO] Estimated completion (next execution): 2019-08-02 10:52:26 (0:13:41 from now)
[2019-08-02 10:38:44: INFO] Reboot in preparation for next execution
[2019-08-02 10:42:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 10:47:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.349 s/op
Iteration   2: 6.738 s/op
Iteration   3: 6.277 s/op
Iteration   4: 5.870 s/op
Iteration   5: 5.796 s/op
Iteration   6: 5.753 s/op
Iteration   7: 5.741 s/op
Iteration   8: 5.705 s/op
Iteration   9: 5.678 s/op
Iteration  10: 5.628 s/op
Iteration  11: 5.624 s/op
Iteration  12: 5.605 s/op
Iteration  13: 5.667 s/op
Iteration  14: 5.651 s/op
Iteration  15: 5.676 s/op
Iteration  16: 5.607 s/op
Iteration  17: 5.652 s/op
Iteration  18: 5.640 s/op
Iteration  19: 5.667 s/op
Iteration  20: 5.605 s/op
Iteration  21: 5.637 s/op
Iteration  22: 5.593 s/op
Iteration  23: 5.611 s/op
Iteration  24: 5.556 s/op
Iteration  25: 5.618 s/op
Iteration  26: 5.601 s/op
Iteration  27: 5.637 s/op
Iteration  28: 5.591 s/op
Iteration  29: 5.600 s/op
Iteration  30: 5.611 s/op
Iteration  31: 5.605 s/op
Iteration  32: 5.560 s/op
Iteration  33: 5.663 s/op
Iteration  34: 5.585 s/op
Iteration  35: 5.613 s/op
Iteration  36: 5.601 s/op
Iteration  37: 5.562 s/op
Iteration  38: 5.574 s/op
Iteration  39: 5.589 s/op
Iteration  40: 5.591 s/op
Iteration  41: 5.593 s/op
Iteration  42: 5.580 s/op
Iteration  43: 5.651 s/op
Iteration  44: 5.575 s/op
Iteration  45: 5.600 s/op
Iteration  46: 5.584 s/op
Iteration  47: 5.615 s/op
Iteration  48: 5.614 s/op
Iteration  49: 5.524 s/op
Iteration  50: 5.627 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.698 ?(99.9%) 0.151 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 44 
    [5.750, 6.000) = 3 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.524 s/op
     p(50.0000) =      5.614 s/op
     p(90.0000) =      5.791 s/op
     p(95.0000) =      6.484 s/op
     p(99.0000) =      7.349 s/op
     p(99.9000) =      7.349 s/op
     p(99.9900) =      7.349 s/op
     p(99.9990) =      7.349 s/op
     p(99.9999) =      7.349 s/op
    p(100.0000) =      7.349 s/op


# Run complete. Total time: 00:04:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.698 ? 0.151   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9-8u222-b10_1564735377596.json
{"wallclock_times": [286.12258539000004], "core_cycle_counts": [[255423412620], [263746855114], [243297723526], [225304994236]], "aperf_counts": [[254698985356], [263632768036], [243216284158], [225261300341]], "mperf_counts": [[254700684712], [263632741036], [243217137208], [225261294616]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:47:43: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 10:47:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:47:44: INFO] 409 executions left in scheduler queue
[2019-08-02 10:47:44: INFO] Executions until ETA known: 2503
[2019-08-02 10:47:44: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 10:47:44: INFO] Estimated completion (next execution): 2019-08-02 10:55:01 (0:07:16 from now)
[2019-08-02 10:47:44: INFO] Reboot in preparation for next execution
[2019-08-02 10:51:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 11:00:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.287 s/op
Iteration   2: 10.596 s/op
Iteration   3: 10.736 s/op
Iteration   4: 10.573 s/op
Iteration   5: 10.659 s/op
Iteration   6: 10.542 s/op
Iteration   7: 10.453 s/op
Iteration   8: 10.579 s/op
Iteration   9: 10.475 s/op
Iteration  10: 10.572 s/op
Iteration  11: 10.457 s/op
Iteration  12: 10.605 s/op
Iteration  13: 10.493 s/op
Iteration  14: 10.608 s/op
Iteration  15: 10.498 s/op
Iteration  16: 10.482 s/op
Iteration  17: 10.530 s/op
Iteration  18: 10.449 s/op
Iteration  19: 10.541 s/op
Iteration  20: 10.457 s/op
Iteration  21: 10.542 s/op
Iteration  22: 10.418 s/op
Iteration  23: 10.528 s/op
Iteration  24: 10.409 s/op
Iteration  25: 10.489 s/op
Iteration  26: 10.358 s/op
Iteration  27: 10.499 s/op
Iteration  28: 10.400 s/op
Iteration  29: 10.332 s/op
Iteration  30: 10.441 s/op
Iteration  31: 10.401 s/op
Iteration  32: 10.432 s/op
Iteration  33: 10.263 s/op
Iteration  34: 10.379 s/op
Iteration  35: 10.359 s/op
Iteration  36: 10.406 s/op
Iteration  37: 10.331 s/op
Iteration  38: 10.267 s/op
Iteration  39: 10.345 s/op
Iteration  40: 10.371 s/op
Iteration  41: 10.411 s/op
Iteration  42: 10.345 s/op
Iteration  43: 10.259 s/op
Iteration  44: 10.385 s/op
Iteration  45: 10.282 s/op
Iteration  46: 10.348 s/op
Iteration  47: 10.265 s/op
Iteration  48: 10.445 s/op
Iteration  49: 10.348 s/op
Iteration  50: 10.401 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.481 ?(99.9%) 0.140 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 36 
    [10.500, 10.750) = 13 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 1 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.259 s/op
     p(50.0000) =     10.443 s/op
     p(90.0000) =     10.604 s/op
     p(95.0000) =     10.693 s/op
     p(99.0000) =     12.287 s/op
     p(99.9000) =     12.287 s/op
     p(99.9900) =     12.287 s/op
     p(99.9990) =     12.287 s/op
     p(99.9999) =     12.287 s/op
    p(100.0000) =     12.287 s/op


# Run complete. Total time: 00:08:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.481 ? 0.140   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9-8u222-b10_1564735918595.json
{"wallclock_times": [525.327982903], "core_cycle_counts": [[739848265419], [367361221617], [218082013098], [460982624392]], "aperf_counts": [[738824723497], [367242231879], [217852915983], [460872059358]], "mperf_counts": [[738825550668], [367242195032], [217852831492], [460872198762]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 11:00:43: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:00:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:00:44: INFO] 408 executions left in scheduler queue
[2019-08-02 11:00:44: INFO] Executions until ETA known: 2501
[2019-08-02 11:00:44: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:00:44: INFO] Estimated completion (next execution): 2019-08-02 11:12:00 (0:11:15 from now)
[2019-08-02 11:00:44: INFO] Reboot in preparation for next execution
[2019-08-02 11:05:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 11:08:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.962 s/op
Iteration   2: 5.161 s/op
Iteration   3: 4.731 s/op
Iteration   4: 4.704 s/op
Iteration   5: 4.690 s/op
Iteration   6: 4.748 s/op
Iteration   7: 4.513 s/op
Iteration   8: 4.427 s/op
Iteration   9: 4.289 s/op
Iteration  10: 4.350 s/op
Iteration  11: 4.307 s/op
Iteration  12: 4.342 s/op
Iteration  13: 4.349 s/op
Iteration  14: 4.356 s/op
Iteration  15: 4.362 s/op
Iteration  16: 4.386 s/op
Iteration  17: 4.385 s/op
Iteration  18: 4.359 s/op
Iteration  19: 4.341 s/op
Iteration  20: 4.326 s/op
Iteration  21: 4.336 s/op
Iteration  22: 4.359 s/op
Iteration  23: 4.386 s/op
Iteration  24: 4.350 s/op
Iteration  25: 4.378 s/op
Iteration  26: 4.402 s/op
Iteration  27: 4.341 s/op
Iteration  28: 4.351 s/op
Iteration  29: 4.325 s/op
Iteration  30: 4.308 s/op
Iteration  31: 4.337 s/op
Iteration  32: 4.385 s/op
Iteration  33: 4.374 s/op
Iteration  34: 4.356 s/op
Iteration  35: 4.360 s/op
Iteration  36: 4.366 s/op
Iteration  37: 4.385 s/op
Iteration  38: 4.312 s/op
Iteration  39: 4.361 s/op
Iteration  40: 4.326 s/op
Iteration  41: 4.346 s/op
Iteration  42: 4.347 s/op
Iteration  43: 4.367 s/op
Iteration  44: 4.346 s/op
Iteration  45: 4.341 s/op
Iteration  46: 4.364 s/op
Iteration  47: 4.372 s/op
Iteration  48: 4.385 s/op
Iteration  49: 4.272 s/op
Iteration  50: 4.340 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.433 ?(99.9%) 0.133 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 0 
    [4.250, 4.375) = 34 
    [4.375, 4.500) = 9 
    [4.500, 4.625) = 1 
    [4.625, 4.750) = 4 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 0 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 1 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.272 s/op
     p(50.0000) =      4.359 s/op
     p(90.0000) =      4.702 s/op
     p(95.0000) =      4.934 s/op
     p(99.0000) =      5.962 s/op
     p(99.9000) =      5.962 s/op
     p(99.9900) =      5.962 s/op
     p(99.9990) =      5.962 s/op
     p(99.9999) =      5.962 s/op
    p(100.0000) =      5.962 s/op


# Run complete. Total time: 00:03:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.433 ? 0.133   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9-8u222-b10_1564736701046.json
{"wallclock_times": [223.16339774], "core_cycle_counts": [[200303424398], [217138189210], [219597629190], [212369577215]], "aperf_counts": [[199671108969], [217063927269], [219481399185], [212285105793]], "mperf_counts": [[199677392866], [217063915352], [219483491920], [212285145652]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 11:08:44: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:08:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:08:45: INFO] 407 executions left in scheduler queue
[2019-08-02 11:08:45: INFO] Executions until ETA known: 2495
[2019-08-02 11:08:45: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:08:45: INFO] Estimated completion (next execution): 2019-08-02 11:14:58 (0:06:13 from now)
[2019-08-02 11:08:45: INFO] Reboot in preparation for next execution
[2019-08-02 11:13:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 11:17:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.557 s/op
Iteration   2: 5.699 s/op
Iteration   3: 5.167 s/op
Iteration   4: 5.033 s/op
Iteration   5: 4.918 s/op
Iteration   6: 4.766 s/op
Iteration   7: 4.893 s/op
Iteration   8: 4.913 s/op
Iteration   9: 4.901 s/op
Iteration  10: 4.743 s/op
Iteration  11: 4.688 s/op
Iteration  12: 4.831 s/op
Iteration  13: 4.754 s/op
Iteration  14: 4.899 s/op
Iteration  15: 4.825 s/op
Iteration  16: 4.766 s/op
Iteration  17: 4.880 s/op
Iteration  18: 4.789 s/op
Iteration  19: 4.747 s/op
Iteration  20: 4.841 s/op
Iteration  21: 4.779 s/op
Iteration  22: 4.933 s/op
Iteration  23: 4.845 s/op
Iteration  24: 4.746 s/op
Iteration  25: 4.874 s/op
Iteration  26: 4.764 s/op
Iteration  27: 4.694 s/op
Iteration  28: 4.871 s/op
Iteration  29: 4.826 s/op
Iteration  30: 4.929 s/op
Iteration  31: 4.859 s/op
Iteration  32: 4.765 s/op
Iteration  33: 4.884 s/op
Iteration  34: 4.797 s/op
Iteration  35: 4.728 s/op
Iteration  36: 4.915 s/op
Iteration  37: 4.793 s/op
Iteration  38: 4.701 s/op
Iteration  39: 4.850 s/op
Iteration  40: 4.740 s/op
Iteration  41: 4.907 s/op
Iteration  42: 4.835 s/op
Iteration  43: 4.746 s/op
Iteration  44: 4.856 s/op
Iteration  45: 4.803 s/op
Iteration  46: 4.716 s/op
Iteration  47: 4.865 s/op
Iteration  48: 4.814 s/op
Iteration  49: 4.697 s/op
Iteration  50: 4.829 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.879 ?(99.9%) 0.142 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 11 
    [4.750, 5.000) = 35 
    [5.000, 5.250) = 2 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.688 s/op
     p(50.0000) =      4.830 s/op
     p(90.0000) =      4.933 s/op
     p(95.0000) =      5.406 s/op
     p(99.0000) =      6.557 s/op
     p(99.9000) =      6.557 s/op
     p(99.9900) =      6.557 s/op
     p(99.9990) =      6.557 s/op
     p(99.9999) =      6.557 s/op
    p(100.0000) =      6.557 s/op


# Run complete. Total time: 00:04:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.879 ? 0.142   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9-8u222-b10_1564737180003.json
{"wallclock_times": [245.410923824], "core_cycle_counts": [[278275185047], [217222353484], [191194721377], [216588220629]], "aperf_counts": [[277707852890], [217054473927], [191105041931], [216542285781]], "mperf_counts": [[277710087450], [217055423486], [191105270256], [216542292086]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 11:17:05: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:17:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:17:06: INFO] 406 executions left in scheduler queue
[2019-08-02 11:17:06: INFO] Executions until ETA known: 2485
[2019-08-02 11:17:06: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:17:06: INFO] Estimated completion (next execution): 2019-08-02 11:23:42 (0:06:35 from now)
[2019-08-02 11:17:06: INFO] Reboot in preparation for next execution
[2019-08-02 11:27:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.901 s/op
Iteration   2: 7.873 s/op
Iteration   3: 7.742 s/op
Iteration   4: 7.759 s/op
Iteration   5: 7.753 s/op
Iteration   6: 7.766 s/op
Iteration   7: 7.753 s/op
Iteration   8: 7.734 s/op
Iteration   9: 7.744 s/op
Iteration  10: 7.757 s/op
Iteration  11: 7.749 s/op
Iteration  12: 7.754 s/op
Iteration  13: 7.762 s/op
Iteration  14: 7.754 s/op
Iteration  15: 7.763 s/op
Iteration  16: 7.718 s/op
Iteration  17: 7.745 s/op
Iteration  18: 7.733 s/op
Iteration  19: 7.762 s/op
Iteration  20: 7.748 s/op
Iteration  21: 7.745 s/op
Iteration  22: 7.745 s/op
Iteration  23: 7.756 s/op
Iteration  24: 7.767 s/op
Iteration  25: 7.769 s/op
Iteration  26: 7.745 s/op
Iteration  27: 7.738 s/op
Iteration  28: 7.768 s/op
Iteration  29: 7.737 s/op
Iteration  30: 7.742 s/op
Iteration  31: 7.749 s/op
Iteration  32: 7.766 s/op
Iteration  33: 7.725 s/op
Iteration  34: 7.731 s/op
Iteration  35: 7.771 s/op
Iteration  36: 7.750 s/op
Iteration  37: 7.755 s/op
Iteration  38: 7.735 s/op
Iteration  39: 7.730 s/op
Iteration  40: 7.748 s/op
Iteration  41: 7.732 s/op
Iteration  42: 7.738 s/op
Iteration  43: 7.747 s/op
Iteration  44: 7.746 s/op
Iteration  45: 7.750 s/op
Iteration  46: 7.758 s/op
Iteration  47: 7.752 s/op
Iteration  48: 7.755 s/op
Iteration  49: 7.746 s/op
Iteration  50: 7.736 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.754 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [7.700, 7.725) = 1 
    [7.725, 7.750) = 27 
    [7.750, 7.775) = 20 
    [7.775, 7.800) = 0 
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 1 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 1 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.718 s/op
     p(50.0000) =      7.749 s/op
     p(90.0000) =      7.768 s/op
     p(95.0000) =      7.817 s/op
     p(99.0000) =      7.901 s/op
     p(99.9000) =      7.901 s/op
     p(99.9900) =      7.901 s/op
     p(99.9990) =      7.901 s/op
     p(99.9999) =      7.901 s/op
    p(100.0000) =      7.901 s/op


# Run complete. Total time: 00:06:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.754 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ee-19.1.1_1564737683383.json
{"wallclock_times": [388.61041973500005], "core_cycle_counts": [[304456278560], [422859643055], [313459343380], [219203948521]], "aperf_counts": [[303561652759], [422807345761], [313430795764], [219169797860]], "mperf_counts": [[303586669138], [422820299860], [313434215294], [219169960546]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:27:51: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:27:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:27:52: INFO] 405 executions left in scheduler queue
[2019-08-02 11:27:52: INFO] Executions until ETA known: 2479
[2019-08-02 11:27:52: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:27:52: INFO] Estimated completion (next execution): 2019-08-02 11:36:51 (0:08:58 from now)
[2019-08-02 11:27:52: INFO] Reboot in preparation for next execution
[2019-08-02 11:34:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.541 s/op
Iteration   2: 3.328 s/op
Iteration   3: 3.259 s/op
Iteration   4: 3.221 s/op
Iteration   5: 3.265 s/op
Iteration   6: 3.239 s/op
Iteration   7: 3.242 s/op
Iteration   8: 3.219 s/op
Iteration   9: 3.233 s/op
Iteration  10: 3.231 s/op
Iteration  11: 3.217 s/op
Iteration  12: 3.238 s/op
Iteration  13: 3.223 s/op
Iteration  14: 3.243 s/op
Iteration  15: 3.270 s/op
Iteration  16: 3.222 s/op
Iteration  17: 3.253 s/op
Iteration  18: 3.219 s/op
Iteration  19: 3.235 s/op
Iteration  20: 3.224 s/op
Iteration  21: 3.234 s/op
Iteration  22: 3.226 s/op
Iteration  23: 3.228 s/op
Iteration  24: 3.246 s/op
Iteration  25: 3.228 s/op
Iteration  26: 3.220 s/op
Iteration  27: 3.227 s/op
Iteration  28: 3.237 s/op
Iteration  29: 3.221 s/op
Iteration  30: 3.234 s/op
Iteration  31: 3.247 s/op
Iteration  32: 3.254 s/op
Iteration  33: 3.234 s/op
Iteration  34: 3.239 s/op
Iteration  35: 3.230 s/op
Iteration  36: 3.241 s/op
Iteration  37: 3.234 s/op
Iteration  38: 3.213 s/op
Iteration  39: 3.243 s/op
Iteration  40: 3.252 s/op
Iteration  41: 3.227 s/op
Iteration  42: 3.218 s/op
Iteration  43: 3.241 s/op
Iteration  44: 3.227 s/op
Iteration  45: 3.213 s/op
Iteration  46: 3.219 s/op
Iteration  47: 3.232 s/op
Iteration  48: 3.235 s/op
Iteration  49: 3.242 s/op
Iteration  50: 3.237 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.242 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [3.200, 3.225) = 13 
    [3.225, 3.250) = 29 
    [3.250, 3.275) = 6 
    [3.275, 3.300) = 0 
    [3.300, 3.325) = 0 
    [3.325, 3.350) = 1 
    [3.350, 3.375) = 0 
    [3.375, 3.400) = 0 
    [3.400, 3.425) = 0 
    [3.425, 3.450) = 0 
    [3.450, 3.475) = 0 
    [3.475, 3.500) = 0 
    [3.500, 3.525) = 0 
    [3.525, 3.550) = 1 
    [3.550, 3.575) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.213 s/op
     p(50.0000) =      3.234 s/op
     p(90.0000) =      3.259 s/op
     p(95.0000) =      3.296 s/op
     p(99.0000) =      3.541 s/op
     p(99.9000) =      3.541 s/op
     p(99.9900) =      3.541 s/op
     p(99.9990) =      3.541 s/op
     p(99.9999) =      3.541 s/op
    p(100.0000) =      3.541 s/op


# Run complete. Total time: 00:02:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.242 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ee-19.1.1_1564738329600.json
{"wallclock_times": [163.094304082], "core_cycle_counts": [[174817162602], [125223059372], [119094100012], [114587919927]], "aperf_counts": [[174465511600], [125179292183], [119070014398], [114567093514]], "mperf_counts": [[174493437138], [125184368236], [119070279128], [114568598820]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:34:52: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:34:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:34:53: INFO] 404 executions left in scheduler queue
[2019-08-02 11:34:53: INFO] Executions until ETA known: 2473
[2019-08-02 11:34:53: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:34:53: INFO] Estimated completion (next execution): 2019-08-02 11:40:06 (0:05:13 from now)
[2019-08-02 11:34:53: INFO] Reboot in preparation for next execution
[2019-08-02 11:42:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.149 s/op
Iteration   2: 3.621 s/op
Iteration   3: 3.700 s/op
Iteration   4: 3.616 s/op
Iteration   5: 3.594 s/op
Iteration   6: 3.697 s/op
Iteration   7: 3.663 s/op
Iteration   8: 3.693 s/op
Iteration   9: 3.644 s/op
Iteration  10: 3.649 s/op
Iteration  11: 3.655 s/op
Iteration  12: 3.706 s/op
Iteration  13: 3.662 s/op
Iteration  14: 3.661 s/op
Iteration  15: 3.661 s/op
Iteration  16: 3.709 s/op
Iteration  17: 3.675 s/op
Iteration  18: 3.653 s/op
Iteration  19: 3.644 s/op
Iteration  20: 3.716 s/op
Iteration  21: 3.646 s/op
Iteration  22: 3.657 s/op
Iteration  23: 3.658 s/op
Iteration  24: 3.651 s/op
Iteration  25: 3.710 s/op
Iteration  26: 3.641 s/op
Iteration  27: 3.658 s/op
Iteration  28: 3.654 s/op
Iteration  29: 3.718 s/op
Iteration  30: 3.669 s/op
Iteration  31: 3.654 s/op
Iteration  32: 3.651 s/op
Iteration  33: 3.717 s/op
Iteration  34: 3.663 s/op
Iteration  35: 3.663 s/op
Iteration  36: 3.665 s/op
Iteration  37: 3.730 s/op
Iteration  38: 3.653 s/op
Iteration  39: 3.644 s/op
Iteration  40: 3.674 s/op
Iteration  41: 3.654 s/op
Iteration  42: 3.743 s/op
Iteration  43: 3.676 s/op
Iteration  44: 3.658 s/op
Iteration  45: 3.679 s/op
Iteration  46: 3.723 s/op
Iteration  47: 3.674 s/op
Iteration  48: 3.658 s/op
Iteration  49: 3.671 s/op
Iteration  50: 4.053 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.687 ?(99.9%) 0.045 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 8 
    [3.650, 3.700) = 29 
    [3.700, 3.750) = 10 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 1 
    [4.100, 4.150) = 1 
    [4.150, 4.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.594 s/op
     p(50.0000) =      3.662 s/op
     p(90.0000) =      3.722 s/op
     p(95.0000) =      3.883 s/op
     p(99.0000) =      4.149 s/op
     p(99.9000) =      4.149 s/op
     p(99.9900) =      4.149 s/op
     p(99.9990) =      4.149 s/op
     p(99.9999) =      4.149 s/op
    p(100.0000) =      4.149 s/op


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.687 ? 0.045   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ee-19.1.1_1564738748567.json
{"wallclock_times": [185.412628282], "core_cycle_counts": [[141524492010], [186939324132], [200964864212], [138605332857]], "aperf_counts": [[141026036287], [186882809108], [200917302901], [138568272866]], "mperf_counts": [[141053501898], [186888760160], [200920488186], [138574035644]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:42:13: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:42:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:42:14: INFO] 403 executions left in scheduler queue
[2019-08-02 11:42:14: INFO] Executions until ETA known: 2468
[2019-08-02 11:42:14: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:42:14: INFO] Estimated completion (next execution): 2019-08-02 11:47:50 (0:05:35 from now)
[2019-08-02 11:42:14: INFO] Reboot in preparation for next execution
[2019-08-02 11:52:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.947 s/op
Iteration   2: 6.829 s/op
Iteration   3: 6.817 s/op
Iteration   4: 6.769 s/op
Iteration   5: 6.782 s/op
Iteration   6: 6.812 s/op
Iteration   7: 6.831 s/op
Iteration   8: 6.820 s/op
Iteration   9: 6.812 s/op
Iteration  10: 6.779 s/op
Iteration  11: 6.776 s/op
Iteration  12: 6.812 s/op
Iteration  13: 6.797 s/op
Iteration  14: 6.802 s/op
Iteration  15: 6.789 s/op
Iteration  16: 6.810 s/op
Iteration  17: 6.759 s/op
Iteration  18: 6.775 s/op
Iteration  19: 6.828 s/op
Iteration  20: 6.814 s/op
Iteration  21: 6.808 s/op
Iteration  22: 6.800 s/op
Iteration  23: 6.755 s/op
Iteration  24: 6.819 s/op
Iteration  25: 6.769 s/op
Iteration  26: 6.759 s/op
Iteration  27: 6.787 s/op
Iteration  28: 6.782 s/op
Iteration  29: 6.771 s/op
Iteration  30: 6.790 s/op
Iteration  31: 6.790 s/op
Iteration  32: 6.848 s/op
Iteration  33: 6.809 s/op
Iteration  34: 6.791 s/op
Iteration  35: 6.755 s/op
Iteration  36: 6.762 s/op
Iteration  37: 6.771 s/op
Iteration  38: 6.847 s/op
Iteration  39: 6.785 s/op
Iteration  40: 6.860 s/op
Iteration  41: 6.794 s/op
Iteration  42: 6.752 s/op
Iteration  43: 6.782 s/op
Iteration  44: 6.811 s/op
Iteration  45: 6.780 s/op
Iteration  46: 6.762 s/op
Iteration  47: 6.778 s/op
Iteration  48: 6.833 s/op
Iteration  49: 6.769 s/op
Iteration  50: 6.780 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.797 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 13 
    [6.775, 6.800) = 16 
    [6.800, 6.825) = 13 
    [6.825, 6.850) = 6 
    [6.850, 6.875) = 1 
    [6.875, 6.900) = 0 
    [6.900, 6.925) = 0 
    [6.925, 6.950) = 1 
    [6.950, 6.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.752 s/op
     p(50.0000) =      6.790 s/op
     p(90.0000) =      6.832 s/op
     p(95.0000) =      6.853 s/op
     p(99.0000) =      6.947 s/op
     p(99.9000) =      6.947 s/op
     p(99.9900) =      6.947 s/op
     p(99.9990) =      6.947 s/op
     p(99.9999) =      6.947 s/op
    p(100.0000) =      6.947 s/op


# Run complete. Total time: 00:05:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.797 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ee-19.1.1_1564739203657.json
{"wallclock_times": [340.809437375], "core_cycle_counts": [[267296135386], [176454721970], [232739814860], [425177776716]], "aperf_counts": [[266485535780], [176388849731], [232710089558], [425157929489]], "mperf_counts": [[266511326872], [176391169448], [232716779700], [425160987320]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:52:24: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:52:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:52:25: INFO] 402 executions left in scheduler queue
[2019-08-02 11:52:25: INFO] Executions until ETA known: 2432
[2019-08-02 11:52:25: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-08-02 11:52:25: INFO] Estimated completion (next execution): 2019-08-02 12:00:36 (0:08:11 from now)
[2019-08-02 11:52:25: INFO] Reboot in preparation for next execution
[2019-08-02 12:03:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.285 s/op
Iteration   2: 8.095 s/op
Iteration   3: 8.065 s/op
Iteration   4: 8.048 s/op
Iteration   5: 8.044 s/op
Iteration   6: 8.285 s/op
Iteration   7: 8.068 s/op
Iteration   8: 7.921 s/op
Iteration   9: 8.135 s/op
Iteration  10: 7.982 s/op
Iteration  11: 7.982 s/op
Iteration  12: 8.138 s/op
Iteration  13: 8.351 s/op
Iteration  14: 7.977 s/op
Iteration  15: 8.067 s/op
Iteration  16: 7.877 s/op
Iteration  17: 7.890 s/op
Iteration  18: 7.886 s/op
Iteration  19: 7.748 s/op
Iteration  20: 7.803 s/op
Iteration  21: 7.934 s/op
Iteration  22: 7.747 s/op
Iteration  23: 7.761 s/op
Iteration  24: 7.967 s/op
Iteration  25: 7.930 s/op
Iteration  26: 7.921 s/op
Iteration  27: 7.755 s/op
Iteration  28: 7.789 s/op
Iteration  29: 7.927 s/op
Iteration  30: 7.725 s/op
Iteration  31: 7.762 s/op
Iteration  32: 7.963 s/op
Iteration  33: 7.911 s/op
Iteration  34: 7.893 s/op
Iteration  35: 7.747 s/op
Iteration  36: 7.838 s/op
Iteration  37: 8.592 s/op
Iteration  38: 7.783 s/op
Iteration  39: 7.887 s/op
Iteration  40: 7.926 s/op
Iteration  41: 7.897 s/op
Iteration  42: 7.935 s/op
Iteration  43: 7.742 s/op
Iteration  44: 7.796 s/op
Iteration  45: 7.916 s/op
Iteration  46: 7.742 s/op
Iteration  47: 7.755 s/op
Iteration  48: 7.946 s/op
Iteration  49: 7.907 s/op
Iteration  50: 7.886 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      7.939 ?(99.9%) 0.087 s/op

  Histogram, s/op:
    [7.700, 7.750) = 6 
    [7.750, 7.800) = 7 
    [7.800, 7.850) = 2 
    [7.850, 7.900) = 7 
    [7.900, 7.950) = 11 
    [7.950, 8.000) = 5 
    [8.000, 8.050) = 2 
    [8.050, 8.100) = 4 
    [8.100, 8.150) = 2 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 2 
    [8.300, 8.350) = 0 
    [8.350, 8.400) = 1 
    [8.400, 8.450) = 0 
    [8.450, 8.500) = 0 
    [8.500, 8.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.725 s/op
     p(50.0000) =      7.918 s/op
     p(90.0000) =      8.138 s/op
     p(95.0000) =      8.315 s/op
     p(99.0000) =      8.592 s/op
     p(99.9000) =      8.592 s/op
     p(99.9900) =      8.592 s/op
     p(99.9990) =      8.592 s/op
     p(99.9999) =      8.592 s/op
    p(100.0000) =      8.592 s/op


# Run complete. Total time: 00:06:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  7.939 ? 0.087   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ce-19.1.1_1564739798445.json
{"wallclock_times": [397.8990906949999], "core_cycle_counts": [[440163524621], [367226827466], [329476532445], [268638393960]], "aperf_counts": [[439307932137], [367142419515], [329412136296], [268594780217]], "mperf_counts": [[439319822028], [367143200822], [329413615940], [268603257748]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 12:03:16: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-08-02 12:03:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:03:17: INFO] 401 executions left in scheduler queue
[2019-08-02 12:03:17: INFO] Executions until ETA known: 2402
[2019-08-02 12:03:17: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:03:17: INFO] Estimated completion (next execution): 2019-08-02 12:12:25 (0:09:08 from now)
[2019-08-02 12:03:17: INFO] Reboot in preparation for next execution
[2019-08-02 12:07:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 12:07:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 12:07:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 12:07:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 12:07:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 12:07:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 12:09:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.873 s/op
Iteration   2: 2.568 s/op
Iteration   3: 2.427 s/op
Iteration   4: 2.074 s/op
Iteration   5: 2.222 s/op
Iteration   6: 2.078 s/op
Iteration   7: 1.970 s/op
Iteration   8: 1.960 s/op
Iteration   9: 1.936 s/op
Iteration  10: 1.922 s/op
Iteration  11: 1.988 s/op
Iteration  12: 2.019 s/op
Iteration  13: 2.001 s/op
Iteration  14: 1.987 s/op
Iteration  15: 2.009 s/op
Iteration  16: 1.997 s/op
Iteration  17: 2.000 s/op
Iteration  18: 1.982 s/op
Iteration  19: 1.994 s/op
Iteration  20: 1.989 s/op
Iteration  21: 2.014 s/op
Iteration  22: 1.997 s/op
Iteration  23: 2.009 s/op
Iteration  24: 1.988 s/op
Iteration  25: 2.002 s/op
Iteration  26: 1.987 s/op
Iteration  27: 1.989 s/op
Iteration  28: 1.998 s/op
Iteration  29: 1.986 s/op
Iteration  30: 1.997 s/op
Iteration  31: 1.959 s/op
Iteration  32: 2.001 s/op
Iteration  33: 1.960 s/op
Iteration  34: 1.959 s/op
Iteration  35: 1.971 s/op
Iteration  36: 2.008 s/op
Iteration  37: 1.959 s/op
Iteration  38: 2.002 s/op
Iteration  39: 2.017 s/op
Iteration  40: 1.991 s/op
Iteration  41: 1.979 s/op
Iteration  42: 1.986 s/op
Iteration  43: 1.987 s/op
Iteration  44: 1.993 s/op
Iteration  45: 1.971 s/op
Iteration  46: 1.954 s/op
Iteration  47: 1.983 s/op
Iteration  48: 1.989 s/op
Iteration  49: 1.987 s/op
Iteration  50: 1.991 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.032 ?(99.9%) 0.081 s/op

  Histogram, s/op:
    [1.900, 2.000) = 33 
    [2.000, 2.100) = 13 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 1 
    [2.500, 2.600) = 1 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.922 s/op
     p(50.0000) =      1.990 s/op
     p(90.0000) =      2.078 s/op
     p(95.0000) =      2.490 s/op
     p(99.0000) =      2.873 s/op
     p(99.9000) =      2.873 s/op
     p(99.9900) =      2.873 s/op
     p(99.9990) =      2.873 s/op
     p(99.9999) =      2.873 s/op
    p(100.0000) =      2.873 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.032 ? 0.081   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_12.0.1_1564740452296.json
{"wallclock_times": [103.30771599599998], "core_cycle_counts": [[155599059817], [60529630416], [57080654891], [87535210243]], "aperf_counts": [[155340957392], [60442441070], [56998699305], [87463305639]], "mperf_counts": [[155344692324], [60442432528], [56998693066], [87463336042]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:09:15: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:09:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:09:16: INFO] 400 executions left in scheduler queue
[2019-08-02 12:09:16: INFO] Executions until ETA known: 2392
[2019-08-02 12:09:16: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:09:16: INFO] Estimated completion (next execution): 2019-08-02 12:13:30 (0:04:13 from now)
[2019-08-02 12:09:16: INFO] Reboot in preparation for next execution
[2019-08-02 12:13:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 12:13:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 12:13:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 12:13:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 12:13:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 12:13:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 12:16:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.636 s/op
Iteration   2: 3.096 s/op
Iteration   3: 3.189 s/op
Iteration   4: 3.111 s/op
Iteration   5: 3.040 s/op
Iteration   6: 3.032 s/op
Iteration   7: 3.054 s/op
Iteration   8: 3.120 s/op
Iteration   9: 3.060 s/op
Iteration  10: 3.071 s/op
Iteration  11: 3.078 s/op
Iteration  12: 3.096 s/op
Iteration  13: 3.060 s/op
Iteration  14: 3.032 s/op
Iteration  15: 3.010 s/op
Iteration  16: 3.094 s/op
Iteration  17: 3.092 s/op
Iteration  18: 3.023 s/op
Iteration  19: 2.994 s/op
Iteration  20: 2.950 s/op
Iteration  21: 3.051 s/op
Iteration  22: 3.076 s/op
Iteration  23: 3.032 s/op
Iteration  24: 3.014 s/op
Iteration  25: 3.041 s/op
Iteration  26: 3.025 s/op
Iteration  27: 2.999 s/op
Iteration  28: 3.006 s/op
Iteration  29: 3.027 s/op
Iteration  30: 3.078 s/op
Iteration  31: 2.985 s/op
Iteration  32: 3.052 s/op
Iteration  33: 3.122 s/op
Iteration  34: 3.142 s/op
Iteration  35: 3.159 s/op
Iteration  36: 3.151 s/op
Iteration  37: 3.108 s/op
Iteration  38: 3.176 s/op
Iteration  39: 3.181 s/op
Iteration  40: 3.163 s/op
Iteration  41: 3.166 s/op
Iteration  42: 3.129 s/op
Iteration  43: 3.134 s/op
Iteration  44: 3.133 s/op
Iteration  45: 3.114 s/op
Iteration  46: 3.079 s/op
Iteration  47: 3.138 s/op
Iteration  48: 3.130 s/op
Iteration  49: 3.181 s/op
Iteration  50: 3.193 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      3.096 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 4 
    [3.000, 3.050) = 11 
    [3.050, 3.100) = 14 
    [3.100, 3.150) = 11 
    [3.150, 3.200) = 9 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.950 s/op
     p(50.0000) =      3.085 s/op
     p(90.0000) =      3.180 s/op
     p(95.0000) =      3.191 s/op
     p(99.0000) =      3.636 s/op
     p(99.9000) =      3.636 s/op
     p(99.9900) =      3.636 s/op
     p(99.9990) =      3.636 s/op
     p(99.9999) =      3.636 s/op
    p(100.0000) =      3.636 s/op


# Run complete. Total time: 00:02:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.096 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_12.0.1_1564740811404.json
{"wallclock_times": [156.348431751], "core_cycle_counts": [[164095870761], [120794320363], [121556781565], [121769744614]], "aperf_counts": [[163711600027], [120739860091], [121472347639], [121713813781]], "mperf_counts": [[163726101070], [120739985650], [121472335088], [121713889736]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:16:07: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:16:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:16:08: INFO] 399 executions left in scheduler queue
[2019-08-02 12:16:08: INFO] Executions until ETA known: 2378
[2019-08-02 12:16:08: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:16:08: INFO] Estimated completion (next execution): 2019-08-02 12:21:15 (0:05:06 from now)
[2019-08-02 12:16:08: INFO] Reboot in preparation for next execution
[2019-08-02 12:20:23: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 12:22:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.964 s/op
Iteration   2: 2.410 s/op
Iteration   3: 2.093 s/op
Iteration   4: 1.936 s/op
Iteration   5: 1.945 s/op
Iteration   6: 1.933 s/op
Iteration   7: 1.874 s/op
Iteration   8: 1.905 s/op
Iteration   9: 1.885 s/op
Iteration  10: 1.892 s/op
Iteration  11: 1.890 s/op
Iteration  12: 1.920 s/op
Iteration  13: 1.905 s/op
Iteration  14: 1.899 s/op
Iteration  15: 1.883 s/op
Iteration  16: 1.924 s/op
Iteration  17: 1.902 s/op
Iteration  18: 1.852 s/op
Iteration  19: 1.881 s/op
Iteration  20: 1.852 s/op
Iteration  21: 1.884 s/op
Iteration  22: 1.885 s/op
Iteration  23: 1.869 s/op
Iteration  24: 1.881 s/op
Iteration  25: 1.881 s/op
Iteration  26: 1.880 s/op
Iteration  27: 1.854 s/op
Iteration  28: 1.864 s/op
Iteration  29: 1.889 s/op
Iteration  30: 1.879 s/op
Iteration  31: 1.894 s/op
Iteration  32: 1.868 s/op
Iteration  33: 1.876 s/op
Iteration  34: 1.861 s/op
Iteration  35: 1.904 s/op
Iteration  36: 1.908 s/op
Iteration  37: 1.859 s/op
Iteration  38: 1.900 s/op
Iteration  39: 1.885 s/op
Iteration  40: 1.899 s/op
Iteration  41: 1.880 s/op
Iteration  42: 1.879 s/op
Iteration  43: 1.873 s/op
Iteration  44: 1.857 s/op
Iteration  45: 1.860 s/op
Iteration  46: 1.879 s/op
Iteration  47: 1.883 s/op
Iteration  48: 1.902 s/op
Iteration  49: 1.858 s/op
Iteration  50: 1.892 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.923 ?(99.9%) 0.085 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 13 
    [1.875, 2.000) = 34 
    [2.000, 2.125) = 1 
    [2.125, 2.250) = 0 
    [2.250, 2.375) = 0 
    [2.375, 2.500) = 1 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.852 s/op
     p(50.0000) =      1.885 s/op
     p(90.0000) =      1.936 s/op
     p(95.0000) =      2.236 s/op
     p(99.0000) =      2.964 s/op
     p(99.9000) =      2.964 s/op
     p(99.9900) =      2.964 s/op
     p(99.9990) =      2.964 s/op
     p(99.9999) =      2.964 s/op
    p(100.0000) =      2.964 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.923 ? 0.085   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9-8u222-b10_1564741223625.json
{"wallclock_times": [97.36585095699999], "core_cycle_counts": [[86174525986], [89845152953], [94399621060], [67320256756]], "aperf_counts": [[85831026774], [89790947942], [94341580552], [67262653545]], "mperf_counts": [[85833491002], [89791110892], [94341580788], [67262828356]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:22:00: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:22:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:22:01: INFO] 398 executions left in scheduler queue
[2019-08-02 12:22:01: INFO] Executions until ETA known: 2371
[2019-08-02 12:22:01: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:22:01: INFO] Estimated completion (next execution): 2019-08-02 12:26:09 (0:04:07 from now)
[2019-08-02 12:22:01: INFO] Reboot in preparation for next execution
[2019-08-02 12:26:16: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 12:29:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.668 s/op
Iteration   2: 3.606 s/op
Iteration   3: 3.576 s/op
Iteration   4: 3.375 s/op
Iteration   5: 3.310 s/op
Iteration   6: 3.294 s/op
Iteration   7: 3.271 s/op
Iteration   8: 3.171 s/op
Iteration   9: 3.225 s/op
Iteration  10: 3.231 s/op
Iteration  11: 3.232 s/op
Iteration  12: 3.186 s/op
Iteration  13: 3.160 s/op
Iteration  14: 3.227 s/op
Iteration  15: 3.230 s/op
Iteration  16: 3.169 s/op
Iteration  17: 3.196 s/op
Iteration  18: 3.172 s/op
Iteration  19: 3.214 s/op
Iteration  20: 3.227 s/op
Iteration  21: 3.215 s/op
Iteration  22: 3.200 s/op
Iteration  23: 3.204 s/op
Iteration  24: 3.146 s/op
Iteration  25: 3.234 s/op
Iteration  26: 3.216 s/op
Iteration  27: 3.209 s/op
Iteration  28: 3.237 s/op
Iteration  29: 3.209 s/op
Iteration  30: 3.199 s/op
Iteration  31: 3.242 s/op
Iteration  32: 3.207 s/op
Iteration  33: 3.236 s/op
Iteration  34: 3.199 s/op
Iteration  35: 3.210 s/op
Iteration  36: 3.250 s/op
Iteration  37: 3.213 s/op
Iteration  38: 3.184 s/op
Iteration  39: 3.213 s/op
Iteration  40: 3.236 s/op
Iteration  41: 3.221 s/op
Iteration  42: 3.195 s/op
Iteration  43: 3.240 s/op
Iteration  44: 3.230 s/op
Iteration  45: 3.210 s/op
Iteration  46: 3.200 s/op
Iteration  47: 3.240 s/op
Iteration  48: 3.222 s/op
Iteration  49: 3.214 s/op
Iteration  50: 3.206 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.244 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [3.100, 3.150) = 1 
    [3.150, 3.200) = 10 
    [3.200, 3.250) = 31 
    [3.250, 3.300) = 3 
    [3.300, 3.350) = 1 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.146 s/op
     p(50.0000) =      3.215 s/op
     p(90.0000) =      3.308 s/op
     p(95.0000) =      3.589 s/op
     p(99.0000) =      3.668 s/op
     p(99.9000) =      3.668 s/op
     p(99.9900) =      3.668 s/op
     p(99.9990) =      3.668 s/op
     p(99.9999) =      3.668 s/op
    p(100.0000) =      3.668 s/op


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.244 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9-8u222-b10_1564741576711.json
{"wallclock_times": [163.30076224400003], "core_cycle_counts": [[151302080134], [125858316934], [127543634477], [141793252029]], "aperf_counts": [[150875594767], [125795872859], [127485791389], [141755502857]], "mperf_counts": [[150877952384], [125795857560], [127485809806], [141755587174]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:29:00: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:29:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:29:00: INFO] 397 executions left in scheduler queue
[2019-08-02 12:29:00: INFO] Executions until ETA known: 2344
[2019-08-02 12:29:00: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-08-02 12:29:00: INFO] Estimated completion (next execution): 2019-08-02 12:34:14 (0:05:13 from now)
[2019-08-02 12:29:00: INFO] Reboot in preparation for next execution
[2019-08-02 12:33:16: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 12:33:16: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 12:33:16: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 12:33:16: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 12:33:16: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 12:44:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.518 s/op
Iteration   2: 13.007 s/op
Iteration   3: 12.973 s/op
Iteration   4: 13.205 s/op
Iteration   5: 12.993 s/op
Iteration   6: 12.986 s/op
Iteration   7: 13.024 s/op
Iteration   8: 13.072 s/op
Iteration   9: 12.984 s/op
Iteration  10: 12.988 s/op
Iteration  11: 12.994 s/op
Iteration  12: 13.005 s/op
Iteration  13: 13.081 s/op
Iteration  14: 13.020 s/op
Iteration  15: 12.942 s/op
Iteration  16: 13.001 s/op
Iteration  17: 12.978 s/op
Iteration  18: 12.978 s/op
Iteration  19: 12.960 s/op
Iteration  20: 13.020 s/op
Iteration  21: 13.003 s/op
Iteration  22: 12.941 s/op
Iteration  23: 12.977 s/op
Iteration  24: 12.950 s/op
Iteration  25: 12.983 s/op
Iteration  26: 13.055 s/op
Iteration  27: 12.977 s/op
Iteration  28: 13.059 s/op
Iteration  29: 12.982 s/op
Iteration  30: 13.006 s/op
Iteration  31: 12.998 s/op
Iteration  32: 13.061 s/op
Iteration  33: 12.981 s/op
Iteration  34: 12.799 s/op
Iteration  35: 12.957 s/op
Iteration  36: 12.980 s/op
Iteration  37: 13.155 s/op
Iteration  38: 12.919 s/op
Iteration  39: 13.050 s/op
Iteration  40: 12.840 s/op
Iteration  41: 13.003 s/op
Iteration  42: 13.029 s/op
Iteration  43: 12.959 s/op
Iteration  44: 13.063 s/op
Iteration  45: 12.978 s/op
Iteration  46: 12.985 s/op
Iteration  47: 13.095 s/op
Iteration  48: 12.985 s/op
Iteration  49: 13.003 s/op
Iteration  50: 12.930 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.009 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 1 
    [12.800, 12.850) = 1 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 4 
    [12.950, 13.000) = 22 
    [13.000, 13.050) = 12 
    [13.050, 13.100) = 7 
    [13.100, 13.150) = 0 
    [13.150, 13.200) = 1 
    [13.200, 13.250) = 1 
    [13.250, 13.300) = 0 
    [13.300, 13.350) = 0 
    [13.350, 13.400) = 0 
    [13.400, 13.450) = 0 
    [13.450, 13.500) = 0 
    [13.500, 13.550) = 1 
    [13.550, 13.600) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.799 s/op
     p(50.0000) =     12.991 s/op
     p(90.0000) =     13.080 s/op
     p(95.0000) =     13.178 s/op
     p(99.0000) =     13.518 s/op
     p(99.9000) =     13.518 s/op
     p(99.9900) =     13.518 s/op
     p(99.9990) =     13.518 s/op
     p(99.9999) =     13.518 s/op
    p(100.0000) =     13.518 s/op


# Run complete. Total time: 00:10:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.009 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot_11.0.4_1564741996557.json
{"wallclock_times": [651.536652692], "core_cycle_counts": [[815662890754], [542829222684], [607279935792], [420394930186]], "aperf_counts": [[814226870122], [542607115364], [607172374406], [420295470667]], "mperf_counts": [[814760747562], [542725594184], [607308830364], [420416920626]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 12:44:08: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-08-02 12:44:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:44:09: INFO] 396 executions left in scheduler queue
[2019-08-02 12:44:09: INFO] Executions until ETA known: 2312
[2019-08-02 12:44:09: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-08-02 12:44:09: INFO] Estimated completion (next execution): 2019-08-02 12:57:30 (0:13:21 from now)
[2019-08-02 12:44:09: INFO] Reboot in preparation for next execution
[2019-08-02 12:48:25: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 13:02:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.154 s/op
Iteration   2: 16.775 s/op
Iteration   3: 16.902 s/op
Iteration   4: 16.987 s/op
Iteration   5: 16.982 s/op
Iteration   6: 16.530 s/op
Iteration   7: 17.090 s/op
Iteration   8: 16.852 s/op
Iteration   9: 17.079 s/op
Iteration  10: 17.043 s/op
Iteration  11: 16.936 s/op
Iteration  12: 16.984 s/op
Iteration  13: 17.273 s/op
Iteration  14: 17.032 s/op
Iteration  15: 16.900 s/op
Iteration  16: 16.475 s/op
Iteration  17: 17.039 s/op
Iteration  18: 17.197 s/op
Iteration  19: 16.824 s/op
Iteration  20: 16.779 s/op
Iteration  21: 17.122 s/op
Iteration  22: 17.010 s/op
Iteration  23: 17.145 s/op
Iteration  24: 17.087 s/op
Iteration  25: 17.146 s/op
Iteration  26: 16.883 s/op
Iteration  27: 16.294 s/op
Iteration  28: 17.033 s/op
Iteration  29: 16.632 s/op
Iteration  30: 16.605 s/op
Iteration  31: 17.090 s/op
Iteration  32: 16.935 s/op
Iteration  33: 16.939 s/op
Iteration  34: 16.771 s/op
Iteration  35: 16.829 s/op
Iteration  36: 15.976 s/op
Iteration  37: 16.855 s/op
Iteration  38: 16.848 s/op
Iteration  39: 17.001 s/op
Iteration  40: 16.584 s/op
Iteration  41: 17.115 s/op
Iteration  42: 16.619 s/op
Iteration  43: 17.084 s/op
Iteration  44: 17.000 s/op
Iteration  45: 17.070 s/op
Iteration  46: 17.061 s/op
Iteration  47: 16.398 s/op
Iteration  48: 16.892 s/op
Iteration  49: 16.348 s/op
Iteration  50: 17.074 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.886 ?(99.9%) 0.130 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 4 
    [16.500, 16.750) = 5 
    [16.750, 17.000) = 19 
    [17.000, 17.250) = 20 
    [17.250, 17.500) = 1 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.976 s/op
     p(50.0000) =     16.960 s/op
     p(90.0000) =     17.143 s/op
     p(95.0000) =     17.173 s/op
     p(99.0000) =     17.273 s/op
     p(99.9000) =     17.273 s/op
     p(99.9900) =     17.273 s/op
     p(99.9990) =     17.273 s/op
     p(99.9999) =     17.273 s/op
    p(100.0000) =     17.273 s/op


# Run complete. Total time: 00:14:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.886 ? 0.130   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9-8u222-b10_1564742905584.json
{"wallclock_times": [845.660794051], "core_cycle_counts": [[598301344258], [713125891993], [960297244307], [731365290143]], "aperf_counts": [[595981793460], [712942433040], [960102656088], [731215367415]], "mperf_counts": [[595982279378], [712942401732], [960102612308], [731215354842]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:02:31: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-08-02 13:02:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:02:32: INFO] 395 executions left in scheduler queue
[2019-08-02 13:02:32: INFO] Executions until ETA known: 2293
[2019-08-02 13:02:32: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:02:32: INFO] Estimated completion (next execution): 2019-08-02 13:19:08 (0:16:35 from now)
[2019-08-02 13:02:32: INFO] Reboot in preparation for next execution
[2019-08-02 13:06:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:06:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:06:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:06:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:06:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:06:48: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:13:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.325 s/op
Iteration   2: 8.171 s/op
Iteration   3: 8.020 s/op
Iteration   4: 7.956 s/op
Iteration   5: 7.991 s/op
Iteration   6: 7.937 s/op
Iteration   7: 7.910 s/op
Iteration   8: 8.032 s/op
Iteration   9: 8.034 s/op
Iteration  10: 8.050 s/op
Iteration  11: 7.993 s/op
Iteration  12: 8.004 s/op
Iteration  13: 7.969 s/op
Iteration  14: 8.025 s/op
Iteration  15: 8.014 s/op
Iteration  16: 7.988 s/op
Iteration  17: 7.881 s/op
Iteration  18: 7.895 s/op
Iteration  19: 8.007 s/op
Iteration  20: 7.937 s/op
Iteration  21: 7.932 s/op
Iteration  22: 7.968 s/op
Iteration  23: 7.868 s/op
Iteration  24: 7.890 s/op
Iteration  25: 7.927 s/op
Iteration  26: 7.902 s/op
Iteration  27: 7.898 s/op
Iteration  28: 7.914 s/op
Iteration  29: 7.910 s/op
Iteration  30: 7.978 s/op
Iteration  31: 7.913 s/op
Iteration  32: 7.926 s/op
Iteration  33: 7.993 s/op
Iteration  34: 7.953 s/op
Iteration  35: 7.914 s/op
Iteration  36: 7.981 s/op
Iteration  37: 7.810 s/op
Iteration  38: 7.937 s/op
Iteration  39: 7.889 s/op
Iteration  40: 7.934 s/op
Iteration  41: 7.978 s/op
Iteration  42: 7.895 s/op
Iteration  43: 7.971 s/op
Iteration  44: 7.921 s/op
Iteration  45: 7.943 s/op
Iteration  46: 7.961 s/op
Iteration  47: 7.939 s/op
Iteration  48: 7.882 s/op
Iteration  49: 7.958 s/op
Iteration  50: 7.937 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.979 ?(99.9%) 0.100 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 40 
    [ 8.000,  8.250) = 9 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.810 s/op
     p(50.0000) =      7.941 s/op
     p(90.0000) =      8.031 s/op
     p(95.0000) =      8.104 s/op
     p(99.0000) =      9.325 s/op
     p(99.9000) =      9.325 s/op
     p(99.9900) =      9.325 s/op
     p(99.9990) =      9.325 s/op
     p(99.9999) =      9.325 s/op
    p(100.0000) =      9.325 s/op


# Run complete. Total time: 00:06:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.979 ? 0.100   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_12.0.1_1564744008656.json
{"wallclock_times": [400.632336336], "core_cycle_counts": [[340487847986], [322362024766], [373548013794], [315326513305]], "aperf_counts": [[339421582554], [322255883854], [373424993351], [315228782057]], "mperf_counts": [[339425088910], [322255858692], [373424971396], [315228768834]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:13:29: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:13:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:13:30: INFO] 394 executions left in scheduler queue
[2019-08-02 13:13:30: INFO] Executions until ETA known: 2287
[2019-08-02 13:13:30: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:13:30: INFO] Estimated completion (next execution): 2019-08-02 13:22:41 (0:09:11 from now)
[2019-08-02 13:13:30: INFO] Reboot in preparation for next execution
[2019-08-02 13:17:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:17:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:17:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:17:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:17:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:17:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:23:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.848 s/op
Iteration   2: 7.008 s/op
Iteration   3: 6.838 s/op
Iteration   4: 8.390 s/op
Iteration   5: 8.151 s/op
Iteration   6: 6.526 s/op
Iteration   7: 6.660 s/op
Iteration   8: 6.663 s/op
Iteration   9: 6.805 s/op
Iteration  10: 6.590 s/op
Iteration  11: 6.563 s/op
Iteration  12: 6.564 s/op
Iteration  13: 6.465 s/op
Iteration  14: 6.552 s/op
Iteration  15: 6.582 s/op
Iteration  16: 6.621 s/op
Iteration  17: 6.498 s/op
Iteration  18: 6.722 s/op
Iteration  19: 6.516 s/op
Iteration  20: 6.456 s/op
Iteration  21: 6.393 s/op
Iteration  22: 6.564 s/op
Iteration  23: 6.506 s/op
Iteration  24: 6.605 s/op
Iteration  25: 6.473 s/op
Iteration  26: 6.382 s/op
Iteration  27: 6.520 s/op
Iteration  28: 6.582 s/op
Iteration  29: 6.601 s/op
Iteration  30: 6.515 s/op
Iteration  31: 6.689 s/op
Iteration  32: 6.581 s/op
Iteration  33: 6.499 s/op
Iteration  34: 6.492 s/op
Iteration  35: 6.511 s/op
Iteration  36: 6.545 s/op
Iteration  37: 6.614 s/op
Iteration  38: 6.501 s/op
Iteration  39: 6.393 s/op
Iteration  40: 6.494 s/op
Iteration  41: 6.480 s/op
Iteration  42: 6.468 s/op
Iteration  43: 6.494 s/op
Iteration  44: 6.476 s/op
Iteration  45: 6.543 s/op
Iteration  46: 6.600 s/op
Iteration  47: 6.512 s/op
Iteration  48: 6.493 s/op
Iteration  49: 6.481 s/op
Iteration  50: 6.537 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.651 ?(99.9%) 0.197 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 16 
    [6.500, 6.750) = 28 
    [6.750, 7.000) = 2 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 1 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.382 s/op
     p(50.0000) =      6.540 s/op
     p(90.0000) =      6.835 s/op
     p(95.0000) =      7.984 s/op
     p(99.0000) =      8.390 s/op
     p(99.9000) =      8.390 s/op
     p(99.9900) =      8.390 s/op
     p(99.9990) =      8.390 s/op
     p(99.9999) =      8.390 s/op
    p(100.0000) =      8.390 s/op


# Run complete. Total time: 00:05:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.651 ? 0.197   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_12.0.1_1564744660343.json
{"wallclock_times": [334.47722134], "core_cycle_counts": [[360111528988], [240022069290], [334997456929], [263735124167]], "aperf_counts": [[359328342196], [239881699978], [334831455506], [263639759996]], "mperf_counts": [[359338830496], [239881661864], [334833315134], [263639743864]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:23:14: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:23:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:23:15: INFO] 393 executions left in scheduler queue
[2019-08-02 13:23:15: INFO] Executions until ETA known: 2281
[2019-08-02 13:23:15: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:23:15: INFO] Estimated completion (next execution): 2019-08-02 13:31:20 (0:08:04 from now)
[2019-08-02 13:23:15: INFO] Reboot in preparation for next execution
[2019-08-02 13:27:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:27:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:27:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:27:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:27:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:27:38: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:32:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.184 s/op
Iteration   2: 6.166 s/op
Iteration   3: 5.452 s/op
Iteration   4: 5.463 s/op
Iteration   5: 5.473 s/op
Iteration   6: 5.499 s/op
Iteration   7: 5.449 s/op
Iteration   8: 5.351 s/op
Iteration   9: 5.299 s/op
Iteration  10: 5.278 s/op
Iteration  11: 5.286 s/op
Iteration  12: 5.325 s/op
Iteration  13: 5.220 s/op
Iteration  14: 5.339 s/op
Iteration  15: 5.305 s/op
Iteration  16: 5.289 s/op
Iteration  17: 5.327 s/op
Iteration  18: 5.293 s/op
Iteration  19: 5.259 s/op
Iteration  20: 5.328 s/op
Iteration  21: 5.325 s/op
Iteration  22: 5.312 s/op
Iteration  23: 5.330 s/op
Iteration  24: 5.305 s/op
Iteration  25: 5.362 s/op
Iteration  26: 5.293 s/op
Iteration  27: 5.341 s/op
Iteration  28: 5.290 s/op
Iteration  29: 5.309 s/op
Iteration  30: 5.296 s/op
Iteration  31: 5.320 s/op
Iteration  32: 5.331 s/op
Iteration  33: 5.306 s/op
Iteration  34: 5.310 s/op
Iteration  35: 5.309 s/op
Iteration  36: 5.327 s/op
Iteration  37: 5.292 s/op
Iteration  38: 5.327 s/op
Iteration  39: 5.299 s/op
Iteration  40: 5.309 s/op
Iteration  41: 5.282 s/op
Iteration  42: 5.230 s/op
Iteration  43: 5.283 s/op
Iteration  44: 5.289 s/op
Iteration  45: 5.275 s/op
Iteration  46: 5.277 s/op
Iteration  47: 5.265 s/op
Iteration  48: 5.248 s/op
Iteration  49: 5.250 s/op
Iteration  50: 5.286 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.371 ?(99.9%) 0.145 s/op

  Histogram, s/op:
    [5.000, 5.250) = 3 
    [5.250, 5.500) = 45 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.220 s/op
     p(50.0000) =      5.307 s/op
     p(90.0000) =      5.462 s/op
     p(95.0000) =      5.799 s/op
     p(99.0000) =      7.184 s/op
     p(99.9000) =      7.184 s/op
     p(99.9900) =      7.184 s/op
     p(99.9990) =      7.184 s/op
     p(99.9999) =      7.184 s/op
    p(100.0000) =      7.184 s/op


# Run complete. Total time: 00:04:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.371 ? 0.145   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_12.0.1_1564745257858.json
{"wallclock_times": [270.510470952], "core_cycle_counts": [[251416220855], [245312329769], [319322337610], [246457448190]], "aperf_counts": [[250586470891], [245171988917], [319178023907], [246345156147]], "mperf_counts": [[250592954346], [245173677984], [319178772464], [246345264404]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:32:08: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:32:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:32:09: INFO] 392 executions left in scheduler queue
[2019-08-02 13:32:09: INFO] Executions until ETA known: 2276
[2019-08-02 13:32:09: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:32:09: INFO] Estimated completion (next execution): 2019-08-02 13:39:10 (0:07:01 from now)
[2019-08-02 13:32:09: INFO] Reboot in preparation for next execution
[2019-08-02 13:36:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:36:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:36:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:36:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:36:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:36:19: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:53:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 21.906 s/op
Iteration   2: 21.098 s/op
Iteration   3: 21.081 s/op
Iteration   4: 21.047 s/op
Iteration   5: 21.049 s/op
Iteration   6: 20.963 s/op
Iteration   7: 20.990 s/op
Iteration   8: 21.116 s/op
Iteration   9: 21.118 s/op
Iteration  10: 21.032 s/op
Iteration  11: 21.048 s/op
Iteration  12: 21.668 s/op
Iteration  13: 21.001 s/op
Iteration  14: 20.981 s/op
Iteration  15: 21.115 s/op
Iteration  16: 20.999 s/op
Iteration  17: 21.063 s/op
Iteration  18: 20.987 s/op
Iteration  19: 21.068 s/op
Iteration  20: 20.983 s/op
Iteration  21: 21.029 s/op
Iteration  22: 20.967 s/op
Iteration  23: 21.027 s/op
Iteration  24: 20.984 s/op
Iteration  25: 21.047 s/op
Iteration  26: 21.027 s/op
Iteration  27: 21.024 s/op
Iteration  28: 21.041 s/op
Iteration  29: 21.104 s/op
Iteration  30: 21.075 s/op
Iteration  31: 21.045 s/op
Iteration  32: 21.003 s/op
Iteration  33: 21.078 s/op
Iteration  34: 21.043 s/op
Iteration  35: 20.938 s/op
Iteration  36: 21.083 s/op
Iteration  37: 20.928 s/op
Iteration  38: 20.983 s/op
Iteration  39: 20.965 s/op
Iteration  40: 21.004 s/op
Iteration  41: 21.149 s/op
Iteration  42: 21.101 s/op
Iteration  43: 20.949 s/op
Iteration  44: 21.062 s/op
Iteration  45: 21.018 s/op
Iteration  46: 21.097 s/op
Iteration  47: 20.996 s/op
Iteration  48: 21.038 s/op
Iteration  49: 20.930 s/op
Iteration  50: 21.034 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     21.062 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [20.900, 21.000) = 15 
    [21.000, 21.100) = 27 
    [21.100, 21.200) = 6 
    [21.200, 21.300) = 0 
    [21.300, 21.400) = 0 
    [21.400, 21.500) = 0 
    [21.500, 21.600) = 0 
    [21.600, 21.700) = 1 
    [21.700, 21.800) = 0 
    [21.800, 21.900) = 0 

  Percentiles, s/op:
      p(0.0000) =     20.928 s/op
     p(50.0000) =     21.036 s/op
     p(90.0000) =     21.116 s/op
     p(95.0000) =     21.383 s/op
     p(99.0000) =     21.906 s/op
     p(99.9000) =     21.906 s/op
     p(99.9900) =     21.906 s/op
     p(99.9990) =     21.906 s/op
     p(99.9999) =     21.906 s/op
    p(100.0000) =     21.906 s/op


# Run complete. Total time: 00:17:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  21.062 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_12.0.1_1564745778851.json
{"wallclock_times": [1054.755555649], "core_cycle_counts": [[907884003357], [934367504059], [663916224716], [900672033232]], "aperf_counts": [[905268040592], [934091193777], [663695387271], [900589274447]], "mperf_counts": [[905273421010], [934093078490], [663695435948], [900589412668]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:53:53: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:53:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:53:54: INFO] 391 executions left in scheduler queue
[2019-08-02 13:53:54: INFO] Executions until ETA known: 2263
[2019-08-02 13:53:54: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 13:53:54: INFO] Estimated completion (next execution): 2019-08-02 14:13:59 (0:20:05 from now)
[2019-08-02 13:53:54: INFO] Reboot in preparation for next execution
[2019-08-02 13:58:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:03:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.778 s/op
Iteration   2: 7.553 s/op
Iteration   3: 6.743 s/op
Iteration   4: 6.901 s/op
Iteration   5: 6.773 s/op
Iteration   6: 6.720 s/op
Iteration   7: 6.658 s/op
Iteration   8: 6.719 s/op
Iteration   9: 6.731 s/op
Iteration  10: 6.770 s/op
Iteration  11: 6.737 s/op
Iteration  12: 6.717 s/op
Iteration  13: 6.743 s/op
Iteration  14: 6.736 s/op
Iteration  15: 6.581 s/op
Iteration  16: 6.705 s/op
Iteration  17: 6.609 s/op
Iteration  18: 6.751 s/op
Iteration  19: 6.691 s/op
Iteration  20: 6.593 s/op
Iteration  21: 6.694 s/op
Iteration  22: 6.651 s/op
Iteration  23: 6.777 s/op
Iteration  24: 6.649 s/op
Iteration  25: 6.763 s/op
Iteration  26: 6.666 s/op
Iteration  27: 6.645 s/op
Iteration  28: 6.768 s/op
Iteration  29: 6.588 s/op
Iteration  30: 6.777 s/op
Iteration  31: 6.671 s/op
Iteration  32: 6.586 s/op
Iteration  33: 6.746 s/op
Iteration  34: 6.681 s/op
Iteration  35: 6.761 s/op
Iteration  36: 6.658 s/op
Iteration  37: 6.683 s/op
Iteration  38: 6.687 s/op
Iteration  39: 6.613 s/op
Iteration  40: 6.701 s/op
Iteration  41: 6.624 s/op
Iteration  42: 6.722 s/op
Iteration  43: 6.709 s/op
Iteration  44: 6.662 s/op
Iteration  45: 6.738 s/op
Iteration  46: 6.638 s/op
Iteration  47: 6.711 s/op
Iteration  48: 6.671 s/op
Iteration  49: 6.772 s/op
Iteration  50: 6.628 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.757 ?(99.9%) 0.159 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 38 
    [6.750, 7.000) = 10 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 1 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.581 s/op
     p(50.0000) =      6.707 s/op
     p(90.0000) =      6.777 s/op
     p(95.0000) =      7.194 s/op
     p(99.0000) =      8.778 s/op
     p(99.9000) =      8.778 s/op
     p(99.9900) =      8.778 s/op
     p(99.9990) =      8.778 s/op
     p(99.9999) =      8.778 s/op
    p(100.0000) =      8.778 s/op


# Run complete. Total time: 00:05:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.757 ? 0.159   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9-8u222-b10_1564747083589.json
{"wallclock_times": [339.30640214199997], "core_cycle_counts": [[302572897368], [377272616113], [362447626993], [147809696355]], "aperf_counts": [[301673848135], [377130024292], [362380656050], [147733286301]], "mperf_counts": [[301676033798], [377133570690], [362381284820], [147733314726]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:03:42: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:03:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:03:43: INFO] 390 executions left in scheduler queue
[2019-08-02 14:03:43: INFO] Executions until ETA known: 2258
[2019-08-02 14:03:43: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:03:43: INFO] Estimated completion (next execution): 2019-08-02 14:11:53 (0:08:09 from now)
[2019-08-02 14:03:43: INFO] Reboot in preparation for next execution
[2019-08-02 14:07:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:15:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.882 s/op
Iteration   2: 10.322 s/op
Iteration   3: 10.381 s/op
Iteration   4: 10.419 s/op
Iteration   5: 10.330 s/op
Iteration   6: 10.330 s/op
Iteration   7: 10.377 s/op
Iteration   8: 10.248 s/op
Iteration   9: 10.295 s/op
Iteration  10: 10.299 s/op
Iteration  11: 10.383 s/op
Iteration  12: 10.313 s/op
Iteration  13: 10.265 s/op
Iteration  14: 10.349 s/op
Iteration  15: 10.307 s/op
Iteration  16: 10.398 s/op
Iteration  17: 10.364 s/op
Iteration  18: 10.328 s/op
Iteration  19: 10.340 s/op
Iteration  20: 10.284 s/op
Iteration  21: 10.300 s/op
Iteration  22: 10.283 s/op
Iteration  23: 10.283 s/op
Iteration  24: 10.288 s/op
Iteration  25: 10.304 s/op
Iteration  26: 10.298 s/op
Iteration  27: 10.359 s/op
Iteration  28: 10.267 s/op
Iteration  29: 10.292 s/op
Iteration  30: 10.260 s/op
Iteration  31: 10.328 s/op
Iteration  32: 10.375 s/op
Iteration  33: 10.397 s/op
Iteration  34: 10.366 s/op
Iteration  35: 10.384 s/op
Iteration  36: 10.319 s/op
Iteration  37: 10.301 s/op
Iteration  38: 10.370 s/op
Iteration  39: 10.296 s/op
Iteration  40: 10.333 s/op
Iteration  41: 10.204 s/op
Iteration  42: 10.357 s/op
Iteration  43: 10.297 s/op
Iteration  44: 10.369 s/op
Iteration  45: 10.325 s/op
Iteration  46: 10.293 s/op
Iteration  47: 10.347 s/op
Iteration  48: 10.372 s/op
Iteration  49: 10.291 s/op
Iteration  50: 10.325 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.356 ?(99.9%) 0.111 s/op

  Histogram, s/op:
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 2 
    [10.250, 10.375) = 40 
    [10.375, 10.500) = 7 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 
    [10.875, 11.000) = 0 
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.204 s/op
     p(50.0000) =     10.325 s/op
     p(90.0000) =     10.384 s/op
     p(95.0000) =     10.407 s/op
     p(99.0000) =     11.882 s/op
     p(99.9000) =     11.882 s/op
     p(99.9900) =     11.882 s/op
     p(99.9990) =     11.882 s/op
     p(99.9999) =     11.882 s/op
    p(100.0000) =     11.882 s/op


# Run complete. Total time: 00:08:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.356 ? 0.111   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9-8u222-b10_1564747631321.json
{"wallclock_times": [518.959020035], "core_cycle_counts": [[625684700058], [224917930691], [434763896883], [452850072011]], "aperf_counts": [[624567554368], [224753092328], [434619123160], [452767647600]], "mperf_counts": [[624568384866], [224757042690], [434620016068], [452768508078]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:15:50: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:15:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:15:51: INFO] 389 executions left in scheduler queue
[2019-08-02 14:15:51: INFO] Executions until ETA known: 2256
[2019-08-02 14:15:51: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:15:51: INFO] Estimated completion (next execution): 2019-08-02 14:27:00 (0:11:09 from now)
[2019-08-02 14:15:51: INFO] Reboot in preparation for next execution
[2019-08-02 14:20:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:25:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.363 s/op
Iteration   2: 6.410 s/op
Iteration   3: 6.203 s/op
Iteration   4: 6.204 s/op
Iteration   5: 6.332 s/op
Iteration   6: 6.080 s/op
Iteration   7: 6.101 s/op
Iteration   8: 6.035 s/op
Iteration   9: 6.004 s/op
Iteration  10: 5.943 s/op
Iteration  11: 5.981 s/op
Iteration  12: 5.956 s/op
Iteration  13: 5.970 s/op
Iteration  14: 5.995 s/op
Iteration  15: 5.967 s/op
Iteration  16: 5.968 s/op
Iteration  17: 5.970 s/op
Iteration  18: 5.970 s/op
Iteration  19: 5.937 s/op
Iteration  20: 5.969 s/op
Iteration  21: 5.961 s/op
Iteration  22: 5.958 s/op
Iteration  23: 5.951 s/op
Iteration  24: 5.940 s/op
Iteration  25: 5.947 s/op
Iteration  26: 5.952 s/op
Iteration  27: 5.940 s/op
Iteration  28: 5.962 s/op
Iteration  29: 6.021 s/op
Iteration  30: 6.001 s/op
Iteration  31: 5.999 s/op
Iteration  32: 5.893 s/op
Iteration  33: 5.905 s/op
Iteration  34: 5.852 s/op
Iteration  35: 5.952 s/op
Iteration  36: 6.031 s/op
Iteration  37: 5.979 s/op
Iteration  38: 5.992 s/op
Iteration  39: 5.968 s/op
Iteration  40: 5.957 s/op
Iteration  41: 5.948 s/op
Iteration  42: 5.985 s/op
Iteration  43: 5.967 s/op
Iteration  44: 5.985 s/op
Iteration  45: 5.942 s/op
Iteration  46: 5.975 s/op
Iteration  47: 5.959 s/op
Iteration  48: 5.945 s/op
Iteration  49: 5.947 s/op
Iteration  50: 5.990 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.023 ?(99.9%) 0.107 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 38 
    [6.000, 6.250) = 9 
    [6.250, 6.500) = 2 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.852 s/op
     p(50.0000) =      5.969 s/op
     p(90.0000) =      6.193 s/op
     p(95.0000) =      6.367 s/op
     p(99.0000) =      7.363 s/op
     p(99.9000) =      7.363 s/op
     p(99.9900) =      7.363 s/op
     p(99.9990) =      7.363 s/op
     p(99.9999) =      7.363 s/op
    p(100.0000) =      7.363 s/op


# Run complete. Total time: 00:05:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.023 ? 0.107   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9-8u222-b10_1564748400385.json
{"wallclock_times": [302.703238158], "core_cycle_counts": [[237928288141], [352512402579], [194667881727], [333363473942]], "aperf_counts": [[237018371523], [352413205153], [194526212790], [333258028302]], "mperf_counts": [[237020990724], [352415543322], [194526876706], [333258709602]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:25:03: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:25:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:25:04: INFO] 388 executions left in scheduler queue
[2019-08-02 14:25:04: INFO] Executions until ETA known: 2246
[2019-08-02 14:25:04: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:25:04: INFO] Estimated completion (next execution): 2019-08-02 14:32:37 (0:07:32 from now)
[2019-08-02 14:25:04: INFO] Reboot in preparation for next execution
[2019-08-02 14:29:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:38:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.671 s/op
Iteration   2: 11.199 s/op
Iteration   3: 10.877 s/op
Iteration   4: 11.049 s/op
Iteration   5: 10.919 s/op
Iteration   6: 11.430 s/op
Iteration   7: 11.421 s/op
Iteration   8: 10.750 s/op
Iteration   9: 10.977 s/op
Iteration  10: 10.876 s/op
Iteration  11: 11.506 s/op
Iteration  12: 11.502 s/op
Iteration  13: 10.702 s/op
Iteration  14: 11.501 s/op
Iteration  15: 10.678 s/op
Iteration  16: 11.636 s/op
Iteration  17: 11.445 s/op
Iteration  18: 10.667 s/op
Iteration  19: 10.562 s/op
Iteration  20: 11.348 s/op
Iteration  21: 11.400 s/op
Iteration  22: 10.590 s/op
Iteration  23: 10.605 s/op
Iteration  24: 10.560 s/op
Iteration  25: 10.542 s/op
Iteration  26: 11.451 s/op
Iteration  27: 10.517 s/op
Iteration  28: 10.558 s/op
Iteration  29: 11.289 s/op
Iteration  30: 10.687 s/op
Iteration  31: 10.503 s/op
Iteration  32: 10.697 s/op
Iteration  33: 10.610 s/op
Iteration  34: 10.635 s/op
Iteration  35: 10.696 s/op
Iteration  36: 10.635 s/op
Iteration  37: 10.603 s/op
Iteration  38: 10.703 s/op
Iteration  39: 10.699 s/op
Iteration  40: 10.639 s/op
Iteration  41: 10.619 s/op
Iteration  42: 10.680 s/op
Iteration  43: 10.713 s/op
Iteration  44: 11.327 s/op
Iteration  45: 10.746 s/op
Iteration  46: 11.372 s/op
Iteration  47: 10.466 s/op
Iteration  48: 11.371 s/op
Iteration  49: 10.548 s/op
Iteration  50: 11.225 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.948 ?(99.9%) 0.218 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 1 
    [10.500, 10.750) = 27 
    [10.750, 11.000) = 4 
    [11.000, 11.250) = 3 
    [11.250, 11.500) = 10 
    [11.500, 11.750) = 4 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.466 s/op
     p(50.0000) =     10.708 s/op
     p(90.0000) =     11.496 s/op
     p(95.0000) =     11.565 s/op
     p(99.0000) =     12.671 s/op
     p(99.9000) =     12.671 s/op
     p(99.9900) =     12.671 s/op
     p(99.9990) =     12.671 s/op
     p(99.9999) =     12.671 s/op
    p(100.0000) =     12.671 s/op


# Run complete. Total time: 00:09:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.948 ? 0.218   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9-8u222-b10_1564748951832.json
{"wallclock_times": [548.711534719], "core_cycle_counts": [[554310252447], [386334244357], [428562850554], [424656143047]], "aperf_counts": [[552996558419], [386216628902], [428393610989], [424543441518]], "mperf_counts": [[552999232778], [386216592492], [428393916596], [424546687924]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:38:20: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:38:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:38:21: INFO] 387 executions left in scheduler queue
[2019-08-02 14:38:21: INFO] Executions until ETA known: 2206
[2019-08-02 14:38:21: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-08-02 14:38:21: INFO] Estimated completion (next execution): 2019-08-02 14:50:00 (0:11:39 from now)
[2019-08-02 14:38:21: INFO] Reboot in preparation for next execution
[2019-08-02 14:49:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.934 s/op
Iteration   2: 7.805 s/op
Iteration   3: 7.838 s/op
Iteration   4: 7.805 s/op
Iteration   5: 7.801 s/op
Iteration   6: 7.800 s/op
Iteration   7: 7.790 s/op
Iteration   8: 7.802 s/op
Iteration   9: 7.790 s/op
Iteration  10: 7.794 s/op
Iteration  11: 7.789 s/op
Iteration  12: 7.801 s/op
Iteration  13: 7.804 s/op
Iteration  14: 7.796 s/op
Iteration  15: 7.806 s/op
Iteration  16: 7.795 s/op
Iteration  17: 7.790 s/op
Iteration  18: 7.790 s/op
Iteration  19: 7.793 s/op
Iteration  20: 7.791 s/op
Iteration  21: 7.794 s/op
Iteration  22: 7.809 s/op
Iteration  23: 7.808 s/op
Iteration  24: 7.792 s/op
Iteration  25: 7.793 s/op
Iteration  26: 7.793 s/op
Iteration  27: 7.785 s/op
Iteration  28: 7.800 s/op
Iteration  29: 7.809 s/op
Iteration  30: 7.791 s/op
Iteration  31: 7.797 s/op
Iteration  32: 7.798 s/op
Iteration  33: 7.788 s/op
Iteration  34: 7.798 s/op
Iteration  35: 7.790 s/op
Iteration  36: 7.789 s/op
Iteration  37: 7.783 s/op
Iteration  38: 7.789 s/op
Iteration  39: 7.798 s/op
Iteration  40: 7.795 s/op
Iteration  41: 7.788 s/op
Iteration  42: 7.799 s/op
Iteration  43: 7.794 s/op
Iteration  44: 7.802 s/op
Iteration  45: 7.792 s/op
Iteration  46: 7.799 s/op
Iteration  47: 7.783 s/op
Iteration  48: 7.794 s/op
Iteration  49: 7.794 s/op
Iteration  50: 7.789 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      7.799 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [7.700, 7.725) = 0 
    [7.725, 7.750) = 0 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 36 
    [7.800, 7.825) = 12 
    [7.825, 7.850) = 1 
    [7.850, 7.875) = 0 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 1 
    [7.950, 7.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.783 s/op
     p(50.0000) =      7.794 s/op
     p(90.0000) =      7.808 s/op
     p(95.0000) =      7.822 s/op
     p(99.0000) =      7.934 s/op
     p(99.9000) =      7.934 s/op
     p(99.9900) =      7.934 s/op
     p(99.9990) =      7.934 s/op
     p(99.9999) =      7.934 s/op
    p(100.0000) =      7.934 s/op


# Run complete. Total time: 00:06:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  7.799 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_graalvm-ce-19.1.1_1564749752081.json
{"wallclock_times": [390.823583525], "core_cycle_counts": [[318412670468], [282750225822], [399581674121], [258552642584]], "aperf_counts": [[317495069136], [282657524869], [399539041558], [258509434485]], "mperf_counts": [[317512929334], [282658453012], [399547169072], [258528154708]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 14:49:02: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-08-02 14:49:03: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:49:03: INFO] 386 executions left in scheduler queue
[2019-08-02 14:49:03: INFO] Executions until ETA known: 2186
[2019-08-02 14:49:03: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:49:03: INFO] Estimated completion (next execution): 2019-08-02 14:58:04 (0:09:01 from now)
[2019-08-02 14:49:03: INFO] Reboot in preparation for next execution
[2019-08-02 14:53:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.319 s/op
Iteration   2: 0.857 s/op
Iteration   3: 0.834 s/op
Iteration   4: 0.921 s/op
Iteration   5: 0.832 s/op
Iteration   6: 0.833 s/op
Iteration   7: 0.832 s/op
Iteration   8: 0.834 s/op
Iteration   9: 0.835 s/op
Iteration  10: 0.835 s/op
Iteration  11: 0.832 s/op
Iteration  12: 0.838 s/op
Iteration  13: 0.833 s/op
Iteration  14: 0.836 s/op
Iteration  15: 0.830 s/op
Iteration  16: 0.837 s/op
Iteration  17: 0.834 s/op
Iteration  18: 0.835 s/op
Iteration  19: 0.829 s/op
Iteration  20: 0.833 s/op
Iteration  21: 0.834 s/op
Iteration  22: 0.834 s/op
Iteration  23: 0.831 s/op
Iteration  24: 0.833 s/op
Iteration  25: 0.832 s/op
Iteration  26: 0.834 s/op
Iteration  27: 0.833 s/op
Iteration  28: 0.833 s/op
Iteration  29: 0.831 s/op
Iteration  30: 0.832 s/op
Iteration  31: 0.832 s/op
Iteration  32: 0.838 s/op
Iteration  33: 0.831 s/op
Iteration  34: 0.833 s/op
Iteration  35: 0.834 s/op
Iteration  36: 0.830 s/op
Iteration  37: 0.835 s/op
Iteration  38: 0.831 s/op
Iteration  39: 0.827 s/op
Iteration  40: 0.836 s/op
Iteration  41: 0.845 s/op
Iteration  42: 0.842 s/op
Iteration  43: 0.835 s/op
Iteration  44: 0.837 s/op
Iteration  45: 0.834 s/op
Iteration  46: 0.831 s/op
Iteration  47: 0.826 s/op
Iteration  48: 0.830 s/op
Iteration  49: 0.832 s/op
Iteration  50: 0.829 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      0.845 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [0.800, 0.850) = 47 
    [0.850, 0.900) = 1 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.826 s/op
     p(50.0000) =      0.833 s/op
     p(90.0000) =      0.841 s/op
     p(95.0000) =      0.886 s/op
     p(99.0000) =      1.319 s/op
     p(99.9000) =      1.319 s/op
     p(99.9900) =      1.319 s/op
     p(99.9990) =      1.319 s/op
     p(99.9999) =      1.319 s/op
    p(100.0000) =      1.319 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.845 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ee-19.1.1_1564750394130.json
{"wallclock_times": [43.18219185500001], "core_cycle_counts": [[34811879426], [43661498676], [23199214818], [47569060478]], "aperf_counts": [[34644939681], [43638434931], [23172992497], [47552696596]], "mperf_counts": [[34668171322], [43644004046], [23173815644], [47559256364]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 14:53:57: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:53:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:53:58: INFO] 385 executions left in scheduler queue
[2019-08-02 14:53:58: INFO] Executions until ETA known: 2179
[2019-08-02 14:53:58: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:53:58: INFO] Estimated completion (next execution): 2019-08-02 14:57:11 (0:03:13 from now)
[2019-08-02 14:53:58: INFO] Reboot in preparation for next execution
[2019-08-02 14:59:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.773 s/op
Iteration   2: 1.462 s/op
Iteration   3: 1.529 s/op
Iteration   4: 1.419 s/op
Iteration   5: 1.418 s/op
Iteration   6: 1.417 s/op
Iteration   7: 1.418 s/op
Iteration   8: 1.417 s/op
Iteration   9: 1.419 s/op
Iteration  10: 1.416 s/op
Iteration  11: 1.417 s/op
Iteration  12: 1.419 s/op
Iteration  13: 1.417 s/op
Iteration  14: 1.418 s/op
Iteration  15: 1.418 s/op
Iteration  16: 1.419 s/op
Iteration  17: 1.417 s/op
Iteration  18: 1.420 s/op
Iteration  19: 1.420 s/op
Iteration  20: 1.418 s/op
Iteration  21: 1.417 s/op
Iteration  22: 1.417 s/op
Iteration  23: 1.415 s/op
Iteration  24: 1.415 s/op
Iteration  25: 1.416 s/op
Iteration  26: 1.414 s/op
Iteration  27: 1.417 s/op
Iteration  28: 1.416 s/op
Iteration  29: 1.413 s/op
Iteration  30: 1.417 s/op
Iteration  31: 1.416 s/op
Iteration  32: 1.417 s/op
Iteration  33: 1.416 s/op
Iteration  34: 1.416 s/op
Iteration  35: 1.417 s/op
Iteration  36: 1.416 s/op
Iteration  37: 1.417 s/op
Iteration  38: 1.418 s/op
Iteration  39: 1.420 s/op
Iteration  40: 1.419 s/op
Iteration  41: 1.421 s/op
Iteration  42: 1.420 s/op
Iteration  43: 1.418 s/op
Iteration  44: 1.419 s/op
Iteration  45: 1.414 s/op
Iteration  46: 1.414 s/op
Iteration  47: 1.413 s/op
Iteration  48: 1.414 s/op
Iteration  49: 1.416 s/op
Iteration  50: 1.415 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.427 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.400, 1.425) = 47 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 1 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 1 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.413 s/op
     p(50.0000) =      1.417 s/op
     p(90.0000) =      1.420 s/op
     p(95.0000) =      1.492 s/op
     p(99.0000) =      1.773 s/op
     p(99.9000) =      1.773 s/op
     p(99.9900) =      1.773 s/op
     p(99.9990) =      1.773 s/op
     p(99.9999) =      1.773 s/op
    p(100.0000) =      1.773 s/op


# Run complete. Total time: 00:01:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.427 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ee-19.1.1_1564750686319.json
{"wallclock_times": [72.211745949], "core_cycle_counts": [[63898373652], [37519264965], [44586475040], [91237875921]], "aperf_counts": [[63725032531], [37491109275], [44571886198], [91225964859]], "mperf_counts": [[63750507664], [37494146568], [44572212002], [91229759212]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 14:59:18: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:59:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:59:19: INFO] 384 executions left in scheduler queue
[2019-08-02 14:59:19: INFO] Executions until ETA known: 2140
[2019-08-02 14:59:19: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-08-02 14:59:19: INFO] Estimated completion (next execution): 2019-08-02 15:03:01 (0:03:42 from now)
[2019-08-02 14:59:19: INFO] Reboot in preparation for next execution
[2019-08-02 15:03:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 15:03:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 15:03:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 15:03:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 15:03:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 15:15:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.641 s/op
Iteration   2: 14.654 s/op
Iteration   3: 14.821 s/op
Iteration   4: 14.500 s/op
Iteration   5: 14.521 s/op
Iteration   6: 14.578 s/op
Iteration   7: 14.523 s/op
Iteration   8: 14.416 s/op
Iteration   9: 14.452 s/op
Iteration  10: 14.421 s/op
Iteration  11: 14.595 s/op
Iteration  12: 14.374 s/op
Iteration  13: 14.495 s/op
Iteration  14: 14.518 s/op
Iteration  15: 14.433 s/op
Iteration  16: 14.440 s/op
Iteration  17: 14.457 s/op
Iteration  18: 14.602 s/op
Iteration  19: 14.454 s/op
Iteration  20: 14.571 s/op
Iteration  21: 14.394 s/op
Iteration  22: 14.512 s/op
Iteration  23: 14.551 s/op
Iteration  24: 14.512 s/op
Iteration  25: 14.416 s/op
Iteration  26: 14.516 s/op
Iteration  27: 14.429 s/op
Iteration  28: 14.621 s/op
Iteration  29: 14.508 s/op
Iteration  30: 14.420 s/op
Iteration  31: 14.512 s/op
Iteration  32: 14.450 s/op
Iteration  33: 14.449 s/op
Iteration  34: 14.617 s/op
Iteration  35: 14.454 s/op
Iteration  36: 14.419 s/op
Iteration  37: 14.519 s/op
Iteration  38: 14.467 s/op
Iteration  39: 14.560 s/op
Iteration  40: 14.452 s/op
Iteration  41: 14.452 s/op
Iteration  42: 14.507 s/op
Iteration  43: 14.591 s/op
Iteration  44: 14.454 s/op
Iteration  45: 14.525 s/op
Iteration  46: 14.496 s/op
Iteration  47: 14.429 s/op
Iteration  48: 14.576 s/op
Iteration  49: 14.446 s/op
Iteration  50: 14.524 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     14.505 ?(99.9%) 0.041 s/op

  Histogram, s/op:
    [14.300, 14.350) = 0 
    [14.350, 14.400) = 2 
    [14.400, 14.450) = 12 
    [14.450, 14.500) = 11 
    [14.500, 14.550) = 12 
    [14.550, 14.600) = 7 
    [14.600, 14.650) = 4 
    [14.650, 14.700) = 1 
    [14.700, 14.750) = 0 
    [14.750, 14.800) = 0 
    [14.800, 14.850) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.374 s/op
     p(50.0000) =     14.503 s/op
     p(90.0000) =     14.616 s/op
     p(95.0000) =     14.647 s/op
     p(99.0000) =     14.821 s/op
     p(99.9000) =     14.821 s/op
     p(99.9900) =     14.821 s/op
     p(99.9990) =     14.821 s/op
     p(99.9999) =     14.821 s/op
    p(100.0000) =     14.821 s/op


# Run complete. Total time: 00:12:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.505 ? 0.041   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot_12.0.2_1564751011141.json
{"wallclock_times": [726.293911302], "core_cycle_counts": [[546298895597], [429682064027], [796464953958], [769691641082]], "aperf_counts": [[544134539996], [429431675235], [796148431405], [769385036265]], "mperf_counts": [[554765039482], [437169679430], [812779923858], [785486567574]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 15:15:37: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-08-02 15:15:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:15:38: INFO] 383 executions left in scheduler queue
[2019-08-02 15:15:38: INFO] Executions until ETA known: 2134
[2019-08-02 15:15:38: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-08-02 15:15:38: INFO] Estimated completion (next execution): 2019-08-02 15:30:14 (0:14:36 from now)
[2019-08-02 15:15:38: INFO] Reboot in preparation for next execution
[2019-08-02 15:20:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 15:20:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 15:20:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 15:20:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 15:20:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 15:30:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.513 s/op
Iteration   2: 13.059 s/op
Iteration   3: 13.325 s/op
Iteration   4: 13.109 s/op
Iteration   5: 13.140 s/op
Iteration   6: 13.105 s/op
Iteration   7: 13.108 s/op
Iteration   8: 13.162 s/op
Iteration   9: 13.014 s/op
Iteration  10: 13.076 s/op
Iteration  11: 13.053 s/op
Iteration  12: 13.069 s/op
Iteration  13: 13.193 s/op
Iteration  14: 12.970 s/op
Iteration  15: 13.154 s/op
Iteration  16: 13.057 s/op
Iteration  17: 13.085 s/op
Iteration  18: 13.056 s/op
Iteration  19: 13.088 s/op
Iteration  20: 13.167 s/op
Iteration  21: 13.095 s/op
Iteration  22: 12.990 s/op
Iteration  23: 13.023 s/op
Iteration  24: 13.039 s/op
Iteration  25: 13.079 s/op
Iteration  26: 13.190 s/op
Iteration  27: 13.083 s/op
Iteration  28: 13.107 s/op
Iteration  29: 13.112 s/op
Iteration  30: 13.080 s/op
Iteration  31: 13.098 s/op
Iteration  32: 13.036 s/op
Iteration  33: 13.188 s/op
Iteration  34: 13.021 s/op
Iteration  35: 13.249 s/op
Iteration  36: 12.960 s/op
Iteration  37: 13.235 s/op
Iteration  38: 13.027 s/op
Iteration  39: 13.052 s/op
Iteration  40: 13.179 s/op
Iteration  41: 13.057 s/op
Iteration  42: 13.099 s/op
Iteration  43: 13.091 s/op
Iteration  44: 13.042 s/op
Iteration  45: 13.093 s/op
Iteration  46: 13.191 s/op
Iteration  47: 13.111 s/op
Iteration  48: 13.075 s/op
Iteration  49: 13.082 s/op
Iteration  50: 13.162 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.107 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [12.900, 12.950) = 0 
    [12.950, 13.000) = 3 
    [13.000, 13.050) = 7 
    [13.050, 13.100) = 20 
    [13.100, 13.150) = 7 
    [13.150, 13.200) = 9 
    [13.200, 13.250) = 2 
    [13.250, 13.300) = 0 
    [13.300, 13.350) = 1 
    [13.350, 13.400) = 0 
    [13.400, 13.450) = 0 
    [13.450, 13.500) = 0 
    [13.500, 13.550) = 1 
    [13.550, 13.600) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.960 s/op
     p(50.0000) =     13.089 s/op
     p(90.0000) =     13.193 s/op
     p(95.0000) =     13.283 s/op
     p(99.0000) =     13.513 s/op
     p(99.9000) =     13.513 s/op
     p(99.9900) =     13.513 s/op
     p(99.9990) =     13.513 s/op
     p(99.9999) =     13.513 s/op
    p(100.0000) =     13.513 s/op


# Run complete. Total time: 00:10:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.107 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_11.0.4_1564752002842.json
{"wallclock_times": [656.415556071], "core_cycle_counts": [[739118412568], [733986090454], [508353592234], [418189071873]], "aperf_counts": [[737595025249], [733779138904], [508235651040], [418093404216]], "mperf_counts": [[738280845312], [734213456592], [508486978168], [418262246140]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 15:30:59: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-08-02 15:31:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:31:00: INFO] 382 executions left in scheduler queue
[2019-08-02 15:31:00: INFO] Executions until ETA known: 2100
[2019-08-02 15:31:00: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:31:00: INFO] Estimated completion (next execution): 2019-08-02 15:44:26 (0:13:26 from now)
[2019-08-02 15:31:00: INFO] Reboot in preparation for next execution
[2019-08-02 15:39:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.635 s/op
Iteration   2: 5.310 s/op
Iteration   3: 5.356 s/op
Iteration   4: 5.350 s/op
Iteration   5: 5.325 s/op
Iteration   6: 5.347 s/op
Iteration   7: 5.335 s/op
Iteration   8: 5.330 s/op
Iteration   9: 5.279 s/op
Iteration  10: 5.313 s/op
Iteration  11: 5.329 s/op
Iteration  12: 5.317 s/op
Iteration  13: 5.327 s/op
Iteration  14: 5.323 s/op
Iteration  15: 5.332 s/op
Iteration  16: 5.293 s/op
Iteration  17: 5.346 s/op
Iteration  18: 5.328 s/op
Iteration  19: 5.338 s/op
Iteration  20: 5.328 s/op
Iteration  21: 5.261 s/op
Iteration  22: 5.338 s/op
Iteration  23: 5.324 s/op
Iteration  24: 5.339 s/op
Iteration  25: 5.333 s/op
Iteration  26: 5.285 s/op
Iteration  27: 5.305 s/op
Iteration  28: 5.327 s/op
Iteration  29: 5.343 s/op
Iteration  30: 5.341 s/op
Iteration  31: 5.340 s/op
Iteration  32: 5.286 s/op
Iteration  33: 5.324 s/op
Iteration  34: 5.337 s/op
Iteration  35: 5.342 s/op
Iteration  36: 5.338 s/op
Iteration  37: 5.355 s/op
Iteration  38: 5.292 s/op
Iteration  39: 5.329 s/op
Iteration  40: 5.338 s/op
Iteration  41: 5.334 s/op
Iteration  42: 5.332 s/op
Iteration  43: 5.291 s/op
Iteration  44: 5.353 s/op
Iteration  45: 5.347 s/op
Iteration  46: 5.347 s/op
Iteration  47: 5.360 s/op
Iteration  48: 5.292 s/op
Iteration  49: 5.359 s/op
Iteration  50: 5.346 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.334 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 8 
    [5.300, 5.350) = 35 
    [5.350, 5.400) = 6 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.261 s/op
     p(50.0000) =      5.333 s/op
     p(90.0000) =      5.355 s/op
     p(95.0000) =      5.359 s/op
     p(99.0000) =      5.635 s/op
     p(99.9000) =      5.635 s/op
     p(99.9900) =      5.635 s/op
     p(99.9990) =      5.635 s/op
     p(99.9999) =      5.635 s/op
    p(100.0000) =      5.635 s/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.334 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_graalvm-ee-19.1.1_1564752927951.json
{"wallclock_times": [267.79903196099997], "core_cycle_counts": [[292968965563], [251140159995], [148451825622], [242645711535]], "aperf_counts": [[292326477688], [251057308803], [148391811351], [242603011899]], "mperf_counts": [[292345892366], [251060537810], [148397568356], [242604947928]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 15:39:55: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:39:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:39:56: INFO] 381 executions left in scheduler queue
[2019-08-02 15:39:56: INFO] Executions until ETA known: 2081
[2019-08-02 15:39:56: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:39:56: INFO] Estimated completion (next execution): 2019-08-02 15:46:54 (0:06:58 from now)
[2019-08-02 15:39:56: INFO] Reboot in preparation for next execution
[2019-08-02 15:51:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.442 s/op
Iteration   2: 9.376 s/op
Iteration   3: 9.352 s/op
Iteration   4: 9.349 s/op
Iteration   5: 9.287 s/op
Iteration   6: 9.312 s/op
Iteration   7: 9.248 s/op
Iteration   8: 9.213 s/op
Iteration   9: 9.313 s/op
Iteration  10: 9.324 s/op
Iteration  11: 9.304 s/op
Iteration  12: 9.313 s/op
Iteration  13: 9.293 s/op
Iteration  14: 9.322 s/op
Iteration  15: 9.327 s/op
Iteration  16: 9.300 s/op
Iteration  17: 9.377 s/op
Iteration  18: 9.281 s/op
Iteration  19: 9.318 s/op
Iteration  20: 9.326 s/op
Iteration  21: 9.369 s/op
Iteration  22: 9.322 s/op
Iteration  23: 9.264 s/op
Iteration  24: 9.334 s/op
Iteration  25: 9.292 s/op
Iteration  26: 9.318 s/op
Iteration  27: 9.282 s/op
Iteration  28: 9.380 s/op
Iteration  29: 9.343 s/op
Iteration  30: 9.293 s/op
Iteration  31: 9.246 s/op
Iteration  32: 9.375 s/op
Iteration  33: 9.261 s/op
Iteration  34: 9.259 s/op
Iteration  35: 9.351 s/op
Iteration  36: 9.266 s/op
Iteration  37: 9.265 s/op
Iteration  38: 9.297 s/op
Iteration  39: 9.297 s/op
Iteration  40: 9.268 s/op
Iteration  41: 9.245 s/op
Iteration  42: 9.343 s/op
Iteration  43: 9.279 s/op
Iteration  44: 9.301 s/op
Iteration  45: 9.300 s/op
Iteration  46: 9.280 s/op
Iteration  47: 9.280 s/op
Iteration  48: 9.294 s/op
Iteration  49: 9.308 s/op
Iteration  50: 9.299 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.308 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [9.200, 9.225) = 1 
    [9.225, 9.250) = 3 
    [9.250, 9.275) = 6 
    [9.275, 9.300) = 13 
    [9.300, 9.325) = 13 
    [9.325, 9.350) = 6 
    [9.350, 9.375) = 3 
    [9.375, 9.400) = 4 
    [9.400, 9.425) = 0 
    [9.425, 9.450) = 1 
    [9.450, 9.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.213 s/op
     p(50.0000) =      9.301 s/op
     p(90.0000) =      9.375 s/op
     p(95.0000) =      9.378 s/op
     p(99.0000) =      9.442 s/op
     p(99.9000) =      9.442 s/op
     p(99.9900) =      9.442 s/op
     p(99.9990) =      9.442 s/op
     p(99.9999) =      9.442 s/op
    p(100.0000) =      9.442 s/op


# Run complete. Total time: 00:07:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.308 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_graalvm-ee-19.1.1_1564753409936.json
{"wallclock_times": [466.2894694270001], "core_cycle_counts": [[218393248196], [389818367820], [495845282335], [398153043127]], "aperf_counts": [[217184769041], [389748561570], [495815849626], [398128475913]], "mperf_counts": [[217195334420], [389749263760], [495817713096], [398132027422]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 15:51:16: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:51:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:51:17: INFO] 380 executions left in scheduler queue
[2019-08-02 15:51:17: INFO] Executions until ETA known: 2075
[2019-08-02 15:51:17: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:51:17: INFO] Estimated completion (next execution): 2019-08-02 16:01:33 (0:10:16 from now)
[2019-08-02 15:51:17: INFO] Reboot in preparation for next execution
[2019-08-02 15:59:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.053 s/op
Iteration   2: 4.952 s/op
Iteration   3: 4.798 s/op
Iteration   4: 4.775 s/op
Iteration   5: 4.792 s/op
Iteration   6: 4.773 s/op
Iteration   7: 4.789 s/op
Iteration   8: 4.784 s/op
Iteration   9: 4.761 s/op
Iteration  10: 4.765 s/op
Iteration  11: 4.763 s/op
Iteration  12: 4.774 s/op
Iteration  13: 4.777 s/op
Iteration  14: 4.774 s/op
Iteration  15: 4.784 s/op
Iteration  16: 4.775 s/op
Iteration  17: 4.773 s/op
Iteration  18: 4.788 s/op
Iteration  19: 4.775 s/op
Iteration  20: 4.796 s/op
Iteration  21: 4.809 s/op
Iteration  22: 4.827 s/op
Iteration  23: 4.783 s/op
Iteration  24: 4.781 s/op
Iteration  25: 4.777 s/op
Iteration  26: 4.795 s/op
Iteration  27: 4.805 s/op
Iteration  28: 4.765 s/op
Iteration  29: 4.787 s/op
Iteration  30: 4.779 s/op
Iteration  31: 4.797 s/op
Iteration  32: 4.770 s/op
Iteration  33: 4.798 s/op
Iteration  34: 4.792 s/op
Iteration  35: 4.774 s/op
Iteration  36: 4.795 s/op
Iteration  37: 4.803 s/op
Iteration  38: 4.838 s/op
Iteration  39: 4.802 s/op
Iteration  40: 4.778 s/op
Iteration  41: 4.807 s/op
Iteration  42: 4.798 s/op
Iteration  43: 4.779 s/op
Iteration  44: 4.832 s/op
Iteration  45: 4.809 s/op
Iteration  46: 4.807 s/op
Iteration  47: 4.800 s/op
Iteration  48: 4.780 s/op
Iteration  49: 4.788 s/op
Iteration  50: 4.787 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.797 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [4.700, 4.725) = 0 
    [4.725, 4.750) = 0 
    [4.750, 4.775) = 12 
    [4.775, 4.800) = 25 
    [4.800, 4.825) = 8 
    [4.825, 4.850) = 3 
    [4.850, 4.875) = 0 
    [4.875, 4.900) = 0 
    [4.900, 4.925) = 0 
    [4.925, 4.950) = 0 
    [4.950, 4.975) = 1 
    [4.975, 5.000) = 0 
    [5.000, 5.025) = 0 
    [5.025, 5.050) = 0 
    [5.050, 5.075) = 1 
    [5.075, 5.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.761 s/op
     p(50.0000) =      4.787 s/op
     p(90.0000) =      4.825 s/op
     p(95.0000) =      4.889 s/op
     p(99.0000) =      5.053 s/op
     p(99.9000) =      5.053 s/op
     p(99.9900) =      5.053 s/op
     p(99.9990) =      5.053 s/op
     p(99.9999) =      5.053 s/op
    p(100.0000) =      5.053 s/op


# Run complete. Total time: 00:04:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.797 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_graalvm-ee-19.1.1_1564754150206.json
{"wallclock_times": [240.833959109], "core_cycle_counts": [[198529394074], [244690814468], [213461337755], [126113182400]], "aperf_counts": [[197962944756], [244642261301], [213434530535], [126090493362]], "mperf_counts": [[197980343908], [244647108766], [213434767930], [126095470128]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 15:59:51: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:59:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:59:51: INFO] 379 executions left in scheduler queue
[2019-08-02 15:59:51: INFO] Executions until ETA known: 2073
[2019-08-02 15:59:51: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:59:51: INFO] Estimated completion (next execution): 2019-08-02 16:06:23 (0:06:31 from now)
[2019-08-02 15:59:51: INFO] Reboot in preparation for next execution
[2019-08-02 16:10:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.811 s/op
Iteration   2: 7.637 s/op
Iteration   3: 7.615 s/op
Iteration   4: 7.533 s/op
Iteration   5: 7.553 s/op
Iteration   6: 7.564 s/op
Iteration   7: 7.583 s/op
Iteration   8: 7.553 s/op
Iteration   9: 7.552 s/op
Iteration  10: 7.565 s/op
Iteration  11: 7.542 s/op
Iteration  12: 7.575 s/op
Iteration  13: 7.585 s/op
Iteration  14: 7.548 s/op
Iteration  15: 7.545 s/op
Iteration  16: 7.625 s/op
Iteration  17: 7.542 s/op
Iteration  18: 7.527 s/op
Iteration  19: 7.521 s/op
Iteration  20: 7.527 s/op
Iteration  21: 7.545 s/op
Iteration  22: 7.528 s/op
Iteration  23: 7.528 s/op
Iteration  24: 7.482 s/op
Iteration  25: 7.525 s/op
Iteration  26: 7.532 s/op
Iteration  27: 7.533 s/op
Iteration  28: 7.540 s/op
Iteration  29: 7.534 s/op
Iteration  30: 7.543 s/op
Iteration  31: 7.513 s/op
Iteration  32: 7.523 s/op
Iteration  33: 7.520 s/op
Iteration  34: 7.520 s/op
Iteration  35: 7.531 s/op
Iteration  36: 7.524 s/op
Iteration  37: 7.526 s/op
Iteration  38: 7.517 s/op
Iteration  39: 7.515 s/op
Iteration  40: 7.526 s/op
Iteration  41: 7.524 s/op
Iteration  42: 7.524 s/op
Iteration  43: 7.526 s/op
Iteration  44: 7.530 s/op
Iteration  45: 7.547 s/op
Iteration  46: 7.553 s/op
Iteration  47: 7.450 s/op
Iteration  48: 7.598 s/op
Iteration  49: 7.525 s/op
Iteration  50: 7.522 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.546 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [7.400, 7.450) = 0 
    [7.450, 7.500) = 2 
    [7.500, 7.550) = 34 
    [7.550, 7.600) = 10 
    [7.600, 7.650) = 3 
    [7.650, 7.700) = 0 
    [7.700, 7.750) = 0 
    [7.750, 7.800) = 0 
    [7.800, 7.850) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.450 s/op
     p(50.0000) =      7.532 s/op
     p(90.0000) =      7.597 s/op
     p(95.0000) =      7.630 s/op
     p(99.0000) =      7.811 s/op
     p(99.9000) =      7.811 s/op
     p(99.9900) =      7.811 s/op
     p(99.9990) =      7.811 s/op
     p(99.9999) =      7.811 s/op
    p(100.0000) =      7.811 s/op


# Run complete. Total time: 00:06:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  7.546 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_graalvm-ee-19.1.1_1564754642591.json
{"wallclock_times": [378.239116754], "core_cycle_counts": [[340997255936], [259894193284], [330106658878], [299864341652]], "aperf_counts": [[340144199434], [259821645599], [330079967490], [299831766310]], "mperf_counts": [[340170322940], [259821824408], [330082743184], [299833587436]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 16:10:20: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 16:10:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:10:21: INFO] 378 executions left in scheduler queue
[2019-08-02 16:10:21: INFO] Executions until ETA known: 2042
[2019-08-02 16:10:21: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-08-02 16:10:21: INFO] Estimated completion (next execution): 2019-08-02 16:19:10 (0:08:48 from now)
[2019-08-02 16:10:21: INFO] Reboot in preparation for next execution
[2019-08-02 16:15:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:15:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:15:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:15:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:15:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:15:12: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 16:31:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.235 s/op
Iteration   2: 17.462 s/op
Iteration   3: 19.077 s/op
Iteration   4: 18.190 s/op
Iteration   5: 18.122 s/op
Iteration   6: 18.170 s/op
Iteration   7: 19.826 s/op
Iteration   8: 19.799 s/op
Iteration   9: 19.838 s/op
Iteration  10: 19.790 s/op
Iteration  11: 19.799 s/op
Iteration  12: 19.853 s/op
Iteration  13: 19.780 s/op
Iteration  14: 19.810 s/op
Iteration  15: 19.808 s/op
Iteration  16: 19.795 s/op
Iteration  17: 19.809 s/op
Iteration  18: 19.842 s/op
Iteration  19: 19.794 s/op
Iteration  20: 19.788 s/op
Iteration  21: 19.812 s/op
Iteration  22: 19.852 s/op
Iteration  23: 19.789 s/op
Iteration  24: 19.813 s/op
Iteration  25: 19.837 s/op
Iteration  26: 19.860 s/op
Iteration  27: 19.847 s/op
Iteration  28: 19.794 s/op
Iteration  29: 19.818 s/op
Iteration  30: 19.786 s/op
Iteration  31: 19.821 s/op
Iteration  32: 19.786 s/op
Iteration  33: 19.820 s/op
Iteration  34: 19.809 s/op
Iteration  35: 19.775 s/op
Iteration  36: 19.821 s/op
Iteration  37: 19.862 s/op
Iteration  38: 19.837 s/op
Iteration  39: 19.822 s/op
Iteration  40: 19.856 s/op
Iteration  41: 19.777 s/op
Iteration  42: 19.844 s/op
Iteration  43: 19.824 s/op
Iteration  44: 19.866 s/op
Iteration  45: 19.812 s/op
Iteration  46: 19.873 s/op
Iteration  47: 19.812 s/op
Iteration  48: 19.823 s/op
Iteration  49: 19.809 s/op
Iteration  50: 19.793 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     19.645 ?(99.9%) 0.257 s/op

  Histogram, s/op:
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 1 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 3 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 
    [18.750, 19.000) = 0 
    [19.000, 19.250) = 2 
    [19.250, 19.500) = 0 
    [19.500, 19.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.462 s/op
     p(50.0000) =     19.811 s/op
     p(90.0000) =     19.856 s/op
     p(95.0000) =     19.863 s/op
     p(99.0000) =     19.873 s/op
     p(99.9000) =     19.873 s/op
     p(99.9900) =     19.873 s/op
     p(99.9990) =     19.873 s/op
     p(99.9999) =     19.873 s/op
    p(100.0000) =     19.873 s/op


# Run complete. Total time: 00:16:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  19.645 ? 0.257   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_12.0.1_1564755312347.json
{"wallclock_times": [983.8342024929999], "core_cycle_counts": [[486088133435], [660635814863], [698412398901], [1338167007701]], "aperf_counts": [[483174497534], [660500855628], [698225759042], [1338041970914]], "mperf_counts": [[483182167978], [660501799686], [698228282988], [1338042029002]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 16:31:36: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-08-02 16:31:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:31:37: INFO] 377 executions left in scheduler queue
[2019-08-02 16:31:37: INFO] Executions until ETA known: 2026
[2019-08-02 16:31:37: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:31:37: INFO] Estimated completion (next execution): 2019-08-02 16:50:31 (0:18:54 from now)
[2019-08-02 16:31:37: INFO] Reboot in preparation for next execution
[2019-08-02 16:37:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:37:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:37:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:37:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:37:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:38:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.467 s/op
Iteration   2: 2.355 s/op
Iteration   3: 1.957 s/op
Iteration   4: 1.926 s/op
Iteration   5: 2.062 s/op
Iteration   6: 2.054 s/op
Iteration   7: 2.058 s/op
Iteration   8: 2.064 s/op
Iteration   9: 2.055 s/op
Iteration  10: 2.015 s/op
Iteration  11: 2.070 s/op
Iteration  12: 2.053 s/op
Iteration  13: 2.046 s/op
Iteration  14: 2.053 s/op
Iteration  15: 2.060 s/op
Iteration  16: 2.054 s/op
Iteration  17: 2.050 s/op
Iteration  18: 2.054 s/op
Iteration  19: 1.983 s/op
Iteration  20: 2.067 s/op
Iteration  21: 2.049 s/op
Iteration  22: 1.936 s/op
Iteration  23: 2.054 s/op
Iteration  24: 2.052 s/op
Iteration  25: 2.048 s/op
Iteration  26: 1.902 s/op
Iteration  27: 1.958 s/op
Iteration  28: 2.050 s/op
Iteration  29: 2.046 s/op
Iteration  30: 2.047 s/op
Iteration  31: 2.054 s/op
Iteration  32: 2.051 s/op
Iteration  33: 2.053 s/op
Iteration  34: 2.007 s/op
Iteration  35: 2.052 s/op
Iteration  36: 2.037 s/op
Iteration  37: 2.053 s/op
Iteration  38: 2.045 s/op
Iteration  39: 2.052 s/op
Iteration  40: 2.055 s/op
Iteration  41: 2.052 s/op
Iteration  42: 2.043 s/op
Iteration  43: 2.054 s/op
Iteration  44: 2.012 s/op
Iteration  45: 2.055 s/op
Iteration  46: 2.043 s/op
Iteration  47: 2.017 s/op
Iteration  48: 2.026 s/op
Iteration  49: 2.055 s/op
Iteration  50: 2.045 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.050 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [1.900, 1.950) = 3 
    [1.950, 2.000) = 3 
    [2.000, 2.050) = 15 
    [2.050, 2.100) = 27 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.902 s/op
     p(50.0000) =      2.052 s/op
     p(90.0000) =      2.064 s/op
     p(95.0000) =      2.198 s/op
     p(99.0000) =      2.467 s/op
     p(99.9000) =      2.467 s/op
     p(99.9900) =      2.467 s/op
     p(99.9990) =      2.467 s/op
     p(99.9999) =      2.467 s/op
    p(100.0000) =      2.467 s/op


# Run complete. Total time: 00:01:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.050 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_12.0.2_1564756631817.json
{"wallclock_times": [103.510301865], "core_cycle_counts": [[94992570849], [50964191469], [70950301513], [91468230749]], "aperf_counts": [[94696420537], [50913763580], [70933270218], [91451770196]], "mperf_counts": [[107342281092], [57176195100], [79660123938], [103081927598]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 16:38:55: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:38:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:38:56: INFO] 376 executions left in scheduler queue
[2019-08-02 16:38:56: INFO] Executions until ETA known: 2019
[2019-08-02 16:38:56: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:38:56: INFO] Estimated completion (next execution): 2019-08-02 16:43:10 (0:04:13 from now)
[2019-08-02 16:38:56: INFO] Reboot in preparation for next execution
[2019-08-02 16:44:38: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:44:38: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:44:38: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:44:38: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:44:38: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:46:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.447 s/op
Iteration   2: 2.236 s/op
Iteration   3: 2.342 s/op
Iteration   4: 2.362 s/op
Iteration   5: 2.325 s/op
Iteration   6: 2.184 s/op
Iteration   7: 2.169 s/op
Iteration   8: 2.165 s/op
Iteration   9: 2.168 s/op
Iteration  10: 2.166 s/op
Iteration  11: 2.169 s/op
Iteration  12: 2.167 s/op
Iteration  13: 2.167 s/op
Iteration  14: 2.169 s/op
Iteration  15: 2.168 s/op
Iteration  16: 2.166 s/op
Iteration  17: 2.161 s/op
Iteration  18: 2.163 s/op
Iteration  19: 2.164 s/op
Iteration  20: 2.163 s/op
Iteration  21: 2.162 s/op
Iteration  22: 2.162 s/op
Iteration  23: 2.163 s/op
Iteration  24: 2.162 s/op
Iteration  25: 2.163 s/op
Iteration  26: 2.164 s/op
Iteration  27: 2.164 s/op
Iteration  28: 2.164 s/op
Iteration  29: 2.163 s/op
Iteration  30: 2.162 s/op
Iteration  31: 2.162 s/op
Iteration  32: 2.164 s/op
Iteration  33: 2.162 s/op
Iteration  34: 2.161 s/op
Iteration  35: 2.167 s/op
Iteration  36: 2.167 s/op
Iteration  37: 2.163 s/op
Iteration  38: 2.162 s/op
Iteration  39: 2.163 s/op
Iteration  40: 2.161 s/op
Iteration  41: 2.163 s/op
Iteration  42: 2.165 s/op
Iteration  43: 2.165 s/op
Iteration  44: 2.163 s/op
Iteration  45: 2.163 s/op
Iteration  46: 2.164 s/op
Iteration  47: 2.168 s/op
Iteration  48: 2.163 s/op
Iteration  49: 2.165 s/op
Iteration  50: 2.161 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.182 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [2.100, 2.125) = 0 
    [2.125, 2.150) = 0 
    [2.150, 2.175) = 44 
    [2.175, 2.200) = 1 
    [2.200, 2.225) = 0 
    [2.225, 2.250) = 1 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 0 
    [2.300, 2.325) = 1 
    [2.325, 2.350) = 1 
    [2.350, 2.375) = 1 
    [2.375, 2.400) = 0 
    [2.400, 2.425) = 0 
    [2.425, 2.450) = 1 
    [2.450, 2.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.161 s/op
     p(50.0000) =      2.164 s/op
     p(90.0000) =      2.231 s/op
     p(95.0000) =      2.351 s/op
     p(99.0000) =      2.447 s/op
     p(99.9000) =      2.447 s/op
     p(99.9900) =      2.447 s/op
     p(99.9990) =      2.447 s/op
     p(99.9999) =      2.447 s/op
    p(100.0000) =      2.447 s/op


# Run complete. Total time: 00:01:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.182 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_12.0.2_1564757078863.json
{"wallclock_times": [110.06992964200003], "core_cycle_counts": [[93905397324], [49046526889], [143611693046], [74085526585]], "aperf_counts": [[93625247538], [49012240337], [143587014500], [74065818455]], "mperf_counts": [[94138789160], [49185416524], [143747025484], [74163480260]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 16:46:28: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:46:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:46:29: INFO] 375 executions left in scheduler queue
[2019-08-02 16:46:29: INFO] Executions until ETA known: 2003
[2019-08-02 16:46:29: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-08-02 16:46:29: INFO] Estimated completion (next execution): 2019-08-02 16:50:50 (0:04:20 from now)
[2019-08-02 16:46:29: INFO] Reboot in preparation for next execution
[2019-08-02 16:51:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:51:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:51:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:51:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:51:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:51:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 17:03:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.434 s/op
Iteration   2: 13.541 s/op
Iteration   3: 13.780 s/op
Iteration   4: 13.815 s/op
Iteration   5: 13.801 s/op
Iteration   6: 13.821 s/op
Iteration   7: 13.866 s/op
Iteration   8: 13.931 s/op
Iteration   9: 13.917 s/op
Iteration  10: 13.861 s/op
Iteration  11: 13.873 s/op
Iteration  12: 13.828 s/op
Iteration  13: 13.856 s/op
Iteration  14: 13.826 s/op
Iteration  15: 13.874 s/op
Iteration  16: 13.848 s/op
Iteration  17: 13.831 s/op
Iteration  18: 13.852 s/op
Iteration  19: 13.854 s/op
Iteration  20: 13.837 s/op
Iteration  21: 13.836 s/op
Iteration  22: 13.818 s/op
Iteration  23: 13.817 s/op
Iteration  24: 13.810 s/op
Iteration  25: 13.863 s/op
Iteration  26: 13.861 s/op
Iteration  27: 13.837 s/op
Iteration  28: 13.830 s/op
Iteration  29: 13.855 s/op
Iteration  30: 13.847 s/op
Iteration  31: 13.845 s/op
Iteration  32: 13.819 s/op
Iteration  33: 13.825 s/op
Iteration  34: 13.866 s/op
Iteration  35: 13.847 s/op
Iteration  36: 13.846 s/op
Iteration  37: 13.867 s/op
Iteration  38: 13.854 s/op
Iteration  39: 13.844 s/op
Iteration  40: 13.882 s/op
Iteration  41: 13.921 s/op
Iteration  42: 13.913 s/op
Iteration  43: 13.841 s/op
Iteration  44: 13.874 s/op
Iteration  45: 13.843 s/op
Iteration  46: 13.876 s/op
Iteration  47: 13.860 s/op
Iteration  48: 13.836 s/op
Iteration  49: 13.851 s/op
Iteration  50: 13.929 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.857 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [13.500, 13.600) = 1 
    [13.600, 13.700) = 0 
    [13.700, 13.800) = 1 
    [13.800, 13.900) = 42 
    [13.900, 14.000) = 5 
    [14.000, 14.100) = 0 
    [14.100, 14.200) = 0 
    [14.200, 14.300) = 0 
    [14.300, 14.400) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.541 s/op
     p(50.0000) =     13.848 s/op
     p(90.0000) =     13.917 s/op
     p(95.0000) =     13.930 s/op
     p(99.0000) =     14.434 s/op
     p(99.9000) =     14.434 s/op
     p(99.9900) =     14.434 s/op
     p(99.9990) =     14.434 s/op
     p(99.9999) =     14.434 s/op
    p(100.0000) =     14.434 s/op


# Run complete. Total time: 00:11:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.857 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_12.0.1_1564757518670.json
{"wallclock_times": [694.4322593190001], "core_cycle_counts": [[600347444109], [393027860797], [387505115546], [868638245244]], "aperf_counts": [[598548762034], [392837143945], [387348217382], [868539289294]], "mperf_counts": [[598554238772], [392837374652], [387348407242], [868539839204]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 17:03:33: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-08-02 17:03:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 17:03:34: INFO] 374 executions left in scheduler queue
[2019-08-02 17:03:34: INFO] Executions until ETA known: 1974
[2019-08-02 17:03:34: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-08-02 17:03:34: INFO] Estimated completion (next execution): 2019-08-02 17:17:39 (0:14:04 from now)
[2019-08-02 17:03:34: INFO] Reboot in preparation for next execution
[2019-08-02 17:18:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.287 s/op
Iteration   2: 12.011 s/op
Iteration   3: 11.847 s/op
Iteration   4: 11.881 s/op
Iteration   5: 12.194 s/op
Iteration   6: 11.827 s/op
Iteration   7: 11.890 s/op
Iteration   8: 11.927 s/op
Iteration   9: 11.944 s/op
Iteration  10: 12.021 s/op
Iteration  11: 11.843 s/op
Iteration  12: 12.601 s/op
Iteration  13: 11.881 s/op
Iteration  14: 11.902 s/op
Iteration  15: 11.916 s/op
Iteration  16: 11.955 s/op
Iteration  17: 11.819 s/op
Iteration  18: 11.848 s/op
Iteration  19: 11.927 s/op
Iteration  20: 11.949 s/op
Iteration  21: 11.922 s/op
Iteration  22: 12.012 s/op
Iteration  23: 12.732 s/op
Iteration  24: 11.842 s/op
Iteration  25: 11.908 s/op
Iteration  26: 11.934 s/op
Iteration  27: 11.892 s/op
Iteration  28: 11.949 s/op
Iteration  29: 12.019 s/op
Iteration  30: 11.820 s/op
Iteration  31: 11.886 s/op
Iteration  32: 11.879 s/op
Iteration  33: 11.949 s/op
Iteration  34: 12.429 s/op
Iteration  35: 11.932 s/op
Iteration  36: 11.777 s/op
Iteration  37: 11.833 s/op
Iteration  38: 11.904 s/op
Iteration  39: 11.898 s/op
Iteration  40: 11.939 s/op
Iteration  41: 11.995 s/op
Iteration  42: 12.033 s/op
Iteration  43: 11.825 s/op
Iteration  44: 11.922 s/op
Iteration  45: 12.497 s/op
Iteration  46: 11.894 s/op
Iteration  47: 11.904 s/op
Iteration  48: 11.996 s/op
Iteration  49: 11.807 s/op
Iteration  50: 11.839 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.973 ?(99.9%) 0.099 s/op

  Histogram, s/op:
    [11.700, 11.800) = 1 
    [11.800, 11.900) = 19 
    [11.900, 12.000) = 19 
    [12.000, 12.100) = 5 
    [12.100, 12.200) = 1 
    [12.200, 12.300) = 1 
    [12.300, 12.400) = 0 
    [12.400, 12.500) = 2 
    [12.500, 12.600) = 0 
    [12.600, 12.700) = 1 

  Percentiles, s/op:
      p(0.0000) =     11.777 s/op
     p(50.0000) =     11.919 s/op
     p(90.0000) =     12.278 s/op
     p(95.0000) =     12.544 s/op
     p(99.0000) =     12.732 s/op
     p(99.9000) =     12.732 s/op
     p(99.9900) =     12.732 s/op
     p(99.9990) =     12.732 s/op
     p(99.9999) =     12.732 s/op
    p(100.0000) =     12.732 s/op


# Run complete. Total time: 00:09:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.973 ? 0.099   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot-8u222-b10_1564758498599.json
{"wallclock_times": [599.8193089050001], "core_cycle_counts": [[605045163697], [597028188304], [508134788229], [516539222008]], "aperf_counts": [[603479900178], [596859526569], [508037469516], [516452998233]], "mperf_counts": [[603483451838], [596865792464], [508041700314], [516453093318]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 17:18:18: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-08-02 17:18:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 17:18:19: INFO] 373 executions left in scheduler queue
[2019-08-02 17:18:19: INFO] Executions until ETA known: 1918
[2019-08-02 17:18:19: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-08-02 17:18:19: INFO] Estimated completion (next execution): 2019-08-02 17:30:49 (0:12:30 from now)
[2019-08-02 17:18:19: INFO] Reboot in preparation for next execution
[2019-08-02 17:25:26: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 17:25:26: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 17:25:26: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 17:25:26: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 17:25:26: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 17:32:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.633 s/op
Iteration   2: 9.298 s/op
Iteration   3: 9.018 s/op
Iteration   4: 8.968 s/op
Iteration   5: 8.981 s/op
Iteration   6: 8.965 s/op
Iteration   7: 8.982 s/op
Iteration   8: 8.981 s/op
Iteration   9: 8.967 s/op
Iteration  10: 8.968 s/op
Iteration  11: 8.982 s/op
Iteration  12: 8.968 s/op
Iteration  13: 8.966 s/op
Iteration  14: 8.969 s/op
Iteration  15: 8.967 s/op
Iteration  16: 8.968 s/op
Iteration  17: 8.969 s/op
Iteration  18: 8.969 s/op
Iteration  19: 8.969 s/op
Iteration  20: 8.972 s/op
Iteration  21: 8.970 s/op
Iteration  22: 8.975 s/op
Iteration  23: 8.970 s/op
Iteration  24: 8.970 s/op
Iteration  25: 8.969 s/op
Iteration  26: 8.971 s/op
Iteration  27: 8.971 s/op
Iteration  28: 8.971 s/op
Iteration  29: 8.970 s/op
Iteration  30: 8.973 s/op
Iteration  31: 8.971 s/op
Iteration  32: 8.969 s/op
Iteration  33: 8.968 s/op
Iteration  34: 8.971 s/op
Iteration  35: 8.968 s/op
Iteration  36: 8.970 s/op
Iteration  37: 8.970 s/op
Iteration  38: 8.970 s/op
Iteration  39: 8.982 s/op
Iteration  40: 8.976 s/op
Iteration  41: 8.967 s/op
Iteration  42: 8.970 s/op
Iteration  43: 8.980 s/op
Iteration  44: 8.969 s/op
Iteration  45: 8.968 s/op
Iteration  46: 8.970 s/op
Iteration  47: 8.971 s/op
Iteration  48: 8.969 s/op
Iteration  49: 8.969 s/op
Iteration  50: 8.967 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      9.012 ?(99.9%) 0.118 s/op

  Histogram, s/op:
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 47 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.965 s/op
     p(50.0000) =      8.970 s/op
     p(90.0000) =      8.982 s/op
     p(95.0000) =      9.144 s/op
     p(99.0000) =     10.633 s/op
     p(99.9000) =     10.633 s/op
     p(99.9900) =     10.633 s/op
     p(99.9990) =     10.633 s/op
     p(99.9999) =     10.633 s/op
    p(100.0000) =     10.633 s/op


# Run complete. Total time: 00:07:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  9.012 ? 0.118   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot_12.0.2_1564759526747.json
{"wallclock_times": [451.55709967099995], "core_cycle_counts": [[244892484102], [96362029184], [669450076764], [441414121293]], "aperf_counts": [[243650987344], [96260017451], [669405040799], [441342518972]], "mperf_counts": [[244239782192], [96597605494], [669928186780], [444634409578]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 17:32:58: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-08-02 17:32:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 17:32:59: INFO] 372 executions left in scheduler queue
[2019-08-02 17:32:59: INFO] Executions until ETA known: 1898
[2019-08-02 17:32:59: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-02 17:32:59: INFO] Estimated completion (next execution): 2019-08-02 17:43:01 (0:10:01 from now)
[2019-08-02 17:32:59: INFO] Reboot in preparation for next execution
[2019-08-02 17:39:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.033 s/op
Iteration   2: 1.703 s/op
Iteration   3: 1.666 s/op
Iteration   4: 1.752 s/op
Iteration   5: 1.781 s/op
Iteration   6: 1.776 s/op
Iteration   7: 1.777 s/op
Iteration   8: 1.779 s/op
Iteration   9: 1.795 s/op
Iteration  10: 1.782 s/op
Iteration  11: 1.792 s/op
Iteration  12: 1.792 s/op
Iteration  13: 1.788 s/op
Iteration  14: 1.791 s/op
Iteration  15: 1.786 s/op
Iteration  16: 1.780 s/op
Iteration  17: 1.793 s/op
Iteration  18: 1.786 s/op
Iteration  19: 1.796 s/op
Iteration  20: 1.789 s/op
Iteration  21: 1.785 s/op
Iteration  22: 1.782 s/op
Iteration  23: 1.787 s/op
Iteration  24: 1.793 s/op
Iteration  25: 1.787 s/op
Iteration  26: 1.785 s/op
Iteration  27: 1.780 s/op
Iteration  28: 1.784 s/op
Iteration  29: 1.789 s/op
Iteration  30: 1.780 s/op
Iteration  31: 1.787 s/op
Iteration  32: 1.787 s/op
Iteration  33: 1.778 s/op
Iteration  34: 1.781 s/op
Iteration  35: 1.781 s/op
Iteration  36: 1.779 s/op
Iteration  37: 1.786 s/op
Iteration  38: 1.779 s/op
Iteration  39: 1.784 s/op
Iteration  40: 1.790 s/op
Iteration  41: 1.785 s/op
Iteration  42: 1.784 s/op
Iteration  43: 1.782 s/op
Iteration  44: 1.794 s/op
Iteration  45: 1.796 s/op
Iteration  46: 1.780 s/op
Iteration  47: 1.780 s/op
Iteration  48: 1.787 s/op
Iteration  49: 1.786 s/op
Iteration  50: 1.787 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.786 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 1 
    [1.750, 1.800) = 47 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.666 s/op
     p(50.0000) =      1.785 s/op
     p(90.0000) =      1.794 s/op
     p(95.0000) =      1.796 s/op
     p(99.0000) =      2.033 s/op
     p(99.9000) =      2.033 s/op
     p(99.9900) =      2.033 s/op
     p(99.9990) =      2.033 s/op
     p(99.9999) =      2.033 s/op
    p(100.0000) =      2.033 s/op


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.786 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot-8u222-b10_1564760270571.json
{"wallclock_times": [90.13780907399999], "core_cycle_counts": [[38297487544], [166337413476], [42924245777], [55408809188]], "aperf_counts": [[37947220643], [166318588836], [42902346593], [55387950435]], "mperf_counts": [[37960407420], [166321302766], [42902516372], [55389015292]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 17:39:20: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-02 17:39:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 17:39:21: INFO] 371 executions left in scheduler queue
[2019-08-02 17:39:21: INFO] Executions until ETA known: 1891
[2019-08-02 17:39:21: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-02 17:39:21: INFO] Estimated completion (next execution): 2019-08-02 17:43:22 (0:04:00 from now)
[2019-08-02 17:39:21: INFO] Reboot in preparation for next execution
[2019-08-02 22:25:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.375 s/op
Iteration   2: 1.897 s/op
Iteration   3: 2.276 s/op
Iteration   4: 2.130 s/op
Iteration   5: 1.971 s/op
Iteration   6: 1.974 s/op
Iteration   7: 1.987 s/op
Iteration   8: 1.981 s/op
Iteration   9: 1.986 s/op
Iteration  10: 1.985 s/op
Iteration  11: 1.987 s/op
Iteration  12: 1.985 s/op
Iteration  13: 1.983 s/op
Iteration  14: 1.985 s/op
Iteration  15: 1.986 s/op
Iteration  16: 1.980 s/op
Iteration  17: 1.981 s/op
Iteration  18: 1.981 s/op
Iteration  19: 1.980 s/op
Iteration  20: 1.984 s/op
Iteration  21: 1.980 s/op
Iteration  22: 1.979 s/op
Iteration  23: 1.979 s/op
Iteration  24: 1.983 s/op
Iteration  25: 1.981 s/op
Iteration  26: 1.982 s/op
Iteration  27: 1.982 s/op
Iteration  28: 1.980 s/op
Iteration  29: 1.978 s/op
Iteration  30: 1.983 s/op
Iteration  31: 1.984 s/op
Iteration  32: 1.981 s/op
Iteration  33: 1.985 s/op
Iteration  34: 1.979 s/op
Iteration  35: 1.979 s/op
Iteration  36: 1.977 s/op
Iteration  37: 1.982 s/op
Iteration  38: 1.981 s/op
Iteration  39: 1.983 s/op
Iteration  40: 1.982 s/op
Iteration  41: 1.977 s/op
Iteration  42: 1.978 s/op
Iteration  43: 1.980 s/op
Iteration  44: 1.977 s/op
Iteration  45: 1.978 s/op
Iteration  46: 1.982 s/op
Iteration  47: 1.980 s/op
Iteration  48: 1.981 s/op
Iteration  49: 1.979 s/op
Iteration  50: 1.981 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.996 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 46 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.897 s/op
     p(50.0000) =      1.981 s/op
     p(90.0000) =      1.987 s/op
     p(95.0000) =      2.196 s/op
     p(99.0000) =      2.375 s/op
     p(99.9000) =      2.375 s/op
     p(99.9900) =      2.375 s/op
     p(99.9990) =      2.375 s/op
     p(99.9999) =      2.375 s/op
    p(100.0000) =      2.375 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.996 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot-8u222-b10_1564777418473.json
{"wallclock_times": [100.60924228499789], "core_cycle_counts": [[63164067631], [38801216467], [52290879882], [174117799839]], "aperf_counts": [[62910630855], [38772619920], [52276259987], [174108232953]], "mperf_counts": [[62920392588], [38773853250], [52277184300], [174120025026]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 22:25:19: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-02 22:25:20: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 22:25:20: INFO] 370 executions left in scheduler queue
[2019-08-02 22:25:20: INFO] Executions until ETA known: 1852
[2019-08-02 22:25:20: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-08-02 22:25:20: INFO] Estimated completion (next execution): 2019-08-02 22:29:30 (0:04:10 from now)
[2019-08-02 22:25:20: INFO] Reboot in preparation for next execution
[2019-08-02 22:41:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.367 s/op
Iteration   2: 5.868 s/op
Iteration   3: 6.354 s/op
Iteration   4: 6.228 s/op
Iteration   5: 6.150 s/op
Iteration   6: 6.110 s/op
Iteration   7: 6.023 s/op
Iteration   8: 6.095 s/op
Iteration   9: 6.075 s/op
Iteration  10: 5.970 s/op
Iteration  11: 5.983 s/op
Iteration  12: 6.127 s/op
Iteration  13: 6.815 s/op
Iteration  14: 6.035 s/op
Iteration  15: 5.996 s/op
Iteration  16: 6.120 s/op
Iteration  17: 6.000 s/op
Iteration  18: 6.142 s/op
Iteration  19: 5.981 s/op
Iteration  20: 6.168 s/op
Iteration  21: 6.008 s/op
Iteration  22: 6.175 s/op
Iteration  23: 5.998 s/op
Iteration  24: 7.195 s/op
Iteration  25: 5.988 s/op
Iteration  26: 6.147 s/op
Iteration  27: 6.027 s/op
Iteration  28: 6.153 s/op
Iteration  29: 5.997 s/op
Iteration  30: 6.015 s/op
Iteration  31: 6.135 s/op
Iteration  32: 6.027 s/op
Iteration  33: 6.140 s/op
Iteration  34: 6.018 s/op
Iteration  35: 7.156 s/op
Iteration  36: 5.924 s/op
Iteration  37: 6.144 s/op
Iteration  38: 6.015 s/op
Iteration  39: 6.132 s/op
Iteration  40: 6.022 s/op
Iteration  41: 6.163 s/op
Iteration  42: 6.004 s/op
Iteration  43: 6.018 s/op
Iteration  44: 6.049 s/op
Iteration  45: 6.017 s/op
Iteration  46: 7.122 s/op
Iteration  47: 5.941 s/op
Iteration  48: 6.151 s/op
Iteration  49: 6.017 s/op
Iteration  50: 6.141 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      6.153 ?(99.9%) 0.145 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 10 
    [6.000, 6.250) = 34 
    [6.250, 6.500) = 2 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 3 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.868 s/op
     p(50.0000) =      6.062 s/op
     p(90.0000) =      6.366 s/op
     p(95.0000) =      7.137 s/op
     p(99.0000) =      7.195 s/op
     p(99.9000) =      7.195 s/op
     p(99.9900) =      7.195 s/op
     p(99.9990) =      7.195 s/op
     p(99.9999) =      7.195 s/op
    p(100.0000) =      7.195 s/op


# Run complete. Total time: 00:05:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  6.153 ? 0.145   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_graalvm-ee-19.1.1_1564778205984.json
{"wallclock_times": [308.964736666], "core_cycle_counts": [[264997623274], [304738350203], [273848285988], [366833666369]], "aperf_counts": [[264162238742], [304662362023], [273808110036], [366801541116]], "mperf_counts": [[264183170530], [304664502634], [273812127526], [366802522884]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 22:41:54: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-08-02 22:41:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 22:41:55: INFO] 369 executions left in scheduler queue
[2019-08-02 22:41:55: INFO] Executions until ETA known: 1818
[2019-08-02 22:41:55: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-08-02 22:41:55: INFO] Estimated completion (next execution): 2019-08-02 22:49:35 (0:07:39 from now)
[2019-08-02 22:41:55: INFO] Reboot in preparation for next execution
[2019-08-02 22:57:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.209 s/op
Iteration   2: 5.314 s/op
Iteration   3: 5.292 s/op
Iteration   4: 5.295 s/op
Iteration   5: 5.297 s/op
Iteration   6: 5.305 s/op
Iteration   7: 5.305 s/op
Iteration   8: 5.322 s/op
Iteration   9: 5.308 s/op
Iteration  10: 5.299 s/op
Iteration  11: 5.288 s/op
Iteration  12: 5.289 s/op
Iteration  13: 5.293 s/op
Iteration  14: 5.289 s/op
Iteration  15: 5.305 s/op
Iteration  16: 5.305 s/op
Iteration  17: 5.287 s/op
Iteration  18: 5.303 s/op
Iteration  19: 5.311 s/op
Iteration  20: 5.293 s/op
Iteration  21: 5.293 s/op
Iteration  22: 5.301 s/op
Iteration  23: 5.306 s/op
Iteration  24: 5.315 s/op
Iteration  25: 5.275 s/op
Iteration  26: 5.239 s/op
Iteration  27: 5.309 s/op
Iteration  28: 5.296 s/op
Iteration  29: 5.292 s/op
Iteration  30: 5.292 s/op
Iteration  31: 5.240 s/op
Iteration  32: 5.300 s/op
Iteration  33: 5.300 s/op
Iteration  34: 5.290 s/op
Iteration  35: 5.295 s/op
Iteration  36: 5.301 s/op
Iteration  37: 5.238 s/op
Iteration  38: 5.295 s/op
Iteration  39: 5.286 s/op
Iteration  40: 5.298 s/op
Iteration  41: 5.298 s/op
Iteration  42: 5.266 s/op
Iteration  43: 5.298 s/op
Iteration  44: 5.274 s/op
Iteration  45: 5.270 s/op
Iteration  46: 5.301 s/op
Iteration  47: 5.282 s/op
Iteration  48: 5.271 s/op
Iteration  49: 5.284 s/op
Iteration  50: 5.245 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.289 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [5.200, 5.213) = 1 
    [5.213, 5.225) = 0 
    [5.225, 5.238) = 0 
    [5.238, 5.250) = 4 
    [5.250, 5.263) = 0 
    [5.263, 5.275) = 4 
    [5.275, 5.288) = 5 
    [5.288, 5.300) = 19 
    [5.300, 5.313) = 14 
    [5.313, 5.325) = 3 
    [5.325, 5.338) = 0 
    [5.338, 5.350) = 0 
    [5.350, 5.363) = 0 
    [5.363, 5.375) = 0 
    [5.375, 5.388) = 0 
    [5.388, 5.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.209 s/op
     p(50.0000) =      5.295 s/op
     p(90.0000) =      5.309 s/op
     p(95.0000) =      5.314 s/op
     p(99.0000) =      5.322 s/op
     p(99.9000) =      5.322 s/op
     p(99.9900) =      5.322 s/op
     p(99.9990) =      5.322 s/op
     p(99.9999) =      5.322 s/op
    p(100.0000) =      5.322 s/op


# Run complete. Total time: 00:04:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.289 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_graalvm-ce-19.1.1_1564779184322.json
{"wallclock_times": [265.333492225], "core_cycle_counts": [[256888761516], [267802082032], [215675484648], [116197034489]], "aperf_counts": [[256297286363], [267727266398], [215628806007], [116154956388]], "mperf_counts": [[256310638538], [267728200042], [215633254330], [116159060890]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 22:57:29: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-08-02 22:57:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 22:57:30: INFO] 368 executions left in scheduler queue
[2019-08-02 22:57:30: INFO] Executions until ETA known: 1813
[2019-08-02 22:57:30: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 22:57:30: INFO] Estimated completion (next execution): 2019-08-02 23:04:26 (0:06:55 from now)
[2019-08-02 22:57:30: INFO] Reboot in preparation for next execution
[2019-08-02 23:04:00: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 23:04:00: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 23:04:00: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 23:04:00: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 23:04:00: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 23:12:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.534 s/op
Iteration   2: 10.963 s/op
Iteration   3: 10.884 s/op
Iteration   4: 10.488 s/op
Iteration   5: 10.537 s/op
Iteration   6: 10.498 s/op
Iteration   7: 10.562 s/op
Iteration   8: 10.512 s/op
Iteration   9: 10.555 s/op
Iteration  10: 10.482 s/op
Iteration  11: 10.493 s/op
Iteration  12: 10.497 s/op
Iteration  13: 10.519 s/op
Iteration  14: 10.485 s/op
Iteration  15: 10.485 s/op
Iteration  16: 10.537 s/op
Iteration  17: 10.526 s/op
Iteration  18: 10.520 s/op
Iteration  19: 10.487 s/op
Iteration  20: 10.510 s/op
Iteration  21: 10.582 s/op
Iteration  22: 10.534 s/op
Iteration  23: 10.506 s/op
Iteration  24: 10.506 s/op
Iteration  25: 10.513 s/op
Iteration  26: 10.555 s/op
Iteration  27: 10.527 s/op
Iteration  28: 10.509 s/op
Iteration  29: 10.498 s/op
Iteration  30: 10.503 s/op
Iteration  31: 10.518 s/op
Iteration  32: 10.505 s/op
Iteration  33: 10.518 s/op
Iteration  34: 10.496 s/op
Iteration  35: 10.502 s/op
Iteration  36: 10.550 s/op
Iteration  37: 10.484 s/op
Iteration  38: 10.509 s/op
Iteration  39: 10.507 s/op
Iteration  40: 10.504 s/op
Iteration  41: 10.512 s/op
Iteration  42: 10.527 s/op
Iteration  43: 10.512 s/op
Iteration  44: 10.511 s/op
Iteration  45: 10.506 s/op
Iteration  46: 10.563 s/op
Iteration  47: 10.493 s/op
Iteration  48: 10.508 s/op
Iteration  49: 10.509 s/op
Iteration  50: 10.513 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.531 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [10.400, 10.450) = 0 
    [10.450, 10.500) = 12 
    [10.500, 10.550) = 30 
    [10.550, 10.600) = 6 
    [10.600, 10.650) = 0 
    [10.650, 10.700) = 0 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 1 
    [10.900, 10.950) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.482 s/op
     p(50.0000) =     10.510 s/op
     p(90.0000) =     10.561 s/op
     p(95.0000) =     10.718 s/op
     p(99.0000) =     10.963 s/op
     p(99.9000) =     10.963 s/op
     p(99.9900) =     10.963 s/op
     p(99.9990) =     10.963 s/op
     p(99.9999) =     10.963 s/op
    p(100.0000) =     10.963 s/op


# Run complete. Total time: 00:08:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.531 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot_11.0.4_1564779840049.json
{"wallclock_times": [527.605073556], "core_cycle_counts": [[163729803067], [215505272853], [731738200998], [594042197638]], "aperf_counts": [[162180736610], [215408718881], [731697733121], [593994336661]], "mperf_counts": [[163259260390], [215460830994], [731760527436], [594039776210]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 23:12:47: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 23:12:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 23:12:48: INFO] 367 executions left in scheduler queue
[2019-08-02 23:12:48: INFO] Executions until ETA known: 1807
[2019-08-02 23:12:48: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 23:12:48: INFO] Estimated completion (next execution): 2019-08-02 23:24:06 (0:11:17 from now)
[2019-08-02 23:12:48: INFO] Reboot in preparation for next execution
[2019-08-02 23:20:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 23:20:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 23:20:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 23:20:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 23:20:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 23:27:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.698 s/op
Iteration   2: 6.865 s/op
Iteration   3: 7.882 s/op
Iteration   4: 7.491 s/op
Iteration   5: 7.444 s/op
Iteration   6: 7.425 s/op
Iteration   7: 7.410 s/op
Iteration   8: 7.427 s/op
Iteration   9: 7.425 s/op
Iteration  10: 7.429 s/op
Iteration  11: 7.422 s/op
Iteration  12: 7.436 s/op
Iteration  13: 7.404 s/op
Iteration  14: 7.414 s/op
Iteration  15: 7.352 s/op
Iteration  16: 7.410 s/op
Iteration  17: 7.395 s/op
Iteration  18: 7.414 s/op
Iteration  19: 7.411 s/op
Iteration  20: 7.393 s/op
Iteration  21: 7.386 s/op
Iteration  22: 7.400 s/op
Iteration  23: 7.409 s/op
Iteration  24: 7.390 s/op
Iteration  25: 7.413 s/op
Iteration  26: 7.403 s/op
Iteration  27: 7.434 s/op
Iteration  28: 7.429 s/op
Iteration  29: 7.406 s/op
Iteration  30: 7.405 s/op
Iteration  31: 7.409 s/op
Iteration  32: 7.399 s/op
Iteration  33: 7.400 s/op
Iteration  34: 7.384 s/op
Iteration  35: 7.385 s/op
Iteration  36: 7.398 s/op
Iteration  37: 7.434 s/op
Iteration  38: 7.401 s/op
Iteration  39: 7.402 s/op
Iteration  40: 7.440 s/op
Iteration  41: 7.208 s/op
Iteration  42: 7.122 s/op
Iteration  43: 7.387 s/op
Iteration  44: 7.426 s/op
Iteration  45: 7.379 s/op
Iteration  46: 7.398 s/op
Iteration  47: 7.394 s/op
Iteration  48: 7.379 s/op
Iteration  49: 6.797 s/op
Iteration  50: 7.437 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.392 ?(99.9%) 0.074 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 2 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 1 
    [7.125, 7.250) = 1 
    [7.250, 7.375) = 1 
    [7.375, 7.500) = 43 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 1 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.797 s/op
     p(50.0000) =      7.406 s/op
     p(90.0000) =      7.440 s/op
     p(95.0000) =      7.584 s/op
     p(99.0000) =      7.882 s/op
     p(99.9000) =      7.882 s/op
     p(99.9900) =      7.882 s/op
     p(99.9990) =      7.882 s/op
     p(99.9999) =      7.882 s/op
    p(100.0000) =      7.882 s/op


# Run complete. Total time: 00:06:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.392 ? 0.074   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot_11.0.4_1564780852644.json
{"wallclock_times": [370.76312677399994], "core_cycle_counts": [[185404952227], [218767418064], [523128984148], [139664441896]], "aperf_counts": [[184381575697], [218680855952], [523094763136], [139632263015]], "mperf_counts": [[209163660252], [248053970046], [594362930930], [155923932330]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 23:27:03: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 23:27:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 23:27:04: INFO] 366 executions left in scheduler queue
[2019-08-02 23:27:04: INFO] Executions until ETA known: 1801
[2019-08-02 23:27:04: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 23:27:04: INFO] Estimated completion (next execution): 2019-08-02 23:35:45 (0:08:41 from now)
[2019-08-02 23:27:04: INFO] Reboot in preparation for next execution
[2019-08-02 23:32:19: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 23:32:19: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 23:32:19: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 23:32:19: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 23:32:19: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 23:38:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.486 s/op
Iteration   2: 7.057 s/op
Iteration   3: 6.879 s/op
Iteration   4: 7.200 s/op
Iteration   5: 6.969 s/op
Iteration   6: 6.856 s/op
Iteration   7: 6.979 s/op
Iteration   8: 7.015 s/op
Iteration   9: 6.861 s/op
Iteration  10: 7.007 s/op
Iteration  11: 6.852 s/op
Iteration  12: 7.024 s/op
Iteration  13: 7.002 s/op
Iteration  14: 6.856 s/op
Iteration  15: 6.998 s/op
Iteration  16: 6.882 s/op
Iteration  17: 7.000 s/op
Iteration  18: 7.045 s/op
Iteration  19: 6.902 s/op
Iteration  20: 6.973 s/op
Iteration  21: 6.875 s/op
Iteration  22: 6.991 s/op
Iteration  23: 6.993 s/op
Iteration  24: 6.991 s/op
Iteration  25: 6.984 s/op
Iteration  26: 6.849 s/op
Iteration  27: 6.941 s/op
Iteration  28: 6.954 s/op
Iteration  29: 7.054 s/op
Iteration  30: 6.928 s/op
Iteration  31: 6.926 s/op
Iteration  32: 6.962 s/op
Iteration  33: 6.942 s/op
Iteration  34: 6.828 s/op
Iteration  35: 7.022 s/op
Iteration  36: 6.987 s/op
Iteration  37: 6.850 s/op
Iteration  38: 6.999 s/op
Iteration  39: 6.980 s/op
Iteration  40: 6.852 s/op
Iteration  41: 6.999 s/op
Iteration  42: 6.879 s/op
Iteration  43: 6.983 s/op
Iteration  44: 6.981 s/op
Iteration  45: 6.867 s/op
Iteration  46: 6.966 s/op
Iteration  47: 6.867 s/op
Iteration  48: 6.984 s/op
Iteration  49: 6.980 s/op
Iteration  50: 6.980 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.965 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [6.800, 6.850) = 2 
    [6.850, 6.900) = 12 
    [6.900, 6.950) = 5 
    [6.950, 7.000) = 20 
    [7.000, 7.050) = 7 
    [7.050, 7.100) = 2 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 1 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 0 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.828 s/op
     p(50.0000) =      6.980 s/op
     p(90.0000) =      7.043 s/op
     p(95.0000) =      7.121 s/op
     p(99.0000) =      7.486 s/op
     p(99.9000) =      7.486 s/op
     p(99.9900) =      7.486 s/op
     p(99.9990) =      7.486 s/op
     p(99.9999) =      7.486 s/op
    p(100.0000) =      7.486 s/op


# Run complete. Total time: 00:05:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.965 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot_11.0.4_1564781539609.json
{"wallclock_times": [349.4136944989999], "core_cycle_counts": [[268687198936], [325321599356], [382490783352], [268820222024]], "aperf_counts": [[267782913414], [325238472908], [382438695522], [268767945373]], "mperf_counts": [[268347066274], [325296493704], [382499650712], [268841381400]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 23:38:09: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 23:38:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 23:38:09: INFO] 365 executions left in scheduler queue
[2019-08-02 23:38:09: INFO] Executions until ETA known: 1796
[2019-08-02 23:38:09: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 23:38:09: INFO] Estimated completion (next execution): 2019-08-02 23:46:29 (0:08:19 from now)
[2019-08-02 23:38:09: INFO] Reboot in preparation for next execution
[2019-08-02 23:43:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 23:43:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 23:43:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 23:43:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 23:43:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 23:56:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 20.711 s/op
Iteration   2: 16.809 s/op
Iteration   3: 17.367 s/op
Iteration   4: 16.466 s/op
Iteration   5: 16.419 s/op
Iteration   6: 16.423 s/op
Iteration   7: 16.440 s/op
Iteration   8: 16.383 s/op
Iteration   9: 16.361 s/op
Iteration  10: 16.447 s/op
Iteration  11: 16.406 s/op
Iteration  12: 16.359 s/op
Iteration  13: 16.435 s/op
Iteration  14: 16.408 s/op
Iteration  15: 16.402 s/op
Iteration  16: 16.433 s/op
Iteration  17: 16.439 s/op
Iteration  18: 16.411 s/op
Iteration  19: 16.417 s/op
Iteration  20: 16.412 s/op
Iteration  21: 16.405 s/op
Iteration  22: 16.431 s/op
Iteration  23: 16.448 s/op
Iteration  24: 16.383 s/op
Iteration  25: 16.371 s/op
Iteration  26: 16.398 s/op
Iteration  27: 16.444 s/op
Iteration  28: 16.418 s/op
Iteration  29: 16.439 s/op
Iteration  30: 16.447 s/op
Iteration  31: 16.442 s/op
Iteration  32: 16.406 s/op
Iteration  33: 16.474 s/op
Iteration  34: 16.409 s/op
Iteration  35: 16.384 s/op
Iteration  36: 16.452 s/op
Iteration  37: 16.461 s/op
Iteration  38: 16.401 s/op
Iteration  39: 16.420 s/op
Iteration  40: 16.477 s/op
Iteration  41: 16.423 s/op
Iteration  42: 16.432 s/op
Iteration  43: 16.434 s/op
Iteration  44: 16.488 s/op
Iteration  45: 16.379 s/op
Iteration  46: 16.474 s/op
Iteration  47: 16.389 s/op
Iteration  48: 16.390 s/op
Iteration  49: 16.704 s/op
Iteration  50: 16.423 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.540 ?(99.9%) 0.307 s/op

  Histogram, s/op:
    [16.000, 16.500) = 46 
    [16.500, 17.000) = 2 
    [17.000, 17.500) = 1 
    [17.500, 18.000) = 0 
    [18.000, 18.500) = 0 
    [18.500, 19.000) = 0 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.359 s/op
     p(50.0000) =     16.423 s/op
     p(90.0000) =     16.487 s/op
     p(95.0000) =     17.060 s/op
     p(99.0000) =     20.711 s/op
     p(99.9000) =     20.711 s/op
     p(99.9900) =     20.711 s/op
     p(99.9990) =     20.711 s/op
     p(99.9999) =     20.711 s/op
    p(100.0000) =     20.711 s/op


# Run complete. Total time: 00:13:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.540 ? 0.307   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot_11.0.4_1564782190420.json
{"wallclock_times": [828.0925320400002], "core_cycle_counts": [[553085838295], [442377569187], [1489040225371], [183800087937]], "aperf_counts": [[550992076830], [442198936502], [1488991970738], [183704767528]], "mperf_counts": [[552590145066], [443154012296], [1489825277872], [183737968404]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 23:56:58: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-02 23:56:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 23:56:59: INFO] 364 executions left in scheduler queue
[2019-08-02 23:56:59: INFO] Executions until ETA known: 1770
[2019-08-02 23:56:59: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-02 23:56:59: INFO] Estimated completion (next execution): 2019-08-03 00:13:17 (0:16:18 from now)
[2019-08-02 23:56:59: INFO] Reboot in preparation for next execution
[2019-08-03 00:03:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 00:03:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 00:03:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 00:03:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 00:03:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 00:03:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 00:04:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.856 s/op
Iteration   2: 2.338 s/op
Iteration   3: 2.211 s/op
Iteration   4: 2.033 s/op
Iteration   5: 2.085 s/op
Iteration   6: 2.015 s/op
Iteration   7: 1.976 s/op
Iteration   8: 2.002 s/op
Iteration   9: 1.995 s/op
Iteration  10: 1.995 s/op
Iteration  11: 1.994 s/op
Iteration  12: 1.977 s/op
Iteration  13: 1.998 s/op
Iteration  14: 1.965 s/op
Iteration  15: 2.011 s/op
Iteration  16: 2.003 s/op
Iteration  17: 2.000 s/op
Iteration  18: 1.977 s/op
Iteration  19: 1.979 s/op
Iteration  20: 1.989 s/op
Iteration  21: 2.006 s/op
Iteration  22: 1.999 s/op
Iteration  23: 2.009 s/op
Iteration  24: 2.009 s/op
Iteration  25: 1.996 s/op
Iteration  26: 2.003 s/op
Iteration  27: 1.995 s/op
Iteration  28: 2.030 s/op
Iteration  29: 2.034 s/op
Iteration  30: 2.032 s/op
Iteration  31: 2.034 s/op
Iteration  32: 2.003 s/op
Iteration  33: 2.006 s/op
Iteration  34: 2.015 s/op
Iteration  35: 2.024 s/op
Iteration  36: 2.025 s/op
Iteration  37: 1.995 s/op
Iteration  38: 2.022 s/op
Iteration  39: 2.003 s/op
Iteration  40: 2.012 s/op
Iteration  41: 2.028 s/op
Iteration  42: 2.026 s/op
Iteration  43: 2.022 s/op
Iteration  44: 2.029 s/op
Iteration  45: 1.992 s/op
Iteration  46: 2.013 s/op
Iteration  47: 2.002 s/op
Iteration  48: 1.999 s/op
Iteration  49: 2.005 s/op
Iteration  50: 1.982 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.035 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [1.900, 2.000) = 17 
    [2.000, 2.100) = 30 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.965 s/op
     p(50.0000) =      2.005 s/op
     p(90.0000) =      2.034 s/op
     p(95.0000) =      2.268 s/op
     p(99.0000) =      2.856 s/op
     p(99.9000) =      2.856 s/op
     p(99.9900) =      2.856 s/op
     p(99.9990) =      2.856 s/op
     p(99.9999) =      2.856 s/op
    p(100.0000) =      2.856 s/op


# Run complete. Total time: 00:01:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.035 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9_11.0.4_1564783391145.json
{"wallclock_times": [103.34761898400001], "core_cycle_counts": [[130021347240], [57719578183], [90246523428], [86668466433]], "aperf_counts": [[129713179223], [57661575165], [90160641771], [86599864881]], "mperf_counts": [[129727396724], [57661604970], [90160689370], [86599947812]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 00:04:54: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-03 00:04:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 00:04:55: INFO] 363 executions left in scheduler queue
[2019-08-03 00:04:55: INFO] Executions until ETA known: 1763
[2019-08-03 00:04:55: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-03 00:04:55: INFO] Estimated completion (next execution): 2019-08-03 00:09:09 (0:04:13 from now)
[2019-08-03 00:04:55: INFO] Reboot in preparation for next execution
[2019-08-03 00:09:50: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 00:09:50: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 00:09:50: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 00:09:50: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 00:09:50: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 00:09:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 00:12:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.705 s/op
Iteration   2: 3.579 s/op
Iteration   3: 3.575 s/op
Iteration   4: 3.382 s/op
Iteration   5: 3.457 s/op
Iteration   6: 3.383 s/op
Iteration   7: 3.427 s/op
Iteration   8: 3.361 s/op
Iteration   9: 3.383 s/op
Iteration  10: 3.285 s/op
Iteration  11: 3.253 s/op
Iteration  12: 3.305 s/op
Iteration  13: 3.268 s/op
Iteration  14: 3.324 s/op
Iteration  15: 3.282 s/op
Iteration  16: 3.324 s/op
Iteration  17: 3.289 s/op
Iteration  18: 3.273 s/op
Iteration  19: 3.285 s/op
Iteration  20: 3.311 s/op
Iteration  21: 3.318 s/op
Iteration  22: 3.298 s/op
Iteration  23: 3.321 s/op
Iteration  24: 3.318 s/op
Iteration  25: 3.260 s/op
Iteration  26: 3.281 s/op
Iteration  27: 3.271 s/op
Iteration  28: 3.268 s/op
Iteration  29: 3.319 s/op
Iteration  30: 3.315 s/op
Iteration  31: 3.304 s/op
Iteration  32: 3.255 s/op
Iteration  33: 3.298 s/op
Iteration  34: 3.271 s/op
Iteration  35: 3.257 s/op
Iteration  36: 3.250 s/op
Iteration  37: 3.280 s/op
Iteration  38: 3.245 s/op
Iteration  39: 3.264 s/op
Iteration  40: 3.285 s/op
Iteration  41: 3.268 s/op
Iteration  42: 3.198 s/op
Iteration  43: 3.243 s/op
Iteration  44: 3.267 s/op
Iteration  45: 3.264 s/op
Iteration  46: 3.262 s/op
Iteration  47: 3.266 s/op
Iteration  48: 3.270 s/op
Iteration  49: 3.293 s/op
Iteration  50: 3.239 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.314 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 1 
    [3.200, 3.250) = 3 
    [3.250, 3.300) = 27 
    [3.300, 3.350) = 10 
    [3.350, 3.400) = 4 
    [3.400, 3.450) = 1 
    [3.450, 3.500) = 1 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 2 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 1 
    [3.750, 3.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.198 s/op
     p(50.0000) =      3.285 s/op
     p(90.0000) =      3.423 s/op
     p(95.0000) =      3.577 s/op
     p(99.0000) =      3.705 s/op
     p(99.9000) =      3.705 s/op
     p(99.9900) =      3.705 s/op
     p(99.9990) =      3.705 s/op
     p(99.9999) =      3.705 s/op
    p(100.0000) =      3.705 s/op


# Run complete. Total time: 00:02:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.314 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9_11.0.4_1564783790795.json
{"wallclock_times": [167.16459473100002], "core_cycle_counts": [[138770274246], [169154075763], [158304528002], [99796779510]], "aperf_counts": [[138296003509], [169079181577], [158245771968], [99747630865]], "mperf_counts": [[138300410722], [169079940774], [158248308000], [99747627240]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 00:12:37: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-03 00:12:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 00:12:38: INFO] 362 executions left in scheduler queue
[2019-08-03 00:12:38: INFO] Executions until ETA known: 1751
[2019-08-03 00:12:38: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:12:38: INFO] Estimated completion (next execution): 2019-08-03 00:17:56 (0:05:17 from now)
[2019-08-03 00:12:38: INFO] Reboot in preparation for next execution
[2019-08-03 00:19:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.363 s/op
Iteration   2: 3.310 s/op
Iteration   3: 3.155 s/op
Iteration   4: 3.128 s/op
Iteration   5: 3.134 s/op
Iteration   6: 3.161 s/op
Iteration   7: 3.145 s/op
Iteration   8: 3.164 s/op
Iteration   9: 3.148 s/op
Iteration  10: 3.145 s/op
Iteration  11: 3.150 s/op
Iteration  12: 3.142 s/op
Iteration  13: 3.168 s/op
Iteration  14: 3.173 s/op
Iteration  15: 3.175 s/op
Iteration  16: 3.194 s/op
Iteration  17: 3.146 s/op
Iteration  18: 3.176 s/op
Iteration  19: 3.144 s/op
Iteration  20: 3.152 s/op
Iteration  21: 3.134 s/op
Iteration  22: 3.156 s/op
Iteration  23: 3.151 s/op
Iteration  24: 3.172 s/op
Iteration  25: 3.182 s/op
Iteration  26: 3.132 s/op
Iteration  27: 3.157 s/op
Iteration  28: 3.150 s/op
Iteration  29: 3.152 s/op
Iteration  30: 3.169 s/op
Iteration  31: 3.154 s/op
Iteration  32: 3.162 s/op
Iteration  33: 3.150 s/op
Iteration  34: 3.137 s/op
Iteration  35: 3.151 s/op
Iteration  36: 3.146 s/op
Iteration  37: 3.149 s/op
Iteration  38: 3.143 s/op
Iteration  39: 3.156 s/op
Iteration  40: 3.151 s/op
Iteration  41: 3.158 s/op
Iteration  42: 3.170 s/op
Iteration  43: 3.171 s/op
Iteration  44: 3.144 s/op
Iteration  45: 3.186 s/op
Iteration  46: 3.144 s/op
Iteration  47: 3.134 s/op
Iteration  48: 3.159 s/op
Iteration  49: 3.158 s/op
Iteration  50: 3.144 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.162 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 20 
    [3.150, 3.175) = 23 
    [3.175, 3.200) = 5 
    [3.200, 3.225) = 0 
    [3.225, 3.250) = 0 
    [3.250, 3.275) = 0 
    [3.275, 3.300) = 0 
    [3.300, 3.325) = 1 
    [3.325, 3.350) = 0 
    [3.350, 3.375) = 1 
    [3.375, 3.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.128 s/op
     p(50.0000) =      3.152 s/op
     p(90.0000) =      3.181 s/op
     p(95.0000) =      3.246 s/op
     p(99.0000) =      3.363 s/op
     p(99.9000) =      3.363 s/op
     p(99.9900) =      3.363 s/op
     p(99.9990) =      3.363 s/op
     p(99.9999) =      3.363 s/op
    p(100.0000) =      3.363 s/op


# Run complete. Total time: 00:02:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.162 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_graalvm-ee-19.1.1_1564784218060.json
{"wallclock_times": [159.08028826899996], "core_cycle_counts": [[110566782755], [166405608867], [131680732080], [112897903091]], "aperf_counts": [[110161932436], [166371181131], [131657564948], [112877883531]], "mperf_counts": [[110184574134], [166376786096], [131657756164], [112880808072]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 00:19:37: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:19:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 00:19:38: INFO] 361 executions left in scheduler queue
[2019-08-03 00:19:38: INFO] Executions until ETA known: 1746
[2019-08-03 00:19:38: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:19:38: INFO] Estimated completion (next execution): 2019-08-03 00:24:47 (0:05:09 from now)
[2019-08-03 00:19:38: INFO] Reboot in preparation for next execution
[2019-08-03 00:30:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.083 s/op
Iteration   2: 8.047 s/op
Iteration   3: 7.943 s/op
Iteration   4: 7.937 s/op
Iteration   5: 7.929 s/op
Iteration   6: 7.941 s/op
Iteration   7: 7.920 s/op
Iteration   8: 7.936 s/op
Iteration   9: 7.923 s/op
Iteration  10: 7.932 s/op
Iteration  11: 7.924 s/op
Iteration  12: 7.941 s/op
Iteration  13: 7.928 s/op
Iteration  14: 7.929 s/op
Iteration  15: 7.940 s/op
Iteration  16: 7.923 s/op
Iteration  17: 7.936 s/op
Iteration  18: 7.930 s/op
Iteration  19: 7.947 s/op
Iteration  20: 7.929 s/op
Iteration  21: 7.935 s/op
Iteration  22: 7.935 s/op
Iteration  23: 7.953 s/op
Iteration  24: 7.937 s/op
Iteration  25: 7.958 s/op
Iteration  26: 7.942 s/op
Iteration  27: 7.931 s/op
Iteration  28: 7.921 s/op
Iteration  29: 7.936 s/op
Iteration  30: 7.944 s/op
Iteration  31: 7.951 s/op
Iteration  32: 7.928 s/op
Iteration  33: 7.931 s/op
Iteration  34: 7.950 s/op
Iteration  35: 7.946 s/op
Iteration  36: 7.934 s/op
Iteration  37: 7.938 s/op
Iteration  38: 7.934 s/op
Iteration  39: 7.934 s/op
Iteration  40: 7.951 s/op
Iteration  41: 7.936 s/op
Iteration  42: 7.930 s/op
Iteration  43: 7.931 s/op
Iteration  44: 7.920 s/op
Iteration  45: 7.936 s/op
Iteration  46: 7.939 s/op
Iteration  47: 7.932 s/op
Iteration  48: 7.959 s/op
Iteration  49: 7.927 s/op
Iteration  50: 7.958 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.941 ?(99.9%) 0.014 s/op

  Histogram, s/op:
    [7.900, 7.913) = 0 
    [7.913, 7.925) = 6 
    [7.925, 7.938) = 25 
    [7.938, 7.950) = 11 
    [7.950, 7.963) = 6 
    [7.963, 7.975) = 0 
    [7.975, 7.988) = 0 
    [7.988, 8.000) = 0 
    [8.000, 8.013) = 0 
    [8.013, 8.025) = 0 
    [8.025, 8.038) = 0 
    [8.038, 8.050) = 1 
    [8.050, 8.063) = 0 
    [8.063, 8.075) = 0 
    [8.075, 8.088) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.920 s/op
     p(50.0000) =      7.936 s/op
     p(90.0000) =      7.958 s/op
     p(95.0000) =      7.998 s/op
     p(99.0000) =      8.083 s/op
     p(99.9000) =      8.083 s/op
     p(99.9900) =      8.083 s/op
     p(99.9990) =      8.083 s/op
     p(99.9999) =      8.083 s/op
    p(100.0000) =      8.083 s/op


# Run complete. Total time: 00:06:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.941 ? 0.014   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_graalvm-ee-19.1.1_1564784635692.json
{"wallclock_times": [397.98886780300006], "core_cycle_counts": [[386420690754], [206835545291], [358548033410], [330437206325]], "aperf_counts": [[385575417205], [206750347213], [358522384902], [330414194333]], "mperf_counts": [[385593466476], [206756827212], [358525403514], [330415789258]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 00:30:33: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:30:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 00:30:34: INFO] 360 executions left in scheduler queue
[2019-08-03 00:30:34: INFO] Executions until ETA known: 1744
[2019-08-03 00:30:34: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:30:34: INFO] Estimated completion (next execution): 2019-08-03 00:39:42 (0:09:08 from now)
[2019-08-03 00:30:34: INFO] Reboot in preparation for next execution
[2019-08-03 00:38:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.260 s/op
Iteration   2: 3.828 s/op
Iteration   3: 3.824 s/op
Iteration   4: 3.843 s/op
Iteration   5: 3.823 s/op
Iteration   6: 3.874 s/op
Iteration   7: 3.845 s/op
Iteration   8: 3.812 s/op
Iteration   9: 3.868 s/op
Iteration  10: 3.816 s/op
Iteration  11: 3.871 s/op
Iteration  12: 3.813 s/op
Iteration  13: 3.817 s/op
Iteration  14: 3.863 s/op
Iteration  15: 3.801 s/op
Iteration  16: 3.818 s/op
Iteration  17: 3.875 s/op
Iteration  18: 3.818 s/op
Iteration  19: 3.822 s/op
Iteration  20: 3.875 s/op
Iteration  21: 3.821 s/op
Iteration  22: 3.819 s/op
Iteration  23: 3.880 s/op
Iteration  24: 3.814 s/op
Iteration  25: 3.825 s/op
Iteration  26: 3.871 s/op
Iteration  27: 3.820 s/op
Iteration  28: 3.825 s/op
Iteration  29: 3.875 s/op
Iteration  30: 3.817 s/op
Iteration  31: 3.810 s/op
Iteration  32: 3.874 s/op
Iteration  33: 3.814 s/op
Iteration  34: 3.831 s/op
Iteration  35: 3.826 s/op
Iteration  36: 3.872 s/op
Iteration  37: 3.821 s/op
Iteration  38: 3.807 s/op
Iteration  39: 3.874 s/op
Iteration  40: 3.813 s/op
Iteration  41: 3.827 s/op
Iteration  42: 3.884 s/op
Iteration  43: 3.819 s/op
Iteration  44: 3.822 s/op
Iteration  45: 3.885 s/op
Iteration  46: 3.820 s/op
Iteration  47: 3.823 s/op
Iteration  48: 3.879 s/op
Iteration  49: 3.816 s/op
Iteration  50: 3.916 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.847 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [3.800, 3.825) = 26 
    [3.825, 3.850) = 7 
    [3.850, 3.875) = 10 
    [3.875, 3.900) = 5 
    [3.900, 3.925) = 1 
    [3.925, 3.950) = 0 
    [3.950, 3.975) = 0 
    [3.975, 4.000) = 0 
    [4.000, 4.025) = 0 
    [4.025, 4.050) = 0 
    [4.050, 4.075) = 0 
    [4.075, 4.100) = 0 
    [4.100, 4.125) = 0 
    [4.125, 4.150) = 0 
    [4.150, 4.175) = 0 
    [4.175, 4.200) = 0 
    [4.200, 4.225) = 0 
    [4.225, 4.250) = 0 
    [4.250, 4.275) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.801 s/op
     p(50.0000) =      3.824 s/op
     p(90.0000) =      3.880 s/op
     p(95.0000) =      3.899 s/op
     p(99.0000) =      4.260 s/op
     p(99.9000) =      4.260 s/op
     p(99.9900) =      4.260 s/op
     p(99.9990) =      4.260 s/op
     p(99.9999) =      4.260 s/op
    p(100.0000) =      4.260 s/op


# Run complete. Total time: 00:03:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.847 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_graalvm-ee-19.1.1_1564785292271.json
{"wallclock_times": [193.455441968], "core_cycle_counts": [[287612502816], [111305114883], [109579330899], [185877943176]], "aperf_counts": [[287232811882], [111229179524], [109527263005], [185833487583]], "mperf_counts": [[287249685982], [111230824480], [109528739710], [185839894984]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 00:38:05: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:38:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 00:38:06: INFO] 359 executions left in scheduler queue
[2019-08-03 00:38:06: INFO] Executions until ETA known: 1734
[2019-08-03 00:38:06: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:38:06: INFO] Estimated completion (next execution): 2019-08-03 00:43:50 (0:05:43 from now)
[2019-08-03 00:38:06: INFO] Reboot in preparation for next execution
[2019-08-03 00:48:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.091 s/op
Iteration   2: 6.952 s/op
Iteration   3: 6.842 s/op
Iteration   4: 6.863 s/op
Iteration   5: 6.842 s/op
Iteration   6: 6.853 s/op
Iteration   7: 6.824 s/op
Iteration   8: 6.835 s/op
Iteration   9: 6.821 s/op
Iteration  10: 6.846 s/op
Iteration  11: 6.851 s/op
Iteration  12: 6.833 s/op
Iteration  13: 6.815 s/op
Iteration  14: 6.858 s/op
Iteration  15: 6.865 s/op
Iteration  16: 6.852 s/op
Iteration  17: 6.814 s/op
Iteration  18: 6.806 s/op
Iteration  19: 6.821 s/op
Iteration  20: 6.806 s/op
Iteration  21: 6.865 s/op
Iteration  22: 6.814 s/op
Iteration  23: 6.792 s/op
Iteration  24: 6.834 s/op
Iteration  25: 6.831 s/op
Iteration  26: 6.815 s/op
Iteration  27: 6.829 s/op
Iteration  28: 6.870 s/op
Iteration  29: 6.778 s/op
Iteration  30: 6.830 s/op
Iteration  31: 6.810 s/op
Iteration  32: 6.803 s/op
Iteration  33: 6.767 s/op
Iteration  34: 6.829 s/op
Iteration  35: 6.845 s/op
Iteration  36: 6.844 s/op
Iteration  37: 6.831 s/op
Iteration  38: 6.857 s/op
Iteration  39: 6.852 s/op
Iteration  40: 6.834 s/op
Iteration  41: 6.793 s/op
Iteration  42: 6.818 s/op
Iteration  43: 6.786 s/op
Iteration  44: 6.834 s/op
Iteration  45: 6.813 s/op
Iteration  46: 6.822 s/op
Iteration  47: 6.795 s/op
Iteration  48: 6.836 s/op
Iteration  49: 6.857 s/op
Iteration  50: 6.824 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.836 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 1 
    [6.775, 6.800) = 5 
    [6.800, 6.825) = 15 
    [6.825, 6.850) = 16 
    [6.850, 6.875) = 11 
    [6.875, 6.900) = 0 
    [6.900, 6.925) = 0 
    [6.925, 6.950) = 0 
    [6.950, 6.975) = 1 
    [6.975, 7.000) = 0 
    [7.000, 7.025) = 0 
    [7.025, 7.050) = 0 
    [7.050, 7.075) = 0 
    [7.075, 7.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.767 s/op
     p(50.0000) =      6.831 s/op
     p(90.0000) =      6.865 s/op
     p(95.0000) =      6.907 s/op
     p(99.0000) =      7.091 s/op
     p(99.9000) =      7.091 s/op
     p(99.9900) =      7.091 s/op
     p(99.9990) =      7.091 s/op
     p(99.9999) =      7.091 s/op
    p(100.0000) =      7.091 s/op


# Run complete. Total time: 00:05:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.836 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_graalvm-ee-19.1.1_1564785748590.json
{"wallclock_times": [342.71273092600006], "core_cycle_counts": [[298633455186], [301413830916], [261441060422], [244781945596]], "aperf_counts": [[297850715932], [301342595753], [261414579054], [244758698689]], "mperf_counts": [[297868369114], [301346994076], [261414866208], [244758783014]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 00:48:11: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-03 00:48:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 00:48:12: INFO] 358 executions left in scheduler queue
[2019-08-03 00:48:12: INFO] Executions until ETA known: 1717
[2019-08-03 00:48:12: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 00:48:12: INFO] Estimated completion (next execution): 2019-08-03 00:56:25 (0:08:12 from now)
[2019-08-03 00:48:12: INFO] Reboot in preparation for next execution
[2019-08-03 00:53:27: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 00:59:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.639 s/op
Iteration   2: 7.936 s/op
Iteration   3: 7.792 s/op
Iteration   4: 8.061 s/op
Iteration   5: 7.808 s/op
Iteration   6: 7.765 s/op
Iteration   7: 7.728 s/op
Iteration   8: 7.714 s/op
Iteration   9: 7.601 s/op
Iteration  10: 7.685 s/op
Iteration  11: 7.615 s/op
Iteration  12: 7.664 s/op
Iteration  13: 7.672 s/op
Iteration  14: 7.718 s/op
Iteration  15: 7.688 s/op
Iteration  16: 7.675 s/op
Iteration  17: 7.655 s/op
Iteration  18: 7.696 s/op
Iteration  19: 7.663 s/op
Iteration  20: 7.699 s/op
Iteration  21: 7.633 s/op
Iteration  22: 7.593 s/op
Iteration  23: 7.697 s/op
Iteration  24: 7.674 s/op
Iteration  25: 7.678 s/op
Iteration  26: 7.623 s/op
Iteration  27: 7.654 s/op
Iteration  28: 7.661 s/op
Iteration  29: 7.679 s/op
Iteration  30: 7.674 s/op
Iteration  31: 7.649 s/op
Iteration  32: 7.686 s/op
Iteration  33: 7.740 s/op
Iteration  34: 7.697 s/op
Iteration  35: 7.718 s/op
Iteration  36: 7.710 s/op
Iteration  37: 7.700 s/op
Iteration  38: 7.688 s/op
Iteration  39: 7.739 s/op
Iteration  40: 7.699 s/op
Iteration  41: 7.604 s/op
Iteration  42: 7.673 s/op
Iteration  43: 7.682 s/op
Iteration  44: 7.661 s/op
Iteration  45: 7.696 s/op
Iteration  46: 7.694 s/op
Iteration  47: 7.662 s/op
Iteration  48: 7.693 s/op
Iteration  49: 7.628 s/op
Iteration  50: 7.667 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.715 ?(99.9%) 0.076 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 5 
    [7.625, 7.750) = 39 
    [7.750, 7.875) = 3 
    [7.875, 8.000) = 1 
    [8.000, 8.125) = 1 
    [8.125, 8.250) = 0 
    [8.250, 8.375) = 0 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 0 
    [8.625, 8.750) = 1 
    [8.750, 8.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.593 s/op
     p(50.0000) =      7.686 s/op
     p(90.0000) =      7.789 s/op
     p(95.0000) =      7.992 s/op
     p(99.0000) =      8.639 s/op
     p(99.9000) =      8.639 s/op
     p(99.9900) =      8.639 s/op
     p(99.9990) =      8.639 s/op
     p(99.9999) =      8.639 s/op
    p(100.0000) =      8.639 s/op


# Run complete. Total time: 00:06:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.715 ? 0.076   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9-8u222-b10_1564786407297.json
{"wallclock_times": [386.98408302400003], "core_cycle_counts": [[377619442580], [304653971551], [208371650823], [431194505275]], "aperf_counts": [[376636358499], [304489328386], [208292754260], [431140778554]], "mperf_counts": [[376640976008], [304491776882], [208296737032], [431141047950]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 00:59:54: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 00:59:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 00:59:55: INFO] 357 executions left in scheduler queue
[2019-08-03 00:59:55: INFO] Executions until ETA known: 1711
[2019-08-03 00:59:55: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 00:59:55: INFO] Estimated completion (next execution): 2019-08-03 01:08:52 (0:08:57 from now)
[2019-08-03 00:59:55: INFO] Reboot in preparation for next execution
[2019-08-03 01:04:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 01:09:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.490 s/op
Iteration   2: 7.212 s/op
Iteration   3: 6.220 s/op
Iteration   4: 5.867 s/op
Iteration   5: 5.953 s/op
Iteration   6: 5.839 s/op
Iteration   7: 5.784 s/op
Iteration   8: 5.875 s/op
Iteration   9: 5.809 s/op
Iteration  10: 5.848 s/op
Iteration  11: 5.885 s/op
Iteration  12: 5.809 s/op
Iteration  13: 5.757 s/op
Iteration  14: 5.779 s/op
Iteration  15: 5.885 s/op
Iteration  16: 5.861 s/op
Iteration  17: 5.831 s/op
Iteration  18: 5.968 s/op
Iteration  19: 5.811 s/op
Iteration  20: 5.768 s/op
Iteration  21: 5.912 s/op
Iteration  22: 5.968 s/op
Iteration  23: 5.823 s/op
Iteration  24: 5.833 s/op
Iteration  25: 5.801 s/op
Iteration  26: 5.822 s/op
Iteration  27: 5.916 s/op
Iteration  28: 5.847 s/op
Iteration  29: 5.812 s/op
Iteration  30: 5.781 s/op
Iteration  31: 5.839 s/op
Iteration  32: 5.941 s/op
Iteration  33: 5.841 s/op
Iteration  34: 5.932 s/op
Iteration  35: 5.770 s/op
Iteration  36: 5.763 s/op
Iteration  37: 5.904 s/op
Iteration  38: 5.869 s/op
Iteration  39: 5.895 s/op
Iteration  40: 5.931 s/op
Iteration  41: 5.742 s/op
Iteration  42: 5.850 s/op
Iteration  43: 5.852 s/op
Iteration  44: 5.879 s/op
Iteration  45: 5.824 s/op
Iteration  46: 5.839 s/op
Iteration  47: 5.851 s/op
Iteration  48: 5.856 s/op
Iteration  49: 5.864 s/op
Iteration  50: 5.831 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.917 ?(99.9%) 0.152 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 46 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.742 s/op
     p(50.0000) =      5.849 s/op
     p(90.0000) =      5.967 s/op
     p(95.0000) =      6.667 s/op
     p(99.0000) =      7.490 s/op
     p(99.9000) =      7.490 s/op
     p(99.9900) =      7.490 s/op
     p(99.9990) =      7.490 s/op
     p(99.9999) =      7.490 s/op
    p(100.0000) =      7.490 s/op


# Run complete. Total time: 00:04:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.917 ? 0.152   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9-8u222-b10_1564787097802.json
{"wallclock_times": [297.27576557], "core_cycle_counts": [[214236726422], [288396925923], [182641706866], [327832714274]], "aperf_counts": [[213424738139], [288307468288], [182556374751], [327749248747]], "mperf_counts": [[213426580866], [288308161860], [182556805128], [327750183114]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 01:09:55: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 01:09:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 01:09:56: INFO] 356 executions left in scheduler queue
[2019-08-03 01:09:56: INFO] Executions until ETA known: 1705
[2019-08-03 01:09:56: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 01:09:56: INFO] Estimated completion (next execution): 2019-08-03 01:17:23 (0:07:27 from now)
[2019-08-03 01:09:56: INFO] Reboot in preparation for next execution
[2019-08-03 01:14:39: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 01:19:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.887 s/op
Iteration   2: 5.832 s/op
Iteration   3: 5.414 s/op
Iteration   4: 5.448 s/op
Iteration   5: 5.406 s/op
Iteration   6: 5.289 s/op
Iteration   7: 5.262 s/op
Iteration   8: 5.322 s/op
Iteration   9: 5.218 s/op
Iteration  10: 5.206 s/op
Iteration  11: 5.178 s/op
Iteration  12: 5.186 s/op
Iteration  13: 5.351 s/op
Iteration  14: 5.269 s/op
Iteration  15: 5.237 s/op
Iteration  16: 5.232 s/op
Iteration  17: 5.194 s/op
Iteration  18: 5.237 s/op
Iteration  19: 5.224 s/op
Iteration  20: 5.207 s/op
Iteration  21: 5.232 s/op
Iteration  22: 5.276 s/op
Iteration  23: 5.209 s/op
Iteration  24: 5.218 s/op
Iteration  25: 5.198 s/op
Iteration  26: 5.258 s/op
Iteration  27: 5.185 s/op
Iteration  28: 5.247 s/op
Iteration  29: 5.243 s/op
Iteration  30: 5.215 s/op
Iteration  31: 5.213 s/op
Iteration  32: 5.188 s/op
Iteration  33: 5.164 s/op
Iteration  34: 5.242 s/op
Iteration  35: 5.217 s/op
Iteration  36: 5.221 s/op
Iteration  37: 5.203 s/op
Iteration  38: 5.232 s/op
Iteration  39: 5.215 s/op
Iteration  40: 5.214 s/op
Iteration  41: 5.209 s/op
Iteration  42: 5.272 s/op
Iteration  43: 5.258 s/op
Iteration  44: 5.224 s/op
Iteration  45: 5.232 s/op
Iteration  46: 5.211 s/op
Iteration  47: 5.196 s/op
Iteration  48: 5.206 s/op
Iteration  49: 5.227 s/op
Iteration  50: 5.242 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.285 ?(99.9%) 0.125 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 36 
    [5.250, 5.375) = 9 
    [5.375, 5.500) = 3 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 1 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.164 s/op
     p(50.0000) =      5.225 s/op
     p(90.0000) =      5.401 s/op
     p(95.0000) =      5.621 s/op
     p(99.0000) =      6.887 s/op
     p(99.9000) =      6.887 s/op
     p(99.9900) =      6.887 s/op
     p(99.9990) =      6.887 s/op
     p(99.9999) =      6.887 s/op
    p(100.0000) =      6.887 s/op


# Run complete. Total time: 00:04:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.285 ? 0.125   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9-8u222-b10_1564787679514.json
{"wallclock_times": [265.824336915], "core_cycle_counts": [[317044827408], [268179959925], [249180656978], [164195580409]], "aperf_counts": [[316337516935], [268046833650], [249043731908], [164058696518]], "mperf_counts": [[316339114848], [268046838508], [249045388500], [164058684434]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 01:19:05: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 01:19:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 01:19:06: INFO] 355 executions left in scheduler queue
[2019-08-03 01:19:06: INFO] Executions until ETA known: 1700
[2019-08-03 01:19:06: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 01:19:06: INFO] Estimated completion (next execution): 2019-08-03 01:26:02 (0:06:56 from now)
[2019-08-03 01:19:06: INFO] Reboot in preparation for next execution
[2019-08-03 01:24:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 01:33:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.821 s/op
Iteration   2: 11.380 s/op
Iteration   3: 11.560 s/op
Iteration   4: 11.324 s/op
Iteration   5: 12.469 s/op
Iteration   6: 12.397 s/op
Iteration   7: 11.186 s/op
Iteration   8: 11.245 s/op
Iteration   9: 11.113 s/op
Iteration  10: 11.182 s/op
Iteration  11: 11.971 s/op
Iteration  12: 11.137 s/op
Iteration  13: 12.004 s/op
Iteration  14: 11.959 s/op
Iteration  15: 11.006 s/op
Iteration  16: 10.993 s/op
Iteration  17: 11.008 s/op
Iteration  18: 10.949 s/op
Iteration  19: 10.929 s/op
Iteration  20: 10.859 s/op
Iteration  21: 10.893 s/op
Iteration  22: 10.856 s/op
Iteration  23: 10.871 s/op
Iteration  24: 10.909 s/op
Iteration  25: 11.755 s/op
Iteration  26: 10.915 s/op
Iteration  27: 11.734 s/op
Iteration  28: 11.777 s/op
Iteration  29: 10.909 s/op
Iteration  30: 10.871 s/op
Iteration  31: 11.861 s/op
Iteration  32: 11.723 s/op
Iteration  33: 10.881 s/op
Iteration  34: 10.897 s/op
Iteration  35: 10.887 s/op
Iteration  36: 10.953 s/op
Iteration  37: 10.862 s/op
Iteration  38: 10.894 s/op
Iteration  39: 10.988 s/op
Iteration  40: 10.934 s/op
Iteration  41: 11.919 s/op
Iteration  42: 10.963 s/op
Iteration  43: 11.941 s/op
Iteration  44: 10.888 s/op
Iteration  45: 10.945 s/op
Iteration  46: 12.026 s/op
Iteration  47: 10.889 s/op
Iteration  48: 11.866 s/op
Iteration  49: 10.878 s/op
Iteration  50: 10.937 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.302 ?(99.9%) 0.257 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 
    [10.750, 11.000) = 25 
    [11.000, 11.250) = 7 
    [11.250, 11.500) = 2 
    [11.500, 11.750) = 3 
    [11.750, 12.000) = 8 
    [12.000, 12.250) = 2 
    [12.250, 12.500) = 2 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.856 s/op
     p(50.0000) =     11.000 s/op
     p(90.0000) =     12.001 s/op
     p(95.0000) =     12.430 s/op
     p(99.0000) =     12.821 s/op
     p(99.9000) =     12.821 s/op
     p(99.9900) =     12.821 s/op
     p(99.9990) =     12.821 s/op
     p(99.9999) =     12.821 s/op
    p(100.0000) =     12.821 s/op


# Run complete. Total time: 00:09:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  11.302 ? 0.257   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9-8u222-b10_1564788240768.json
{"wallclock_times": [566.4693447279999], "core_cycle_counts": [[864385474517], [368483568027], [314838412794], [337024671090]], "aperf_counts": [[863326810548], [368320451995], [314567868858], [336902791604]], "mperf_counts": [[863330381654], [368321473356], [314568922858], [336902929486]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 01:33:27: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-03 01:33:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 01:33:28: INFO] 354 executions left in scheduler queue
[2019-08-03 01:33:28: INFO] Executions until ETA known: 1681
[2019-08-03 01:33:28: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-03 01:33:28: INFO] Estimated completion (next execution): 2019-08-03 01:45:24 (0:11:56 from now)
[2019-08-03 01:33:28: INFO] Reboot in preparation for next execution
[2019-08-03 01:37:53: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 01:37:53: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 01:37:53: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 01:37:53: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 01:37:53: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 01:39:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.313 s/op
Iteration   2: 2.105 s/op
Iteration   3: 2.068 s/op
Iteration   4: 1.830 s/op
Iteration   5: 2.013 s/op
Iteration   6: 1.993 s/op
Iteration   7: 2.024 s/op
Iteration   8: 1.997 s/op
Iteration   9: 2.017 s/op
Iteration  10: 2.004 s/op
Iteration  11: 1.988 s/op
Iteration  12: 1.992 s/op
Iteration  13: 1.987 s/op
Iteration  14: 1.960 s/op
Iteration  15: 1.832 s/op
Iteration  16: 1.993 s/op
Iteration  17: 1.988 s/op
Iteration  18: 1.979 s/op
Iteration  19: 1.970 s/op
Iteration  20: 1.939 s/op
Iteration  21: 1.988 s/op
Iteration  22: 1.980 s/op
Iteration  23: 1.944 s/op
Iteration  24: 1.936 s/op
Iteration  25: 1.988 s/op
Iteration  26: 1.979 s/op
Iteration  27: 1.825 s/op
Iteration  28: 1.936 s/op
Iteration  29: 1.987 s/op
Iteration  30: 1.978 s/op
Iteration  31: 1.873 s/op
Iteration  32: 1.938 s/op
Iteration  33: 1.986 s/op
Iteration  34: 1.980 s/op
Iteration  35: 1.828 s/op
Iteration  36: 1.937 s/op
Iteration  37: 1.988 s/op
Iteration  38: 1.980 s/op
Iteration  39: 1.962 s/op
Iteration  40: 1.934 s/op
Iteration  41: 1.987 s/op
Iteration  42: 1.980 s/op
Iteration  43: 1.939 s/op
Iteration  44: 1.991 s/op
Iteration  45: 1.987 s/op
Iteration  46: 1.981 s/op
Iteration  47: 1.824 s/op
Iteration  48: 1.957 s/op
Iteration  49: 1.986 s/op
Iteration  50: 1.982 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.971 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [1.800, 1.850) = 5 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 8 
    [1.950, 2.000) = 29 
    [2.000, 2.050) = 4 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.824 s/op
     p(50.0000) =      1.981 s/op
     p(90.0000) =      2.017 s/op
     p(95.0000) =      2.085 s/op
     p(99.0000) =      2.313 s/op
     p(99.9000) =      2.313 s/op
     p(99.9900) =      2.313 s/op
     p(99.9990) =      2.313 s/op
     p(99.9999) =      2.313 s/op
    p(100.0000) =      2.313 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.971 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot_11.0.4_1564789073592.json
{"wallclock_times": [99.61989543300001], "core_cycle_counts": [[39806664181], [142390456110], [93786591833], [25141401556]], "aperf_counts": [[39478692740], [142366233116], [93758776607], [25112917103]], "mperf_counts": [[43358734410], [159620394600], [104915536000], [28066936434]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 01:39:33: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-03 01:39:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 01:39:34: INFO] 353 executions left in scheduler queue
[2019-08-03 01:39:34: INFO] Executions until ETA known: 1661
[2019-08-03 01:39:34: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-03 01:39:34: INFO] Estimated completion (next execution): 2019-08-03 01:43:44 (0:04:09 from now)
[2019-08-03 01:39:34: INFO] Reboot in preparation for next execution
[2019-08-03 01:44:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 01:44:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 01:44:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 01:44:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 01:44:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 01:46:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.218 s/op
Iteration   2: 2.705 s/op
Iteration   3: 2.528 s/op
Iteration   4: 2.364 s/op
Iteration   5: 2.633 s/op
Iteration   6: 2.337 s/op
Iteration   7: 2.314 s/op
Iteration   8: 2.313 s/op
Iteration   9: 2.318 s/op
Iteration  10: 2.316 s/op
Iteration  11: 2.314 s/op
Iteration  12: 2.315 s/op
Iteration  13: 2.314 s/op
Iteration  14: 2.316 s/op
Iteration  15: 2.315 s/op
Iteration  16: 2.316 s/op
Iteration  17: 2.313 s/op
Iteration  18: 2.312 s/op
Iteration  19: 2.315 s/op
Iteration  20: 2.316 s/op
Iteration  21: 2.312 s/op
Iteration  22: 2.313 s/op
Iteration  23: 2.312 s/op
Iteration  24: 2.311 s/op
Iteration  25: 2.311 s/op
Iteration  26: 2.312 s/op
Iteration  27: 2.314 s/op
Iteration  28: 2.311 s/op
Iteration  29: 2.314 s/op
Iteration  30: 2.312 s/op
Iteration  31: 2.312 s/op
Iteration  32: 2.312 s/op
Iteration  33: 2.316 s/op
Iteration  34: 2.316 s/op
Iteration  35: 2.315 s/op
Iteration  36: 2.315 s/op
Iteration  37: 2.314 s/op
Iteration  38: 2.318 s/op
Iteration  39: 2.315 s/op
Iteration  40: 2.318 s/op
Iteration  41: 2.315 s/op
Iteration  42: 2.316 s/op
Iteration  43: 2.312 s/op
Iteration  44: 2.313 s/op
Iteration  45: 2.312 s/op
Iteration  46: 2.314 s/op
Iteration  47: 2.311 s/op
Iteration  48: 2.313 s/op
Iteration  49: 2.313 s/op
Iteration  50: 2.313 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.332 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 45 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.218 s/op
     p(50.0000) =      2.314 s/op
     p(90.0000) =      2.335 s/op
     p(95.0000) =      2.575 s/op
     p(99.0000) =      2.705 s/op
     p(99.9000) =      2.705 s/op
     p(99.9900) =      2.705 s/op
     p(99.9990) =      2.705 s/op
     p(99.9999) =      2.705 s/op
    p(100.0000) =      2.705 s/op


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.332 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot_11.0.4_1564789451286.json
{"wallclock_times": [117.610492685], "core_cycle_counts": [[68526191569], [131670845356], [86179624211], [101165327096]], "aperf_counts": [[68197407884], [131642391283], [86156721521], [101147013903]], "mperf_counts": [[68544414756], [131686303386], [86189405766], [101192178920]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 01:46:08: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-03 01:46:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 01:46:09: INFO] 352 executions left in scheduler queue
[2019-08-03 01:46:09: INFO] Executions until ETA known: 1652
[2019-08-03 01:46:09: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 01:46:09: INFO] Estimated completion (next execution): 2019-08-03 01:50:37 (0:04:27 from now)
[2019-08-03 01:46:09: INFO] Reboot in preparation for next execution
[2019-08-03 01:50:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 01:50:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 01:50:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 01:50:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 01:50:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 01:57:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.309 s/op
Iteration   2: 8.313 s/op
Iteration   3: 8.148 s/op
Iteration   4: 7.923 s/op
Iteration   5: 7.966 s/op
Iteration   6: 7.969 s/op
Iteration   7: 7.982 s/op
Iteration   8: 7.949 s/op
Iteration   9: 7.993 s/op
Iteration  10: 7.955 s/op
Iteration  11: 7.941 s/op
Iteration  12: 7.945 s/op
Iteration  13: 7.953 s/op
Iteration  14: 7.945 s/op
Iteration  15: 7.927 s/op
Iteration  16: 7.944 s/op
Iteration  17: 7.980 s/op
Iteration  18: 7.940 s/op
Iteration  19: 7.945 s/op
Iteration  20: 7.938 s/op
Iteration  21: 7.933 s/op
Iteration  22: 7.967 s/op
Iteration  23: 7.911 s/op
Iteration  24: 7.919 s/op
Iteration  25: 7.890 s/op
Iteration  26: 7.890 s/op
Iteration  27: 7.969 s/op
Iteration  28: 7.858 s/op
Iteration  29: 7.952 s/op
Iteration  30: 7.861 s/op
Iteration  31: 7.959 s/op
Iteration  32: 7.859 s/op
Iteration  33: 7.870 s/op
Iteration  34: 7.912 s/op
Iteration  35: 7.937 s/op
Iteration  36: 7.923 s/op
Iteration  37: 7.922 s/op
Iteration  38: 7.937 s/op
Iteration  39: 7.944 s/op
Iteration  40: 7.932 s/op
Iteration  41: 7.959 s/op
Iteration  42: 7.929 s/op
Iteration  43: 7.933 s/op
Iteration  44: 7.933 s/op
Iteration  45: 7.935 s/op
Iteration  46: 7.941 s/op
Iteration  47: 7.931 s/op
Iteration  48: 7.938 s/op
Iteration  49: 7.943 s/op
Iteration  50: 7.889 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.953 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [7.800, 7.850) = 0 
    [7.850, 7.900) = 7 
    [7.900, 7.950) = 28 
    [7.950, 8.000) = 12 
    [8.000, 8.050) = 0 
    [8.050, 8.100) = 0 
    [8.100, 8.150) = 1 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 0 
    [8.300, 8.350) = 2 

  Percentiles, s/op:
      p(0.0000) =      7.858 s/op
     p(50.0000) =      7.939 s/op
     p(90.0000) =      7.982 s/op
     p(95.0000) =      8.221 s/op
     p(99.0000) =      8.313 s/op
     p(99.9000) =      8.313 s/op
     p(99.9900) =      8.313 s/op
     p(99.9990) =      8.313 s/op
     p(99.9999) =      8.313 s/op
    p(100.0000) =      8.313 s/op


# Run complete. Total time: 00:06:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.953 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot_11.0.4_1564789821563.json
{"wallclock_times": [398.81922952499997], "core_cycle_counts": [[354446423014], [335744569524], [471742420985], [261555995580]], "aperf_counts": [[353458698627], [335640363804], [471682429991], [261498741392]], "mperf_counts": [[353720377298], [335731283470], [471869031214], [261532873684]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 01:57:00: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 01:57:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 01:57:01: INFO] 351 executions left in scheduler queue
[2019-08-03 01:57:01: INFO] Executions until ETA known: 1633
[2019-08-03 01:57:01: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 01:57:01: INFO] Estimated completion (next execution): 2019-08-03 02:06:10 (0:09:09 from now)
[2019-08-03 01:57:01: INFO] Reboot in preparation for next execution
[2019-08-03 02:01:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 02:01:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 02:01:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 02:01:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 02:01:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 02:12:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.785 s/op
Iteration   2: 13.314 s/op
Iteration   3: 12.634 s/op
Iteration   4: 12.606 s/op
Iteration   5: 12.603 s/op
Iteration   6: 12.597 s/op
Iteration   7: 12.586 s/op
Iteration   8: 12.619 s/op
Iteration   9: 12.546 s/op
Iteration  10: 12.581 s/op
Iteration  11: 12.580 s/op
Iteration  12: 12.580 s/op
Iteration  13: 12.599 s/op
Iteration  14: 12.601 s/op
Iteration  15: 12.561 s/op
Iteration  16: 12.626 s/op
Iteration  17: 12.643 s/op
Iteration  18: 12.602 s/op
Iteration  19: 12.583 s/op
Iteration  20: 12.579 s/op
Iteration  21: 12.615 s/op
Iteration  22: 12.598 s/op
Iteration  23: 12.579 s/op
Iteration  24: 12.581 s/op
Iteration  25: 12.566 s/op
Iteration  26: 12.575 s/op
Iteration  27: 12.621 s/op
Iteration  28: 12.636 s/op
Iteration  29: 12.582 s/op
Iteration  30: 12.597 s/op
Iteration  31: 12.568 s/op
Iteration  32: 12.580 s/op
Iteration  33: 12.578 s/op
Iteration  34: 12.591 s/op
Iteration  35: 12.609 s/op
Iteration  36: 12.613 s/op
Iteration  37: 12.579 s/op
Iteration  38: 12.583 s/op
Iteration  39: 12.593 s/op
Iteration  40: 12.584 s/op
Iteration  41: 12.575 s/op
Iteration  42: 12.566 s/op
Iteration  43: 12.598 s/op
Iteration  44: 12.616 s/op
Iteration  45: 12.663 s/op
Iteration  46: 12.594 s/op
Iteration  47: 12.585 s/op
Iteration  48: 12.590 s/op
Iteration  49: 12.638 s/op
Iteration  50: 12.584 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.613 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [12.500, 12.550) = 1 
    [12.550, 12.600) = 31 
    [12.600, 12.650) = 15 
    [12.650, 12.700) = 1 
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 1 
    [12.800, 12.850) = 0 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 0 
    [12.950, 13.000) = 0 
    [13.000, 13.050) = 0 
    [13.050, 13.100) = 0 
    [13.100, 13.150) = 0 
    [13.150, 13.200) = 0 
    [13.200, 13.250) = 0 
    [13.250, 13.300) = 0 
    [13.300, 13.350) = 1 
    [13.350, 13.400) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.546 s/op
     p(50.0000) =     12.592 s/op
     p(90.0000) =     12.638 s/op
     p(95.0000) =     12.718 s/op
     p(99.0000) =     13.314 s/op
     p(99.9000) =     13.314 s/op
     p(99.9900) =     13.314 s/op
     p(99.9990) =     13.314 s/op
     p(99.9999) =     13.314 s/op
    p(100.0000) =     13.314 s/op


# Run complete. Total time: 00:10:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.613 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot_11.0.4_1564790517204.json
{"wallclock_times": [631.704740454], "core_cycle_counts": [[188897780022], [399959371224], [416199706844], [1037262992600]], "aperf_counts": [[187047872352], [399848039047], [416135306053], [1037209733931]], "mperf_counts": [[187233329306], [399934458234], [416171852016], [1037275180912]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 02:12:28: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 02:12:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 02:12:29: INFO] 350 executions left in scheduler queue
[2019-08-03 02:12:29: INFO] Executions until ETA known: 1627
[2019-08-03 02:12:29: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 02:12:29: INFO] Estimated completion (next execution): 2019-08-03 02:25:31 (0:13:01 from now)
[2019-08-03 02:12:29: INFO] Reboot in preparation for next execution
[2019-08-03 02:17:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 02:17:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 02:17:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 02:17:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 02:17:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 02:24:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.835 s/op
Iteration   2: 8.912 s/op
Iteration   3: 8.919 s/op
Iteration   4: 8.515 s/op
Iteration   5: 8.615 s/op
Iteration   6: 8.567 s/op
Iteration   7: 8.550 s/op
Iteration   8: 8.496 s/op
Iteration   9: 8.544 s/op
Iteration  10: 8.544 s/op
Iteration  11: 8.600 s/op
Iteration  12: 8.628 s/op
Iteration  13: 8.532 s/op
Iteration  14: 8.625 s/op
Iteration  15: 8.587 s/op
Iteration  16: 8.621 s/op
Iteration  17: 8.608 s/op
Iteration  18: 8.604 s/op
Iteration  19: 8.584 s/op
Iteration  20: 8.600 s/op
Iteration  21: 8.621 s/op
Iteration  22: 8.605 s/op
Iteration  23: 8.612 s/op
Iteration  24: 8.616 s/op
Iteration  25: 8.545 s/op
Iteration  26: 8.629 s/op
Iteration  27: 8.609 s/op
Iteration  28: 8.606 s/op
Iteration  29: 8.589 s/op
Iteration  30: 8.621 s/op
Iteration  31: 8.614 s/op
Iteration  32: 8.651 s/op
Iteration  33: 8.607 s/op
Iteration  34: 8.628 s/op
Iteration  35: 8.600 s/op
Iteration  36: 8.650 s/op
Iteration  37: 8.664 s/op
Iteration  38: 8.625 s/op
Iteration  39: 8.611 s/op
Iteration  40: 8.612 s/op
Iteration  41: 8.627 s/op
Iteration  42: 8.608 s/op
Iteration  43: 8.652 s/op
Iteration  44: 8.643 s/op
Iteration  45: 8.636 s/op
Iteration  46: 8.599 s/op
Iteration  47: 8.662 s/op
Iteration  48: 8.650 s/op
Iteration  49: 8.628 s/op
Iteration  50: 8.597 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.622 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [8.400, 8.450) = 0 
    [8.450, 8.500) = 1 
    [8.500, 8.550) = 5 
    [8.550, 8.600) = 8 
    [8.600, 8.650) = 28 
    [8.650, 8.700) = 5 
    [8.700, 8.750) = 0 
    [8.750, 8.800) = 0 
    [8.800, 8.850) = 1 
    [8.850, 8.900) = 0 
    [8.900, 8.950) = 2 

  Percentiles, s/op:
      p(0.0000) =      8.496 s/op
     p(50.0000) =      8.612 s/op
     p(90.0000) =      8.661 s/op
     p(95.0000) =      8.870 s/op
     p(99.0000) =      8.919 s/op
     p(99.9000) =      8.919 s/op
     p(99.9900) =      8.919 s/op
     p(99.9990) =      8.919 s/op
     p(99.9999) =      8.919 s/op
    p(100.0000) =      8.919 s/op


# Run complete. Total time: 00:07:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.622 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot_11.0.4_1564791422053.json
{"wallclock_times": [432.24647828900004], "core_cycle_counts": [[149045686498], [310984038818], [299119667666], [474084803513]], "aperf_counts": [[147800042929], [310903282860], [299066716156], [474034258694]], "mperf_counts": [[167572994788], [354132657798], [340827994660], [540976941852]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 02:24:14: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 02:24:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 02:24:15: INFO] 349 executions left in scheduler queue
[2019-08-03 02:24:15: INFO] Executions until ETA known: 1625
[2019-08-03 02:24:15: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 02:24:15: INFO] Estimated completion (next execution): 2019-08-03 02:33:57 (0:09:42 from now)
[2019-08-03 02:24:15: INFO] Reboot in preparation for next execution
[2019-08-03 02:28:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 02:28:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 02:28:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 02:28:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 02:28:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 02:43:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.086 s/op
Iteration   2: 17.867 s/op
Iteration   3: 17.894 s/op
Iteration   4: 17.519 s/op
Iteration   5: 17.580 s/op
Iteration   6: 17.555 s/op
Iteration   7: 17.725 s/op
Iteration   8: 17.616 s/op
Iteration   9: 17.603 s/op
Iteration  10: 17.682 s/op
Iteration  11: 17.500 s/op
Iteration  12: 17.499 s/op
Iteration  13: 17.605 s/op
Iteration  14: 17.536 s/op
Iteration  15: 17.744 s/op
Iteration  16: 17.560 s/op
Iteration  17: 17.545 s/op
Iteration  18: 17.625 s/op
Iteration  19: 17.576 s/op
Iteration  20: 17.555 s/op
Iteration  21: 17.563 s/op
Iteration  22: 17.636 s/op
Iteration  23: 17.635 s/op
Iteration  24: 17.584 s/op
Iteration  25: 17.551 s/op
Iteration  26: 17.526 s/op
Iteration  27: 17.609 s/op
Iteration  28: 17.549 s/op
Iteration  29: 17.544 s/op
Iteration  30: 17.574 s/op
Iteration  31: 17.573 s/op
Iteration  32: 17.528 s/op
Iteration  33: 17.532 s/op
Iteration  34: 17.530 s/op
Iteration  35: 18.554 s/op
Iteration  36: 17.726 s/op
Iteration  37: 17.599 s/op
Iteration  38: 17.612 s/op
Iteration  39: 17.541 s/op
Iteration  40: 17.542 s/op
Iteration  41: 17.642 s/op
Iteration  42: 17.544 s/op
Iteration  43: 17.577 s/op
Iteration  44: 17.676 s/op
Iteration  45: 17.530 s/op
Iteration  46: 17.572 s/op
Iteration  47: 17.500 s/op
Iteration  48: 17.529 s/op
Iteration  49: 17.625 s/op
Iteration  50: 17.593 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.603 ?(99.9%) 0.087 s/op

  Histogram, s/op:
    [17.000, 17.125) = 1 
    [17.125, 17.250) = 0 
    [17.250, 17.375) = 0 
    [17.375, 17.500) = 2 
    [17.500, 17.625) = 36 
    [17.625, 17.750) = 8 
    [17.750, 17.875) = 1 
    [17.875, 18.000) = 1 
    [18.000, 18.125) = 0 
    [18.125, 18.250) = 0 
    [18.250, 18.375) = 0 
    [18.375, 18.500) = 0 
    [18.500, 18.625) = 1 
    [18.625, 18.750) = 0 
    [18.750, 18.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.086 s/op
     p(50.0000) =     17.574 s/op
     p(90.0000) =     17.726 s/op
     p(95.0000) =     17.879 s/op
     p(99.0000) =     18.554 s/op
     p(99.9000) =     18.554 s/op
     p(99.9900) =     18.554 s/op
     p(99.9990) =     18.554 s/op
     p(99.9999) =     18.554 s/op
    p(100.0000) =     18.554 s/op


# Run complete. Total time: 00:14:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.603 ? 0.087   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot_11.0.4_1564792119659.json
{"wallclock_times": [881.2517265460001], "core_cycle_counts": [[413001290426], [1075787373201], [344247533587], [1009366765667]], "aperf_counts": [[410567294374], [1075644301356], [344169089506], [1009289231444]], "mperf_counts": [[410859127726], [1076002513306], [344213419248], [1009333280048]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 02:43:20: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-03 02:43:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 02:43:21: INFO] 348 executions left in scheduler queue
[2019-08-03 02:43:21: INFO] Executions until ETA known: 1598
[2019-08-03 02:43:21: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-08-03 02:43:21: INFO] Estimated completion (next execution): 2019-08-03 03:00:33 (0:17:11 from now)
[2019-08-03 02:43:21: INFO] Reboot in preparation for next execution
[2019-08-03 02:47:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 02:47:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 02:47:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 02:47:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 02:47:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 02:47:37: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 03:02:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 20.531 s/op
Iteration   2: 18.077 s/op
Iteration   3: 17.667 s/op
Iteration   4: 17.541 s/op
Iteration   5: 17.536 s/op
Iteration   6: 17.538 s/op
Iteration   7: 17.529 s/op
Iteration   8: 17.475 s/op
Iteration   9: 17.485 s/op
Iteration  10: 17.476 s/op
Iteration  11: 17.504 s/op
Iteration  12: 17.511 s/op
Iteration  13: 17.495 s/op
Iteration  14: 17.496 s/op
Iteration  15: 17.702 s/op
Iteration  16: 17.649 s/op
Iteration  17: 17.522 s/op
Iteration  18: 17.553 s/op
Iteration  19: 17.511 s/op
Iteration  20: 17.495 s/op
Iteration  21: 17.483 s/op
Iteration  22: 17.522 s/op
Iteration  23: 17.564 s/op
Iteration  24: 17.693 s/op
Iteration  25: 17.571 s/op
Iteration  26: 17.511 s/op
Iteration  27: 17.510 s/op
Iteration  28: 17.516 s/op
Iteration  29: 17.630 s/op
Iteration  30: 17.529 s/op
Iteration  31: 17.499 s/op
Iteration  32: 17.660 s/op
Iteration  33: 17.512 s/op
Iteration  34: 17.507 s/op
Iteration  35: 17.543 s/op
Iteration  36: 17.495 s/op
Iteration  37: 17.459 s/op
Iteration  38: 17.456 s/op
Iteration  39: 17.512 s/op
Iteration  40: 17.548 s/op
Iteration  41: 17.479 s/op
Iteration  42: 17.513 s/op
Iteration  43: 17.488 s/op
Iteration  44: 17.518 s/op
Iteration  45: 17.507 s/op
Iteration  46: 17.505 s/op
Iteration  47: 17.524 s/op
Iteration  48: 17.558 s/op
Iteration  49: 17.488 s/op
Iteration  50: 17.467 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     17.601 ?(99.9%) 0.215 s/op

  Histogram, s/op:
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 15 
    [17.500, 17.750) = 33 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 1 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 
    [18.750, 19.000) = 0 
    [19.000, 19.250) = 0 
    [19.250, 19.500) = 0 
    [19.500, 19.750) = 0 
    [19.750, 20.000) = 0 
    [20.000, 20.250) = 0 
    [20.250, 20.500) = 0 
    [20.500, 20.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     17.456 s/op
     p(50.0000) =     17.513 s/op
     p(90.0000) =     17.667 s/op
     p(95.0000) =     17.870 s/op
     p(99.0000) =     20.531 s/op
     p(99.9000) =     20.531 s/op
     p(99.9900) =     20.531 s/op
     p(99.9990) =     20.531 s/op
     p(99.9999) =     20.531 s/op
    p(100.0000) =     20.531 s/op


# Run complete. Total time: 00:14:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  17.601 ? 0.215   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9_11.0.4_1564793256854.json
{"wallclock_times": [881.5796867290001], "core_cycle_counts": [[439889277429], [489892877736], [794393140982], [1133128786771]], "aperf_counts": [[437277380968], [489756543381], [794235798642], [1133007362545]], "mperf_counts": [[437285974960], [489757481310], [794235791670], [1133007398060]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 03:02:18: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-08-03 03:02:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 03:02:19: INFO] 347 executions left in scheduler queue
[2019-08-03 03:02:19: INFO] Executions until ETA known: 1568
[2019-08-03 03:02:19: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-08-03 03:02:19: INFO] Estimated completion (next execution): 2019-08-03 03:19:31 (0:17:12 from now)
[2019-08-03 03:02:19: INFO] Reboot in preparation for next execution
[2019-08-03 03:06:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 03:06:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 03:06:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 03:06:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 03:06:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 03:06:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 03:18:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.402 s/op
Iteration   2: 15.462 s/op
Iteration   3: 15.340 s/op
Iteration   4: 14.679 s/op
Iteration   5: 15.044 s/op
Iteration   6: 15.264 s/op
Iteration   7: 14.859 s/op
Iteration   8: 15.509 s/op
Iteration   9: 14.597 s/op
Iteration  10: 15.425 s/op
Iteration  11: 14.911 s/op
Iteration  12: 14.657 s/op
Iteration  13: 14.565 s/op
Iteration  14: 14.693 s/op
Iteration  15: 14.190 s/op
Iteration  16: 14.549 s/op
Iteration  17: 14.346 s/op
Iteration  18: 14.488 s/op
Iteration  19: 14.457 s/op
Iteration  20: 14.392 s/op
Iteration  21: 14.337 s/op
Iteration  22: 14.509 s/op
Iteration  23: 15.044 s/op
Iteration  24: 15.403 s/op
Iteration  25: 14.967 s/op
Iteration  26: 14.079 s/op
Iteration  27: 14.697 s/op
Iteration  28: 14.389 s/op
Iteration  29: 14.395 s/op
Iteration  30: 14.627 s/op
Iteration  31: 15.201 s/op
Iteration  32: 14.424 s/op
Iteration  33: 15.495 s/op
Iteration  34: 14.472 s/op
Iteration  35: 14.694 s/op
Iteration  36: 14.413 s/op
Iteration  37: 14.650 s/op
Iteration  38: 14.800 s/op
Iteration  39: 14.375 s/op
Iteration  40: 15.102 s/op
Iteration  41: 14.476 s/op
Iteration  42: 14.934 s/op
Iteration  43: 14.699 s/op
Iteration  44: 14.776 s/op
Iteration  45: 14.767 s/op
Iteration  46: 14.794 s/op
Iteration  47: 14.427 s/op
Iteration  48: 14.738 s/op
Iteration  49: 14.609 s/op
Iteration  50: 14.513 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.753 ?(99.9%) 0.183 s/op

  Histogram, s/op:
    [14.000, 14.125) = 1 
    [14.125, 14.250) = 1 
    [14.250, 14.375) = 3 
    [14.375, 14.500) = 10 
    [14.500, 14.625) = 6 
    [14.625, 14.750) = 9 
    [14.750, 14.875) = 5 
    [14.875, 15.000) = 3 
    [15.000, 15.125) = 3 
    [15.125, 15.250) = 1 
    [15.250, 15.375) = 2 
    [15.375, 15.500) = 5 
    [15.500, 15.625) = 1 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.079 s/op
     p(50.0000) =     14.686 s/op
     p(90.0000) =     15.403 s/op
     p(95.0000) =     15.477 s/op
     p(99.0000) =     15.509 s/op
     p(99.9000) =     15.509 s/op
     p(99.9900) =     15.509 s/op
     p(99.9990) =     15.509 s/op
     p(99.9999) =     15.509 s/op
    p(100.0000) =     15.509 s/op


# Run complete. Total time: 00:12:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.753 ? 0.183   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9_11.0.4_1564794392066.json
{"wallclock_times": [739.322135644], "core_cycle_counts": [[537794204039], [677148609262], [619994996782], [867547542104]], "aperf_counts": [[535748962311], [676983250515], [619841846079], [867433600785]], "mperf_counts": [[535752493296], [676983302996], [619841803168], [867433618376]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 03:18:51: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-08-03 03:18:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 03:18:52: INFO] 346 executions left in scheduler queue
[2019-08-03 03:18:52: INFO] Executions until ETA known: 1532
[2019-08-03 03:18:52: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-08-03 03:18:52: INFO] Estimated completion (next execution): 2019-08-03 03:33:42 (0:14:49 from now)
[2019-08-03 03:18:52: INFO] Reboot in preparation for next execution
[2019-08-03 03:23:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 03:23:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 03:23:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 03:23:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 03:23:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 03:23:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 03:38:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.011 s/op
Iteration   2: 18.787 s/op
Iteration   3: 18.838 s/op
Iteration   4: 18.084 s/op
Iteration   5: 18.679 s/op
Iteration   6: 18.944 s/op
Iteration   7: 18.912 s/op
Iteration   8: 18.582 s/op
Iteration   9: 18.609 s/op
Iteration  10: 18.772 s/op
Iteration  11: 18.308 s/op
Iteration  12: 18.554 s/op
Iteration  13: 18.572 s/op
Iteration  14: 17.986 s/op
Iteration  15: 18.791 s/op
Iteration  16: 18.785 s/op
Iteration  17: 17.922 s/op
Iteration  18: 18.705 s/op
Iteration  19: 18.818 s/op
Iteration  20: 17.437 s/op
Iteration  21: 17.746 s/op
Iteration  22: 18.805 s/op
Iteration  23: 18.518 s/op
Iteration  24: 18.571 s/op
Iteration  25: 18.976 s/op
Iteration  26: 18.532 s/op
Iteration  27: 18.167 s/op
Iteration  28: 18.701 s/op
Iteration  29: 18.518 s/op
Iteration  30: 18.825 s/op
Iteration  31: 18.557 s/op
Iteration  32: 18.761 s/op
Iteration  33: 18.544 s/op
Iteration  34: 18.654 s/op
Iteration  35: 18.714 s/op
Iteration  36: 18.353 s/op
Iteration  37: 18.452 s/op
Iteration  38: 18.477 s/op
Iteration  39: 18.379 s/op
Iteration  40: 18.421 s/op
Iteration  41: 18.460 s/op
Iteration  42: 17.996 s/op
Iteration  43: 18.657 s/op
Iteration  44: 18.192 s/op
Iteration  45: 18.696 s/op
Iteration  46: 18.633 s/op
Iteration  47: 16.996 s/op
Iteration  48: 18.164 s/op
Iteration  49: 18.731 s/op
Iteration  50: 17.943 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     18.465 ?(99.9%) 0.195 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 1 
    [17.500, 17.750) = 1 
    [17.750, 18.000) = 4 
    [18.000, 18.250) = 5 
    [18.250, 18.500) = 7 
    [18.500, 18.750) = 19 

  Percentiles, s/op:
      p(0.0000) =     16.996 s/op
     p(50.0000) =     18.564 s/op
     p(90.0000) =     18.824 s/op
     p(95.0000) =     18.926 s/op
     p(99.0000) =     18.976 s/op
     p(99.9000) =     18.976 s/op
     p(99.9900) =     18.976 s/op
     p(99.9990) =     18.976 s/op
     p(99.9999) =     18.976 s/op
    p(100.0000) =     18.976 s/op


# Run complete. Total time: 00:15:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  18.465 ? 0.195   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9_12.0.1_1564795393810.json
{"wallclock_times": [925.0430125370001], "core_cycle_counts": [[624734259197], [1062354840197], [840806788728], [1032105544947]], "aperf_counts": [[622155705772], [1062170733607], [840643127388], [1031954329563]], "mperf_counts": [[622165915840], [1062171042790], [840647447900], [1031954523988]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 03:38:38: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-08-03 03:38:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 03:38:39: INFO] 345 executions left in scheduler queue
[2019-08-03 03:38:39: INFO] Executions until ETA known: 1500
[2019-08-03 03:38:39: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-08-03 03:38:39: INFO] Estimated completion (next execution): 2019-08-03 03:56:35 (0:17:55 from now)
[2019-08-03 03:38:39: INFO] Reboot in preparation for next execution
[2019-08-03 03:43:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 03:43:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 03:43:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 03:43:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 03:43:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 03:54:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.584 s/op
Iteration   2: 13.980 s/op
Iteration   3: 13.952 s/op
Iteration   4: 14.039 s/op
Iteration   5: 13.947 s/op
Iteration   6: 14.017 s/op
Iteration   7: 13.899 s/op
Iteration   8: 13.839 s/op
Iteration   9: 13.937 s/op
Iteration  10: 13.869 s/op
Iteration  11: 13.861 s/op
Iteration  12: 14.042 s/op
Iteration  13: 13.860 s/op
Iteration  14: 13.905 s/op
Iteration  15: 13.910 s/op
Iteration  16: 13.864 s/op
Iteration  17: 13.947 s/op
Iteration  18: 13.855 s/op
Iteration  19: 13.812 s/op
Iteration  20: 13.922 s/op
Iteration  21: 13.840 s/op
Iteration  22: 13.861 s/op
Iteration  23: 13.860 s/op
Iteration  24: 13.980 s/op
Iteration  25: 13.842 s/op
Iteration  26: 13.796 s/op
Iteration  27: 13.945 s/op
Iteration  28: 13.794 s/op
Iteration  29: 14.035 s/op
Iteration  30: 13.848 s/op
Iteration  31: 13.839 s/op
Iteration  32: 13.903 s/op
Iteration  33: 13.815 s/op
Iteration  34: 13.864 s/op
Iteration  35: 13.834 s/op
Iteration  36: 13.832 s/op
Iteration  37: 13.832 s/op
Iteration  38: 13.889 s/op
Iteration  39: 13.913 s/op
Iteration  40: 13.840 s/op
Iteration  41: 13.836 s/op
Iteration  42: 13.849 s/op
Iteration  43: 13.824 s/op
Iteration  44: 13.910 s/op
Iteration  45: 13.803 s/op
Iteration  46: 13.875 s/op
Iteration  47: 13.877 s/op
Iteration  48: 13.827 s/op
Iteration  49: 13.984 s/op
Iteration  50: 13.877 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     13.901 ?(99.9%) 0.058 s/op

  Histogram, s/op:
    [13.700, 13.750) = 0 
    [13.750, 13.800) = 2 
    [13.800, 13.850) = 16 
    [13.850, 13.900) = 13 
    [13.900, 13.950) = 10 
    [13.950, 14.000) = 4 
    [14.000, 14.050) = 4 
    [14.050, 14.100) = 0 
    [14.100, 14.150) = 0 
    [14.150, 14.200) = 0 
    [14.200, 14.250) = 0 
    [14.250, 14.300) = 0 
    [14.300, 14.350) = 0 
    [14.350, 14.400) = 0 
    [14.400, 14.450) = 0 
    [14.450, 14.500) = 0 
    [14.500, 14.550) = 0 
    [14.550, 14.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.794 s/op
     p(50.0000) =     13.867 s/op
     p(90.0000) =     14.014 s/op
     p(95.0000) =     14.041 s/op
     p(99.0000) =     14.584 s/op
     p(99.9000) =     14.584 s/op
     p(99.9900) =     14.584 s/op
     p(99.9990) =     14.584 s/op
     p(99.9999) =     14.584 s/op
    p(100.0000) =     14.584 s/op


# Run complete. Total time: 00:11:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.901 ? 0.058   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot_11.0.4_1564796587465.json
{"wallclock_times": [696.1238244829999], "core_cycle_counts": [[720023201499], [647465913504], [808953711090], [346618185799]], "aperf_counts": [[718326625269], [647237387510], [808812037818], [346493674818]], "mperf_counts": [[720955929884], [649144754146], [811546511762], [347249852752]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 03:54:43: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-08-03 03:54:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 03:54:44: INFO] 344 executions left in scheduler queue
[2019-08-03 03:54:44: INFO] Executions until ETA known: 1474
[2019-08-03 03:54:44: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-03 03:54:44: INFO] Estimated completion (next execution): 2019-08-03 04:08:51 (0:14:06 from now)
[2019-08-03 03:54:44: INFO] Reboot in preparation for next execution
[2019-08-03 03:58:56: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 03:58:56: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 03:58:56: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 03:58:56: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 03:58:56: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 04:00:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.164 s/op
Iteration   2: 2.221 s/op
Iteration   3: 2.107 s/op
Iteration   4: 2.196 s/op
Iteration   5: 2.216 s/op
Iteration   6: 2.313 s/op
Iteration   7: 2.168 s/op
Iteration   8: 2.147 s/op
Iteration   9: 2.145 s/op
Iteration  10: 2.146 s/op
Iteration  11: 2.148 s/op
Iteration  12: 2.130 s/op
Iteration  13: 2.128 s/op
Iteration  14: 2.133 s/op
Iteration  15: 2.141 s/op
Iteration  16: 2.131 s/op
Iteration  17: 2.133 s/op
Iteration  18: 2.130 s/op
Iteration  19: 2.137 s/op
Iteration  20: 2.130 s/op
Iteration  21: 2.128 s/op
Iteration  22: 2.134 s/op
Iteration  23: 2.137 s/op
Iteration  24: 2.129 s/op
Iteration  25: 2.126 s/op
Iteration  26: 2.130 s/op
Iteration  27: 2.134 s/op
Iteration  28: 2.130 s/op
Iteration  29: 2.127 s/op
Iteration  30: 2.129 s/op
Iteration  31: 2.132 s/op
Iteration  32: 2.132 s/op
Iteration  33: 2.131 s/op
Iteration  34: 2.129 s/op
Iteration  35: 2.134 s/op
Iteration  36: 2.131 s/op
Iteration  37: 2.127 s/op
Iteration  38: 2.129 s/op
Iteration  39: 2.136 s/op
Iteration  40: 2.136 s/op
Iteration  41: 2.132 s/op
Iteration  42: 2.130 s/op
Iteration  43: 2.135 s/op
Iteration  44: 2.133 s/op
Iteration  45: 2.135 s/op
Iteration  46: 2.132 s/op
Iteration  47: 2.073 s/op
Iteration  48: 2.129 s/op
Iteration  49: 2.127 s/op
Iteration  50: 2.121 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.141 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [2.000, 2.025) = 0 
    [2.025, 2.050) = 0 
    [2.050, 2.075) = 1 
    [2.075, 2.100) = 0 
    [2.100, 2.125) = 2 
    [2.125, 2.150) = 41 
    [2.150, 2.175) = 2 
    [2.175, 2.200) = 1 
    [2.200, 2.225) = 2 
    [2.225, 2.250) = 0 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 0 
    [2.300, 2.325) = 1 
    [2.325, 2.350) = 0 
    [2.350, 2.375) = 0 
    [2.375, 2.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.073 s/op
     p(50.0000) =      2.132 s/op
     p(90.0000) =      2.168 s/op
     p(95.0000) =      2.218 s/op
     p(99.0000) =      2.313 s/op
     p(99.9000) =      2.313 s/op
     p(99.9900) =      2.313 s/op
     p(99.9990) =      2.313 s/op
     p(99.9999) =      2.313 s/op
    p(100.0000) =      2.313 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.141 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot_12.0.2_1564797536429.json
{"wallclock_times": [108.06062604900004], "core_cycle_counts": [[83100587456], [57298027491], [115255057673], [63232472501]], "aperf_counts": [[82773498282], [57256708557], [115233523440], [63214216586]], "mperf_counts": [[93917287258], [64783655130], [130804073216], [71773669576]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 04:00:44: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-03 04:00:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 04:00:45: INFO] 343 executions left in scheduler queue
[2019-08-03 04:00:45: INFO] Executions until ETA known: 1464
[2019-08-03 04:00:45: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-03 04:00:45: INFO] Estimated completion (next execution): 2019-08-03 04:05:03 (0:04:18 from now)
[2019-08-03 04:00:45: INFO] Reboot in preparation for next execution
[2019-08-03 04:04:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 04:04:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 04:04:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 04:04:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 04:04:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 04:06:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.173 s/op
Iteration   2: 1.920 s/op
Iteration   3: 2.040 s/op
Iteration   4: 2.067 s/op
Iteration   5: 2.223 s/op
Iteration   6: 1.930 s/op
Iteration   7: 1.911 s/op
Iteration   8: 1.912 s/op
Iteration   9: 1.907 s/op
Iteration  10: 1.908 s/op
Iteration  11: 1.909 s/op
Iteration  12: 1.907 s/op
Iteration  13: 1.908 s/op
Iteration  14: 1.907 s/op
Iteration  15: 1.913 s/op
Iteration  16: 1.909 s/op
Iteration  17: 1.912 s/op
Iteration  18: 1.910 s/op
Iteration  19: 1.908 s/op
Iteration  20: 1.908 s/op
Iteration  21: 1.910 s/op
Iteration  22: 1.909 s/op
Iteration  23: 1.908 s/op
Iteration  24: 1.907 s/op
Iteration  25: 1.912 s/op
Iteration  26: 1.910 s/op
Iteration  27: 1.910 s/op
Iteration  28: 1.911 s/op
Iteration  29: 1.909 s/op
Iteration  30: 1.912 s/op
Iteration  31: 1.906 s/op
Iteration  32: 1.907 s/op
Iteration  33: 1.909 s/op
Iteration  34: 1.911 s/op
Iteration  35: 1.909 s/op
Iteration  36: 1.907 s/op
Iteration  37: 1.910 s/op
Iteration  38: 1.913 s/op
Iteration  39: 1.908 s/op
Iteration  40: 1.912 s/op
Iteration  41: 1.905 s/op
Iteration  42: 1.908 s/op
Iteration  43: 1.907 s/op
Iteration  44: 1.906 s/op
Iteration  45: 1.906 s/op
Iteration  46: 1.906 s/op
Iteration  47: 1.909 s/op
Iteration  48: 1.910 s/op
Iteration  49: 1.908 s/op
Iteration  50: 1.907 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.927 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [1.900, 1.925) = 45 
    [1.925, 1.950) = 1 
    [1.950, 1.975) = 0 
    [1.975, 2.000) = 0 
    [2.000, 2.025) = 0 
    [2.025, 2.050) = 1 
    [2.050, 2.075) = 1 
    [2.075, 2.100) = 0 
    [2.100, 2.125) = 0 
    [2.125, 2.150) = 0 
    [2.150, 2.175) = 1 
    [2.175, 2.200) = 0 
    [2.200, 2.225) = 1 
    [2.225, 2.250) = 0 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.905 s/op
     p(50.0000) =      1.909 s/op
     p(90.0000) =      1.929 s/op
     p(95.0000) =      2.115 s/op
     p(99.0000) =      2.223 s/op
     p(99.9000) =      2.223 s/op
     p(99.9900) =      2.223 s/op
     p(99.9990) =      2.223 s/op
     p(99.9999) =      2.223 s/op
    p(100.0000) =      2.223 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.927 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot_12.0.2_1564797898584.json
{"wallclock_times": [97.31675935700002], "core_cycle_counts": [[63307446968], [50949079844], [143518733038], [63241748978]], "aperf_counts": [[63040268447], [50917646913], [143501338331], [63225736564]], "mperf_counts": [[63668341240], [51045460200], [143645281796], [63322147740]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 04:06:35: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-03 04:06:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 04:06:36: INFO] 342 executions left in scheduler queue
[2019-08-03 04:06:36: INFO] Executions until ETA known: 1448
[2019-08-03 04:06:36: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-08-03 04:06:36: INFO] Estimated completion (next execution): 2019-08-03 04:10:44 (0:04:07 from now)
[2019-08-03 04:06:36: INFO] Reboot in preparation for next execution
[2019-08-03 04:10:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 04:10:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 04:10:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 04:10:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 04:10:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 04:10:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 04:24:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.846 s/op
Iteration   2: 16.980 s/op
Iteration   3: 16.391 s/op
Iteration   4: 17.178 s/op
Iteration   5: 16.484 s/op
Iteration   6: 16.911 s/op
Iteration   7: 17.207 s/op
Iteration   8: 17.105 s/op
Iteration   9: 17.052 s/op
Iteration  10: 16.885 s/op
Iteration  11: 16.892 s/op
Iteration  12: 16.315 s/op
Iteration  13: 17.250 s/op
Iteration  14: 16.479 s/op
Iteration  15: 17.184 s/op
Iteration  16: 16.244 s/op
Iteration  17: 16.253 s/op
Iteration  18: 16.694 s/op
Iteration  19: 17.054 s/op
Iteration  20: 16.948 s/op
Iteration  21: 16.747 s/op
Iteration  22: 16.445 s/op
Iteration  23: 16.892 s/op
Iteration  24: 17.030 s/op
Iteration  25: 17.055 s/op
Iteration  26: 17.010 s/op
Iteration  27: 16.986 s/op
Iteration  28: 16.867 s/op
Iteration  29: 17.049 s/op
Iteration  30: 16.982 s/op
Iteration  31: 17.005 s/op
Iteration  32: 17.056 s/op
Iteration  33: 15.958 s/op
Iteration  34: 16.946 s/op
Iteration  35: 16.288 s/op
Iteration  36: 16.862 s/op
Iteration  37: 16.627 s/op
Iteration  38: 16.920 s/op
Iteration  39: 16.042 s/op
Iteration  40: 16.924 s/op
Iteration  41: 17.000 s/op
Iteration  42: 16.563 s/op
Iteration  43: 17.023 s/op
Iteration  44: 16.867 s/op
Iteration  45: 16.579 s/op
Iteration  46: 16.986 s/op
Iteration  47: 17.069 s/op
Iteration  48: 16.562 s/op
Iteration  49: 16.373 s/op
Iteration  50: 16.757 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.796 ?(99.9%) 0.157 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 2 
    [16.250, 16.500) = 8 
    [16.500, 16.750) = 6 
    [16.750, 17.000) = 18 
    [17.000, 17.250) = 15 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.958 s/op
     p(50.0000) =     16.902 s/op
     p(90.0000) =     17.102 s/op
     p(95.0000) =     17.194 s/op
     p(99.0000) =     17.250 s/op
     p(99.9000) =     17.250 s/op
     p(99.9900) =     17.250 s/op
     p(99.9990) =     17.250 s/op
     p(99.9999) =     17.250 s/op
    p(100.0000) =     17.250 s/op


# Run complete. Total time: 00:14:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.796 ? 0.157   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9_11.0.4_1564798249580.json
{"wallclock_times": [841.592591839], "core_cycle_counts": [[629907052880], [806886944468], [794978614669], [786601509789]], "aperf_counts": [[627633906011], [806758263534], [794759132269], [786435562843]], "mperf_counts": [[627638782774], [806761222806], [794759185364], [786436309470]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 04:24:51: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-08-03 04:24:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 04:24:52: INFO] 341 executions left in scheduler queue
[2019-08-03 04:24:52: INFO] Executions until ETA known: 1416
[2019-08-03 04:24:52: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-08-03 04:24:52: INFO] Estimated completion (next execution): 2019-08-03 04:41:24 (0:16:32 from now)
[2019-08-03 04:24:52: INFO] Reboot in preparation for next execution
[2019-08-03 04:29:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 04:29:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 04:29:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 04:29:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 04:29:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 04:29:05: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 04:43:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.436 s/op
Iteration   2: 17.307 s/op
Iteration   3: 17.518 s/op
Iteration   4: 17.522 s/op
Iteration   5: 17.158 s/op
Iteration   6: 16.535 s/op
Iteration   7: 17.402 s/op
Iteration   8: 17.466 s/op
Iteration   9: 16.070 s/op
Iteration  10: 17.225 s/op
Iteration  11: 17.540 s/op
Iteration  12: 17.434 s/op
Iteration  13: 17.775 s/op
Iteration  14: 17.073 s/op
Iteration  15: 17.267 s/op
Iteration  16: 17.204 s/op
Iteration  17: 17.084 s/op
Iteration  18: 17.262 s/op
Iteration  19: 17.372 s/op
Iteration  20: 17.224 s/op
Iteration  21: 17.107 s/op
Iteration  22: 17.392 s/op
Iteration  23: 16.603 s/op
Iteration  24: 17.327 s/op
Iteration  25: 17.519 s/op
Iteration  26: 16.454 s/op
Iteration  27: 16.995 s/op
Iteration  28: 15.996 s/op
Iteration  29: 17.328 s/op
Iteration  30: 17.419 s/op
Iteration  31: 17.273 s/op
Iteration  32: 17.306 s/op
Iteration  33: 17.319 s/op
Iteration  34: 17.346 s/op
Iteration  35: 17.388 s/op
Iteration  36: 16.760 s/op
Iteration  37: 17.553 s/op
Iteration  38: 16.344 s/op
Iteration  39: 17.164 s/op
Iteration  40: 17.134 s/op
Iteration  41: 17.334 s/op
Iteration  42: 17.313 s/op
Iteration  43: 17.121 s/op
Iteration  44: 16.239 s/op
Iteration  45: 17.334 s/op
Iteration  46: 17.293 s/op
Iteration  47: 17.304 s/op
Iteration  48: 17.313 s/op
Iteration  49: 17.462 s/op
Iteration  50: 16.541 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.137 ?(99.9%) 0.204 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 2 
    [16.250, 16.500) = 3 
    [16.500, 16.750) = 3 
    [16.750, 17.000) = 2 
    [17.000, 17.250) = 10 
    [17.250, 17.500) = 23 
    [17.500, 17.750) = 5 

  Percentiles, s/op:
      p(0.0000) =     15.996 s/op
     p(50.0000) =     17.298 s/op
     p(90.0000) =     17.519 s/op
     p(95.0000) =     17.546 s/op
     p(99.0000) =     17.775 s/op
     p(99.9000) =     17.775 s/op
     p(99.9900) =     17.775 s/op
     p(99.9990) =     17.775 s/op
     p(99.9999) =     17.775 s/op
    p(100.0000) =     17.775 s/op


# Run complete. Total time: 00:14:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.137 ? 0.204   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9_12.0.1_1564799345730.json
{"wallclock_times": [858.615708577], "core_cycle_counts": [[648863548403], [860050769273], [875060749092], [683013205957]], "aperf_counts": [[646548908728], [859859527336], [874896431195], [682856896838]], "mperf_counts": [[646548967062], [859859853366], [874896593276], [682858300746]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 04:43:24: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-08-03 04:43:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 04:43:25: INFO] 340 executions left in scheduler queue
[2019-08-03 04:43:25: INFO] Executions until ETA known: 1398
[2019-08-03 04:43:25: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-08-03 04:43:25: INFO] Estimated completion (next execution): 2019-08-03 05:00:14 (0:16:49 from now)
[2019-08-03 04:43:25: INFO] Reboot in preparation for next execution
[2019-08-03 04:47:38: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 05:01:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.215 s/op
Iteration   2: 15.816 s/op
Iteration   3: 15.772 s/op
Iteration   4: 16.499 s/op
Iteration   5: 16.371 s/op
Iteration   6: 16.300 s/op
Iteration   7: 16.307 s/op
Iteration   8: 16.182 s/op
Iteration   9: 15.893 s/op
Iteration  10: 16.281 s/op
Iteration  11: 16.149 s/op
Iteration  12: 16.181 s/op
Iteration  13: 15.558 s/op
Iteration  14: 15.970 s/op
Iteration  15: 15.463 s/op
Iteration  16: 16.130 s/op
Iteration  17: 16.363 s/op
Iteration  18: 16.367 s/op
Iteration  19: 15.171 s/op
Iteration  20: 16.199 s/op
Iteration  21: 16.315 s/op
Iteration  22: 16.387 s/op
Iteration  23: 16.251 s/op
Iteration  24: 16.138 s/op
Iteration  25: 16.405 s/op
Iteration  26: 16.340 s/op
Iteration  27: 15.812 s/op
Iteration  28: 16.404 s/op
Iteration  29: 15.822 s/op
Iteration  30: 16.257 s/op
Iteration  31: 16.237 s/op
Iteration  32: 16.529 s/op
Iteration  33: 16.345 s/op
Iteration  34: 14.781 s/op
Iteration  35: 16.497 s/op
Iteration  36: 15.307 s/op
Iteration  37: 15.655 s/op
Iteration  38: 16.056 s/op
Iteration  39: 16.193 s/op
Iteration  40: 16.212 s/op
Iteration  41: 16.289 s/op
Iteration  42: 16.146 s/op
Iteration  43: 16.355 s/op
Iteration  44: 16.177 s/op
Iteration  45: 16.282 s/op
Iteration  46: 16.234 s/op
Iteration  47: 16.481 s/op
Iteration  48: 16.377 s/op
Iteration  49: 16.475 s/op
Iteration  50: 15.836 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.116 ?(99.9%) 0.180 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 1 
    [15.000, 15.250) = 1 
    [15.250, 15.500) = 2 
    [15.500, 15.750) = 2 
    [15.750, 16.000) = 7 
    [16.000, 16.250) = 14 
    [16.250, 16.500) = 22 
    [16.500, 16.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.781 s/op
     p(50.0000) =     16.224 s/op
     p(90.0000) =     16.468 s/op
     p(95.0000) =     16.498 s/op
     p(99.0000) =     16.529 s/op
     p(99.9000) =     16.529 s/op
     p(99.9900) =     16.529 s/op
     p(99.9990) =     16.529 s/op
     p(99.9999) =     16.529 s/op
    p(100.0000) =     16.529 s/op


# Run complete. Total time: 00:13:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.116 ? 0.180   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9-8u222-b10_1564800458527.json
{"wallclock_times": [807.1517019150001], "core_cycle_counts": [[406796184536], [760838359736], [678038720412], [1036125235594]], "aperf_counts": [[404341182787], [760666743120], [677901196465], [1036001334849]], "mperf_counts": [[404341173918], [760666715588], [677903876560], [1036002715712]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 05:01:05: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-08-03 05:01:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 05:01:06: INFO] 339 executions left in scheduler queue
[2019-08-03 05:01:06: INFO] Executions until ETA known: 1338
[2019-08-03 05:01:06: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-08-03 05:01:06: INFO] Estimated completion (next execution): 2019-08-03 05:17:04 (0:15:57 from now)
[2019-08-03 05:01:06: INFO] Reboot in preparation for next execution
[2019-08-03 05:05:19: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 05:05:19: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 05:05:19: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 05:05:19: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 05:05:19: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 05:10:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.777 s/op
Iteration   2: 6.899 s/op
Iteration   3: 6.699 s/op
Iteration   4: 6.674 s/op
Iteration   5: 6.675 s/op
Iteration   6: 6.673 s/op
Iteration   7: 6.687 s/op
Iteration   8: 6.690 s/op
Iteration   9: 6.687 s/op
Iteration  10: 6.686 s/op
Iteration  11: 6.678 s/op
Iteration  12: 6.680 s/op
Iteration  13: 6.679 s/op
Iteration  14: 6.676 s/op
Iteration  15: 6.675 s/op
Iteration  16: 6.678 s/op
Iteration  17: 6.689 s/op
Iteration  18: 6.681 s/op
Iteration  19: 6.676 s/op
Iteration  20: 6.689 s/op
Iteration  21: 6.700 s/op
Iteration  22: 6.680 s/op
Iteration  23: 6.686 s/op
Iteration  24: 6.699 s/op
Iteration  25: 6.687 s/op
Iteration  26: 6.686 s/op
Iteration  27: 6.689 s/op
Iteration  28: 6.690 s/op
Iteration  29: 6.686 s/op
Iteration  30: 6.681 s/op
Iteration  31: 6.684 s/op
Iteration  32: 6.688 s/op
Iteration  33: 6.685 s/op
Iteration  34: 6.684 s/op
Iteration  35: 6.685 s/op
Iteration  36: 6.680 s/op
Iteration  37: 6.678 s/op
Iteration  38: 6.683 s/op
Iteration  39: 6.674 s/op
Iteration  40: 6.677 s/op
Iteration  41: 6.679 s/op
Iteration  42: 6.675 s/op
Iteration  43: 6.674 s/op
Iteration  44: 6.689 s/op
Iteration  45: 6.685 s/op
Iteration  46: 6.678 s/op
Iteration  47: 6.674 s/op
Iteration  48: 6.682 s/op
Iteration  49: 6.689 s/op
Iteration  50: 6.688 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.689 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [6.600, 6.625) = 0 
    [6.625, 6.650) = 0 
    [6.650, 6.675) = 5 
    [6.675, 6.700) = 42 
    [6.700, 6.725) = 1 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 0 
    [6.775, 6.800) = 1 
    [6.800, 6.825) = 0 
    [6.825, 6.850) = 0 
    [6.850, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.673 s/op
     p(50.0000) =      6.684 s/op
     p(90.0000) =      6.698 s/op
     p(95.0000) =      6.735 s/op
     p(99.0000) =      6.899 s/op
     p(99.9000) =      6.899 s/op
     p(99.9900) =      6.899 s/op
     p(99.9990) =      6.899 s/op
     p(99.9999) =      6.899 s/op
    p(100.0000) =      6.899 s/op


# Run complete. Total time: 00:05:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.689 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot_11.0.4_1564801519542.json
{"wallclock_times": [335.458933117], "core_cycle_counts": [[210490580470], [311471860173], [309573419952], [249536070400]], "aperf_counts": [[209600255088], [311360085241], [309486788002], [249480632100]], "mperf_counts": [[210341732354], [312057021942], [310194464968], [250217428044]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 05:10:55: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-08-03 05:10:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 05:10:55: INFO] 338 executions left in scheduler queue
[2019-08-03 05:10:55: INFO] Executions until ETA known: 1324
[2019-08-03 05:10:55: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-08-03 05:10:55: INFO] Estimated completion (next execution): 2019-08-03 05:19:01 (0:08:05 from now)
[2019-08-03 05:10:55: INFO] Reboot in preparation for next execution
[2019-08-03 05:15:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 05:15:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 05:15:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 05:15:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 05:15:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 05:20:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.122 s/op
Iteration   2: 6.824 s/op
Iteration   3: 6.464 s/op
Iteration   4: 6.478 s/op
Iteration   5: 6.473 s/op
Iteration   6: 6.472 s/op
Iteration   7: 6.467 s/op
Iteration   8: 6.473 s/op
Iteration   9: 6.470 s/op
Iteration  10: 6.476 s/op
Iteration  11: 6.463 s/op
Iteration  12: 6.470 s/op
Iteration  13: 6.467 s/op
Iteration  14: 6.465 s/op
Iteration  15: 6.475 s/op
Iteration  16: 6.472 s/op
Iteration  17: 6.462 s/op
Iteration  18: 6.460 s/op
Iteration  19: 6.460 s/op
Iteration  20: 6.459 s/op
Iteration  21: 6.461 s/op
Iteration  22: 6.468 s/op
Iteration  23: 6.464 s/op
Iteration  24: 6.454 s/op
Iteration  25: 6.460 s/op
Iteration  26: 6.455 s/op
Iteration  27: 6.462 s/op
Iteration  28: 6.462 s/op
Iteration  29: 6.464 s/op
Iteration  30: 6.459 s/op
Iteration  31: 6.455 s/op
Iteration  32: 6.461 s/op
Iteration  33: 6.460 s/op
Iteration  34: 6.457 s/op
Iteration  35: 6.462 s/op
Iteration  36: 6.462 s/op
Iteration  37: 6.463 s/op
Iteration  38: 6.465 s/op
Iteration  39: 6.463 s/op
Iteration  40: 6.457 s/op
Iteration  41: 6.460 s/op
Iteration  42: 6.459 s/op
Iteration  43: 6.456 s/op
Iteration  44: 6.456 s/op
Iteration  45: 6.456 s/op
Iteration  46: 6.463 s/op
Iteration  47: 6.462 s/op
Iteration  48: 6.462 s/op
Iteration  49: 6.462 s/op
Iteration  50: 6.472 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.484 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 48 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 1 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.454 s/op
     p(50.0000) =      6.462 s/op
     p(90.0000) =      6.474 s/op
     p(95.0000) =      6.634 s/op
     p(99.0000) =      7.122 s/op
     p(99.9000) =      7.122 s/op
     p(99.9900) =      7.122 s/op
     p(99.9990) =      7.122 s/op
     p(99.9999) =      7.122 s/op
    p(100.0000) =      7.122 s/op


# Run complete. Total time: 00:05:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.484 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot_11.0.4_1564802110937.json
{"wallclock_times": [325.192142862], "core_cycle_counts": [[70268423254], [30302040716], [468901127245], [481778483360]], "aperf_counts": [[69253886523], [30224137496], [468866694873], [481733590866]], "mperf_counts": [[69578705428], [30275880912], [469037777182], [482110027700]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 05:20:36: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-08-03 05:20:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 05:20:37: INFO] 337 executions left in scheduler queue
[2019-08-03 05:20:37: INFO] Executions until ETA known: 1280
[2019-08-03 05:20:37: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-08-03 05:20:37: INFO] Estimated completion (next execution): 2019-08-03 05:28:32 (0:07:55 from now)
[2019-08-03 05:20:37: INFO] Reboot in preparation for next execution
[2019-08-03 05:24:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 05:37:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.844 s/op
Iteration   2: 15.165 s/op
Iteration   3: 14.938 s/op
Iteration   4: 14.685 s/op
Iteration   5: 15.122 s/op
Iteration   6: 16.013 s/op
Iteration   7: 15.087 s/op
Iteration   8: 14.680 s/op
Iteration   9: 14.987 s/op
Iteration  10: 14.939 s/op
Iteration  11: 15.501 s/op
Iteration  12: 15.762 s/op
Iteration  13: 15.118 s/op
Iteration  14: 15.278 s/op
Iteration  15: 14.829 s/op
Iteration  16: 14.748 s/op
Iteration  17: 15.121 s/op
Iteration  18: 14.874 s/op
Iteration  19: 15.286 s/op
Iteration  20: 15.292 s/op
Iteration  21: 14.557 s/op
Iteration  22: 14.506 s/op
Iteration  23: 14.776 s/op
Iteration  24: 14.348 s/op
Iteration  25: 14.715 s/op
Iteration  26: 14.952 s/op
Iteration  27: 14.574 s/op
Iteration  28: 14.689 s/op
Iteration  29: 14.747 s/op
Iteration  30: 15.125 s/op
Iteration  31: 14.818 s/op
Iteration  32: 15.619 s/op
Iteration  33: 14.851 s/op
Iteration  34: 14.272 s/op
Iteration  35: 14.226 s/op
Iteration  36: 15.135 s/op
Iteration  37: 15.333 s/op
Iteration  38: 14.267 s/op
Iteration  39: 14.207 s/op
Iteration  40: 14.165 s/op
Iteration  41: 14.997 s/op
Iteration  42: 14.141 s/op
Iteration  43: 14.390 s/op
Iteration  44: 14.225 s/op
Iteration  45: 14.202 s/op
Iteration  46: 15.436 s/op
Iteration  47: 14.594 s/op
Iteration  48: 14.758 s/op
Iteration  49: 14.803 s/op
Iteration  50: 14.426 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.862 ?(99.9%) 0.227 s/op

  Histogram, s/op:
    [14.000, 14.250) = 6 
    [14.250, 14.500) = 5 
    [14.500, 14.750) = 10 
    [14.750, 15.000) = 12 
    [15.000, 15.250) = 7 
    [15.250, 15.500) = 5 
    [15.500, 15.750) = 2 
    [15.750, 16.000) = 2 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.141 s/op
     p(50.0000) =     14.823 s/op
     p(90.0000) =     15.494 s/op
     p(95.0000) =     15.799 s/op
     p(99.0000) =     16.013 s/op
     p(99.9000) =     16.013 s/op
     p(99.9900) =     16.013 s/op
     p(99.9990) =     16.013 s/op
     p(99.9999) =     16.013 s/op
    p(100.0000) =     16.013 s/op


# Run complete. Total time: 00:12:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.862 ? 0.227   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9-8u222-b10_1564802691358.json
{"wallclock_times": [744.5087547449999], "core_cycle_counts": [[731021948944], [651474515968], [698925863106], [600572830099]], "aperf_counts": [[729174719215], [651291838787], [698791255978], [600344791289]], "mperf_counts": [[729180504730], [651300738600], [698791336130], [600344826530]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 05:37:15: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-08-03 05:37:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 05:37:16: INFO] 336 executions left in scheduler queue
[2019-08-03 05:37:16: INFO] Executions until ETA known: 1242
[2019-08-03 05:37:16: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-08-03 05:37:16: INFO] Estimated completion (next execution): 2019-08-03 05:52:11 (0:14:54 from now)
[2019-08-03 05:37:16: INFO] Reboot in preparation for next execution
[2019-08-03 05:41:43: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 05:54:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.843 s/op
Iteration   2: 15.241 s/op
Iteration   3: 14.844 s/op
Iteration   4: 14.848 s/op
Iteration   5: 14.811 s/op
Iteration   6: 14.608 s/op
Iteration   7: 15.055 s/op
Iteration   8: 15.005 s/op
Iteration   9: 14.981 s/op
Iteration  10: 14.970 s/op
Iteration  11: 14.954 s/op
Iteration  12: 14.939 s/op
Iteration  13: 14.961 s/op
Iteration  14: 14.975 s/op
Iteration  15: 14.983 s/op
Iteration  16: 14.928 s/op
Iteration  17: 14.969 s/op
Iteration  18: 14.971 s/op
Iteration  19: 14.972 s/op
Iteration  20: 14.970 s/op
Iteration  21: 14.938 s/op
Iteration  22: 14.942 s/op
Iteration  23: 14.926 s/op
Iteration  24: 14.973 s/op
Iteration  25: 14.947 s/op
Iteration  26: 14.962 s/op
Iteration  27: 15.006 s/op
Iteration  28: 14.923 s/op
Iteration  29: 14.920 s/op
Iteration  30: 14.985 s/op
Iteration  31: 14.943 s/op
Iteration  32: 14.962 s/op
Iteration  33: 14.968 s/op
Iteration  34: 15.006 s/op
Iteration  35: 14.951 s/op
Iteration  36: 14.942 s/op
Iteration  37: 14.946 s/op
Iteration  38: 14.938 s/op
Iteration  39: 14.981 s/op
Iteration  40: 14.995 s/op
Iteration  41: 14.962 s/op
Iteration  42: 14.933 s/op
Iteration  43: 14.961 s/op
Iteration  44: 14.982 s/op
Iteration  45: 15.011 s/op
Iteration  46: 14.961 s/op
Iteration  47: 14.983 s/op
Iteration  48: 14.968 s/op
Iteration  49: 14.967 s/op
Iteration  50: 15.033 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     14.995 ?(99.9%) 0.137 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 1 
    [14.750, 15.000) = 41 
    [15.000, 15.250) = 7 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.608 s/op
     p(50.0000) =     14.965 s/op
     p(90.0000) =     15.010 s/op
     p(95.0000) =     15.138 s/op
     p(99.0000) =     16.843 s/op
     p(99.9000) =     16.843 s/op
     p(99.9900) =     16.843 s/op
     p(99.9990) =     16.843 s/op
     p(99.9999) =     16.843 s/op
    p(100.0000) =     16.843 s/op


# Run complete. Total time: 00:12:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  14.995 ? 0.137   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9-8u222-b10_1564803703722.json
{"wallclock_times": [750.8447197200001], "core_cycle_counts": [[889122291412], [430998161135], [528037038242], [594748889731]], "aperf_counts": [[887412962667], [430738439502], [527811639284], [594664170193]], "mperf_counts": [[887414440766], [430738429742], [527817394756], [594664147148]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 05:54:14: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-08-03 05:54:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 05:54:15: INFO] 335 executions left in scheduler queue
[2019-08-03 05:54:15: INFO] Executions until ETA known: 1210
[2019-08-03 05:54:15: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-08-03 05:54:15: INFO] Estimated completion (next execution): 2019-08-03 06:09:16 (0:15:01 from now)
[2019-08-03 05:54:15: INFO] Reboot in preparation for next execution
[2019-08-03 05:58:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 05:58:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 05:58:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 05:58:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 05:58:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 06:04:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.183 s/op
Iteration   2: 6.670 s/op
Iteration   3: 6.806 s/op
Iteration   4: 6.735 s/op
Iteration   5: 6.728 s/op
Iteration   6: 6.723 s/op
Iteration   7: 6.723 s/op
Iteration   8: 6.726 s/op
Iteration   9: 6.729 s/op
Iteration  10: 6.726 s/op
Iteration  11: 6.730 s/op
Iteration  12: 6.730 s/op
Iteration  13: 6.738 s/op
Iteration  14: 6.733 s/op
Iteration  15: 6.730 s/op
Iteration  16: 6.736 s/op
Iteration  17: 6.738 s/op
Iteration  18: 6.741 s/op
Iteration  19: 6.728 s/op
Iteration  20: 6.737 s/op
Iteration  21: 6.736 s/op
Iteration  22: 6.735 s/op
Iteration  23: 6.731 s/op
Iteration  24: 6.735 s/op
Iteration  25: 6.735 s/op
Iteration  26: 6.735 s/op
Iteration  27: 6.732 s/op
Iteration  28: 6.730 s/op
Iteration  29: 6.729 s/op
Iteration  30: 6.732 s/op
Iteration  31: 6.724 s/op
Iteration  32: 6.727 s/op
Iteration  33: 6.733 s/op
Iteration  34: 6.729 s/op
Iteration  35: 6.736 s/op
Iteration  36: 6.736 s/op
Iteration  37: 6.728 s/op
Iteration  38: 6.734 s/op
Iteration  39: 6.736 s/op
Iteration  40: 6.734 s/op
Iteration  41: 6.728 s/op
Iteration  42: 6.738 s/op
Iteration  43: 6.737 s/op
Iteration  44: 6.737 s/op
Iteration  45: 6.733 s/op
Iteration  46: 6.729 s/op
Iteration  47: 6.730 s/op
Iteration  48: 6.723 s/op
Iteration  49: 6.736 s/op
Iteration  50: 6.749 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.742 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 1 
    [6.700, 6.750) = 47 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 1 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.670 s/op
     p(50.0000) =      6.733 s/op
     p(90.0000) =      6.738 s/op
     p(95.0000) =      6.775 s/op
     p(99.0000) =      7.183 s/op
     p(99.9000) =      7.183 s/op
     p(99.9900) =      7.183 s/op
     p(99.9990) =      7.183 s/op
     p(99.9999) =      7.183 s/op
    p(100.0000) =      7.183 s/op


# Run complete. Total time: 00:05:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.742 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot_12.0.2_1564804729058.json
{"wallclock_times": [338.03662578600006], "core_cycle_counts": [[145620216387], [145013449776], [536731632179], [262632774974]], "aperf_counts": [[144644511654], [144922506994], [536694075570], [262586680896]], "mperf_counts": [[145123418272], [145133997332], [537464222360], [262868298728]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 06:04:27: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-08-03 06:04:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 06:04:28: INFO] 334 executions left in scheduler queue
[2019-08-03 06:04:28: INFO] Executions until ETA known: 1206
[2019-08-03 06:04:28: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-08-03 06:04:28: INFO] Estimated completion (next execution): 2019-08-03 06:12:36 (0:08:08 from now)
[2019-08-03 06:04:28: INFO] Reboot in preparation for next execution
[2019-08-03 06:08:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 06:08:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 06:08:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 06:08:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 06:08:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 06:08:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 06:22:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.500 s/op
Iteration   2: 15.635 s/op
Iteration   3: 16.500 s/op
Iteration   4: 16.620 s/op
Iteration   5: 16.418 s/op
Iteration   6: 15.752 s/op
Iteration   7: 16.503 s/op
Iteration   8: 16.739 s/op
Iteration   9: 16.556 s/op
Iteration  10: 15.900 s/op
Iteration  11: 16.392 s/op
Iteration  12: 16.625 s/op
Iteration  13: 16.115 s/op
Iteration  14: 16.381 s/op
Iteration  15: 16.614 s/op
Iteration  16: 16.519 s/op
Iteration  17: 15.748 s/op
Iteration  18: 16.463 s/op
Iteration  19: 16.531 s/op
Iteration  20: 15.946 s/op
Iteration  21: 16.612 s/op
Iteration  22: 16.738 s/op
Iteration  23: 16.679 s/op
Iteration  24: 14.904 s/op
Iteration  25: 16.623 s/op
Iteration  26: 16.422 s/op
Iteration  27: 16.376 s/op
Iteration  28: 16.566 s/op
Iteration  29: 16.179 s/op
Iteration  30: 16.005 s/op
Iteration  31: 15.614 s/op
Iteration  32: 15.254 s/op
Iteration  33: 15.841 s/op
Iteration  34: 16.591 s/op
Iteration  35: 16.168 s/op
Iteration  36: 16.551 s/op
Iteration  37: 16.787 s/op
Iteration  38: 15.378 s/op
Iteration  39: 16.690 s/op
Iteration  40: 16.596 s/op
Iteration  41: 16.666 s/op
Iteration  42: 16.562 s/op
Iteration  43: 16.357 s/op
Iteration  44: 16.475 s/op
Iteration  45: 15.303 s/op
Iteration  46: 16.612 s/op
Iteration  47: 16.107 s/op
Iteration  48: 16.476 s/op
Iteration  49: 16.652 s/op
Iteration  50: 16.563 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.316 ?(99.9%) 0.236 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 1 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 3 
    [15.500, 15.750) = 3 
    [15.750, 16.000) = 4 
    [16.000, 16.250) = 5 
    [16.250, 16.500) = 9 
    [16.500, 16.750) = 23 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.904 s/op
     p(50.0000) =     16.488 s/op
     p(90.0000) =     16.689 s/op
     p(95.0000) =     16.761 s/op
     p(99.0000) =     17.500 s/op
     p(99.9000) =     17.500 s/op
     p(99.9900) =     17.500 s/op
     p(99.9990) =     17.500 s/op
     p(99.9999) =     17.500 s/op
    p(100.0000) =     17.500 s/op


# Run complete. Total time: 00:13:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.316 ? 0.236   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9_11.0.4_1564805321870.json
{"wallclock_times": [817.543637214], "core_cycle_counts": [[647738826418], [746458044929], [1142469930830], [413287066681]], "aperf_counts": [[645527655130], [746309365904], [1142279225707], [413112721728]], "mperf_counts": [[645527977760], [746309752726], [1142279164444], [413112701174]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 06:22:19: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-08-03 06:22:20: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 06:22:20: INFO] 333 executions left in scheduler queue
[2019-08-03 06:22:20: INFO] Executions until ETA known: 1171
[2019-08-03 06:22:20: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-08-03 06:22:20: INFO] Estimated completion (next execution): 2019-08-03 06:38:28 (0:16:08 from now)
[2019-08-03 06:22:20: INFO] Reboot in preparation for next execution
[2019-08-03 06:26:34: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 06:35:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.307 s/op
Iteration   2: 11.832 s/op
Iteration   3: 11.268 s/op
Iteration   4: 11.302 s/op
Iteration   5: 11.282 s/op
Iteration   6: 11.063 s/op
Iteration   7: 11.095 s/op
Iteration   8: 11.093 s/op
Iteration   9: 11.086 s/op
Iteration  10: 11.064 s/op
Iteration  11: 11.093 s/op
Iteration  12: 11.093 s/op
Iteration  13: 11.111 s/op
Iteration  14: 11.026 s/op
Iteration  15: 11.078 s/op
Iteration  16: 11.089 s/op
Iteration  17: 11.054 s/op
Iteration  18: 11.096 s/op
Iteration  19: 11.077 s/op
Iteration  20: 11.066 s/op
Iteration  21: 11.079 s/op
Iteration  22: 11.070 s/op
Iteration  23: 11.082 s/op
Iteration  24: 11.061 s/op
Iteration  25: 11.067 s/op
Iteration  26: 11.084 s/op
Iteration  27: 11.062 s/op
Iteration  28: 11.051 s/op
Iteration  29: 11.074 s/op
Iteration  30: 11.102 s/op
Iteration  31: 11.056 s/op
Iteration  32: 11.076 s/op
Iteration  33: 11.036 s/op
Iteration  34: 11.062 s/op
Iteration  35: 11.074 s/op
Iteration  36: 11.063 s/op
Iteration  37: 11.059 s/op
Iteration  38: 11.058 s/op
Iteration  39: 11.065 s/op
Iteration  40: 11.092 s/op
Iteration  41: 11.070 s/op
Iteration  42: 11.058 s/op
Iteration  43: 11.066 s/op
Iteration  44: 11.085 s/op
Iteration  45: 11.067 s/op
Iteration  46: 11.060 s/op
Iteration  47: 11.056 s/op
Iteration  48: 11.076 s/op
Iteration  49: 11.120 s/op
Iteration  50: 11.061 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     11.125 ?(99.9%) 0.103 s/op

  Histogram, s/op:
    [11.000, 11.125) = 45 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 3 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 1 
    [11.875, 12.000) = 0 
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 1 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.026 s/op
     p(50.0000) =     11.074 s/op
     p(90.0000) =     11.253 s/op
     p(95.0000) =     11.541 s/op
     p(99.0000) =     12.307 s/op
     p(99.9000) =     12.307 s/op
     p(99.9900) =     12.307 s/op
     p(99.9990) =     12.307 s/op
     p(99.9999) =     12.307 s/op
    p(100.0000) =     12.307 s/op


# Run complete. Total time: 00:09:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  11.125 ? 0.103   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9-8u222-b10_1564806394162.json
{"wallclock_times": [557.4539973359999], "core_cycle_counts": [[561514744997], [246461180502], [446568672382], [553084839119]], "aperf_counts": [[560080158959], [246254954557], [446433248037], [553020871309]], "mperf_counts": [[560082163920], [246254890852], [446433208808], [553020870082]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 06:35:51: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-08-03 06:35:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 06:35:52: INFO] 332 executions left in scheduler queue
[2019-08-03 06:35:52: INFO] Executions until ETA known: 1118
[2019-08-03 06:35:52: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-08-03 06:35:52: INFO] Estimated completion (next execution): 2019-08-03 06:47:40 (0:11:47 from now)
[2019-08-03 06:35:52: INFO] Reboot in preparation for next execution
[2019-08-03 06:46:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.121 s/op
Iteration   2: 7.972 s/op
Iteration   3: 7.873 s/op
Iteration   4: 7.880 s/op
Iteration   5: 7.867 s/op
Iteration   6: 7.877 s/op
Iteration   7: 7.874 s/op
Iteration   8: 7.877 s/op
Iteration   9: 7.884 s/op
Iteration  10: 7.877 s/op
Iteration  11: 7.882 s/op
Iteration  12: 7.870 s/op
Iteration  13: 7.875 s/op
Iteration  14: 7.865 s/op
Iteration  15: 7.875 s/op
Iteration  16: 7.870 s/op
Iteration  17: 7.881 s/op
Iteration  18: 7.877 s/op
Iteration  19: 7.873 s/op
Iteration  20: 7.877 s/op
Iteration  21: 7.876 s/op
Iteration  22: 7.885 s/op
Iteration  23: 7.871 s/op
Iteration  24: 7.875 s/op
Iteration  25: 7.876 s/op
Iteration  26: 7.879 s/op
Iteration  27: 7.878 s/op
Iteration  28: 7.874 s/op
Iteration  29: 7.875 s/op
Iteration  30: 7.877 s/op
Iteration  31: 7.868 s/op
Iteration  32: 7.880 s/op
Iteration  33: 7.878 s/op
Iteration  34: 7.888 s/op
Iteration  35: 7.876 s/op
Iteration  36: 7.870 s/op
Iteration  37: 7.884 s/op
Iteration  38: 7.871 s/op
Iteration  39: 7.873 s/op
Iteration  40: 7.888 s/op
Iteration  41: 7.881 s/op
Iteration  42: 7.887 s/op
Iteration  43: 7.874 s/op
Iteration  44: 7.868 s/op
Iteration  45: 7.876 s/op
Iteration  46: 7.873 s/op
Iteration  47: 7.882 s/op
Iteration  48: 7.872 s/op
Iteration  49: 7.882 s/op
Iteration  50: 7.877 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      7.883 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 21 
    [7.875, 7.900) = 27 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 1 
    [7.975, 8.000) = 0 
    [8.000, 8.025) = 0 
    [8.025, 8.050) = 0 
    [8.050, 8.075) = 0 
    [8.075, 8.100) = 0 
    [8.100, 8.125) = 1 
    [8.125, 8.150) = 0 
    [8.150, 8.175) = 0 
    [8.175, 8.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.865 s/op
     p(50.0000) =      7.876 s/op
     p(90.0000) =      7.887 s/op
     p(95.0000) =      7.926 s/op
     p(99.0000) =      8.121 s/op
     p(99.9000) =      8.121 s/op
     p(99.9900) =      8.121 s/op
     p(99.9990) =      8.121 s/op
     p(99.9999) =      8.121 s/op
    p(100.0000) =      8.121 s/op


# Run complete. Total time: 00:06:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  7.883 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot-8u222-b10_1564807205635.json
{"wallclock_times": [394.986773844], "core_cycle_counts": [[275591972064], [330618985787], [307835929012], [357652026154]], "aperf_counts": [[274620544308], [330540546054], [307795016782], [357613176199]], "mperf_counts": [[274644590416], [330542120760], [307795168770], [357613332136]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 06:46:40: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-08-03 06:46:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 06:46:41: INFO] 331 executions left in scheduler queue
[2019-08-03 06:46:41: INFO] Executions until ETA known: 1105
[2019-08-03 06:46:41: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-03 06:46:41: INFO] Estimated completion (next execution): 2019-08-03 06:55:46 (0:09:05 from now)
[2019-08-03 06:46:41: INFO] Reboot in preparation for next execution
[2019-08-03 06:52:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.022 s/op
Iteration   2: 1.698 s/op
Iteration   3: 2.024 s/op
Iteration   4: 2.085 s/op
Iteration   5: 2.071 s/op
Iteration   6: 2.054 s/op
Iteration   7: 2.067 s/op
Iteration   8: 2.053 s/op
Iteration   9: 2.073 s/op
Iteration  10: 2.061 s/op
Iteration  11: 2.058 s/op
Iteration  12: 2.058 s/op
Iteration  13: 2.060 s/op
Iteration  14: 2.061 s/op
Iteration  15: 2.064 s/op
Iteration  16: 2.063 s/op
Iteration  17: 2.062 s/op
Iteration  18: 2.064 s/op
Iteration  19: 2.057 s/op
Iteration  20: 2.065 s/op
Iteration  21: 2.057 s/op
Iteration  22: 2.056 s/op
Iteration  23: 2.062 s/op
Iteration  24: 2.056 s/op
Iteration  25: 2.053 s/op
Iteration  26: 2.061 s/op
Iteration  27: 2.055 s/op
Iteration  28: 2.063 s/op
Iteration  29: 2.061 s/op
Iteration  30: 2.061 s/op
Iteration  31: 2.066 s/op
Iteration  32: 2.062 s/op
Iteration  33: 2.063 s/op
Iteration  34: 2.060 s/op
Iteration  35: 2.064 s/op
Iteration  36: 2.068 s/op
Iteration  37: 2.059 s/op
Iteration  38: 2.068 s/op
Iteration  39: 2.066 s/op
Iteration  40: 2.055 s/op
Iteration  41: 2.055 s/op
Iteration  42: 2.060 s/op
Iteration  43: 2.062 s/op
Iteration  44: 2.058 s/op
Iteration  45: 2.058 s/op
Iteration  46: 2.064 s/op
Iteration  47: 2.060 s/op
Iteration  48: 2.058 s/op
Iteration  49: 2.053 s/op
Iteration  50: 2.061 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.052 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 2 

  Percentiles, s/op:
      p(0.0000) =      1.698 s/op
     p(50.0000) =      2.061 s/op
     p(90.0000) =      2.068 s/op
     p(95.0000) =      2.072 s/op
     p(99.0000) =      2.085 s/op
     p(99.9000) =      2.085 s/op
     p(99.9900) =      2.085 s/op
     p(99.9990) =      2.085 s/op
     p(99.9999) =      2.085 s/op
    p(100.0000) =      2.085 s/op


# Run complete. Total time: 00:01:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.052 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot-8u222-b10_1564807854378.json
{"wallclock_times": [103.49952751499998], "core_cycle_counts": [[87526830911], [69744380368], [109074282051], [80429884748]], "aperf_counts": [[87201163913], [69701478270], [109057158524], [80411050255]], "mperf_counts": [[87217898856], [69701594692], [109069201800], [80411119988]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 06:52:37: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-03 06:52:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 06:52:38: INFO] 330 executions left in scheduler queue
[2019-08-03 06:52:38: INFO] Executions until ETA known: 1085
[2019-08-03 06:52:38: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-03 06:52:38: INFO] Estimated completion (next execution): 2019-08-03 06:56:52 (0:04:13 from now)
[2019-08-03 06:52:38: INFO] Reboot in preparation for next execution
[2019-08-03 06:58:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.396 s/op
Iteration   2: 1.532 s/op
Iteration   3: 1.761 s/op
Iteration   4: 1.640 s/op
Iteration   5: 1.904 s/op
Iteration   6: 2.009 s/op
Iteration   7: 2.006 s/op
Iteration   8: 2.001 s/op
Iteration   9: 1.999 s/op
Iteration  10: 2.001 s/op
Iteration  11: 2.002 s/op
Iteration  12: 2.003 s/op
Iteration  13: 2.001 s/op
Iteration  14: 2.000 s/op
Iteration  15: 2.016 s/op
Iteration  16: 2.002 s/op
Iteration  17: 2.001 s/op
Iteration  18: 2.004 s/op
Iteration  19: 1.997 s/op
Iteration  20: 1.998 s/op
Iteration  21: 2.001 s/op
Iteration  22: 2.000 s/op
Iteration  23: 2.008 s/op
Iteration  24: 1.998 s/op
Iteration  25: 1.998 s/op
Iteration  26: 1.998 s/op
Iteration  27: 1.998 s/op
Iteration  28: 2.003 s/op
Iteration  29: 1.998 s/op
Iteration  30: 1.997 s/op
Iteration  31: 2.000 s/op
Iteration  32: 1.999 s/op
Iteration  33: 2.002 s/op
Iteration  34: 1.998 s/op
Iteration  35: 2.003 s/op
Iteration  36: 2.006 s/op
Iteration  37: 1.999 s/op
Iteration  38: 1.999 s/op
Iteration  39: 2.000 s/op
Iteration  40: 1.999 s/op
Iteration  41: 1.999 s/op
Iteration  42: 1.999 s/op
Iteration  43: 1.998 s/op
Iteration  44: 2.013 s/op
Iteration  45: 1.999 s/op
Iteration  46: 1.999 s/op
Iteration  47: 2.011 s/op
Iteration  48: 1.998 s/op
Iteration  49: 2.001 s/op
Iteration  50: 1.999 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.986 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 21 
    [2.000, 2.050) = 24 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.532 s/op
     p(50.0000) =      2.000 s/op
     p(90.0000) =      2.009 s/op
     p(95.0000) =      2.014 s/op
     p(99.0000) =      2.396 s/op
     p(99.9000) =      2.396 s/op
     p(99.9900) =      2.396 s/op
     p(99.9990) =      2.396 s/op
     p(99.9999) =      2.396 s/op
    p(100.0000) =      2.396 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.986 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot-8u222-b10_1564808212631.json
{"wallclock_times": [100.120174341], "core_cycle_counts": [[52830610132], [101103013570], [82442974545], [95799362202]], "aperf_counts": [[52568871912], [101080586822], [82431008526], [95785149106]], "mperf_counts": [[52589503486], [101082129598], [82443802522], [95786130262]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 06:58:32: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-03 06:58:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 06:58:33: INFO] 329 executions left in scheduler queue
[2019-08-03 06:58:33: INFO] Executions until ETA known: 1064
[2019-08-03 06:58:33: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-08-03 06:58:33: INFO] Estimated completion (next execution): 2019-08-03 07:02:44 (0:04:10 from now)
[2019-08-03 06:58:33: INFO] Reboot in preparation for next execution
[2019-08-03 07:10:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.950 s/op
Iteration   2: 8.552 s/op
Iteration   3: 9.041 s/op
Iteration   4: 8.916 s/op
Iteration   5: 8.729 s/op
Iteration   6: 8.669 s/op
Iteration   7: 8.693 s/op
Iteration   8: 8.744 s/op
Iteration   9: 8.724 s/op
Iteration  10: 8.770 s/op
Iteration  11: 8.673 s/op
Iteration  12: 8.795 s/op
Iteration  13: 9.451 s/op
Iteration  14: 8.674 s/op
Iteration  15: 8.682 s/op
Iteration  16: 8.826 s/op
Iteration  17: 8.653 s/op
Iteration  18: 8.659 s/op
Iteration  19: 8.801 s/op
Iteration  20: 8.625 s/op
Iteration  21: 8.839 s/op
Iteration  22: 8.670 s/op
Iteration  23: 8.668 s/op
Iteration  24: 9.790 s/op
Iteration  25: 8.578 s/op
Iteration  26: 8.791 s/op
Iteration  27: 8.650 s/op
Iteration  28: 8.647 s/op
Iteration  29: 8.822 s/op
Iteration  30: 8.648 s/op
Iteration  31: 8.646 s/op
Iteration  32: 8.817 s/op
Iteration  33: 8.662 s/op
Iteration  34: 8.667 s/op
Iteration  35: 9.752 s/op
Iteration  36: 8.576 s/op
Iteration  37: 8.784 s/op
Iteration  38: 8.664 s/op
Iteration  39: 8.622 s/op
Iteration  40: 8.826 s/op
Iteration  41: 8.629 s/op
Iteration  42: 8.655 s/op
Iteration  43: 8.770 s/op
Iteration  44: 8.658 s/op
Iteration  45: 8.831 s/op
Iteration  46: 9.569 s/op
Iteration  47: 8.596 s/op
Iteration  48: 8.801 s/op
Iteration  49: 8.640 s/op
Iteration  50: 8.646 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.791 ?(99.9%) 0.136 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 5 
    [ 8.625,  8.750) = 25 
    [ 8.750,  8.875) = 13 
    [ 8.875,  9.000) = 2 
    [ 9.000,  9.125) = 1 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 1 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 2 

  Percentiles, s/op:
      p(0.0000) =      8.552 s/op
     p(50.0000) =      8.678 s/op
     p(90.0000) =      9.032 s/op
     p(95.0000) =      9.651 s/op
     p(99.0000) =      9.790 s/op
     p(99.9000) =      9.790 s/op
     p(99.9900) =      9.790 s/op
     p(99.9990) =      9.790 s/op
     p(99.9999) =      9.790 s/op
    p(100.0000) =      9.790 s/op


# Run complete. Total time: 00:07:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.791 ? 0.136   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_graalvm-ce-19.1.1_1564808570585.json
{"wallclock_times": [440.528483477], "core_cycle_counts": [[372946589072], [598993788410], [378765517671], [290382695739]], "aperf_counts": [[371826409171], [598902665037], [378704399862], [290338529109]], "mperf_counts": [[371842903074], [598902992290], [378706404172], [290344427626]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 07:10:11: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-08-03 07:10:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 07:10:12: INFO] 328 executions left in scheduler queue
[2019-08-03 07:10:12: INFO] Executions until ETA known: 1043
[2019-08-03 07:10:12: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-08-03 07:10:12: INFO] Estimated completion (next execution): 2019-08-03 07:20:02 (0:09:50 from now)
[2019-08-03 07:10:12: INFO] Reboot in preparation for next execution
[2019-08-03 07:17:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.269 s/op
Iteration   2: 4.317 s/op
Iteration   3: 4.035 s/op
Iteration   4: 3.954 s/op
Iteration   5: 3.954 s/op
Iteration   6: 3.951 s/op
Iteration   7: 3.968 s/op
Iteration   8: 3.946 s/op
Iteration   9: 3.955 s/op
Iteration  10: 3.954 s/op
Iteration  11: 3.950 s/op
Iteration  12: 3.962 s/op
Iteration  13: 3.946 s/op
Iteration  14: 3.952 s/op
Iteration  15: 3.942 s/op
Iteration  16: 3.951 s/op
Iteration  17: 3.959 s/op
Iteration  18: 3.949 s/op
Iteration  19: 3.943 s/op
Iteration  20: 3.977 s/op
Iteration  21: 3.973 s/op
Iteration  22: 3.952 s/op
Iteration  23: 3.960 s/op
Iteration  24: 3.994 s/op
Iteration  25: 3.955 s/op
Iteration  26: 3.949 s/op
Iteration  27: 3.963 s/op
Iteration  28: 3.954 s/op
Iteration  29: 3.978 s/op
Iteration  30: 3.957 s/op
Iteration  31: 3.965 s/op
Iteration  32: 3.966 s/op
Iteration  33: 3.981 s/op
Iteration  34: 3.974 s/op
Iteration  35: 3.962 s/op
Iteration  36: 3.970 s/op
Iteration  37: 3.957 s/op
Iteration  38: 3.956 s/op
Iteration  39: 3.957 s/op
Iteration  40: 3.956 s/op
Iteration  41: 3.952 s/op
Iteration  42: 3.969 s/op
Iteration  43: 3.956 s/op
Iteration  44: 3.951 s/op
Iteration  45: 3.961 s/op
Iteration  46: 3.955 s/op
Iteration  47: 3.957 s/op
Iteration  48: 3.954 s/op
Iteration  49: 3.955 s/op
Iteration  50: 3.951 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      3.973 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.900, 3.950) = 7 
    [3.950, 4.000) = 40 
    [4.000, 4.050) = 1 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 0 
    [4.200, 4.250) = 0 
    [4.250, 4.300) = 1 
    [4.300, 4.350) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.942 s/op
     p(50.0000) =      3.956 s/op
     p(90.0000) =      3.981 s/op
     p(95.0000) =      4.140 s/op
     p(99.0000) =      4.317 s/op
     p(99.9000) =      4.317 s/op
     p(99.9900) =      4.317 s/op
     p(99.9990) =      4.317 s/op
     p(99.9999) =      4.317 s/op
    p(100.0000) =      4.317 s/op


# Run complete. Total time: 00:03:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  3.973 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot-8u222-b10_1564809266443.json
{"wallclock_times": [199.491996036], "core_cycle_counts": [[164523248899], [138302135255], [186400671194], [154154965639]], "aperf_counts": [[164054608098], [138254162880], [186377094714], [154131419953]], "mperf_counts": [[164074069682], [138264154590], [186378410138], [154132318442]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 07:17:45: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-08-03 07:17:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 07:17:46: INFO] 327 executions left in scheduler queue
[2019-08-03 07:17:46: INFO] Executions until ETA known: 1014
[2019-08-03 07:17:46: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-08-03 07:17:46: INFO] Estimated completion (next execution): 2019-08-03 07:23:36 (0:05:49 from now)
[2019-08-03 07:17:46: INFO] Reboot in preparation for next execution
[2019-08-03 07:29:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.042 s/op
Iteration   2: 8.953 s/op
Iteration   3: 8.870 s/op
Iteration   4: 8.972 s/op
Iteration   5: 8.805 s/op
Iteration   6: 8.688 s/op
Iteration   7: 8.820 s/op
Iteration   8: 8.745 s/op
Iteration   9: 8.775 s/op
Iteration  10: 8.644 s/op
Iteration  11: 8.785 s/op
Iteration  12: 9.427 s/op
Iteration  13: 8.716 s/op
Iteration  14: 8.676 s/op
Iteration  15: 8.657 s/op
Iteration  16: 8.807 s/op
Iteration  17: 8.674 s/op
Iteration  18: 8.664 s/op
Iteration  19: 8.840 s/op
Iteration  20: 8.682 s/op
Iteration  21: 8.693 s/op
Iteration  22: 8.680 s/op
Iteration  23: 9.840 s/op
Iteration  24: 8.610 s/op
Iteration  25: 8.666 s/op
Iteration  26: 8.850 s/op
Iteration  27: 8.655 s/op
Iteration  28: 8.688 s/op
Iteration  29: 8.682 s/op
Iteration  30: 8.848 s/op
Iteration  31: 8.688 s/op
Iteration  32: 8.727 s/op
Iteration  33: 8.693 s/op
Iteration  34: 9.952 s/op
Iteration  35: 8.621 s/op
Iteration  36: 8.722 s/op
Iteration  37: 8.676 s/op
Iteration  38: 8.837 s/op
Iteration  39: 8.670 s/op
Iteration  40: 8.691 s/op
Iteration  41: 8.664 s/op
Iteration  42: 8.854 s/op
Iteration  43: 8.678 s/op
Iteration  44: 8.683 s/op
Iteration  45: 8.700 s/op
Iteration  46: 8.885 s/op
Iteration  47: 8.722 s/op
Iteration  48: 8.736 s/op
Iteration  49: 8.671 s/op
Iteration  50: 8.836 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.803 ?(99.9%) 0.130 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 2 
    [ 8.625,  8.750) = 29 
    [ 8.750,  8.875) = 12 
    [ 8.875,  9.000) = 3 
    [ 9.000,  9.125) = 1 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.610 s/op
     p(50.0000) =      8.708 s/op
     p(90.0000) =      8.970 s/op
     p(95.0000) =      9.613 s/op
     p(99.0000) =      9.952 s/op
     p(99.9000) =      9.952 s/op
     p(99.9900) =      9.952 s/op
     p(99.9990) =      9.952 s/op
     p(99.9999) =      9.952 s/op
    p(100.0000) =      9.952 s/op


# Run complete. Total time: 00:07:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.803 ? 0.130   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_graalvm-ce-19.1.1_1564809721613.json
{"wallclock_times": [441.13383045700004], "core_cycle_counts": [[271131192651], [385755820225], [558501520711], [411516778374]], "aperf_counts": [[269888211688], [385676159078], [558455971685], [411479423246]], "mperf_counts": [[269900555958], [385681841924], [558456413036], [411479739994]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 07:29:22: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-08-03 07:29:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 07:29:23: INFO] 326 executions left in scheduler queue
[2019-08-03 07:29:23: INFO] Executions until ETA known: 983
[2019-08-03 07:29:23: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 07:29:23: INFO] Estimated completion (next execution): 2019-08-03 07:39:15 (0:09:51 from now)
[2019-08-03 07:29:23: INFO] Reboot in preparation for next execution
[2019-08-03 07:33:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 07:33:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 07:33:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 07:33:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 07:33:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 07:33:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 07:39:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.310 s/op
Iteration   2: 7.256 s/op
Iteration   3: 6.910 s/op
Iteration   4: 6.833 s/op
Iteration   5: 6.827 s/op
Iteration   6: 6.797 s/op
Iteration   7: 6.747 s/op
Iteration   8: 6.832 s/op
Iteration   9: 6.741 s/op
Iteration  10: 6.748 s/op
Iteration  11: 6.790 s/op
Iteration  12: 6.795 s/op
Iteration  13: 6.909 s/op
Iteration  14: 6.803 s/op
Iteration  15: 6.654 s/op
Iteration  16: 6.792 s/op
Iteration  17: 6.817 s/op
Iteration  18: 6.773 s/op
Iteration  19: 6.797 s/op
Iteration  20: 6.904 s/op
Iteration  21: 6.823 s/op
Iteration  22: 6.696 s/op
Iteration  23: 6.843 s/op
Iteration  24: 6.815 s/op
Iteration  25: 6.921 s/op
Iteration  26: 6.778 s/op
Iteration  27: 6.753 s/op
Iteration  28: 6.891 s/op
Iteration  29: 6.768 s/op
Iteration  30: 6.765 s/op
Iteration  31: 6.786 s/op
Iteration  32: 6.872 s/op
Iteration  33: 6.803 s/op
Iteration  34: 6.769 s/op
Iteration  35: 6.806 s/op
Iteration  36: 6.763 s/op
Iteration  37: 6.880 s/op
Iteration  38: 6.836 s/op
Iteration  39: 6.754 s/op
Iteration  40: 6.801 s/op
Iteration  41: 6.750 s/op
Iteration  42: 6.847 s/op
Iteration  43: 6.753 s/op
Iteration  44: 6.831 s/op
Iteration  45: 6.795 s/op
Iteration  46: 6.698 s/op
Iteration  47: 6.761 s/op
Iteration  48: 6.810 s/op
Iteration  49: 6.749 s/op
Iteration  50: 6.716 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.857 ?(99.9%) 0.180 s/op

  Histogram, s/op:
    [ 6.000,  6.250) = 0 
    [ 6.250,  6.500) = 0 
    [ 6.500,  6.750) = 9 
    [ 6.750,  7.000) = 39 
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 1 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 0 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.654 s/op
     p(50.0000) =      6.797 s/op
     p(90.0000) =      6.909 s/op
     p(95.0000) =      7.072 s/op
     p(99.0000) =      9.310 s/op
     p(99.9000) =      9.310 s/op
     p(99.9900) =      9.310 s/op
     p(99.9990) =      9.310 s/op
     p(99.9999) =      9.310 s/op
    p(100.0000) =      9.310 s/op


# Run complete. Total time: 00:05:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.857 ? 0.180   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9_11.0.4_1564810431211.json
{"wallclock_times": [344.69906753600003], "core_cycle_counts": [[376294799601], [270090044357], [201775976536], [330280290484]], "aperf_counts": [[375485536600], [269951569505], [201630352425], [330197724289]], "mperf_counts": [[375489339664], [269954465652], [201630719430], [330197707428]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 07:39:35: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 07:39:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 07:39:36: INFO] 325 executions left in scheduler queue
[2019-08-03 07:39:36: INFO] Executions until ETA known: 978
[2019-08-03 07:39:36: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 07:39:36: INFO] Estimated completion (next execution): 2019-08-03 07:47:52 (0:08:15 from now)
[2019-08-03 07:39:36: INFO] Reboot in preparation for next execution
[2019-08-03 07:43:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 07:43:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 07:43:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 07:43:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 07:43:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 07:43:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 07:51:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.369 s/op
Iteration   2: 8.725 s/op
Iteration   3: 8.849 s/op
Iteration   4: 8.923 s/op
Iteration   5: 8.852 s/op
Iteration   6: 8.855 s/op
Iteration   7: 8.800 s/op
Iteration   8: 8.863 s/op
Iteration   9: 8.845 s/op
Iteration  10: 8.878 s/op
Iteration  11: 8.859 s/op
Iteration  12: 8.819 s/op
Iteration  13: 9.080 s/op
Iteration  14: 9.145 s/op
Iteration  15: 9.094 s/op
Iteration  16: 9.134 s/op
Iteration  17: 9.091 s/op
Iteration  18: 9.124 s/op
Iteration  19: 9.185 s/op
Iteration  20: 9.150 s/op
Iteration  21: 9.157 s/op
Iteration  22: 9.209 s/op
Iteration  23: 9.119 s/op
Iteration  24: 9.120 s/op
Iteration  25: 9.147 s/op
Iteration  26: 9.149 s/op
Iteration  27: 9.166 s/op
Iteration  28: 9.192 s/op
Iteration  29: 9.164 s/op
Iteration  30: 9.162 s/op
Iteration  31: 9.159 s/op
Iteration  32: 9.156 s/op
Iteration  33: 9.219 s/op
Iteration  34: 9.287 s/op
Iteration  35: 9.407 s/op
Iteration  36: 9.290 s/op
Iteration  37: 9.235 s/op
Iteration  38: 9.268 s/op
Iteration  39: 9.303 s/op
Iteration  40: 9.326 s/op
Iteration  41: 9.290 s/op
Iteration  42: 9.324 s/op
Iteration  43: 9.277 s/op
Iteration  44: 9.188 s/op
Iteration  45: 9.261 s/op
Iteration  46: 9.326 s/op
Iteration  47: 9.285 s/op
Iteration  48: 9.304 s/op
Iteration  49: 9.236 s/op
Iteration  50: 9.306 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.173 ?(99.9%) 0.178 s/op

  Histogram, s/op:
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 10 
    [ 9.000,  9.250) = 24 
    [ 9.250,  9.500) = 14 
    [ 9.500,  9.750) = 0 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 1 
    [11.500, 11.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.725 s/op
     p(50.0000) =      9.160 s/op
     p(90.0000) =      9.322 s/op
     p(95.0000) =      9.363 s/op
     p(99.0000) =     11.369 s/op
     p(99.9000) =     11.369 s/op
     p(99.9900) =     11.369 s/op
     p(99.9990) =     11.369 s/op
     p(99.9999) =     11.369 s/op
    p(100.0000) =     11.369 s/op


# Run complete. Total time: 00:07:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.173 ? 0.178   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9_11.0.4_1564811031919.json
{"wallclock_times": [460.327169302], "core_cycle_counts": [[463460641120], [391279345733], [448702523409], [258769005748]], "aperf_counts": [[462343887965], [391133613214], [448540948275], [258671369663]], "mperf_counts": [[462345639630], [391136835538], [448540915314], [258671356260]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 07:51:32: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 07:51:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 07:51:33: INFO] 324 executions left in scheduler queue
[2019-08-03 07:51:33: INFO] Executions until ETA known: 976
[2019-08-03 07:51:33: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 07:51:33: INFO] Estimated completion (next execution): 2019-08-03 08:01:44 (0:10:10 from now)
[2019-08-03 07:51:33: INFO] Reboot in preparation for next execution
[2019-08-03 07:55:47: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 07:55:47: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 07:55:47: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 07:55:47: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 07:55:47: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 07:55:48: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 08:00:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.180 s/op
Iteration   2: 6.389 s/op
Iteration   3: 6.123 s/op
Iteration   4: 6.196 s/op
Iteration   5: 6.048 s/op
Iteration   6: 5.994 s/op
Iteration   7: 5.929 s/op
Iteration   8: 5.919 s/op
Iteration   9: 5.903 s/op
Iteration  10: 5.921 s/op
Iteration  11: 5.942 s/op
Iteration  12: 5.914 s/op
Iteration  13: 5.885 s/op
Iteration  14: 5.923 s/op
Iteration  15: 5.917 s/op
Iteration  16: 5.896 s/op
Iteration  17: 5.910 s/op
Iteration  18: 5.881 s/op
Iteration  19: 5.899 s/op
Iteration  20: 5.889 s/op
Iteration  21: 5.926 s/op
Iteration  22: 5.941 s/op
Iteration  23: 5.912 s/op
Iteration  24: 5.922 s/op
Iteration  25: 5.930 s/op
Iteration  26: 5.920 s/op
Iteration  27: 5.919 s/op
Iteration  28: 5.912 s/op
Iteration  29: 5.878 s/op
Iteration  30: 5.909 s/op
Iteration  31: 5.901 s/op
Iteration  32: 5.948 s/op
Iteration  33: 5.930 s/op
Iteration  34: 5.945 s/op
Iteration  35: 5.921 s/op
Iteration  36: 5.934 s/op
Iteration  37: 5.894 s/op
Iteration  38: 5.897 s/op
Iteration  39: 5.900 s/op
Iteration  40: 5.881 s/op
Iteration  41: 5.855 s/op
Iteration  42: 5.958 s/op
Iteration  43: 5.925 s/op
Iteration  44: 5.945 s/op
Iteration  45: 5.888 s/op
Iteration  46: 5.919 s/op
Iteration  47: 5.908 s/op
Iteration  48: 5.891 s/op
Iteration  49: 5.923 s/op
Iteration  50: 5.895 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.982 ?(99.9%) 0.163 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 45 
    [6.000, 6.250) = 3 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.855 s/op
     p(50.0000) =      5.919 s/op
     p(90.0000) =      6.042 s/op
     p(95.0000) =      6.283 s/op
     p(99.0000) =      8.180 s/op
     p(99.9000) =      8.180 s/op
     p(99.9900) =      8.180 s/op
     p(99.9990) =      8.180 s/op
     p(99.9999) =      8.180 s/op
    p(100.0000) =      8.180 s/op


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.982 ? 0.163   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9_11.0.4_1564811747859.json
{"wallclock_times": [300.98625051500005], "core_cycle_counts": [[284263214737], [331487427326], [307367584659], [212122376591]], "aperf_counts": [[283430835853], [331368728873], [307228468766], [211962258767]], "mperf_counts": [[283436500912], [331368830252], [307229350532], [211962281420]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 08:00:48: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 08:00:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 08:00:49: INFO] 323 executions left in scheduler queue
[2019-08-03 08:00:49: INFO] Executions until ETA known: 966
[2019-08-03 08:00:49: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 08:00:49: INFO] Estimated completion (next execution): 2019-08-03 08:08:21 (0:07:31 from now)
[2019-08-03 08:00:49: INFO] Reboot in preparation for next execution
[2019-08-03 08:05:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 08:05:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 08:05:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 08:05:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 08:05:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 08:05:04: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 08:18:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.945 s/op
Iteration   2: 15.615 s/op
Iteration   3: 15.597 s/op
Iteration   4: 15.532 s/op
Iteration   5: 15.576 s/op
Iteration   6: 15.630 s/op
Iteration   7: 15.557 s/op
Iteration   8: 15.623 s/op
Iteration   9: 15.603 s/op
Iteration  10: 15.635 s/op
Iteration  11: 15.541 s/op
Iteration  12: 15.537 s/op
Iteration  13: 15.545 s/op
Iteration  14: 15.605 s/op
Iteration  15: 15.962 s/op
Iteration  16: 15.619 s/op
Iteration  17: 15.622 s/op
Iteration  18: 15.435 s/op
Iteration  19: 15.485 s/op
Iteration  20: 15.515 s/op
Iteration  21: 15.518 s/op
Iteration  22: 15.474 s/op
Iteration  23: 15.519 s/op
Iteration  24: 15.510 s/op
Iteration  25: 15.917 s/op
Iteration  26: 16.225 s/op
Iteration  27: 15.436 s/op
Iteration  28: 15.398 s/op
Iteration  29: 15.470 s/op
Iteration  30: 15.422 s/op
Iteration  31: 15.471 s/op
Iteration  32: 15.478 s/op
Iteration  33: 15.448 s/op
Iteration  34: 15.479 s/op
Iteration  35: 15.544 s/op
Iteration  36: 15.516 s/op
Iteration  37: 15.452 s/op
Iteration  38: 15.488 s/op
Iteration  39: 15.485 s/op
Iteration  40: 15.401 s/op
Iteration  41: 15.462 s/op
Iteration  42: 15.488 s/op
Iteration  43: 15.567 s/op
Iteration  44: 15.557 s/op
Iteration  45: 15.461 s/op
Iteration  46: 15.447 s/op
Iteration  47: 15.539 s/op
Iteration  48: 15.446 s/op
Iteration  49: 15.497 s/op
Iteration  50: 15.479 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.575 ?(99.9%) 0.121 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 22 
    [15.500, 15.625) = 22 
    [15.625, 15.750) = 2 
    [15.750, 15.875) = 0 
    [15.875, 16.000) = 2 
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 1 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 0 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 0 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.398 s/op
     p(50.0000) =     15.517 s/op
     p(90.0000) =     15.634 s/op
     p(95.0000) =     16.080 s/op
     p(99.0000) =     16.945 s/op
     p(99.9000) =     16.945 s/op
     p(99.9900) =     16.945 s/op
     p(99.9990) =     16.945 s/op
     p(99.9999) =     16.945 s/op
    p(100.0000) =     16.945 s/op


# Run complete. Total time: 00:13:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.575 ? 0.121   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9_11.0.4_1564812304253.json
{"wallclock_times": [780.4716868080001], "core_cycle_counts": [[552703438896], [631005092805], [641179125127], [768688045878]], "aperf_counts": [[550602332890], [630837385069], [641031195931], [768531647608]], "mperf_counts": [[550606525342], [630838247708], [641031160804], [768531711086]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 08:18:04: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-03 08:18:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 08:18:05: INFO] 322 executions left in scheduler queue
[2019-08-03 08:18:05: INFO] Executions until ETA known: 949
[2019-08-03 08:18:05: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 08:18:05: INFO] Estimated completion (next execution): 2019-08-03 08:33:36 (0:15:31 from now)
[2019-08-03 08:18:05: INFO] Reboot in preparation for next execution
[2019-08-03 08:30:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.762 s/op
Iteration   2: 10.389 s/op
Iteration   3: 9.970 s/op
Iteration   4: 9.997 s/op
Iteration   5: 9.979 s/op
Iteration   6: 10.004 s/op
Iteration   7: 9.974 s/op
Iteration   8: 9.990 s/op
Iteration   9: 9.970 s/op
Iteration  10: 10.006 s/op
Iteration  11: 10.014 s/op
Iteration  12: 10.003 s/op
Iteration  13: 9.969 s/op
Iteration  14: 9.980 s/op
Iteration  15: 9.983 s/op
Iteration  16: 9.998 s/op
Iteration  17: 10.022 s/op
Iteration  18: 9.991 s/op
Iteration  19: 9.999 s/op
Iteration  20: 9.990 s/op
Iteration  21: 10.002 s/op
Iteration  22: 9.980 s/op
Iteration  23: 10.009 s/op
Iteration  24: 10.005 s/op
Iteration  25: 10.006 s/op
Iteration  26: 9.994 s/op
Iteration  27: 9.999 s/op
Iteration  28: 9.994 s/op
Iteration  29: 10.022 s/op
Iteration  30: 10.035 s/op
Iteration  31: 9.998 s/op
Iteration  32: 9.996 s/op
Iteration  33: 10.012 s/op
Iteration  34: 10.003 s/op
Iteration  35: 10.007 s/op
Iteration  36: 10.003 s/op
Iteration  37: 9.999 s/op
Iteration  38: 9.983 s/op
Iteration  39: 10.028 s/op
Iteration  40: 9.998 s/op
Iteration  41: 9.981 s/op
Iteration  42: 9.992 s/op
Iteration  43: 9.999 s/op
Iteration  44: 9.990 s/op
Iteration  45: 10.015 s/op
Iteration  46: 10.024 s/op
Iteration  47: 10.011 s/op
Iteration  48: 10.037 s/op
Iteration  49: 9.994 s/op
Iteration  50: 9.985 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.002 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [ 9.700,  9.750) = 0 
    [ 9.750,  9.800) = 1 
    [ 9.800,  9.850) = 0 
    [ 9.850,  9.900) = 0 
    [ 9.900,  9.950) = 0 
    [ 9.950, 10.000) = 28 
    [10.000, 10.050) = 20 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 0 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 0 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.762 s/op
     p(50.0000) =      9.999 s/op
     p(90.0000) =     10.024 s/op
     p(95.0000) =     10.036 s/op
     p(99.0000) =     10.389 s/op
     p(99.9000) =     10.389 s/op
     p(99.9900) =     10.389 s/op
     p(99.9990) =     10.389 s/op
     p(99.9999) =     10.389 s/op
    p(100.0000) =     10.389 s/op


# Run complete. Total time: 00:08:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.002 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot-8u222-b10_1564813356600.json
{"wallclock_times": [500.94476471499996], "core_cycle_counts": [[427498976095], [544638396184], [423494248250], [221046213237]], "aperf_counts": [[426395199471], [544568092142], [423457833038], [221005051732]], "mperf_counts": [[426420792726], [544570057094], [423457924850], [221005838882]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 08:30:57: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 08:30:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 08:30:58: INFO] 321 executions left in scheduler queue
[2019-08-03 08:30:58: INFO] Executions until ETA known: 943
[2019-08-03 08:30:58: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 08:30:58: INFO] Estimated completion (next execution): 2019-08-03 08:41:49 (0:10:51 from now)
[2019-08-03 08:30:58: INFO] Reboot in preparation for next execution
[2019-08-03 08:40:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.237 s/op
Iteration   2: 6.037 s/op
Iteration   3: 5.777 s/op
Iteration   4: 5.809 s/op
Iteration   5: 5.890 s/op
Iteration   6: 5.854 s/op
Iteration   7: 5.907 s/op
Iteration   8: 5.848 s/op
Iteration   9: 5.845 s/op
Iteration  10: 5.851 s/op
Iteration  11: 5.856 s/op
Iteration  12: 5.851 s/op
Iteration  13: 5.887 s/op
Iteration  14: 5.863 s/op
Iteration  15: 5.877 s/op
Iteration  16: 5.851 s/op
Iteration  17: 5.866 s/op
Iteration  18: 5.857 s/op
Iteration  19: 5.845 s/op
Iteration  20: 5.879 s/op
Iteration  21: 5.847 s/op
Iteration  22: 5.849 s/op
Iteration  23: 5.856 s/op
Iteration  24: 5.869 s/op
Iteration  25: 5.859 s/op
Iteration  26: 5.863 s/op
Iteration  27: 5.848 s/op
Iteration  28: 5.855 s/op
Iteration  29: 5.866 s/op
Iteration  30: 5.882 s/op
Iteration  31: 5.855 s/op
Iteration  32: 5.855 s/op
Iteration  33: 5.894 s/op
Iteration  34: 5.838 s/op
Iteration  35: 5.861 s/op
Iteration  36: 5.862 s/op
Iteration  37: 5.853 s/op
Iteration  38: 5.856 s/op
Iteration  39: 5.853 s/op
Iteration  40: 5.865 s/op
Iteration  41: 5.847 s/op
Iteration  42: 5.852 s/op
Iteration  43: 5.878 s/op
Iteration  44: 5.856 s/op
Iteration  45: 5.850 s/op
Iteration  46: 5.856 s/op
Iteration  47: 5.852 s/op
Iteration  48: 5.839 s/op
Iteration  49: 5.872 s/op
Iteration  50: 5.846 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.868 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 1 
    [5.800, 5.850) = 11 
    [5.850, 5.900) = 35 
    [5.900, 5.950) = 1 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 1 
    [6.050, 6.100) = 0 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 1 
    [6.250, 6.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.777 s/op
     p(50.0000) =      5.856 s/op
     p(90.0000) =      5.890 s/op
     p(95.0000) =      5.966 s/op
     p(99.0000) =      6.237 s/op
     p(99.9000) =      6.237 s/op
     p(99.9900) =      6.237 s/op
     p(99.9990) =      6.237 s/op
     p(99.9999) =      6.237 s/op
    p(100.0000) =      6.237 s/op


# Run complete. Total time: 00:04:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.868 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot-8u222-b10_1564814124593.json
{"wallclock_times": [294.373133242], "core_cycle_counts": [[317654281413], [253031344769], [188904468151], [198676970353]], "aperf_counts": [[317052789983], [252965722238], [188875970797], [198645777324]], "mperf_counts": [[317065920094], [252977578066], [188887190990], [198646183196]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 08:40:18: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 08:40:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 08:40:19: INFO] 320 executions left in scheduler queue
[2019-08-03 08:40:19: INFO] Executions until ETA known: 937
[2019-08-03 08:40:19: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 08:40:19: INFO] Estimated completion (next execution): 2019-08-03 08:47:44 (0:07:24 from now)
[2019-08-03 08:40:19: INFO] Reboot in preparation for next execution
[2019-08-03 08:49:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.759 s/op
Iteration   2: 6.199 s/op
Iteration   3: 6.199 s/op
Iteration   4: 6.182 s/op
Iteration   5: 6.247 s/op
Iteration   6: 6.224 s/op
Iteration   7: 6.272 s/op
Iteration   8: 6.250 s/op
Iteration   9: 6.202 s/op
Iteration  10: 6.247 s/op
Iteration  11: 6.245 s/op
Iteration  12: 6.258 s/op
Iteration  13: 6.193 s/op
Iteration  14: 6.233 s/op
Iteration  15: 6.246 s/op
Iteration  16: 6.247 s/op
Iteration  17: 6.210 s/op
Iteration  18: 6.254 s/op
Iteration  19: 6.260 s/op
Iteration  20: 6.260 s/op
Iteration  21: 6.202 s/op
Iteration  22: 6.256 s/op
Iteration  23: 6.250 s/op
Iteration  24: 6.266 s/op
Iteration  25: 6.211 s/op
Iteration  26: 6.256 s/op
Iteration  27: 6.252 s/op
Iteration  28: 6.269 s/op
Iteration  29: 6.197 s/op
Iteration  30: 6.247 s/op
Iteration  31: 6.260 s/op
Iteration  32: 6.215 s/op
Iteration  33: 6.197 s/op
Iteration  34: 6.251 s/op
Iteration  35: 6.277 s/op
Iteration  36: 6.209 s/op
Iteration  37: 6.257 s/op
Iteration  38: 6.260 s/op
Iteration  39: 6.270 s/op
Iteration  40: 6.210 s/op
Iteration  41: 6.275 s/op
Iteration  42: 6.247 s/op
Iteration  43: 6.266 s/op
Iteration  44: 6.200 s/op
Iteration  45: 6.239 s/op
Iteration  46: 6.271 s/op
Iteration  47: 6.220 s/op
Iteration  48: 6.269 s/op
Iteration  49: 6.270 s/op
Iteration  50: 6.340 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.252 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 6 
    [6.200, 6.250) = 19 
    [6.250, 6.300) = 23 
    [6.300, 6.350) = 1 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.182 s/op
     p(50.0000) =      6.249 s/op
     p(90.0000) =      6.272 s/op
     p(95.0000) =      6.305 s/op
     p(99.0000) =      6.759 s/op
     p(99.9000) =      6.759 s/op
     p(99.9900) =      6.759 s/op
     p(99.9990) =      6.759 s/op
     p(99.9999) =      6.759 s/op
    p(100.0000) =      6.759 s/op


# Run complete. Total time: 00:05:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.252 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot-8u222-b10_1564814678017.json
{"wallclock_times": [313.672272387], "core_cycle_counts": [[265725665435], [227734261731], [287951366461], [301520191311]], "aperf_counts": [[264943584211], [227644658444], [287889098655], [301464414744]], "mperf_counts": [[264963540628], [227645186054], [287889878614], [301465596226]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 08:49:51: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 08:49:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 08:49:52: INFO] 319 executions left in scheduler queue
[2019-08-03 08:49:52: INFO] Executions until ETA known: 932
[2019-08-03 08:49:52: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 08:49:52: INFO] Estimated completion (next execution): 2019-08-03 08:57:36 (0:07:43 from now)
[2019-08-03 08:49:52: INFO] Reboot in preparation for next execution
[2019-08-03 09:06:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.211 s/op
Iteration   2: 15.378 s/op
Iteration   3: 15.132 s/op
Iteration   4: 15.160 s/op
Iteration   5: 15.136 s/op
Iteration   6: 15.165 s/op
Iteration   7: 15.156 s/op
Iteration   8: 15.137 s/op
Iteration   9: 15.157 s/op
Iteration  10: 15.186 s/op
Iteration  11: 15.176 s/op
Iteration  12: 15.162 s/op
Iteration  13: 15.155 s/op
Iteration  14: 15.203 s/op
Iteration  15: 15.156 s/op
Iteration  16: 15.156 s/op
Iteration  17: 15.138 s/op
Iteration  18: 15.102 s/op
Iteration  19: 15.151 s/op
Iteration  20: 15.096 s/op
Iteration  21: 15.143 s/op
Iteration  22: 15.143 s/op
Iteration  23: 15.201 s/op
Iteration  24: 15.117 s/op
Iteration  25: 15.360 s/op
Iteration  26: 15.124 s/op
Iteration  27: 15.157 s/op
Iteration  28: 15.141 s/op
Iteration  29: 15.123 s/op
Iteration  30: 15.143 s/op
Iteration  31: 15.120 s/op
Iteration  32: 15.098 s/op
Iteration  33: 15.144 s/op
Iteration  34: 15.103 s/op
Iteration  35: 15.065 s/op
Iteration  36: 15.090 s/op
Iteration  37: 15.106 s/op
Iteration  38: 15.129 s/op
Iteration  39: 15.079 s/op
Iteration  40: 15.137 s/op
Iteration  41: 15.148 s/op
Iteration  42: 15.083 s/op
Iteration  43: 15.120 s/op
Iteration  44: 15.097 s/op
Iteration  45: 15.120 s/op
Iteration  46: 15.158 s/op
Iteration  47: 15.076 s/op
Iteration  48: 15.088 s/op
Iteration  49: 15.370 s/op
Iteration  50: 15.105 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.148 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [15.000, 15.025) = 0 
    [15.025, 15.050) = 0 
    [15.050, 15.075) = 1 
    [15.075, 15.100) = 8 
    [15.100, 15.125) = 10 
    [15.125, 15.150) = 12 
    [15.150, 15.175) = 11 
    [15.175, 15.200) = 2 
    [15.200, 15.225) = 3 
    [15.225, 15.250) = 0 
    [15.250, 15.275) = 0 
    [15.275, 15.300) = 0 
    [15.300, 15.325) = 0 
    [15.325, 15.350) = 0 
    [15.350, 15.375) = 2 
    [15.375, 15.400) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.065 s/op
     p(50.0000) =     15.139 s/op
     p(90.0000) =     15.203 s/op
     p(95.0000) =     15.364 s/op
     p(99.0000) =     15.378 s/op
     p(99.9000) =     15.378 s/op
     p(99.9900) =     15.378 s/op
     p(99.9990) =     15.378 s/op
     p(99.9999) =     15.378 s/op
    p(100.0000) =     15.378 s/op


# Run complete. Total time: 00:12:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.148 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot-8u222-b10_1564815247607.json
{"wallclock_times": [758.263587423], "core_cycle_counts": [[722824367647], [642574497025], [573155529729], [502410999009]], "aperf_counts": [[721191258196], [642441027685], [573105958122], [502365225202]], "mperf_counts": [[721210406054], [642446443396], [573106613638], [502365350158]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 09:06:45: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-03 09:06:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 09:06:46: INFO] 318 executions left in scheduler queue
[2019-08-03 09:06:46: INFO] Executions until ETA known: 908
[2019-08-03 09:06:46: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-08-03 09:06:46: INFO] Estimated completion (next execution): 2019-08-03 09:21:55 (0:15:08 from now)
[2019-08-03 09:06:46: INFO] Reboot in preparation for next execution
[2019-08-03 09:11:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 09:23:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.043 s/op
Iteration   2: 14.738 s/op
Iteration   3: 14.435 s/op
Iteration   4: 14.434 s/op
Iteration   5: 14.468 s/op
Iteration   6: 14.476 s/op
Iteration   7: 14.472 s/op
Iteration   8: 14.427 s/op
Iteration   9: 14.299 s/op
Iteration  10: 14.327 s/op
Iteration  11: 14.297 s/op
Iteration  12: 14.322 s/op
Iteration  13: 14.324 s/op
Iteration  14: 14.305 s/op
Iteration  15: 14.288 s/op
Iteration  16: 14.299 s/op
Iteration  17: 14.606 s/op
Iteration  18: 14.524 s/op
Iteration  19: 14.636 s/op
Iteration  20: 14.638 s/op
Iteration  21: 14.583 s/op
Iteration  22: 14.567 s/op
Iteration  23: 14.576 s/op
Iteration  24: 14.601 s/op
Iteration  25: 14.592 s/op
Iteration  26: 14.571 s/op
Iteration  27: 14.581 s/op
Iteration  28: 14.614 s/op
Iteration  29: 14.604 s/op
Iteration  30: 14.601 s/op
Iteration  31: 14.565 s/op
Iteration  32: 14.616 s/op
Iteration  33: 14.588 s/op
Iteration  34: 14.566 s/op
Iteration  35: 14.622 s/op
Iteration  36: 14.581 s/op
Iteration  37: 14.582 s/op
Iteration  38: 14.565 s/op
Iteration  39: 14.592 s/op
Iteration  40: 14.633 s/op
Iteration  41: 14.645 s/op
Iteration  42: 14.565 s/op
Iteration  43: 14.579 s/op
Iteration  44: 14.566 s/op
Iteration  45: 14.597 s/op
Iteration  46: 14.586 s/op
Iteration  47: 14.590 s/op
Iteration  48: 14.661 s/op
Iteration  49: 14.557 s/op
Iteration  50: 14.643 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     14.543 ?(99.9%) 0.067 s/op

  Histogram, s/op:
    [14.200, 14.250) = 0 
    [14.250, 14.300) = 4 
    [14.300, 14.350) = 4 
    [14.350, 14.400) = 0 
    [14.400, 14.450) = 3 
    [14.450, 14.500) = 3 
    [14.500, 14.550) = 1 
    [14.550, 14.600) = 20 
    [14.600, 14.650) = 12 
    [14.650, 14.700) = 1 
    [14.700, 14.750) = 1 
    [14.750, 14.800) = 0 
    [14.800, 14.850) = 0 
    [14.850, 14.900) = 0 
    [14.900, 14.950) = 0 
    [14.950, 15.000) = 0 
    [15.000, 15.050) = 1 
    [15.050, 15.100) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.288 s/op
     p(50.0000) =     14.580 s/op
     p(90.0000) =     14.642 s/op
     p(95.0000) =     14.695 s/op
     p(99.0000) =     15.043 s/op
     p(99.9000) =     15.043 s/op
     p(99.9900) =     15.043 s/op
     p(99.9990) =     15.043 s/op
     p(99.9999) =     15.043 s/op
    p(100.0000) =     15.043 s/op


# Run complete. Total time: 00:12:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  14.543 ? 0.067   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9-8u222-b10_1564816261562.json
{"wallclock_times": [728.287676435], "core_cycle_counts": [[476283158067], [457226114233], [852775843213], [593407284570]], "aperf_counts": [[474262477248], [457076219795], [852664828503], [593299385527]], "mperf_counts": [[474270132850], [457076273190], [852665577258], [593299453816]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 09:23:09: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-08-03 09:23:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 09:23:10: INFO] 317 executions left in scheduler queue
[2019-08-03 09:23:10: INFO] Executions until ETA known: 877
[2019-08-03 09:23:10: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 09:23:10: INFO] Estimated completion (next execution): 2019-08-03 09:37:49 (0:14:38 from now)
[2019-08-03 09:23:10: INFO] Reboot in preparation for next execution
[2019-08-03 09:27:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 09:27:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 09:27:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 09:27:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 09:27:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 09:35:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.914 s/op
Iteration   2: 9.703 s/op
Iteration   3: 9.513 s/op
Iteration   4: 9.742 s/op
Iteration   5: 9.381 s/op
Iteration   6: 9.407 s/op
Iteration   7: 9.432 s/op
Iteration   8: 9.385 s/op
Iteration   9: 9.426 s/op
Iteration  10: 9.421 s/op
Iteration  11: 9.410 s/op
Iteration  12: 9.396 s/op
Iteration  13: 9.378 s/op
Iteration  14: 9.392 s/op
Iteration  15: 9.377 s/op
Iteration  16: 9.407 s/op
Iteration  17: 9.406 s/op
Iteration  18: 9.399 s/op
Iteration  19: 9.418 s/op
Iteration  20: 9.389 s/op
Iteration  21: 9.416 s/op
Iteration  22: 9.393 s/op
Iteration  23: 9.385 s/op
Iteration  24: 9.432 s/op
Iteration  25: 9.402 s/op
Iteration  26: 9.383 s/op
Iteration  27: 9.393 s/op
Iteration  28: 9.443 s/op
Iteration  29: 9.365 s/op
Iteration  30: 9.380 s/op
Iteration  31: 9.403 s/op
Iteration  32: 9.430 s/op
Iteration  33: 9.447 s/op
Iteration  34: 9.380 s/op
Iteration  35: 9.388 s/op
Iteration  36: 9.407 s/op
Iteration  37: 9.410 s/op
Iteration  38: 9.404 s/op
Iteration  39: 9.442 s/op
Iteration  40: 9.383 s/op
Iteration  41: 9.390 s/op
Iteration  42: 9.410 s/op
Iteration  43: 9.402 s/op
Iteration  44: 9.392 s/op
Iteration  45: 9.396 s/op
Iteration  46: 9.365 s/op
Iteration  47: 9.395 s/op
Iteration  48: 9.388 s/op
Iteration  49: 9.382 s/op
Iteration  50: 9.375 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.426 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [ 9.300,  9.350) = 0 
    [ 9.350,  9.400) = 25 
    [ 9.400,  9.450) = 21 
    [ 9.450,  9.500) = 0 
    [ 9.500,  9.550) = 1 
    [ 9.550,  9.600) = 0 
    [ 9.600,  9.650) = 0 
    [ 9.650,  9.700) = 0 
    [ 9.700,  9.750) = 2 
    [ 9.750,  9.800) = 0 
    [ 9.800,  9.850) = 0 
    [ 9.850,  9.900) = 0 
    [ 9.900,  9.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.365 s/op
     p(50.0000) =      9.400 s/op
     p(90.0000) =      9.446 s/op
     p(95.0000) =      9.720 s/op
     p(99.0000) =      9.914 s/op
     p(99.9000) =      9.914 s/op
     p(99.9900) =      9.914 s/op
     p(99.9990) =      9.914 s/op
     p(99.9999) =      9.914 s/op
    p(100.0000) =      9.914 s/op


# Run complete. Total time: 00:07:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.426 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot_12.0.2_1564817259581.json
{"wallclock_times": [472.26559134199994], "core_cycle_counts": [[406038022871], [276209822074], [533330467917], [308998754622]], "aperf_counts": [[404895463291], [276100805354], [533287595351], [308960725907]], "mperf_counts": [[405437141444], [276204502624], [533331546968], [309021834534]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 09:35:31: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 09:35:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 09:35:32: INFO] 316 executions left in scheduler queue
[2019-08-03 09:35:32: INFO] Executions until ETA known: 871
[2019-08-03 09:35:32: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 09:35:32: INFO] Estimated completion (next execution): 2019-08-03 09:45:55 (0:10:22 from now)
[2019-08-03 09:35:32: INFO] Reboot in preparation for next execution
[2019-08-03 09:39:45: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 09:39:45: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 09:39:45: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 09:39:45: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 09:39:45: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 09:53:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.927 s/op
Iteration   2: 16.409 s/op
Iteration   3: 16.574 s/op
Iteration   4: 16.197 s/op
Iteration   5: 16.464 s/op
Iteration   6: 16.350 s/op
Iteration   7: 16.232 s/op
Iteration   8: 16.233 s/op
Iteration   9: 16.231 s/op
Iteration  10: 16.186 s/op
Iteration  11: 16.190 s/op
Iteration  12: 16.155 s/op
Iteration  13: 16.121 s/op
Iteration  14: 16.131 s/op
Iteration  15: 16.053 s/op
Iteration  16: 16.127 s/op
Iteration  17: 16.207 s/op
Iteration  18: 16.223 s/op
Iteration  19: 16.240 s/op
Iteration  20: 16.178 s/op
Iteration  21: 16.217 s/op
Iteration  22: 16.101 s/op
Iteration  23: 16.161 s/op
Iteration  24: 16.136 s/op
Iteration  25: 16.113 s/op
Iteration  26: 16.186 s/op
Iteration  27: 16.168 s/op
Iteration  28: 16.214 s/op
Iteration  29: 16.170 s/op
Iteration  30: 16.243 s/op
Iteration  31: 16.199 s/op
Iteration  32: 16.189 s/op
Iteration  33: 16.163 s/op
Iteration  34: 16.129 s/op
Iteration  35: 16.080 s/op
Iteration  36: 16.129 s/op
Iteration  37: 16.143 s/op
Iteration  38: 16.098 s/op
Iteration  39: 16.143 s/op
Iteration  40: 16.254 s/op
Iteration  41: 16.254 s/op
Iteration  42: 16.231 s/op
Iteration  43: 16.166 s/op
Iteration  44: 16.202 s/op
Iteration  45: 16.120 s/op
Iteration  46: 16.087 s/op
Iteration  47: 16.092 s/op
Iteration  48: 16.147 s/op
Iteration  49: 16.176 s/op
Iteration  50: 16.173 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.186 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [15.900, 15.950) = 1 
    [15.950, 16.000) = 0 
    [16.000, 16.050) = 0 
    [16.050, 16.100) = 5 
    [16.100, 16.150) = 12 
    [16.150, 16.200) = 15 
    [16.200, 16.250) = 11 
    [16.250, 16.300) = 2 
    [16.300, 16.350) = 0 
    [16.350, 16.400) = 1 
    [16.400, 16.450) = 1 
    [16.450, 16.500) = 1 
    [16.500, 16.550) = 0 
    [16.550, 16.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.927 s/op
     p(50.0000) =     16.175 s/op
     p(90.0000) =     16.254 s/op
     p(95.0000) =     16.434 s/op
     p(99.0000) =     16.574 s/op
     p(99.9000) =     16.574 s/op
     p(99.9900) =     16.574 s/op
     p(99.9990) =     16.574 s/op
     p(99.9999) =     16.574 s/op
    p(100.0000) =     16.574 s/op


# Run complete. Total time: 00:13:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.186 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot_12.0.2_1564817985086.json
{"wallclock_times": [810.338357802], "core_cycle_counts": [[188581658003], [582957656386], [396873976178], [1443019981842]], "aperf_counts": [[186127205297], [582879808138], [396837722704], [1442993060473]], "mperf_counts": [[187127162800], [583339418456], [397193994398], [1443165726284]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 09:53:15: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 09:53:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 09:53:16: INFO] 315 executions left in scheduler queue
[2019-08-03 09:53:16: INFO] Executions until ETA known: 869
[2019-08-03 09:53:16: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 09:53:16: INFO] Estimated completion (next execution): 2019-08-03 10:09:16 (0:16:00 from now)
[2019-08-03 09:53:16: INFO] Reboot in preparation for next execution
[2019-08-03 09:57:30: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 09:57:30: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 09:57:30: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 09:57:30: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 09:57:30: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 10:02:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.934 s/op
Iteration   2: 6.546 s/op
Iteration   3: 6.591 s/op
Iteration   4: 6.686 s/op
Iteration   5: 6.566 s/op
Iteration   6: 6.516 s/op
Iteration   7: 6.466 s/op
Iteration   8: 6.555 s/op
Iteration   9: 6.701 s/op
Iteration  10: 6.509 s/op
Iteration  11: 6.530 s/op
Iteration  12: 6.480 s/op
Iteration  13: 6.460 s/op
Iteration  14: 6.479 s/op
Iteration  15: 6.488 s/op
Iteration  16: 6.483 s/op
Iteration  17: 6.475 s/op
Iteration  18: 6.482 s/op
Iteration  19: 6.469 s/op
Iteration  20: 6.458 s/op
Iteration  21: 6.639 s/op
Iteration  22: 6.479 s/op
Iteration  23: 6.472 s/op
Iteration  24: 6.475 s/op
Iteration  25: 6.458 s/op
Iteration  26: 6.471 s/op
Iteration  27: 6.594 s/op
Iteration  28: 6.481 s/op
Iteration  29: 6.457 s/op
Iteration  30: 6.554 s/op
Iteration  31: 6.448 s/op
Iteration  32: 6.578 s/op
Iteration  33: 6.429 s/op
Iteration  34: 6.560 s/op
Iteration  35: 6.476 s/op
Iteration  36: 6.482 s/op
Iteration  37: 6.501 s/op
Iteration  38: 6.482 s/op
Iteration  39: 6.467 s/op
Iteration  40: 6.466 s/op
Iteration  41: 6.449 s/op
Iteration  42: 6.480 s/op
Iteration  43: 6.469 s/op
Iteration  44: 6.466 s/op
Iteration  45: 6.614 s/op
Iteration  46: 6.471 s/op
Iteration  47: 6.455 s/op
Iteration  48: 6.494 s/op
Iteration  49: 6.471 s/op
Iteration  50: 6.466 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.514 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [6.400, 6.450) = 3 
    [6.450, 6.500) = 30 
    [6.500, 6.550) = 5 
    [6.550, 6.600) = 7 
    [6.600, 6.650) = 2 
    [6.650, 6.700) = 1 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.429 s/op
     p(50.0000) =      6.480 s/op
     p(90.0000) =      6.612 s/op
     p(95.0000) =      6.693 s/op
     p(99.0000) =      6.934 s/op
     p(99.9000) =      6.934 s/op
     p(99.9900) =      6.934 s/op
     p(99.9990) =      6.934 s/op
     p(99.9999) =      6.934 s/op
    p(100.0000) =      6.934 s/op


# Run complete. Total time: 00:05:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.514 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot_12.0.2_1564819050592.json
{"wallclock_times": [326.820628261], "core_cycle_counts": [[336411648410], [201320744123], [252241220159], [347519586825]], "aperf_counts": [[335661097396], [201227119563], [252193652225], [347481299689]], "mperf_counts": [[336321651086], [201971135226], [252336754734], [347661040422]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 10:02:57: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 10:02:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 10:02:58: INFO] 314 executions left in scheduler queue
[2019-08-03 10:02:58: INFO] Executions until ETA known: 863
[2019-08-03 10:02:58: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 10:02:58: INFO] Estimated completion (next execution): 2019-08-03 10:10:55 (0:07:57 from now)
[2019-08-03 10:02:58: INFO] Reboot in preparation for next execution
[2019-08-03 10:07:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 10:07:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 10:07:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 10:07:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 10:07:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 10:12:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.612 s/op
Iteration   2: 6.552 s/op
Iteration   3: 6.734 s/op
Iteration   4: 6.760 s/op
Iteration   5: 6.709 s/op
Iteration   6: 6.950 s/op
Iteration   7: 6.642 s/op
Iteration   8: 6.662 s/op
Iteration   9: 6.705 s/op
Iteration  10: 6.662 s/op
Iteration  11: 6.688 s/op
Iteration  12: 6.638 s/op
Iteration  13: 6.605 s/op
Iteration  14: 6.629 s/op
Iteration  15: 6.603 s/op
Iteration  16: 6.626 s/op
Iteration  17: 6.639 s/op
Iteration  18: 6.640 s/op
Iteration  19: 6.648 s/op
Iteration  20: 6.612 s/op
Iteration  21: 6.683 s/op
Iteration  22: 6.688 s/op
Iteration  23: 6.626 s/op
Iteration  24: 6.649 s/op
Iteration  25: 6.631 s/op
Iteration  26: 6.627 s/op
Iteration  27: 6.669 s/op
Iteration  28: 6.635 s/op
Iteration  29: 6.630 s/op
Iteration  30: 6.650 s/op
Iteration  31: 6.612 s/op
Iteration  32: 6.644 s/op
Iteration  33: 6.651 s/op
Iteration  34: 6.649 s/op
Iteration  35: 6.638 s/op
Iteration  36: 6.626 s/op
Iteration  37: 6.636 s/op
Iteration  38: 6.626 s/op
Iteration  39: 6.663 s/op
Iteration  40: 6.630 s/op
Iteration  41: 6.673 s/op
Iteration  42: 6.614 s/op
Iteration  43: 6.633 s/op
Iteration  44: 6.624 s/op
Iteration  45: 6.614 s/op
Iteration  46: 6.624 s/op
Iteration  47: 6.603 s/op
Iteration  48: 6.638 s/op
Iteration  49: 6.596 s/op
Iteration  50: 6.624 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.648 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 2 
    [6.600, 6.650) = 33 
    [6.650, 6.700) = 10 
    [6.700, 6.750) = 3 
    [6.750, 6.800) = 1 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.552 s/op
     p(50.0000) =      6.637 s/op
     p(90.0000) =      6.704 s/op
     p(95.0000) =      6.746 s/op
     p(99.0000) =      6.950 s/op
     p(99.9000) =      6.950 s/op
     p(99.9900) =      6.950 s/op
     p(99.9990) =      6.950 s/op
     p(99.9999) =      6.950 s/op
    p(100.0000) =      6.950 s/op


# Run complete. Total time: 00:05:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.648 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot_12.0.2_1564819632597.json
{"wallclock_times": [333.49587657200004], "core_cycle_counts": [[217807287842], [180967268208], [310155005679], [243764487913]], "aperf_counts": [[216964594110], [180889813426], [310108301349], [243733294482]], "mperf_counts": [[247064540554], [205991278424], [352047390840], [278012734354]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 10:12:46: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-03 10:12:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 10:12:47: INFO] 313 executions left in scheduler queue
[2019-08-03 10:12:47: INFO] Executions until ETA known: 855
[2019-08-03 10:12:47: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 10:12:47: INFO] Estimated completion (next execution): 2019-08-03 10:20:50 (0:08:03 from now)
[2019-08-03 10:12:47: INFO] Reboot in preparation for next execution
[2019-08-03 10:17:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 10:17:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 10:17:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 10:17:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 10:17:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 10:22:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.341 s/op
Iteration   2: 7.095 s/op
Iteration   3: 7.497 s/op
Iteration   4: 7.195 s/op
Iteration   5: 6.294 s/op
Iteration   6: 7.169 s/op
Iteration   7: 6.683 s/op
Iteration   8: 7.109 s/op
Iteration   9: 7.212 s/op
Iteration  10: 6.895 s/op
Iteration  11: 6.956 s/op
Iteration  12: 7.202 s/op
Iteration  13: 7.191 s/op
Iteration  14: 7.180 s/op
Iteration  15: 7.189 s/op
Iteration  16: 7.171 s/op
Iteration  17: 7.191 s/op
Iteration  18: 7.184 s/op
Iteration  19: 7.059 s/op
Iteration  20: 7.192 s/op
Iteration  21: 7.190 s/op
Iteration  22: 7.180 s/op
Iteration  23: 7.175 s/op
Iteration  24: 7.162 s/op
Iteration  25: 7.199 s/op
Iteration  26: 7.186 s/op
Iteration  27: 7.032 s/op
Iteration  28: 7.171 s/op
Iteration  29: 7.171 s/op
Iteration  30: 7.170 s/op
Iteration  31: 7.184 s/op
Iteration  32: 7.195 s/op
Iteration  33: 7.169 s/op
Iteration  34: 7.187 s/op
Iteration  35: 7.186 s/op
Iteration  36: 7.170 s/op
Iteration  37: 7.189 s/op
Iteration  38: 7.176 s/op
Iteration  39: 7.190 s/op
Iteration  40: 7.154 s/op
Iteration  41: 7.176 s/op
Iteration  42: 6.776 s/op
Iteration  43: 7.196 s/op
Iteration  44: 7.004 s/op
Iteration  45: 7.159 s/op
Iteration  46: 7.161 s/op
Iteration  47: 7.210 s/op
Iteration  48: 6.609 s/op
Iteration  49: 7.183 s/op
Iteration  50: 7.210 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.123 ?(99.9%) 0.092 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 1 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 1 
    [6.875, 7.000) = 2 
    [7.000, 7.125) = 5 
    [7.125, 7.250) = 37 
    [7.250, 7.375) = 1 
    [7.375, 7.500) = 1 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.294 s/op
     p(50.0000) =      7.178 s/op
     p(90.0000) =      7.209 s/op
     p(95.0000) =      7.270 s/op
     p(99.0000) =      7.497 s/op
     p(99.9000) =      7.497 s/op
     p(99.9900) =      7.497 s/op
     p(99.9990) =      7.497 s/op
     p(99.9999) =      7.497 s/op
    p(100.0000) =      7.497 s/op


# Run complete. Total time: 00:05:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.123 ? 0.092   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot_11.0.4_1564820222432.json
{"wallclock_times": [357.27737898900006], "core_cycle_counts": [[79593150553], [403693917319], [157359772465], [394759255668]], "aperf_counts": [[78494002430], [403634345019], [157320316353], [394725228413]], "mperf_counts": [[88377604198], [453310176916], [178652730430], [444893898124]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 10:22:59: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 10:23:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 10:23:00: INFO] 312 executions left in scheduler queue
[2019-08-03 10:23:00: INFO] Executions until ETA known: 850
[2019-08-03 10:23:00: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 10:23:00: INFO] Estimated completion (next execution): 2019-08-03 10:31:28 (0:08:27 from now)
[2019-08-03 10:23:00: INFO] Reboot in preparation for next execution
[2019-08-03 10:27:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 10:27:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 10:27:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 10:27:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 10:27:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 10:36:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.731 s/op
Iteration   2: 11.349 s/op
Iteration   3: 11.096 s/op
Iteration   4: 10.761 s/op
Iteration   5: 10.734 s/op
Iteration   6: 10.758 s/op
Iteration   7: 10.727 s/op
Iteration   8: 10.701 s/op
Iteration   9: 10.724 s/op
Iteration  10: 10.726 s/op
Iteration  11: 10.727 s/op
Iteration  12: 10.746 s/op
Iteration  13: 10.724 s/op
Iteration  14: 10.741 s/op
Iteration  15: 10.696 s/op
Iteration  16: 10.724 s/op
Iteration  17: 10.710 s/op
Iteration  18: 10.718 s/op
Iteration  19: 10.715 s/op
Iteration  20: 10.685 s/op
Iteration  21: 10.705 s/op
Iteration  22: 10.687 s/op
Iteration  23: 10.709 s/op
Iteration  24: 10.718 s/op
Iteration  25: 10.724 s/op
Iteration  26: 10.721 s/op
Iteration  27: 10.717 s/op
Iteration  28: 10.721 s/op
Iteration  29: 10.704 s/op
Iteration  30: 10.728 s/op
Iteration  31: 10.701 s/op
Iteration  32: 10.727 s/op
Iteration  33: 10.723 s/op
Iteration  34: 10.714 s/op
Iteration  35: 10.720 s/op
Iteration  36: 10.718 s/op
Iteration  37: 10.720 s/op
Iteration  38: 10.735 s/op
Iteration  39: 10.732 s/op
Iteration  40: 10.721 s/op
Iteration  41: 10.693 s/op
Iteration  42: 10.702 s/op
Iteration  43: 10.711 s/op
Iteration  44: 10.715 s/op
Iteration  45: 10.715 s/op
Iteration  46: 10.724 s/op
Iteration  47: 10.713 s/op
Iteration  48: 10.704 s/op
Iteration  49: 10.711 s/op
Iteration  50: 10.710 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.739 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [10.600, 10.650) = 0 
    [10.650, 10.700) = 4 
    [10.700, 10.750) = 42 
    [10.750, 10.800) = 2 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 1 
    [11.100, 11.150) = 0 
    [11.150, 11.200) = 0 
    [11.200, 11.250) = 0 
    [11.250, 11.300) = 0 
    [11.300, 11.350) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.685 s/op
     p(50.0000) =     10.720 s/op
     p(90.0000) =     10.746 s/op
     p(95.0000) =     10.912 s/op
     p(99.0000) =     11.349 s/op
     p(99.9000) =     11.349 s/op
     p(99.9900) =     11.349 s/op
     p(99.9990) =     11.349 s/op
     p(99.9999) =     11.349 s/op
    p(100.0000) =     11.349 s/op


# Run complete. Total time: 00:08:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.739 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot_11.0.4_1564820837621.json
{"wallclock_times": [537.990846746], "core_cycle_counts": [[391520830973], [497938776567], [519479877436], [329556689311]], "aperf_counts": [[390140861016], [497829493009], [519431404567], [329493818032]], "mperf_counts": [[390561427998], [497870270694], [520032010648], [329529116408]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 10:36:15: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 10:36:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 10:36:16: INFO] 311 executions left in scheduler queue
[2019-08-03 10:36:16: INFO] Executions until ETA known: 848
[2019-08-03 10:36:16: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 10:36:16: INFO] Estimated completion (next execution): 2019-08-03 10:47:44 (0:11:28 from now)
[2019-08-03 10:36:16: INFO] Reboot in preparation for next execution
[2019-08-03 10:40:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 10:40:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 10:40:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 10:40:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 10:40:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 10:46:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.256 s/op
Iteration   2: 6.995 s/op
Iteration   3: 7.070 s/op
Iteration   4: 6.764 s/op
Iteration   5: 6.633 s/op
Iteration   6: 6.795 s/op
Iteration   7: 6.818 s/op
Iteration   8: 6.689 s/op
Iteration   9: 6.841 s/op
Iteration  10: 6.681 s/op
Iteration  11: 6.853 s/op
Iteration  12: 6.844 s/op
Iteration  13: 6.678 s/op
Iteration  14: 6.823 s/op
Iteration  15: 6.699 s/op
Iteration  16: 6.822 s/op
Iteration  17: 6.837 s/op
Iteration  18: 6.714 s/op
Iteration  19: 6.848 s/op
Iteration  20: 6.704 s/op
Iteration  21: 6.830 s/op
Iteration  22: 6.817 s/op
Iteration  23: 6.836 s/op
Iteration  24: 6.658 s/op
Iteration  25: 6.791 s/op
Iteration  26: 6.789 s/op
Iteration  27: 6.782 s/op
Iteration  28: 6.790 s/op
Iteration  29: 6.765 s/op
Iteration  30: 6.763 s/op
Iteration  31: 6.877 s/op
Iteration  32: 6.747 s/op
Iteration  33: 6.732 s/op
Iteration  34: 6.783 s/op
Iteration  35: 6.668 s/op
Iteration  36: 6.809 s/op
Iteration  37: 6.676 s/op
Iteration  38: 6.820 s/op
Iteration  39: 6.833 s/op
Iteration  40: 6.680 s/op
Iteration  41: 6.836 s/op
Iteration  42: 6.832 s/op
Iteration  43: 6.693 s/op
Iteration  44: 6.818 s/op
Iteration  45: 6.684 s/op
Iteration  46: 6.823 s/op
Iteration  47: 6.819 s/op
Iteration  48: 6.683 s/op
Iteration  49: 6.813 s/op
Iteration  50: 6.798 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.792 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [6.600, 6.650) = 1 
    [6.650, 6.700) = 11 
    [6.700, 6.750) = 4 
    [6.750, 6.800) = 10 
    [6.800, 6.850) = 19 
    [6.850, 6.900) = 2 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 1 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 1 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.633 s/op
     p(50.0000) =      6.796 s/op
     p(90.0000) =      6.853 s/op
     p(95.0000) =      7.029 s/op
     p(99.0000) =      7.256 s/op
     p(99.9000) =      7.256 s/op
     p(99.9900) =      7.256 s/op
     p(99.9990) =      7.256 s/op
     p(99.9999) =      7.256 s/op
    p(100.0000) =      7.256 s/op


# Run complete. Total time: 00:05:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.792 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot_11.0.4_1564821641614.json
{"wallclock_times": [340.81483713], "core_cycle_counts": [[323211131850], [177493582264], [455699145124], [259533545731]], "aperf_counts": [[322383103672], [177383271276], [455657714288], [259493084510]], "mperf_counts": [[323224511298], [177601262970], [455722705316], [259552544030]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 10:46:22: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 10:46:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 10:46:23: INFO] 310 executions left in scheduler queue
[2019-08-03 10:46:23: INFO] Executions until ETA known: 838
[2019-08-03 10:46:23: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 10:46:23: INFO] Estimated completion (next execution): 2019-08-03 10:54:34 (0:08:11 from now)
[2019-08-03 10:46:23: INFO] Reboot in preparation for next execution
[2019-08-03 10:50:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 10:50:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 10:50:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 10:50:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 10:50:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 11:04:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.122 s/op
Iteration   2: 16.198 s/op
Iteration   3: 16.728 s/op
Iteration   4: 15.948 s/op
Iteration   5: 15.904 s/op
Iteration   6: 15.863 s/op
Iteration   7: 15.922 s/op
Iteration   8: 16.009 s/op
Iteration   9: 15.992 s/op
Iteration  10: 15.860 s/op
Iteration  11: 15.903 s/op
Iteration  12: 15.903 s/op
Iteration  13: 15.945 s/op
Iteration  14: 15.910 s/op
Iteration  15: 15.862 s/op
Iteration  16: 15.867 s/op
Iteration  17: 15.972 s/op
Iteration  18: 15.871 s/op
Iteration  19: 15.895 s/op
Iteration  20: 15.899 s/op
Iteration  21: 15.945 s/op
Iteration  22: 15.889 s/op
Iteration  23: 15.856 s/op
Iteration  24: 15.879 s/op
Iteration  25: 15.895 s/op
Iteration  26: 15.909 s/op
Iteration  27: 15.885 s/op
Iteration  28: 15.892 s/op
Iteration  29: 15.930 s/op
Iteration  30: 15.920 s/op
Iteration  31: 15.881 s/op
Iteration  32: 15.890 s/op
Iteration  33: 15.889 s/op
Iteration  34: 15.869 s/op
Iteration  35: 15.877 s/op
Iteration  36: 15.924 s/op
Iteration  37: 15.882 s/op
Iteration  38: 15.951 s/op
Iteration  39: 15.882 s/op
Iteration  40: 15.951 s/op
Iteration  41: 15.910 s/op
Iteration  42: 15.894 s/op
Iteration  43: 15.900 s/op
Iteration  44: 15.863 s/op
Iteration  45: 15.876 s/op
Iteration  46: 15.890 s/op
Iteration  47: 15.909 s/op
Iteration  48: 15.829 s/op
Iteration  49: 15.935 s/op
Iteration  50: 15.909 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.930 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [15.800, 15.900) = 26 
    [15.900, 16.000) = 20 
    [16.000, 16.100) = 1 
    [16.100, 16.200) = 2 
    [16.200, 16.300) = 0 
    [16.300, 16.400) = 0 
    [16.400, 16.500) = 0 
    [16.500, 16.600) = 0 
    [16.600, 16.700) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.829 s/op
     p(50.0000) =     15.899 s/op
     p(90.0000) =     15.990 s/op
     p(95.0000) =     16.157 s/op
     p(99.0000) =     16.728 s/op
     p(99.9000) =     16.728 s/op
     p(99.9900) =     16.728 s/op
     p(99.9990) =     16.728 s/op
     p(99.9999) =     16.728 s/op
    p(100.0000) =     16.728 s/op


# Run complete. Total time: 00:13:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.930 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot_11.0.4_1564822258470.json
{"wallclock_times": [797.575136395], "core_cycle_counts": [[761881962899], [562607741155], [953234717549], [305239063472]], "aperf_counts": [[760066896102], [562408889104], [953152230277], [305163095420]], "mperf_counts": [[762334515290], [562683582040], [953254557778], [305200856272]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 11:04:16: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-03 11:04:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 11:04:16: INFO] 309 executions left in scheduler queue
[2019-08-03 11:04:16: INFO] Executions until ETA known: 814
[2019-08-03 11:04:16: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-03 11:04:16: INFO] Estimated completion (next execution): 2019-08-03 11:20:04 (0:15:47 from now)
[2019-08-03 11:04:16: INFO] Reboot in preparation for next execution
[2019-08-03 11:10:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.027 s/op
Iteration   2: 1.642 s/op
Iteration   3: 1.862 s/op
Iteration   4: 1.944 s/op
Iteration   5: 1.913 s/op
Iteration   6: 1.908 s/op
Iteration   7: 1.903 s/op
Iteration   8: 1.904 s/op
Iteration   9: 1.912 s/op
Iteration  10: 1.909 s/op
Iteration  11: 1.906 s/op
Iteration  12: 1.910 s/op
Iteration  13: 1.902 s/op
Iteration  14: 1.906 s/op
Iteration  15: 1.906 s/op
Iteration  16: 1.910 s/op
Iteration  17: 1.933 s/op
Iteration  18: 1.909 s/op
Iteration  19: 1.910 s/op
Iteration  20: 1.909 s/op
Iteration  21: 1.906 s/op
Iteration  22: 1.903 s/op
Iteration  23: 1.908 s/op
Iteration  24: 1.906 s/op
Iteration  25: 1.912 s/op
Iteration  26: 1.914 s/op
Iteration  27: 1.908 s/op
Iteration  28: 1.906 s/op
Iteration  29: 1.907 s/op
Iteration  30: 1.904 s/op
Iteration  31: 1.909 s/op
Iteration  32: 1.907 s/op
Iteration  33: 1.906 s/op
Iteration  34: 1.907 s/op
Iteration  35: 1.909 s/op
Iteration  36: 1.911 s/op
Iteration  37: 1.909 s/op
Iteration  38: 1.905 s/op
Iteration  39: 1.905 s/op
Iteration  40: 1.906 s/op
Iteration  41: 1.905 s/op
Iteration  42: 1.905 s/op
Iteration  43: 1.904 s/op
Iteration  44: 1.911 s/op
Iteration  45: 1.912 s/op
Iteration  46: 1.910 s/op
Iteration  47: 1.915 s/op
Iteration  48: 1.910 s/op
Iteration  49: 1.913 s/op
Iteration  50: 1.914 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.905 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 47 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.642 s/op
     p(50.0000) =      1.908 s/op
     p(90.0000) =      1.914 s/op
     p(95.0000) =      1.938 s/op
     p(99.0000) =      2.027 s/op
     p(99.9000) =      2.027 s/op
     p(99.9900) =      2.027 s/op
     p(99.9990) =      2.027 s/op
     p(99.9999) =      2.027 s/op
    p(100.0000) =      2.027 s/op


# Run complete. Total time: 00:01:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.905 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot-8u222-b10_1564823311537.json
{"wallclock_times": [96.12079304899999], "core_cycle_counts": [[74986761271], [97711336675], [106463689532], [43668377507]], "aperf_counts": [[74678713711], [97674269186], [106445746417], [43646250899]], "mperf_counts": [[74689664428], [97674343072], [106447046204], [43646318416]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 11:10:07: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-03 11:10:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 11:10:08: INFO] 308 executions left in scheduler queue
[2019-08-03 11:10:08: INFO] Executions until ETA known: 811
[2019-08-03 11:10:08: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-03 11:10:08: INFO] Estimated completion (next execution): 2019-08-03 11:14:14 (0:04:06 from now)
[2019-08-03 11:10:08: INFO] Reboot in preparation for next execution
[2019-08-03 11:15:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.805 s/op
Iteration   2: 1.344 s/op
Iteration   3: 1.675 s/op
Iteration   4: 1.605 s/op
Iteration   5: 1.610 s/op
Iteration   6: 1.607 s/op
Iteration   7: 1.605 s/op
Iteration   8: 1.606 s/op
Iteration   9: 1.604 s/op
Iteration  10: 1.607 s/op
Iteration  11: 1.607 s/op
Iteration  12: 1.607 s/op
Iteration  13: 1.606 s/op
Iteration  14: 1.606 s/op
Iteration  15: 1.606 s/op
Iteration  16: 1.606 s/op
Iteration  17: 1.609 s/op
Iteration  18: 1.610 s/op
Iteration  19: 1.610 s/op
Iteration  20: 1.611 s/op
Iteration  21: 1.611 s/op
Iteration  22: 1.610 s/op
Iteration  23: 1.611 s/op
Iteration  24: 1.610 s/op
Iteration  25: 1.613 s/op
Iteration  26: 1.612 s/op
Iteration  27: 1.610 s/op
Iteration  28: 1.609 s/op
Iteration  29: 1.610 s/op
Iteration  30: 1.610 s/op
Iteration  31: 1.609 s/op
Iteration  32: 1.611 s/op
Iteration  33: 1.611 s/op
Iteration  34: 1.611 s/op
Iteration  35: 1.611 s/op
Iteration  36: 1.610 s/op
Iteration  37: 1.610 s/op
Iteration  38: 1.612 s/op
Iteration  39: 1.610 s/op
Iteration  40: 1.611 s/op
Iteration  41: 1.610 s/op
Iteration  42: 1.612 s/op
Iteration  43: 1.613 s/op
Iteration  44: 1.614 s/op
Iteration  45: 1.615 s/op
Iteration  46: 1.612 s/op
Iteration  47: 1.611 s/op
Iteration  48: 1.611 s/op
Iteration  49: 1.611 s/op
Iteration  50: 1.611 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.610 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 47 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.344 s/op
     p(50.0000) =      1.610 s/op
     p(90.0000) =      1.613 s/op
     p(95.0000) =      1.642 s/op
     p(99.0000) =      1.805 s/op
     p(99.9000) =      1.805 s/op
     p(99.9900) =      1.805 s/op
     p(99.9990) =      1.805 s/op
     p(99.9999) =      1.805 s/op
    p(100.0000) =      1.805 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.610 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot-8u222-b10_1564823676447.json
{"wallclock_times": [81.27071539900001], "core_cycle_counts": [[75187407435], [39027927979], [119155076566], [33251214597]], "aperf_counts": [[75003138981], [39003751148], [119143373386], [33238533445]], "mperf_counts": [[75013462038], [39004102992], [119160329272], [33239405108]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 11:15:57: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-03 11:15:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 11:15:58: INFO] 307 executions left in scheduler queue
[2019-08-03 11:15:58: INFO] Executions until ETA known: 788
[2019-08-03 11:15:58: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 11:15:58: INFO] Estimated completion (next execution): 2019-08-03 11:19:50 (0:03:51 from now)
[2019-08-03 11:15:58: INFO] Reboot in preparation for next execution
[2019-08-03 11:20:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 11:26:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.680 s/op
Iteration   2: 7.750 s/op
Iteration   3: 7.618 s/op
Iteration   4: 7.700 s/op
Iteration   5: 7.511 s/op
Iteration   6: 7.482 s/op
Iteration   7: 7.456 s/op
Iteration   8: 7.467 s/op
Iteration   9: 7.465 s/op
Iteration  10: 7.370 s/op
Iteration  11: 7.379 s/op
Iteration  12: 7.321 s/op
Iteration  13: 7.363 s/op
Iteration  14: 7.357 s/op
Iteration  15: 7.328 s/op
Iteration  16: 7.360 s/op
Iteration  17: 7.365 s/op
Iteration  18: 7.337 s/op
Iteration  19: 7.396 s/op
Iteration  20: 7.352 s/op
Iteration  21: 7.368 s/op
Iteration  22: 7.370 s/op
Iteration  23: 7.387 s/op
Iteration  24: 7.356 s/op
Iteration  25: 7.353 s/op
Iteration  26: 7.390 s/op
Iteration  27: 7.355 s/op
Iteration  28: 7.400 s/op
Iteration  29: 7.337 s/op
Iteration  30: 7.328 s/op
Iteration  31: 7.379 s/op
Iteration  32: 7.352 s/op
Iteration  33: 7.329 s/op
Iteration  34: 7.383 s/op
Iteration  35: 7.294 s/op
Iteration  36: 7.331 s/op
Iteration  37: 7.286 s/op
Iteration  38: 7.295 s/op
Iteration  39: 7.260 s/op
Iteration  40: 7.267 s/op
Iteration  41: 7.312 s/op
Iteration  42: 7.326 s/op
Iteration  43: 7.330 s/op
Iteration  44: 7.304 s/op
Iteration  45: 7.286 s/op
Iteration  46: 7.322 s/op
Iteration  47: 7.321 s/op
Iteration  48: 7.325 s/op
Iteration  49: 7.287 s/op
Iteration  50: 7.279 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.399 ?(99.9%) 0.104 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 34 
    [7.375, 7.500) = 11 
    [7.500, 7.625) = 2 
    [7.625, 7.750) = 2 
    [7.750, 7.875) = 0 
    [7.875, 8.000) = 0 
    [8.000, 8.125) = 0 
    [8.125, 8.250) = 0 
    [8.250, 8.375) = 0 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 0 
    [8.625, 8.750) = 1 
    [8.750, 8.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.260 s/op
     p(50.0000) =      7.354 s/op
     p(90.0000) =      7.508 s/op
     p(95.0000) =      7.722 s/op
     p(99.0000) =      8.680 s/op
     p(99.9000) =      8.680 s/op
     p(99.9900) =      8.680 s/op
     p(99.9990) =      8.680 s/op
     p(99.9999) =      8.680 s/op
    p(100.0000) =      8.680 s/op


# Run complete. Total time: 00:06:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.399 ? 0.104   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9-8u222-b10_1564824014264.json
{"wallclock_times": [371.498907798], "core_cycle_counts": [[306376872458], [459894954468], [249854633865], [336703891798]], "aperf_counts": [[305257245967], [459786983822], [249728523083], [336568581709]], "mperf_counts": [[305260079290], [459786959124], [249728607322], [336568563472]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 11:26:25: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 11:26:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 11:26:26: INFO] 306 executions left in scheduler queue
[2019-08-03 11:26:26: INFO] Executions until ETA known: 769
[2019-08-03 11:26:26: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 11:26:26: INFO] Estimated completion (next execution): 2019-08-03 11:35:08 (0:08:41 from now)
[2019-08-03 11:26:26: INFO] Reboot in preparation for next execution
[2019-08-03 11:30:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 11:39:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.319 s/op
Iteration   2: 11.259 s/op
Iteration   3: 11.165 s/op
Iteration   4: 10.851 s/op
Iteration   5: 10.919 s/op
Iteration   6: 10.742 s/op
Iteration   7: 10.788 s/op
Iteration   8: 10.790 s/op
Iteration   9: 10.825 s/op
Iteration  10: 10.791 s/op
Iteration  11: 10.737 s/op
Iteration  12: 10.871 s/op
Iteration  13: 10.766 s/op
Iteration  14: 10.826 s/op
Iteration  15: 10.810 s/op
Iteration  16: 10.769 s/op
Iteration  17: 10.851 s/op
Iteration  18: 10.795 s/op
Iteration  19: 10.757 s/op
Iteration  20: 10.800 s/op
Iteration  21: 10.762 s/op
Iteration  22: 10.781 s/op
Iteration  23: 10.699 s/op
Iteration  24: 10.859 s/op
Iteration  25: 10.785 s/op
Iteration  26: 10.793 s/op
Iteration  27: 10.831 s/op
Iteration  28: 10.796 s/op
Iteration  29: 10.817 s/op
Iteration  30: 10.817 s/op
Iteration  31: 10.827 s/op
Iteration  32: 10.731 s/op
Iteration  33: 10.758 s/op
Iteration  34: 10.813 s/op
Iteration  35: 10.828 s/op
Iteration  36: 10.820 s/op
Iteration  37: 10.832 s/op
Iteration  38: 10.781 s/op
Iteration  39: 10.829 s/op
Iteration  40: 10.797 s/op
Iteration  41: 10.822 s/op
Iteration  42: 10.818 s/op
Iteration  43: 10.839 s/op
Iteration  44: 10.810 s/op
Iteration  45: 10.848 s/op
Iteration  46: 10.823 s/op
Iteration  47: 10.878 s/op
Iteration  48: 10.825 s/op
Iteration  49: 10.808 s/op
Iteration  50: 10.828 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.854 ?(99.9%) 0.114 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 4 
    [10.750, 11.000) = 43 
    [11.000, 11.250) = 1 
    [11.250, 11.500) = 1 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 1 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.699 s/op
     p(50.0000) =     10.817 s/op
     p(90.0000) =     10.877 s/op
     p(95.0000) =     11.207 s/op
     p(99.0000) =     12.319 s/op
     p(99.9000) =     12.319 s/op
     p(99.9900) =     12.319 s/op
     p(99.9990) =     12.319 s/op
     p(99.9999) =     12.319 s/op
    p(100.0000) =     12.319 s/op


# Run complete. Total time: 00:09:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.854 ? 0.114   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9-8u222-b10_1564824642488.json
{"wallclock_times": [543.855004273], "core_cycle_counts": [[675202535287], [343297700524], [286496968688], [516201735472]], "aperf_counts": [[674033992131], [343020401169], [286372484865], [516151926793]], "mperf_counts": [[674037752598], [343021168548], [286372442770], [516152494154]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 11:39:46: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 11:39:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 11:39:47: INFO] 305 executions left in scheduler queue
[2019-08-03 11:39:47: INFO] Executions until ETA known: 763
[2019-08-03 11:39:47: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 11:39:47: INFO] Estimated completion (next execution): 2019-08-03 11:51:21 (0:11:34 from now)
[2019-08-03 11:39:47: INFO] Reboot in preparation for next execution
[2019-08-03 11:44:04: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 11:50:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.449 s/op
Iteration   2: 8.263 s/op
Iteration   3: 7.841 s/op
Iteration   4: 7.767 s/op
Iteration   5: 7.714 s/op
Iteration   6: 7.684 s/op
Iteration   7: 7.691 s/op
Iteration   8: 7.757 s/op
Iteration   9: 7.725 s/op
Iteration  10: 7.670 s/op
Iteration  11: 7.799 s/op
Iteration  12: 7.708 s/op
Iteration  13: 7.697 s/op
Iteration  14: 7.754 s/op
Iteration  15: 7.709 s/op
Iteration  16: 7.702 s/op
Iteration  17: 7.691 s/op
Iteration  18: 7.750 s/op
Iteration  19: 7.724 s/op
Iteration  20: 7.662 s/op
Iteration  21: 7.757 s/op
Iteration  22: 7.703 s/op
Iteration  23: 7.737 s/op
Iteration  24: 7.789 s/op
Iteration  25: 7.725 s/op
Iteration  26: 7.728 s/op
Iteration  27: 7.645 s/op
Iteration  28: 7.754 s/op
Iteration  29: 7.721 s/op
Iteration  30: 7.693 s/op
Iteration  31: 7.766 s/op
Iteration  32: 7.757 s/op
Iteration  33: 7.720 s/op
Iteration  34: 7.701 s/op
Iteration  35: 7.774 s/op
Iteration  36: 7.668 s/op
Iteration  37: 7.697 s/op
Iteration  38: 7.716 s/op
Iteration  39: 7.705 s/op
Iteration  40: 7.650 s/op
Iteration  41: 7.746 s/op
Iteration  42: 7.658 s/op
Iteration  43: 7.698 s/op
Iteration  44: 7.678 s/op
Iteration  45: 7.718 s/op
Iteration  46: 7.714 s/op
Iteration  47: 7.645 s/op
Iteration  48: 7.788 s/op
Iteration  49: 7.708 s/op
Iteration  50: 7.678 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.764 ?(99.9%) 0.128 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 36 
    [ 7.750,  8.000) = 12 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 1 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.645 s/op
     p(50.0000) =      7.715 s/op
     p(90.0000) =      7.789 s/op
     p(95.0000) =      8.031 s/op
     p(99.0000) =      9.449 s/op
     p(99.9000) =      9.449 s/op
     p(99.9900) =      9.449 s/op
     p(99.9990) =      9.449 s/op
     p(99.9999) =      9.449 s/op
    p(100.0000) =      9.449 s/op


# Run complete. Total time: 00:06:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.764 ? 0.128   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9-8u222-b10_1564825444565.json
{"wallclock_times": [389.631806145], "core_cycle_counts": [[469795951715], [302700561103], [338340135876], [227466692676]], "aperf_counts": [[468933435730], [302570462048], [338249910393], [227329957174]], "mperf_counts": [[468934551342], [302570420612], [338251845630], [227330285236]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 11:50:34: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 11:50:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 11:50:35: INFO] 304 executions left in scheduler queue
[2019-08-03 11:50:35: INFO] Executions until ETA known: 761
[2019-08-03 11:50:35: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 11:50:35: INFO] Estimated completion (next execution): 2019-08-03 11:59:35 (0:08:59 from now)
[2019-08-03 11:50:35: INFO] Reboot in preparation for next execution
[2019-08-03 11:54:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-03 12:06:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.260 s/op
Iteration   2: 13.990 s/op
Iteration   3: 13.989 s/op
Iteration   4: 13.373 s/op
Iteration   5: 13.351 s/op
Iteration   6: 13.391 s/op
Iteration   7: 13.322 s/op
Iteration   8: 13.345 s/op
Iteration   9: 13.264 s/op
Iteration  10: 14.229 s/op
Iteration  11: 13.244 s/op
Iteration  12: 13.350 s/op
Iteration  13: 13.315 s/op
Iteration  14: 13.300 s/op
Iteration  15: 14.101 s/op
Iteration  16: 13.303 s/op
Iteration  17: 14.370 s/op
Iteration  18: 13.314 s/op
Iteration  19: 13.390 s/op
Iteration  20: 13.271 s/op
Iteration  21: 13.358 s/op
Iteration  22: 13.413 s/op
Iteration  23: 13.300 s/op
Iteration  24: 13.380 s/op
Iteration  25: 13.271 s/op
Iteration  26: 13.445 s/op
Iteration  27: 13.233 s/op
Iteration  28: 14.350 s/op
Iteration  29: 13.267 s/op
Iteration  30: 13.331 s/op
Iteration  31: 13.632 s/op
Iteration  32: 13.296 s/op
Iteration  33: 13.357 s/op
Iteration  34: 13.332 s/op
Iteration  35: 13.281 s/op
Iteration  36: 13.382 s/op
Iteration  37: 13.383 s/op
Iteration  38: 13.409 s/op
Iteration  39: 13.321 s/op
Iteration  40: 13.314 s/op
Iteration  41: 14.211 s/op
Iteration  42: 13.351 s/op
Iteration  43: 14.357 s/op
Iteration  44: 14.329 s/op
Iteration  45: 13.400 s/op
Iteration  46: 13.980 s/op
Iteration  47: 13.308 s/op
Iteration  48: 13.279 s/op
Iteration  49: 14.142 s/op
Iteration  50: 13.366 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     13.565 ?(99.9%) 0.217 s/op

  Histogram, s/op:
    [13.000, 13.250) = 2 
    [13.250, 13.500) = 35 
    [13.500, 13.750) = 1 
    [13.750, 14.000) = 3 
    [14.000, 14.250) = 4 
    [14.250, 14.500) = 4 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 1 
    [15.500, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.233 s/op
     p(50.0000) =     13.358 s/op
     p(90.0000) =     14.319 s/op
     p(95.0000) =     14.362 s/op
     p(99.0000) =     15.260 s/op
     p(99.9000) =     15.260 s/op
     p(99.9900) =     15.260 s/op
     p(99.9990) =     15.260 s/op
     p(99.9999) =     15.260 s/op
    p(100.0000) =     15.260 s/op


# Run complete. Total time: 00:11:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  13.565 ? 0.217   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9-8u222-b10_1564826089663.json
{"wallclock_times": [679.517087667], "core_cycle_counts": [[891888181171], [446237794424], [373966280915], [491204087322]], "aperf_counts": [[890483743797], [446033470233], [373803704044], [491003315629]], "mperf_counts": [[890489577032], [446037305200], [373803825760], [491004236444]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 12:06:09: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-03 12:06:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 12:06:10: INFO] 303 executions left in scheduler queue
[2019-08-03 12:06:10: INFO] Executions until ETA known: 750
[2019-08-03 12:06:10: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-03 12:06:10: INFO] Estimated completion (next execution): 2019-08-03 12:19:59 (0:13:49 from now)
[2019-08-03 12:06:10: INFO] Reboot in preparation for next execution
[2019-08-03 12:10:26: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 12:10:26: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 12:10:26: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 12:10:26: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 12:10:26: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 12:12:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.369 s/op
Iteration   2: 2.439 s/op
Iteration   3: 1.980 s/op
Iteration   4: 1.969 s/op
Iteration   5: 1.959 s/op
Iteration   6: 1.959 s/op
Iteration   7: 1.969 s/op
Iteration   8: 1.962 s/op
Iteration   9: 1.969 s/op
Iteration  10: 1.977 s/op
Iteration  11: 1.975 s/op
Iteration  12: 1.967 s/op
Iteration  13: 1.976 s/op
Iteration  14: 1.973 s/op
Iteration  15: 1.966 s/op
Iteration  16: 1.968 s/op
Iteration  17: 1.978 s/op
Iteration  18: 1.972 s/op
Iteration  19: 1.971 s/op
Iteration  20: 1.952 s/op
Iteration  21: 1.977 s/op
Iteration  22: 1.974 s/op
Iteration  23: 1.945 s/op
Iteration  24: 1.968 s/op
Iteration  25: 1.970 s/op
Iteration  26: 1.971 s/op
Iteration  27: 1.949 s/op
Iteration  28: 1.975 s/op
Iteration  29: 1.973 s/op
Iteration  30: 1.966 s/op
Iteration  31: 1.967 s/op
Iteration  32: 1.970 s/op
Iteration  33: 1.972 s/op
Iteration  34: 1.970 s/op
Iteration  35: 1.956 s/op
Iteration  36: 1.959 s/op
Iteration  37: 1.975 s/op
Iteration  38: 1.968 s/op
Iteration  39: 1.970 s/op
Iteration  40: 1.974 s/op
Iteration  41: 1.970 s/op
Iteration  42: 1.972 s/op
Iteration  43: 1.975 s/op
Iteration  44: 1.975 s/op
Iteration  45: 1.971 s/op
Iteration  46: 1.974 s/op
Iteration  47: 1.977 s/op
Iteration  48: 1.971 s/op
Iteration  49: 1.967 s/op
Iteration  50: 1.974 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.987 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [1.900, 1.950) = 2 
    [1.950, 2.000) = 46 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.945 s/op
     p(50.0000) =      1.971 s/op
     p(90.0000) =      1.977 s/op
     p(95.0000) =      2.155 s/op
     p(99.0000) =      2.439 s/op
     p(99.9000) =      2.439 s/op
     p(99.9900) =      2.439 s/op
     p(99.9990) =      2.439 s/op
     p(99.9999) =      2.439 s/op
    p(100.0000) =      2.439 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.987 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot_11.0.4_1564827026537.json
{"wallclock_times": [100.39999701899998], "core_cycle_counts": [[54981572145], [59720551101], [104075480311], [79623004372]], "aperf_counts": [[54647331518], [59684844034], [104055199189], [79604898827]], "mperf_counts": [[61106167644], [67603788528], [118220397576], [90319717106]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 12:12:06: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-03 12:12:07: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 12:12:07: INFO] 302 executions left in scheduler queue
[2019-08-03 12:12:07: INFO] Executions until ETA known: 747
[2019-08-03 12:12:07: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-03 12:12:07: INFO] Estimated completion (next execution): 2019-08-03 12:16:18 (0:04:10 from now)
[2019-08-03 12:12:07: INFO] Reboot in preparation for next execution
[2019-08-03 12:16:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 12:16:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 12:16:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 12:16:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 12:16:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 12:18:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.953 s/op
Iteration   2: 2.141 s/op
Iteration   3: 2.355 s/op
Iteration   4: 2.342 s/op
Iteration   5: 2.687 s/op
Iteration   6: 2.200 s/op
Iteration   7: 2.223 s/op
Iteration   8: 2.166 s/op
Iteration   9: 2.205 s/op
Iteration  10: 2.179 s/op
Iteration  11: 2.188 s/op
Iteration  12: 2.165 s/op
Iteration  13: 2.187 s/op
Iteration  14: 2.166 s/op
Iteration  15: 2.166 s/op
Iteration  16: 2.182 s/op
Iteration  17: 2.167 s/op
Iteration  18: 2.188 s/op
Iteration  19: 2.192 s/op
Iteration  20: 2.176 s/op
Iteration  21: 2.166 s/op
Iteration  22: 2.166 s/op
Iteration  23: 2.165 s/op
Iteration  24: 2.166 s/op
Iteration  25: 2.166 s/op
Iteration  26: 2.169 s/op
Iteration  27: 2.165 s/op
Iteration  28: 2.194 s/op
Iteration  29: 2.166 s/op
Iteration  30: 2.165 s/op
Iteration  31: 2.165 s/op
Iteration  32: 2.166 s/op
Iteration  33: 2.171 s/op
Iteration  34: 2.166 s/op
Iteration  35: 2.169 s/op
Iteration  36: 2.183 s/op
Iteration  37: 2.171 s/op
Iteration  38: 2.165 s/op
Iteration  39: 2.166 s/op
Iteration  40: 2.166 s/op
Iteration  41: 2.165 s/op
Iteration  42: 2.167 s/op
Iteration  43: 2.168 s/op
Iteration  44: 2.167 s/op
Iteration  45: 2.174 s/op
Iteration  46: 2.171 s/op
Iteration  47: 2.166 s/op
Iteration  48: 2.183 s/op
Iteration  49: 2.182 s/op
Iteration  50: 2.170 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.186 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 43 
    [2.200, 2.250) = 2 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.953 s/op
     p(50.0000) =      2.167 s/op
     p(90.0000) =      2.204 s/op
     p(95.0000) =      2.348 s/op
     p(99.0000) =      2.687 s/op
     p(99.9000) =      2.687 s/op
     p(99.9900) =      2.687 s/op
     p(99.9990) =      2.687 s/op
     p(99.9999) =      2.687 s/op
    p(100.0000) =      2.687 s/op


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.186 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot_11.0.4_1564827402096.json
{"wallclock_times": [110.305554924], "core_cycle_counts": [[45431547780], [25433803983], [148288205094], [140324619351]], "aperf_counts": [[45111823721], [25405224983], [148266321704], [140306921345]], "mperf_counts": [[45997562118], [25453444630], [148322258410], [140506642044]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 12:18:32: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-03 12:18:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 12:18:33: INFO] 301 executions left in scheduler queue
[2019-08-03 12:18:33: INFO] Executions until ETA known: 716
[2019-08-03 12:18:33: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-08-03 12:18:33: INFO] Estimated completion (next execution): 2019-08-03 12:22:53 (0:04:20 from now)
[2019-08-03 12:18:33: INFO] Reboot in preparation for next execution
[2019-08-03 12:27:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.343 s/op
Iteration   2: 5.329 s/op
Iteration   3: 5.351 s/op
Iteration   4: 5.354 s/op
Iteration   5: 5.376 s/op
Iteration   6: 5.381 s/op
Iteration   7: 5.374 s/op
Iteration   8: 5.389 s/op
Iteration   9: 5.377 s/op
Iteration  10: 5.361 s/op
Iteration  11: 5.369 s/op
Iteration  12: 5.356 s/op
Iteration  13: 5.392 s/op
Iteration  14: 5.372 s/op
Iteration  15: 5.375 s/op
Iteration  16: 5.349 s/op
Iteration  17: 5.369 s/op
Iteration  18: 5.309 s/op
Iteration  19: 5.381 s/op
Iteration  20: 5.347 s/op
Iteration  21: 5.377 s/op
Iteration  22: 5.386 s/op
Iteration  23: 5.347 s/op
Iteration  24: 5.377 s/op
Iteration  25: 5.333 s/op
Iteration  26: 5.384 s/op
Iteration  27: 5.359 s/op
Iteration  28: 5.314 s/op
Iteration  29: 5.380 s/op
Iteration  30: 5.383 s/op
Iteration  31: 5.366 s/op
Iteration  32: 5.378 s/op
Iteration  33: 5.351 s/op
Iteration  34: 5.361 s/op
Iteration  35: 5.389 s/op
Iteration  36: 5.371 s/op
Iteration  37: 5.382 s/op
Iteration  38: 5.383 s/op
Iteration  39: 5.381 s/op
Iteration  40: 5.352 s/op
Iteration  41: 5.380 s/op
Iteration  42: 5.382 s/op
Iteration  43: 5.373 s/op
Iteration  44: 5.362 s/op
Iteration  45: 5.284 s/op
Iteration  46: 5.368 s/op
Iteration  47: 5.378 s/op
Iteration  48: 5.374 s/op
Iteration  49: 5.364 s/op
Iteration  50: 5.378 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.365 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [5.200, 5.213) = 0 
    [5.213, 5.225) = 0 
    [5.225, 5.238) = 0 
    [5.238, 5.250) = 0 
    [5.250, 5.263) = 0 
    [5.263, 5.275) = 0 
    [5.275, 5.288) = 1 
    [5.288, 5.300) = 0 
    [5.300, 5.313) = 1 
    [5.313, 5.325) = 1 
    [5.325, 5.338) = 2 
    [5.338, 5.350) = 4 
    [5.350, 5.363) = 9 
    [5.363, 5.375) = 11 
    [5.375, 5.388) = 18 
    [5.388, 5.400) = 3 

  Percentiles, s/op:
      p(0.0000) =      5.284 s/op
     p(50.0000) =      5.372 s/op
     p(90.0000) =      5.384 s/op
     p(95.0000) =      5.389 s/op
     p(99.0000) =      5.392 s/op
     p(99.9000) =      5.392 s/op
     p(99.9900) =      5.392 s/op
     p(99.9990) =      5.392 s/op
     p(99.9999) =      5.392 s/op
    p(100.0000) =      5.392 s/op


# Run complete. Total time: 00:04:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.365 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_graalvm-ce-19.1.1_1564827769519.json
{"wallclock_times": [269.120322481], "core_cycle_counts": [[266490761791], [236117346491], [200270017744], [165915150085]], "aperf_counts": [[265887742759], [236039873187], [200231227173], [165872918530]], "mperf_counts": [[265905434378], [236058326248], [200233658718], [165874643114]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 12:27:18: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-08-03 12:27:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 12:27:19: INFO] 300 executions left in scheduler queue
[2019-08-03 12:27:19: INFO] Executions until ETA known: 684
[2019-08-03 12:27:19: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-08-03 12:27:19: INFO] Estimated completion (next execution): 2019-08-03 12:34:18 (0:06:59 from now)
[2019-08-03 12:27:19: INFO] Reboot in preparation for next execution
[2019-08-03 12:31:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 12:31:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 12:31:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 12:31:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 12:31:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 12:31:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 12:44:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.661 s/op
Iteration   2: 15.543 s/op
Iteration   3: 15.506 s/op
Iteration   4: 15.530 s/op
Iteration   5: 15.534 s/op
Iteration   6: 15.596 s/op
Iteration   7: 15.541 s/op
Iteration   8: 15.519 s/op
Iteration   9: 15.534 s/op
Iteration  10: 15.492 s/op
Iteration  11: 15.513 s/op
Iteration  12: 15.503 s/op
Iteration  13: 15.488 s/op
Iteration  14: 15.478 s/op
Iteration  15: 15.557 s/op
Iteration  16: 15.472 s/op
Iteration  17: 15.504 s/op
Iteration  18: 15.494 s/op
Iteration  19: 15.532 s/op
Iteration  20: 15.525 s/op
Iteration  21: 15.505 s/op
Iteration  22: 15.522 s/op
Iteration  23: 15.510 s/op
Iteration  24: 15.509 s/op
Iteration  25: 15.473 s/op
Iteration  26: 15.566 s/op
Iteration  27: 15.516 s/op
Iteration  28: 15.536 s/op
Iteration  29: 15.523 s/op
Iteration  30: 15.502 s/op
Iteration  31: 15.505 s/op
Iteration  32: 15.497 s/op
Iteration  33: 15.486 s/op
Iteration  34: 15.543 s/op
Iteration  35: 15.579 s/op
Iteration  36: 15.513 s/op
Iteration  37: 15.477 s/op
Iteration  38: 15.481 s/op
Iteration  39: 15.492 s/op
Iteration  40: 15.474 s/op
Iteration  41: 15.586 s/op
Iteration  42: 15.508 s/op
Iteration  43: 15.587 s/op
Iteration  44: 15.508 s/op
Iteration  45: 15.464 s/op
Iteration  46: 15.500 s/op
Iteration  47: 15.531 s/op
Iteration  48: 15.531 s/op
Iteration  49: 15.489 s/op
Iteration  50: 15.483 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     15.538 ?(99.9%) 0.082 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 16 
    [15.500, 15.625) = 33 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 0 
    [15.875, 16.000) = 0 
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 0 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 1 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.464 s/op
     p(50.0000) =     15.510 s/op
     p(90.0000) =     15.577 s/op
     p(95.0000) =     15.591 s/op
     p(99.0000) =     16.661 s/op
     p(99.9000) =     16.661 s/op
     p(99.9900) =     16.661 s/op
     p(99.9990) =     16.661 s/op
     p(99.9999) =     16.661 s/op
    p(100.0000) =     16.661 s/op


# Run complete. Total time: 00:12:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  15.538 ? 0.082   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9_12.0.1_1564828309780.json
{"wallclock_times": [778.47956519], "core_cycle_counts": [[700086201192], [293249022112], [732603698287], [795043048695]], "aperf_counts": [[698087061918], [293063690274], [732371679166], [794905361215]], "mperf_counts": [[698090119358], [293063654750], [732371613810], [794905325736]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 12:44:48: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-08-03 12:44:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 12:44:49: INFO] 299 executions left in scheduler queue
[2019-08-03 12:44:49: INFO] Executions until ETA known: 653
[2019-08-03 12:44:49: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 12:44:49: INFO] Estimated completion (next execution): 2019-08-03 13:00:18 (0:15:28 from now)
[2019-08-03 12:44:49: INFO] Reboot in preparation for next execution
[2019-08-03 12:49:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 12:49:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 12:49:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 12:49:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 12:49:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 12:49:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 12:54:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.939 s/op
Iteration   2: 6.545 s/op
Iteration   3: 6.265 s/op
Iteration   4: 6.216 s/op
Iteration   5: 6.640 s/op
Iteration   6: 6.586 s/op
Iteration   7: 6.416 s/op
Iteration   8: 6.416 s/op
Iteration   9: 6.363 s/op
Iteration  10: 6.405 s/op
Iteration  11: 6.344 s/op
Iteration  12: 6.451 s/op
Iteration  13: 6.346 s/op
Iteration  14: 6.389 s/op
Iteration  15: 6.391 s/op
Iteration  16: 6.417 s/op
Iteration  17: 6.391 s/op
Iteration  18: 6.342 s/op
Iteration  19: 6.396 s/op
Iteration  20: 6.392 s/op
Iteration  21: 6.402 s/op
Iteration  22: 6.388 s/op
Iteration  23: 6.397 s/op
Iteration  24: 6.378 s/op
Iteration  25: 6.408 s/op
Iteration  26: 6.377 s/op
Iteration  27: 6.376 s/op
Iteration  28: 6.384 s/op
Iteration  29: 6.318 s/op
Iteration  30: 6.309 s/op
Iteration  31: 6.318 s/op
Iteration  32: 6.317 s/op
Iteration  33: 6.337 s/op
Iteration  34: 6.333 s/op
Iteration  35: 6.326 s/op
Iteration  36: 6.296 s/op
Iteration  37: 6.305 s/op
Iteration  38: 6.321 s/op
Iteration  39: 6.345 s/op
Iteration  40: 6.271 s/op
Iteration  41: 6.319 s/op
Iteration  42: 6.259 s/op
Iteration  43: 6.367 s/op
Iteration  44: 6.344 s/op
Iteration  45: 6.373 s/op
Iteration  46: 6.251 s/op
Iteration  47: 6.394 s/op
Iteration  48: 6.376 s/op
Iteration  49: 6.388 s/op
Iteration  50: 6.341 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.399 ?(99.9%) 0.116 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 24 
    [6.375, 6.500) = 21 
    [6.500, 6.625) = 2 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 0 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.216 s/op
     p(50.0000) =      6.374 s/op
     p(90.0000) =      6.448 s/op
     p(95.0000) =      6.610 s/op
     p(99.0000) =      7.939 s/op
     p(99.9000) =      7.939 s/op
     p(99.9900) =      7.939 s/op
     p(99.9990) =      7.939 s/op
     p(99.9999) =      7.939 s/op
    p(100.0000) =      7.939 s/op


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  6.399 ? 0.116   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9_11.0.4_1564829345814.json
{"wallclock_times": [321.541941528], "core_cycle_counts": [[277432430774], [354870308469], [272854019574], [278974141393]], "aperf_counts": [[276587293192], [354772687941], [272748194431], [278895007183]], "mperf_counts": [[276588841628], [354772662060], [272748177228], [278894996676]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 12:54:27: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 12:54:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 12:54:28: INFO] 298 executions left in scheduler queue
[2019-08-03 12:54:28: INFO] Executions until ETA known: 647
[2019-08-03 12:54:28: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 12:54:28: INFO] Estimated completion (next execution): 2019-08-03 13:02:20 (0:07:52 from now)
[2019-08-03 12:54:28: INFO] Reboot in preparation for next execution
[2019-08-03 12:59:26: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 12:59:26: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 12:59:26: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 12:59:26: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 12:59:26: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 12:59:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 13:10:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.099 s/op
Iteration   2: 13.222 s/op
Iteration   3: 12.900 s/op
Iteration   4: 12.927 s/op
Iteration   5: 12.960 s/op
Iteration   6: 12.899 s/op
Iteration   7: 12.830 s/op
Iteration   8: 12.851 s/op
Iteration   9: 12.795 s/op
Iteration  10: 12.903 s/op
Iteration  11: 12.907 s/op
Iteration  12: 12.805 s/op
Iteration  13: 13.006 s/op
Iteration  14: 12.867 s/op
Iteration  15: 12.875 s/op
Iteration  16: 12.752 s/op
Iteration  17: 12.846 s/op
Iteration  18: 13.021 s/op
Iteration  19: 12.902 s/op
Iteration  20: 13.016 s/op
Iteration  21: 12.856 s/op
Iteration  22: 12.971 s/op
Iteration  23: 13.011 s/op
Iteration  24: 12.780 s/op
Iteration  25: 12.895 s/op
Iteration  26: 12.946 s/op
Iteration  27: 12.840 s/op
Iteration  28: 12.874 s/op
Iteration  29: 12.959 s/op
Iteration  30: 12.990 s/op
Iteration  31: 12.903 s/op
Iteration  32: 12.975 s/op
Iteration  33: 12.894 s/op
Iteration  34: 12.812 s/op
Iteration  35: 13.040 s/op
Iteration  36: 12.963 s/op
Iteration  37: 12.867 s/op
Iteration  38: 12.999 s/op
Iteration  39: 12.861 s/op
Iteration  40: 12.929 s/op
Iteration  41: 12.847 s/op
Iteration  42: 12.976 s/op
Iteration  43: 12.933 s/op
Iteration  44: 12.931 s/op
Iteration  45: 13.112 s/op
Iteration  46: 12.933 s/op
Iteration  47: 12.969 s/op
Iteration  48: 12.927 s/op
Iteration  49: 13.073 s/op
Iteration  50: 12.846 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.946 ?(99.9%) 0.093 s/op

  Histogram, s/op:
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 0 
    [12.750, 13.000) = 41 
    [13.000, 13.250) = 8 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 0 
    [14.000, 14.250) = 1 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.752 s/op
     p(50.0000) =     12.917 s/op
     p(90.0000) =     13.038 s/op
     p(95.0000) =     13.162 s/op
     p(99.0000) =     14.099 s/op
     p(99.9000) =     14.099 s/op
     p(99.9900) =     14.099 s/op
     p(99.9990) =     14.099 s/op
     p(99.9999) =     14.099 s/op
    p(100.0000) =     14.099 s/op


# Run complete. Total time: 00:10:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  12.946 ? 0.093   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9_11.0.4_1564829966281.json
{"wallclock_times": [648.957217798], "core_cycle_counts": [[592796582914], [300005279463], [967195538538], [249860510180]], "aperf_counts": [[591193535206], [299862448202], [967012844642], [249756545251]], "mperf_counts": [[591196236360], [299865185124], [967012781284], [249756710978]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 13:10:15: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 13:10:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:10:16: INFO] 297 executions left in scheduler queue
[2019-08-03 13:10:16: INFO] Executions until ETA known: 645
[2019-08-03 13:10:16: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 13:10:16: INFO] Estimated completion (next execution): 2019-08-03 13:23:35 (0:13:19 from now)
[2019-08-03 13:10:16: INFO] Reboot in preparation for next execution
[2019-08-03 13:14:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 13:14:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 13:14:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 13:14:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 13:14:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 13:14:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 13:18:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.400 s/op
Iteration   2: 5.523 s/op
Iteration   3: 4.754 s/op
Iteration   4: 4.798 s/op
Iteration   5: 4.854 s/op
Iteration   6: 4.836 s/op
Iteration   7: 4.858 s/op
Iteration   8: 4.807 s/op
Iteration   9: 4.775 s/op
Iteration  10: 4.764 s/op
Iteration  11: 4.685 s/op
Iteration  12: 4.678 s/op
Iteration  13: 4.697 s/op
Iteration  14: 4.696 s/op
Iteration  15: 4.747 s/op
Iteration  16: 4.743 s/op
Iteration  17: 4.718 s/op
Iteration  18: 4.680 s/op
Iteration  19: 4.682 s/op
Iteration  20: 4.689 s/op
Iteration  21: 4.743 s/op
Iteration  22: 4.723 s/op
Iteration  23: 4.745 s/op
Iteration  24: 4.722 s/op
Iteration  25: 4.664 s/op
Iteration  26: 4.660 s/op
Iteration  27: 4.694 s/op
Iteration  28: 4.728 s/op
Iteration  29: 4.732 s/op
Iteration  30: 4.691 s/op
Iteration  31: 4.741 s/op
Iteration  32: 4.741 s/op
Iteration  33: 4.722 s/op
Iteration  34: 4.694 s/op
Iteration  35: 4.694 s/op
Iteration  36: 4.712 s/op
Iteration  37: 4.715 s/op
Iteration  38: 4.685 s/op
Iteration  39: 4.740 s/op
Iteration  40: 4.746 s/op
Iteration  41: 4.708 s/op
Iteration  42: 4.696 s/op
Iteration  43: 4.704 s/op
Iteration  44: 4.684 s/op
Iteration  45: 4.722 s/op
Iteration  46: 4.720 s/op
Iteration  47: 4.735 s/op
Iteration  48: 4.703 s/op
Iteration  49: 4.694 s/op
Iteration  50: 4.656 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.774 ?(99.9%) 0.131 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 40 
    [4.750, 5.000) = 8 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.656 s/op
     p(50.0000) =      4.721 s/op
     p(90.0000) =      4.833 s/op
     p(95.0000) =      5.158 s/op
     p(99.0000) =      6.400 s/op
     p(99.9000) =      6.400 s/op
     p(99.9900) =      6.400 s/op
     p(99.9990) =      6.400 s/op
     p(99.9999) =      6.400 s/op
    p(100.0000) =      6.400 s/op


# Run complete. Total time: 00:04:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.774 ? 0.131   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9_11.0.4_1564830889809.json
{"wallclock_times": [240.56634882799997], "core_cycle_counts": [[217030652485], [312141162480], [205971842678], [165553314999]], "aperf_counts": [[216351672855], [312048114491], [205866803405], [165447697510]], "mperf_counts": [[216354540324], [312048099804], [205866918788], [165450327146]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 13:18:50: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 13:18:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:18:51: INFO] 296 executions left in scheduler queue
[2019-08-03 13:18:51: INFO] Executions until ETA known: 639
[2019-08-03 13:18:51: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 13:18:51: INFO] Estimated completion (next execution): 2019-08-03 13:25:22 (0:06:31 from now)
[2019-08-03 13:18:51: INFO] Reboot in preparation for next execution
[2019-08-03 13:23:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 13:23:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 13:23:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 13:23:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 13:23:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 13:23:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 13:27:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.764 s/op
Iteration   2: 5.441 s/op
Iteration   3: 4.852 s/op
Iteration   4: 4.972 s/op
Iteration   5: 5.093 s/op
Iteration   6: 5.011 s/op
Iteration   7: 4.836 s/op
Iteration   8: 5.101 s/op
Iteration   9: 5.027 s/op
Iteration  10: 5.102 s/op
Iteration  11: 5.067 s/op
Iteration  12: 4.921 s/op
Iteration  13: 5.013 s/op
Iteration  14: 4.943 s/op
Iteration  15: 4.913 s/op
Iteration  16: 5.019 s/op
Iteration  17: 4.956 s/op
Iteration  18: 5.209 s/op
Iteration  19: 5.004 s/op
Iteration  20: 4.884 s/op
Iteration  21: 5.028 s/op
Iteration  22: 4.951 s/op
Iteration  23: 5.077 s/op
Iteration  24: 4.951 s/op
Iteration  25: 4.899 s/op
Iteration  26: 5.068 s/op
Iteration  27: 4.922 s/op
Iteration  28: 5.155 s/op
Iteration  29: 4.987 s/op
Iteration  30: 4.944 s/op
Iteration  31: 5.082 s/op
Iteration  32: 4.985 s/op
Iteration  33: 4.893 s/op
Iteration  34: 5.031 s/op
Iteration  35: 4.925 s/op
Iteration  36: 5.140 s/op
Iteration  37: 5.010 s/op
Iteration  38: 4.913 s/op
Iteration  39: 5.044 s/op
Iteration  40: 4.967 s/op
Iteration  41: 5.103 s/op
Iteration  42: 5.001 s/op
Iteration  43: 4.918 s/op
Iteration  44: 5.047 s/op
Iteration  45: 4.983 s/op
Iteration  46: 4.912 s/op
Iteration  47: 5.035 s/op
Iteration  48: 4.957 s/op
Iteration  49: 5.116 s/op
Iteration  50: 4.972 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.043 ?(99.9%) 0.133 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 
    [4.750, 5.000) = 24 
    [5.000, 5.250) = 24 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.836 s/op
     p(50.0000) =      5.002 s/op
     p(90.0000) =      5.137 s/op
     p(95.0000) =      5.313 s/op
     p(99.0000) =      6.764 s/op
     p(99.9000) =      6.764 s/op
     p(99.9900) =      6.764 s/op
     p(99.9990) =      6.764 s/op
     p(99.9999) =      6.764 s/op
    p(100.0000) =      6.764 s/op


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.043 ? 0.133   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9_11.0.4_1564831387767.json
{"wallclock_times": [253.95639540700003], "core_cycle_counts": [[199561348254], [214495707308], [279194822311], [233177210534]], "aperf_counts": [[198868521963], [214379331200], [279119897143], [233115114241]], "mperf_counts": [[198874430256], [214379456118], [279119887416], [233115109904]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 13:27:21: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-03 13:27:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:27:22: INFO] 295 executions left in scheduler queue
[2019-08-03 13:27:22: INFO] Executions until ETA known: 625
[2019-08-03 13:27:22: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-03 13:27:22: INFO] Estimated completion (next execution): 2019-08-03 13:34:07 (0:06:44 from now)
[2019-08-03 13:27:22: INFO] Reboot in preparation for next execution
[2019-08-03 13:31:38: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 13:31:38: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 13:31:38: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 13:31:38: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 13:31:38: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 13:33:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.428 s/op
Iteration   2: 2.328 s/op
Iteration   3: 1.959 s/op
Iteration   4: 1.912 s/op
Iteration   5: 2.048 s/op
Iteration   6: 2.028 s/op
Iteration   7: 2.059 s/op
Iteration   8: 2.044 s/op
Iteration   9: 2.045 s/op
Iteration  10: 2.046 s/op
Iteration  11: 2.065 s/op
Iteration  12: 2.043 s/op
Iteration  13: 2.047 s/op
Iteration  14: 2.043 s/op
Iteration  15: 2.051 s/op
Iteration  16: 2.048 s/op
Iteration  17: 2.040 s/op
Iteration  18: 2.051 s/op
Iteration  19: 2.038 s/op
Iteration  20: 2.045 s/op
Iteration  21: 2.034 s/op
Iteration  22: 2.046 s/op
Iteration  23: 2.040 s/op
Iteration  24: 2.057 s/op
Iteration  25: 2.032 s/op
Iteration  26: 2.048 s/op
Iteration  27: 2.023 s/op
Iteration  28: 2.045 s/op
Iteration  29: 2.044 s/op
Iteration  30: 2.045 s/op
Iteration  31: 2.040 s/op
Iteration  32: 2.053 s/op
Iteration  33: 2.044 s/op
Iteration  34: 2.044 s/op
Iteration  35: 2.048 s/op
Iteration  36: 2.041 s/op
Iteration  37: 2.033 s/op
Iteration  38: 2.046 s/op
Iteration  39: 2.022 s/op
Iteration  40: 2.041 s/op
Iteration  41: 2.005 s/op
Iteration  42: 2.041 s/op
Iteration  43: 2.046 s/op
Iteration  44: 2.047 s/op
Iteration  45: 2.024 s/op
Iteration  46: 2.038 s/op
Iteration  47: 2.033 s/op
Iteration  48: 2.042 s/op
Iteration  49: 2.022 s/op
Iteration  50: 2.036 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.051 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 40 
    [2.050, 2.100) = 6 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.912 s/op
     p(50.0000) =      2.044 s/op
     p(90.0000) =      2.057 s/op
     p(95.0000) =      2.183 s/op
     p(99.0000) =      2.428 s/op
     p(99.9000) =      2.428 s/op
     p(99.9900) =      2.428 s/op
     p(99.9990) =      2.428 s/op
     p(99.9999) =      2.428 s/op
    p(100.0000) =      2.428 s/op


# Run complete. Total time: 00:01:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.051 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot_12.0.2_1564831898555.json
{"wallclock_times": [103.56818289900002], "core_cycle_counts": [[21481323664], [75409731970], [122543427463], [88039912720]], "aperf_counts": [[21089367399], [75381282619], [122527486145], [88025625708]], "mperf_counts": [[23165328390], [85502316720], [139099010326], [99764372384]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 13:33:22: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-03 13:33:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:33:23: INFO] 294 executions left in scheduler queue
[2019-08-03 13:33:23: INFO] Executions until ETA known: 605
[2019-08-03 13:33:23: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-03 13:33:23: INFO] Estimated completion (next execution): 2019-08-03 13:37:36 (0:04:13 from now)
[2019-08-03 13:33:23: INFO] Reboot in preparation for next execution
[2019-08-03 13:37:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 13:37:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 13:37:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 13:37:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 13:37:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 13:39:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.987 s/op
Iteration   2: 1.704 s/op
Iteration   3: 1.889 s/op
Iteration   4: 1.885 s/op
Iteration   5: 1.899 s/op
Iteration   6: 1.973 s/op
Iteration   7: 1.766 s/op
Iteration   8: 1.763 s/op
Iteration   9: 1.768 s/op
Iteration  10: 1.762 s/op
Iteration  11: 1.764 s/op
Iteration  12: 1.764 s/op
Iteration  13: 1.763 s/op
Iteration  14: 1.762 s/op
Iteration  15: 1.766 s/op
Iteration  16: 1.766 s/op
Iteration  17: 1.765 s/op
Iteration  18: 1.769 s/op
Iteration  19: 1.767 s/op
Iteration  20: 1.763 s/op
Iteration  21: 1.763 s/op
Iteration  22: 1.762 s/op
Iteration  23: 1.763 s/op
Iteration  24: 1.764 s/op
Iteration  25: 1.764 s/op
Iteration  26: 1.762 s/op
Iteration  27: 1.767 s/op
Iteration  28: 1.764 s/op
Iteration  29: 1.762 s/op
Iteration  30: 1.763 s/op
Iteration  31: 1.769 s/op
Iteration  32: 1.765 s/op
Iteration  33: 1.764 s/op
Iteration  34: 1.763 s/op
Iteration  35: 1.764 s/op
Iteration  36: 1.763 s/op
Iteration  37: 1.764 s/op
Iteration  38: 1.764 s/op
Iteration  39: 1.763 s/op
Iteration  40: 1.763 s/op
Iteration  41: 1.764 s/op
Iteration  42: 1.763 s/op
Iteration  43: 1.763 s/op
Iteration  44: 1.762 s/op
Iteration  45: 1.762 s/op
Iteration  46: 1.762 s/op
Iteration  47: 1.761 s/op
Iteration  48: 1.764 s/op
Iteration  49: 1.768 s/op
Iteration  50: 1.763 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.779 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 44 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 3 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 0 
    [1.950, 1.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.704 s/op
     p(50.0000) =      1.764 s/op
     p(90.0000) =      1.873 s/op
     p(95.0000) =      1.932 s/op
     p(99.0000) =      1.987 s/op
     p(99.9000) =      1.987 s/op
     p(99.9900) =      1.987 s/op
     p(99.9990) =      1.987 s/op
     p(99.9999) =      1.987 s/op
    p(100.0000) =      1.987 s/op


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.779 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot_12.0.2_1564832259519.json
{"wallclock_times": [89.924694528], "core_cycle_counts": [[79464846383], [49595492571], [49852798155], [118286526770]], "aperf_counts": [[79236977067], [49562094792], [49830592519], [118268450381]], "mperf_counts": [[79698052626], [49710564506], [49932901626], [118493294288]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 13:39:09: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-03 13:39:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:39:10: INFO] 293 executions left in scheduler queue
[2019-08-03 13:39:10: INFO] Executions until ETA known: 590
[2019-08-03 13:39:10: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-03 13:39:10: INFO] Estimated completion (next execution): 2019-08-03 13:43:10 (0:04:00 from now)
[2019-08-03 13:39:10: INFO] Reboot in preparation for next execution
[2019-08-03 13:44:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.295 s/op
Iteration   2: 0.857 s/op
Iteration   3: 0.930 s/op
Iteration   4: 0.916 s/op
Iteration   5: 0.835 s/op
Iteration   6: 0.832 s/op
Iteration   7: 0.833 s/op
Iteration   8: 0.832 s/op
Iteration   9: 0.836 s/op
Iteration  10: 0.835 s/op
Iteration  11: 0.835 s/op
Iteration  12: 0.832 s/op
Iteration  13: 0.835 s/op
Iteration  14: 0.837 s/op
Iteration  15: 0.831 s/op
Iteration  16: 0.832 s/op
Iteration  17: 0.828 s/op
Iteration  18: 0.832 s/op
Iteration  19: 0.823 s/op
Iteration  20: 0.838 s/op
Iteration  21: 0.830 s/op
Iteration  22: 0.834 s/op
Iteration  23: 0.833 s/op
Iteration  24: 0.828 s/op
Iteration  25: 0.830 s/op
Iteration  26: 0.830 s/op
Iteration  27: 0.828 s/op
Iteration  28: 0.829 s/op
Iteration  29: 0.828 s/op
Iteration  30: 0.830 s/op
Iteration  31: 0.832 s/op
Iteration  32: 0.835 s/op
Iteration  33: 0.833 s/op
Iteration  34: 0.834 s/op
Iteration  35: 0.832 s/op
Iteration  36: 0.833 s/op
Iteration  37: 0.832 s/op
Iteration  38: 0.834 s/op
Iteration  39: 0.829 s/op
Iteration  40: 0.834 s/op
Iteration  41: 0.835 s/op
Iteration  42: 0.836 s/op
Iteration  43: 0.836 s/op
Iteration  44: 0.833 s/op
Iteration  45: 0.830 s/op
Iteration  46: 0.826 s/op
Iteration  47: 0.826 s/op
Iteration  48: 0.830 s/op
Iteration  49: 0.827 s/op
Iteration  50: 0.831 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      0.845 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [0.800, 0.850) = 46 
    [0.850, 0.900) = 1 
    [0.900, 0.950) = 2 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.823 s/op
     p(50.0000) =      0.832 s/op
     p(90.0000) =      0.838 s/op
     p(95.0000) =      0.923 s/op
     p(99.0000) =      1.295 s/op
     p(99.9000) =      1.295 s/op
     p(99.9900) =      1.295 s/op
     p(99.9990) =      1.295 s/op
     p(99.9999) =      1.295 s/op
    p(100.0000) =      1.295 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.845 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_graalvm-ee-19.1.1_1564832618587.json
{"wallclock_times": [43.170649078], "core_cycle_counts": [[69539894206], [28983572835], [34817902028], [16045411013]], "aperf_counts": [[69446473989], [28957082380], [34793328414], [16019118483]], "mperf_counts": [[69467808210], [28978652576], [34798198220], [16020116350]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 13:44:21: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-03 13:44:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:44:22: INFO] 292 executions left in scheduler queue
[2019-08-03 13:44:22: INFO] Executions until ETA known: 587
[2019-08-03 13:44:22: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-03 13:44:22: INFO] Estimated completion (next execution): 2019-08-03 13:47:36 (0:03:13 from now)
[2019-08-03 13:44:22: INFO] Reboot in preparation for next execution
[2019-08-03 13:49:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.625 s/op
Iteration   2: 1.310 s/op
Iteration   3: 1.306 s/op
Iteration   4: 1.413 s/op
Iteration   5: 1.304 s/op
Iteration   6: 1.303 s/op
Iteration   7: 1.303 s/op
Iteration   8: 1.303 s/op
Iteration   9: 1.304 s/op
Iteration  10: 1.304 s/op
Iteration  11: 1.303 s/op
Iteration  12: 1.304 s/op
Iteration  13: 1.303 s/op
Iteration  14: 1.303 s/op
Iteration  15: 1.302 s/op
Iteration  16: 1.304 s/op
Iteration  17: 1.305 s/op
Iteration  18: 1.304 s/op
Iteration  19: 1.303 s/op
Iteration  20: 1.302 s/op
Iteration  21: 1.303 s/op
Iteration  22: 1.302 s/op
Iteration  23: 1.301 s/op
Iteration  24: 1.301 s/op
Iteration  25: 1.302 s/op
Iteration  26: 1.303 s/op
Iteration  27: 1.302 s/op
Iteration  28: 1.302 s/op
Iteration  29: 1.302 s/op
Iteration  30: 1.302 s/op
Iteration  31: 1.302 s/op
Iteration  32: 1.301 s/op
Iteration  33: 1.302 s/op
Iteration  34: 1.302 s/op
Iteration  35: 1.302 s/op
Iteration  36: 1.302 s/op
Iteration  37: 1.302 s/op
Iteration  38: 1.303 s/op
Iteration  39: 1.301 s/op
Iteration  40: 1.301 s/op
Iteration  41: 1.300 s/op
Iteration  42: 1.301 s/op
Iteration  43: 1.300 s/op
Iteration  44: 1.303 s/op
Iteration  45: 1.303 s/op
Iteration  46: 1.303 s/op
Iteration  47: 1.305 s/op
Iteration  48: 1.302 s/op
Iteration  49: 1.302 s/op
Iteration  50: 1.302 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.311 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [1.300, 1.325) = 48 
    [1.325, 1.350) = 0 
    [1.350, 1.375) = 0 
    [1.375, 1.400) = 0 
    [1.400, 1.425) = 1 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 1 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.300 s/op
     p(50.0000) =      1.303 s/op
     p(90.0000) =      1.305 s/op
     p(95.0000) =      1.356 s/op
     p(99.0000) =      1.625 s/op
     p(99.9000) =      1.625 s/op
     p(99.9900) =      1.625 s/op
     p(99.9990) =      1.625 s/op
     p(99.9999) =      1.625 s/op
    p(100.0000) =      1.625 s/op


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.311 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_graalvm-ee-19.1.1_1564832918647.json
{"wallclock_times": [66.42697283300001], "core_cycle_counts": [[78370744344], [92528688708], [20806005939], [26027786579]], "aperf_counts": [[78234431525], [92504830098], [20789649512], [26014576913]], "mperf_counts": [[78260949938], [92512967926], [20789798962], [26016517528]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 13:49:45: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-03 13:49:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:49:46: INFO] 291 executions left in scheduler queue
[2019-08-03 13:49:46: INFO] Executions until ETA known: 563
[2019-08-03 13:49:46: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-08-03 13:49:46: INFO] Estimated completion (next execution): 2019-08-03 13:53:22 (0:03:36 from now)
[2019-08-03 13:49:46: INFO] Reboot in preparation for next execution
[2019-08-03 13:58:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.810 s/op
Iteration   2: 4.658 s/op
Iteration   3: 4.612 s/op
Iteration   4: 4.600 s/op
Iteration   5: 4.609 s/op
Iteration   6: 4.587 s/op
Iteration   7: 4.592 s/op
Iteration   8: 4.605 s/op
Iteration   9: 4.605 s/op
Iteration  10: 4.607 s/op
Iteration  11: 4.583 s/op
Iteration  12: 4.604 s/op
Iteration  13: 4.610 s/op
Iteration  14: 4.601 s/op
Iteration  15: 4.600 s/op
Iteration  16: 4.597 s/op
Iteration  17: 4.599 s/op
Iteration  18: 4.598 s/op
Iteration  19: 4.599 s/op
Iteration  20: 4.613 s/op
Iteration  21: 4.599 s/op
Iteration  22: 4.613 s/op
Iteration  23: 4.609 s/op
Iteration  24: 4.629 s/op
Iteration  25: 4.604 s/op
Iteration  26: 4.609 s/op
Iteration  27: 4.597 s/op
Iteration  28: 4.610 s/op
Iteration  29: 4.579 s/op
Iteration  30: 4.591 s/op
Iteration  31: 4.613 s/op
Iteration  32: 4.603 s/op
Iteration  33: 4.597 s/op
Iteration  34: 4.599 s/op
Iteration  35: 4.588 s/op
Iteration  36: 4.597 s/op
Iteration  37: 4.598 s/op
Iteration  38: 4.596 s/op
Iteration  39: 4.587 s/op
Iteration  40: 4.595 s/op
Iteration  41: 4.608 s/op
Iteration  42: 4.602 s/op
Iteration  43: 4.602 s/op
Iteration  44: 4.608 s/op
Iteration  45: 4.608 s/op
Iteration  46: 4.609 s/op
Iteration  47: 4.605 s/op
Iteration  48: 4.611 s/op
Iteration  49: 4.600 s/op
Iteration  50: 4.598 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      4.607 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [4.500, 4.525) = 0 
    [4.525, 4.550) = 0 
    [4.550, 4.575) = 0 
    [4.575, 4.600) = 21 
    [4.600, 4.625) = 26 
    [4.625, 4.650) = 1 
    [4.650, 4.675) = 1 
    [4.675, 4.700) = 0 
    [4.700, 4.725) = 0 
    [4.725, 4.750) = 0 
    [4.750, 4.775) = 0 
    [4.775, 4.800) = 0 
    [4.800, 4.825) = 1 
    [4.825, 4.850) = 0 
    [4.850, 4.875) = 0 
    [4.875, 4.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.579 s/op
     p(50.0000) =      4.602 s/op
     p(90.0000) =      4.613 s/op
     p(95.0000) =      4.642 s/op
     p(99.0000) =      4.810 s/op
     p(99.9000) =      4.810 s/op
     p(99.9900) =      4.810 s/op
     p(99.9990) =      4.810 s/op
     p(99.9999) =      4.810 s/op
    p(100.0000) =      4.810 s/op


# Run complete. Total time: 00:03:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  4.607 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_graalvm-ce-19.1.1_1564833256665.json
{"wallclock_times": [231.22047113899998], "core_cycle_counts": [[194881950996], [195062676681], [204748178438], [152211139432]], "aperf_counts": [[194333489886], [195007710022], [204711440553], [152173427712]], "mperf_counts": [[194359897830], [195009577538], [204713619572], [152179819976]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 13:58:07: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-08-03 13:58:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 13:58:08: INFO] 290 executions left in scheduler queue
[2019-08-03 13:58:08: INFO] Executions until ETA known: 531
[2019-08-03 13:58:08: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-08-03 13:58:08: INFO] Estimated completion (next execution): 2019-08-03 14:04:30 (0:06:21 from now)
[2019-08-03 13:58:08: INFO] Reboot in preparation for next execution
[2019-08-03 14:02:25: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 14:02:25: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 14:02:25: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 14:02:25: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 14:02:25: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 14:07:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.628 s/op
Iteration   2: 6.035 s/op
Iteration   3: 5.532 s/op
Iteration   4: 5.458 s/op
Iteration   5: 5.466 s/op
Iteration   6: 5.458 s/op
Iteration   7: 5.459 s/op
Iteration   8: 5.460 s/op
Iteration   9: 5.464 s/op
Iteration  10: 5.457 s/op
Iteration  11: 5.460 s/op
Iteration  12: 5.470 s/op
Iteration  13: 5.462 s/op
Iteration  14: 5.469 s/op
Iteration  15: 5.460 s/op
Iteration  16: 5.461 s/op
Iteration  17: 5.462 s/op
Iteration  18: 5.464 s/op
Iteration  19: 5.466 s/op
Iteration  20: 5.467 s/op
Iteration  21: 5.459 s/op
Iteration  22: 5.467 s/op
Iteration  23: 5.465 s/op
Iteration  24: 5.465 s/op
Iteration  25: 5.458 s/op
Iteration  26: 5.460 s/op
Iteration  27: 5.461 s/op
Iteration  28: 5.462 s/op
Iteration  29: 5.461 s/op
Iteration  30: 5.457 s/op
Iteration  31: 5.463 s/op
Iteration  32: 5.462 s/op
Iteration  33: 5.463 s/op
Iteration  34: 5.458 s/op
Iteration  35: 5.463 s/op
Iteration  36: 5.460 s/op
Iteration  37: 5.460 s/op
Iteration  38: 5.472 s/op
Iteration  39: 5.463 s/op
Iteration  40: 5.464 s/op
Iteration  41: 5.460 s/op
Iteration  42: 5.467 s/op
Iteration  43: 5.471 s/op
Iteration  44: 5.462 s/op
Iteration  45: 5.459 s/op
Iteration  46: 5.462 s/op
Iteration  47: 5.458 s/op
Iteration  48: 5.459 s/op
Iteration  49: 5.462 s/op
Iteration  50: 5.465 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      5.478 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 47 
    [5.500, 5.550) = 1 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 1 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 0 
    [5.800, 5.850) = 0 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 1 
    [6.050, 6.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.457 s/op
     p(50.0000) =      5.462 s/op
     p(90.0000) =      5.471 s/op
     p(95.0000) =      5.575 s/op
     p(99.0000) =      6.035 s/op
     p(99.9000) =      6.035 s/op
     p(99.9900) =      6.035 s/op
     p(99.9990) =      6.035 s/op
     p(99.9999) =      6.035 s/op
    p(100.0000) =      6.035 s/op


# Run complete. Total time: 00:04:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.478 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot_12.0.2_1564833745546.json
{"wallclock_times": [274.880096895], "core_cycle_counts": [[112802194677], [122265417944], [284169064227], [367986106042]], "aperf_counts": [[111997407776], [122211735802], [284138411140], [367950506589]], "mperf_counts": [[112368481950], [122325753522], [284313929600], [368027438368]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 14:07:00: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-08-03 14:07:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 14:07:01: INFO] 289 executions left in scheduler queue
[2019-08-03 14:07:01: INFO] Executions until ETA known: 478
[2019-08-03 14:07:01: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-08-03 14:07:01: INFO] Estimated completion (next execution): 2019-08-03 14:14:06 (0:07:05 from now)
[2019-08-03 14:07:01: INFO] Reboot in preparation for next execution
[2019-08-03 14:10:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 14:10:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 14:10:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 14:10:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 14:10:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 14:10:33: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 14:25:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.958 s/op
Iteration   2: 18.489 s/op
Iteration   3: 18.335 s/op
Iteration   4: 18.224 s/op
Iteration   5: 18.291 s/op
Iteration   6: 18.350 s/op
Iteration   7: 18.431 s/op
Iteration   8: 18.304 s/op
Iteration   9: 18.431 s/op
Iteration  10: 18.388 s/op
Iteration  11: 18.405 s/op
Iteration  12: 18.388 s/op
Iteration  13: 18.428 s/op
Iteration  14: 18.434 s/op
Iteration  15: 18.406 s/op
Iteration  16: 18.404 s/op
Iteration  17: 18.249 s/op
Iteration  18: 18.354 s/op
Iteration  19: 18.428 s/op
Iteration  20: 18.378 s/op
Iteration  21: 18.381 s/op
Iteration  22: 18.362 s/op
Iteration  23: 18.405 s/op
Iteration  24: 18.261 s/op
Iteration  25: 18.289 s/op
Iteration  26: 18.366 s/op
Iteration  27: 18.365 s/op
Iteration  28: 18.407 s/op
Iteration  29: 18.421 s/op
Iteration  30: 18.426 s/op
Iteration  31: 18.428 s/op
Iteration  32: 18.272 s/op
Iteration  33: 18.415 s/op
Iteration  34: 18.239 s/op
Iteration  35: 18.375 s/op
Iteration  36: 18.420 s/op
Iteration  37: 18.424 s/op
Iteration  38: 18.369 s/op
Iteration  39: 18.393 s/op
Iteration  40: 18.350 s/op
Iteration  41: 18.382 s/op
Iteration  42: 18.278 s/op
Iteration  43: 18.371 s/op
Iteration  44: 18.381 s/op
Iteration  45: 18.306 s/op
Iteration  46: 18.347 s/op
Iteration  47: 18.377 s/op
Iteration  48: 18.373 s/op
Iteration  49: 18.411 s/op
Iteration  50: 18.305 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     18.400 ?(99.9%) 0.115 s/op

  Histogram, s/op:
    [18.000, 18.125) = 0 
    [18.125, 18.250) = 3 
    [18.250, 18.375) = 20 
    [18.375, 18.500) = 26 
    [18.500, 18.625) = 0 
    [18.625, 18.750) = 0 
    [18.750, 18.875) = 0 
    [18.875, 19.000) = 0 
    [19.000, 19.125) = 0 
    [19.125, 19.250) = 0 
    [19.250, 19.375) = 0 
    [19.375, 19.500) = 0 
    [19.500, 19.625) = 0 
    [19.625, 19.750) = 0 
    [19.750, 19.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     18.224 s/op
     p(50.0000) =     18.380 s/op
     p(90.0000) =     18.430 s/op
     p(95.0000) =     18.459 s/op
     p(99.0000) =     19.958 s/op
     p(99.9000) =     19.958 s/op
     p(99.9900) =     19.958 s/op
     p(99.9990) =     19.958 s/op
     p(99.9999) =     19.958 s/op
    p(100.0000) =     19.958 s/op


# Run complete. Total time: 00:15:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  18.400 ? 0.115   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9_12.0.1_1564834233659.json
{"wallclock_times": [921.542398992], "core_cycle_counts": [[789858327714], [438765619102], [568413553022], [1232984462493]], "aperf_counts": [[787490742883], [438578178478], [568193688719], [1232805989822]], "mperf_counts": [[787503145100], [438583189030], [568193631094], [1232806304924]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 14:25:55: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-08-03 14:25:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 14:25:56: INFO] 288 executions left in scheduler queue
[2019-08-03 14:25:56: INFO] Executions until ETA known: 470
[2019-08-03 14:25:56: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-08-03 14:25:56: INFO] Estimated completion (next execution): 2019-08-03 14:43:48 (0:17:52 from now)
[2019-08-03 14:25:56: INFO] Reboot in preparation for next execution
[2019-08-03 14:30:15: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 14:30:15: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 14:30:15: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 14:30:15: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 14:30:15: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 14:30:16: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 14:44:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.317 s/op
Iteration   2: 17.053 s/op
Iteration   3: 16.215 s/op
Iteration   4: 17.017 s/op
Iteration   5: 17.100 s/op
Iteration   6: 16.197 s/op
Iteration   7: 16.929 s/op
Iteration   8: 17.041 s/op
Iteration   9: 16.810 s/op
Iteration  10: 16.917 s/op
Iteration  11: 17.031 s/op
Iteration  12: 17.133 s/op
Iteration  13: 16.578 s/op
Iteration  14: 16.923 s/op
Iteration  15: 16.738 s/op
Iteration  16: 16.391 s/op
Iteration  17: 16.413 s/op
Iteration  18: 16.907 s/op
Iteration  19: 16.942 s/op
Iteration  20: 15.516 s/op
Iteration  21: 16.859 s/op
Iteration  22: 16.938 s/op
Iteration  23: 17.039 s/op
Iteration  24: 16.771 s/op
Iteration  25: 17.133 s/op
Iteration  26: 16.874 s/op
Iteration  27: 16.958 s/op
Iteration  28: 17.064 s/op
Iteration  29: 16.858 s/op
Iteration  30: 16.920 s/op
Iteration  31: 15.822 s/op
Iteration  32: 16.860 s/op
Iteration  33: 15.707 s/op
Iteration  34: 16.730 s/op
Iteration  35: 16.765 s/op
Iteration  36: 16.952 s/op
Iteration  37: 16.892 s/op
Iteration  38: 16.930 s/op
Iteration  39: 16.896 s/op
Iteration  40: 16.921 s/op
Iteration  41: 17.015 s/op
Iteration  42: 16.744 s/op
Iteration  43: 16.833 s/op
Iteration  44: 16.797 s/op
Iteration  45: 17.033 s/op
Iteration  46: 16.915 s/op
Iteration  47: 16.153 s/op
Iteration  48: 16.621 s/op
Iteration  49: 17.064 s/op
Iteration  50: 16.704 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.759 ?(99.9%) 0.181 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 2 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 3 
    [16.250, 16.500) = 3 
    [16.500, 16.750) = 6 
    [16.750, 17.000) = 23 
    [17.000, 17.250) = 12 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.516 s/op
     p(50.0000) =     16.894 s/op
     p(90.0000) =     17.063 s/op
     p(95.0000) =     17.115 s/op
     p(99.0000) =     17.133 s/op
     p(99.9000) =     17.133 s/op
     p(99.9900) =     17.133 s/op
     p(99.9990) =     17.133 s/op
     p(99.9999) =     17.133 s/op
    p(100.0000) =     17.133 s/op


# Run complete. Total time: 00:13:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.759 ? 0.181   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9_12.0.1_1564835415837.json
{"wallclock_times": [839.716217282], "core_cycle_counts": [[826037682782], [558483702899], [865163613825], [764630871019]], "aperf_counts": [[823976874754], [558287624299], [864996270357], [764391077212]], "mperf_counts": [[823981497074], [558290640278], [864996228592], [764391013262]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 14:44:15: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-08-03 14:44:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 14:44:16: INFO] 287 executions left in scheduler queue
[2019-08-03 14:44:16: INFO] Executions until ETA known: 439
[2019-08-03 14:44:16: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 14:44:16: INFO] Estimated completion (next execution): 2019-08-03 15:00:46 (0:16:30 from now)
[2019-08-03 14:44:16: INFO] Reboot in preparation for next execution
[2019-08-03 14:48:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 14:48:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 14:48:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 14:48:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 14:48:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 14:48:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 14:54:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.132 s/op
Iteration   2: 7.348 s/op
Iteration   3: 6.973 s/op
Iteration   4: 7.066 s/op
Iteration   5: 7.095 s/op
Iteration   6: 7.030 s/op
Iteration   7: 7.065 s/op
Iteration   8: 7.010 s/op
Iteration   9: 6.963 s/op
Iteration  10: 7.043 s/op
Iteration  11: 6.991 s/op
Iteration  12: 7.012 s/op
Iteration  13: 6.991 s/op
Iteration  14: 7.016 s/op
Iteration  15: 7.149 s/op
Iteration  16: 7.092 s/op
Iteration  17: 6.957 s/op
Iteration  18: 7.068 s/op
Iteration  19: 7.065 s/op
Iteration  20: 7.106 s/op
Iteration  21: 7.077 s/op
Iteration  22: 7.132 s/op
Iteration  23: 6.963 s/op
Iteration  24: 7.123 s/op
Iteration  25: 7.013 s/op
Iteration  26: 7.001 s/op
Iteration  27: 7.059 s/op
Iteration  28: 6.946 s/op
Iteration  29: 7.017 s/op
Iteration  30: 7.109 s/op
Iteration  31: 6.972 s/op
Iteration  32: 7.154 s/op
Iteration  33: 6.993 s/op
Iteration  34: 6.989 s/op
Iteration  35: 7.128 s/op
Iteration  36: 7.087 s/op
Iteration  37: 6.937 s/op
Iteration  38: 7.000 s/op
Iteration  39: 6.997 s/op
Iteration  40: 7.119 s/op
Iteration  41: 7.148 s/op
Iteration  42: 7.053 s/op
Iteration  43: 6.950 s/op
Iteration  44: 7.130 s/op
Iteration  45: 7.034 s/op
Iteration  46: 7.107 s/op
Iteration  47: 7.034 s/op
Iteration  48: 6.940 s/op
Iteration  49: 7.160 s/op
Iteration  50: 7.031 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.091 ?(99.9%) 0.151 s/op

  Histogram, s/op:
    [ 6.000,  6.250) = 0 
    [ 6.250,  6.500) = 0 
    [ 6.500,  6.750) = 0 
    [ 6.750,  7.000) = 15 
    [ 7.000,  7.250) = 33 
    [ 7.250,  7.500) = 1 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 0 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.937 s/op
     p(50.0000) =      7.039 s/op
     p(90.0000) =      7.149 s/op
     p(95.0000) =      7.245 s/op
     p(99.0000) =      9.132 s/op
     p(99.9000) =      9.132 s/op
     p(99.9900) =      9.132 s/op
     p(99.9990) =      9.132 s/op
     p(99.9999) =      9.132 s/op
    p(100.0000) =      9.132 s/op


# Run complete. Total time: 00:05:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.091 ? 0.151   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9_12.0.1_1564836512739.json
{"wallclock_times": [356.459965283], "core_cycle_counts": [[219278966608], [360639317317], [294908428407], [308513042659]], "aperf_counts": [[218265156895], [360521994533], [294816403377], [308438124372]], "mperf_counts": [[218272834106], [360522089054], [294816436538], [308438289334]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 14:54:29: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 14:54:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 14:54:30: INFO] 286 executions left in scheduler queue
[2019-08-03 14:54:30: INFO] Executions until ETA known: 434
[2019-08-03 14:54:30: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 14:54:30: INFO] Estimated completion (next execution): 2019-08-03 15:02:57 (0:08:27 from now)
[2019-08-03 14:54:30: INFO] Reboot in preparation for next execution
[2019-08-03 15:00:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 15:00:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 15:00:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 15:00:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 15:00:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 15:00:20: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 15:09:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.219 s/op
Iteration   2: 10.419 s/op
Iteration   3: 10.566 s/op
Iteration   4: 10.668 s/op
Iteration   5: 10.638 s/op
Iteration   6: 10.660 s/op
Iteration   7: 10.647 s/op
Iteration   8: 10.638 s/op
Iteration   9: 10.685 s/op
Iteration  10: 10.636 s/op
Iteration  11: 10.638 s/op
Iteration  12: 10.610 s/op
Iteration  13: 10.612 s/op
Iteration  14: 10.590 s/op
Iteration  15: 10.602 s/op
Iteration  16: 10.621 s/op
Iteration  17: 10.567 s/op
Iteration  18: 10.630 s/op
Iteration  19: 10.602 s/op
Iteration  20: 10.488 s/op
Iteration  21: 10.611 s/op
Iteration  22: 10.646 s/op
Iteration  23: 10.654 s/op
Iteration  24: 10.648 s/op
Iteration  25: 10.660 s/op
Iteration  26: 10.633 s/op
Iteration  27: 10.649 s/op
Iteration  28: 10.647 s/op
Iteration  29: 10.600 s/op
Iteration  30: 10.653 s/op
Iteration  31: 10.628 s/op
Iteration  32: 10.656 s/op
Iteration  33: 10.654 s/op
Iteration  34: 10.620 s/op
Iteration  35: 10.656 s/op
Iteration  36: 10.636 s/op
Iteration  37: 10.606 s/op
Iteration  38: 10.640 s/op
Iteration  39: 10.601 s/op
Iteration  40: 10.579 s/op
Iteration  41: 10.617 s/op
Iteration  42: 10.586 s/op
Iteration  43: 10.646 s/op
Iteration  44: 10.635 s/op
Iteration  45: 10.621 s/op
Iteration  46: 10.602 s/op
Iteration  47: 10.605 s/op
Iteration  48: 10.618 s/op
Iteration  49: 10.617 s/op
Iteration  50: 10.656 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.652 ?(99.9%) 0.114 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 2 
    [10.500, 10.750) = 47 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 1 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.419 s/op
     p(50.0000) =     10.631 s/op
     p(90.0000) =     10.660 s/op
     p(95.0000) =     10.676 s/op
     p(99.0000) =     12.219 s/op
     p(99.9000) =     12.219 s/op
     p(99.9900) =     12.219 s/op
     p(99.9990) =     12.219 s/op
     p(99.9999) =     12.219 s/op
    p(100.0000) =     12.219 s/op


# Run complete. Total time: 00:08:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.652 ? 0.114   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9_12.0.1_1564837220483.json
{"wallclock_times": [534.2439012960001], "core_cycle_counts": [[454784470729], [540202219193], [416373338631], [328744025330]], "aperf_counts": [[453428320500], [540082541725], [416215659757], [328677154412]], "mperf_counts": [[453436952758], [540084066524], [416215704222], [328677665118]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 15:09:14: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 15:09:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 15:09:15: INFO] 285 executions left in scheduler queue
[2019-08-03 15:09:15: INFO] Executions until ETA known: 432
[2019-08-03 15:09:15: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 15:09:15: INFO] Estimated completion (next execution): 2019-08-03 15:20:40 (0:11:24 from now)
[2019-08-03 15:09:15: INFO] Reboot in preparation for next execution
[2019-08-03 15:13:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 15:13:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 15:13:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 15:13:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 15:13:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 15:13:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 15:19:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.452 s/op
Iteration   2: 6.720 s/op
Iteration   3: 6.402 s/op
Iteration   4: 6.546 s/op
Iteration   5: 6.512 s/op
Iteration   6: 6.537 s/op
Iteration   7: 6.401 s/op
Iteration   8: 6.400 s/op
Iteration   9: 6.371 s/op
Iteration  10: 6.422 s/op
Iteration  11: 6.433 s/op
Iteration  12: 6.313 s/op
Iteration  13: 6.337 s/op
Iteration  14: 6.323 s/op
Iteration  15: 6.338 s/op
Iteration  16: 6.446 s/op
Iteration  17: 6.413 s/op
Iteration  18: 6.452 s/op
Iteration  19: 6.414 s/op
Iteration  20: 6.403 s/op
Iteration  21: 6.385 s/op
Iteration  22: 6.411 s/op
Iteration  23: 6.396 s/op
Iteration  24: 6.410 s/op
Iteration  25: 6.436 s/op
Iteration  26: 6.296 s/op
Iteration  27: 6.320 s/op
Iteration  28: 6.281 s/op
Iteration  29: 6.378 s/op
Iteration  30: 6.434 s/op
Iteration  31: 6.391 s/op
Iteration  32: 6.416 s/op
Iteration  33: 6.308 s/op
Iteration  34: 6.319 s/op
Iteration  35: 6.314 s/op
Iteration  36: 6.352 s/op
Iteration  37: 6.473 s/op
Iteration  38: 6.497 s/op
Iteration  39: 6.461 s/op
Iteration  40: 6.401 s/op
Iteration  41: 6.344 s/op
Iteration  42: 6.435 s/op
Iteration  43: 6.417 s/op
Iteration  44: 6.361 s/op
Iteration  45: 6.380 s/op
Iteration  46: 6.380 s/op
Iteration  47: 6.385 s/op
Iteration  48: 6.380 s/op
Iteration  49: 6.397 s/op
Iteration  50: 6.387 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.444 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 45 
    [6.500, 6.750) = 4 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.281 s/op
     p(50.0000) =      6.400 s/op
     p(90.0000) =      6.510 s/op
     p(95.0000) =      6.624 s/op
     p(99.0000) =      8.452 s/op
     p(99.9000) =      8.452 s/op
     p(99.9900) =      8.452 s/op
     p(99.9990) =      8.452 s/op
     p(99.9999) =      8.452 s/op
    p(100.0000) =      8.452 s/op


# Run complete. Total time: 00:05:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.444 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9_12.0.1_1564838019851.json
{"wallclock_times": [324.157080337], "core_cycle_counts": [[242239416931], [255127309565], [352676557814], [351510571658]], "aperf_counts": [[241283703656], [254997791028], [352554391059], [351396882539]], "mperf_counts": [[241296348396], [255001238746], [352554558038], [351396871268]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 15:19:04: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 15:19:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 15:19:04: INFO] 284 executions left in scheduler queue
[2019-08-03 15:19:04: INFO] Executions until ETA known: 422
[2019-08-03 15:19:04: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 15:19:04: INFO] Estimated completion (next execution): 2019-08-03 15:26:59 (0:07:54 from now)
[2019-08-03 15:19:04: INFO] Reboot in preparation for next execution
[2019-08-03 15:23:25: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 15:23:25: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 15:23:25: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 15:23:25: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 15:23:25: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 15:23:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-03 15:41:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 22.828 s/op
Iteration   2: 22.008 s/op
Iteration   3: 22.143 s/op
Iteration   4: 22.791 s/op
Iteration   5: 22.093 s/op
Iteration   6: 22.033 s/op
Iteration   7: 22.090 s/op
Iteration   8: 22.086 s/op
Iteration   9: 22.108 s/op
Iteration  10: 22.016 s/op
Iteration  11: 22.515 s/op
Iteration  12: 22.124 s/op
Iteration  13: 22.052 s/op
Iteration  14: 22.040 s/op
Iteration  15: 21.959 s/op
Iteration  16: 22.009 s/op
Iteration  17: 21.903 s/op
Iteration  18: 21.912 s/op
Iteration  19: 22.020 s/op
Iteration  20: 21.917 s/op
Iteration  21: 21.931 s/op
Iteration  22: 21.999 s/op
Iteration  23: 22.011 s/op
Iteration  24: 22.541 s/op
Iteration  25: 21.978 s/op
Iteration  26: 22.062 s/op
Iteration  27: 21.975 s/op
Iteration  28: 21.924 s/op
Iteration  29: 21.987 s/op
Iteration  30: 22.643 s/op
Iteration  31: 21.985 s/op
Iteration  32: 22.003 s/op
Iteration  33: 22.023 s/op
Iteration  34: 21.921 s/op
Iteration  35: 21.921 s/op
Iteration  36: 22.002 s/op
Iteration  37: 22.043 s/op
Iteration  38: 21.999 s/op
Iteration  39: 22.013 s/op
Iteration  40: 22.048 s/op
Iteration  41: 22.015 s/op
Iteration  42: 21.877 s/op
Iteration  43: 21.937 s/op
Iteration  44: 22.595 s/op
Iteration  45: 21.954 s/op
Iteration  46: 21.997 s/op
Iteration  47: 21.936 s/op
Iteration  48: 22.114 s/op
Iteration  49: 21.978 s/op
Iteration  50: 21.969 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     22.081 ?(99.9%) 0.112 s/op

  Histogram, s/op:
    [21.800, 21.900) = 1 
    [21.900, 22.000) = 20 
    [22.000, 22.100) = 19 
    [22.100, 22.200) = 4 
    [22.200, 22.300) = 0 
    [22.300, 22.400) = 0 
    [22.400, 22.500) = 0 
    [22.500, 22.600) = 3 
    [22.600, 22.700) = 1 
    [22.700, 22.800) = 1 
    [22.800, 22.900) = 1 

  Percentiles, s/op:
      p(0.0000) =     21.877 s/op
     p(50.0000) =     22.010 s/op
     p(90.0000) =     22.539 s/op
     p(95.0000) =     22.709 s/op
     p(99.0000) =     22.828 s/op
     p(99.9000) =     22.828 s/op
     p(99.9900) =     22.828 s/op
     p(99.9990) =     22.828 s/op
     p(99.9999) =     22.828 s/op
    p(100.0000) =     22.828 s/op


# Run complete. Total time: 00:18:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  22.081 ? 0.112   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9_12.0.1_1564838605893.json
{"wallclock_times": [1105.638234065], "core_cycle_counts": [[1254007997242], [710315649091], [827790732574], [775490023741]], "aperf_counts": [[1251612357748], [710077553983], [827529606259], [775229762066]], "mperf_counts": [[1251618395666], [710077568488], [827529505194], [775229680148]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 15:41:51: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-03 15:41:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 15:41:52: INFO] 283 executions left in scheduler queue
[2019-08-03 15:41:52: INFO] Executions until ETA known: 386
[2019-08-03 15:41:52: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-03 15:41:52: INFO] Estimated completion (next execution): 2019-08-03 16:02:48 (0:20:56 from now)
[2019-08-03 15:41:52: INFO] Reboot in preparation for next execution
[2019-08-03 15:46:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 15:46:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 15:46:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 15:46:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 15:46:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 15:48:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.396 s/op
Iteration   2: 2.069 s/op
Iteration   3: 2.365 s/op
Iteration   4: 2.202 s/op
Iteration   5: 2.235 s/op
Iteration   6: 2.195 s/op
Iteration   7: 2.196 s/op
Iteration   8: 2.201 s/op
Iteration   9: 2.199 s/op
Iteration  10: 2.184 s/op
Iteration  11: 2.197 s/op
Iteration  12: 2.202 s/op
Iteration  13: 2.183 s/op
Iteration  14: 2.201 s/op
Iteration  15: 2.197 s/op
Iteration  16: 2.202 s/op
Iteration  17: 2.179 s/op
Iteration  18: 2.192 s/op
Iteration  19: 2.190 s/op
Iteration  20: 2.198 s/op
Iteration  21: 2.195 s/op
Iteration  22: 2.200 s/op
Iteration  23: 2.187 s/op
Iteration  24: 2.203 s/op
Iteration  25: 2.193 s/op
Iteration  26: 2.197 s/op
Iteration  27: 2.191 s/op
Iteration  28: 2.154 s/op
Iteration  29: 2.196 s/op
Iteration  30: 2.197 s/op
Iteration  31: 2.182 s/op
Iteration  32: 2.140 s/op
Iteration  33: 2.187 s/op
Iteration  34: 2.194 s/op
Iteration  35: 2.191 s/op
Iteration  36: 2.179 s/op
Iteration  37: 2.185 s/op
Iteration  38: 2.196 s/op
Iteration  39: 2.164 s/op
Iteration  40: 2.175 s/op
Iteration  41: 2.200 s/op
Iteration  42: 2.194 s/op
Iteration  43: 2.187 s/op
Iteration  44: 2.193 s/op
Iteration  45: 2.195 s/op
Iteration  46: 2.203 s/op
Iteration  47: 2.195 s/op
Iteration  48: 2.192 s/op
Iteration  49: 2.166 s/op
Iteration  50: 2.199 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.196 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [2.000, 2.025) = 0 
    [2.025, 2.050) = 0 
    [2.050, 2.075) = 1 
    [2.075, 2.100) = 0 
    [2.100, 2.125) = 0 
    [2.125, 2.150) = 1 
    [2.150, 2.175) = 3 
    [2.175, 2.200) = 34 
    [2.200, 2.225) = 8 
    [2.225, 2.250) = 1 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 0 
    [2.300, 2.325) = 0 
    [2.325, 2.350) = 0 
    [2.350, 2.375) = 1 
    [2.375, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.069 s/op
     p(50.0000) =      2.195 s/op
     p(90.0000) =      2.203 s/op
     p(95.0000) =      2.293 s/op
     p(99.0000) =      2.396 s/op
     p(99.9000) =      2.396 s/op
     p(99.9900) =      2.396 s/op
     p(99.9990) =      2.396 s/op
     p(99.9999) =      2.396 s/op
    p(100.0000) =      2.396 s/op


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.196 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot_11.0.4_1564839987700.json
{"wallclock_times": [110.89172918299997], "core_cycle_counts": [[74623410095], [82660684185], [56951548437], [117368894167]], "aperf_counts": [[74303259852], [82619345188], [56916741605], [117347830506]], "mperf_counts": [[83728797932], [93090067424], [64222034764], [132867493784]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 15:48:18: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-03 15:48:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 15:48:19: INFO] 282 executions left in scheduler queue
[2019-08-03 15:48:19: INFO] Executions until ETA known: 376
[2019-08-03 15:48:19: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-03 15:48:19: INFO] Estimated completion (next execution): 2019-08-03 15:52:40 (0:04:21 from now)
[2019-08-03 15:48:19: INFO] Reboot in preparation for next execution
[2019-08-03 15:53:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 15:53:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 15:53:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 15:53:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 15:53:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 15:55:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.620 s/op
Iteration   2: 2.183 s/op
Iteration   3: 2.278 s/op
Iteration   4: 2.481 s/op
Iteration   5: 2.163 s/op
Iteration   6: 2.168 s/op
Iteration   7: 2.153 s/op
Iteration   8: 2.146 s/op
Iteration   9: 2.145 s/op
Iteration  10: 2.147 s/op
Iteration  11: 2.145 s/op
Iteration  12: 2.144 s/op
Iteration  13: 2.144 s/op
Iteration  14: 2.145 s/op
Iteration  15: 2.145 s/op
Iteration  16: 2.144 s/op
Iteration  17: 2.147 s/op
Iteration  18: 2.143 s/op
Iteration  19: 2.143 s/op
Iteration  20: 2.148 s/op
Iteration  21: 2.144 s/op
Iteration  22: 2.147 s/op
Iteration  23: 2.145 s/op
Iteration  24: 2.148 s/op
Iteration  25: 2.147 s/op
Iteration  26: 2.146 s/op
Iteration  27: 2.149 s/op
Iteration  28: 2.142 s/op
Iteration  29: 2.146 s/op
Iteration  30: 2.146 s/op
Iteration  31: 2.145 s/op
Iteration  32: 2.150 s/op
Iteration  33: 2.147 s/op
Iteration  34: 2.145 s/op
Iteration  35: 2.143 s/op
Iteration  36: 2.146 s/op
Iteration  37: 2.141 s/op
Iteration  38: 2.144 s/op
Iteration  39: 2.143 s/op
Iteration  40: 2.143 s/op
Iteration  41: 2.145 s/op
Iteration  42: 2.143 s/op
Iteration  43: 2.143 s/op
Iteration  44: 2.144 s/op
Iteration  45: 2.145 s/op
Iteration  46: 2.141 s/op
Iteration  47: 2.143 s/op
Iteration  48: 2.146 s/op
Iteration  49: 2.143 s/op
Iteration  50: 2.145 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.166 ?(99.9%) 0.041 s/op

  Histogram, s/op:
    [2.100, 2.150) = 43 
    [2.150, 2.200) = 4 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.141 s/op
     p(50.0000) =      2.145 s/op
     p(90.0000) =      2.167 s/op
     p(95.0000) =      2.369 s/op
     p(99.0000) =      2.620 s/op
     p(99.9000) =      2.620 s/op
     p(99.9900) =      2.620 s/op
     p(99.9990) =      2.620 s/op
     p(99.9999) =      2.620 s/op
    p(100.0000) =      2.620 s/op


# Run complete. Total time: 00:01:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.166 ? 0.041   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot_11.0.4_1564840390720.json
{"wallclock_times": [109.28048562200001], "core_cycle_counts": [[81628341123], [99447636576], [125631235738], [54352339551]], "aperf_counts": [[81337379035], [99415962661], [125610470737], [54332396509]], "mperf_counts": [[81572982566], [99472386346], [125670169172], [54602377146]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 15:55:00: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-03 15:55:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 15:55:00: INFO] 281 executions left in scheduler queue
[2019-08-03 15:55:00: INFO] Executions until ETA known: 348
[2019-08-03 15:55:00: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-08-03 15:55:00: INFO] Estimated completion (next execution): 2019-08-03 15:59:20 (0:04:19 from now)
[2019-08-03 15:55:00: INFO] Reboot in preparation for next execution
[2019-08-03 16:00:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 16:00:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 16:00:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 16:00:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 16:00:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 16:00:08: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-03 16:15:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.617 s/op
Iteration   2: 18.438 s/op
Iteration   3: 18.348 s/op
Iteration   4: 18.002 s/op
Iteration   5: 18.219 s/op
Iteration   6: 18.555 s/op
Iteration   7: 17.974 s/op
Iteration   8: 17.962 s/op
Iteration   9: 17.892 s/op
Iteration  10: 18.328 s/op
Iteration  11: 18.407 s/op
Iteration  12: 18.249 s/op
Iteration  13: 18.614 s/op
Iteration  14: 18.425 s/op
Iteration  15: 18.343 s/op
Iteration  16: 18.199 s/op
Iteration  17: 17.216 s/op
Iteration  18: 17.466 s/op
Iteration  19: 18.274 s/op
Iteration  20: 18.226 s/op
Iteration  21: 18.172 s/op
Iteration  22: 17.127 s/op
Iteration  23: 17.260 s/op
Iteration  24: 18.186 s/op
Iteration  25: 18.338 s/op
Iteration  26: 17.239 s/op
Iteration  27: 18.378 s/op
Iteration  28: 18.304 s/op
Iteration  29: 17.273 s/op
Iteration  30: 18.144 s/op
Iteration  31: 17.911 s/op
Iteration  32: 18.507 s/op
Iteration  33: 18.265 s/op
Iteration  34: 17.701 s/op
Iteration  35: 18.596 s/op
Iteration  36: 18.112 s/op
Iteration  37: 18.186 s/op
Iteration  38: 17.664 s/op
Iteration  39: 18.205 s/op
Iteration  40: 18.269 s/op
Iteration  41: 18.203 s/op
Iteration  42: 18.171 s/op
Iteration  43: 18.137 s/op
Iteration  44: 18.053 s/op
Iteration  45: 17.656 s/op
Iteration  46: 18.319 s/op
Iteration  47: 18.309 s/op
Iteration  48: 16.662 s/op
Iteration  49: 17.568 s/op
Iteration  50: 18.171 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     18.057 ?(99.9%) 0.216 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 3 
    [17.250, 17.500) = 3 
    [17.500, 17.750) = 4 
    [17.750, 18.000) = 4 
    [18.000, 18.250) = 16 
    [18.250, 18.500) = 14 
    [18.500, 18.750) = 5 

  Percentiles, s/op:
      p(0.0000) =     16.662 s/op
     p(50.0000) =     18.193 s/op
     p(90.0000) =     18.500 s/op
     p(95.0000) =     18.604 s/op
     p(99.0000) =     18.617 s/op
     p(99.9000) =     18.617 s/op
     p(99.9900) =     18.617 s/op
     p(99.9990) =     18.617 s/op
     p(99.9999) =     18.617 s/op
    p(100.0000) =     18.617 s/op


# Run complete. Total time: 00:15:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  18.057 ? 0.216   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9_11.0.4_1564840807942.json
{"wallclock_times": [904.549089088], "core_cycle_counts": [[623032495261], [780248614359], [840376317319], [970985517492]], "aperf_counts": [[620512177556], [780086696045], [840196585135], [970817422410]], "mperf_counts": [[620520819334], [780087257178], [840196602840], [970817408722]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-03 16:15:12: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-08-03 16:15:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 16:15:13: INFO] 280 executions left in scheduler queue
[2019-08-03 16:15:13: INFO] Executions until ETA known: 332
[2019-08-03 16:15:13: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-08-03 16:15:13: INFO] Estimated completion (next execution): 2019-08-03 16:32:48 (0:17:35 from now)
[2019-08-03 16:15:13: INFO] Reboot in preparation for next execution
[2019-08-03 16:21:43: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-03 16:21:43: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-03 16:21:43: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-03 16:21:43: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-03 16:21:43: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-03 16:27:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.714 s/op
Iteration   2: 7.009 s/op
Iteration   3: 6.423 s/op
Iteration   4: 6.426 s/op
Iteration   5: 6.423 s/op
Iteration   6: 6.426 s/op
Iteration   7: 6.427 s/op
Iteration   8: 6.425 s/op
Iteration   9: 6.432 s/op
Iteration  10: 6.424 s/op
Iteration  11: 6.426 s/op
Iteration  12: 6.426 s/op
Iteration  13: 6.423 s/op
Iteration  14: 6.424 s/op
Iteration  15: 6.432 s/op
Iteration  16: 6.423 s/op
Iteration  17: 6.444 s/op
Iteration  18: 6.432 s/op
Iteration  19: 6.426 s/op
Iteration  20: 6.427 s/op
Iteration  21: 6.427 s/op
Iteration  22: 6.429 s/op
Iteration  23: 6.428 s/op
Iteration  24: 6.426 s/op
Iteration  25: 6.425 s/op
Iteration  26: 6.433 s/op
Iteration  27: 6.429 s/op
Iteration  28: 6.424 s/op
Iteration  29: 6.428 s/op
Iteration  30: 6.426 s/op
Iteration  31: 6.429 s/op
Iteration  32: 6.425 s/op
Iteration  33: 6.425 s/op
Iteration  34: 6.425 s/op
Iteration  35: 6.426 s/op
Iteration  36: 6.425 s/op
Iteration  37: 6.428 s/op
Iteration  38: 6.431 s/op
Iteration  39: 6.429 s/op
Iteration  40: 6.425 s/op
Iteration  41: 6.428 s/op
Iteration  42: 6.424 s/op
Iteration  43: 6.430 s/op
Iteration  44: 6.429 s/op
Iteration  45: 6.426 s/op
Iteration  46: 6.426 s/op
Iteration  47: 6.431 s/op
Iteration  48: 6.432 s/op
Iteration  49: 6.424 s/op
Iteration  50: 6.428 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.445 ?(99.9%) 0.045 s/op

  Histogram, s/op:
    [6.400, 6.450) = 48 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 1 
    [7.050, 7.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.423 s/op
     p(50.0000) =      6.426 s/op
     p(90.0000) =      6.432 s/op
     p(95.0000) =      6.566 s/op
     p(99.0000) =      7.009 s/op
     p(99.9000) =      7.009 s/op
     p(99.9900) =      7.009 s/op
     p(99.9990) =      7.009 s/op
     p(99.9999) =      7.009 s/op
    p(100.0000) =      7.009 s/op


# Run complete. Total time: 00:05:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.445 ? 0.045   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot_12.0.2_1564842103900.json
{"wallclock_times": [323.203029613], "core_cycle_counts": [[58661336169], [83743982826], [631077680980], [271815507830]], "aperf_counts": [[57651036815], [83677156422], [631052052102], [271769502903]], "mperf_counts": [[57891819910], [83861015926], [631167510912], [271868346552]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-03 16:27:07: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-08-03 16:27:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 16:27:08: INFO] 279 executions left in scheduler queue
[2019-08-03 16:27:08: INFO] Executions until ETA known: 301
[2019-08-03 16:27:08: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-03 16:27:08: INFO] Estimated completion (next execution): 2019-08-03 16:35:01 (0:07:53 from now)
[2019-08-03 16:27:08: INFO] Reboot in preparation for next execution
[2019-08-03 16:39:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.261 s/op
Iteration   2: 9.252 s/op
Iteration   3: 9.353 s/op
Iteration   4: 9.228 s/op
Iteration   5: 9.242 s/op
Iteration   6: 9.238 s/op
Iteration   7: 9.212 s/op
Iteration   8: 9.257 s/op
Iteration   9: 9.202 s/op
Iteration  10: 9.231 s/op
Iteration  11: 9.247 s/op
Iteration  12: 9.237 s/op
Iteration  13: 9.205 s/op
Iteration  14: 9.250 s/op
Iteration  15: 9.239 s/op
Iteration  16: 9.230 s/op
Iteration  17: 9.250 s/op
Iteration  18: 9.259 s/op
Iteration  19: 9.263 s/op
Iteration  20: 9.260 s/op
Iteration  21: 9.229 s/op
Iteration  22: 9.237 s/op
Iteration  23: 9.265 s/op
Iteration  24: 9.248 s/op
Iteration  25: 9.269 s/op
Iteration  26: 9.278 s/op
Iteration  27: 9.258 s/op
Iteration  28: 9.243 s/op
Iteration  29: 9.265 s/op
Iteration  30: 9.246 s/op
Iteration  31: 9.252 s/op
Iteration  32: 9.271 s/op
Iteration  33: 9.234 s/op
Iteration  34: 9.249 s/op
Iteration  35: 9.247 s/op
Iteration  36: 9.258 s/op
Iteration  37: 9.253 s/op
Iteration  38: 9.250 s/op
Iteration  39: 9.245 s/op
Iteration  40: 9.257 s/op
Iteration  41: 9.242 s/op
Iteration  42: 9.237 s/op
Iteration  43: 9.263 s/op
Iteration  44: 9.239 s/op
Iteration  45: 9.257 s/op
Iteration  46: 9.270 s/op
Iteration  47: 9.237 s/op
Iteration  48: 9.254 s/op
Iteration  49: 9.242 s/op
Iteration  50: 9.250 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.249 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [9.200, 9.213) = 3 
    [9.213, 9.225) = 0 
    [9.225, 9.238) = 9 
    [9.238, 9.250) = 14 
    [9.250, 9.263) = 15 
    [9.263, 9.275) = 7 
    [9.275, 9.288) = 1 
    [9.288, 9.300) = 0 
    [9.300, 9.313) = 0 
    [9.313, 9.325) = 0 
    [9.325, 9.338) = 0 
    [9.338, 9.350) = 0 
    [9.350, 9.363) = 1 
    [9.363, 9.375) = 0 
    [9.375, 9.388) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.202 s/op
     p(50.0000) =      9.249 s/op
     p(90.0000) =      9.269 s/op
     p(95.0000) =      9.274 s/op
     p(99.0000) =      9.353 s/op
     p(99.9000) =      9.353 s/op
     p(99.9900) =      9.353 s/op
     p(99.9990) =      9.353 s/op
     p(99.9999) =      9.353 s/op
    p(100.0000) =      9.353 s/op


# Run complete. Total time: 00:07:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.249 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot-8u222-b10_1564842723630.json
{"wallclock_times": [463.30940922499997], "core_cycle_counts": [[293726905136], [184826702649], [505421928047], [514614395564]], "aperf_counts": [[292612455800], [184755115154], [505400181999], [514595011101]], "mperf_counts": [[292625777776], [184764978798], [505405585546], [514596156660]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 16:39:46: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-03 16:39:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 16:39:47: INFO] 278 executions left in scheduler queue
[2019-08-03 16:39:47: INFO] Executions until ETA known: 295
[2019-08-03 16:39:47: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-03 16:39:47: INFO] Estimated completion (next execution): 2019-08-03 16:50:01 (0:10:13 from now)
[2019-08-03 16:39:47: INFO] Reboot in preparation for next execution
[2019-08-03 17:03:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.825 s/op
Iteration   2: 15.043 s/op
Iteration   3: 15.123 s/op
Iteration   4: 14.855 s/op
Iteration   5: 14.912 s/op
Iteration   6: 14.895 s/op
Iteration   7: 14.879 s/op
Iteration   8: 14.847 s/op
Iteration   9: 14.863 s/op
Iteration  10: 14.875 s/op
Iteration  11: 14.884 s/op
Iteration  12: 15.112 s/op
Iteration  13: 14.873 s/op
Iteration  14: 14.910 s/op
Iteration  15: 14.917 s/op
Iteration  16: 14.924 s/op
Iteration  17: 14.981 s/op
Iteration  18: 14.935 s/op
Iteration  19: 14.909 s/op
Iteration  20: 14.934 s/op
Iteration  21: 14.849 s/op
Iteration  22: 14.868 s/op
Iteration  23: 14.919 s/op
Iteration  24: 14.991 s/op
Iteration  25: 14.827 s/op
Iteration  26: 14.855 s/op
Iteration  27: 14.882 s/op
Iteration  28: 14.945 s/op
Iteration  29: 14.911 s/op
Iteration  30: 14.880 s/op
Iteration  31: 14.922 s/op
Iteration  32: 14.914 s/op
Iteration  33: 14.933 s/op
Iteration  34: 14.899 s/op
Iteration  35: 14.883 s/op
Iteration  36: 14.899 s/op
Iteration  37: 14.920 s/op
Iteration  38: 14.832 s/op
Iteration  39: 14.902 s/op
Iteration  40: 14.885 s/op
Iteration  41: 14.886 s/op
Iteration  42: 14.898 s/op
Iteration  43: 14.895 s/op
Iteration  44: 14.889 s/op
Iteration  45: 14.887 s/op
Iteration  46: 14.901 s/op
Iteration  47: 14.870 s/op
Iteration  48: 14.877 s/op
Iteration  49: 14.888 s/op
Iteration  50: 14.883 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.906 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [14.800, 14.825) = 1 
    [14.825, 14.850) = 4 
    [14.850, 14.875) = 6 
    [14.875, 14.900) = 18 
    [14.900, 14.925) = 12 
    [14.925, 14.950) = 4 
    [14.950, 14.975) = 0 
    [14.975, 15.000) = 2 
    [15.000, 15.025) = 0 
    [15.025, 15.050) = 1 
    [15.050, 15.075) = 0 
    [15.075, 15.100) = 0 
    [15.100, 15.125) = 2 
    [15.125, 15.150) = 0 
    [15.150, 15.175) = 0 
    [15.175, 15.200) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.825 s/op
     p(50.0000) =     14.895 s/op
     p(90.0000) =     14.978 s/op
     p(95.0000) =     15.074 s/op
     p(99.0000) =     15.123 s/op
     p(99.9000) =     15.123 s/op
     p(99.9900) =     15.123 s/op
     p(99.9990) =     15.123 s/op
     p(99.9999) =     15.123 s/op
    p(100.0000) =     15.123 s/op


# Run complete. Total time: 00:12:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.906 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot-8u222-b10_1564843875244.json
{"wallclock_times": [746.155782094], "core_cycle_counts": [[525424917451], [528890895318], [484729373224], [862451528515]], "aperf_counts": [[523606676161], [528771217347], [484680879558], [862427221429]], "mperf_counts": [[523611381218], [528781910632], [484682182470], [862428012992]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 17:03:41: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-03 17:03:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 17:03:42: INFO] 277 executions left in scheduler queue
[2019-08-03 17:03:42: INFO] Executions until ETA known: 293
[2019-08-03 17:03:42: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-03 17:03:42: INFO] Estimated completion (next execution): 2019-08-03 17:18:38 (0:14:56 from now)
[2019-08-03 17:03:42: INFO] Reboot in preparation for next execution
[2019-08-03 23:50:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.310 s/op
Iteration   2: 5.785 s/op
Iteration   3: 5.865 s/op
Iteration   4: 5.806 s/op
Iteration   5: 5.833 s/op
Iteration   6: 5.861 s/op
Iteration   7: 5.849 s/op
Iteration   8: 5.768 s/op
Iteration   9: 5.758 s/op
Iteration  10: 5.843 s/op
Iteration  11: 5.843 s/op
Iteration  12: 5.841 s/op
Iteration  13: 5.856 s/op
Iteration  14: 5.858 s/op
Iteration  15: 5.860 s/op
Iteration  16: 5.856 s/op
Iteration  17: 5.866 s/op
Iteration  18: 5.872 s/op
Iteration  19: 5.858 s/op
Iteration  20: 5.853 s/op
Iteration  21: 5.769 s/op
Iteration  22: 5.758 s/op
Iteration  23: 5.832 s/op
Iteration  24: 5.847 s/op
Iteration  25: 5.837 s/op
Iteration  26: 5.842 s/op
Iteration  27: 5.852 s/op
Iteration  28: 5.869 s/op
Iteration  29: 5.846 s/op
Iteration  30: 5.774 s/op
Iteration  31: 5.742 s/op
Iteration  32: 5.864 s/op
Iteration  33: 5.854 s/op
Iteration  34: 5.859 s/op
Iteration  35: 5.852 s/op
Iteration  36: 5.842 s/op
Iteration  37: 5.832 s/op
Iteration  38: 5.854 s/op
Iteration  39: 5.776 s/op
Iteration  40: 5.755 s/op
Iteration  41: 5.846 s/op
Iteration  42: 5.845 s/op
Iteration  43: 5.849 s/op
Iteration  44: 5.866 s/op
Iteration  45: 5.866 s/op
Iteration  46: 5.856 s/op
Iteration  47: 5.855 s/op
Iteration  48: 5.859 s/op
Iteration  49: 5.867 s/op
Iteration  50: 5.771 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.843 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [5.700, 5.750) = 1 
    [5.750, 5.800) = 9 
    [5.800, 5.850) = 16 
    [5.850, 5.900) = 23 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 0 
    [6.050, 6.100) = 0 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 1 
    [6.350, 6.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.742 s/op
     p(50.0000) =      5.849 s/op
     p(90.0000) =      5.866 s/op
     p(95.0000) =      5.870 s/op
     p(99.0000) =      6.310 s/op
     p(99.9000) =      6.310 s/op
     p(99.9900) =      6.310 s/op
     p(99.9990) =      6.310 s/op
     p(99.9999) =      6.310 s/op
    p(100.0000) =      6.310 s/op


# Run complete. Total time: 00:04:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.843 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot-8u222-b10_1564868761130.json
{"wallclock_times": [293.16523567499826], "core_cycle_counts": [[306578295399], [182721249031], [206040752025], [310562565733]], "aperf_counts": [[305932540191], [182636669424], [206000350379], [310524172712]], "mperf_counts": [[305940130284], [182638025998], [206000937756], [310537311954]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-03 23:50:54: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-03 23:50:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-03 23:50:55: INFO] 276 executions left in scheduler queue
[2019-08-03 23:50:55: INFO] Executions until ETA known: 287
[2019-08-03 23:50:55: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-03 23:50:55: INFO] Estimated completion (next execution): 2019-08-03 23:58:18 (0:07:23 from now)
[2019-08-03 23:50:55: INFO] Reboot in preparation for next execution
[2019-08-04 00:13:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.749 s/op
Iteration   2: 5.406 s/op
Iteration   3: 5.464 s/op
Iteration   4: 5.334 s/op
Iteration   5: 5.365 s/op
Iteration   6: 5.361 s/op
Iteration   7: 5.350 s/op
Iteration   8: 5.365 s/op
Iteration   9: 5.361 s/op
Iteration  10: 5.360 s/op
Iteration  11: 5.362 s/op
Iteration  12: 5.382 s/op
Iteration  13: 5.346 s/op
Iteration  14: 5.358 s/op
Iteration  15: 5.367 s/op
Iteration  16: 5.398 s/op
Iteration  17: 5.363 s/op
Iteration  18: 5.365 s/op
Iteration  19: 5.361 s/op
Iteration  20: 5.359 s/op
Iteration  21: 5.369 s/op
Iteration  22: 5.385 s/op
Iteration  23: 5.359 s/op
Iteration  24: 5.342 s/op
Iteration  25: 5.336 s/op
Iteration  26: 5.351 s/op
Iteration  27: 5.348 s/op
Iteration  28: 5.361 s/op
Iteration  29: 5.356 s/op
Iteration  30: 5.374 s/op
Iteration  31: 5.357 s/op
Iteration  32: 5.355 s/op
Iteration  33: 5.351 s/op
Iteration  34: 5.356 s/op
Iteration  35: 5.359 s/op
Iteration  36: 5.370 s/op
Iteration  37: 5.347 s/op
Iteration  38: 5.349 s/op
Iteration  39: 5.348 s/op
Iteration  40: 5.352 s/op
Iteration  41: 5.352 s/op
Iteration  42: 5.348 s/op
Iteration  43: 5.365 s/op
Iteration  44: 5.348 s/op
Iteration  45: 5.360 s/op
Iteration  46: 5.340 s/op
Iteration  47: 5.380 s/op
Iteration  48: 5.358 s/op
Iteration  49: 5.352 s/op
Iteration  50: 5.352 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.369 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [5.300, 5.350) = 11 
    [5.350, 5.400) = 36 
    [5.400, 5.450) = 1 
    [5.450, 5.500) = 1 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.334 s/op
     p(50.0000) =      5.359 s/op
     p(90.0000) =      5.385 s/op
     p(95.0000) =      5.432 s/op
     p(99.0000) =      5.749 s/op
     p(99.9000) =      5.749 s/op
     p(99.9900) =      5.749 s/op
     p(99.9990) =      5.749 s/op
     p(99.9999) =      5.749 s/op
    p(100.0000) =      5.749 s/op


# Run complete. Total time: 00:04:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.369 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot-8u222-b10_1564870146123.json
{"wallclock_times": [269.3627282089999], "core_cycle_counts": [[171006108148], [217615016915], [270630701892], [216060497323]], "aperf_counts": [[170339478924], [217572589709], [270611684007], [216041580882]], "mperf_counts": [[170346946482], [217572579712], [270619515368], [216042310192]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 00:13:35: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-04 00:13:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 00:13:36: INFO] 275 executions left in scheduler queue
[2019-08-04 00:13:36: INFO] Executions until ETA known: 270
[2019-08-04 00:13:36: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-04 00:13:36: INFO] Estimated completion (next execution): 2019-08-04 00:20:36 (0:06:59 from now)
[2019-08-04 00:13:36: INFO] Reboot in preparation for next execution
[2019-08-04 00:22:47: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 00:22:47: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 00:22:47: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 00:22:47: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 00:22:47: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 00:22:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 00:24:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.725 s/op
Iteration   2: 2.194 s/op
Iteration   3: 2.245 s/op
Iteration   4: 1.996 s/op
Iteration   5: 2.136 s/op
Iteration   6: 1.980 s/op
Iteration   7: 1.980 s/op
Iteration   8: 1.964 s/op
Iteration   9: 1.978 s/op
Iteration  10: 1.970 s/op
Iteration  11: 1.931 s/op
Iteration  12: 1.932 s/op
Iteration  13: 1.923 s/op
Iteration  14: 1.925 s/op
Iteration  15: 1.959 s/op
Iteration  16: 1.942 s/op
Iteration  17: 1.952 s/op
Iteration  18: 1.949 s/op
Iteration  19: 1.952 s/op
Iteration  20: 1.922 s/op
Iteration  21: 1.905 s/op
Iteration  22: 1.947 s/op
Iteration  23: 1.909 s/op
Iteration  24: 1.927 s/op
Iteration  25: 1.929 s/op
Iteration  26: 1.939 s/op
Iteration  27: 1.937 s/op
Iteration  28: 1.930 s/op
Iteration  29: 1.933 s/op
Iteration  30: 1.941 s/op
Iteration  31: 1.946 s/op
Iteration  32: 1.944 s/op
Iteration  33: 1.946 s/op
Iteration  34: 1.958 s/op
Iteration  35: 1.951 s/op
Iteration  36: 1.962 s/op
Iteration  37: 1.967 s/op
Iteration  38: 1.933 s/op
Iteration  39: 1.931 s/op
Iteration  40: 1.951 s/op
Iteration  41: 1.947 s/op
Iteration  42: 1.917 s/op
Iteration  43: 1.955 s/op
Iteration  44: 1.952 s/op
Iteration  45: 1.930 s/op
Iteration  46: 1.968 s/op
Iteration  47: 1.960 s/op
Iteration  48: 1.964 s/op
Iteration  49: 1.953 s/op
Iteration  50: 1.961 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.977 ?(99.9%) 0.062 s/op

  Histogram, s/op:
    [1.900, 1.950) = 25 
    [1.950, 2.000) = 21 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.905 s/op
     p(50.0000) =      1.950 s/op
     p(90.0000) =      1.994 s/op
     p(95.0000) =      2.217 s/op
     p(99.0000) =      2.725 s/op
     p(99.9000) =      2.725 s/op
     p(99.9900) =      2.725 s/op
     p(99.9990) =      2.725 s/op
     p(99.9999) =      2.725 s/op
    p(100.0000) =      2.725 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.977 ? 0.062   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9_11.0.4_1564870967718.json
{"wallclock_times": [100.49639770500005], "core_cycle_counts": [[110446175189], [92403946187], [82512807012], [66118651398]], "aperf_counts": [[110118135667], [92340125925], [82441638132], [66048517509]], "mperf_counts": [[110128050054], [92342098698], [82441678700], [66048767752]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 00:24:28: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-04 00:24:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 00:24:29: INFO] 274 executions left in scheduler queue
[2019-08-04 00:24:29: INFO] Executions until ETA known: 267
[2019-08-04 00:24:29: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-04 00:24:29: INFO] Estimated completion (next execution): 2019-08-04 00:28:40 (0:04:11 from now)
[2019-08-04 00:24:29: INFO] Reboot in preparation for next execution
[2019-08-04 00:33:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 00:33:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 00:33:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 00:33:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 00:33:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 00:33:34: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 00:35:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.037 s/op
Iteration   2: 2.655 s/op
Iteration   3: 2.498 s/op
Iteration   4: 2.515 s/op
Iteration   5: 2.309 s/op
Iteration   6: 2.325 s/op
Iteration   7: 2.332 s/op
Iteration   8: 2.298 s/op
Iteration   9: 2.309 s/op
Iteration  10: 2.304 s/op
Iteration  11: 2.319 s/op
Iteration  12: 2.339 s/op
Iteration  13: 2.327 s/op
Iteration  14: 2.283 s/op
Iteration  15: 2.317 s/op
Iteration  16: 2.289 s/op
Iteration  17: 2.319 s/op
Iteration  18: 2.300 s/op
Iteration  19: 2.246 s/op
Iteration  20: 2.316 s/op
Iteration  21: 2.270 s/op
Iteration  22: 2.291 s/op
Iteration  23: 2.283 s/op
Iteration  24: 2.316 s/op
Iteration  25: 2.280 s/op
Iteration  26: 2.300 s/op
Iteration  27: 2.325 s/op
Iteration  28: 2.320 s/op
Iteration  29: 2.258 s/op
Iteration  30: 2.296 s/op
Iteration  31: 2.314 s/op
Iteration  32: 2.326 s/op
Iteration  33: 2.294 s/op
Iteration  34: 2.277 s/op
Iteration  35: 2.301 s/op
Iteration  36: 2.272 s/op
Iteration  37: 2.243 s/op
Iteration  38: 2.320 s/op
Iteration  39: 2.309 s/op
Iteration  40: 2.292 s/op
Iteration  41: 2.319 s/op
Iteration  42: 2.312 s/op
Iteration  43: 2.245 s/op
Iteration  44: 2.313 s/op
Iteration  45: 2.299 s/op
Iteration  46: 2.258 s/op
Iteration  47: 2.267 s/op
Iteration  48: 2.272 s/op
Iteration  49: 2.289 s/op
Iteration  50: 2.286 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.328 ?(99.9%) 0.061 s/op

  Histogram, s/op:
    [2.200, 2.250) = 3 
    [2.250, 2.300) = 19 
    [2.300, 2.350) = 24 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 1 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.243 s/op
     p(50.0000) =      2.302 s/op
     p(90.0000) =      2.338 s/op
     p(95.0000) =      2.578 s/op
     p(99.0000) =      3.037 s/op
     p(99.9000) =      3.037 s/op
     p(99.9900) =      3.037 s/op
     p(99.9990) =      3.037 s/op
     p(99.9999) =      3.037 s/op
    p(100.0000) =      3.037 s/op


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.328 ? 0.061   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9_11.0.4_1564871614665.json
{"wallclock_times": [117.86726695800002], "core_cycle_counts": [[85518131164], [91270438528], [151418652753], [77976027089]], "aperf_counts": [[85171931694], [91205452708], [151375970193], [77936091993]], "mperf_counts": [[85176933468], [91205444524], [151378629658], [77936091928]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 00:35:32: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-04 00:35:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 00:35:33: INFO] 273 executions left in scheduler queue
[2019-08-04 00:35:33: INFO] Executions until ETA known: 244
[2019-08-04 00:35:33: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 00:35:33: INFO] Estimated completion (next execution): 2019-08-04 00:40:01 (0:04:28 from now)
[2019-08-04 00:35:33: INFO] Reboot in preparation for next execution
[2019-08-04 00:44:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 00:44:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 00:44:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 00:44:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 00:44:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 00:51:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.274 s/op
Iteration   2: 8.577 s/op
Iteration   3: 7.782 s/op
Iteration   4: 7.835 s/op
Iteration   5: 7.726 s/op
Iteration   6: 7.869 s/op
Iteration   7: 7.888 s/op
Iteration   8: 7.879 s/op
Iteration   9: 7.876 s/op
Iteration  10: 7.915 s/op
Iteration  11: 7.888 s/op
Iteration  12: 7.893 s/op
Iteration  13: 7.855 s/op
Iteration  14: 7.869 s/op
Iteration  15: 8.746 s/op
Iteration  16: 8.106 s/op
Iteration  17: 7.888 s/op
Iteration  18: 7.849 s/op
Iteration  19: 7.851 s/op
Iteration  20: 8.165 s/op
Iteration  21: 7.855 s/op
Iteration  22: 7.835 s/op
Iteration  23: 7.822 s/op
Iteration  24: 7.828 s/op
Iteration  25: 7.795 s/op
Iteration  26: 7.873 s/op
Iteration  27: 7.789 s/op
Iteration  28: 8.348 s/op
Iteration  29: 7.883 s/op
Iteration  30: 8.269 s/op
Iteration  31: 7.845 s/op
Iteration  32: 7.733 s/op
Iteration  33: 7.843 s/op
Iteration  34: 7.826 s/op
Iteration  35: 7.862 s/op
Iteration  36: 7.839 s/op
Iteration  37: 7.834 s/op
Iteration  38: 7.821 s/op
Iteration  39: 7.987 s/op
Iteration  40: 8.111 s/op
Iteration  41: 7.836 s/op
Iteration  42: 7.837 s/op
Iteration  43: 7.974 s/op
Iteration  44: 7.835 s/op
Iteration  45: 7.854 s/op
Iteration  46: 7.833 s/op
Iteration  47: 7.843 s/op
Iteration  48: 7.834 s/op
Iteration  49: 7.822 s/op
Iteration  50: 7.783 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.924 ?(99.9%) 0.100 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 2 
    [7.750, 7.875) = 30 
    [7.875, 8.000) = 10 
    [8.000, 8.125) = 2 
    [8.125, 8.250) = 1 
    [8.250, 8.375) = 3 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 1 
    [8.625, 8.750) = 1 
    [8.750, 8.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.726 s/op
     p(50.0000) =      7.852 s/op
     p(90.0000) =      8.259 s/op
     p(95.0000) =      8.451 s/op
     p(99.0000) =      8.746 s/op
     p(99.9000) =      8.746 s/op
     p(99.9900) =      8.746 s/op
     p(99.9990) =      8.746 s/op
     p(99.9999) =      8.746 s/op
    p(100.0000) =      8.746 s/op


# Run complete. Total time: 00:06:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.924 ? 0.100   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot_12.0.2_1564872298674.json
{"wallclock_times": [397.325800438], "core_cycle_counts": [[417993998079], [243568331823], [402135150501], [332235216398]], "aperf_counts": [[417066974321], [243462586020], [402069715388], [332189368846]], "mperf_counts": [[424007906746], [245916941120], [404141302546], [332334180378]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 00:51:36: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 00:51:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 00:51:36: INFO] 272 executions left in scheduler queue
[2019-08-04 00:51:36: INFO] Executions until ETA known: 225
[2019-08-04 00:51:36: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 00:51:36: INFO] Estimated completion (next execution): 2019-08-04 01:00:44 (0:09:07 from now)
[2019-08-04 00:51:36: INFO] Reboot in preparation for next execution
[2019-08-04 00:59:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 00:59:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 00:59:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 00:59:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 00:59:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 01:09:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.611 s/op
Iteration   2: 13.227 s/op
Iteration   3: 12.576 s/op
Iteration   4: 12.579 s/op
Iteration   5: 12.498 s/op
Iteration   6: 12.430 s/op
Iteration   7: 12.439 s/op
Iteration   8: 12.449 s/op
Iteration   9: 12.444 s/op
Iteration  10: 12.442 s/op
Iteration  11: 12.439 s/op
Iteration  12: 12.433 s/op
Iteration  13: 12.446 s/op
Iteration  14: 12.435 s/op
Iteration  15: 12.462 s/op
Iteration  16: 12.454 s/op
Iteration  17: 12.433 s/op
Iteration  18: 12.446 s/op
Iteration  19: 12.418 s/op
Iteration  20: 12.405 s/op
Iteration  21: 12.409 s/op
Iteration  22: 12.437 s/op
Iteration  23: 12.451 s/op
Iteration  24: 12.493 s/op
Iteration  25: 12.438 s/op
Iteration  26: 12.401 s/op
Iteration  27: 12.420 s/op
Iteration  28: 12.468 s/op
Iteration  29: 12.410 s/op
Iteration  30: 12.385 s/op
Iteration  31: 12.433 s/op
Iteration  32: 12.431 s/op
Iteration  33: 12.452 s/op
Iteration  34: 12.426 s/op
Iteration  35: 12.480 s/op
Iteration  36: 12.471 s/op
Iteration  37: 12.432 s/op
Iteration  38: 12.394 s/op
Iteration  39: 12.470 s/op
Iteration  40: 12.483 s/op
Iteration  41: 12.429 s/op
Iteration  42: 12.448 s/op
Iteration  43: 12.434 s/op
Iteration  44: 12.472 s/op
Iteration  45: 12.419 s/op
Iteration  46: 12.394 s/op
Iteration  47: 12.403 s/op
Iteration  48: 12.412 s/op
Iteration  49: 12.410 s/op
Iteration  50: 12.429 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.462 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [12.300, 12.400) = 3 
    [12.400, 12.500) = 43 
    [12.500, 12.600) = 2 
    [12.600, 12.700) = 1 
    [12.700, 12.800) = 0 
    [12.800, 12.900) = 0 
    [12.900, 13.000) = 0 
    [13.000, 13.100) = 0 
    [13.100, 13.200) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.385 s/op
     p(50.0000) =     12.437 s/op
     p(90.0000) =     12.498 s/op
     p(95.0000) =     12.593 s/op
     p(99.0000) =     13.227 s/op
     p(99.9000) =     13.227 s/op
     p(99.9900) =     13.227 s/op
     p(99.9990) =     13.227 s/op
     p(99.9999) =     13.227 s/op
    p(100.0000) =     13.227 s/op


# Run complete. Total time: 00:10:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.462 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot_12.0.2_1564873146133.json
{"wallclock_times": [624.0934217030001], "core_cycle_counts": [[144731344512], [740815064636], [472052801552], [659002879511]], "aperf_counts": [[142926672610], [740698077684], [471954343062], [658932557614]], "mperf_counts": [[143429576986], [740748197276], [472002302208], [658974402928]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 01:09:30: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 01:09:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 01:09:31: INFO] 271 executions left in scheduler queue
[2019-08-04 01:09:31: INFO] Executions until ETA known: 219
[2019-08-04 01:09:31: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 01:09:31: INFO] Estimated completion (next execution): 2019-08-04 01:22:25 (0:12:54 from now)
[2019-08-04 01:09:31: INFO] Reboot in preparation for next execution
[2019-08-04 01:18:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 01:18:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 01:18:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 01:18:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 01:18:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 01:24:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.554 s/op
Iteration   2: 8.566 s/op
Iteration   3: 8.800 s/op
Iteration   4: 7.820 s/op
Iteration   5: 8.415 s/op
Iteration   6: 8.411 s/op
Iteration   7: 8.382 s/op
Iteration   8: 8.390 s/op
Iteration   9: 8.375 s/op
Iteration  10: 8.367 s/op
Iteration  11: 7.440 s/op
Iteration  12: 8.367 s/op
Iteration  13: 7.842 s/op
Iteration  14: 8.397 s/op
Iteration  15: 8.362 s/op
Iteration  16: 8.395 s/op
Iteration  17: 8.357 s/op
Iteration  18: 8.365 s/op
Iteration  19: 8.315 s/op
Iteration  20: 8.362 s/op
Iteration  21: 8.344 s/op
Iteration  22: 8.376 s/op
Iteration  23: 8.391 s/op
Iteration  24: 8.391 s/op
Iteration  25: 8.428 s/op
Iteration  26: 8.442 s/op
Iteration  27: 8.388 s/op
Iteration  28: 8.435 s/op
Iteration  29: 8.409 s/op
Iteration  30: 8.349 s/op
Iteration  31: 8.397 s/op
Iteration  32: 8.381 s/op
Iteration  33: 8.366 s/op
Iteration  34: 8.351 s/op
Iteration  35: 8.162 s/op
Iteration  36: 8.394 s/op
Iteration  37: 8.354 s/op
Iteration  38: 8.416 s/op
Iteration  39: 8.184 s/op
Iteration  40: 8.407 s/op
Iteration  41: 8.399 s/op
Iteration  42: 8.385 s/op
Iteration  43: 8.336 s/op
Iteration  44: 7.939 s/op
Iteration  45: 8.344 s/op
Iteration  46: 8.410 s/op
Iteration  47: 8.351 s/op
Iteration  48: 8.342 s/op
Iteration  49: 8.337 s/op
Iteration  50: 8.005 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.330 ?(99.9%) 0.101 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 1 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 2 
    [7.875, 8.000) = 1 
    [8.000, 8.125) = 1 
    [8.125, 8.250) = 2 
    [8.250, 8.375) = 17 
    [8.375, 8.500) = 23 
    [8.500, 8.625) = 2 
    [8.625, 8.750) = 0 
    [8.750, 8.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.440 s/op
     p(50.0000) =      8.376 s/op
     p(90.0000) =      8.434 s/op
     p(95.0000) =      8.559 s/op
     p(99.0000) =      8.800 s/op
     p(99.9000) =      8.800 s/op
     p(99.9900) =      8.800 s/op
     p(99.9990) =      8.800 s/op
     p(99.9999) =      8.800 s/op
    p(100.0000) =      8.800 s/op


# Run complete. Total time: 00:06:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.330 ? 0.101   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot_12.0.2_1564874282350.json
{"wallclock_times": [417.586321999], "core_cycle_counts": [[241513517196], [266086904425], [331752061299], [361753978823]], "aperf_counts": [[240391074960], [266004561307], [331709077297], [361726228100]], "mperf_counts": [[273127196982], [298911827874], [374057029906], [409805756746]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 01:24:59: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 01:25:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 01:25:00: INFO] 270 executions left in scheduler queue
[2019-08-04 01:25:00: INFO] Executions until ETA known: 217
[2019-08-04 01:25:00: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 01:25:00: INFO] Estimated completion (next execution): 2019-08-04 01:34:28 (0:09:27 from now)
[2019-08-04 01:25:00: INFO] Reboot in preparation for next execution
[2019-08-04 01:32:03: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 01:32:03: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 01:32:03: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 01:32:03: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 01:32:03: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 01:46:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.672 s/op
Iteration   2: 18.219 s/op
Iteration   3: 18.139 s/op
Iteration   4: 18.477 s/op
Iteration   5: 17.829 s/op
Iteration   6: 17.728 s/op
Iteration   7: 17.667 s/op
Iteration   8: 17.796 s/op
Iteration   9: 17.731 s/op
Iteration  10: 17.767 s/op
Iteration  11: 17.753 s/op
Iteration  12: 17.803 s/op
Iteration  13: 17.663 s/op
Iteration  14: 17.640 s/op
Iteration  15: 17.647 s/op
Iteration  16: 17.663 s/op
Iteration  17: 17.665 s/op
Iteration  18: 17.662 s/op
Iteration  19: 17.788 s/op
Iteration  20: 17.717 s/op
Iteration  21: 17.677 s/op
Iteration  22: 17.730 s/op
Iteration  23: 17.678 s/op
Iteration  24: 17.686 s/op
Iteration  25: 17.650 s/op
Iteration  26: 17.644 s/op
Iteration  27: 17.666 s/op
Iteration  28: 17.664 s/op
Iteration  29: 17.767 s/op
Iteration  30: 17.625 s/op
Iteration  31: 17.660 s/op
Iteration  32: 17.653 s/op
Iteration  33: 17.657 s/op
Iteration  34: 17.741 s/op
Iteration  35: 17.694 s/op
Iteration  36: 17.718 s/op
Iteration  37: 17.621 s/op
Iteration  38: 17.774 s/op
Iteration  39: 17.664 s/op
Iteration  40: 17.660 s/op
Iteration  41: 17.944 s/op
Iteration  42: 17.669 s/op
Iteration  43: 17.656 s/op
Iteration  44: 17.659 s/op
Iteration  45: 17.635 s/op
Iteration  46: 17.685 s/op
Iteration  47: 17.684 s/op
Iteration  48: 17.839 s/op
Iteration  49: 17.737 s/op
Iteration  50: 17.701 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.737 ?(99.9%) 0.077 s/op

  Histogram, s/op:
    [17.600, 17.650) = 6 
    [17.650, 17.700) = 23 
    [17.700, 17.750) = 8 
    [17.750, 17.800) = 6 
    [17.800, 17.850) = 3 
    [17.850, 17.900) = 0 
    [17.900, 17.950) = 1 
    [17.950, 18.000) = 0 
    [18.000, 18.050) = 0 
    [18.050, 18.100) = 0 
    [18.100, 18.150) = 1 
    [18.150, 18.200) = 0 
    [18.200, 18.250) = 1 
    [18.250, 18.300) = 0 
    [18.300, 18.350) = 0 
    [18.350, 18.400) = 0 
    [18.400, 18.450) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.621 s/op
     p(50.0000) =     17.681 s/op
     p(90.0000) =     17.838 s/op
     p(95.0000) =     18.175 s/op
     p(99.0000) =     18.477 s/op
     p(99.9000) =     18.477 s/op
     p(99.9900) =     18.477 s/op
     p(99.9990) =     18.477 s/op
     p(99.9999) =     18.477 s/op
    p(100.0000) =     18.477 s/op


# Run complete. Total time: 00:14:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.737 ? 0.077   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot_12.0.2_1564875123124.json
{"wallclock_times": [887.8929597399999], "core_cycle_counts": [[429479085446], [581774259510], [1160631261029], [690279978497]], "aperf_counts": [[427024708819], [581644312152], [1160591361748], [690233382752]], "mperf_counts": [[427336352290], [581835794636], [1161267316804], [690355867902]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 01:46:51: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-04 01:46:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 01:46:51: INFO] 269 executions left in scheduler queue
[2019-08-04 01:46:51: INFO] Executions until ETA known: 209
[2019-08-04 01:46:51: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-04 01:46:51: INFO] Estimated completion (next execution): 2019-08-04 02:04:10 (0:17:18 from now)
[2019-08-04 01:46:51: INFO] Reboot in preparation for next execution
[2019-08-04 01:56:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.697 s/op
Iteration   2: 1.325 s/op
Iteration   3: 1.317 s/op
Iteration   4: 1.390 s/op
Iteration   5: 1.300 s/op
Iteration   6: 1.307 s/op
Iteration   7: 1.310 s/op
Iteration   8: 1.301 s/op
Iteration   9: 1.305 s/op
Iteration  10: 1.310 s/op
Iteration  11: 1.303 s/op
Iteration  12: 1.306 s/op
Iteration  13: 1.307 s/op
Iteration  14: 1.306 s/op
Iteration  15: 1.312 s/op
Iteration  16: 1.306 s/op
Iteration  17: 1.302 s/op
Iteration  18: 1.310 s/op
Iteration  19: 1.310 s/op
Iteration  20: 1.310 s/op
Iteration  21: 1.305 s/op
Iteration  22: 1.310 s/op
Iteration  23: 1.305 s/op
Iteration  24: 1.304 s/op
Iteration  25: 1.317 s/op
Iteration  26: 1.310 s/op
Iteration  27: 1.313 s/op
Iteration  28: 1.309 s/op
Iteration  29: 1.311 s/op
Iteration  30: 1.306 s/op
Iteration  31: 1.310 s/op
Iteration  32: 1.305 s/op
Iteration  33: 1.312 s/op
Iteration  34: 1.303 s/op
Iteration  35: 1.306 s/op
Iteration  36: 1.312 s/op
Iteration  37: 1.303 s/op
Iteration  38: 1.305 s/op
Iteration  39: 1.307 s/op
Iteration  40: 1.301 s/op
Iteration  41: 1.304 s/op
Iteration  42: 1.304 s/op
Iteration  43: 1.301 s/op
Iteration  44: 1.304 s/op
Iteration  45: 1.312 s/op
Iteration  46: 1.304 s/op
Iteration  47: 1.311 s/op
Iteration  48: 1.315 s/op
Iteration  49: 1.307 s/op
Iteration  50: 1.309 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.317 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.300, 1.325) = 47 
    [1.325, 1.350) = 1 
    [1.350, 1.375) = 0 
    [1.375, 1.400) = 1 
    [1.400, 1.425) = 0 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.300 s/op
     p(50.0000) =      1.307 s/op
     p(90.0000) =      1.317 s/op
     p(95.0000) =      1.354 s/op
     p(99.0000) =      1.697 s/op
     p(99.9000) =      1.697 s/op
     p(99.9900) =      1.697 s/op
     p(99.9990) =      1.697 s/op
     p(99.9999) =      1.697 s/op
    p(100.0000) =      1.697 s/op


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.317 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_graalvm-ee-19.1.1_1564876514281.json
{"wallclock_times": [66.79745273999998], "core_cycle_counts": [[72659219030], [55927365512], [75086098865], [20357820073]], "aperf_counts": [[72456855685], [55893788657], [75068429353], [20333312461]], "mperf_counts": [[72486474224], [55900924458], [75075375262], [20335400940]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 01:56:21: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-04 01:56:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 01:56:22: INFO] 268 executions left in scheduler queue
[2019-08-04 01:56:22: INFO] Executions until ETA known: 189
[2019-08-04 01:56:22: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-04 01:56:22: INFO] Estimated completion (next execution): 2019-08-04 01:59:59 (0:03:37 from now)
[2019-08-04 01:56:22: INFO] Reboot in preparation for next execution
[2019-08-04 02:04:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.630 s/op
Iteration   2: 1.287 s/op
Iteration   3: 1.355 s/op
Iteration   4: 1.233 s/op
Iteration   5: 1.235 s/op
Iteration   6: 1.273 s/op
Iteration   7: 1.233 s/op
Iteration   8: 1.234 s/op
Iteration   9: 1.235 s/op
Iteration  10: 1.251 s/op
Iteration  11: 1.266 s/op
Iteration  12: 1.241 s/op
Iteration  13: 1.255 s/op
Iteration  14: 1.237 s/op
Iteration  15: 1.236 s/op
Iteration  16: 1.236 s/op
Iteration  17: 1.322 s/op
Iteration  18: 1.237 s/op
Iteration  19: 1.239 s/op
Iteration  20: 1.245 s/op
Iteration  21: 1.246 s/op
Iteration  22: 1.262 s/op
Iteration  23: 1.246 s/op
Iteration  24: 1.237 s/op
Iteration  25: 1.242 s/op
Iteration  26: 1.243 s/op
Iteration  27: 1.238 s/op
Iteration  28: 1.236 s/op
Iteration  29: 1.237 s/op
Iteration  30: 1.262 s/op
Iteration  31: 1.237 s/op
Iteration  32: 1.240 s/op
Iteration  33: 1.252 s/op
Iteration  34: 1.297 s/op
Iteration  35: 1.236 s/op
Iteration  36: 1.315 s/op
Iteration  37: 1.240 s/op
Iteration  38: 1.241 s/op
Iteration  39: 1.237 s/op
Iteration  40: 1.237 s/op
Iteration  41: 1.242 s/op
Iteration  42: 1.247 s/op
Iteration  43: 1.298 s/op
Iteration  44: 1.239 s/op
Iteration  45: 1.240 s/op
Iteration  46: 1.234 s/op
Iteration  47: 1.236 s/op
Iteration  48: 1.239 s/op
Iteration  49: 1.237 s/op
Iteration  50: 1.244 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.258 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [1.200, 1.250) = 36 
    [1.250, 1.300) = 10 
    [1.300, 1.350) = 2 
    [1.350, 1.400) = 1 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.233 s/op
     p(50.0000) =      1.240 s/op
     p(90.0000) =      1.298 s/op
     p(95.0000) =      1.337 s/op
     p(99.0000) =      1.630 s/op
     p(99.9000) =      1.630 s/op
     p(99.9900) =      1.630 s/op
     p(99.9990) =      1.630 s/op
     p(99.9999) =      1.630 s/op
    p(100.0000) =      1.630 s/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.258 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_graalvm-ee-19.1.1_1564876996909.json
{"wallclock_times": [63.784342347000006], "core_cycle_counts": [[38738186177], [42653310035], [104288966032], [24131743760]], "aperf_counts": [[38573090443], [42631115882], [104279388488], [24115830245]], "mperf_counts": [[38596959776], [42650730962], [104280632136], [24121486534]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 02:04:20: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-04 02:04:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 02:04:21: INFO] 267 executions left in scheduler queue
[2019-08-04 02:04:21: INFO] Executions until ETA known: 158
[2019-08-04 02:04:21: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-08-04 02:04:21: INFO] Estimated completion (next execution): 2019-08-04 02:07:55 (0:03:34 from now)
[2019-08-04 02:04:21: INFO] Reboot in preparation for next execution
[2019-08-04 02:15:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.337 s/op
Iteration   2: 4.827 s/op
Iteration   3: 4.994 s/op
Iteration   4: 4.919 s/op
Iteration   5: 4.925 s/op
Iteration   6: 4.911 s/op
Iteration   7: 4.898 s/op
Iteration   8: 4.908 s/op
Iteration   9: 4.929 s/op
Iteration  10: 4.871 s/op
Iteration  11: 4.920 s/op
Iteration  12: 4.911 s/op
Iteration  13: 4.912 s/op
Iteration  14: 4.925 s/op
Iteration  15: 4.898 s/op
Iteration  16: 4.880 s/op
Iteration  17: 4.912 s/op
Iteration  18: 4.919 s/op
Iteration  19: 4.898 s/op
Iteration  20: 4.905 s/op
Iteration  21: 4.910 s/op
Iteration  22: 4.904 s/op
Iteration  23: 4.907 s/op
Iteration  24: 4.913 s/op
Iteration  25: 4.913 s/op
Iteration  26: 4.907 s/op
Iteration  27: 4.896 s/op
Iteration  28: 4.880 s/op
Iteration  29: 4.852 s/op
Iteration  30: 4.923 s/op
Iteration  31: 4.912 s/op
Iteration  32: 4.920 s/op
Iteration  33: 4.917 s/op
Iteration  34: 4.899 s/op
Iteration  35: 4.911 s/op
Iteration  36: 4.932 s/op
Iteration  37: 4.887 s/op
Iteration  38: 4.923 s/op
Iteration  39: 4.926 s/op
Iteration  40: 4.896 s/op
Iteration  41: 4.896 s/op
Iteration  42: 4.909 s/op
Iteration  43: 4.895 s/op
Iteration  44: 4.929 s/op
Iteration  45: 4.931 s/op
Iteration  46: 4.898 s/op
Iteration  47: 4.925 s/op
Iteration  48: 4.903 s/op
Iteration  49: 4.931 s/op
Iteration  50: 4.887 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      4.917 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [4.800, 4.850) = 1 
    [4.850, 4.900) = 15 
    [4.900, 4.950) = 32 
    [4.950, 5.000) = 1 
    [5.000, 5.050) = 0 
    [5.050, 5.100) = 0 
    [5.100, 5.150) = 0 
    [5.150, 5.200) = 0 
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 0 
    [5.300, 5.350) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.827 s/op
     p(50.0000) =      4.911 s/op
     p(90.0000) =      4.931 s/op
     p(95.0000) =      4.960 s/op
     p(99.0000) =      5.337 s/op
     p(99.9000) =      5.337 s/op
     p(99.9900) =      5.337 s/op
     p(99.9990) =      5.337 s/op
     p(99.9999) =      5.337 s/op
    p(100.0000) =      5.337 s/op


# Run complete. Total time: 00:04:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  4.917 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_graalvm-ee-19.1.1_1564877478307.json
{"wallclock_times": [246.720433609], "core_cycle_counts": [[162873007925], [250742037519], [153123763472], [231560411460]], "aperf_counts": [[162237366447], [250682137834], [153082642360], [231525255813]], "mperf_counts": [[162264632250], [250682488560], [153084999794], [231533744372]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 02:15:25: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-08-04 02:15:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 02:15:25: INFO] 266 executions left in scheduler queue
[2019-08-04 02:15:25: INFO] Executions until ETA known: 147
[2019-08-04 02:15:25: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-08-04 02:15:25: INFO] Estimated completion (next execution): 2019-08-04 02:22:02 (0:06:36 from now)
[2019-08-04 02:15:25: INFO] Reboot in preparation for next execution
[2019-08-04 02:23:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.950 s/op
Iteration   2: 2.672 s/op
Iteration   3: 2.705 s/op
Iteration   4: 2.636 s/op
Iteration   5: 2.633 s/op
Iteration   6: 2.630 s/op
Iteration   7: 2.628 s/op
Iteration   8: 2.633 s/op
Iteration   9: 2.619 s/op
Iteration  10: 2.628 s/op
Iteration  11: 2.632 s/op
Iteration  12: 2.629 s/op
Iteration  13: 2.620 s/op
Iteration  14: 2.615 s/op
Iteration  15: 2.631 s/op
Iteration  16: 2.644 s/op
Iteration  17: 2.644 s/op
Iteration  18: 2.618 s/op
Iteration  19: 2.634 s/op
Iteration  20: 2.640 s/op
Iteration  21: 2.632 s/op
Iteration  22: 2.635 s/op
Iteration  23: 2.636 s/op
Iteration  24: 2.633 s/op
Iteration  25: 2.629 s/op
Iteration  26: 2.640 s/op
Iteration  27: 2.626 s/op
Iteration  28: 2.630 s/op
Iteration  29: 2.634 s/op
Iteration  30: 2.627 s/op
Iteration  31: 2.642 s/op
Iteration  32: 2.626 s/op
Iteration  33: 2.635 s/op
Iteration  34: 2.624 s/op
Iteration  35: 2.600 s/op
Iteration  36: 2.626 s/op
Iteration  37: 2.630 s/op
Iteration  38: 2.626 s/op
Iteration  39: 2.630 s/op
Iteration  40: 2.633 s/op
Iteration  41: 2.638 s/op
Iteration  42: 2.628 s/op
Iteration  43: 2.630 s/op
Iteration  44: 2.633 s/op
Iteration  45: 2.627 s/op
Iteration  46: 2.624 s/op
Iteration  47: 2.634 s/op
Iteration  48: 2.644 s/op
Iteration  49: 2.621 s/op
Iteration  50: 2.640 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      2.639 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 46 
    [2.650, 2.700) = 1 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.600 s/op
     p(50.0000) =      2.631 s/op
     p(90.0000) =      2.644 s/op
     p(95.0000) =      2.687 s/op
     p(99.0000) =      2.950 s/op
     p(99.9000) =      2.950 s/op
     p(99.9900) =      2.950 s/op
     p(99.9990) =      2.950 s/op
     p(99.9999) =      2.950 s/op
    p(100.0000) =      2.950 s/op


# Run complete. Total time: 00:02:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.639 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_graalvm-ee-19.1.1_1564878083888.json
{"wallclock_times": [132.843673324], "core_cycle_counts": [[75176651997], [103114238440], [139790307423], [114355895438]], "aperf_counts": [[74814284887], [103080391409], [139760429750], [114333080576]], "mperf_counts": [[74845876492], [103083845306], [139761530756], [114342954852]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 02:23:36: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-08-04 02:23:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 02:23:37: INFO] 265 executions left in scheduler queue
[2019-08-04 02:23:37: INFO] Executions until ETA known: 104
[2019-08-04 02:23:37: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-08-04 02:23:37: INFO] Estimated completion (next execution): 2019-08-04 02:28:20 (0:04:43 from now)
[2019-08-04 02:23:37: INFO] Reboot in preparation for next execution
[2019-08-04 02:30:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 02:30:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 02:30:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 02:30:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 02:30:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 02:41:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.856 s/op
Iteration   2: 13.622 s/op
Iteration   3: 13.510 s/op
Iteration   4: 13.511 s/op
Iteration   5: 13.535 s/op
Iteration   6: 13.582 s/op
Iteration   7: 13.456 s/op
Iteration   8: 13.360 s/op
Iteration   9: 13.352 s/op
Iteration  10: 13.376 s/op
Iteration  11: 13.383 s/op
Iteration  12: 13.363 s/op
Iteration  13: 13.382 s/op
Iteration  14: 13.454 s/op
Iteration  15: 13.385 s/op
Iteration  16: 13.404 s/op
Iteration  17: 13.439 s/op
Iteration  18: 13.408 s/op
Iteration  19: 13.513 s/op
Iteration  20: 13.450 s/op
Iteration  21: 13.512 s/op
Iteration  22: 13.505 s/op
Iteration  23: 13.459 s/op
Iteration  24: 13.493 s/op
Iteration  25: 13.384 s/op
Iteration  26: 13.499 s/op
Iteration  27: 13.403 s/op
Iteration  28: 13.481 s/op
Iteration  29: 13.405 s/op
Iteration  30: 13.422 s/op
Iteration  31: 13.479 s/op
Iteration  32: 13.444 s/op
Iteration  33: 13.543 s/op
Iteration  34: 13.484 s/op
Iteration  35: 13.469 s/op
Iteration  36: 13.416 s/op
Iteration  37: 13.419 s/op
Iteration  38: 13.510 s/op
Iteration  39: 13.391 s/op
Iteration  40: 13.490 s/op
Iteration  41: 13.598 s/op
Iteration  42: 13.459 s/op
Iteration  43: 13.429 s/op
Iteration  44: 13.469 s/op
Iteration  45: 13.520 s/op
Iteration  46: 13.473 s/op
Iteration  47: 13.414 s/op
Iteration  48: 13.391 s/op
Iteration  49: 13.493 s/op
Iteration  50: 13.411 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.464 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [13.300, 13.350) = 0 
    [13.350, 13.400) = 10 
    [13.400, 13.450) = 13 
    [13.450, 13.500) = 14 
    [13.500, 13.550) = 9 
    [13.550, 13.600) = 2 
    [13.600, 13.650) = 1 
    [13.650, 13.700) = 0 
    [13.700, 13.750) = 0 
    [13.750, 13.800) = 0 
    [13.800, 13.850) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.352 s/op
     p(50.0000) =     13.458 s/op
     p(90.0000) =     13.542 s/op
     p(95.0000) =     13.609 s/op
     p(99.0000) =     13.856 s/op
     p(99.9000) =     13.856 s/op
     p(99.9900) =     13.856 s/op
     p(99.9990) =     13.856 s/op
     p(99.9999) =     13.856 s/op
    p(100.0000) =     13.856 s/op


# Run complete. Total time: 00:11:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.464 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot_12.0.2_1564878618386.json
{"wallclock_times": [674.2770539], "core_cycle_counts": [[285706117731], [485323924468], [900557721154], [696294454691]], "aperf_counts": [[283455858422], [485065732215], [900179368454], [696002304539]], "mperf_counts": [[289138479324], [496957878546], [924205371296], [713503837042]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 02:41:32: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-08-04 02:41:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 02:41:33: INFO] 264 executions left in scheduler queue
[2019-08-04 02:41:33: INFO] Executions until ETA known: 77
[2019-08-04 02:41:33: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 02:41:33: INFO] Estimated completion (next execution): 2019-08-04 02:55:18 (0:13:44 from now)
[2019-08-04 02:41:33: INFO] Reboot in preparation for next execution
[2019-08-04 02:47:19: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 02:47:19: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 02:47:19: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 02:47:19: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 02:47:19: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 02:47:19: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 02:54:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.776 s/op
Iteration   2: 8.182 s/op
Iteration   3: 8.003 s/op
Iteration   4: 8.271 s/op
Iteration   5: 8.171 s/op
Iteration   6: 8.173 s/op
Iteration   7: 8.138 s/op
Iteration   8: 8.187 s/op
Iteration   9: 8.109 s/op
Iteration  10: 8.145 s/op
Iteration  11: 8.156 s/op
Iteration  12: 8.116 s/op
Iteration  13: 8.155 s/op
Iteration  14: 8.161 s/op
Iteration  15: 8.123 s/op
Iteration  16: 8.113 s/op
Iteration  17: 8.136 s/op
Iteration  18: 8.105 s/op
Iteration  19: 8.144 s/op
Iteration  20: 8.156 s/op
Iteration  21: 8.060 s/op
Iteration  22: 8.140 s/op
Iteration  23: 8.171 s/op
Iteration  24: 8.114 s/op
Iteration  25: 8.127 s/op
Iteration  26: 8.101 s/op
Iteration  27: 8.119 s/op
Iteration  28: 8.129 s/op
Iteration  29: 8.170 s/op
Iteration  30: 8.115 s/op
Iteration  31: 8.115 s/op
Iteration  32: 8.117 s/op
Iteration  33: 8.112 s/op
Iteration  34: 8.110 s/op
Iteration  35: 8.137 s/op
Iteration  36: 8.102 s/op
Iteration  37: 8.153 s/op
Iteration  38: 8.137 s/op
Iteration  39: 8.081 s/op
Iteration  40: 8.127 s/op
Iteration  41: 8.136 s/op
Iteration  42: 8.086 s/op
Iteration  43: 8.072 s/op
Iteration  44: 8.054 s/op
Iteration  45: 8.123 s/op
Iteration  46: 8.161 s/op
Iteration  47: 8.088 s/op
Iteration  48: 8.079 s/op
Iteration  49: 8.112 s/op
Iteration  50: 8.108 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.160 ?(99.9%) 0.117 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 25 
    [ 8.125,  8.250) = 23 
    [ 8.250,  8.375) = 1 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 0 
    [ 8.625,  8.750) = 0 
    [ 8.750,  8.875) = 0 
    [ 8.875,  9.000) = 0 
    [ 9.000,  9.125) = 0 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 0 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.003 s/op
     p(50.0000) =      8.125 s/op
     p(90.0000) =      8.173 s/op
     p(95.0000) =      8.224 s/op
     p(99.0000) =      9.776 s/op
     p(99.9000) =      9.776 s/op
     p(99.9900) =      9.776 s/op
     p(99.9990) =      9.776 s/op
     p(99.9999) =      9.776 s/op
    p(100.0000) =      9.776 s/op


# Run complete. Total time: 00:06:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  8.160 ? 0.117   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9_12.0.1_1564879639537.json
{"wallclock_times": [409.548598694], "core_cycle_counts": [[336598344638], [268238757033], [429085331964], [315954373523]], "aperf_counts": [[335552177758], [268146722511], [428965711789], [315880250617]], "mperf_counts": [[335557091890], [268146758796], [428965721134], [315881042036]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 02:54:09: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 02:54:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 02:54:10: INFO] 263 executions left in scheduler queue
[2019-08-04 02:54:10: INFO] Executions until ETA known: 71
[2019-08-04 02:54:10: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 02:54:10: INFO] Estimated completion (next execution): 2019-08-04 03:03:30 (0:09:20 from now)
[2019-08-04 02:54:10: INFO] Reboot in preparation for next execution
[2019-08-04 02:59:09: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 02:59:09: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 02:59:09: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 02:59:09: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 02:59:09: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 02:59:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 03:16:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 21.341 s/op
Iteration   2: 20.726 s/op
Iteration   3: 20.792 s/op
Iteration   4: 20.900 s/op
Iteration   5: 20.772 s/op
Iteration   6: 20.858 s/op
Iteration   7: 20.886 s/op
Iteration   8: 20.778 s/op
Iteration   9: 20.708 s/op
Iteration  10: 20.826 s/op
Iteration  11: 20.683 s/op
Iteration  12: 20.790 s/op
Iteration  13: 20.707 s/op
Iteration  14: 20.698 s/op
Iteration  15: 20.685 s/op
Iteration  16: 20.787 s/op
Iteration  17: 20.653 s/op
Iteration  18: 20.676 s/op
Iteration  19: 20.711 s/op
Iteration  20: 20.808 s/op
Iteration  21: 20.670 s/op
Iteration  22: 20.678 s/op
Iteration  23: 20.696 s/op
Iteration  24: 20.742 s/op
Iteration  25: 20.628 s/op
Iteration  26: 20.712 s/op
Iteration  27: 20.855 s/op
Iteration  28: 20.627 s/op
Iteration  29: 20.773 s/op
Iteration  30: 20.790 s/op
Iteration  31: 20.545 s/op
Iteration  32: 20.703 s/op
Iteration  33: 20.781 s/op
Iteration  34: 20.678 s/op
Iteration  35: 20.605 s/op
Iteration  36: 20.446 s/op
Iteration  37: 20.575 s/op
Iteration  38: 20.503 s/op
Iteration  39: 20.397 s/op
Iteration  40: 20.459 s/op
Iteration  41: 20.395 s/op
Iteration  42: 20.519 s/op
Iteration  43: 20.621 s/op
Iteration  44: 20.291 s/op
Iteration  45: 20.428 s/op
Iteration  46: 20.402 s/op
Iteration  47: 20.294 s/op
Iteration  48: 20.521 s/op
Iteration  49: 20.515 s/op
Iteration  50: 20.435 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     20.661 ?(99.9%) 0.090 s/op

  Histogram, s/op:
    [20.000, 20.125) = 0 
    [20.125, 20.250) = 0 
    [20.250, 20.375) = 2 
    [20.375, 20.500) = 7 
    [20.500, 20.625) = 8 
    [20.625, 20.750) = 18 
    [20.750, 20.875) = 12 
    [20.875, 21.000) = 2 
    [21.000, 21.125) = 0 
    [21.125, 21.250) = 0 
    [21.250, 21.375) = 1 
    [21.375, 21.500) = 0 
    [21.500, 21.625) = 0 
    [21.625, 21.750) = 0 
    [21.750, 21.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     20.291 s/op
     p(50.0000) =     20.684 s/op
     p(90.0000) =     20.852 s/op
     p(95.0000) =     20.893 s/op
     p(99.0000) =     21.341 s/op
     p(99.9000) =     21.341 s/op
     p(99.9900) =     21.341 s/op
     p(99.9990) =     21.341 s/op
     p(99.9999) =     21.341 s/op
    p(100.0000) =     21.341 s/op


# Run complete. Total time: 00:17:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  20.661 ? 0.090   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9_12.0.1_1564880349041.json
{"wallclock_times": [1034.775071898], "core_cycle_counts": [[747647957488], [592826185068], [1049435567228], [964882510852]], "aperf_counts": [[744927561697], [592645413976], [1049269544358], [964716711664]], "mperf_counts": [[744938349872], [592645752356], [1049276218294], [964716670922]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 03:16:23: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 03:16:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 03:16:24: INFO] 262 executions left in scheduler queue
[2019-08-04 03:16:24: INFO] Executions until ETA known: 69
[2019-08-04 03:16:24: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 03:16:24: INFO] Estimated completion (next execution): 2019-08-04 03:36:10 (0:19:45 from now)
[2019-08-04 03:16:24: INFO] Reboot in preparation for next execution
[2019-08-04 03:21:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 03:21:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 03:21:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 03:21:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 03:21:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 03:21:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 03:25:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.175 s/op
Iteration   2: 5.368 s/op
Iteration   3: 4.872 s/op
Iteration   4: 4.788 s/op
Iteration   5: 4.797 s/op
Iteration   6: 5.163 s/op
Iteration   7: 4.666 s/op
Iteration   8: 4.466 s/op
Iteration   9: 4.436 s/op
Iteration  10: 4.483 s/op
Iteration  11: 4.399 s/op
Iteration  12: 4.409 s/op
Iteration  13: 4.461 s/op
Iteration  14: 4.469 s/op
Iteration  15: 4.487 s/op
Iteration  16: 4.402 s/op
Iteration  17: 4.406 s/op
Iteration  18: 4.397 s/op
Iteration  19: 4.413 s/op
Iteration  20: 4.391 s/op
Iteration  21: 4.372 s/op
Iteration  22: 4.386 s/op
Iteration  23: 4.392 s/op
Iteration  24: 4.384 s/op
Iteration  25: 4.366 s/op
Iteration  26: 4.442 s/op
Iteration  27: 4.362 s/op
Iteration  28: 4.327 s/op
Iteration  29: 4.372 s/op
Iteration  30: 4.386 s/op
Iteration  31: 4.389 s/op
Iteration  32: 4.393 s/op
Iteration  33: 4.396 s/op
Iteration  34: 4.359 s/op
Iteration  35: 4.385 s/op
Iteration  36: 4.368 s/op
Iteration  37: 4.361 s/op
Iteration  38: 4.364 s/op
Iteration  39: 4.413 s/op
Iteration  40: 4.357 s/op
Iteration  41: 4.347 s/op
Iteration  42: 4.418 s/op
Iteration  43: 4.363 s/op
Iteration  44: 4.390 s/op
Iteration  45: 4.373 s/op
Iteration  46: 4.403 s/op
Iteration  47: 4.397 s/op
Iteration  48: 4.401 s/op
Iteration  49: 4.391 s/op
Iteration  50: 4.340 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.497 ?(99.9%) 0.156 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 43 
    [4.500, 4.750) = 1 
    [4.750, 5.000) = 3 
    [5.000, 5.250) = 1 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.327 s/op
     p(50.0000) =      4.396 s/op
     p(90.0000) =      4.796 s/op
     p(95.0000) =      5.256 s/op
     p(99.0000) =      6.175 s/op
     p(99.9000) =      6.175 s/op
     p(99.9900) =      6.175 s/op
     p(99.9990) =      6.175 s/op
     p(99.9999) =      6.175 s/op
    p(100.0000) =      6.175 s/op


# Run complete. Total time: 00:03:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.497 ? 0.156   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9_12.0.1_1564881680793.json
{"wallclock_times": [226.81410157599998], "core_cycle_counts": [[218725335987], [196293450319], [260621885634], [181539835233]], "aperf_counts": [[218081494927], [196217404874], [260521688252], [181428384516]], "mperf_counts": [[218095621054], [196217540544], [260522145840], [181428498242]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 03:25:07: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 03:25:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 03:25:08: INFO] 261 executions left in scheduler queue
[2019-08-04 03:25:08: INFO] Executions until ETA known: 63
[2019-08-04 03:25:08: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 03:25:08: INFO] Estimated completion (next execution): 2019-08-04 03:31:25 (0:06:17 from now)
[2019-08-04 03:25:08: INFO] Reboot in preparation for next execution
[2019-08-04 03:30:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 03:30:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 03:30:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 03:30:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 03:30:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 03:30:36: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 03:34:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.574 s/op
Iteration   2: 5.330 s/op
Iteration   3: 5.029 s/op
Iteration   4: 5.192 s/op
Iteration   5: 5.916 s/op
Iteration   6: 5.211 s/op
Iteration   7: 5.208 s/op
Iteration   8: 5.317 s/op
Iteration   9: 5.315 s/op
Iteration  10: 5.191 s/op
Iteration  11: 5.262 s/op
Iteration  12: 5.150 s/op
Iteration  13: 5.013 s/op
Iteration  14: 5.119 s/op
Iteration  15: 5.164 s/op
Iteration  16: 5.201 s/op
Iteration  17: 5.076 s/op
Iteration  18: 5.082 s/op
Iteration  19: 5.197 s/op
Iteration  20: 5.172 s/op
Iteration  21: 5.211 s/op
Iteration  22: 5.076 s/op
Iteration  23: 5.021 s/op
Iteration  24: 5.122 s/op
Iteration  25: 5.002 s/op
Iteration  26: 5.167 s/op
Iteration  27: 5.091 s/op
Iteration  28: 5.029 s/op
Iteration  29: 5.151 s/op
Iteration  30: 5.060 s/op
Iteration  31: 5.202 s/op
Iteration  32: 5.096 s/op
Iteration  33: 5.075 s/op
Iteration  34: 5.216 s/op
Iteration  35: 5.085 s/op
Iteration  36: 5.182 s/op
Iteration  37: 5.092 s/op
Iteration  38: 5.048 s/op
Iteration  39: 5.188 s/op
Iteration  40: 5.026 s/op
Iteration  41: 5.033 s/op
Iteration  42: 5.163 s/op
Iteration  43: 5.067 s/op
Iteration  44: 5.147 s/op
Iteration  45: 5.157 s/op
Iteration  46: 5.047 s/op
Iteration  47: 5.200 s/op
Iteration  48: 5.063 s/op
Iteration  49: 5.190 s/op
Iteration  50: 5.154 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.182 ?(99.9%) 0.120 s/op

  Histogram, s/op:
    [5.000, 5.125) = 22 
    [5.125, 5.250) = 22 
    [5.250, 5.375) = 4 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 1 
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.002 s/op
     p(50.0000) =      5.153 s/op
     p(90.0000) =      5.309 s/op
     p(95.0000) =      5.594 s/op
     p(99.0000) =      6.574 s/op
     p(99.9000) =      6.574 s/op
     p(99.9900) =      6.574 s/op
     p(99.9990) =      6.574 s/op
     p(99.9999) =      6.574 s/op
    p(100.0000) =      6.574 s/op


# Run complete. Total time: 00:04:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.182 ? 0.120   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9_12.0.1_1564882236290.json
{"wallclock_times": [260.93083921600004], "core_cycle_counts": [[266359446020], [245364897578], [243859557291], [203749361668]], "aperf_counts": [[265705530933], [245207694660], [243753831434], [203683033936]], "mperf_counts": [[265718963902], [245208021444], [243754142154], [203683150292]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 03:34:57: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-04 03:34:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 03:34:58: INFO] 260 executions left in scheduler queue
[2019-08-04 03:34:58: INFO] Executions until ETA known: 52
[2019-08-04 03:34:58: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 03:34:58: INFO] Estimated completion (next execution): 2019-08-04 03:41:49 (0:06:51 from now)
[2019-08-04 03:34:58: INFO] Reboot in preparation for next execution
[2019-08-04 03:43:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.127 s/op
Iteration   2: 4.593 s/op
Iteration   3: 4.496 s/op
Iteration   4: 4.552 s/op
Iteration   5: 4.536 s/op
Iteration   6: 4.526 s/op
Iteration   7: 4.519 s/op
Iteration   8: 4.542 s/op
Iteration   9: 4.535 s/op
Iteration  10: 4.537 s/op
Iteration  11: 4.535 s/op
Iteration  12: 4.523 s/op
Iteration  13: 4.521 s/op
Iteration  14: 4.534 s/op
Iteration  15: 4.530 s/op
Iteration  16: 4.480 s/op
Iteration  17: 4.525 s/op
Iteration  18: 4.519 s/op
Iteration  19: 4.530 s/op
Iteration  20: 4.517 s/op
Iteration  21: 4.536 s/op
Iteration  22: 4.522 s/op
Iteration  23: 4.545 s/op
Iteration  24: 4.537 s/op
Iteration  25: 4.475 s/op
Iteration  26: 4.532 s/op
Iteration  27: 4.534 s/op
Iteration  28: 4.529 s/op
Iteration  29: 4.536 s/op
Iteration  30: 4.547 s/op
Iteration  31: 4.529 s/op
Iteration  32: 4.545 s/op
Iteration  33: 4.485 s/op
Iteration  34: 4.525 s/op
Iteration  35: 4.534 s/op
Iteration  36: 4.526 s/op
Iteration  37: 4.534 s/op
Iteration  38: 4.533 s/op
Iteration  39: 4.551 s/op
Iteration  40: 4.537 s/op
Iteration  41: 4.498 s/op
Iteration  42: 4.540 s/op
Iteration  43: 4.527 s/op
Iteration  44: 4.539 s/op
Iteration  45: 4.539 s/op
Iteration  46: 4.539 s/op
Iteration  47: 4.546 s/op
Iteration  48: 4.877 s/op
Iteration  49: 4.515 s/op
Iteration  50: 4.484 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.547 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [4.400, 4.450) = 0 
    [4.450, 4.500) = 6 
    [4.500, 4.550) = 39 
    [4.550, 4.600) = 3 
    [4.600, 4.650) = 0 
    [4.650, 4.700) = 0 
    [4.700, 4.750) = 0 
    [4.750, 4.800) = 0 
    [4.800, 4.850) = 0 
    [4.850, 4.900) = 1 
    [4.900, 4.950) = 0 
    [4.950, 5.000) = 0 
    [5.000, 5.050) = 0 
    [5.050, 5.100) = 0 
    [5.100, 5.150) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.475 s/op
     p(50.0000) =      4.534 s/op
     p(90.0000) =      4.551 s/op
     p(95.0000) =      4.721 s/op
     p(99.0000) =      5.127 s/op
     p(99.9000) =      5.127 s/op
     p(99.9900) =      5.127 s/op
     p(99.9990) =      5.127 s/op
     p(99.9999) =      5.127 s/op
    p(100.0000) =      5.127 s/op


# Run complete. Total time: 00:03:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.547 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_graalvm-ce-19.1.1_1564882772697.json
{"wallclock_times": [228.424873741], "core_cycle_counts": [[143126866543], [245324325134], [264592487156], [164593508413]], "aperf_counts": [[142457284205], [245261970905], [264549570322], [164544607423]], "mperf_counts": [[142477615476], [245262559864], [264550322388], [164550685150]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 03:43:21: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 03:43:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 03:43:22: INFO] 259 executions left in scheduler queue
[2019-08-04 03:43:22: INFO] Executions until ETA known: 33
[2019-08-04 03:43:22: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 03:43:22: INFO] Estimated completion (next execution): 2019-08-04 03:49:40 (0:06:18 from now)
[2019-08-04 03:43:22: INFO] Reboot in preparation for next execution
[2019-08-04 03:54:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.436 s/op
Iteration   2: 7.995 s/op
Iteration   3: 7.845 s/op
Iteration   4: 7.859 s/op
Iteration   5: 7.881 s/op
Iteration   6: 7.858 s/op
Iteration   7: 7.868 s/op
Iteration   8: 7.879 s/op
Iteration   9: 7.873 s/op
Iteration  10: 7.883 s/op
Iteration  11: 7.865 s/op
Iteration  12: 7.883 s/op
Iteration  13: 7.856 s/op
Iteration  14: 7.876 s/op
Iteration  15: 7.861 s/op
Iteration  16: 7.888 s/op
Iteration  17: 7.882 s/op
Iteration  18: 7.853 s/op
Iteration  19: 7.882 s/op
Iteration  20: 7.866 s/op
Iteration  21: 7.863 s/op
Iteration  22: 7.868 s/op
Iteration  23: 7.879 s/op
Iteration  24: 7.884 s/op
Iteration  25: 7.851 s/op
Iteration  26: 7.892 s/op
Iteration  27: 7.873 s/op
Iteration  28: 7.880 s/op
Iteration  29: 7.872 s/op
Iteration  30: 7.866 s/op
Iteration  31: 7.866 s/op
Iteration  32: 7.881 s/op
Iteration  33: 7.872 s/op
Iteration  34: 7.861 s/op
Iteration  35: 7.839 s/op
Iteration  36: 7.889 s/op
Iteration  37: 7.870 s/op
Iteration  38: 7.854 s/op
Iteration  39: 7.868 s/op
Iteration  40: 7.868 s/op
Iteration  41: 7.864 s/op
Iteration  42: 7.869 s/op
Iteration  43: 7.848 s/op
Iteration  44: 7.870 s/op
Iteration  45: 7.879 s/op
Iteration  46: 7.871 s/op
Iteration  47: 7.874 s/op
Iteration  48: 7.879 s/op
Iteration  49: 7.886 s/op
Iteration  50: 7.860 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.864 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [7.400, 7.450) = 1 
    [7.450, 7.500) = 0 
    [7.500, 7.550) = 0 
    [7.550, 7.600) = 0 
    [7.600, 7.650) = 0 
    [7.650, 7.700) = 0 
    [7.700, 7.750) = 0 
    [7.750, 7.800) = 0 
    [7.800, 7.850) = 3 
    [7.850, 7.900) = 45 
    [7.900, 7.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.436 s/op
     p(50.0000) =      7.870 s/op
     p(90.0000) =      7.886 s/op
     p(95.0000) =      7.891 s/op
     p(99.0000) =      7.995 s/op
     p(99.9000) =      7.995 s/op
     p(99.9900) =      7.995 s/op
     p(99.9990) =      7.995 s/op
     p(99.9999) =      7.995 s/op
    p(100.0000) =      7.995 s/op


# Run complete. Total time: 00:06:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.864 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_graalvm-ce-19.1.1_1564883288263.json
{"wallclock_times": [394.088718996], "core_cycle_counts": [[222289792817], [389365797102], [411731305583], [248002914201]], "aperf_counts": [[221307621883], [389301496022], [411703614965], [247974409625]], "mperf_counts": [[221317959062], [389316203340], [411708501212], [247983085756]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 03:54:42: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 03:54:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 03:54:43: INFO] 258 executions left in scheduler queue
[2019-08-04 03:54:43: INFO] Executions until ETA known: 27
[2019-08-04 03:54:43: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 03:54:43: INFO] Estimated completion (next execution): 2019-08-04 04:03:47 (0:09:04 from now)
[2019-08-04 03:54:43: INFO] Reboot in preparation for next execution
[2019-08-04 04:04:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.892 s/op
Iteration   2: 4.598 s/op
Iteration   3: 4.680 s/op
Iteration   4: 4.542 s/op
Iteration   5: 4.618 s/op
Iteration   6: 4.471 s/op
Iteration   7: 4.454 s/op
Iteration   8: 4.467 s/op
Iteration   9: 4.467 s/op
Iteration  10: 4.621 s/op
Iteration  11: 4.469 s/op
Iteration  12: 4.508 s/op
Iteration  13: 4.492 s/op
Iteration  14: 4.561 s/op
Iteration  15: 4.625 s/op
Iteration  16: 4.460 s/op
Iteration  17: 4.530 s/op
Iteration  18: 4.783 s/op
Iteration  19: 4.483 s/op
Iteration  20: 4.429 s/op
Iteration  21: 4.542 s/op
Iteration  22: 4.520 s/op
Iteration  23: 4.432 s/op
Iteration  24: 4.446 s/op
Iteration  25: 4.443 s/op
Iteration  26: 4.433 s/op
Iteration  27: 4.442 s/op
Iteration  28: 4.440 s/op
Iteration  29: 4.447 s/op
Iteration  30: 4.463 s/op
Iteration  31: 4.434 s/op
Iteration  32: 4.458 s/op
Iteration  33: 4.617 s/op
Iteration  34: 4.471 s/op
Iteration  35: 4.435 s/op
Iteration  36: 4.514 s/op
Iteration  37: 4.484 s/op
Iteration  38: 4.451 s/op
Iteration  39: 4.571 s/op
Iteration  40: 4.445 s/op
Iteration  41: 4.444 s/op
Iteration  42: 4.452 s/op
Iteration  43: 4.436 s/op
Iteration  44: 4.468 s/op
Iteration  45: 4.651 s/op
Iteration  46: 4.583 s/op
Iteration  47: 4.457 s/op
Iteration  48: 4.511 s/op
Iteration  49: 4.445 s/op
Iteration  50: 4.441 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.511 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [4.400, 4.450) = 15 
    [4.450, 4.500) = 16 
    [4.500, 4.550) = 7 
    [4.550, 4.600) = 4 
    [4.600, 4.650) = 4 
    [4.650, 4.700) = 2 
    [4.700, 4.750) = 0 
    [4.750, 4.800) = 1 
    [4.800, 4.850) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.429 s/op
     p(50.0000) =      4.469 s/op
     p(90.0000) =      4.624 s/op
     p(95.0000) =      4.727 s/op
     p(99.0000) =      4.892 s/op
     p(99.9000) =      4.892 s/op
     p(99.9900) =      4.892 s/op
     p(99.9990) =      4.892 s/op
     p(99.9999) =      4.892 s/op
    p(100.0000) =      4.892 s/op


# Run complete. Total time: 00:03:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.511 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_graalvm-ce-19.1.1_1564884055482.json
{"wallclock_times": [226.499158576], "core_cycle_counts": [[188063538677], [105747466714], [140674785048], [304834863588]], "aperf_counts": [[187537480043], [105691199433], [140649690218], [304816752600]], "mperf_counts": [[187554933200], [105691430548], [140650769846], [304824146216]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 04:04:41: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 04:04:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-04 04:04:42: INFO] 257 executions left in scheduler queue
[2019-08-04 04:04:42: INFO] Executions until ETA known: 25
[2019-08-04 04:04:42: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 04:04:42: INFO] Estimated completion (next execution): 2019-08-04 04:10:59 (0:06:16 from now)
[2019-08-04 04:04:42: INFO] Reboot in preparation for next execution
[2019-08-04 04:19:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.432 s/op
Iteration   2: 11.275 s/op
Iteration   3: 11.126 s/op
Iteration   4: 11.089 s/op
Iteration   5: 11.091 s/op
Iteration   6: 11.094 s/op
Iteration   7: 11.121 s/op
Iteration   8: 11.104 s/op
Iteration   9: 11.088 s/op
Iteration  10: 11.116 s/op
Iteration  11: 11.126 s/op
Iteration  12: 11.076 s/op
Iteration  13: 11.109 s/op
Iteration  14: 11.123 s/op
Iteration  15: 11.078 s/op
Iteration  16: 11.098 s/op
Iteration  17: 11.072 s/op
Iteration  18: 11.117 s/op
Iteration  19: 11.083 s/op
Iteration  20: 11.099 s/op
Iteration  21: 11.099 s/op
Iteration  22: 11.150 s/op
Iteration  23: 11.107 s/op
Iteration  24: 11.112 s/op
Iteration  25: 11.111 s/op
Iteration  26: 11.090 s/op
Iteration  27: 11.086 s/op
Iteration  28: 11.094 s/op
Iteration  29: 11.113 s/op
Iteration  30: 11.111 s/op
Iteration  31: 11.164 s/op
Iteration  32: 11.104 s/op
Iteration  33: 11.090 s/op
Iteration  34: 11.063 s/op
Iteration  35: 11.115 s/op
Iteration  36: 11.145 s/op
Iteration  37: 11.089 s/op
Iteration  38: 11.065 s/op
Iteration  39: 11.053 s/op
Iteration  40: 11.115 s/op
Iteration  41: 11.088 s/op
Iteration  42: 11.089 s/op
Iteration  43: 11.071 s/op
Iteration  44: 11.076 s/op
Iteration  45: 11.151 s/op
Iteration  46: 11.426 s/op
Iteration  47: 11.084 s/op
Iteration  48: 11.088 s/op
Iteration  49: 11.125 s/op
Iteration  50: 11.155 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.119 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 25 
    [11.100, 11.150) = 18 
    [11.150, 11.200) = 4 
    [11.200, 11.250) = 0 
    [11.250, 11.300) = 1 
    [11.300, 11.350) = 0 
    [11.350, 11.400) = 0 
    [11.400, 11.450) = 2 

  Percentiles, s/op:
      p(0.0000) =     11.053 s/op
     p(50.0000) =     11.101 s/op
     p(90.0000) =     11.155 s/op
     p(95.0000) =     11.343 s/op
     p(99.0000) =     11.432 s/op
     p(99.9000) =     11.432 s/op
     p(99.9900) =     11.432 s/op
     p(99.9990) =     11.432 s/op
     p(99.9999) =     11.432 s/op
    p(100.0000) =     11.432 s/op


# Run complete. Total time: 00:09:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  11.119 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_graalvm-ce-19.1.1_1564884636855.json
{"wallclock_times": [556.8618611480001], "core_cycle_counts": [[221216229755], [565881549294], [587344713166], [421409256201]], "aperf_counts": [[219704199792], [565832741509], [587307113461], [421350982450]], "mperf_counts": [[219721890758], [565832856342], [587316181976], [421357345932]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 04:19:53: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-04 04:19:54: INFO] Estimated completion (whole session): 2019-08-05 18:18:00 (1 day, 13:58:05 from now)
[2019-08-04 04:19:54: INFO] 256 executions left in scheduler queue
[2019-08-04 04:19:54: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_11.0.4'
[2019-08-04 04:19:54: INFO] Estimated completion (next execution): 2019-08-04 04:31:41 (0:11:47 from now)
[2019-08-04 04:19:54: INFO] Reboot in preparation for next execution
[2019-08-04 04:24:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 04:24:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 04:24:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 04:24:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 04:24:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 04:34:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.570 s/op
Iteration   2: 12.292 s/op
Iteration   3: 12.249 s/op
Iteration   4: 12.446 s/op
Iteration   5: 12.192 s/op
Iteration   6: 12.383 s/op
Iteration   7: 12.269 s/op
Iteration   8: 12.355 s/op
Iteration   9: 12.144 s/op
Iteration  10: 12.163 s/op
Iteration  11: 12.255 s/op
Iteration  12: 12.214 s/op
Iteration  13: 12.323 s/op
Iteration  14: 12.222 s/op
Iteration  15: 12.304 s/op
Iteration  16: 12.114 s/op
Iteration  17: 12.319 s/op
Iteration  18: 12.171 s/op
Iteration  19: 12.360 s/op
Iteration  20: 12.171 s/op
Iteration  21: 12.423 s/op
Iteration  22: 12.296 s/op
Iteration  23: 12.175 s/op
Iteration  24: 12.247 s/op
Iteration  25: 12.192 s/op
Iteration  26: 12.290 s/op
Iteration  27: 12.383 s/op
Iteration  28: 12.264 s/op
Iteration  29: 12.150 s/op
Iteration  30: 12.184 s/op
Iteration  31: 12.355 s/op
Iteration  32: 12.274 s/op
Iteration  33: 12.215 s/op
Iteration  34: 12.237 s/op
Iteration  35: 12.127 s/op
Iteration  36: 12.331 s/op
Iteration  37: 12.199 s/op
Iteration  38: 12.291 s/op
Iteration  39: 12.341 s/op
Iteration  40: 12.249 s/op
Iteration  41: 12.131 s/op
Iteration  42: 12.171 s/op
Iteration  43: 12.388 s/op
Iteration  44: 12.310 s/op
Iteration  45: 12.190 s/op
Iteration  46: 12.259 s/op
Iteration  47: 12.163 s/op
Iteration  48: 12.280 s/op
Iteration  49: 12.211 s/op
Iteration  50: 12.298 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.263 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [12.100, 12.150) = 4 
    [12.150, 12.200) = 12 
    [12.200, 12.250) = 8 
    [12.250, 12.300) = 11 
    [12.300, 12.350) = 6 
    [12.350, 12.400) = 6 
    [12.400, 12.450) = 2 
    [12.450, 12.500) = 0 
    [12.500, 12.550) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.114 s/op
     p(50.0000) =     12.257 s/op
     p(90.0000) =     12.383 s/op
     p(95.0000) =     12.434 s/op
     p(99.0000) =     12.570 s/op
     p(99.9000) =     12.570 s/op
     p(99.9900) =     12.570 s/op
     p(99.9990) =     12.570 s/op
     p(99.9999) =     12.570 s/op
    p(100.0000) =     12.570 s/op


# Run complete. Total time: 00:10:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.263 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_11.0.4_1564885447599.json
{"wallclock_times": [614.2386472379999], "core_cycle_counts": [[663326719943], [632195673356], [466016201978], [439322807696]], "aperf_counts": [[661722662593], [631865181941], [465815115298], [439125750727]], "mperf_counts": [[673762309224], [642185768754], [473026832302], [446737810646]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 04:34:21: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_11.0.4'
[2019-08-04 04:34:22: INFO] Estimated completion (whole session): 2019-08-05 18:19:43 (1 day, 13:45:21 from now)
[2019-08-04 04:34:22: INFO] 255 executions left in scheduler queue
[2019-08-04 04:34:22: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-08-04 04:34:22: INFO] Estimated completion (next execution): 2019-08-04 04:47:07 (0:12:44 from now)
[2019-08-04 04:34:22: INFO] Reboot in preparation for next execution
[2019-08-04 04:44:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.542 s/op
Iteration   2: 5.460 s/op
Iteration   3: 5.322 s/op
Iteration   4: 5.440 s/op
Iteration   5: 5.209 s/op
Iteration   6: 5.233 s/op
Iteration   7: 5.158 s/op
Iteration   8: 5.192 s/op
Iteration   9: 5.194 s/op
Iteration  10: 5.255 s/op
Iteration  11: 5.139 s/op
Iteration  12: 6.323 s/op
Iteration  13: 5.039 s/op
Iteration  14: 5.273 s/op
Iteration  15: 5.086 s/op
Iteration  16: 5.138 s/op
Iteration  17: 5.291 s/op
Iteration  18: 5.142 s/op
Iteration  19: 5.112 s/op
Iteration  20: 5.296 s/op
Iteration  21: 5.138 s/op
Iteration  22: 5.154 s/op
Iteration  23: 6.410 s/op
Iteration  24: 5.076 s/op
Iteration  25: 5.145 s/op
Iteration  26: 5.115 s/op
Iteration  27: 5.284 s/op
Iteration  28: 5.127 s/op
Iteration  29: 5.134 s/op
Iteration  30: 5.318 s/op
Iteration  31: 5.122 s/op
Iteration  32: 5.149 s/op
Iteration  33: 5.130 s/op
Iteration  34: 6.303 s/op
Iteration  35: 5.073 s/op
Iteration  36: 5.131 s/op
Iteration  37: 5.286 s/op
Iteration  38: 5.138 s/op
Iteration  39: 5.151 s/op
Iteration  40: 5.136 s/op
Iteration  41: 5.294 s/op
Iteration  42: 5.139 s/op
Iteration  43: 5.144 s/op
Iteration  44: 5.306 s/op
Iteration  45: 6.086 s/op
Iteration  46: 5.061 s/op
Iteration  47: 5.120 s/op
Iteration  48: 5.261 s/op
Iteration  49: 5.128 s/op
Iteration  50: 5.124 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.281 ?(99.9%) 0.157 s/op

  Histogram, s/op:
    [5.000, 5.125) = 10 
    [5.125, 5.250) = 22 
    [5.250, 5.375) = 11 
    [5.375, 5.500) = 2 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 1 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 2 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.039 s/op
     p(50.0000) =      5.150 s/op
     p(90.0000) =      5.534 s/op
     p(95.0000) =      6.312 s/op
     p(99.0000) =      6.410 s/op
     p(99.9000) =      6.410 s/op
     p(99.9900) =      6.410 s/op
     p(99.9990) =      6.410 s/op
     p(99.9999) =      6.410 s/op
    p(100.0000) =      6.410 s/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.281 ? 0.157   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_graalvm-ee-19.1.1_1564886415259.json
{"wallclock_times": [265.037986707], "core_cycle_counts": [[293080158628], [336712853022], [191347598284], [250714103499]], "aperf_counts": [[292425724780], [336644940234], [191293953317], [250680177786]], "mperf_counts": [[292453305894], [336653266242], [191296027416], [250691181676]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 04:44:40: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-08-04 04:44:41: INFO] Estimated completion (whole session): 2019-08-05 18:23:07 (1 day, 13:38:26 from now)
[2019-08-04 04:44:41: INFO] 254 executions left in scheduler queue
[2019-08-04 04:44:41: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-08-04 04:44:41: INFO] Estimated completion (next execution): 2019-08-04 04:51:36 (0:06:54 from now)
[2019-08-04 04:44:41: INFO] Reboot in preparation for next execution
[2019-08-04 04:50:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 04:50:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 04:50:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 04:50:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 04:50:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 05:01:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.285 s/op
Iteration   2: 13.502 s/op
Iteration   3: 13.505 s/op
Iteration   4: 13.402 s/op
Iteration   5: 13.647 s/op
Iteration   6: 13.431 s/op
Iteration   7: 13.452 s/op
Iteration   8: 13.431 s/op
Iteration   9: 13.472 s/op
Iteration  10: 13.432 s/op
Iteration  11: 13.446 s/op
Iteration  12: 13.463 s/op
Iteration  13: 13.404 s/op
Iteration  14: 13.475 s/op
Iteration  15: 13.393 s/op
Iteration  16: 13.418 s/op
Iteration  17: 13.550 s/op
Iteration  18: 13.427 s/op
Iteration  19: 13.506 s/op
Iteration  20: 13.451 s/op
Iteration  21: 13.388 s/op
Iteration  22: 13.460 s/op
Iteration  23: 13.423 s/op
Iteration  24: 13.438 s/op
Iteration  25: 13.392 s/op
Iteration  26: 13.531 s/op
Iteration  27: 13.392 s/op
Iteration  28: 13.462 s/op
Iteration  29: 13.409 s/op
Iteration  30: 13.413 s/op
Iteration  31: 13.503 s/op
Iteration  32: 13.409 s/op
Iteration  33: 13.456 s/op
Iteration  34: 13.446 s/op
Iteration  35: 13.417 s/op
Iteration  36: 13.426 s/op
Iteration  37: 13.381 s/op
Iteration  38: 13.530 s/op
Iteration  39: 13.325 s/op
Iteration  40: 13.444 s/op
Iteration  41: 13.419 s/op
Iteration  42: 13.405 s/op
Iteration  43: 13.533 s/op
Iteration  44: 13.440 s/op
Iteration  45: 13.436 s/op
Iteration  46: 13.424 s/op
Iteration  47: 13.426 s/op
Iteration  48: 13.448 s/op
Iteration  49: 13.482 s/op
Iteration  50: 13.408 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.463 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [13.300, 13.400) = 6 
    [13.400, 13.500) = 34 
    [13.500, 13.600) = 8 
    [13.600, 13.700) = 1 
    [13.700, 13.800) = 0 
    [13.800, 13.900) = 0 
    [13.900, 14.000) = 0 
    [14.000, 14.100) = 0 
    [14.100, 14.200) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.325 s/op
     p(50.0000) =     13.437 s/op
     p(90.0000) =     13.530 s/op
     p(95.0000) =     13.594 s/op
     p(99.0000) =     14.285 s/op
     p(99.9000) =     14.285 s/op
     p(99.9900) =     14.285 s/op
     p(99.9990) =     14.285 s/op
     p(99.9999) =     14.285 s/op
    p(100.0000) =     14.285 s/op


# Run complete. Total time: 00:11:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.463 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_12.0.2_1564887002628.json
{"wallclock_times": [674.2069437179999], "core_cycle_counts": [[317648369333], [505856402381], [913434010005], [690552138855]], "aperf_counts": [[315501157416], [505731159483], [913348263540], [690478460089]], "mperf_counts": [[316442545448], [506948671350], [915786745740], [692111740766]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 05:01:16: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-08-04 05:01:17: INFO] Estimated completion (whole session): 2019-08-05 18:25:56 (1 day, 13:24:38 from now)
[2019-08-04 05:01:17: INFO] 253 executions left in scheduler queue
[2019-08-04 05:01:17: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:01:17: INFO] Estimated completion (next execution): 2019-08-04 05:15:04 (0:13:46 from now)
[2019-08-04 05:01:17: INFO] Reboot in preparation for next execution
[2019-08-04 05:10:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.513 s/op
Iteration   2: 5.382 s/op
Iteration   3: 5.436 s/op
Iteration   4: 5.321 s/op
Iteration   5: 5.321 s/op
Iteration   6: 5.331 s/op
Iteration   7: 5.334 s/op
Iteration   8: 5.327 s/op
Iteration   9: 5.319 s/op
Iteration  10: 5.320 s/op
Iteration  11: 5.334 s/op
Iteration  12: 5.303 s/op
Iteration  13: 5.322 s/op
Iteration  14: 5.321 s/op
Iteration  15: 5.330 s/op
Iteration  16: 5.317 s/op
Iteration  17: 5.316 s/op
Iteration  18: 5.304 s/op
Iteration  19: 5.318 s/op
Iteration  20: 5.312 s/op
Iteration  21: 5.335 s/op
Iteration  22: 5.323 s/op
Iteration  23: 5.319 s/op
Iteration  24: 5.323 s/op
Iteration  25: 5.330 s/op
Iteration  26: 5.319 s/op
Iteration  27: 5.316 s/op
Iteration  28: 5.302 s/op
Iteration  29: 5.318 s/op
Iteration  30: 5.324 s/op
Iteration  31: 5.315 s/op
Iteration  32: 5.323 s/op
Iteration  33: 5.306 s/op
Iteration  34: 5.298 s/op
Iteration  35: 5.317 s/op
Iteration  36: 5.301 s/op
Iteration  37: 5.318 s/op
Iteration  38: 5.317 s/op
Iteration  39: 5.323 s/op
Iteration  40: 5.298 s/op
Iteration  41: 5.319 s/op
Iteration  42: 5.317 s/op
Iteration  43: 5.343 s/op
Iteration  44: 5.320 s/op
Iteration  45: 5.304 s/op
Iteration  46: 5.321 s/op
Iteration  47: 5.317 s/op
Iteration  48: 5.299 s/op
Iteration  49: 5.325 s/op
Iteration  50: 5.339 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.326 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [5.200, 5.225) = 0 
    [5.225, 5.250) = 0 
    [5.250, 5.275) = 0 
    [5.275, 5.300) = 3 
    [5.300, 5.325) = 35 
    [5.325, 5.350) = 9 
    [5.350, 5.375) = 0 
    [5.375, 5.400) = 1 
    [5.400, 5.425) = 0 
    [5.425, 5.450) = 1 
    [5.450, 5.475) = 0 
    [5.475, 5.500) = 0 
    [5.500, 5.525) = 1 
    [5.525, 5.550) = 0 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.298 s/op
     p(50.0000) =      5.320 s/op
     p(90.0000) =      5.338 s/op
     p(95.0000) =      5.406 s/op
     p(99.0000) =      5.513 s/op
     p(99.9000) =      5.513 s/op
     p(99.9900) =      5.513 s/op
     p(99.9990) =      5.513 s/op
     p(99.9999) =      5.513 s/op
    p(100.0000) =      5.513 s/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.326 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ce-19.1.1_1564887942567.json
{"wallclock_times": [267.204451694], "core_cycle_counts": [[197377434783], [221510037805], [261731099242], [183464874140]], "aperf_counts": [[196746430074], [221463610169], [261707959621], [183445068837]], "mperf_counts": [[196764950098], [221467171178], [261725168864], [183449093452]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 05:10:09: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:10:10: INFO] Estimated completion (whole session): 2019-08-05 18:27:52 (1 day, 13:17:41 from now)
[2019-08-04 05:10:10: INFO] 252 executions left in scheduler queue
[2019-08-04 05:10:10: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:10:10: INFO] Estimated completion (next execution): 2019-08-04 05:17:07 (0:06:56 from now)
[2019-08-04 05:10:10: INFO] Reboot in preparation for next execution
[2019-08-04 05:22:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.974 s/op
Iteration   2: 9.943 s/op
Iteration   3: 9.963 s/op
Iteration   4: 9.975 s/op
Iteration   5: 9.890 s/op
Iteration   6: 9.960 s/op
Iteration   7: 9.925 s/op
Iteration   8: 9.905 s/op
Iteration   9: 9.892 s/op
Iteration  10: 9.900 s/op
Iteration  11: 9.941 s/op
Iteration  12: 9.918 s/op
Iteration  13: 9.904 s/op
Iteration  14: 9.972 s/op
Iteration  15: 9.935 s/op
Iteration  16: 9.936 s/op
Iteration  17: 9.944 s/op
Iteration  18: 9.930 s/op
Iteration  19: 9.931 s/op
Iteration  20: 9.927 s/op
Iteration  21: 9.896 s/op
Iteration  22: 9.906 s/op
Iteration  23: 9.921 s/op
Iteration  24: 9.952 s/op
Iteration  25: 9.895 s/op
Iteration  26: 9.889 s/op
Iteration  27: 9.925 s/op
Iteration  28: 9.934 s/op
Iteration  29: 9.939 s/op
Iteration  30: 9.919 s/op
Iteration  31: 9.932 s/op
Iteration  32: 9.920 s/op
Iteration  33: 9.927 s/op
Iteration  34: 9.897 s/op
Iteration  35: 9.909 s/op
Iteration  36: 9.915 s/op
Iteration  37: 9.912 s/op
Iteration  38: 9.936 s/op
Iteration  39: 9.883 s/op
Iteration  40: 9.899 s/op
Iteration  41: 9.921 s/op
Iteration  42: 9.946 s/op
Iteration  43: 9.913 s/op
Iteration  44: 9.912 s/op
Iteration  45: 9.923 s/op
Iteration  46: 9.960 s/op
Iteration  47: 9.893 s/op
Iteration  48: 9.926 s/op
Iteration  49: 9.904 s/op
Iteration  50: 9.965 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.925 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [9.880, 9.885) = 1 
    [9.885, 9.890) = 2 
    [9.890, 9.895) = 3 
    [9.895, 9.900) = 3 
    [9.900, 9.905) = 4 
    [9.905, 9.910) = 2 
    [9.910, 9.915) = 3 
    [9.915, 9.920) = 3 
    [9.920, 9.925) = 4 
    [9.925, 9.930) = 6 
    [9.930, 9.935) = 4 
    [9.935, 9.940) = 3 
    [9.940, 9.945) = 3 
    [9.945, 9.950) = 1 
    [9.950, 9.955) = 1 
    [9.955, 9.960) = 2 
    [9.960, 9.965) = 1 
    [9.965, 9.970) = 1 
    [9.970, 9.975) = 3 

  Percentiles, s/op:
      p(0.0000) =      9.883 s/op
     p(50.0000) =      9.924 s/op
     p(90.0000) =      9.963 s/op
     p(95.0000) =      9.973 s/op
     p(99.0000) =      9.975 s/op
     p(99.9000) =      9.975 s/op
     p(99.9900) =      9.975 s/op
     p(99.9990) =      9.975 s/op
     p(99.9999) =      9.975 s/op
    p(100.0000) =      9.975 s/op


# Run complete. Total time: 00:08:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  9.925 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ce-19.1.1_1564888462641.json
{"wallclock_times": [497.15207698099994], "core_cycle_counts": [[396701887555], [375382997143], [220720915336], [608124264369]], "aperf_counts": [[395517315653], [375314237380], [220662000339], [608105832288]], "mperf_counts": [[395533748796], [375316206784], [220676178716], [608113910644]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 05:22:39: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:22:40: INFO] Estimated completion (whole session): 2019-08-05 18:29:38 (1 day, 13:06:57 from now)
[2019-08-04 05:22:40: INFO] 251 executions left in scheduler queue
[2019-08-04 05:22:40: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:22:40: INFO] Estimated completion (next execution): 2019-08-04 05:33:26 (0:10:45 from now)
[2019-08-04 05:22:40: INFO] Reboot in preparation for next execution
[2019-08-04 05:29:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.788 s/op
Iteration   2: 3.352 s/op
Iteration   3: 3.305 s/op
Iteration   4: 3.310 s/op
Iteration   5: 3.295 s/op
Iteration   6: 3.262 s/op
Iteration   7: 3.288 s/op
Iteration   8: 3.334 s/op
Iteration   9: 3.330 s/op
Iteration  10: 3.323 s/op
Iteration  11: 3.318 s/op
Iteration  12: 3.324 s/op
Iteration  13: 3.309 s/op
Iteration  14: 3.325 s/op
Iteration  15: 3.321 s/op
Iteration  16: 3.321 s/op
Iteration  17: 3.329 s/op
Iteration  18: 3.306 s/op
Iteration  19: 3.325 s/op
Iteration  20: 3.314 s/op
Iteration  21: 3.270 s/op
Iteration  22: 3.293 s/op
Iteration  23: 3.327 s/op
Iteration  24: 3.310 s/op
Iteration  25: 3.327 s/op
Iteration  26: 3.311 s/op
Iteration  27: 3.323 s/op
Iteration  28: 3.309 s/op
Iteration  29: 3.335 s/op
Iteration  30: 3.311 s/op
Iteration  31: 3.329 s/op
Iteration  32: 3.312 s/op
Iteration  33: 3.313 s/op
Iteration  34: 3.318 s/op
Iteration  35: 3.326 s/op
Iteration  36: 3.333 s/op
Iteration  37: 3.325 s/op
Iteration  38: 3.255 s/op
Iteration  39: 3.291 s/op
Iteration  40: 3.341 s/op
Iteration  41: 3.310 s/op
Iteration  42: 3.337 s/op
Iteration  43: 3.326 s/op
Iteration  44: 3.324 s/op
Iteration  45: 3.320 s/op
Iteration  46: 3.311 s/op
Iteration  47: 3.320 s/op
Iteration  48: 3.311 s/op
Iteration  49: 3.329 s/op
Iteration  50: 3.321 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.325 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 7 
    [3.300, 3.350) = 41 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.255 s/op
     p(50.0000) =      3.320 s/op
     p(90.0000) =      3.335 s/op
     p(95.0000) =      3.346 s/op
     p(99.0000) =      3.788 s/op
     p(99.9000) =      3.788 s/op
     p(99.9900) =      3.788 s/op
     p(99.9990) =      3.788 s/op
     p(99.9999) =      3.788 s/op
    p(100.0000) =      3.788 s/op


# Run complete. Total time: 00:02:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.325 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ce-19.1.1_1564889211587.json
{"wallclock_times": [167.248010941], "core_cycle_counts": [[75658007174], [273900719635], [97932433170], [134105045344]], "aperf_counts": [[75163543198], [273870102556], [97905731668], [134076542201]], "mperf_counts": [[75182187240], [273870763414], [97908560760], [134083656178]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 05:29:38: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:29:39: INFO] Estimated completion (whole session): 2019-08-05 18:31:20 (1 day, 13:01:40 from now)
[2019-08-04 05:29:39: INFO] 250 executions left in scheduler queue
[2019-08-04 05:29:39: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:29:39: INFO] Estimated completion (next execution): 2019-08-04 05:34:57 (0:05:17 from now)
[2019-08-04 05:29:39: INFO] Reboot in preparation for next execution
[2019-08-04 05:36:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.635 s/op
Iteration   2: 3.186 s/op
Iteration   3: 3.142 s/op
Iteration   4: 3.260 s/op
Iteration   5: 3.143 s/op
Iteration   6: 3.192 s/op
Iteration   7: 3.128 s/op
Iteration   8: 3.138 s/op
Iteration   9: 3.140 s/op
Iteration  10: 3.152 s/op
Iteration  11: 3.156 s/op
Iteration  12: 3.153 s/op
Iteration  13: 3.123 s/op
Iteration  14: 3.148 s/op
Iteration  15: 3.148 s/op
Iteration  16: 3.168 s/op
Iteration  17: 3.110 s/op
Iteration  18: 3.131 s/op
Iteration  19: 3.141 s/op
Iteration  20: 3.149 s/op
Iteration  21: 3.132 s/op
Iteration  22: 3.135 s/op
Iteration  23: 3.123 s/op
Iteration  24: 3.133 s/op
Iteration  25: 3.154 s/op
Iteration  26: 3.172 s/op
Iteration  27: 3.128 s/op
Iteration  28: 3.156 s/op
Iteration  29: 3.131 s/op
Iteration  30: 3.128 s/op
Iteration  31: 3.129 s/op
Iteration  32: 3.141 s/op
Iteration  33: 3.130 s/op
Iteration  34: 3.149 s/op
Iteration  35: 3.153 s/op
Iteration  36: 3.155 s/op
Iteration  37: 3.119 s/op
Iteration  38: 3.153 s/op
Iteration  39: 3.125 s/op
Iteration  40: 3.133 s/op
Iteration  41: 3.158 s/op
Iteration  42: 3.153 s/op
Iteration  43: 3.139 s/op
Iteration  44: 3.152 s/op
Iteration  45: 3.127 s/op
Iteration  46: 3.145 s/op
Iteration  47: 3.130 s/op
Iteration  48: 3.158 s/op
Iteration  49: 3.122 s/op
Iteration  50: 3.163 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.155 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [3.100, 3.150) = 31 
    [3.150, 3.200) = 17 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.110 s/op
     p(50.0000) =      3.142 s/op
     p(90.0000) =      3.171 s/op
     p(95.0000) =      3.223 s/op
     p(99.0000) =      3.635 s/op
     p(99.9000) =      3.635 s/op
     p(99.9900) =      3.635 s/op
     p(99.9990) =      3.635 s/op
     p(99.9999) =      3.635 s/op
    p(100.0000) =      3.635 s/op


# Run complete. Total time: 00:02:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.155 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ce-19.1.1_1564889658871.json
{"wallclock_times": [158.73130135200003], "core_cycle_counts": [[154081584573], [135716124530], [120407660202], [109976709380]], "aperf_counts": [[153733230022], [135667314266], [120383006623], [109956216026]], "mperf_counts": [[153750092646], [135668877246], [120383854958], [109964079368]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 05:36:57: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-04 05:36:58: INFO] Estimated completion (whole session): 2019-08-05 18:33:30 (1 day, 12:56:31 from now)
[2019-08-04 05:36:58: INFO] 249 executions left in scheduler queue
[2019-08-04 05:36:58: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-08-04 05:36:58: INFO] Estimated completion (next execution): 2019-08-04 05:42:07 (0:05:09 from now)
[2019-08-04 05:36:58: INFO] Reboot in preparation for next execution
[2019-08-04 05:41:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 05:41:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 05:41:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 05:41:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 05:41:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 05:41:12: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 05:52:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.708 s/op
Iteration   2: 12.652 s/op
Iteration   3: 12.665 s/op
Iteration   4: 13.665 s/op
Iteration   5: 13.691 s/op
Iteration   6: 13.692 s/op
Iteration   7: 13.672 s/op
Iteration   8: 13.679 s/op
Iteration   9: 13.666 s/op
Iteration  10: 13.668 s/op
Iteration  11: 13.658 s/op
Iteration  12: 13.670 s/op
Iteration  13: 13.655 s/op
Iteration  14: 13.659 s/op
Iteration  15: 13.662 s/op
Iteration  16: 13.666 s/op
Iteration  17: 13.670 s/op
Iteration  18: 13.678 s/op
Iteration  19: 13.677 s/op
Iteration  20: 13.683 s/op
Iteration  21: 13.654 s/op
Iteration  22: 13.681 s/op
Iteration  23: 13.676 s/op
Iteration  24: 13.704 s/op
Iteration  25: 13.680 s/op
Iteration  26: 13.667 s/op
Iteration  27: 13.674 s/op
Iteration  28: 13.674 s/op
Iteration  29: 13.676 s/op
Iteration  30: 13.711 s/op
Iteration  31: 13.674 s/op
Iteration  32: 13.662 s/op
Iteration  33: 13.662 s/op
Iteration  34: 13.648 s/op
Iteration  35: 13.677 s/op
Iteration  36: 13.673 s/op
Iteration  37: 13.663 s/op
Iteration  38: 13.662 s/op
Iteration  39: 13.666 s/op
Iteration  40: 13.672 s/op
Iteration  41: 13.675 s/op
Iteration  42: 13.658 s/op
Iteration  43: 13.644 s/op
Iteration  44: 13.669 s/op
Iteration  45: 13.666 s/op
Iteration  46: 13.670 s/op
Iteration  47: 13.654 s/op
Iteration  48: 13.671 s/op
Iteration  49: 13.677 s/op
Iteration  50: 13.676 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.631 ?(99.9%) 0.099 s/op

  Histogram, s/op:
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 2 
    [12.750, 12.875) = 0 
    [12.875, 13.000) = 0 
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 0 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 48 
    [13.750, 13.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.652 s/op
     p(50.0000) =     13.670 s/op
     p(90.0000) =     13.690 s/op
     p(95.0000) =     13.706 s/op
     p(99.0000) =     13.711 s/op
     p(99.9000) =     13.711 s/op
     p(99.9900) =     13.711 s/op
     p(99.9990) =     13.711 s/op
     p(99.9999) =     13.711 s/op
    p(100.0000) =     13.711 s/op


# Run complete. Total time: 00:11:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.631 ? 0.099   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_11.0.4_1564890071915.json
{"wallclock_times": [683.0603900609999], "core_cycle_counts": [[552607692184], [491911892169], [437407819159], [739082325225]], "aperf_counts": [[550756451087], [491770688217], [437229216199], [738952473192]], "mperf_counts": [[550764557616], [491770681466], [437230768634], [738952514822]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 05:52:34: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-08-04 05:52:35: INFO] Estimated completion (whole session): 2019-08-05 18:35:30 (1 day, 12:42:54 from now)
[2019-08-04 05:52:35: INFO] 248 executions left in scheduler queue
[2019-08-04 05:52:35: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-04 05:52:35: INFO] Estimated completion (next execution): 2019-08-04 06:06:21 (0:13:45 from now)
[2019-08-04 05:52:35: INFO] Reboot in preparation for next execution
[2019-08-04 05:57:45: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 05:57:45: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 05:57:45: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 05:57:45: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 05:57:45: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 05:59:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.585 s/op
Iteration   2: 2.364 s/op
Iteration   3: 2.300 s/op
Iteration   4: 2.288 s/op
Iteration   5: 2.353 s/op
Iteration   6: 2.350 s/op
Iteration   7: 2.371 s/op
Iteration   8: 2.356 s/op
Iteration   9: 2.346 s/op
Iteration  10: 2.335 s/op
Iteration  11: 2.346 s/op
Iteration  12: 2.344 s/op
Iteration  13: 2.339 s/op
Iteration  14: 2.342 s/op
Iteration  15: 2.348 s/op
Iteration  16: 2.343 s/op
Iteration  17: 2.342 s/op
Iteration  18: 2.342 s/op
Iteration  19: 2.329 s/op
Iteration  20: 2.349 s/op
Iteration  21: 2.346 s/op
Iteration  22: 2.346 s/op
Iteration  23: 2.323 s/op
Iteration  24: 2.319 s/op
Iteration  25: 2.343 s/op
Iteration  26: 2.349 s/op
Iteration  27: 2.339 s/op
Iteration  28: 2.340 s/op
Iteration  29: 2.345 s/op
Iteration  30: 2.344 s/op
Iteration  31: 2.342 s/op
Iteration  32: 2.342 s/op
Iteration  33: 2.351 s/op
Iteration  34: 2.344 s/op
Iteration  35: 2.196 s/op
Iteration  36: 2.265 s/op
Iteration  37: 2.320 s/op
Iteration  38: 2.353 s/op
Iteration  39: 2.350 s/op
Iteration  40: 2.339 s/op
Iteration  41: 2.337 s/op
Iteration  42: 2.345 s/op
Iteration  43: 2.347 s/op
Iteration  44: 2.343 s/op
Iteration  45: 2.342 s/op
Iteration  46: 2.329 s/op
Iteration  47: 2.346 s/op
Iteration  48: 2.316 s/op
Iteration  49: 2.350 s/op
Iteration  50: 2.351 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.341 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 3 
    [2.300, 2.350) = 36 
    [2.350, 2.400) = 9 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.196 s/op
     p(50.0000) =      2.343 s/op
     p(90.0000) =      2.353 s/op
     p(95.0000) =      2.367 s/op
     p(99.0000) =      2.585 s/op
     p(99.9000) =      2.585 s/op
     p(99.9900) =      2.585 s/op
     p(99.9990) =      2.585 s/op
     p(99.9999) =      2.585 s/op
    p(100.0000) =      2.585 s/op


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.341 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_11.0.4_1564891065152.json
{"wallclock_times": [118.13720298300001], "core_cycle_counts": [[84162896848], [48026052974], [101797538395], [117426786600]], "aperf_counts": [[83832748122], [47978418281], [101767373372], [117408126502]], "mperf_counts": [[94706419434], [53561647038], [114704142160], [133416832582]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 05:59:43: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-04 05:59:44: INFO] Estimated completion (whole session): 2019-08-05 18:38:03 (1 day, 12:38:19 from now)
[2019-08-04 05:59:44: INFO] 247 executions left in scheduler queue
[2019-08-04 05:59:44: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-04 05:59:44: INFO] Estimated completion (next execution): 2019-08-04 06:04:16 (0:04:32 from now)
[2019-08-04 05:59:44: INFO] Reboot in preparation for next execution
[2019-08-04 06:05:03: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 06:05:03: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 06:05:03: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 06:05:03: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 06:05:03: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 06:07:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.469 s/op
Iteration   2: 2.605 s/op
Iteration   3: 2.575 s/op
Iteration   4: 2.756 s/op
Iteration   5: 2.337 s/op
Iteration   6: 2.353 s/op
Iteration   7: 2.331 s/op
Iteration   8: 2.335 s/op
Iteration   9: 2.327 s/op
Iteration  10: 2.335 s/op
Iteration  11: 2.326 s/op
Iteration  12: 2.327 s/op
Iteration  13: 2.327 s/op
Iteration  14: 2.327 s/op
Iteration  15: 2.327 s/op
Iteration  16: 2.328 s/op
Iteration  17: 2.333 s/op
Iteration  18: 2.334 s/op
Iteration  19: 2.330 s/op
Iteration  20: 2.328 s/op
Iteration  21: 2.327 s/op
Iteration  22: 2.320 s/op
Iteration  23: 2.326 s/op
Iteration  24: 2.325 s/op
Iteration  25: 2.334 s/op
Iteration  26: 2.328 s/op
Iteration  27: 2.329 s/op
Iteration  28: 2.326 s/op
Iteration  29: 2.331 s/op
Iteration  30: 2.334 s/op
Iteration  31: 2.334 s/op
Iteration  32: 2.330 s/op
Iteration  33: 2.329 s/op
Iteration  34: 2.328 s/op
Iteration  35: 2.328 s/op
Iteration  36: 2.329 s/op
Iteration  37: 2.330 s/op
Iteration  38: 2.326 s/op
Iteration  39: 2.324 s/op
Iteration  40: 2.334 s/op
Iteration  41: 2.328 s/op
Iteration  42: 2.327 s/op
Iteration  43: 2.330 s/op
Iteration  44: 2.329 s/op
Iteration  45: 2.327 s/op
Iteration  46: 2.328 s/op
Iteration  47: 2.328 s/op
Iteration  48: 2.329 s/op
Iteration  49: 2.327 s/op
Iteration  50: 2.325 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.351 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [2.300, 2.350) = 45 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.320 s/op
     p(50.0000) =      2.329 s/op
     p(90.0000) =      2.352 s/op
     p(95.0000) =      2.589 s/op
     p(99.0000) =      2.756 s/op
     p(99.9000) =      2.756 s/op
     p(99.9900) =      2.756 s/op
     p(99.9990) =      2.756 s/op
     p(99.9999) =      2.756 s/op
    p(100.0000) =      2.756 s/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.351 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_11.0.4_1564891503811.json
{"wallclock_times": [118.56708854499999], "core_cycle_counts": [[151470613658], [49326206291], [139447226663], [48357922027]], "aperf_counts": [[151224433649], [49272734430], [139428416843], [48336269737]], "mperf_counts": [[151551951502], [49302299938], [139498258086], [48392621684]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 06:07:02: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-04 06:07:03: INFO] Estimated completion (whole session): 2019-08-05 18:40:58 (1 day, 12:33:54 from now)
[2019-08-04 06:07:03: INFO] 246 executions left in scheduler queue
[2019-08-04 06:07:03: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:07:03: INFO] Estimated completion (next execution): 2019-08-04 06:11:29 (0:04:26 from now)
[2019-08-04 06:07:03: INFO] Reboot in preparation for next execution
[2019-08-04 06:17:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.447 s/op
Iteration   2: 6.970 s/op
Iteration   3: 6.911 s/op
Iteration   4: 6.937 s/op
Iteration   5: 6.954 s/op
Iteration   6: 6.930 s/op
Iteration   7: 6.979 s/op
Iteration   8: 6.934 s/op
Iteration   9: 6.930 s/op
Iteration  10: 6.957 s/op
Iteration  11: 6.924 s/op
Iteration  12: 6.957 s/op
Iteration  13: 6.937 s/op
Iteration  14: 6.921 s/op
Iteration  15: 6.980 s/op
Iteration  16: 6.931 s/op
Iteration  17: 6.918 s/op
Iteration  18: 6.977 s/op
Iteration  19: 6.927 s/op
Iteration  20: 6.944 s/op
Iteration  21: 6.965 s/op
Iteration  22: 6.933 s/op
Iteration  23: 6.920 s/op
Iteration  24: 6.970 s/op
Iteration  25: 6.938 s/op
Iteration  26: 6.951 s/op
Iteration  27: 6.961 s/op
Iteration  28: 6.953 s/op
Iteration  29: 6.935 s/op
Iteration  30: 6.937 s/op
Iteration  31: 6.947 s/op
Iteration  32: 6.993 s/op
Iteration  33: 6.926 s/op
Iteration  34: 6.928 s/op
Iteration  35: 6.982 s/op
Iteration  36: 6.946 s/op
Iteration  37: 6.925 s/op
Iteration  38: 6.967 s/op
Iteration  39: 6.931 s/op
Iteration  40: 6.960 s/op
Iteration  41: 6.964 s/op
Iteration  42: 6.944 s/op
Iteration  43: 6.945 s/op
Iteration  44: 6.963 s/op
Iteration  45: 6.948 s/op
Iteration  46: 6.957 s/op
Iteration  47: 7.003 s/op
Iteration  48: 6.949 s/op
Iteration  49: 6.995 s/op
Iteration  50: 6.960 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.959 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [6.900, 6.950) = 27 
    [6.950, 7.000) = 21 
    [7.000, 7.050) = 1 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 0 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.911 s/op
     p(50.0000) =      6.947 s/op
     p(90.0000) =      6.982 s/op
     p(95.0000) =      6.999 s/op
     p(99.0000) =      7.447 s/op
     p(99.9000) =      7.447 s/op
     p(99.9900) =      7.447 s/op
     p(99.9990) =      7.447 s/op
     p(99.9999) =      7.447 s/op
    p(100.0000) =      7.447 s/op


# Run complete. Total time: 00:05:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.959 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot-8u222-b10_1564891892986.json
{"wallclock_times": [349.00556048199996], "core_cycle_counts": [[223735701255], [363186640111], [314395488468], [297204939441]], "aperf_counts": [[222818701936], [363108679462], [314320541928], [297139486765]], "mperf_counts": [[222828467092], [363112751678], [314323153580], [297142538346]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 06:17:21: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:17:22: INFO] Estimated completion (whole session): 2019-08-05 18:42:43 (1 day, 12:25:20 from now)
[2019-08-04 06:17:22: INFO] 245 executions left in scheduler queue
[2019-08-04 06:17:22: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:17:22: INFO] Estimated completion (next execution): 2019-08-04 06:25:49 (0:08:26 from now)
[2019-08-04 06:17:22: INFO] Reboot in preparation for next execution
[2019-08-04 06:31:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.647 s/op
Iteration   2: 11.826 s/op
Iteration   3: 11.739 s/op
Iteration   4: 11.764 s/op
Iteration   5: 11.761 s/op
Iteration   6: 11.774 s/op
Iteration   7: 11.769 s/op
Iteration   8: 11.753 s/op
Iteration   9: 11.742 s/op
Iteration  10: 11.790 s/op
Iteration  11: 11.747 s/op
Iteration  12: 11.755 s/op
Iteration  13: 11.749 s/op
Iteration  14: 11.724 s/op
Iteration  15: 11.795 s/op
Iteration  16: 11.726 s/op
Iteration  17: 11.814 s/op
Iteration  18: 11.765 s/op
Iteration  19: 11.774 s/op
Iteration  20: 11.771 s/op
Iteration  21: 11.747 s/op
Iteration  22: 11.791 s/op
Iteration  23: 11.749 s/op
Iteration  24: 11.778 s/op
Iteration  25: 11.780 s/op
Iteration  26: 11.795 s/op
Iteration  27: 11.791 s/op
Iteration  28: 11.732 s/op
Iteration  29: 11.810 s/op
Iteration  30: 11.762 s/op
Iteration  31: 11.772 s/op
Iteration  32: 11.780 s/op
Iteration  33: 11.769 s/op
Iteration  34: 11.803 s/op
Iteration  35: 11.786 s/op
Iteration  36: 11.762 s/op
Iteration  37: 11.777 s/op
Iteration  38: 11.796 s/op
Iteration  39: 11.737 s/op
Iteration  40: 11.778 s/op
Iteration  41: 11.784 s/op
Iteration  42: 11.785 s/op
Iteration  43: 11.749 s/op
Iteration  44: 11.768 s/op
Iteration  45: 11.778 s/op
Iteration  46: 11.818 s/op
Iteration  47: 11.765 s/op
Iteration  48: 11.731 s/op
Iteration  49: 11.781 s/op
Iteration  50: 11.777 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.768 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [11.600, 11.625) = 0 
    [11.625, 11.650) = 1 
    [11.650, 11.675) = 0 
    [11.675, 11.700) = 0 
    [11.700, 11.725) = 1 
    [11.725, 11.750) = 11 
    [11.750, 11.775) = 15 
    [11.775, 11.800) = 17 
    [11.800, 11.825) = 4 
    [11.825, 11.850) = 1 
    [11.850, 11.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.647 s/op
     p(50.0000) =     11.771 s/op
     p(90.0000) =     11.802 s/op
     p(95.0000) =     11.816 s/op
     p(99.0000) =     11.826 s/op
     p(99.9000) =     11.826 s/op
     p(99.9900) =     11.826 s/op
     p(99.9990) =     11.826 s/op
     p(99.9999) =     11.826 s/op
    p(100.0000) =     11.826 s/op


# Run complete. Total time: 00:09:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.768 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot-8u222-b10_1564892495382.json
{"wallclock_times": [589.2125525289999], "core_cycle_counts": [[489132069477], [505884600389], [649785525361], [253402630899]], "aperf_counts": [[487822399869], [505794523480], [649723389213], [253339876377]], "mperf_counts": [[487826959558], [505802370726], [649724588260], [253351833986]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 06:31:24: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:31:25: INFO] Estimated completion (whole session): 2019-08-05 18:44:28 (1 day, 12:13:02 from now)
[2019-08-04 06:31:25: INFO] 244 executions left in scheduler queue
[2019-08-04 06:31:25: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:31:25: INFO] Estimated completion (next execution): 2019-08-04 06:43:44 (0:12:18 from now)
[2019-08-04 06:31:25: INFO] Reboot in preparation for next execution
[2019-08-04 06:41:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.146 s/op
Iteration   2: 6.930 s/op
Iteration   3: 6.736 s/op
Iteration   4: 6.747 s/op
Iteration   5: 6.741 s/op
Iteration   6: 6.774 s/op
Iteration   7: 6.748 s/op
Iteration   8: 6.757 s/op
Iteration   9: 6.749 s/op
Iteration  10: 6.757 s/op
Iteration  11: 6.758 s/op
Iteration  12: 6.760 s/op
Iteration  13: 6.735 s/op
Iteration  14: 6.794 s/op
Iteration  15: 6.709 s/op
Iteration  16: 6.787 s/op
Iteration  17: 6.768 s/op
Iteration  18: 6.770 s/op
Iteration  19: 6.794 s/op
Iteration  20: 6.731 s/op
Iteration  21: 6.729 s/op
Iteration  22: 6.792 s/op
Iteration  23: 6.767 s/op
Iteration  24: 6.739 s/op
Iteration  25: 6.772 s/op
Iteration  26: 6.770 s/op
Iteration  27: 6.734 s/op
Iteration  28: 6.752 s/op
Iteration  29: 6.731 s/op
Iteration  30: 6.756 s/op
Iteration  31: 6.740 s/op
Iteration  32: 6.800 s/op
Iteration  33: 6.750 s/op
Iteration  34: 6.736 s/op
Iteration  35: 6.769 s/op
Iteration  36: 6.766 s/op
Iteration  37: 6.752 s/op
Iteration  38: 6.762 s/op
Iteration  39: 6.805 s/op
Iteration  40: 6.723 s/op
Iteration  41: 6.812 s/op
Iteration  42: 6.754 s/op
Iteration  43: 6.763 s/op
Iteration  44: 6.800 s/op
Iteration  45: 6.735 s/op
Iteration  46: 6.783 s/op
Iteration  47: 6.754 s/op
Iteration  48: 6.751 s/op
Iteration  49: 6.788 s/op
Iteration  50: 6.735 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.770 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [6.700, 6.750) = 18 
    [6.750, 6.800) = 26 
    [6.800, 6.850) = 4 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.709 s/op
     p(50.0000) =      6.757 s/op
     p(90.0000) =      6.800 s/op
     p(95.0000) =      6.865 s/op
     p(99.0000) =      7.146 s/op
     p(99.9000) =      7.146 s/op
     p(99.9900) =      7.146 s/op
     p(99.9990) =      7.146 s/op
     p(99.9999) =      7.146 s/op
    p(100.0000) =      7.146 s/op


# Run complete. Total time: 00:05:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.770 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot-8u222-b10_1564893350447.json
{"wallclock_times": [339.46021936499994], "core_cycle_counts": [[343328679771], [219619518689], [245852507458], [303623859407]], "aperf_counts": [[342612510648], [219534235388], [245827199868], [303602340643]], "mperf_counts": [[342619542516], [219548924050], [245827913978], [303621511296]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 06:41:29: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:41:30: INFO] Estimated completion (whole session): 2019-08-05 18:46:36 (1 day, 12:05:06 from now)
[2019-08-04 06:41:30: INFO] 243 executions left in scheduler queue
[2019-08-04 06:41:30: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:41:30: INFO] Estimated completion (next execution): 2019-08-04 06:49:34 (0:08:03 from now)
[2019-08-04 06:41:30: INFO] Reboot in preparation for next execution
[2019-08-04 06:59:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.136 s/op
Iteration   2: 16.609 s/op
Iteration   3: 16.432 s/op
Iteration   4: 16.423 s/op
Iteration   5: 16.469 s/op
Iteration   6: 16.453 s/op
Iteration   7: 16.427 s/op
Iteration   8: 16.434 s/op
Iteration   9: 16.448 s/op
Iteration  10: 16.538 s/op
Iteration  11: 16.435 s/op
Iteration  12: 16.399 s/op
Iteration  13: 16.507 s/op
Iteration  14: 16.471 s/op
Iteration  15: 16.501 s/op
Iteration  16: 16.465 s/op
Iteration  17: 16.398 s/op
Iteration  18: 16.479 s/op
Iteration  19: 16.439 s/op
Iteration  20: 16.438 s/op
Iteration  21: 16.490 s/op
Iteration  22: 16.429 s/op
Iteration  23: 16.493 s/op
Iteration  24: 16.442 s/op
Iteration  25: 16.502 s/op
Iteration  26: 16.423 s/op
Iteration  27: 16.490 s/op
Iteration  28: 16.444 s/op
Iteration  29: 16.447 s/op
Iteration  30: 16.450 s/op
Iteration  31: 16.413 s/op
Iteration  32: 16.445 s/op
Iteration  33: 16.371 s/op
Iteration  34: 16.455 s/op
Iteration  35: 16.415 s/op
Iteration  36: 16.442 s/op
Iteration  37: 16.471 s/op
Iteration  38: 16.468 s/op
Iteration  39: 16.437 s/op
Iteration  40: 16.417 s/op
Iteration  41: 16.390 s/op
Iteration  42: 16.448 s/op
Iteration  43: 16.403 s/op
Iteration  44: 16.420 s/op
Iteration  45: 16.446 s/op
Iteration  46: 16.494 s/op
Iteration  47: 16.518 s/op
Iteration  48: 16.491 s/op
Iteration  49: 16.467 s/op
Iteration  50: 16.466 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.448 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [16.100, 16.150) = 1 
    [16.150, 16.200) = 0 
    [16.200, 16.250) = 0 
    [16.250, 16.300) = 0 
    [16.300, 16.350) = 0 
    [16.350, 16.400) = 4 
    [16.400, 16.450) = 23 
    [16.450, 16.500) = 16 
    [16.500, 16.550) = 5 
    [16.550, 16.600) = 0 
    [16.600, 16.650) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.136 s/op
     p(50.0000) =     16.446 s/op
     p(90.0000) =     16.502 s/op
     p(95.0000) =     16.527 s/op
     p(99.0000) =     16.609 s/op
     p(99.9000) =     16.609 s/op
     p(99.9900) =     16.609 s/op
     p(99.9990) =     16.609 s/op
     p(99.9999) =     16.609 s/op
    p(100.0000) =     16.609 s/op


# Run complete. Total time: 00:13:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.448 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot-8u222-b10_1564893958599.json
{"wallclock_times": [823.247785948], "core_cycle_counts": [[284083182251], [790557270542], [943057200703], [632505259624]], "aperf_counts": [[281805240156], [790468557014], [943024839712], [632475096562]], "mperf_counts": [[281819521166], [790471315900], [943025643936], [632475951400]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 06:59:41: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-04 06:59:42: INFO] Estimated completion (whole session): 2019-08-05 18:48:37 (1 day, 11:48:54 from now)
[2019-08-04 06:59:42: INFO] 242 executions left in scheduler queue
[2019-08-04 06:59:42: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 06:59:42: INFO] Estimated completion (next execution): 2019-08-04 07:15:55 (0:16:12 from now)
[2019-08-04 06:59:42: INFO] Reboot in preparation for next execution
[2019-08-04 07:07:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.900 s/op
Iteration   2: 3.581 s/op
Iteration   3: 3.450 s/op
Iteration   4: 3.455 s/op
Iteration   5: 3.447 s/op
Iteration   6: 3.471 s/op
Iteration   7: 3.440 s/op
Iteration   8: 3.476 s/op
Iteration   9: 3.445 s/op
Iteration  10: 3.474 s/op
Iteration  11: 3.482 s/op
Iteration  12: 3.442 s/op
Iteration  13: 3.465 s/op
Iteration  14: 3.442 s/op
Iteration  15: 3.472 s/op
Iteration  16: 3.440 s/op
Iteration  17: 3.432 s/op
Iteration  18: 3.457 s/op
Iteration  19: 3.426 s/op
Iteration  20: 3.461 s/op
Iteration  21: 3.442 s/op
Iteration  22: 3.439 s/op
Iteration  23: 3.472 s/op
Iteration  24: 3.470 s/op
Iteration  25: 3.431 s/op
Iteration  26: 3.465 s/op
Iteration  27: 3.470 s/op
Iteration  28: 3.441 s/op
Iteration  29: 3.453 s/op
Iteration  30: 3.433 s/op
Iteration  31: 3.443 s/op
Iteration  32: 3.449 s/op
Iteration  33: 3.466 s/op
Iteration  34: 3.452 s/op
Iteration  35: 3.463 s/op
Iteration  36: 3.435 s/op
Iteration  37: 3.443 s/op
Iteration  38: 3.477 s/op
Iteration  39: 3.474 s/op
Iteration  40: 3.452 s/op
Iteration  41: 3.467 s/op
Iteration  42: 3.433 s/op
Iteration  43: 3.447 s/op
Iteration  44: 3.438 s/op
Iteration  45: 3.452 s/op
Iteration  46: 3.468 s/op
Iteration  47: 3.460 s/op
Iteration  48: 3.448 s/op
Iteration  49: 3.459 s/op
Iteration  50: 3.505 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.466 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [3.400, 3.450) = 21 
    [3.450, 3.500) = 26 
    [3.500, 3.550) = 1 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.426 s/op
     p(50.0000) =      3.453 s/op
     p(90.0000) =      3.477 s/op
     p(95.0000) =      3.539 s/op
     p(99.0000) =      3.900 s/op
     p(99.9000) =      3.900 s/op
     p(99.9900) =      3.900 s/op
     p(99.9990) =      3.900 s/op
     p(99.9999) =      3.900 s/op
    p(100.0000) =      3.900 s/op


# Run complete. Total time: 00:02:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.466 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_graalvm-ce-19.1.1_1564895059697.json
{"wallclock_times": [174.301392295], "core_cycle_counts": [[128037377113], [132256871414], [160166950327], [156565116976]], "aperf_counts": [[127609308824], [132214156566], [160144250958], [156546490280]], "mperf_counts": [[127626805896], [132215933008], [160152758650], [156565850840]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 07:07:13: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 07:07:14: INFO] Estimated completion (whole session): 2019-08-05 18:50:45 (1 day, 11:43:31 from now)
[2019-08-04 07:07:14: INFO] 241 executions left in scheduler queue
[2019-08-04 07:07:14: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 07:07:14: INFO] Estimated completion (next execution): 2019-08-04 07:12:38 (0:05:23 from now)
[2019-08-04 07:07:14: INFO] Reboot in preparation for next execution
[2019-08-04 07:16:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.893 s/op
Iteration   2: 5.794 s/op
Iteration   3: 5.604 s/op
Iteration   4: 5.594 s/op
Iteration   5: 5.577 s/op
Iteration   6: 5.596 s/op
Iteration   7: 5.602 s/op
Iteration   8: 5.591 s/op
Iteration   9: 5.602 s/op
Iteration  10: 5.593 s/op
Iteration  11: 5.585 s/op
Iteration  12: 5.601 s/op
Iteration  13: 5.612 s/op
Iteration  14: 5.581 s/op
Iteration  15: 5.601 s/op
Iteration  16: 5.609 s/op
Iteration  17: 5.605 s/op
Iteration  18: 5.618 s/op
Iteration  19: 5.586 s/op
Iteration  20: 5.610 s/op
Iteration  21: 5.600 s/op
Iteration  22: 5.588 s/op
Iteration  23: 5.581 s/op
Iteration  24: 5.607 s/op
Iteration  25: 5.592 s/op
Iteration  26: 5.596 s/op
Iteration  27: 5.602 s/op
Iteration  28: 5.604 s/op
Iteration  29: 5.592 s/op
Iteration  30: 5.585 s/op
Iteration  31: 5.594 s/op
Iteration  32: 5.598 s/op
Iteration  33: 5.595 s/op
Iteration  34: 5.602 s/op
Iteration  35: 5.582 s/op
Iteration  36: 5.609 s/op
Iteration  37: 5.605 s/op
Iteration  38: 5.587 s/op
Iteration  39: 5.585 s/op
Iteration  40: 5.606 s/op
Iteration  41: 5.598 s/op
Iteration  42: 5.593 s/op
Iteration  43: 5.603 s/op
Iteration  44: 5.610 s/op
Iteration  45: 5.596 s/op
Iteration  46: 5.605 s/op
Iteration  47: 5.597 s/op
Iteration  48: 5.610 s/op
Iteration  49: 5.590 s/op
Iteration  50: 5.581 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.607 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [5.500, 5.525) = 0 
    [5.525, 5.550) = 0 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 26 
    [5.600, 5.625) = 22 
    [5.625, 5.650) = 0 
    [5.650, 5.675) = 0 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 0 
    [5.775, 5.800) = 1 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 0 
    [5.850, 5.875) = 0 
    [5.875, 5.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.577 s/op
     p(50.0000) =      5.598 s/op
     p(90.0000) =      5.610 s/op
     p(95.0000) =      5.697 s/op
     p(99.0000) =      5.893 s/op
     p(99.9000) =      5.893 s/op
     p(99.9900) =      5.893 s/op
     p(99.9990) =      5.893 s/op
     p(99.9999) =      5.893 s/op
    p(100.0000) =      5.893 s/op


# Run complete. Total time: 00:04:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.607 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_graalvm-ce-19.1.1_1564895486577.json
{"wallclock_times": [281.25164055199997], "core_cycle_counts": [[212374358856], [185151287993], [308353675568], [204061446326]], "aperf_counts": [[211717034215], [185099071358], [308327099805], [204039639670]], "mperf_counts": [[211728030066], [185121279440], [308329631076], [204059958924]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 07:16:07: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 07:16:08: INFO] Estimated completion (whole session): 2019-08-05 18:52:26 (1 day, 11:36:17 from now)
[2019-08-04 07:16:08: INFO] 240 executions left in scheduler queue
[2019-08-04 07:16:08: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 07:16:08: INFO] Estimated completion (next execution): 2019-08-04 07:23:21 (0:07:12 from now)
[2019-08-04 07:16:08: INFO] Reboot in preparation for next execution
[2019-08-04 07:23:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.169 s/op
Iteration   2: 3.679 s/op
Iteration   3: 3.641 s/op
Iteration   4: 3.558 s/op
Iteration   5: 3.598 s/op
Iteration   6: 3.626 s/op
Iteration   7: 3.679 s/op
Iteration   8: 3.632 s/op
Iteration   9: 3.677 s/op
Iteration  10: 3.640 s/op
Iteration  11: 3.635 s/op
Iteration  12: 3.675 s/op
Iteration  13: 3.619 s/op
Iteration  14: 3.619 s/op
Iteration  15: 3.693 s/op
Iteration  16: 3.624 s/op
Iteration  17: 3.625 s/op
Iteration  18: 3.618 s/op
Iteration  19: 3.683 s/op
Iteration  20: 3.620 s/op
Iteration  21: 3.630 s/op
Iteration  22: 3.687 s/op
Iteration  23: 3.620 s/op
Iteration  24: 3.652 s/op
Iteration  25: 3.620 s/op
Iteration  26: 3.672 s/op
Iteration  27: 3.624 s/op
Iteration  28: 3.631 s/op
Iteration  29: 3.682 s/op
Iteration  30: 3.627 s/op
Iteration  31: 3.626 s/op
Iteration  32: 3.681 s/op
Iteration  33: 3.644 s/op
Iteration  34: 3.622 s/op
Iteration  35: 3.630 s/op
Iteration  36: 3.692 s/op
Iteration  37: 3.617 s/op
Iteration  38: 3.611 s/op
Iteration  39: 3.688 s/op
Iteration  40: 3.618 s/op
Iteration  41: 3.615 s/op
Iteration  42: 3.627 s/op
Iteration  43: 3.674 s/op
Iteration  44: 3.623 s/op
Iteration  45: 3.621 s/op
Iteration  46: 3.670 s/op
Iteration  47: 3.637 s/op
Iteration  48: 3.634 s/op
Iteration  49: 3.619 s/op
Iteration  50: 4.014 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.658 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 2 
    [3.600, 3.650) = 31 
    [3.650, 3.700) = 15 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 1 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.558 s/op
     p(50.0000) =      3.630 s/op
     p(90.0000) =      3.688 s/op
     p(95.0000) =      3.837 s/op
     p(99.0000) =      4.169 s/op
     p(99.9000) =      4.169 s/op
     p(99.9900) =      4.169 s/op
     p(99.9990) =      4.169 s/op
     p(99.9999) =      4.169 s/op
    p(100.0000) =      4.169 s/op


# Run complete. Total time: 00:03:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.658 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_graalvm-ce-19.1.1_1564896022726.json
{"wallclock_times": [183.98170602000002], "core_cycle_counts": [[202467989342], [181114211859], [117209295700], [164016646174]], "aperf_counts": [[202017152746], [181059786958], [117158834690], [163977794550]], "mperf_counts": [[202029999460], [181071549744], [117159813462], [163986610612]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 07:23:26: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 07:23:27: INFO] Estimated completion (whole session): 2019-08-05 18:54:09 (1 day, 11:30:41 from now)
[2019-08-04 07:23:27: INFO] 239 executions left in scheduler queue
[2019-08-04 07:23:27: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 07:23:27: INFO] Estimated completion (next execution): 2019-08-04 07:29:02 (0:05:34 from now)
[2019-08-04 07:23:27: INFO] Reboot in preparation for next execution
[2019-08-04 07:36:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.420 s/op
Iteration   2: 10.344 s/op
Iteration   3: 10.151 s/op
Iteration   4: 10.236 s/op
Iteration   5: 10.158 s/op
Iteration   6: 10.192 s/op
Iteration   7: 10.150 s/op
Iteration   8: 10.137 s/op
Iteration   9: 10.142 s/op
Iteration  10: 10.180 s/op
Iteration  11: 10.198 s/op
Iteration  12: 10.167 s/op
Iteration  13: 10.161 s/op
Iteration  14: 10.178 s/op
Iteration  15: 10.164 s/op
Iteration  16: 10.212 s/op
Iteration  17: 10.192 s/op
Iteration  18: 10.252 s/op
Iteration  19: 10.224 s/op
Iteration  20: 10.174 s/op
Iteration  21: 10.165 s/op
Iteration  22: 10.143 s/op
Iteration  23: 10.123 s/op
Iteration  24: 10.163 s/op
Iteration  25: 10.175 s/op
Iteration  26: 10.226 s/op
Iteration  27: 10.176 s/op
Iteration  28: 10.142 s/op
Iteration  29: 10.160 s/op
Iteration  30: 10.148 s/op
Iteration  31: 10.153 s/op
Iteration  32: 10.173 s/op
Iteration  33: 10.161 s/op
Iteration  34: 10.187 s/op
Iteration  35: 10.240 s/op
Iteration  36: 10.188 s/op
Iteration  37: 10.220 s/op
Iteration  38: 10.157 s/op
Iteration  39: 10.177 s/op
Iteration  40: 10.145 s/op
Iteration  41: 10.159 s/op
Iteration  42: 10.166 s/op
Iteration  43: 10.179 s/op
Iteration  44: 10.149 s/op
Iteration  45: 10.207 s/op
Iteration  46: 10.164 s/op
Iteration  47: 10.160 s/op
Iteration  48: 10.130 s/op
Iteration  49: 10.162 s/op
Iteration  50: 10.162 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.182 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [10.100, 10.125) = 1 
    [10.125, 10.150) = 9 
    [10.150, 10.175) = 20 
    [10.175, 10.200) = 10 
    [10.200, 10.225) = 4 
    [10.225, 10.250) = 3 
    [10.250, 10.275) = 1 
    [10.275, 10.300) = 0 
    [10.300, 10.325) = 0 
    [10.325, 10.350) = 1 
    [10.350, 10.375) = 0 
    [10.375, 10.400) = 0 
    [10.400, 10.425) = 1 
    [10.425, 10.450) = 0 
    [10.450, 10.475) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.123 s/op
     p(50.0000) =     10.166 s/op
     p(90.0000) =     10.235 s/op
     p(95.0000) =     10.294 s/op
     p(99.0000) =     10.420 s/op
     p(99.9000) =     10.420 s/op
     p(99.9900) =     10.420 s/op
     p(99.9990) =     10.420 s/op
     p(99.9999) =     10.420 s/op
    p(100.0000) =     10.420 s/op


# Run complete. Total time: 00:08:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.182 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_graalvm-ce-19.1.1_1564896484247.json
{"wallclock_times": [510.03413785099997], "core_cycle_counts": [[340242357230], [376167852855], [515527791490], [411345788955]], "aperf_counts": [[338996694240], [376086554472], [515498230455], [411320294820]], "mperf_counts": [[339018498834], [376092898398], [515499058980], [411322128832]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 07:36:34: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-04 07:36:35: INFO] Estimated completion (whole session): 2019-08-05 18:56:15 (1 day, 11:19:40 from now)
[2019-08-04 07:36:35: INFO] 238 executions left in scheduler queue
[2019-08-04 07:36:35: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-04 07:36:35: INFO] Estimated completion (next execution): 2019-08-04 07:47:35 (0:11:00 from now)
[2019-08-04 07:36:35: INFO] Reboot in preparation for next execution
[2019-08-04 07:42:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.795 s/op
Iteration   2: 1.582 s/op
Iteration   3: 1.570 s/op
Iteration   4: 1.657 s/op
Iteration   5: 1.571 s/op
Iteration   6: 1.568 s/op
Iteration   7: 1.571 s/op
Iteration   8: 1.572 s/op
Iteration   9: 1.567 s/op
Iteration  10: 1.567 s/op
Iteration  11: 1.567 s/op
Iteration  12: 1.559 s/op
Iteration  13: 1.571 s/op
Iteration  14: 1.563 s/op
Iteration  15: 1.564 s/op
Iteration  16: 1.571 s/op
Iteration  17: 1.570 s/op
Iteration  18: 1.570 s/op
Iteration  19: 1.563 s/op
Iteration  20: 1.566 s/op
Iteration  21: 1.561 s/op
Iteration  22: 1.561 s/op
Iteration  23: 1.565 s/op
Iteration  24: 1.562 s/op
Iteration  25: 1.574 s/op
Iteration  26: 1.577 s/op
Iteration  27: 1.567 s/op
Iteration  28: 1.567 s/op
Iteration  29: 1.570 s/op
Iteration  30: 1.565 s/op
Iteration  31: 1.565 s/op
Iteration  32: 1.567 s/op
Iteration  33: 1.570 s/op
Iteration  34: 1.561 s/op
Iteration  35: 1.570 s/op
Iteration  36: 1.561 s/op
Iteration  37: 1.571 s/op
Iteration  38: 1.575 s/op
Iteration  39: 1.562 s/op
Iteration  40: 1.576 s/op
Iteration  41: 1.561 s/op
Iteration  42: 1.562 s/op
Iteration  43: 1.562 s/op
Iteration  44: 1.565 s/op
Iteration  45: 1.565 s/op
Iteration  46: 1.560 s/op
Iteration  47: 1.563 s/op
Iteration  48: 1.569 s/op
Iteration  49: 1.577 s/op
Iteration  50: 1.570 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.574 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 44 
    [1.575, 1.600) = 4 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.559 s/op
     p(50.0000) =      1.567 s/op
     p(90.0000) =      1.577 s/op
     p(95.0000) =      1.616 s/op
     p(99.0000) =      1.795 s/op
     p(99.9000) =      1.795 s/op
     p(99.9900) =      1.795 s/op
     p(99.9990) =      1.795 s/op
     p(99.9999) =      1.795 s/op
    p(100.0000) =      1.795 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.574 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_graalvm-ce-19.1.1_1564897295307.json
{"wallclock_times": [79.58845661399997], "core_cycle_counts": [[53819205662], [115314175805], [63607424424], [32658035512]], "aperf_counts": [[53537363566], [115290101746], [63587288709], [32634992607]], "mperf_counts": [[53553217590], [115306784232], [63594189728], [32636242618]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 07:42:54: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-04 07:42:55: INFO] Estimated completion (whole session): 2019-08-05 18:58:46 (1 day, 11:15:50 from now)
[2019-08-04 07:42:55: INFO] 237 executions left in scheduler queue
[2019-08-04 07:42:55: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-04 07:42:55: INFO] Estimated completion (next execution): 2019-08-04 07:46:46 (0:03:50 from now)
[2019-08-04 07:42:55: INFO] Reboot in preparation for next execution
[2019-08-04 07:48:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.792 s/op
Iteration   2: 1.560 s/op
Iteration   3: 1.553 s/op
Iteration   4: 1.656 s/op
Iteration   5: 1.548 s/op
Iteration   6: 1.549 s/op
Iteration   7: 1.551 s/op
Iteration   8: 1.546 s/op
Iteration   9: 1.547 s/op
Iteration  10: 1.548 s/op
Iteration  11: 1.550 s/op
Iteration  12: 1.547 s/op
Iteration  13: 1.546 s/op
Iteration  14: 1.545 s/op
Iteration  15: 1.547 s/op
Iteration  16: 1.546 s/op
Iteration  17: 1.549 s/op
Iteration  18: 1.548 s/op
Iteration  19: 1.548 s/op
Iteration  20: 1.550 s/op
Iteration  21: 1.546 s/op
Iteration  22: 1.548 s/op
Iteration  23: 1.547 s/op
Iteration  24: 1.548 s/op
Iteration  25: 1.549 s/op
Iteration  26: 1.546 s/op
Iteration  27: 1.549 s/op
Iteration  28: 1.548 s/op
Iteration  29: 1.548 s/op
Iteration  30: 1.546 s/op
Iteration  31: 1.548 s/op
Iteration  32: 1.545 s/op
Iteration  33: 1.550 s/op
Iteration  34: 1.547 s/op
Iteration  35: 1.548 s/op
Iteration  36: 1.548 s/op
Iteration  37: 1.547 s/op
Iteration  38: 1.547 s/op
Iteration  39: 1.547 s/op
Iteration  40: 1.548 s/op
Iteration  41: 1.551 s/op
Iteration  42: 1.550 s/op
Iteration  43: 1.547 s/op
Iteration  44: 1.548 s/op
Iteration  45: 1.548 s/op
Iteration  46: 1.547 s/op
Iteration  47: 1.549 s/op
Iteration  48: 1.546 s/op
Iteration  49: 1.545 s/op
Iteration  50: 1.548 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.555 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 43 
    [1.550, 1.575) = 5 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.545 s/op
     p(50.0000) =      1.548 s/op
     p(90.0000) =      1.551 s/op
     p(95.0000) =      1.603 s/op
     p(99.0000) =      1.792 s/op
     p(99.9000) =      1.792 s/op
     p(99.9900) =      1.792 s/op
     p(99.9990) =      1.792 s/op
     p(99.9999) =      1.792 s/op
    p(100.0000) =      1.792 s/op


# Run complete. Total time: 00:01:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.555 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_graalvm-ce-19.1.1_1564897640502.json
{"wallclock_times": [78.592766127], "core_cycle_counts": [[101397414694], [11548448330], [55086400667], [89024653207]], "aperf_counts": [[101246148927], [11519156822], [55071707163], [89012778943]], "mperf_counts": [[101270988670], [11521201278], [55091209882], [89014074888]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 07:48:39: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-04 07:48:40: INFO] Estimated completion (whole session): 2019-08-05 19:00:42 (1 day, 11:12:02 from now)
[2019-08-04 07:48:40: INFO] 236 executions left in scheduler queue
[2019-08-04 07:48:40: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-08-04 07:48:40: INFO] Estimated completion (next execution): 2019-08-04 07:52:28 (0:03:48 from now)
[2019-08-04 07:48:40: INFO] Reboot in preparation for next execution
[2019-08-04 08:02:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.312 s/op
Iteration   2: 11.415 s/op
Iteration   3: 10.931 s/op
Iteration   4: 11.106 s/op
Iteration   5: 11.181 s/op
Iteration   6: 11.058 s/op
Iteration   7: 11.118 s/op
Iteration   8: 11.019 s/op
Iteration   9: 10.954 s/op
Iteration  10: 11.029 s/op
Iteration  11: 11.065 s/op
Iteration  12: 11.991 s/op
Iteration  13: 11.082 s/op
Iteration  14: 11.145 s/op
Iteration  15: 10.898 s/op
Iteration  16: 10.919 s/op
Iteration  17: 10.967 s/op
Iteration  18: 11.015 s/op
Iteration  19: 11.005 s/op
Iteration  20: 11.057 s/op
Iteration  21: 11.115 s/op
Iteration  22: 11.099 s/op
Iteration  23: 11.745 s/op
Iteration  24: 11.135 s/op
Iteration  25: 11.150 s/op
Iteration  26: 10.969 s/op
Iteration  27: 11.006 s/op
Iteration  28: 10.985 s/op
Iteration  29: 10.991 s/op
Iteration  30: 11.001 s/op
Iteration  31: 11.060 s/op
Iteration  32: 11.130 s/op
Iteration  33: 11.120 s/op
Iteration  34: 11.753 s/op
Iteration  35: 11.140 s/op
Iteration  36: 11.124 s/op
Iteration  37: 10.976 s/op
Iteration  38: 10.977 s/op
Iteration  39: 11.009 s/op
Iteration  40: 11.073 s/op
Iteration  41: 11.014 s/op
Iteration  42: 11.029 s/op
Iteration  43: 11.087 s/op
Iteration  44: 11.158 s/op
Iteration  45: 11.715 s/op
Iteration  46: 11.124 s/op
Iteration  47: 11.092 s/op
Iteration  48: 10.949 s/op
Iteration  49: 11.027 s/op
Iteration  50: 10.982 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     11.120 ?(99.9%) 0.112 s/op

  Histogram, s/op:
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 0 
    [10.375, 10.500) = 0 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 
    [10.875, 11.000) = 12 
    [11.000, 11.125) = 25 
    [11.125, 11.250) = 7 
    [11.250, 11.375) = 1 
    [11.375, 11.500) = 1 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 2 
    [11.750, 11.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.898 s/op
     p(50.0000) =     11.063 s/op
     p(90.0000) =     11.404 s/op
     p(95.0000) =     11.749 s/op
     p(99.0000) =     11.991 s/op
     p(99.9000) =     11.991 s/op
     p(99.9900) =     11.991 s/op
     p(99.9990) =     11.991 s/op
     p(99.9999) =     11.991 s/op
    p(100.0000) =     11.991 s/op


# Run complete. Total time: 00:09:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.120 ? 0.112   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot-8u222-b10_1564897976416.json
{"wallclock_times": [557.177379404], "core_cycle_counts": [[455687610846], [418952158495], [573791200939], [615873775346]], "aperf_counts": [[454090585423], [418804871870], [573718178541], [615805355170]], "mperf_counts": [[454094147628], [418806849968], [573729323102], [615807179342]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 08:02:13: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-08-04 08:02:14: INFO] Estimated completion (whole session): 2019-08-05 19:02:27 (1 day, 11:00:13 from now)
[2019-08-04 08:02:14: INFO] 235 executions left in scheduler queue
[2019-08-04 08:02:14: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-04 08:02:14: INFO] Estimated completion (next execution): 2019-08-04 08:14:02 (0:11:48 from now)
[2019-08-04 08:02:14: INFO] Reboot in preparation for next execution
[2019-08-04 08:06:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 08:06:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 08:06:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 08:06:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 08:06:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 08:08:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.122 s/op
Iteration   2: 2.380 s/op
Iteration   3: 2.020 s/op
Iteration   4: 1.879 s/op
Iteration   5: 2.020 s/op
Iteration   6: 2.003 s/op
Iteration   7: 1.848 s/op
Iteration   8: 2.017 s/op
Iteration   9: 2.009 s/op
Iteration  10: 2.005 s/op
Iteration  11: 1.987 s/op
Iteration  12: 2.015 s/op
Iteration  13: 2.003 s/op
Iteration  14: 1.997 s/op
Iteration  15: 2.004 s/op
Iteration  16: 2.002 s/op
Iteration  17: 1.997 s/op
Iteration  18: 2.004 s/op
Iteration  19: 2.007 s/op
Iteration  20: 2.006 s/op
Iteration  21: 1.995 s/op
Iteration  22: 2.002 s/op
Iteration  23: 1.965 s/op
Iteration  24: 2.002 s/op
Iteration  25: 1.994 s/op
Iteration  26: 1.995 s/op
Iteration  27: 2.006 s/op
Iteration  28: 2.004 s/op
Iteration  29: 1.925 s/op
Iteration  30: 1.984 s/op
Iteration  31: 2.002 s/op
Iteration  32: 1.996 s/op
Iteration  33: 1.999 s/op
Iteration  34: 2.008 s/op
Iteration  35: 2.003 s/op
Iteration  36: 1.997 s/op
Iteration  37: 2.000 s/op
Iteration  38: 2.004 s/op
Iteration  39: 2.000 s/op
Iteration  40: 1.991 s/op
Iteration  41: 1.900 s/op
Iteration  42: 2.001 s/op
Iteration  43: 1.991 s/op
Iteration  44: 1.996 s/op
Iteration  45: 1.985 s/op
Iteration  46: 2.001 s/op
Iteration  47: 1.996 s/op
Iteration  48: 1.996 s/op
Iteration  49: 2.002 s/op
Iteration  50: 1.999 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.001 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 2 
    [1.950, 2.000) = 18 
    [2.000, 2.050) = 26 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.848 s/op
     p(50.0000) =      2.001 s/op
     p(90.0000) =      2.017 s/op
     p(95.0000) =      2.066 s/op
     p(99.0000) =      2.380 s/op
     p(99.9000) =      2.380 s/op
     p(99.9900) =      2.380 s/op
     p(99.9990) =      2.380 s/op
     p(99.9999) =      2.380 s/op
    p(100.0000) =      2.380 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.001 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot_12.0.2_1564898799689.json
{"wallclock_times": [101.07657754999997], "core_cycle_counts": [[64877685729], [49392806838], [69834634592], [116630232362]], "aperf_counts": [[64572773242], [49354631418], [69808747788], [116613540153]], "mperf_counts": [[73009324746], [55829226416], [78575079532], [131721485618]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 08:08:20: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-04 08:08:21: INFO] Estimated completion (whole session): 2019-08-05 19:04:23 (1 day, 10:56:02 from now)
[2019-08-04 08:08:21: INFO] 234 executions left in scheduler queue
[2019-08-04 08:08:21: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-04 08:08:21: INFO] Estimated completion (next execution): 2019-08-04 08:12:33 (0:04:11 from now)
[2019-08-04 08:08:21: INFO] Reboot in preparation for next execution
[2019-08-04 08:12:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 08:12:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 08:12:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 08:12:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 08:12:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 08:13:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.797 s/op
Iteration   2: 1.707 s/op
Iteration   3: 1.818 s/op
Iteration   4: 1.709 s/op
Iteration   5: 1.851 s/op
Iteration   6: 1.877 s/op
Iteration   7: 1.699 s/op
Iteration   8: 1.725 s/op
Iteration   9: 1.688 s/op
Iteration  10: 1.680 s/op
Iteration  11: 1.703 s/op
Iteration  12: 1.732 s/op
Iteration  13: 1.649 s/op
Iteration  14: 1.629 s/op
Iteration  15: 1.683 s/op
Iteration  16: 1.698 s/op
Iteration  17: 1.659 s/op
Iteration  18: 1.652 s/op
Iteration  19: 1.628 s/op
Iteration  20: 1.709 s/op
Iteration  21: 1.649 s/op
Iteration  22: 1.701 s/op
Iteration  23: 1.685 s/op
Iteration  24: 1.660 s/op
Iteration  25: 1.637 s/op
Iteration  26: 1.710 s/op
Iteration  27: 1.647 s/op
Iteration  28: 1.630 s/op
Iteration  29: 1.656 s/op
Iteration  30: 1.677 s/op
Iteration  31: 1.732 s/op
Iteration  32: 1.651 s/op
Iteration  33: 1.700 s/op
Iteration  34: 1.669 s/op
Iteration  35: 1.658 s/op
Iteration  36: 1.674 s/op
Iteration  37: 1.660 s/op
Iteration  38: 1.636 s/op
Iteration  39: 1.710 s/op
Iteration  40: 1.641 s/op
Iteration  41: 1.683 s/op
Iteration  42: 1.649 s/op
Iteration  43: 1.642 s/op
Iteration  44: 1.627 s/op
Iteration  45: 1.689 s/op
Iteration  46: 1.704 s/op
Iteration  47: 1.725 s/op
Iteration  48: 1.624 s/op
Iteration  49: 1.636 s/op
Iteration  50: 1.646 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.686 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 14 
    [1.650, 1.675) = 9 
    [1.675, 1.700) = 10 
    [1.700, 1.725) = 9 
    [1.725, 1.750) = 3 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 1 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 1 
    [1.875, 1.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.624 s/op
     p(50.0000) =      1.678 s/op
     p(90.0000) =      1.732 s/op
     p(95.0000) =      1.833 s/op
     p(99.0000) =      1.877 s/op
     p(99.9000) =      1.877 s/op
     p(99.9900) =      1.877 s/op
     p(99.9990) =      1.877 s/op
     p(99.9999) =      1.877 s/op
    p(100.0000) =      1.877 s/op


# Run complete. Total time: 00:01:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.686 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot_12.0.2_1564899154703.json
{"wallclock_times": [85.24485288100001], "core_cycle_counts": [[62513658025], [77635310809], [49942358551], [87993578798]], "aperf_counts": [[62282591348], [77604605651], [49923067643], [87972751042]], "mperf_counts": [[62831241580], [78167067660], [50330800730], [88294621588]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 08:13:59: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-04 08:14:00: INFO] Estimated completion (whole session): 2019-08-05 19:06:09 (1 day, 10:52:08 from now)
[2019-08-04 08:14:00: INFO] 233 executions left in scheduler queue
[2019-08-04 08:14:00: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-08-04 08:14:00: INFO] Estimated completion (next execution): 2019-08-04 08:17:55 (0:03:54 from now)
[2019-08-04 08:14:00: INFO] Reboot in preparation for next execution
[2019-08-04 08:28:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.600 s/op
Iteration   2: 12.219 s/op
Iteration   3: 12.260 s/op
Iteration   4: 12.296 s/op
Iteration   5: 12.290 s/op
Iteration   6: 12.478 s/op
Iteration   7: 12.154 s/op
Iteration   8: 12.324 s/op
Iteration   9: 12.157 s/op
Iteration  10: 12.334 s/op
Iteration  11: 12.241 s/op
Iteration  12: 12.775 s/op
Iteration  13: 12.129 s/op
Iteration  14: 12.315 s/op
Iteration  15: 12.132 s/op
Iteration  16: 12.285 s/op
Iteration  17: 12.473 s/op
Iteration  18: 12.875 s/op
Iteration  19: 12.474 s/op
Iteration  20: 12.848 s/op
Iteration  21: 12.510 s/op
Iteration  22: 12.870 s/op
Iteration  23: 13.072 s/op
Iteration  24: 12.782 s/op
Iteration  25: 12.447 s/op
Iteration  26: 12.795 s/op
Iteration  27: 12.439 s/op
Iteration  28: 12.581 s/op
Iteration  29: 12.481 s/op
Iteration  30: 12.536 s/op
Iteration  31: 12.774 s/op
Iteration  32: 12.551 s/op
Iteration  33: 12.692 s/op
Iteration  34: 13.086 s/op
Iteration  35: 12.639 s/op
Iteration  36: 12.506 s/op
Iteration  37: 12.671 s/op
Iteration  38: 12.528 s/op
Iteration  39: 12.693 s/op
Iteration  40: 12.526 s/op
Iteration  41: 12.675 s/op
Iteration  42: 12.582 s/op
Iteration  43: 12.695 s/op
Iteration  44: 12.591 s/op
Iteration  45: 13.302 s/op
Iteration  46: 12.520 s/op
Iteration  47: 12.658 s/op
Iteration  48: 12.498 s/op
Iteration  49: 12.672 s/op
Iteration  50: 12.539 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     12.551 ?(99.9%) 0.125 s/op

  Histogram, s/op:
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 6 
    [12.250, 12.375) = 7 
    [12.375, 12.500) = 7 
    [12.500, 12.625) = 12 
    [12.625, 12.750) = 8 
    [12.750, 12.875) = 6 
    [12.875, 13.000) = 1 
    [13.000, 13.125) = 2 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 1 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.129 s/op
     p(50.0000) =     12.532 s/op
     p(90.0000) =     12.868 s/op
     p(95.0000) =     13.078 s/op
     p(99.0000) =     13.302 s/op
     p(99.9000) =     13.302 s/op
     p(99.9900) =     13.302 s/op
     p(99.9990) =     13.302 s/op
     p(99.9999) =     13.302 s/op
    p(100.0000) =     13.302 s/op


# Run complete. Total time: 00:10:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.551 ? 0.125   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot-8u222-b10_1564899495277.json
{"wallclock_times": [628.758205187], "core_cycle_counts": [[556888933783], [569760497588], [689051045197], [502243311778]], "aperf_counts": [[555170862890], [569605185206], [688947528776], [502155763621]], "mperf_counts": [[555177032932], [569618209912], [688947591752], [502155853206]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 08:28:44: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-08-04 08:28:44: INFO] Estimated completion (whole session): 2019-08-05 19:08:03 (1 day, 10:39:18 from now)
[2019-08-04 08:28:44: INFO] 232 executions left in scheduler queue
[2019-08-04 08:28:44: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-04 08:28:44: INFO] Estimated completion (next execution): 2019-08-04 08:41:39 (0:12:54 from now)
[2019-08-04 08:28:44: INFO] Reboot in preparation for next execution
[2019-08-04 08:33:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 08:35:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.709 s/op
Iteration   2: 2.121 s/op
Iteration   3: 2.078 s/op
Iteration   4: 2.054 s/op
Iteration   5: 2.031 s/op
Iteration   6: 1.891 s/op
Iteration   7: 1.854 s/op
Iteration   8: 1.881 s/op
Iteration   9: 1.897 s/op
Iteration  10: 1.847 s/op
Iteration  11: 1.857 s/op
Iteration  12: 1.838 s/op
Iteration  13: 1.872 s/op
Iteration  14: 1.875 s/op
Iteration  15: 1.880 s/op
Iteration  16: 1.888 s/op
Iteration  17: 1.875 s/op
Iteration  18: 1.906 s/op
Iteration  19: 1.883 s/op
Iteration  20: 1.917 s/op
Iteration  21: 1.876 s/op
Iteration  22: 1.873 s/op
Iteration  23: 1.889 s/op
Iteration  24: 1.895 s/op
Iteration  25: 1.909 s/op
Iteration  26: 1.916 s/op
Iteration  27: 1.878 s/op
Iteration  28: 1.887 s/op
Iteration  29: 1.873 s/op
Iteration  30: 1.888 s/op
Iteration  31: 1.905 s/op
Iteration  32: 1.885 s/op
Iteration  33: 1.924 s/op
Iteration  34: 1.910 s/op
Iteration  35: 1.922 s/op
Iteration  36: 1.920 s/op
Iteration  37: 1.900 s/op
Iteration  38: 1.883 s/op
Iteration  39: 1.890 s/op
Iteration  40: 1.884 s/op
Iteration  41: 1.913 s/op
Iteration  42: 1.904 s/op
Iteration  43: 1.869 s/op
Iteration  44: 1.913 s/op
Iteration  45: 1.898 s/op
Iteration  46: 1.907 s/op
Iteration  47: 1.912 s/op
Iteration  48: 1.892 s/op
Iteration  49: 1.893 s/op
Iteration  50: 1.901 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.921 ?(99.9%) 0.062 s/op

  Histogram, s/op:
    [1.800, 1.900) = 29 
    [1.900, 2.000) = 16 
    [2.000, 2.100) = 3 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.838 s/op
     p(50.0000) =      1.893 s/op
     p(90.0000) =      2.020 s/op
     p(95.0000) =      2.097 s/op
     p(99.0000) =      2.709 s/op
     p(99.9000) =      2.709 s/op
     p(99.9900) =      2.709 s/op
     p(99.9990) =      2.709 s/op
     p(99.9999) =      2.709 s/op
    p(100.0000) =      2.709 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.921 ? 0.062   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9-8u222-b10_1564900430325.json
{"wallclock_times": [97.331351781], "core_cycle_counts": [[58472557446], [120368760799], [85677883366], [76085321430]], "aperf_counts": [[58078994405], [120307217935], [85631228609], [76041830708]], "mperf_counts": [[58084744152], [120307662624], [85631771494], [76041834496]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 08:35:27: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-04 08:35:28: INFO] Estimated completion (whole session): 2019-08-05 19:10:40 (1 day, 10:35:11 from now)
[2019-08-04 08:35:28: INFO] 231 executions left in scheduler queue
[2019-08-04 08:35:28: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-04 08:35:28: INFO] Estimated completion (next execution): 2019-08-04 08:39:35 (0:04:07 from now)
[2019-08-04 08:35:28: INFO] Reboot in preparation for next execution
[2019-08-04 08:39:43: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 08:41:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.264 s/op
Iteration   2: 2.902 s/op
Iteration   3: 2.607 s/op
Iteration   4: 2.444 s/op
Iteration   5: 2.231 s/op
Iteration   6: 2.283 s/op
Iteration   7: 2.285 s/op
Iteration   8: 2.317 s/op
Iteration   9: 2.331 s/op
Iteration  10: 2.274 s/op
Iteration  11: 2.288 s/op
Iteration  12: 2.284 s/op
Iteration  13: 2.342 s/op
Iteration  14: 2.329 s/op
Iteration  15: 2.311 s/op
Iteration  16: 2.301 s/op
Iteration  17: 2.321 s/op
Iteration  18: 2.307 s/op
Iteration  19: 2.326 s/op
Iteration  20: 2.307 s/op
Iteration  21: 2.305 s/op
Iteration  22: 2.318 s/op
Iteration  23: 2.331 s/op
Iteration  24: 2.275 s/op
Iteration  25: 2.324 s/op
Iteration  26: 2.297 s/op
Iteration  27: 2.326 s/op
Iteration  28: 2.305 s/op
Iteration  29: 2.292 s/op
Iteration  30: 2.324 s/op
Iteration  31: 2.292 s/op
Iteration  32: 2.283 s/op
Iteration  33: 2.287 s/op
Iteration  34: 2.319 s/op
Iteration  35: 2.319 s/op
Iteration  36: 2.316 s/op
Iteration  37: 2.320 s/op
Iteration  38: 2.276 s/op
Iteration  39: 2.316 s/op
Iteration  40: 2.272 s/op
Iteration  41: 2.296 s/op
Iteration  42: 2.302 s/op
Iteration  43: 2.293 s/op
Iteration  44: 2.306 s/op
Iteration  45: 2.295 s/op
Iteration  46: 2.261 s/op
Iteration  47: 2.297 s/op
Iteration  48: 2.315 s/op
Iteration  49: 2.285 s/op
Iteration  50: 2.298 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.342 ?(99.9%) 0.082 s/op

  Histogram, s/op:
    [2.000, 2.125) = 0 
    [2.125, 2.250) = 1 
    [2.250, 2.375) = 45 
    [2.375, 2.500) = 1 
    [2.500, 2.625) = 1 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 
    [2.875, 3.000) = 1 
    [3.000, 3.125) = 0 
    [3.125, 3.250) = 0 
    [3.250, 3.375) = 1 
    [3.375, 3.500) = 0 
    [3.500, 3.625) = 0 
    [3.625, 3.750) = 0 
    [3.750, 3.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.231 s/op
     p(50.0000) =      2.306 s/op
     p(90.0000) =      2.341 s/op
     p(95.0000) =      2.740 s/op
     p(99.0000) =      3.264 s/op
     p(99.9000) =      3.264 s/op
     p(99.9900) =      3.264 s/op
     p(99.9990) =      3.264 s/op
     p(99.9999) =      3.264 s/op
    p(100.0000) =      3.264 s/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.342 ? 0.082   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9-8u222-b10_1564900783505.json
{"wallclock_times": [118.23406110899998], "core_cycle_counts": [[114208561104], [71471422571], [114811259912], [104833199837]], "aperf_counts": [[113892804578], [71409215277], [114767552699], [104798811521]], "mperf_counts": [[113893769700], [71409199948], [114767601512], [104799268124]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 08:41:41: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-04 08:41:42: INFO] Estimated completion (whole session): 2019-08-05 19:12:24 (1 day, 10:30:42 from now)
[2019-08-04 08:41:42: INFO] 230 executions left in scheduler queue
[2019-08-04 08:41:42: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 08:41:42: INFO] Estimated completion (next execution): 2019-08-04 08:46:11 (0:04:28 from now)
[2019-08-04 08:41:42: INFO] Reboot in preparation for next execution
[2019-08-04 08:45:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 08:45:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 08:45:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 08:45:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 08:45:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 08:51:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.041 s/op
Iteration   2: 7.183 s/op
Iteration   3: 6.409 s/op
Iteration   4: 7.188 s/op
Iteration   5: 6.606 s/op
Iteration   6: 6.878 s/op
Iteration   7: 6.871 s/op
Iteration   8: 6.499 s/op
Iteration   9: 6.880 s/op
Iteration  10: 6.869 s/op
Iteration  11: 6.886 s/op
Iteration  12: 6.886 s/op
Iteration  13: 6.877 s/op
Iteration  14: 6.845 s/op
Iteration  15: 6.872 s/op
Iteration  16: 6.886 s/op
Iteration  17: 6.897 s/op
Iteration  18: 6.888 s/op
Iteration  19: 6.925 s/op
Iteration  20: 6.878 s/op
Iteration  21: 6.890 s/op
Iteration  22: 6.332 s/op
Iteration  23: 6.243 s/op
Iteration  24: 6.092 s/op
Iteration  25: 6.898 s/op
Iteration  26: 6.904 s/op
Iteration  27: 6.535 s/op
Iteration  28: 6.853 s/op
Iteration  29: 6.867 s/op
Iteration  30: 6.863 s/op
Iteration  31: 6.861 s/op
Iteration  32: 6.872 s/op
Iteration  33: 6.855 s/op
Iteration  34: 6.739 s/op
Iteration  35: 6.891 s/op
Iteration  36: 6.883 s/op
Iteration  37: 6.840 s/op
Iteration  38: 6.492 s/op
Iteration  39: 6.179 s/op
Iteration  40: 6.849 s/op
Iteration  41: 6.543 s/op
Iteration  42: 6.871 s/op
Iteration  43: 6.846 s/op
Iteration  44: 6.558 s/op
Iteration  45: 6.751 s/op
Iteration  46: 6.447 s/op
Iteration  47: 6.613 s/op
Iteration  48: 6.293 s/op
Iteration  49: 6.887 s/op
Iteration  50: 6.902 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.758 ?(99.9%) 0.120 s/op

  Histogram, s/op:
    [6.000, 6.125) = 1 
    [6.125, 6.250) = 2 
    [6.250, 6.375) = 2 
    [6.375, 6.500) = 4 
    [6.500, 6.625) = 5 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 15 
    [6.875, 7.000) = 17 
    [7.000, 7.125) = 1 
    [7.125, 7.250) = 2 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.092 s/op
     p(50.0000) =      6.868 s/op
     p(90.0000) =      6.904 s/op
     p(95.0000) =      7.105 s/op
     p(99.0000) =      7.188 s/op
     p(99.9000) =      7.188 s/op
     p(99.9900) =      7.188 s/op
     p(99.9990) =      7.188 s/op
     p(99.9999) =      7.188 s/op
    p(100.0000) =      7.188 s/op


# Run complete. Total time: 00:05:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.758 ? 0.120   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot_12.0.2_1564901157001.json
{"wallclock_times": [339.027878591], "core_cycle_counts": [[164621063149], [242449788049], [339649940038], [241779618088]], "aperf_counts": [[163714150905], [242351675878], [339591510372], [241742489956]], "mperf_counts": [[179786144058], [269525453892], [382923156024], [270615067510]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 08:51:36: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 08:51:36: INFO] Estimated completion (whole session): 2019-08-05 19:14:06 (1 day, 10:22:29 from now)
[2019-08-04 08:51:36: INFO] 229 executions left in scheduler queue
[2019-08-04 08:51:36: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 08:51:36: INFO] Estimated completion (next execution): 2019-08-04 08:59:48 (0:08:11 from now)
[2019-08-04 08:51:36: INFO] Reboot in preparation for next execution
[2019-08-04 08:55:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 08:55:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 08:55:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 08:55:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 08:55:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 09:04:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.720 s/op
Iteration   2: 11.390 s/op
Iteration   3: 11.026 s/op
Iteration   4: 10.753 s/op
Iteration   5: 10.716 s/op
Iteration   6: 10.731 s/op
Iteration   7: 10.794 s/op
Iteration   8: 10.734 s/op
Iteration   9: 10.771 s/op
Iteration  10: 10.741 s/op
Iteration  11: 10.742 s/op
Iteration  12: 10.713 s/op
Iteration  13: 10.762 s/op
Iteration  14: 10.747 s/op
Iteration  15: 10.739 s/op
Iteration  16: 10.749 s/op
Iteration  17: 10.731 s/op
Iteration  18: 10.746 s/op
Iteration  19: 10.750 s/op
Iteration  20: 10.735 s/op
Iteration  21: 10.723 s/op
Iteration  22: 10.734 s/op
Iteration  23: 10.734 s/op
Iteration  24: 10.753 s/op
Iteration  25: 10.708 s/op
Iteration  26: 10.711 s/op
Iteration  27: 10.732 s/op
Iteration  28: 10.721 s/op
Iteration  29: 10.723 s/op
Iteration  30: 10.727 s/op
Iteration  31: 10.751 s/op
Iteration  32: 10.731 s/op
Iteration  33: 10.735 s/op
Iteration  34: 10.746 s/op
Iteration  35: 10.741 s/op
Iteration  36: 10.740 s/op
Iteration  37: 10.739 s/op
Iteration  38: 10.739 s/op
Iteration  39: 10.744 s/op
Iteration  40: 10.724 s/op
Iteration  41: 10.713 s/op
Iteration  42: 10.734 s/op
Iteration  43: 10.727 s/op
Iteration  44: 10.735 s/op
Iteration  45: 10.732 s/op
Iteration  46: 10.726 s/op
Iteration  47: 10.723 s/op
Iteration  48: 10.747 s/op
Iteration  49: 10.736 s/op
Iteration  50: 10.742 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.755 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [10.700, 10.750) = 42 
    [10.750, 10.800) = 6 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 1 
    [11.050, 11.100) = 0 
    [11.100, 11.150) = 0 
    [11.150, 11.200) = 0 
    [11.200, 11.250) = 0 
    [11.250, 11.300) = 0 
    [11.300, 11.350) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.708 s/op
     p(50.0000) =     10.735 s/op
     p(90.0000) =     10.761 s/op
     p(95.0000) =     10.899 s/op
     p(99.0000) =     11.390 s/op
     p(99.9000) =     11.390 s/op
     p(99.9900) =     11.390 s/op
     p(99.9990) =     11.390 s/op
     p(99.9999) =     11.390 s/op
    p(100.0000) =     11.390 s/op


# Run complete. Total time: 00:08:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.755 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot_12.0.2_1564901749592.json
{"wallclock_times": [538.770938028], "core_cycle_counts": [[174639674711], [269456708308], [1076654358483], [221159503049]], "aperf_counts": [[173101243402], [269318306081], [1076601226722], [221089955503]], "mperf_counts": [[173590622054], [269379790402], [1076692777640], [221151998886]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 09:04:48: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 09:04:49: INFO] Estimated completion (whole session): 2019-08-05 19:15:53 (1 day, 10:11:03 from now)
[2019-08-04 09:04:49: INFO] 228 executions left in scheduler queue
[2019-08-04 09:04:49: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 09:04:49: INFO] Estimated completion (next execution): 2019-08-04 09:16:16 (0:11:27 from now)
[2019-08-04 09:04:49: INFO] Reboot in preparation for next execution
[2019-08-04 09:09:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 09:09:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 09:09:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 09:09:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 09:09:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 09:14:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.235 s/op
Iteration   2: 6.801 s/op
Iteration   3: 6.959 s/op
Iteration   4: 6.719 s/op
Iteration   5: 6.791 s/op
Iteration   6: 6.741 s/op
Iteration   7: 6.816 s/op
Iteration   8: 6.825 s/op
Iteration   9: 6.661 s/op
Iteration  10: 6.806 s/op
Iteration  11: 6.681 s/op
Iteration  12: 6.862 s/op
Iteration  13: 6.798 s/op
Iteration  14: 6.700 s/op
Iteration  15: 6.829 s/op
Iteration  16: 6.663 s/op
Iteration  17: 6.802 s/op
Iteration  18: 6.800 s/op
Iteration  19: 6.673 s/op
Iteration  20: 6.814 s/op
Iteration  21: 6.831 s/op
Iteration  22: 6.675 s/op
Iteration  23: 6.818 s/op
Iteration  24: 6.782 s/op
Iteration  25: 6.805 s/op
Iteration  26: 6.780 s/op
Iteration  27: 6.761 s/op
Iteration  28: 6.767 s/op
Iteration  29: 6.736 s/op
Iteration  30: 6.758 s/op
Iteration  31: 6.735 s/op
Iteration  32: 6.740 s/op
Iteration  33: 6.732 s/op
Iteration  34: 6.811 s/op
Iteration  35: 6.691 s/op
Iteration  36: 6.811 s/op
Iteration  37: 6.676 s/op
Iteration  38: 6.834 s/op
Iteration  39: 6.816 s/op
Iteration  40: 6.681 s/op
Iteration  41: 6.807 s/op
Iteration  42: 6.801 s/op
Iteration  43: 6.676 s/op
Iteration  44: 6.803 s/op
Iteration  45: 6.672 s/op
Iteration  46: 6.805 s/op
Iteration  47: 6.815 s/op
Iteration  48: 6.686 s/op
Iteration  49: 6.767 s/op
Iteration  50: 6.802 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.777 ?(99.9%) 0.045 s/op

  Histogram, s/op:
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 12 
    [6.700, 6.750) = 6 
    [6.750, 6.800) = 9 
    [6.800, 6.850) = 20 
    [6.850, 6.900) = 1 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 1 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 1 
    [7.250, 7.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.661 s/op
     p(50.0000) =      6.794 s/op
     p(90.0000) =      6.831 s/op
     p(95.0000) =      6.905 s/op
     p(99.0000) =      7.235 s/op
     p(99.9000) =      7.235 s/op
     p(99.9900) =      7.235 s/op
     p(99.9990) =      7.235 s/op
     p(99.9999) =      7.235 s/op
    p(100.0000) =      7.235 s/op


# Run complete. Total time: 00:05:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.777 ? 0.045   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot_12.0.2_1564902545545.json
{"wallclock_times": [340.000484814], "core_cycle_counts": [[285312019365], [415271778975], [286627838225], [224397810509]], "aperf_counts": [[284440456253], [415189055289], [286582845688], [224356422000]], "mperf_counts": [[284830550688], [415636961536], [286987954432], [224480575808]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 09:14:45: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 09:14:46: INFO] Estimated completion (whole session): 2019-08-05 19:17:42 (1 day, 10:02:56 from now)
[2019-08-04 09:14:46: INFO] 227 executions left in scheduler queue
[2019-08-04 09:14:46: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 09:14:46: INFO] Estimated completion (next execution): 2019-08-04 09:22:55 (0:08:08 from now)
[2019-08-04 09:14:46: INFO] Reboot in preparation for next execution
[2019-08-04 09:19:01: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 09:19:01: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 09:19:01: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 09:19:01: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 09:19:01: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 09:32:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.441 s/op
Iteration   2: 16.672 s/op
Iteration   3: 16.661 s/op
Iteration   4: 16.660 s/op
Iteration   5: 16.360 s/op
Iteration   6: 16.384 s/op
Iteration   7: 17.246 s/op
Iteration   8: 16.338 s/op
Iteration   9: 16.385 s/op
Iteration  10: 16.375 s/op
Iteration  11: 16.363 s/op
Iteration  12: 16.336 s/op
Iteration  13: 16.346 s/op
Iteration  14: 16.382 s/op
Iteration  15: 16.441 s/op
Iteration  16: 16.369 s/op
Iteration  17: 16.622 s/op
Iteration  18: 16.597 s/op
Iteration  19: 16.593 s/op
Iteration  20: 16.606 s/op
Iteration  21: 16.609 s/op
Iteration  22: 16.689 s/op
Iteration  23: 16.622 s/op
Iteration  24: 16.580 s/op
Iteration  25: 16.620 s/op
Iteration  26: 16.649 s/op
Iteration  27: 16.597 s/op
Iteration  28: 16.630 s/op
Iteration  29: 16.622 s/op
Iteration  30: 16.587 s/op
Iteration  31: 16.593 s/op
Iteration  32: 16.612 s/op
Iteration  33: 17.889 s/op
Iteration  34: 16.601 s/op
Iteration  35: 16.600 s/op
Iteration  36: 16.595 s/op
Iteration  37: 16.659 s/op
Iteration  38: 16.573 s/op
Iteration  39: 16.643 s/op
Iteration  40: 16.658 s/op
Iteration  41: 16.654 s/op
Iteration  42: 16.590 s/op
Iteration  43: 16.620 s/op
Iteration  44: 16.648 s/op
Iteration  45: 16.617 s/op
Iteration  46: 16.648 s/op
Iteration  47: 16.611 s/op
Iteration  48: 16.623 s/op
Iteration  49: 16.579 s/op
Iteration  50: 16.600 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.600 ?(99.9%) 0.117 s/op

  Histogram, s/op:
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 6 
    [16.375, 16.500) = 6 
    [16.500, 16.625) = 24 
    [16.625, 16.750) = 12 
    [16.750, 16.875) = 0 
    [16.875, 17.000) = 0 
    [17.000, 17.125) = 0 
    [17.125, 17.250) = 1 
    [17.250, 17.375) = 0 
    [17.375, 17.500) = 0 
    [17.500, 17.625) = 0 
    [17.625, 17.750) = 0 
    [17.750, 17.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.336 s/op
     p(50.0000) =     16.604 s/op
     p(90.0000) =     16.661 s/op
     p(95.0000) =     16.940 s/op
     p(99.0000) =     17.889 s/op
     p(99.9000) =     17.889 s/op
     p(99.9900) =     17.889 s/op
     p(99.9990) =     17.889 s/op
     p(99.9999) =     17.889 s/op
    p(100.0000) =     17.889 s/op


# Run complete. Total time: 00:13:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.600 ? 0.117   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot_12.0.2_1564903141218.json
{"wallclock_times": [831.04151993], "core_cycle_counts": [[420650267545], [1149597263527], [736997569797], [373142456506]], "aperf_counts": [[418356821403], [1149481666512], [736945204221], [373103715458]], "mperf_counts": [[418931361388], [1150016786602], [737049960248], [373168446816]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 09:32:52: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-04 09:32:53: INFO] Estimated completion (whole session): 2019-08-05 19:20:02 (1 day, 9:47:09 from now)
[2019-08-04 09:32:53: INFO] 226 executions left in scheduler queue
[2019-08-04 09:32:53: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-08-04 09:32:53: INFO] Estimated completion (next execution): 2019-08-04 09:48:57 (0:16:04 from now)
[2019-08-04 09:32:53: INFO] Reboot in preparation for next execution
[2019-08-04 09:41:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.606 s/op
Iteration   2: 5.297 s/op
Iteration   3: 5.431 s/op
Iteration   4: 5.507 s/op
Iteration   5: 5.199 s/op
Iteration   6: 5.300 s/op
Iteration   7: 5.188 s/op
Iteration   8: 5.221 s/op
Iteration   9: 5.273 s/op
Iteration  10: 5.277 s/op
Iteration  11: 5.165 s/op
Iteration  12: 5.963 s/op
Iteration  13: 5.222 s/op
Iteration  14: 5.187 s/op
Iteration  15: 5.175 s/op
Iteration  16: 5.190 s/op
Iteration  17: 5.155 s/op
Iteration  18: 5.145 s/op
Iteration  19: 5.333 s/op
Iteration  20: 5.182 s/op
Iteration  21: 5.192 s/op
Iteration  22: 5.189 s/op
Iteration  23: 5.997 s/op
Iteration  24: 5.063 s/op
Iteration  25: 5.166 s/op
Iteration  26: 5.150 s/op
Iteration  27: 5.333 s/op
Iteration  28: 5.171 s/op
Iteration  29: 5.174 s/op
Iteration  30: 5.174 s/op
Iteration  31: 5.191 s/op
Iteration  32: 5.176 s/op
Iteration  33: 5.191 s/op
Iteration  34: 5.989 s/op
Iteration  35: 5.050 s/op
Iteration  36: 5.168 s/op
Iteration  37: 5.149 s/op
Iteration  38: 5.145 s/op
Iteration  39: 5.203 s/op
Iteration  40: 5.196 s/op
Iteration  41: 5.213 s/op
Iteration  42: 5.188 s/op
Iteration  43: 5.209 s/op
Iteration  44: 5.199 s/op
Iteration  45: 6.040 s/op
Iteration  46: 5.058 s/op
Iteration  47: 5.165 s/op
Iteration  48: 5.162 s/op
Iteration  49: 5.147 s/op
Iteration  50: 5.337 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.276 ?(99.9%) 0.117 s/op

  Histogram, s/op:
    [5.000, 5.100) = 3 
    [5.100, 5.200) = 28 
    [5.200, 5.300) = 9 
    [5.300, 5.400) = 3 
    [5.400, 5.500) = 1 
    [5.500, 5.600) = 1 
    [5.600, 5.700) = 1 
    [5.700, 5.800) = 0 
    [5.800, 5.900) = 0 
    [5.900, 6.000) = 3 
    [6.000, 6.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.050 s/op
     p(50.0000) =      5.190 s/op
     p(90.0000) =      5.596 s/op
     p(95.0000) =      5.993 s/op
     p(99.0000) =      6.040 s/op
     p(99.9000) =      6.040 s/op
     p(99.9900) =      6.040 s/op
     p(99.9990) =      6.040 s/op
     p(99.9999) =      6.040 s/op
    p(100.0000) =      6.040 s/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.276 ? 0.117   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_graalvm-ee-19.1.1_1564904238605.json
{"wallclock_times": [264.952090453], "core_cycle_counts": [[306236083134], [269508568051], [298013034247], [186171955913]], "aperf_counts": [[305640135430], [269431620860], [297968815785], [186127413839]], "mperf_counts": [[305653055180], [269433064804], [297973332058], [186128245910]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 09:41:43: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-08-04 09:41:44: INFO] Estimated completion (whole session): 2019-08-05 19:22:01 (1 day, 9:40:16 from now)
[2019-08-04 09:41:44: INFO] 225 executions left in scheduler queue
[2019-08-04 09:41:44: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 09:41:44: INFO] Estimated completion (next execution): 2019-08-04 09:48:38 (0:06:53 from now)
[2019-08-04 09:41:44: INFO] Reboot in preparation for next execution
[2019-08-04 09:46:15: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 09:46:15: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 09:46:15: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 09:46:15: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 09:46:15: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 09:54:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.647 s/op
Iteration   2: 10.004 s/op
Iteration   3: 9.784 s/op
Iteration   4: 10.007 s/op
Iteration   5: 9.671 s/op
Iteration   6: 9.747 s/op
Iteration   7: 9.699 s/op
Iteration   8: 9.724 s/op
Iteration   9: 9.671 s/op
Iteration  10: 9.717 s/op
Iteration  11: 9.695 s/op
Iteration  12: 9.728 s/op
Iteration  13: 9.704 s/op
Iteration  14: 9.708 s/op
Iteration  15: 9.703 s/op
Iteration  16: 9.702 s/op
Iteration  17: 9.670 s/op
Iteration  18: 9.705 s/op
Iteration  19: 9.677 s/op
Iteration  20: 9.666 s/op
Iteration  21: 9.660 s/op
Iteration  22: 9.655 s/op
Iteration  23: 9.657 s/op
Iteration  24: 9.652 s/op
Iteration  25: 9.665 s/op
Iteration  26: 9.661 s/op
Iteration  27: 9.654 s/op
Iteration  28: 9.668 s/op
Iteration  29: 9.696 s/op
Iteration  30: 9.719 s/op
Iteration  31: 9.666 s/op
Iteration  32: 9.661 s/op
Iteration  33: 9.653 s/op
Iteration  34: 9.649 s/op
Iteration  35: 9.679 s/op
Iteration  36: 9.655 s/op
Iteration  37: 9.692 s/op
Iteration  38: 9.675 s/op
Iteration  39: 9.673 s/op
Iteration  40: 9.711 s/op
Iteration  41: 9.703 s/op
Iteration  42: 9.729 s/op
Iteration  43: 9.668 s/op
Iteration  44: 9.663 s/op
Iteration  45: 9.643 s/op
Iteration  46: 9.662 s/op
Iteration  47: 9.652 s/op
Iteration  48: 9.652 s/op
Iteration  49: 9.660 s/op
Iteration  50: 9.684 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.695 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [ 9.600,  9.650) = 3 
    [ 9.650,  9.700) = 31 
    [ 9.700,  9.750) = 13 
    [ 9.750,  9.800) = 1 
    [ 9.800,  9.850) = 0 
    [ 9.850,  9.900) = 0 
    [ 9.900,  9.950) = 0 
    [ 9.950, 10.000) = 0 
    [10.000, 10.050) = 2 

  Percentiles, s/op:
      p(0.0000) =      9.643 s/op
     p(50.0000) =      9.672 s/op
     p(90.0000) =      9.729 s/op
     p(95.0000) =      9.883 s/op
     p(99.0000) =     10.007 s/op
     p(99.9000) =     10.007 s/op
     p(99.9900) =     10.007 s/op
     p(99.9990) =     10.007 s/op
     p(99.9999) =     10.007 s/op
    p(100.0000) =     10.007 s/op


# Run complete. Total time: 00:08:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.695 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot_11.0.4_1564904775470.json
{"wallclock_times": [485.793568372], "core_cycle_counts": [[132443224389], [544072544070], [402174792634], [490769735574]], "aperf_counts": [[131002461881], [544005957630], [402131113215], [490727122709]], "mperf_counts": [[131232428578], [544032545440], [402193897076], [490951276394]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 09:54:21: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 09:54:22: INFO] Estimated completion (whole session): 2019-08-05 19:24:19 (1 day, 9:29:57 from now)
[2019-08-04 09:54:22: INFO] 224 executions left in scheduler queue
[2019-08-04 09:54:22: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 09:54:22: INFO] Estimated completion (next execution): 2019-08-04 10:04:49 (0:10:27 from now)
[2019-08-04 09:54:22: INFO] Reboot in preparation for next execution
[2019-08-04 09:59:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 09:59:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 09:59:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 09:59:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 09:59:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 10:12:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.189 s/op
Iteration   2: 15.835 s/op
Iteration   3: 15.958 s/op
Iteration   4: 15.717 s/op
Iteration   5: 16.081 s/op
Iteration   6: 15.665 s/op
Iteration   7: 15.662 s/op
Iteration   8: 15.651 s/op
Iteration   9: 15.659 s/op
Iteration  10: 15.658 s/op
Iteration  11: 15.703 s/op
Iteration  12: 15.778 s/op
Iteration  13: 15.813 s/op
Iteration  14: 16.157 s/op
Iteration  15: 15.721 s/op
Iteration  16: 15.746 s/op
Iteration  17: 15.696 s/op
Iteration  18: 15.621 s/op
Iteration  19: 15.667 s/op
Iteration  20: 15.651 s/op
Iteration  21: 15.656 s/op
Iteration  22: 15.629 s/op
Iteration  23: 15.608 s/op
Iteration  24: 15.646 s/op
Iteration  25: 15.681 s/op
Iteration  26: 15.717 s/op
Iteration  27: 15.765 s/op
Iteration  28: 15.772 s/op
Iteration  29: 15.658 s/op
Iteration  30: 15.696 s/op
Iteration  31: 15.683 s/op
Iteration  32: 15.643 s/op
Iteration  33: 15.665 s/op
Iteration  34: 15.676 s/op
Iteration  35: 15.662 s/op
Iteration  36: 15.710 s/op
Iteration  37: 15.759 s/op
Iteration  38: 15.806 s/op
Iteration  39: 15.754 s/op
Iteration  40: 15.775 s/op
Iteration  41: 15.716 s/op
Iteration  42: 15.645 s/op
Iteration  43: 15.703 s/op
Iteration  44: 15.662 s/op
Iteration  45: 15.672 s/op
Iteration  46: 15.694 s/op
Iteration  47: 15.586 s/op
Iteration  48: 15.702 s/op
Iteration  49: 15.610 s/op
Iteration  50: 15.698 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.705 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [15.100, 15.200) = 1 
    [15.200, 15.300) = 0 
    [15.300, 15.400) = 0 
    [15.400, 15.500) = 0 
    [15.500, 15.600) = 1 
    [15.600, 15.700) = 27 
    [15.700, 15.800) = 15 
    [15.800, 15.900) = 3 
    [15.900, 16.000) = 1 
    [16.000, 16.100) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.189 s/op
     p(50.0000) =     15.688 s/op
     p(90.0000) =     15.812 s/op
     p(95.0000) =     16.014 s/op
     p(99.0000) =     16.157 s/op
     p(99.9000) =     16.157 s/op
     p(99.9900) =     16.157 s/op
     p(99.9990) =     16.157 s/op
     p(99.9999) =     16.157 s/op
    p(100.0000) =     16.157 s/op


# Run complete. Total time: 00:13:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.705 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot_11.0.4_1564905564577.json
{"wallclock_times": [786.356885992], "core_cycle_counts": [[400413673604], [492309819219], [657556340065], [985756269909]], "aperf_counts": [[398235610598], [492152233401], [657485039253], [985710003118]], "mperf_counts": [[398956497904], [492239747044], [658116264138], [986105967810]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 10:12:30: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 10:12:31: INFO] Estimated completion (whole session): 2019-08-05 19:26:45 (1 day, 9:14:13 from now)
[2019-08-04 10:12:31: INFO] 223 executions left in scheduler queue
[2019-08-04 10:12:31: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 10:12:31: INFO] Estimated completion (next execution): 2019-08-04 10:28:12 (0:15:40 from now)
[2019-08-04 10:12:31: INFO] Reboot in preparation for next execution
[2019-08-04 10:17:43: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 10:17:43: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 10:17:43: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 10:17:43: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 10:17:43: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 10:22:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.648 s/op
Iteration   2: 6.380 s/op
Iteration   3: 6.347 s/op
Iteration   4: 6.243 s/op
Iteration   5: 6.268 s/op
Iteration   6: 6.238 s/op
Iteration   7: 6.338 s/op
Iteration   8: 6.243 s/op
Iteration   9: 6.230 s/op
Iteration  10: 6.383 s/op
Iteration  11: 6.263 s/op
Iteration  12: 6.253 s/op
Iteration  13: 6.276 s/op
Iteration  14: 6.243 s/op
Iteration  15: 6.221 s/op
Iteration  16: 6.273 s/op
Iteration  17: 6.213 s/op
Iteration  18: 6.366 s/op
Iteration  19: 6.252 s/op
Iteration  20: 6.233 s/op
Iteration  21: 6.240 s/op
Iteration  22: 6.244 s/op
Iteration  23: 6.232 s/op
Iteration  24: 6.214 s/op
Iteration  25: 6.218 s/op
Iteration  26: 6.339 s/op
Iteration  27: 6.210 s/op
Iteration  28: 6.198 s/op
Iteration  29: 6.307 s/op
Iteration  30: 6.184 s/op
Iteration  31: 6.286 s/op
Iteration  32: 6.293 s/op
Iteration  33: 6.228 s/op
Iteration  34: 6.190 s/op
Iteration  35: 6.313 s/op
Iteration  36: 6.205 s/op
Iteration  37: 6.207 s/op
Iteration  38: 6.186 s/op
Iteration  39: 6.370 s/op
Iteration  40: 6.253 s/op
Iteration  41: 6.234 s/op
Iteration  42: 6.220 s/op
Iteration  43: 6.237 s/op
Iteration  44: 6.223 s/op
Iteration  45: 6.231 s/op
Iteration  46: 6.227 s/op
Iteration  47: 6.212 s/op
Iteration  48: 6.356 s/op
Iteration  49: 6.253 s/op
Iteration  50: 6.225 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.265 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 4 
    [6.200, 6.250) = 25 
    [6.250, 6.300) = 10 
    [6.300, 6.350) = 5 
    [6.350, 6.400) = 5 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.184 s/op
     p(50.0000) =      6.241 s/op
     p(90.0000) =      6.365 s/op
     p(95.0000) =      6.381 s/op
     p(99.0000) =      6.648 s/op
     p(99.9000) =      6.648 s/op
     p(99.9900) =      6.648 s/op
     p(99.9990) =      6.648 s/op
     p(99.9999) =      6.648 s/op
    p(100.0000) =      6.648 s/op


# Run complete. Total time: 00:05:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.265 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot_11.0.4_1564906663839.json
{"wallclock_times": [314.42711753800006], "core_cycle_counts": [[287464471078], [252806026722], [333096775436], [230384040683]], "aperf_counts": [[286691663822], [252717515364], [333053219816], [230343398544]], "mperf_counts": [[287233806112], [252774123618], [333110804358], [230448500478]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 10:22:58: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 10:22:59: INFO] Estimated completion (whole session): 2019-08-05 19:29:26 (1 day, 9:06:27 from now)
[2019-08-04 10:22:59: INFO] 222 executions left in scheduler queue
[2019-08-04 10:22:59: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 10:22:59: INFO] Estimated completion (next execution): 2019-08-04 10:30:44 (0:07:45 from now)
[2019-08-04 10:22:59: INFO] Reboot in preparation for next execution
[2019-08-04 10:27:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 10:27:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 10:27:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 10:27:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 10:27:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 10:32:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.617 s/op
Iteration   2: 6.623 s/op
Iteration   3: 6.598 s/op
Iteration   4: 6.635 s/op
Iteration   5: 6.926 s/op
Iteration   6: 6.552 s/op
Iteration   7: 6.534 s/op
Iteration   8: 6.602 s/op
Iteration   9: 6.302 s/op
Iteration  10: 6.566 s/op
Iteration  11: 6.537 s/op
Iteration  12: 6.526 s/op
Iteration  13: 6.339 s/op
Iteration  14: 6.515 s/op
Iteration  15: 6.546 s/op
Iteration  16: 6.557 s/op
Iteration  17: 6.551 s/op
Iteration  18: 6.542 s/op
Iteration  19: 6.574 s/op
Iteration  20: 6.551 s/op
Iteration  21: 6.537 s/op
Iteration  22: 6.548 s/op
Iteration  23: 6.536 s/op
Iteration  24: 6.527 s/op
Iteration  25: 6.537 s/op
Iteration  26: 6.543 s/op
Iteration  27: 6.530 s/op
Iteration  28: 6.563 s/op
Iteration  29: 6.539 s/op
Iteration  30: 6.520 s/op
Iteration  31: 6.512 s/op
Iteration  32: 6.550 s/op
Iteration  33: 6.523 s/op
Iteration  34: 6.539 s/op
Iteration  35: 6.521 s/op
Iteration  36: 6.558 s/op
Iteration  37: 6.537 s/op
Iteration  38: 6.592 s/op
Iteration  39: 6.549 s/op
Iteration  40: 6.551 s/op
Iteration  41: 6.554 s/op
Iteration  42: 6.545 s/op
Iteration  43: 6.536 s/op
Iteration  44: 6.573 s/op
Iteration  45: 6.539 s/op
Iteration  46: 6.544 s/op
Iteration  47: 6.538 s/op
Iteration  48: 6.527 s/op
Iteration  49: 6.528 s/op
Iteration  50: 6.524 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.548 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [6.300, 6.350) = 2 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 30 
    [6.550, 6.600) = 13 
    [6.600, 6.650) = 4 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.302 s/op
     p(50.0000) =      6.543 s/op
     p(90.0000) =      6.601 s/op
     p(95.0000) =      6.629 s/op
     p(99.0000) =      6.926 s/op
     p(99.9000) =      6.926 s/op
     p(99.9900) =      6.926 s/op
     p(99.9990) =      6.926 s/op
     p(99.9999) =      6.926 s/op
    p(100.0000) =      6.926 s/op


# Run complete. Total time: 00:05:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.548 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot_11.0.4_1564907232577.json
{"wallclock_times": [328.558518548], "core_cycle_counts": [[185986746117], [171463733084], [304914244052], [277155215858]], "aperf_counts": [[185099877574], [171380102070], [304879566666], [277122706429]], "mperf_counts": [[209333020218], [195221223428], [347099569530], [316164389244]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 10:32:41: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-04 10:32:42: INFO] Estimated completion (whole session): 2019-08-05 19:31:22 (1 day, 8:58:40 from now)
[2019-08-04 10:32:42: INFO] 221 executions left in scheduler queue
[2019-08-04 10:32:42: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 10:32:42: INFO] Estimated completion (next execution): 2019-08-04 10:40:35 (0:07:53 from now)
[2019-08-04 10:32:42: INFO] Reboot in preparation for next execution
[2019-08-04 10:37:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 10:37:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 10:37:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 10:37:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 10:37:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 10:37:36: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 10:44:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.869 s/op
Iteration   2: 7.969 s/op
Iteration   3: 7.822 s/op
Iteration   4: 7.909 s/op
Iteration   5: 7.762 s/op
Iteration   6: 7.762 s/op
Iteration   7: 7.758 s/op
Iteration   8: 7.657 s/op
Iteration   9: 7.664 s/op
Iteration  10: 7.694 s/op
Iteration  11: 7.855 s/op
Iteration  12: 7.773 s/op
Iteration  13: 7.810 s/op
Iteration  14: 7.777 s/op
Iteration  15: 7.713 s/op
Iteration  16: 7.783 s/op
Iteration  17: 7.860 s/op
Iteration  18: 7.849 s/op
Iteration  19: 7.875 s/op
Iteration  20: 7.815 s/op
Iteration  21: 7.846 s/op
Iteration  22: 7.853 s/op
Iteration  23: 7.840 s/op
Iteration  24: 7.818 s/op
Iteration  25: 7.816 s/op
Iteration  26: 7.833 s/op
Iteration  27: 7.818 s/op
Iteration  28: 7.870 s/op
Iteration  29: 7.834 s/op
Iteration  30: 7.824 s/op
Iteration  31: 7.842 s/op
Iteration  32: 7.813 s/op
Iteration  33: 7.855 s/op
Iteration  34: 7.812 s/op
Iteration  35: 7.851 s/op
Iteration  36: 7.850 s/op
Iteration  37: 7.838 s/op
Iteration  38: 7.783 s/op
Iteration  39: 7.818 s/op
Iteration  40: 7.865 s/op
Iteration  41: 7.831 s/op
Iteration  42: 7.767 s/op
Iteration  43: 7.695 s/op
Iteration  44: 7.723 s/op
Iteration  45: 7.743 s/op
Iteration  46: 7.731 s/op
Iteration  47: 7.762 s/op
Iteration  48: 7.743 s/op
Iteration  49: 7.696 s/op
Iteration  50: 7.739 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.822 ?(99.9%) 0.081 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 11 
    [7.750, 7.875) = 36 
    [7.875, 8.000) = 2 
    [8.000, 8.125) = 0 
    [8.125, 8.250) = 0 
    [8.250, 8.375) = 0 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 0 
    [8.625, 8.750) = 0 
    [8.750, 8.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.657 s/op
     p(50.0000) =      7.817 s/op
     p(90.0000) =      7.869 s/op
     p(95.0000) =      7.936 s/op
     p(99.0000) =      8.869 s/op
     p(99.9000) =      8.869 s/op
     p(99.9900) =      8.869 s/op
     p(99.9990) =      8.869 s/op
     p(99.9999) =      8.869 s/op
    p(100.0000) =      8.869 s/op


# Run complete. Total time: 00:06:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.822 ? 0.081   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_12.0.1_1564907856388.json
{"wallclock_times": [392.998298845], "core_cycle_counts": [[376076176370], [245707985636], [441156760154], [360024003256]], "aperf_counts": [[375030328263], [245514112269], [441005066572], [359898554039]], "mperf_counts": [[375038449384], [245514152732], [441005131172], [359898777332]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 10:44:09: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 10:44:10: INFO] Estimated completion (whole session): 2019-08-05 19:34:25 (1 day, 8:50:15 from now)
[2019-08-04 10:44:10: INFO] 220 executions left in scheduler queue
[2019-08-04 10:44:10: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 10:44:10: INFO] Estimated completion (next execution): 2019-08-04 10:52:54 (0:08:44 from now)
[2019-08-04 10:44:10: INFO] Reboot in preparation for next execution
[2019-08-04 10:48:45: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 10:48:45: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 10:48:45: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 10:48:45: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 10:48:45: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 10:48:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 10:58:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.950 s/op
Iteration   2: 12.135 s/op
Iteration   3: 12.061 s/op
Iteration   4: 12.092 s/op
Iteration   5: 11.991 s/op
Iteration   6: 11.990 s/op
Iteration   7: 11.958 s/op
Iteration   8: 11.983 s/op
Iteration   9: 11.985 s/op
Iteration  10: 11.959 s/op
Iteration  11: 12.022 s/op
Iteration  12: 11.886 s/op
Iteration  13: 11.970 s/op
Iteration  14: 11.931 s/op
Iteration  15: 11.949 s/op
Iteration  16: 11.961 s/op
Iteration  17: 11.998 s/op
Iteration  18: 11.925 s/op
Iteration  19: 11.997 s/op
Iteration  20: 11.851 s/op
Iteration  21: 11.807 s/op
Iteration  22: 11.811 s/op
Iteration  23: 11.771 s/op
Iteration  24: 11.794 s/op
Iteration  25: 11.774 s/op
Iteration  26: 11.790 s/op
Iteration  27: 11.817 s/op
Iteration  28: 11.806 s/op
Iteration  29: 11.840 s/op
Iteration  30: 11.833 s/op
Iteration  31: 11.849 s/op
Iteration  32: 11.806 s/op
Iteration  33: 11.843 s/op
Iteration  34: 11.854 s/op
Iteration  35: 11.801 s/op
Iteration  36: 11.766 s/op
Iteration  37: 11.794 s/op
Iteration  38: 11.804 s/op
Iteration  39: 11.764 s/op
Iteration  40: 11.820 s/op
Iteration  41: 11.810 s/op
Iteration  42: 11.804 s/op
Iteration  43: 11.825 s/op
Iteration  44: 11.830 s/op
Iteration  45: 11.829 s/op
Iteration  46: 11.837 s/op
Iteration  47: 11.841 s/op
Iteration  48: 11.792 s/op
Iteration  49: 11.712 s/op
Iteration  50: 11.777 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.916 ?(99.9%) 0.153 s/op

  Histogram, s/op:
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 1 
    [11.750, 12.000) = 44 
    [12.000, 12.250) = 4 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 0 
    [12.750, 13.000) = 0 
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.712 s/op
     p(50.0000) =     11.838 s/op
     p(90.0000) =     12.019 s/op
     p(95.0000) =     12.111 s/op
     p(99.0000) =     13.950 s/op
     p(99.9000) =     13.950 s/op
     p(99.9900) =     13.950 s/op
     p(99.9990) =     13.950 s/op
     p(99.9999) =     13.950 s/op
    p(100.0000) =     13.950 s/op


# Run complete. Total time: 00:09:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.916 ? 0.153   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_12.0.1_1564908525075.json
{"wallclock_times": [597.384767323], "core_cycle_counts": [[482494053877], [872899920970], [323833542004], [320326005389]], "aperf_counts": [[480918421779], [872800137452], [323705611567], [320178705320]], "mperf_counts": [[480930418896], [872802276736], [323706478450], [320178980688]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 10:58:42: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 10:58:43: INFO] Estimated completion (whole session): 2019-08-05 19:36:43 (1 day, 8:37:59 from now)
[2019-08-04 10:58:43: INFO] 219 executions left in scheduler queue
[2019-08-04 10:58:43: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 10:58:43: INFO] Estimated completion (next execution): 2019-08-04 11:11:05 (0:12:21 from now)
[2019-08-04 10:58:43: INFO] Reboot in preparation for next execution
[2019-08-04 11:03:08: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 11:03:08: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 11:03:08: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 11:03:08: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 11:03:08: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 11:03:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 11:09:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.461 s/op
Iteration   2: 7.830 s/op
Iteration   3: 7.620 s/op
Iteration   4: 7.566 s/op
Iteration   5: 7.483 s/op
Iteration   6: 7.558 s/op
Iteration   7: 7.521 s/op
Iteration   8: 7.417 s/op
Iteration   9: 7.522 s/op
Iteration  10: 7.499 s/op
Iteration  11: 7.595 s/op
Iteration  12: 7.517 s/op
Iteration  13: 7.450 s/op
Iteration  14: 7.510 s/op
Iteration  15: 7.446 s/op
Iteration  16: 7.585 s/op
Iteration  17: 7.461 s/op
Iteration  18: 7.467 s/op
Iteration  19: 7.526 s/op
Iteration  20: 7.483 s/op
Iteration  21: 7.528 s/op
Iteration  22: 7.433 s/op
Iteration  23: 7.454 s/op
Iteration  24: 7.550 s/op
Iteration  25: 7.475 s/op
Iteration  26: 7.494 s/op
Iteration  27: 7.508 s/op
Iteration  28: 7.463 s/op
Iteration  29: 7.554 s/op
Iteration  30: 7.476 s/op
Iteration  31: 7.436 s/op
Iteration  32: 7.557 s/op
Iteration  33: 7.462 s/op
Iteration  34: 7.566 s/op
Iteration  35: 7.547 s/op
Iteration  36: 7.500 s/op
Iteration  37: 7.514 s/op
Iteration  38: 7.500 s/op
Iteration  39: 7.603 s/op
Iteration  40: 7.612 s/op
Iteration  41: 7.521 s/op
Iteration  42: 7.581 s/op
Iteration  43: 7.561 s/op
Iteration  44: 7.637 s/op
Iteration  45: 7.561 s/op
Iteration  46: 7.499 s/op
Iteration  47: 7.575 s/op
Iteration  48: 7.563 s/op
Iteration  49: 7.635 s/op
Iteration  50: 7.549 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.569 ?(99.9%) 0.140 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 19 
    [ 7.500,  7.750) = 29 
    [ 7.750,  8.000) = 1 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.417 s/op
     p(50.0000) =      7.522 s/op
     p(90.0000) =      7.619 s/op
     p(95.0000) =      7.724 s/op
     p(99.0000) =      9.461 s/op
     p(99.9000) =      9.461 s/op
     p(99.9900) =      9.461 s/op
     p(99.9990) =      9.461 s/op
     p(99.9999) =      9.461 s/op
    p(100.0000) =      9.461 s/op


# Run complete. Total time: 00:06:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.569 ? 0.140   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_12.0.1_1564909388849.json
{"wallclock_times": [380.276821415], "core_cycle_counts": [[341200858717], [259514059894], [275956141085], [384105768007]], "aperf_counts": [[340218079092], [259378462134], [275856851073], [383988605457]], "mperf_counts": [[340220960670], [259386609590], [275856836160], [383988786150]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 11:09:29: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 11:09:30: INFO] Estimated completion (whole session): 2019-08-05 19:38:23 (1 day, 8:28:53 from now)
[2019-08-04 11:09:30: INFO] 218 executions left in scheduler queue
[2019-08-04 11:09:30: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 11:09:30: INFO] Estimated completion (next execution): 2019-08-04 11:18:28 (0:08:58 from now)
[2019-08-04 11:09:30: INFO] Reboot in preparation for next execution
[2019-08-04 11:13:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 11:13:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 11:13:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 11:13:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 11:13:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 11:13:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 11:25:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.624 s/op
Iteration   2: 14.645 s/op
Iteration   3: 14.156 s/op
Iteration   4: 14.077 s/op
Iteration   5: 14.550 s/op
Iteration   6: 14.572 s/op
Iteration   7: 14.554 s/op
Iteration   8: 14.648 s/op
Iteration   9: 14.487 s/op
Iteration  10: 13.988 s/op
Iteration  11: 14.092 s/op
Iteration  12: 13.819 s/op
Iteration  13: 13.853 s/op
Iteration  14: 13.773 s/op
Iteration  15: 14.394 s/op
Iteration  16: 14.263 s/op
Iteration  17: 13.794 s/op
Iteration  18: 13.829 s/op
Iteration  19: 13.881 s/op
Iteration  20: 14.255 s/op
Iteration  21: 14.391 s/op
Iteration  22: 13.943 s/op
Iteration  23: 14.398 s/op
Iteration  24: 13.929 s/op
Iteration  25: 13.847 s/op
Iteration  26: 13.832 s/op
Iteration  27: 13.773 s/op
Iteration  28: 13.917 s/op
Iteration  29: 14.306 s/op
Iteration  30: 14.069 s/op
Iteration  31: 13.815 s/op
Iteration  32: 13.885 s/op
Iteration  33: 13.877 s/op
Iteration  34: 13.838 s/op
Iteration  35: 13.853 s/op
Iteration  36: 13.825 s/op
Iteration  37: 14.309 s/op
Iteration  38: 13.893 s/op
Iteration  39: 13.829 s/op
Iteration  40: 14.356 s/op
Iteration  41: 13.973 s/op
Iteration  42: 13.827 s/op
Iteration  43: 13.886 s/op
Iteration  44: 13.852 s/op
Iteration  45: 14.421 s/op
Iteration  46: 13.869 s/op
Iteration  47: 13.804 s/op
Iteration  48: 13.828 s/op
Iteration  49: 13.850 s/op
Iteration  50: 13.847 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.086 ?(99.9%) 0.175 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 30 
    [14.000, 14.250) = 4 
    [14.250, 14.500) = 10 
    [14.500, 14.750) = 5 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.773 s/op
     p(50.0000) =     13.905 s/op
     p(90.0000) =     14.553 s/op
     p(95.0000) =     14.647 s/op
     p(99.0000) =     15.624 s/op
     p(99.9000) =     15.624 s/op
     p(99.9900) =     15.624 s/op
     p(99.9990) =     15.624 s/op
     p(99.9999) =     15.624 s/op
    p(100.0000) =     15.624 s/op


# Run complete. Total time: 00:11:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.086 ? 0.175   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_12.0.1_1564910035784.json
{"wallclock_times": [705.9193475659999], "core_cycle_counts": [[658423227534], [550413268011], [563151818457], [546868355441]], "aperf_counts": [[656661445710], [550213291329], [563001347495], [546721533666]], "mperf_counts": [[656677157378], [550213609630], [563001301260], [546721868380]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 11:25:41: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-04 11:25:42: INFO] Estimated completion (whole session): 2019-08-05 19:37:09 (1 day, 8:11:26 from now)
[2019-08-04 11:25:42: INFO] 217 executions left in scheduler queue
[2019-08-04 11:25:42: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-08-04 11:25:42: INFO] Estimated completion (next execution): 2019-08-04 11:41:34 (0:15:51 from now)
[2019-08-04 11:25:42: INFO] Reboot in preparation for next execution
[2019-08-04 11:34:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.518 s/op
Iteration   2: 5.392 s/op
Iteration   3: 5.400 s/op
Iteration   4: 5.399 s/op
Iteration   5: 5.399 s/op
Iteration   6: 5.389 s/op
Iteration   7: 5.406 s/op
Iteration   8: 5.402 s/op
Iteration   9: 5.403 s/op
Iteration  10: 5.404 s/op
Iteration  11: 5.405 s/op
Iteration  12: 5.397 s/op
Iteration  13: 5.402 s/op
Iteration  14: 5.400 s/op
Iteration  15: 5.395 s/op
Iteration  16: 5.402 s/op
Iteration  17: 5.399 s/op
Iteration  18: 5.396 s/op
Iteration  19: 5.400 s/op
Iteration  20: 5.397 s/op
Iteration  21: 5.401 s/op
Iteration  22: 5.398 s/op
Iteration  23: 5.398 s/op
Iteration  24: 5.397 s/op
Iteration  25: 5.405 s/op
Iteration  26: 5.398 s/op
Iteration  27: 5.398 s/op
Iteration  28: 5.400 s/op
Iteration  29: 5.392 s/op
Iteration  30: 5.397 s/op
Iteration  31: 5.397 s/op
Iteration  32: 5.404 s/op
Iteration  33: 5.401 s/op
Iteration  34: 5.401 s/op
Iteration  35: 5.391 s/op
Iteration  36: 5.389 s/op
Iteration  37: 5.412 s/op
Iteration  38: 5.395 s/op
Iteration  39: 5.395 s/op
Iteration  40: 5.400 s/op
Iteration  41: 5.415 s/op
Iteration  42: 5.387 s/op
Iteration  43: 5.404 s/op
Iteration  44: 5.401 s/op
Iteration  45: 5.405 s/op
Iteration  46: 5.402 s/op
Iteration  47: 5.400 s/op
Iteration  48: 5.393 s/op
Iteration  49: 5.400 s/op
Iteration  50: 5.398 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.402 ?(99.9%) 0.009 s/op

  Histogram, s/op:
    [5.300, 5.325) = 0 
    [5.325, 5.350) = 0 
    [5.350, 5.375) = 0 
    [5.375, 5.400) = 30 
    [5.400, 5.425) = 19 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 0 
    [5.475, 5.500) = 0 
    [5.500, 5.525) = 1 
    [5.525, 5.550) = 0 
    [5.550, 5.575) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.387 s/op
     p(50.0000) =      5.400 s/op
     p(90.0000) =      5.405 s/op
     p(95.0000) =      5.413 s/op
     p(99.0000) =      5.518 s/op
     p(99.9000) =      5.518 s/op
     p(99.9900) =      5.518 s/op
     p(99.9990) =      5.518 s/op
     p(99.9999) =      5.518 s/op
    p(100.0000) =      5.518 s/op


# Run complete. Total time: 00:04:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.402 ? 0.009   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot-8u222-b10_1564910998735.json
{"wallclock_times": [270.895667203], "core_cycle_counts": [[170759476552], [259836911971], [221261339026], [221538900561]], "aperf_counts": [[170077141871], [259783379455], [221228535819], [221506965130]], "mperf_counts": [[170092865514], [259787884780], [221229022882], [221507904552]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 11:34:29: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-08-04 11:34:30: INFO] Estimated completion (whole session): 2019-08-05 19:38:58 (1 day, 8:04:28 from now)
[2019-08-04 11:34:30: INFO] 216 executions left in scheduler queue
[2019-08-04 11:34:30: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-08-04 11:34:30: INFO] Estimated completion (next execution): 2019-08-04 11:41:30 (0:06:59 from now)
[2019-08-04 11:34:30: INFO] Reboot in preparation for next execution
[2019-08-04 11:38:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 11:38:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 11:38:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 11:38:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 11:38:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 11:39:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 11:53:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.272 s/op
Iteration   2: 16.705 s/op
Iteration   3: 17.081 s/op
Iteration   4: 17.851 s/op
Iteration   5: 17.794 s/op
Iteration   6: 17.761 s/op
Iteration   7: 17.754 s/op
Iteration   8: 17.847 s/op
Iteration   9: 17.823 s/op
Iteration  10: 17.787 s/op
Iteration  11: 17.815 s/op
Iteration  12: 17.778 s/op
Iteration  13: 17.839 s/op
Iteration  14: 17.850 s/op
Iteration  15: 17.761 s/op
Iteration  16: 17.762 s/op
Iteration  17: 17.866 s/op
Iteration  18: 17.780 s/op
Iteration  19: 17.836 s/op
Iteration  20: 17.788 s/op
Iteration  21: 17.796 s/op
Iteration  22: 17.769 s/op
Iteration  23: 17.823 s/op
Iteration  24: 17.855 s/op
Iteration  25: 17.791 s/op
Iteration  26: 17.862 s/op
Iteration  27: 17.808 s/op
Iteration  28: 17.764 s/op
Iteration  29: 17.835 s/op
Iteration  30: 17.825 s/op
Iteration  31: 17.826 s/op
Iteration  32: 17.797 s/op
Iteration  33: 17.775 s/op
Iteration  34: 17.852 s/op
Iteration  35: 17.823 s/op
Iteration  36: 17.778 s/op
Iteration  37: 17.822 s/op
Iteration  38: 17.810 s/op
Iteration  39: 17.783 s/op
Iteration  40: 17.869 s/op
Iteration  41: 17.805 s/op
Iteration  42: 17.885 s/op
Iteration  43: 17.822 s/op
Iteration  44: 17.766 s/op
Iteration  45: 17.854 s/op
Iteration  46: 17.817 s/op
Iteration  47: 17.817 s/op
Iteration  48: 17.805 s/op
Iteration  49: 17.834 s/op
Iteration  50: 17.786 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     17.784 ?(99.9%) 0.100 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 1 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 47 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 1 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.705 s/op
     p(50.0000) =     17.812 s/op
     p(90.0000) =     17.861 s/op
     p(95.0000) =     17.876 s/op
     p(99.0000) =     18.272 s/op
     p(99.9000) =     18.272 s/op
     p(99.9900) =     18.272 s/op
     p(99.9990) =     18.272 s/op
     p(99.9999) =     18.272 s/op
    p(100.0000) =     18.272 s/op


# Run complete. Total time: 00:14:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  17.784 ? 0.100   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_11.0.4_1564911539780.json
{"wallclock_times": [890.726174486], "core_cycle_counts": [[451098475510], [733041203240], [566873401086], [1150142183247]], "aperf_counts": [[448432487372], [732911821438], [566700813132], [1150006834210]], "mperf_counts": [[448443364324], [732911876074], [566700767400], [1150006838210]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 11:53:50: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-08-04 11:53:51: INFO] Estimated completion (whole session): 2019-08-05 19:40:49 (1 day, 7:46:58 from now)
[2019-08-04 11:53:51: INFO] 215 executions left in scheduler queue
[2019-08-04 11:53:51: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-04 11:53:51: INFO] Estimated completion (next execution): 2019-08-04 12:11:17 (0:17:25 from now)
[2019-08-04 11:53:51: INFO] Reboot in preparation for next execution
[2019-08-04 11:58:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 11:58:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 11:58:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 11:58:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 11:58:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 11:58:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 11:59:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.900 s/op
Iteration   2: 2.457 s/op
Iteration   3: 2.507 s/op
Iteration   4: 2.562 s/op
Iteration   5: 2.305 s/op
Iteration   6: 2.013 s/op
Iteration   7: 2.013 s/op
Iteration   8: 1.990 s/op
Iteration   9: 1.915 s/op
Iteration  10: 1.944 s/op
Iteration  11: 2.000 s/op
Iteration  12: 2.015 s/op
Iteration  13: 1.989 s/op
Iteration  14: 1.980 s/op
Iteration  15: 1.982 s/op
Iteration  16: 1.956 s/op
Iteration  17: 1.984 s/op
Iteration  18: 2.016 s/op
Iteration  19: 1.988 s/op
Iteration  20: 1.960 s/op
Iteration  21: 2.000 s/op
Iteration  22: 1.959 s/op
Iteration  23: 2.012 s/op
Iteration  24: 1.979 s/op
Iteration  25: 1.970 s/op
Iteration  26: 1.996 s/op
Iteration  27: 2.004 s/op
Iteration  28: 1.968 s/op
Iteration  29: 2.000 s/op
Iteration  30: 1.999 s/op
Iteration  31: 1.976 s/op
Iteration  32: 1.960 s/op
Iteration  33: 2.006 s/op
Iteration  34: 2.017 s/op
Iteration  35: 2.000 s/op
Iteration  36: 1.963 s/op
Iteration  37: 2.009 s/op
Iteration  38: 1.965 s/op
Iteration  39: 1.975 s/op
Iteration  40: 1.988 s/op
Iteration  41: 1.999 s/op
Iteration  42: 1.967 s/op
Iteration  43: 1.999 s/op
Iteration  44: 1.966 s/op
Iteration  45: 1.999 s/op
Iteration  46: 1.989 s/op
Iteration  47: 1.985 s/op
Iteration  48: 1.952 s/op
Iteration  49: 1.966 s/op
Iteration  50: 1.994 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.041 ?(99.9%) 0.090 s/op

  Histogram, s/op:
    [1.900, 2.000) = 35 
    [2.000, 2.100) = 10 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 1 
    [2.500, 2.600) = 2 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.915 s/op
     p(50.0000) =      1.989 s/op
     p(90.0000) =      2.276 s/op
     p(95.0000) =      2.532 s/op
     p(99.0000) =      2.900 s/op
     p(99.9000) =      2.900 s/op
     p(99.9900) =      2.900 s/op
     p(99.9990) =      2.900 s/op
     p(99.9999) =      2.900 s/op
    p(100.0000) =      2.900 s/op


# Run complete. Total time: 00:01:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.041 ? 0.090   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9_12.0.1_1564912687209.json
{"wallclock_times": [103.726489998], "core_cycle_counts": [[95932042493], [68582196131], [94246878965], [101254354422]], "aperf_counts": [[95570334221], [68491021531], [94178606778], [101204011240]], "mperf_counts": [[95578945018], [68497823726], [94178687792], [101207106726]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 11:59:50: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-04 11:59:51: INFO] Estimated completion (whole session): 2019-08-05 19:42:38 (1 day, 7:42:46 from now)
[2019-08-04 11:59:51: INFO] 214 executions left in scheduler queue
[2019-08-04 11:59:51: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-04 11:59:51: INFO] Estimated completion (next execution): 2019-08-04 12:04:04 (0:04:12 from now)
[2019-08-04 11:59:51: INFO] Reboot in preparation for next execution
[2019-08-04 12:04:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 12:04:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 12:04:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 12:04:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 12:04:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 12:04:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 12:06:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.625 s/op
Iteration   2: 3.377 s/op
Iteration   3: 3.253 s/op
Iteration   4: 3.098 s/op
Iteration   5: 3.092 s/op
Iteration   6: 3.157 s/op
Iteration   7: 3.178 s/op
Iteration   8: 3.153 s/op
Iteration   9: 3.167 s/op
Iteration  10: 3.119 s/op
Iteration  11: 3.141 s/op
Iteration  12: 3.141 s/op
Iteration  13: 3.140 s/op
Iteration  14: 3.150 s/op
Iteration  15: 3.163 s/op
Iteration  16: 3.145 s/op
Iteration  17: 3.109 s/op
Iteration  18: 3.116 s/op
Iteration  19: 3.158 s/op
Iteration  20: 3.123 s/op
Iteration  21: 3.149 s/op
Iteration  22: 3.143 s/op
Iteration  23: 3.141 s/op
Iteration  24: 3.142 s/op
Iteration  25: 3.132 s/op
Iteration  26: 3.159 s/op
Iteration  27: 3.114 s/op
Iteration  28: 3.110 s/op
Iteration  29: 3.117 s/op
Iteration  30: 3.142 s/op
Iteration  31: 3.148 s/op
Iteration  32: 3.036 s/op
Iteration  33: 3.018 s/op
Iteration  34: 3.018 s/op
Iteration  35: 3.008 s/op
Iteration  36: 3.001 s/op
Iteration  37: 3.027 s/op
Iteration  38: 3.034 s/op
Iteration  39: 3.034 s/op
Iteration  40: 3.008 s/op
Iteration  41: 3.044 s/op
Iteration  42: 3.028 s/op
Iteration  43: 3.049 s/op
Iteration  44: 3.022 s/op
Iteration  45: 3.019 s/op
Iteration  46: 3.002 s/op
Iteration  47: 3.015 s/op
Iteration  48: 3.014 s/op
Iteration  49: 3.006 s/op
Iteration  50: 3.011 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.110 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [3.000, 3.050) = 19 
    [3.050, 3.100) = 2 
    [3.100, 3.150) = 18 
    [3.150, 3.200) = 8 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.001 s/op
     p(50.0000) =      3.117 s/op
     p(90.0000) =      3.167 s/op
     p(95.0000) =      3.309 s/op
     p(99.0000) =      3.625 s/op
     p(99.9000) =      3.625 s/op
     p(99.9900) =      3.625 s/op
     p(99.9990) =      3.625 s/op
     p(99.9999) =      3.625 s/op
    p(100.0000) =      3.625 s/op


# Run complete. Total time: 00:02:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.110 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9_12.0.1_1564913045823.json
{"wallclock_times": [157.067108793], "core_cycle_counts": [[70791985598], [151262308947], [137060520247], [179950816298]], "aperf_counts": [[70282573193], [151198825929], [137008239125], [179916320758]], "mperf_counts": [[70292539492], [151201275102], [137012714570], [179916367088]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 12:06:42: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-04 12:06:43: INFO] Estimated completion (whole session): 2019-08-05 19:44:07 (1 day, 7:37:23 from now)
[2019-08-04 12:06:43: INFO] 213 executions left in scheduler queue
[2019-08-04 12:06:43: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-08-04 12:06:43: INFO] Estimated completion (next execution): 2019-08-04 12:11:59 (0:05:15 from now)
[2019-08-04 12:06:43: INFO] Reboot in preparation for next execution
[2019-08-04 12:15:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.987 s/op
Iteration   2: 4.710 s/op
Iteration   3: 4.323 s/op
Iteration   4: 4.375 s/op
Iteration   5: 4.377 s/op
Iteration   6: 4.410 s/op
Iteration   7: 4.594 s/op
Iteration   8: 4.672 s/op
Iteration   9: 4.496 s/op
Iteration  10: 4.503 s/op
Iteration  11: 4.619 s/op
Iteration  12: 4.631 s/op
Iteration  13: 4.457 s/op
Iteration  14: 4.383 s/op
Iteration  15: 4.709 s/op
Iteration  16: 4.471 s/op
Iteration  17: 4.341 s/op
Iteration  18: 4.397 s/op
Iteration  19: 4.523 s/op
Iteration  20: 4.352 s/op
Iteration  21: 4.476 s/op
Iteration  22: 4.509 s/op
Iteration  23: 4.356 s/op
Iteration  24: 4.328 s/op
Iteration  25: 4.436 s/op
Iteration  26: 5.471 s/op
Iteration  27: 4.378 s/op
Iteration  28: 4.342 s/op
Iteration  29: 4.409 s/op
Iteration  30: 4.529 s/op
Iteration  31: 4.342 s/op
Iteration  32: 4.309 s/op
Iteration  33: 4.389 s/op
Iteration  34: 4.537 s/op
Iteration  35: 4.358 s/op
Iteration  36: 4.313 s/op
Iteration  37: 4.406 s/op
Iteration  38: 4.523 s/op
Iteration  39: 4.369 s/op
Iteration  40: 4.338 s/op
Iteration  41: 4.450 s/op
Iteration  42: 4.502 s/op
Iteration  43: 4.368 s/op
Iteration  44: 4.344 s/op
Iteration  45: 4.317 s/op
Iteration  46: 4.382 s/op
Iteration  47: 4.528 s/op
Iteration  48: 4.342 s/op
Iteration  49: 4.331 s/op
Iteration  50: 4.418 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.469 ?(99.9%) 0.097 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 0 
    [4.250, 4.375) = 17 
    [4.375, 4.500) = 17 
    [4.500, 4.625) = 10 
    [4.625, 4.750) = 4 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 1 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 1 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.309 s/op
     p(50.0000) =      4.408 s/op
     p(90.0000) =      4.668 s/op
     p(95.0000) =      4.835 s/op
     p(99.0000) =      5.471 s/op
     p(99.9000) =      5.471 s/op
     p(99.9900) =      5.471 s/op
     p(99.9990) =      5.471 s/op
     p(99.9999) =      5.471 s/op
    p(100.0000) =      5.471 s/op


# Run complete. Total time: 00:03:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  4.469 ? 0.097   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ee-19.1.1_1564913486703.json
{"wallclock_times": [224.41705485000003], "core_cycle_counts": [[167713623038], [196610778650], [179556803548], [268224045860]], "aperf_counts": [[167120345746], [196567386162], [179526220083], [268205099335]], "mperf_counts": [[167139043380], [196568222168], [179527522854], [268214592998]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 12:15:11: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-08-04 12:15:12: INFO] Estimated completion (whole session): 2019-08-05 19:46:23 (1 day, 7:31:11 from now)
[2019-08-04 12:15:12: INFO] 212 executions left in scheduler queue
[2019-08-04 12:15:12: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-08-04 12:15:12: INFO] Estimated completion (next execution): 2019-08-04 12:21:25 (0:06:13 from now)
[2019-08-04 12:15:12: INFO] Reboot in preparation for next execution
[2019-08-04 12:27:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.713 s/op
Iteration   2: 9.281 s/op
Iteration   3: 9.647 s/op
Iteration   4: 9.329 s/op
Iteration   5: 9.249 s/op
Iteration   6: 9.316 s/op
Iteration   7: 9.227 s/op
Iteration   8: 9.411 s/op
Iteration   9: 9.301 s/op
Iteration  10: 9.141 s/op
Iteration  11: 9.296 s/op
Iteration  12: 10.356 s/op
Iteration  13: 9.118 s/op
Iteration  14: 9.324 s/op
Iteration  15: 9.330 s/op
Iteration  16: 9.174 s/op
Iteration  17: 9.346 s/op
Iteration  18: 9.185 s/op
Iteration  19: 9.323 s/op
Iteration  20: 9.337 s/op
Iteration  21: 9.238 s/op
Iteration  22: 9.366 s/op
Iteration  23: 9.995 s/op
Iteration  24: 9.279 s/op
Iteration  25: 9.204 s/op
Iteration  26: 9.291 s/op
Iteration  27: 9.360 s/op
Iteration  28: 9.177 s/op
Iteration  29: 9.346 s/op
Iteration  30: 9.177 s/op
Iteration  31: 9.346 s/op
Iteration  32: 9.165 s/op
Iteration  33: 9.353 s/op
Iteration  34: 9.947 s/op
Iteration  35: 9.258 s/op
Iteration  36: 9.250 s/op
Iteration  37: 9.330 s/op
Iteration  38: 9.357 s/op
Iteration  39: 9.192 s/op
Iteration  40: 9.361 s/op
Iteration  41: 9.190 s/op
Iteration  42: 9.347 s/op
Iteration  43: 9.177 s/op
Iteration  44: 9.383 s/op
Iteration  45: 9.949 s/op
Iteration  46: 9.251 s/op
Iteration  47: 9.183 s/op
Iteration  48: 9.390 s/op
Iteration  49: 9.384 s/op
Iteration  50: 9.208 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      9.357 ?(99.9%) 0.120 s/op

  Histogram, s/op:
    [ 9.000,  9.125) = 1 
    [ 9.125,  9.250) = 15 
    [ 9.250,  9.375) = 24 
    [ 9.375,  9.500) = 4 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 2 
    [ 9.750,  9.875) = 0 
    [ 9.875, 10.000) = 3 
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 1 
    [10.375, 10.500) = 0 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.118 s/op
     p(50.0000) =      9.319 s/op
     p(90.0000) =      9.706 s/op
     p(95.0000) =      9.970 s/op
     p(99.0000) =     10.356 s/op
     p(99.9000) =     10.356 s/op
     p(99.9900) =     10.356 s/op
     p(99.9990) =     10.356 s/op
     p(99.9999) =     10.356 s/op
    p(100.0000) =     10.356 s/op


# Run complete. Total time: 00:07:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  9.357 ? 0.120   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_graalvm-ce-19.1.1_1564913993657.json
{"wallclock_times": [468.83422056099994], "core_cycle_counts": [[407392295816], [423389383759], [578294394550], [313892533497]], "aperf_counts": [[406176764601], [423280105877], [578254150095], [313848774471]], "mperf_counts": [[406190275264], [423286661046], [578257591060], [313861743906]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 12:27:42: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-08-04 12:27:43: INFO] Estimated completion (whole session): 2019-08-05 19:48:33 (1 day, 7:20:49 from now)
[2019-08-04 12:27:43: INFO] 211 executions left in scheduler queue
[2019-08-04 12:27:43: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 12:27:43: INFO] Estimated completion (next execution): 2019-08-04 12:38:03 (0:10:20 from now)
[2019-08-04 12:27:43: INFO] Reboot in preparation for next execution
[2019-08-04 12:36:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.064 s/op
Iteration   2: 5.718 s/op
Iteration   3: 5.518 s/op
Iteration   4: 5.548 s/op
Iteration   5: 5.549 s/op
Iteration   6: 5.548 s/op
Iteration   7: 5.529 s/op
Iteration   8: 5.531 s/op
Iteration   9: 5.548 s/op
Iteration  10: 5.523 s/op
Iteration  11: 5.529 s/op
Iteration  12: 5.537 s/op
Iteration  13: 5.523 s/op
Iteration  14: 5.540 s/op
Iteration  15: 5.524 s/op
Iteration  16: 5.531 s/op
Iteration  17: 5.538 s/op
Iteration  18: 5.537 s/op
Iteration  19: 5.520 s/op
Iteration  20: 5.525 s/op
Iteration  21: 5.520 s/op
Iteration  22: 5.526 s/op
Iteration  23: 5.525 s/op
Iteration  24: 5.526 s/op
Iteration  25: 5.534 s/op
Iteration  26: 5.517 s/op
Iteration  27: 5.501 s/op
Iteration  28: 5.534 s/op
Iteration  29: 5.499 s/op
Iteration  30: 5.524 s/op
Iteration  31: 5.529 s/op
Iteration  32: 5.542 s/op
Iteration  33: 5.530 s/op
Iteration  34: 5.521 s/op
Iteration  35: 5.521 s/op
Iteration  36: 5.540 s/op
Iteration  37: 5.519 s/op
Iteration  38: 5.515 s/op
Iteration  39: 5.526 s/op
Iteration  40: 5.533 s/op
Iteration  41: 5.514 s/op
Iteration  42: 5.519 s/op
Iteration  43: 5.519 s/op
Iteration  44: 5.525 s/op
Iteration  45: 5.512 s/op
Iteration  46: 5.541 s/op
Iteration  47: 5.518 s/op
Iteration  48: 5.509 s/op
Iteration  49: 5.524 s/op
Iteration  50: 5.534 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.542 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 1 
    [5.500, 5.550) = 47 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 1 
    [5.750, 5.800) = 0 
    [5.800, 5.850) = 0 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 0 
    [6.050, 6.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.499 s/op
     p(50.0000) =      5.526 s/op
     p(90.0000) =      5.548 s/op
     p(95.0000) =      5.625 s/op
     p(99.0000) =      6.064 s/op
     p(99.9000) =      6.064 s/op
     p(99.9900) =      6.064 s/op
     p(99.9990) =      6.064 s/op
     p(99.9999) =      6.064 s/op
    p(100.0000) =      6.064 s/op


# Run complete. Total time: 00:04:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.542 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot-8u222-b10_1564914730615.json
{"wallclock_times": [278.034764103], "core_cycle_counts": [[242206913521], [245250012663], [103799333781], [313856722798]], "aperf_counts": [[241579981534], [245196086367], [103767828872], [313830365656]], "mperf_counts": [[241595644966], [245197569826], [103769245286], [313831082538]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 12:36:48: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 12:36:49: INFO] Estimated completion (whole session): 2019-08-05 19:50:28 (1 day, 7:13:38 from now)
[2019-08-04 12:36:49: INFO] 210 executions left in scheduler queue
[2019-08-04 12:36:49: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 12:36:49: INFO] Estimated completion (next execution): 2019-08-04 12:43:59 (0:07:09 from now)
[2019-08-04 12:36:49: INFO] Reboot in preparation for next execution
[2019-08-04 12:50:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.847 s/op
Iteration   2: 10.328 s/op
Iteration   3: 9.870 s/op
Iteration   4: 9.854 s/op
Iteration   5: 9.894 s/op
Iteration   6: 9.958 s/op
Iteration   7: 9.985 s/op
Iteration   8: 9.951 s/op
Iteration   9: 9.961 s/op
Iteration  10: 9.935 s/op
Iteration  11: 9.987 s/op
Iteration  12: 9.962 s/op
Iteration  13: 9.986 s/op
Iteration  14: 9.966 s/op
Iteration  15: 9.982 s/op
Iteration  16: 9.970 s/op
Iteration  17: 9.961 s/op
Iteration  18: 9.987 s/op
Iteration  19: 9.965 s/op
Iteration  20: 9.951 s/op
Iteration  21: 9.945 s/op
Iteration  22: 9.985 s/op
Iteration  23: 9.987 s/op
Iteration  24: 10.001 s/op
Iteration  25: 9.933 s/op
Iteration  26: 9.950 s/op
Iteration  27: 9.923 s/op
Iteration  28: 9.972 s/op
Iteration  29: 9.972 s/op
Iteration  30: 9.972 s/op
Iteration  31: 9.942 s/op
Iteration  32: 9.988 s/op
Iteration  33: 9.926 s/op
Iteration  34: 9.999 s/op
Iteration  35: 9.970 s/op
Iteration  36: 9.978 s/op
Iteration  37: 9.984 s/op
Iteration  38: 9.985 s/op
Iteration  39: 9.976 s/op
Iteration  40: 9.945 s/op
Iteration  41: 9.952 s/op
Iteration  42: 9.945 s/op
Iteration  43: 9.926 s/op
Iteration  44: 9.966 s/op
Iteration  45: 9.912 s/op
Iteration  46: 9.940 s/op
Iteration  47: 9.954 s/op
Iteration  48: 9.949 s/op
Iteration  49: 9.978 s/op
Iteration  50: 9.955 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.962 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [ 9.800,  9.850) = 1 
    [ 9.850,  9.900) = 3 
    [ 9.900,  9.950) = 13 
    [ 9.950, 10.000) = 31 
    [10.000, 10.050) = 1 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 0 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 0 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.847 s/op
     p(50.0000) =      9.962 s/op
     p(90.0000) =      9.987 s/op
     p(95.0000) =     10.000 s/op
     p(99.0000) =     10.328 s/op
     p(99.9000) =     10.328 s/op
     p(99.9900) =     10.328 s/op
     p(99.9990) =     10.328 s/op
     p(99.9999) =     10.328 s/op
    p(100.0000) =     10.328 s/op


# Run complete. Total time: 00:08:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.962 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot-8u222-b10_1564915316223.json
{"wallclock_times": [498.982296409], "core_cycle_counts": [[247427450380], [736554506280], [266030294707], [360660794918]], "aperf_counts": [[246164581665], [736500390812], [265999323448], [360628139145]], "mperf_counts": [[246174055504], [736512589818], [265999437104], [360628545794]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 12:50:15: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 12:50:16: INFO] Estimated completion (whole session): 2019-08-05 19:53:05 (1 day, 7:02:49 from now)
[2019-08-04 12:50:16: INFO] 209 executions left in scheduler queue
[2019-08-04 12:50:16: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 12:50:16: INFO] Estimated completion (next execution): 2019-08-04 13:01:05 (0:10:49 from now)
[2019-08-04 12:50:16: INFO] Reboot in preparation for next execution
[2019-08-04 13:01:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.694 s/op
Iteration   2: 6.224 s/op
Iteration   3: 6.149 s/op
Iteration   4: 6.165 s/op
Iteration   5: 6.216 s/op
Iteration   6: 6.261 s/op
Iteration   7: 6.234 s/op
Iteration   8: 6.220 s/op
Iteration   9: 6.144 s/op
Iteration  10: 6.216 s/op
Iteration  11: 6.242 s/op
Iteration  12: 6.242 s/op
Iteration  13: 6.146 s/op
Iteration  14: 6.264 s/op
Iteration  15: 6.206 s/op
Iteration  16: 6.244 s/op
Iteration  17: 6.176 s/op
Iteration  18: 6.232 s/op
Iteration  19: 6.170 s/op
Iteration  20: 6.193 s/op
Iteration  21: 6.204 s/op
Iteration  22: 6.244 s/op
Iteration  23: 6.154 s/op
Iteration  24: 6.256 s/op
Iteration  25: 6.155 s/op
Iteration  26: 6.255 s/op
Iteration  27: 6.242 s/op
Iteration  28: 6.137 s/op
Iteration  29: 6.220 s/op
Iteration  30: 6.236 s/op
Iteration  31: 6.244 s/op
Iteration  32: 6.153 s/op
Iteration  33: 6.244 s/op
Iteration  34: 6.243 s/op
Iteration  35: 6.264 s/op
Iteration  36: 6.127 s/op
Iteration  37: 6.235 s/op
Iteration  38: 6.222 s/op
Iteration  39: 6.151 s/op
Iteration  40: 6.212 s/op
Iteration  41: 6.244 s/op
Iteration  42: 6.255 s/op
Iteration  43: 6.140 s/op
Iteration  44: 6.203 s/op
Iteration  45: 6.247 s/op
Iteration  46: 6.229 s/op
Iteration  47: 6.169 s/op
Iteration  48: 6.170 s/op
Iteration  49: 6.603 s/op
Iteration  50: 6.190 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.226 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [6.100, 6.150) = 6 
    [6.150, 6.200) = 11 
    [6.200, 6.250) = 25 
    [6.250, 6.300) = 6 
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.127 s/op
     p(50.0000) =      6.221 s/op
     p(90.0000) =      6.261 s/op
     p(95.0000) =      6.417 s/op
     p(99.0000) =      6.694 s/op
     p(99.9000) =      6.694 s/op
     p(99.9900) =      6.694 s/op
     p(99.9990) =      6.694 s/op
     p(99.9999) =      6.694 s/op
    p(100.0000) =      6.694 s/op


# Run complete. Total time: 00:05:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.226 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot-8u222-b10_1564916170672.json
{"wallclock_times": [312.31118485099995], "core_cycle_counts": [[222884263832], [204531598412], [339659627444], [313478198051]], "aperf_counts": [[222066387636], [204446093788], [339605300633], [313428863534]], "mperf_counts": [[222077798394], [204456817464], [339606343264], [313434586714]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 13:01:22: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 13:01:23: INFO] Estimated completion (whole session): 2019-08-05 19:56:39 (1 day, 6:55:15 from now)
[2019-08-04 13:01:23: INFO] 208 executions left in scheduler queue
[2019-08-04 13:01:23: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 13:01:23: INFO] Estimated completion (next execution): 2019-08-04 13:09:01 (0:07:38 from now)
[2019-08-04 13:01:23: INFO] Reboot in preparation for next execution
[2019-08-04 13:19:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.049 s/op
Iteration   2: 15.358 s/op
Iteration   3: 15.154 s/op
Iteration   4: 15.164 s/op
Iteration   5: 15.094 s/op
Iteration   6: 15.127 s/op
Iteration   7: 15.108 s/op
Iteration   8: 15.169 s/op
Iteration   9: 15.175 s/op
Iteration  10: 15.168 s/op
Iteration  11: 15.166 s/op
Iteration  12: 15.184 s/op
Iteration  13: 15.578 s/op
Iteration  14: 15.135 s/op
Iteration  15: 15.152 s/op
Iteration  16: 15.199 s/op
Iteration  17: 15.277 s/op
Iteration  18: 15.182 s/op
Iteration  19: 15.162 s/op
Iteration  20: 15.195 s/op
Iteration  21: 15.193 s/op
Iteration  22: 15.187 s/op
Iteration  23: 15.223 s/op
Iteration  24: 15.168 s/op
Iteration  25: 15.199 s/op
Iteration  26: 15.360 s/op
Iteration  27: 15.151 s/op
Iteration  28: 15.204 s/op
Iteration  29: 15.183 s/op
Iteration  30: 15.477 s/op
Iteration  31: 15.207 s/op
Iteration  32: 15.146 s/op
Iteration  33: 15.151 s/op
Iteration  34: 15.367 s/op
Iteration  35: 15.172 s/op
Iteration  36: 15.193 s/op
Iteration  37: 15.190 s/op
Iteration  38: 15.216 s/op
Iteration  39: 15.154 s/op
Iteration  40: 15.178 s/op
Iteration  41: 15.187 s/op
Iteration  42: 15.195 s/op
Iteration  43: 15.169 s/op
Iteration  44: 15.189 s/op
Iteration  45: 15.185 s/op
Iteration  46: 15.132 s/op
Iteration  47: 15.174 s/op
Iteration  48: 15.178 s/op
Iteration  49: 15.207 s/op
Iteration  50: 15.163 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.198 ?(99.9%) 0.044 s/op

  Histogram, s/op:
    [15.000, 15.050) = 1 
    [15.050, 15.100) = 1 
    [15.100, 15.150) = 5 
    [15.150, 15.200) = 32 
    [15.200, 15.250) = 5 
    [15.250, 15.300) = 1 
    [15.300, 15.350) = 0 
    [15.350, 15.400) = 3 
    [15.400, 15.450) = 0 
    [15.450, 15.500) = 1 
    [15.500, 15.550) = 0 
    [15.550, 15.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.049 s/op
     p(50.0000) =     15.180 s/op
     p(90.0000) =     15.350 s/op
     p(95.0000) =     15.417 s/op
     p(99.0000) =     15.578 s/op
     p(99.9000) =     15.578 s/op
     p(99.9900) =     15.578 s/op
     p(99.9990) =     15.578 s/op
     p(99.9999) =     15.578 s/op
    p(100.0000) =     15.578 s/op


# Run complete. Total time: 00:12:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.198 ? 0.044   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot-8u222-b10_1564916791314.json
{"wallclock_times": [760.791116851], "core_cycle_counts": [[507478205975], [729761192829], [564298773597], [646908380763]], "aperf_counts": [[505648369319], [729651575144], [564263455348], [646877928227]], "mperf_counts": [[505659236772], [729660543574], [564265319144], [646878053898]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 13:19:12: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-04 13:19:13: INFO] Estimated completion (whole session): 2019-08-05 19:59:13 (1 day, 6:40:00 from now)
[2019-08-04 13:19:13: INFO] 207 executions left in scheduler queue
[2019-08-04 13:19:13: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-08-04 13:19:13: INFO] Estimated completion (next execution): 2019-08-04 13:34:26 (0:15:13 from now)
[2019-08-04 13:19:13: INFO] Reboot in preparation for next execution
[2019-08-04 13:23:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 13:36:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.601 s/op
Iteration   2: 15.693 s/op
Iteration   3: 15.161 s/op
Iteration   4: 15.130 s/op
Iteration   5: 15.167 s/op
Iteration   6: 15.115 s/op
Iteration   7: 15.097 s/op
Iteration   8: 15.082 s/op
Iteration   9: 15.108 s/op
Iteration  10: 15.094 s/op
Iteration  11: 15.116 s/op
Iteration  12: 15.133 s/op
Iteration  13: 15.104 s/op
Iteration  14: 15.092 s/op
Iteration  15: 15.076 s/op
Iteration  16: 15.158 s/op
Iteration  17: 15.129 s/op
Iteration  18: 15.159 s/op
Iteration  19: 15.146 s/op
Iteration  20: 15.112 s/op
Iteration  21: 15.135 s/op
Iteration  22: 15.118 s/op
Iteration  23: 15.158 s/op
Iteration  24: 15.105 s/op
Iteration  25: 15.098 s/op
Iteration  26: 15.106 s/op
Iteration  27: 15.138 s/op
Iteration  28: 15.099 s/op
Iteration  29: 15.078 s/op
Iteration  30: 15.088 s/op
Iteration  31: 15.138 s/op
Iteration  32: 15.148 s/op
Iteration  33: 15.104 s/op
Iteration  34: 15.120 s/op
Iteration  35: 15.132 s/op
Iteration  36: 15.100 s/op
Iteration  37: 15.085 s/op
Iteration  38: 15.097 s/op
Iteration  39: 15.121 s/op
Iteration  40: 15.085 s/op
Iteration  41: 15.126 s/op
Iteration  42: 15.103 s/op
Iteration  43: 15.103 s/op
Iteration  44: 15.109 s/op
Iteration  45: 15.106 s/op
Iteration  46: 15.132 s/op
Iteration  47: 15.106 s/op
Iteration  48: 15.129 s/op
Iteration  49: 15.203 s/op
Iteration  50: 15.150 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     15.200 ?(99.9%) 0.247 s/op

  Histogram, s/op:
    [15.000, 15.250) = 48 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 1 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.076 s/op
     p(50.0000) =     15.115 s/op
     p(90.0000) =     15.161 s/op
     p(95.0000) =     15.424 s/op
     p(99.0000) =     18.601 s/op
     p(99.9000) =     18.601 s/op
     p(99.9900) =     18.601 s/op
     p(99.9990) =     18.601 s/op
     p(99.9999) =     18.601 s/op
    p(100.0000) =     18.601 s/op


# Run complete. Total time: 00:12:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  15.200 ? 0.247   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9-8u222-b10_1564917838555.json
{"wallclock_times": [761.075106493], "core_cycle_counts": [[613003338012], [351069428735], [670175329995], [846421664630]], "aperf_counts": [[610958501034], [350863511030], [670077411756], [846309563190]], "mperf_counts": [[610966966178], [350866035462], [670081272924], [846309932140]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 13:36:39: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-08-04 13:36:40: INFO] Estimated completion (whole session): 2019-08-05 20:00:56 (1 day, 6:24:15 from now)
[2019-08-04 13:36:40: INFO] 206 executions left in scheduler queue
[2019-08-04 13:36:40: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-08-04 13:36:40: INFO] Estimated completion (next execution): 2019-08-04 13:52:08 (0:15:27 from now)
[2019-08-04 13:36:40: INFO] Reboot in preparation for next execution
[2019-08-04 13:45:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.573 s/op
Iteration   2: 5.255 s/op
Iteration   3: 5.628 s/op
Iteration   4: 5.491 s/op
Iteration   5: 5.497 s/op
Iteration   6: 5.491 s/op
Iteration   7: 5.495 s/op
Iteration   8: 5.491 s/op
Iteration   9: 5.494 s/op
Iteration  10: 5.495 s/op
Iteration  11: 5.502 s/op
Iteration  12: 5.498 s/op
Iteration  13: 5.487 s/op
Iteration  14: 5.494 s/op
Iteration  15: 5.503 s/op
Iteration  16: 5.492 s/op
Iteration  17: 5.495 s/op
Iteration  18: 5.500 s/op
Iteration  19: 5.491 s/op
Iteration  20: 5.494 s/op
Iteration  21: 5.493 s/op
Iteration  22: 5.499 s/op
Iteration  23: 5.494 s/op
Iteration  24: 5.492 s/op
Iteration  25: 5.490 s/op
Iteration  26: 5.494 s/op
Iteration  27: 5.492 s/op
Iteration  28: 5.480 s/op
Iteration  29: 5.496 s/op
Iteration  30: 5.494 s/op
Iteration  31: 5.495 s/op
Iteration  32: 5.495 s/op
Iteration  33: 5.496 s/op
Iteration  34: 5.494 s/op
Iteration  35: 5.493 s/op
Iteration  36: 5.494 s/op
Iteration  37: 5.490 s/op
Iteration  38: 5.493 s/op
Iteration  39: 5.483 s/op
Iteration  40: 5.498 s/op
Iteration  41: 5.497 s/op
Iteration  42: 5.492 s/op
Iteration  43: 5.495 s/op
Iteration  44: 5.505 s/op
Iteration  45: 5.493 s/op
Iteration  46: 5.495 s/op
Iteration  47: 5.493 s/op
Iteration  48: 5.487 s/op
Iteration  49: 5.487 s/op
Iteration  50: 5.492 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.493 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 1 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 44 
    [5.500, 5.550) = 3 
    [5.550, 5.600) = 1 
    [5.600, 5.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.255 s/op
     p(50.0000) =      5.494 s/op
     p(90.0000) =      5.502 s/op
     p(95.0000) =      5.535 s/op
     p(99.0000) =      5.628 s/op
     p(99.9000) =      5.628 s/op
     p(99.9900) =      5.628 s/op
     p(99.9990) =      5.628 s/op
     p(99.9999) =      5.628 s/op
    p(100.0000) =      5.628 s/op


# Run complete. Total time: 00:04:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.493 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot-8u222-b10_1564918867631.json
{"wallclock_times": [275.50400341700004], "core_cycle_counts": [[252728536747], [220701430661], [219504997564], [204509488768]], "aperf_counts": [[252106090123], [220632559233], [219473828995], [204476502691]], "mperf_counts": [[252112014978], [220641390848], [219491115210], [204477620202]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 13:45:43: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-08-04 13:45:44: INFO] Estimated completion (whole session): 2019-08-05 20:03:04 (1 day, 6:17:20 from now)
[2019-08-04 13:45:44: INFO] 205 executions left in scheduler queue
[2019-08-04 13:45:44: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-08-04 13:45:44: INFO] Estimated completion (next execution): 2019-08-04 13:52:44 (0:07:00 from now)
[2019-08-04 13:45:44: INFO] Reboot in preparation for next execution
[2019-08-04 13:49:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 13:49:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 13:49:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 13:49:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 13:49:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 13:50:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 14:02:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.405 s/op
Iteration   2: 15.880 s/op
Iteration   3: 15.959 s/op
Iteration   4: 14.793 s/op
Iteration   5: 14.974 s/op
Iteration   6: 16.085 s/op
Iteration   7: 15.198 s/op
Iteration   8: 15.786 s/op
Iteration   9: 15.825 s/op
Iteration  10: 14.681 s/op
Iteration  11: 15.294 s/op
Iteration  12: 15.707 s/op
Iteration  13: 15.972 s/op
Iteration  14: 16.320 s/op
Iteration  15: 16.180 s/op
Iteration  16: 15.747 s/op
Iteration  17: 15.087 s/op
Iteration  18: 15.270 s/op
Iteration  19: 16.142 s/op
Iteration  20: 14.924 s/op
Iteration  21: 14.733 s/op
Iteration  22: 15.636 s/op
Iteration  23: 15.090 s/op
Iteration  24: 15.741 s/op
Iteration  25: 15.295 s/op
Iteration  26: 15.273 s/op
Iteration  27: 15.649 s/op
Iteration  28: 14.758 s/op
Iteration  29: 14.832 s/op
Iteration  30: 15.312 s/op
Iteration  31: 14.963 s/op
Iteration  32: 15.347 s/op
Iteration  33: 15.275 s/op
Iteration  34: 14.637 s/op
Iteration  35: 15.448 s/op
Iteration  36: 14.874 s/op
Iteration  37: 15.194 s/op
Iteration  38: 16.051 s/op
Iteration  39: 15.074 s/op
Iteration  40: 14.911 s/op
Iteration  41: 14.873 s/op
Iteration  42: 15.274 s/op
Iteration  43: 14.231 s/op
Iteration  44: 15.016 s/op
Iteration  45: 15.396 s/op
Iteration  46: 15.298 s/op
Iteration  47: 15.639 s/op
Iteration  48: 15.915 s/op
Iteration  49: 15.719 s/op
Iteration  50: 15.109 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.356 ?(99.9%) 0.235 s/op

  Histogram, s/op:
    [14.000, 14.250) = 1 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 3 
    [14.750, 15.000) = 9 
    [15.000, 15.250) = 7 
    [15.250, 15.500) = 12 
    [15.500, 15.750) = 7 
    [15.750, 16.000) = 6 
    [16.000, 16.250) = 4 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.231 s/op
     p(50.0000) =     15.295 s/op
     p(90.0000) =     16.043 s/op
     p(95.0000) =     16.159 s/op
     p(99.0000) =     16.320 s/op
     p(99.9000) =     16.320 s/op
     p(99.9900) =     16.320 s/op
     p(99.9990) =     16.320 s/op
     p(99.9999) =     16.320 s/op
    p(100.0000) =     16.320 s/op


# Run complete. Total time: 00:12:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  15.356 ? 0.235   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9_12.0.1_1564919399827.json
{"wallclock_times": [769.573792027], "core_cycle_counts": [[683431292855], [716067006559], [621928856206], [762821841588]], "aperf_counts": [[681474075758], [715914332908], [621762892447], [762634124400]], "mperf_counts": [[681484409284], [715915089570], [621762898720], [762634852072]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 14:02:49: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-08-04 14:02:50: INFO] Estimated completion (whole session): 2019-08-05 20:04:51 (1 day, 6:02:01 from now)
[2019-08-04 14:02:50: INFO] 204 executions left in scheduler queue
[2019-08-04 14:02:50: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-08-04 14:02:50: INFO] Estimated completion (next execution): 2019-08-04 14:18:09 (0:15:19 from now)
[2019-08-04 14:02:50: INFO] Reboot in preparation for next execution
[2019-08-04 14:08:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 14:23:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.156 s/op
Iteration   2: 17.635 s/op
Iteration   3: 17.892 s/op
Iteration   4: 17.939 s/op
Iteration   5: 18.023 s/op
Iteration   6: 17.968 s/op
Iteration   7: 17.062 s/op
Iteration   8: 17.558 s/op
Iteration   9: 16.475 s/op
Iteration  10: 17.944 s/op
Iteration  11: 17.984 s/op
Iteration  12: 18.049 s/op
Iteration  13: 18.163 s/op
Iteration  14: 16.652 s/op
Iteration  15: 18.038 s/op
Iteration  16: 17.729 s/op
Iteration  17: 17.913 s/op
Iteration  18: 17.765 s/op
Iteration  19: 17.836 s/op
Iteration  20: 17.719 s/op
Iteration  21: 17.727 s/op
Iteration  22: 17.914 s/op
Iteration  23: 18.004 s/op
Iteration  24: 17.035 s/op
Iteration  25: 17.997 s/op
Iteration  26: 17.631 s/op
Iteration  27: 17.681 s/op
Iteration  28: 17.786 s/op
Iteration  29: 17.777 s/op
Iteration  30: 17.567 s/op
Iteration  31: 17.309 s/op
Iteration  32: 17.572 s/op
Iteration  33: 17.841 s/op
Iteration  34: 16.724 s/op
Iteration  35: 17.579 s/op
Iteration  36: 16.930 s/op
Iteration  37: 17.975 s/op
Iteration  38: 17.723 s/op
Iteration  39: 17.559 s/op
Iteration  40: 17.317 s/op
Iteration  41: 17.579 s/op
Iteration  42: 17.381 s/op
Iteration  43: 17.522 s/op
Iteration  44: 17.386 s/op
Iteration  45: 17.656 s/op
Iteration  46: 17.320 s/op
Iteration  47: 17.525 s/op
Iteration  48: 17.375 s/op
Iteration  49: 17.786 s/op
Iteration  50: 17.424 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     17.602 ?(99.9%) 0.188 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 2 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 3 
    [17.250, 17.500) = 7 
    [17.500, 17.750) = 16 
    [17.750, 18.000) = 15 
    [18.000, 18.250) = 5 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.475 s/op
     p(50.0000) =     17.669 s/op
     p(90.0000) =     18.003 s/op
     p(95.0000) =     18.043 s/op
     p(99.0000) =     18.163 s/op
     p(99.9000) =     18.163 s/op
     p(99.9900) =     18.163 s/op
     p(99.9990) =     18.163 s/op
     p(99.9999) =     18.163 s/op
    p(100.0000) =     18.163 s/op


# Run complete. Total time: 00:14:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.602 ? 0.188   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9-8u222-b10_1564920509491.json
{"wallclock_times": [881.4309821950001], "core_cycle_counts": [[678360036069], [1073771494554], [650787375009], [711608956927]], "aperf_counts": [[675972305867], [1073570992635], [650609650799], [711431428806]], "mperf_counts": [[675976850956], [1073570933760], [650609719540], [711431397168]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 14:23:10: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-08-04 14:23:11: INFO] Estimated completion (whole session): 2019-08-05 20:07:47 (1 day, 5:44:35 from now)
[2019-08-04 14:23:11: INFO] 203 executions left in scheduler queue
[2019-08-04 14:23:11: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-04 14:23:11: INFO] Estimated completion (next execution): 2019-08-04 14:40:30 (0:17:18 from now)
[2019-08-04 14:23:11: INFO] Reboot in preparation for next execution
[2019-08-04 14:29:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.826 s/op
Iteration   2: 1.664 s/op
Iteration   3: 1.644 s/op
Iteration   4: 1.734 s/op
Iteration   5: 1.645 s/op
Iteration   6: 1.644 s/op
Iteration   7: 1.655 s/op
Iteration   8: 1.641 s/op
Iteration   9: 1.657 s/op
Iteration  10: 1.642 s/op
Iteration  11: 1.647 s/op
Iteration  12: 1.644 s/op
Iteration  13: 1.634 s/op
Iteration  14: 1.643 s/op
Iteration  15: 1.644 s/op
Iteration  16: 1.650 s/op
Iteration  17: 1.646 s/op
Iteration  18: 1.646 s/op
Iteration  19: 1.643 s/op
Iteration  20: 1.647 s/op
Iteration  21: 1.649 s/op
Iteration  22: 1.642 s/op
Iteration  23: 1.646 s/op
Iteration  24: 1.658 s/op
Iteration  25: 1.648 s/op
Iteration  26: 1.656 s/op
Iteration  27: 1.643 s/op
Iteration  28: 1.641 s/op
Iteration  29: 1.642 s/op
Iteration  30: 1.650 s/op
Iteration  31: 1.644 s/op
Iteration  32: 1.640 s/op
Iteration  33: 1.645 s/op
Iteration  34: 1.647 s/op
Iteration  35: 1.634 s/op
Iteration  36: 1.645 s/op
Iteration  37: 1.644 s/op
Iteration  38: 1.642 s/op
Iteration  39: 1.641 s/op
Iteration  40: 1.650 s/op
Iteration  41: 1.642 s/op
Iteration  42: 1.656 s/op
Iteration  43: 1.648 s/op
Iteration  44: 1.643 s/op
Iteration  45: 1.647 s/op
Iteration  46: 1.633 s/op
Iteration  47: 1.642 s/op
Iteration  48: 1.640 s/op
Iteration  49: 1.642 s/op
Iteration  50: 1.643 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.651 ?(99.9%) 0.014 s/op

  Histogram, s/op:
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 40 
    [1.650, 1.675) = 8 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 1 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 1 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.633 s/op
     p(50.0000) =      1.644 s/op
     p(90.0000) =      1.657 s/op
     p(95.0000) =      1.696 s/op
     p(99.0000) =      1.826 s/op
     p(99.9000) =      1.826 s/op
     p(99.9900) =      1.826 s/op
     p(99.9990) =      1.826 s/op
     p(99.9999) =      1.826 s/op
    p(100.0000) =      1.826 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.651 ? 0.014   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ce-19.1.1_1564921692774.json
{"wallclock_times": [83.47426864600001], "core_cycle_counts": [[81600338181], [131107278795], [31728199003], [33613435675]], "aperf_counts": [[81343807305], [131076506635], [31703292565], [33591412034]], "mperf_counts": [[81362222872], [131096622272], [31713378464], [33600352116]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 14:29:36: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-04 14:29:37: INFO] Estimated completion (whole session): 2019-08-05 20:10:21 (1 day, 5:40:44 from now)
[2019-08-04 14:29:37: INFO] 202 executions left in scheduler queue
[2019-08-04 14:29:37: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-04 14:29:37: INFO] Estimated completion (next execution): 2019-08-04 14:33:29 (0:03:52 from now)
[2019-08-04 14:29:37: INFO] Reboot in preparation for next execution
[2019-08-04 14:36:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.736 s/op
Iteration   2: 1.484 s/op
Iteration   3: 1.543 s/op
Iteration   4: 1.427 s/op
Iteration   5: 1.427 s/op
Iteration   6: 1.428 s/op
Iteration   7: 1.431 s/op
Iteration   8: 1.427 s/op
Iteration   9: 1.427 s/op
Iteration  10: 1.429 s/op
Iteration  11: 1.429 s/op
Iteration  12: 1.429 s/op
Iteration  13: 1.428 s/op
Iteration  14: 1.427 s/op
Iteration  15: 1.427 s/op
Iteration  16: 1.427 s/op
Iteration  17: 1.426 s/op
Iteration  18: 1.426 s/op
Iteration  19: 1.427 s/op
Iteration  20: 1.428 s/op
Iteration  21: 1.427 s/op
Iteration  22: 1.425 s/op
Iteration  23: 1.427 s/op
Iteration  24: 1.427 s/op
Iteration  25: 1.429 s/op
Iteration  26: 1.428 s/op
Iteration  27: 1.430 s/op
Iteration  28: 1.430 s/op
Iteration  29: 1.428 s/op
Iteration  30: 1.427 s/op
Iteration  31: 1.427 s/op
Iteration  32: 1.427 s/op
Iteration  33: 1.427 s/op
Iteration  34: 1.427 s/op
Iteration  35: 1.426 s/op
Iteration  36: 1.426 s/op
Iteration  37: 1.427 s/op
Iteration  38: 1.428 s/op
Iteration  39: 1.428 s/op
Iteration  40: 1.426 s/op
Iteration  41: 1.429 s/op
Iteration  42: 1.428 s/op
Iteration  43: 1.429 s/op
Iteration  44: 1.427 s/op
Iteration  45: 1.429 s/op
Iteration  46: 1.428 s/op
Iteration  47: 1.428 s/op
Iteration  48: 1.428 s/op
Iteration  49: 1.429 s/op
Iteration  50: 1.427 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.437 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [1.400, 1.425) = 0 
    [1.425, 1.450) = 47 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 1 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 1 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 1 
    [1.750, 1.775) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.425 s/op
     p(50.0000) =      1.428 s/op
     p(90.0000) =      1.430 s/op
     p(95.0000) =      1.511 s/op
     p(99.0000) =      1.736 s/op
     p(99.9000) =      1.736 s/op
     p(99.9900) =      1.736 s/op
     p(99.9990) =      1.736 s/op
     p(99.9999) =      1.736 s/op
    p(100.0000) =      1.736 s/op


# Run complete. Total time: 00:01:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.437 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ce-19.1.1_1564922103212.json
{"wallclock_times": [72.73021382599998], "core_cycle_counts": [[66371191880], [81874646530], [49109348389], [41084830933]], "aperf_counts": [[66202457864], [81850383029], [49094488997], [41072064216]], "mperf_counts": [[66234150092], [81862334338], [49096877126], [41072785970]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 14:36:15: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-04 14:36:16: INFO] Estimated completion (whole session): 2019-08-05 20:13:07 (1 day, 5:36:50 from now)
[2019-08-04 14:36:16: INFO] 201 executions left in scheduler queue
[2019-08-04 14:36:16: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-04 14:36:16: INFO] Estimated completion (next execution): 2019-08-04 14:40:05 (0:03:48 from now)
[2019-08-04 14:36:16: INFO] Reboot in preparation for next execution
[2019-08-04 14:42:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.921 s/op
Iteration   2: 1.547 s/op
Iteration   3: 1.851 s/op
Iteration   4: 1.923 s/op
Iteration   5: 1.862 s/op
Iteration   6: 1.854 s/op
Iteration   7: 1.850 s/op
Iteration   8: 1.846 s/op
Iteration   9: 1.858 s/op
Iteration  10: 1.851 s/op
Iteration  11: 1.850 s/op
Iteration  12: 1.849 s/op
Iteration  13: 1.848 s/op
Iteration  14: 1.854 s/op
Iteration  15: 1.851 s/op
Iteration  16: 1.851 s/op
Iteration  17: 1.864 s/op
Iteration  18: 1.847 s/op
Iteration  19: 1.865 s/op
Iteration  20: 1.857 s/op
Iteration  21: 1.843 s/op
Iteration  22: 1.851 s/op
Iteration  23: 1.849 s/op
Iteration  24: 1.848 s/op
Iteration  25: 1.847 s/op
Iteration  26: 1.853 s/op
Iteration  27: 1.848 s/op
Iteration  28: 1.849 s/op
Iteration  29: 1.853 s/op
Iteration  30: 1.853 s/op
Iteration  31: 1.850 s/op
Iteration  32: 1.849 s/op
Iteration  33: 1.850 s/op
Iteration  34: 1.846 s/op
Iteration  35: 1.846 s/op
Iteration  36: 1.848 s/op
Iteration  37: 1.849 s/op
Iteration  38: 1.851 s/op
Iteration  39: 1.846 s/op
Iteration  40: 1.850 s/op
Iteration  41: 1.854 s/op
Iteration  42: 1.856 s/op
Iteration  43: 1.849 s/op
Iteration  44: 1.850 s/op
Iteration  45: 1.849 s/op
Iteration  46: 1.842 s/op
Iteration  47: 1.843 s/op
Iteration  48: 1.847 s/op
Iteration  49: 1.846 s/op
Iteration  50: 1.854 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.847 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 25 
    [1.850, 1.900) = 22 
    [1.900, 1.950) = 2 

  Percentiles, s/op:
      p(0.0000) =      1.547 s/op
     p(50.0000) =      1.850 s/op
     p(90.0000) =      1.862 s/op
     p(95.0000) =      1.891 s/op
     p(99.0000) =      1.923 s/op
     p(99.9000) =      1.923 s/op
     p(99.9900) =      1.923 s/op
     p(99.9990) =      1.923 s/op
     p(99.9999) =      1.923 s/op
    p(100.0000) =      1.923 s/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.847 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot-8u222-b10_1564922437677.json
{"wallclock_times": [93.24258729900001], "core_cycle_counts": [[66899101963], [72755535377], [111639082891], [62018784927]], "aperf_counts": [[66590618272], [72723562670], [111620639701], [61997552262]], "mperf_counts": [[66617086118], [72726125956], [111621550270], [61997991574]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 14:42:10: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-04 14:42:11: INFO] Estimated completion (whole session): 2019-08-05 20:14:58 (1 day, 5:32:46 from now)
[2019-08-04 14:42:11: INFO] 200 executions left in scheduler queue
[2019-08-04 14:42:11: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-04 14:42:11: INFO] Estimated completion (next execution): 2019-08-04 14:46:15 (0:04:03 from now)
[2019-08-04 14:42:11: INFO] Reboot in preparation for next execution
[2019-08-04 14:47:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.024 s/op
Iteration   2: 1.579 s/op
Iteration   3: 1.914 s/op
Iteration   4: 1.782 s/op
Iteration   5: 1.769 s/op
Iteration   6: 1.781 s/op
Iteration   7: 1.780 s/op
Iteration   8: 1.776 s/op
Iteration   9: 1.779 s/op
Iteration  10: 1.776 s/op
Iteration  11: 1.777 s/op
Iteration  12: 1.777 s/op
Iteration  13: 1.780 s/op
Iteration  14: 1.780 s/op
Iteration  15: 1.779 s/op
Iteration  16: 1.776 s/op
Iteration  17: 1.775 s/op
Iteration  18: 1.777 s/op
Iteration  19: 1.774 s/op
Iteration  20: 1.777 s/op
Iteration  21: 1.773 s/op
Iteration  22: 1.778 s/op
Iteration  23: 1.773 s/op
Iteration  24: 1.772 s/op
Iteration  25: 1.778 s/op
Iteration  26: 1.772 s/op
Iteration  27: 1.778 s/op
Iteration  28: 1.771 s/op
Iteration  29: 1.770 s/op
Iteration  30: 1.778 s/op
Iteration  31: 1.775 s/op
Iteration  32: 1.774 s/op
Iteration  33: 1.782 s/op
Iteration  34: 1.778 s/op
Iteration  35: 1.774 s/op
Iteration  36: 1.776 s/op
Iteration  37: 1.774 s/op
Iteration  38: 1.774 s/op
Iteration  39: 1.777 s/op
Iteration  40: 1.777 s/op
Iteration  41: 1.777 s/op
Iteration  42: 1.776 s/op
Iteration  43: 1.778 s/op
Iteration  44: 1.778 s/op
Iteration  45: 1.779 s/op
Iteration  46: 1.778 s/op
Iteration  47: 1.777 s/op
Iteration  48: 1.777 s/op
Iteration  49: 1.778 s/op
Iteration  50: 1.777 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.780 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 1 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 47 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.579 s/op
     p(50.0000) =      1.777 s/op
     p(90.0000) =      1.781 s/op
     p(95.0000) =      1.842 s/op
     p(99.0000) =      2.024 s/op
     p(99.9000) =      2.024 s/op
     p(99.9900) =      2.024 s/op
     p(99.9990) =      2.024 s/op
     p(99.9999) =      2.024 s/op
    p(100.0000) =      2.024 s/op


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.780 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot-8u222-b10_1564922787628.json
{"wallclock_times": [89.83637155399998], "core_cycle_counts": [[70893227253], [58487456381], [57272903338], [106884425310]], "aperf_counts": [[70679809265], [58462435536], [57259013863], [106870961463]], "mperf_counts": [[70714298974], [58467182712], [57259230288], [106872487632]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 14:47:57: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-04 14:47:58: INFO] Estimated completion (whole session): 2019-08-05 20:16:27 (1 day, 5:28:29 from now)
[2019-08-04 14:47:58: INFO] 199 executions left in scheduler queue
[2019-08-04 14:47:58: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-04 14:47:58: INFO] Estimated completion (next execution): 2019-08-04 14:52:07 (0:04:08 from now)
[2019-08-04 14:47:58: INFO] Reboot in preparation for next execution
[2019-08-04 14:52:16: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 14:53:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.871 s/op
Iteration   2: 2.205 s/op
Iteration   3: 2.154 s/op
Iteration   4: 2.014 s/op
Iteration   5: 2.007 s/op
Iteration   6: 1.882 s/op
Iteration   7: 1.899 s/op
Iteration   8: 1.885 s/op
Iteration   9: 1.850 s/op
Iteration  10: 1.855 s/op
Iteration  11: 1.867 s/op
Iteration  12: 1.877 s/op
Iteration  13: 1.886 s/op
Iteration  14: 1.863 s/op
Iteration  15: 1.881 s/op
Iteration  16: 1.889 s/op
Iteration  17: 1.883 s/op
Iteration  18: 1.884 s/op
Iteration  19: 1.881 s/op
Iteration  20: 1.892 s/op
Iteration  21: 1.909 s/op
Iteration  22: 1.863 s/op
Iteration  23: 1.884 s/op
Iteration  24: 1.905 s/op
Iteration  25: 1.892 s/op
Iteration  26: 1.882 s/op
Iteration  27: 1.897 s/op
Iteration  28: 1.884 s/op
Iteration  29: 1.896 s/op
Iteration  30: 1.892 s/op
Iteration  31: 1.892 s/op
Iteration  32: 1.897 s/op
Iteration  33: 1.881 s/op
Iteration  34: 1.885 s/op
Iteration  35: 1.915 s/op
Iteration  36: 1.904 s/op
Iteration  37: 1.902 s/op
Iteration  38: 1.892 s/op
Iteration  39: 1.898 s/op
Iteration  40: 1.881 s/op
Iteration  41: 1.916 s/op
Iteration  42: 1.897 s/op
Iteration  43: 1.910 s/op
Iteration  44: 1.896 s/op
Iteration  45: 1.886 s/op
Iteration  46: 1.900 s/op
Iteration  47: 1.912 s/op
Iteration  48: 1.895 s/op
Iteration  49: 1.885 s/op
Iteration  50: 1.902 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.925 ?(99.9%) 0.074 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 5 
    [1.875, 2.000) = 40 
    [2.000, 2.125) = 2 
    [2.125, 2.250) = 2 
    [2.250, 2.375) = 0 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.850 s/op
     p(50.0000) =      1.892 s/op
     p(90.0000) =      1.997 s/op
     p(95.0000) =      2.177 s/op
     p(99.0000) =      2.871 s/op
     p(99.9000) =      2.871 s/op
     p(99.9900) =      2.871 s/op
     p(99.9990) =      2.871 s/op
     p(99.9999) =      2.871 s/op
    p(100.0000) =      2.871 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.925 ? 0.074   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9-8u222-b10_1564923136528.json
{"wallclock_times": [97.582450215], "core_cycle_counts": [[109096534822], [87504041163], [71069822341], [72602967429]], "aperf_counts": [[108789491962], [87428413944], [70996490972], [72557498350]], "mperf_counts": [[108803400066], [87428412556], [70999097476], [72558053356]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 14:53:54: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-04 14:53:55: INFO] Estimated completion (whole session): 2019-08-05 20:18:12 (1 day, 5:24:17 from now)
[2019-08-04 14:53:55: INFO] 198 executions left in scheduler queue
[2019-08-04 14:53:55: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-04 14:53:55: INFO] Estimated completion (next execution): 2019-08-04 14:58:04 (0:04:09 from now)
[2019-08-04 14:53:55: INFO] Reboot in preparation for next execution
[2019-08-04 14:58:25: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 15:00:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.239 s/op
Iteration   2: 2.986 s/op
Iteration   3: 3.031 s/op
Iteration   4: 2.771 s/op
Iteration   5: 2.665 s/op
Iteration   6: 2.734 s/op
Iteration   7: 2.735 s/op
Iteration   8: 2.716 s/op
Iteration   9: 2.639 s/op
Iteration  10: 2.616 s/op
Iteration  11: 2.618 s/op
Iteration  12: 2.657 s/op
Iteration  13: 2.615 s/op
Iteration  14: 2.652 s/op
Iteration  15: 2.622 s/op
Iteration  16: 2.618 s/op
Iteration  17: 2.654 s/op
Iteration  18: 2.584 s/op
Iteration  19: 2.660 s/op
Iteration  20: 2.617 s/op
Iteration  21: 2.632 s/op
Iteration  22: 2.645 s/op
Iteration  23: 2.613 s/op
Iteration  24: 2.594 s/op
Iteration  25: 2.666 s/op
Iteration  26: 2.617 s/op
Iteration  27: 2.658 s/op
Iteration  28: 2.717 s/op
Iteration  29: 2.642 s/op
Iteration  30: 2.679 s/op
Iteration  31: 2.656 s/op
Iteration  32: 2.718 s/op
Iteration  33: 2.673 s/op
Iteration  34: 2.726 s/op
Iteration  35: 2.649 s/op
Iteration  36: 2.657 s/op
Iteration  37: 2.726 s/op
Iteration  38: 2.632 s/op
Iteration  39: 2.649 s/op
Iteration  40: 2.673 s/op
Iteration  41: 2.641 s/op
Iteration  42: 2.653 s/op
Iteration  43: 2.672 s/op
Iteration  44: 2.646 s/op
Iteration  45: 2.702 s/op
Iteration  46: 2.679 s/op
Iteration  47: 2.642 s/op
Iteration  48: 2.714 s/op
Iteration  49: 2.652 s/op
Iteration  50: 2.694 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.687 ?(99.9%) 0.056 s/op

  Histogram, s/op:
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 2 
    [2.600, 2.650) = 18 
    [2.650, 2.700) = 17 
    [2.700, 2.750) = 9 
    [2.750, 2.800) = 1 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 1 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 1 
    [3.250, 3.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.584 s/op
     p(50.0000) =      2.656 s/op
     p(90.0000) =      2.735 s/op
     p(95.0000) =      3.006 s/op
     p(99.0000) =      3.239 s/op
     p(99.9000) =      3.239 s/op
     p(99.9900) =      3.239 s/op
     p(99.9990) =      3.239 s/op
     p(99.9999) =      3.239 s/op
    p(100.0000) =      3.239 s/op


# Run complete. Total time: 00:02:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.687 ? 0.056   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9-8u222-b10_1564923505680.json
{"wallclock_times": [135.490716673], "core_cycle_counts": [[109552250101], [119207915850], [134915097017], [103355114590]], "aperf_counts": [[109174510152], [119156259357], [134878596479], [103308061043]], "mperf_counts": [[109178795366], [119156253024], [134878891078], [103308222906]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 15:00:41: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-04 15:00:42: INFO] Estimated completion (whole session): 2019-08-05 20:20:13 (1 day, 5:19:31 from now)
[2019-08-04 15:00:42: INFO] 197 executions left in scheduler queue
[2019-08-04 15:00:42: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-04 15:00:42: INFO] Estimated completion (next execution): 2019-08-04 15:05:28 (0:04:46 from now)
[2019-08-04 15:00:42: INFO] Reboot in preparation for next execution
[2019-08-04 15:04:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 15:04:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 15:04:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 15:04:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 15:04:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 15:04:59: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 15:06:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.819 s/op
Iteration   2: 2.355 s/op
Iteration   3: 2.268 s/op
Iteration   4: 2.295 s/op
Iteration   5: 1.990 s/op
Iteration   6: 1.878 s/op
Iteration   7: 1.875 s/op
Iteration   8: 1.899 s/op
Iteration   9: 1.936 s/op
Iteration  10: 1.863 s/op
Iteration  11: 1.883 s/op
Iteration  12: 1.875 s/op
Iteration  13: 1.909 s/op
Iteration  14: 1.885 s/op
Iteration  15: 1.857 s/op
Iteration  16: 1.885 s/op
Iteration  17: 1.905 s/op
Iteration  18: 1.861 s/op
Iteration  19: 1.884 s/op
Iteration  20: 1.880 s/op
Iteration  21: 1.898 s/op
Iteration  22: 1.876 s/op
Iteration  23: 1.874 s/op
Iteration  24: 1.881 s/op
Iteration  25: 1.863 s/op
Iteration  26: 1.875 s/op
Iteration  27: 1.848 s/op
Iteration  28: 1.900 s/op
Iteration  29: 1.862 s/op
Iteration  30: 1.862 s/op
Iteration  31: 1.880 s/op
Iteration  32: 1.931 s/op
Iteration  33: 1.913 s/op
Iteration  34: 1.925 s/op
Iteration  35: 1.918 s/op
Iteration  36: 1.907 s/op
Iteration  37: 1.896 s/op
Iteration  38: 1.891 s/op
Iteration  39: 1.936 s/op
Iteration  40: 1.933 s/op
Iteration  41: 1.955 s/op
Iteration  42: 1.945 s/op
Iteration  43: 1.888 s/op
Iteration  44: 1.922 s/op
Iteration  45: 1.893 s/op
Iteration  46: 1.929 s/op
Iteration  47: 1.925 s/op
Iteration  48: 1.928 s/op
Iteration  49: 1.922 s/op
Iteration  50: 1.917 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.942 ?(99.9%) 0.081 s/op

  Histogram, s/op:
    [1.800, 1.900) = 27 
    [1.900, 2.000) = 19 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 2 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.848 s/op
     p(50.0000) =      1.899 s/op
     p(90.0000) =      1.986 s/op
     p(95.0000) =      2.322 s/op
     p(99.0000) =      2.819 s/op
     p(99.9000) =      2.819 s/op
     p(99.9900) =      2.819 s/op
     p(99.9990) =      2.819 s/op
     p(99.9999) =      2.819 s/op
    p(100.0000) =      2.819 s/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.942 ? 0.081   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_12.0.1_1564923898854.json
{"wallclock_times": [98.80238855700003], "core_cycle_counts": [[114753531826], [51271243046], [113660856430], [61409111113]], "aperf_counts": [[114444425584], [51180286149], [113604741348], [61344017009]], "mperf_counts": [[114447921246], [51180995820], [113606563702], [61345068350]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 15:06:37: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-04 15:06:38: INFO] Estimated completion (whole session): 2019-08-05 20:21:53 (1 day, 5:15:15 from now)
[2019-08-04 15:06:38: INFO] 196 executions left in scheduler queue
[2019-08-04 15:06:38: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-04 15:06:38: INFO] Estimated completion (next execution): 2019-08-04 15:10:51 (0:04:12 from now)
[2019-08-04 15:06:38: INFO] Reboot in preparation for next execution
[2019-08-04 15:11:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 15:11:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 15:11:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 15:11:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 15:11:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 15:11:54: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 15:14:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.327 s/op
Iteration   2: 2.968 s/op
Iteration   3: 2.832 s/op
Iteration   4: 3.033 s/op
Iteration   5: 2.704 s/op
Iteration   6: 2.714 s/op
Iteration   7: 2.682 s/op
Iteration   8: 2.676 s/op
Iteration   9: 2.653 s/op
Iteration  10: 2.748 s/op
Iteration  11: 2.718 s/op
Iteration  12: 2.730 s/op
Iteration  13: 2.779 s/op
Iteration  14: 2.758 s/op
Iteration  15: 2.779 s/op
Iteration  16: 2.749 s/op
Iteration  17: 2.795 s/op
Iteration  18: 2.775 s/op
Iteration  19: 2.724 s/op
Iteration  20: 2.755 s/op
Iteration  21: 2.725 s/op
Iteration  22: 2.724 s/op
Iteration  23: 2.742 s/op
Iteration  24: 2.726 s/op
Iteration  25: 2.703 s/op
Iteration  26: 2.739 s/op
Iteration  27: 2.681 s/op
Iteration  28: 2.721 s/op
Iteration  29: 2.723 s/op
Iteration  30: 2.734 s/op
Iteration  31: 2.709 s/op
Iteration  32: 2.770 s/op
Iteration  33: 2.773 s/op
Iteration  34: 2.767 s/op
Iteration  35: 2.684 s/op
Iteration  36: 2.720 s/op
Iteration  37: 2.699 s/op
Iteration  38: 2.771 s/op
Iteration  39: 2.779 s/op
Iteration  40: 2.770 s/op
Iteration  41: 2.680 s/op
Iteration  42: 2.775 s/op
Iteration  43: 2.770 s/op
Iteration  44: 2.707 s/op
Iteration  45: 2.728 s/op
Iteration  46: 2.750 s/op
Iteration  47: 2.663 s/op
Iteration  48: 2.770 s/op
Iteration  49: 2.719 s/op
Iteration  50: 2.722 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.757 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 8 
    [2.700, 2.750) = 22 
    [2.750, 2.800) = 16 
    [2.800, 2.850) = 1 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 1 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 1 
    [3.350, 3.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.653 s/op
     p(50.0000) =      2.732 s/op
     p(90.0000) =      2.794 s/op
     p(95.0000) =      2.997 s/op
     p(99.0000) =      3.327 s/op
     p(99.9000) =      3.327 s/op
     p(99.9900) =      3.327 s/op
     p(99.9990) =      3.327 s/op
     p(99.9999) =      3.327 s/op
    p(100.0000) =      3.327 s/op


# Run complete. Total time: 00:02:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.757 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_12.0.1_1564924314747.json
{"wallclock_times": [139.377882658], "core_cycle_counts": [[156305237994], [57974019352], [144594229699], [116885610277]], "aperf_counts": [[155953648705], [57911700434], [144521277689], [116839413361]], "mperf_counts": [[155972176456], [57911692330], [144521526360], [116839423694]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 15:14:14: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-04 15:14:15: INFO] Estimated completion (whole session): 2019-08-05 20:24:33 (1 day, 5:10:18 from now)
[2019-08-04 15:14:15: INFO] 195 executions left in scheduler queue
[2019-08-04 15:14:15: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-08-04 15:14:15: INFO] Estimated completion (next execution): 2019-08-04 15:19:08 (0:04:53 from now)
[2019-08-04 15:14:15: INFO] Reboot in preparation for next execution
[2019-08-04 15:18:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 15:18:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 15:18:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 15:18:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 15:18:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 15:23:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.902 s/op
Iteration   2: 6.039 s/op
Iteration   3: 5.604 s/op
Iteration   4: 5.603 s/op
Iteration   5: 5.604 s/op
Iteration   6: 5.603 s/op
Iteration   7: 5.603 s/op
Iteration   8: 5.605 s/op
Iteration   9: 5.602 s/op
Iteration  10: 5.602 s/op
Iteration  11: 5.601 s/op
Iteration  12: 5.601 s/op
Iteration  13: 5.598 s/op
Iteration  14: 5.607 s/op
Iteration  15: 5.608 s/op
Iteration  16: 5.610 s/op
Iteration  17: 5.611 s/op
Iteration  18: 5.604 s/op
Iteration  19: 5.609 s/op
Iteration  20: 5.600 s/op
Iteration  21: 5.605 s/op
Iteration  22: 5.602 s/op
Iteration  23: 5.603 s/op
Iteration  24: 5.597 s/op
Iteration  25: 5.599 s/op
Iteration  26: 5.599 s/op
Iteration  27: 5.600 s/op
Iteration  28: 5.598 s/op
Iteration  29: 5.598 s/op
Iteration  30: 5.597 s/op
Iteration  31: 5.597 s/op
Iteration  32: 5.600 s/op
Iteration  33: 5.599 s/op
Iteration  34: 5.596 s/op
Iteration  35: 5.602 s/op
Iteration  36: 5.600 s/op
Iteration  37: 5.599 s/op
Iteration  38: 5.596 s/op
Iteration  39: 5.597 s/op
Iteration  40: 5.597 s/op
Iteration  41: 5.596 s/op
Iteration  42: 5.599 s/op
Iteration  43: 5.601 s/op
Iteration  44: 5.602 s/op
Iteration  45: 5.599 s/op
Iteration  46: 5.600 s/op
Iteration  47: 5.600 s/op
Iteration  48: 5.602 s/op
Iteration  49: 5.595 s/op
Iteration  50: 5.605 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      5.616 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 21 
    [5.600, 5.650) = 27 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 0 
    [5.800, 5.850) = 0 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 1 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 1 
    [6.050, 6.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.595 s/op
     p(50.0000) =      5.601 s/op
     p(90.0000) =      5.608 s/op
     p(95.0000) =      5.742 s/op
     p(99.0000) =      6.039 s/op
     p(99.9000) =      6.039 s/op
     p(99.9900) =      6.039 s/op
     p(99.9990) =      6.039 s/op
     p(99.9999) =      6.039 s/op
    p(100.0000) =      6.039 s/op


# Run complete. Total time: 00:04:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.616 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot_11.0.4_1564924711625.json
{"wallclock_times": [281.828868656], "core_cycle_counts": [[148864545745], [111854916434], [320459833591], [330643548787]], "aperf_counts": [[148067404677], [111788165951], [320424508094], [330610755242]], "mperf_counts": [[148408680028], [111832863546], [320492425300], [330825338378]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 15:23:13: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-08-04 15:23:14: INFO] Estimated completion (whole session): 2019-08-05 20:26:32 (1 day, 5:03:17 from now)
[2019-08-04 15:23:14: INFO] 194 executions left in scheduler queue
[2019-08-04 15:23:14: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-08-04 15:23:14: INFO] Estimated completion (next execution): 2019-08-04 15:30:20 (0:07:06 from now)
[2019-08-04 15:23:14: INFO] Reboot in preparation for next execution
[2019-08-04 15:29:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 15:29:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 15:29:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 15:29:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 15:29:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 15:29:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 15:41:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.001 s/op
Iteration   2: 14.504 s/op
Iteration   3: 14.659 s/op
Iteration   4: 14.276 s/op
Iteration   5: 14.315 s/op
Iteration   6: 14.277 s/op
Iteration   7: 14.265 s/op
Iteration   8: 14.300 s/op
Iteration   9: 14.337 s/op
Iteration  10: 14.315 s/op
Iteration  11: 14.266 s/op
Iteration  12: 14.311 s/op
Iteration  13: 14.323 s/op
Iteration  14: 14.208 s/op
Iteration  15: 14.302 s/op
Iteration  16: 14.285 s/op
Iteration  17: 14.208 s/op
Iteration  18: 14.266 s/op
Iteration  19: 14.311 s/op
Iteration  20: 14.333 s/op
Iteration  21: 14.212 s/op
Iteration  22: 14.301 s/op
Iteration  23: 14.235 s/op
Iteration  24: 14.340 s/op
Iteration  25: 14.275 s/op
Iteration  26: 14.202 s/op
Iteration  27: 14.309 s/op
Iteration  28: 14.295 s/op
Iteration  29: 14.310 s/op
Iteration  30: 14.302 s/op
Iteration  31: 14.298 s/op
Iteration  32: 14.259 s/op
Iteration  33: 14.285 s/op
Iteration  34: 14.294 s/op
Iteration  35: 14.273 s/op
Iteration  36: 14.323 s/op
Iteration  37: 14.345 s/op
Iteration  38: 14.303 s/op
Iteration  39: 14.330 s/op
Iteration  40: 14.251 s/op
Iteration  41: 14.323 s/op
Iteration  42: 14.233 s/op
Iteration  43: 14.292 s/op
Iteration  44: 14.256 s/op
Iteration  45: 14.241 s/op
Iteration  46: 14.287 s/op
Iteration  47: 14.244 s/op
Iteration  48: 14.215 s/op
Iteration  49: 14.298 s/op
Iteration  50: 14.325 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     14.330 ?(99.9%) 0.124 s/op

  Histogram, s/op:
    [14.000, 14.250) = 9 
    [14.250, 14.500) = 38 
    [14.500, 14.750) = 2 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.202 s/op
     p(50.0000) =     14.296 s/op
     p(90.0000) =     14.339 s/op
     p(95.0000) =     14.574 s/op
     p(99.0000) =     16.001 s/op
     p(99.9000) =     16.001 s/op
     p(99.9900) =     16.001 s/op
     p(99.9990) =     16.001 s/op
     p(99.9999) =     16.001 s/op
    p(100.0000) =     16.001 s/op


# Run complete. Total time: 00:11:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  14.330 ? 0.124   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9_11.0.4_1564925346575.json
{"wallclock_times": [718.044453217], "core_cycle_counts": [[528321180906], [393172805187], [506567385720], [912633773459]], "aperf_counts": [[526227990063], [393010931259], [506359450522], [912491031530]], "mperf_counts": [[526232437296], [393010943438], [506359479650], [912491084478]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 15:41:04: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-08-04 15:41:05: INFO] Estimated completion (whole session): 2019-08-05 20:28:49 (1 day, 4:47:44 from now)
[2019-08-04 15:41:05: INFO] 193 executions left in scheduler queue
[2019-08-04 15:41:05: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-04 15:41:05: INFO] Estimated completion (next execution): 2019-08-04 15:56:06 (0:15:01 from now)
[2019-08-04 15:41:05: INFO] Reboot in preparation for next execution
[2019-08-04 15:47:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 15:49:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.851 s/op
Iteration   2: 2.281 s/op
Iteration   3: 1.965 s/op
Iteration   4: 1.956 s/op
Iteration   5: 2.008 s/op
Iteration   6: 1.921 s/op
Iteration   7: 1.910 s/op
Iteration   8: 1.951 s/op
Iteration   9: 1.884 s/op
Iteration  10: 1.904 s/op
Iteration  11: 1.913 s/op
Iteration  12: 1.911 s/op
Iteration  13: 1.917 s/op
Iteration  14: 1.923 s/op
Iteration  15: 1.905 s/op
Iteration  16: 1.898 s/op
Iteration  17: 1.921 s/op
Iteration  18: 1.934 s/op
Iteration  19: 1.936 s/op
Iteration  20: 1.934 s/op
Iteration  21: 1.908 s/op
Iteration  22: 1.882 s/op
Iteration  23: 1.944 s/op
Iteration  24: 1.934 s/op
Iteration  25: 1.924 s/op
Iteration  26: 1.923 s/op
Iteration  27: 1.891 s/op
Iteration  28: 1.900 s/op
Iteration  29: 1.920 s/op
Iteration  30: 1.927 s/op
Iteration  31: 1.889 s/op
Iteration  32: 1.912 s/op
Iteration  33: 1.913 s/op
Iteration  34: 1.920 s/op
Iteration  35: 1.893 s/op
Iteration  36: 1.927 s/op
Iteration  37: 1.931 s/op
Iteration  38: 1.900 s/op
Iteration  39: 1.922 s/op
Iteration  40: 1.912 s/op
Iteration  41: 1.910 s/op
Iteration  42: 1.902 s/op
Iteration  43: 1.912 s/op
Iteration  44: 1.930 s/op
Iteration  45: 1.917 s/op
Iteration  46: 1.914 s/op
Iteration  47: 1.922 s/op
Iteration  48: 1.920 s/op
Iteration  49: 1.917 s/op
Iteration  50: 1.914 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.945 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [1.800, 1.900) = 7 
    [1.900, 2.000) = 40 
    [2.000, 2.100) = 1 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.882 s/op
     p(50.0000) =      1.919 s/op
     p(90.0000) =      1.956 s/op
     p(95.0000) =      2.131 s/op
     p(99.0000) =      2.851 s/op
     p(99.9000) =      2.851 s/op
     p(99.9900) =      2.851 s/op
     p(99.9990) =      2.851 s/op
     p(99.9999) =      2.851 s/op
    p(100.0000) =      2.851 s/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.945 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9-8u222-b10_1564926465867.json
{"wallclock_times": [98.51510602100001], "core_cycle_counts": [[116467487255], [84375341908], [91879654804], [44957179493]], "aperf_counts": [[116168597257], [84304057131], [91818215343], [44896508690]], "mperf_counts": [[116175303612], [84305194200], [91819186030], [44897346220]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 15:49:24: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-04 15:49:25: INFO] Estimated completion (whole session): 2019-08-05 20:33:02 (1 day, 4:43:37 from now)
[2019-08-04 15:49:25: INFO] 192 executions left in scheduler queue
[2019-08-04 15:49:25: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-04 15:49:25: INFO] Estimated completion (next execution): 2019-08-04 15:53:33 (0:04:07 from now)
[2019-08-04 15:49:25: INFO] Reboot in preparation for next execution
[2019-08-04 15:56:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-04 15:58:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.726 s/op
Iteration   2: 3.296 s/op
Iteration   3: 3.314 s/op
Iteration   4: 2.882 s/op
Iteration   5: 2.819 s/op
Iteration   6: 2.857 s/op
Iteration   7: 2.867 s/op
Iteration   8: 2.921 s/op
Iteration   9: 2.910 s/op
Iteration  10: 2.840 s/op
Iteration  11: 2.807 s/op
Iteration  12: 2.773 s/op
Iteration  13: 2.804 s/op
Iteration  14: 2.852 s/op
Iteration  15: 2.846 s/op
Iteration  16: 2.872 s/op
Iteration  17: 2.831 s/op
Iteration  18: 2.816 s/op
Iteration  19: 2.865 s/op
Iteration  20: 2.868 s/op
Iteration  21: 2.862 s/op
Iteration  22: 2.824 s/op
Iteration  23: 2.829 s/op
Iteration  24: 2.832 s/op
Iteration  25: 2.868 s/op
Iteration  26: 2.795 s/op
Iteration  27: 2.832 s/op
Iteration  28: 2.847 s/op
Iteration  29: 2.871 s/op
Iteration  30: 2.877 s/op
Iteration  31: 2.840 s/op
Iteration  32: 2.801 s/op
Iteration  33: 2.866 s/op
Iteration  34: 2.845 s/op
Iteration  35: 2.840 s/op
Iteration  36: 2.845 s/op
Iteration  37: 2.791 s/op
Iteration  38: 2.806 s/op
Iteration  39: 2.867 s/op
Iteration  40: 2.809 s/op
Iteration  41: 2.867 s/op
Iteration  42: 2.868 s/op
Iteration  43: 2.872 s/op
Iteration  44: 2.813 s/op
Iteration  45: 2.867 s/op
Iteration  46: 2.781 s/op
Iteration  47: 2.798 s/op
Iteration  48: 2.929 s/op
Iteration  49: 2.874 s/op
Iteration  50: 2.929 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.882 ?(99.9%) 0.077 s/op

  Histogram, s/op:
    [2.700, 2.800) = 5 
    [2.800, 2.900) = 38 
    [2.900, 3.000) = 4 
    [3.000, 3.100) = 0 
    [3.100, 3.200) = 0 
    [3.200, 3.300) = 1 
    [3.300, 3.400) = 1 
    [3.400, 3.500) = 0 
    [3.500, 3.600) = 0 
    [3.600, 3.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.773 s/op
     p(50.0000) =      2.849 s/op
     p(90.0000) =      2.928 s/op
     p(95.0000) =      3.304 s/op
     p(99.0000) =      3.726 s/op
     p(99.9000) =      3.726 s/op
     p(99.9900) =      3.726 s/op
     p(99.9990) =      3.726 s/op
     p(99.9999) =      3.726 s/op
    p(100.0000) =      3.726 s/op


# Run complete. Total time: 00:02:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.882 ? 0.077   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9-8u222-b10_1564926961565.json
{"wallclock_times": [145.25318451700002], "core_cycle_counts": [[155811520440], [100054997074], [102813545412], [136052066462]], "aperf_counts": [[155448654000], [100000678017], [102760636419], [136007692090]], "mperf_counts": [[155450518228], [100000663908], [102760677076], [136009691632]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 15:58:26: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-04 15:58:27: INFO] Estimated completion (whole session): 2019-08-05 20:37:08 (1 day, 4:38:40 from now)
[2019-08-04 15:58:27: INFO] 191 executions left in scheduler queue
[2019-08-04 15:58:27: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 15:58:27: INFO] Estimated completion (next execution): 2019-08-04 16:03:23 (0:04:56 from now)
[2019-08-04 15:58:27: INFO] Reboot in preparation for next execution
[2019-08-04 16:07:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.861 s/op
Iteration   2: 5.768 s/op
Iteration   3: 5.605 s/op
Iteration   4: 5.605 s/op
Iteration   5: 5.590 s/op
Iteration   6: 5.608 s/op
Iteration   7: 5.602 s/op
Iteration   8: 5.607 s/op
Iteration   9: 5.609 s/op
Iteration  10: 5.601 s/op
Iteration  11: 5.604 s/op
Iteration  12: 5.606 s/op
Iteration  13: 5.608 s/op
Iteration  14: 5.606 s/op
Iteration  15: 5.605 s/op
Iteration  16: 5.601 s/op
Iteration  17: 5.601 s/op
Iteration  18: 5.586 s/op
Iteration  19: 5.598 s/op
Iteration  20: 5.602 s/op
Iteration  21: 5.582 s/op
Iteration  22: 5.600 s/op
Iteration  23: 5.605 s/op
Iteration  24: 5.603 s/op
Iteration  25: 5.601 s/op
Iteration  26: 5.601 s/op
Iteration  27: 5.606 s/op
Iteration  28: 5.607 s/op
Iteration  29: 5.611 s/op
Iteration  30: 5.608 s/op
Iteration  31: 5.584 s/op
Iteration  32: 5.608 s/op
Iteration  33: 5.608 s/op
Iteration  34: 5.609 s/op
Iteration  35: 5.605 s/op
Iteration  36: 5.592 s/op
Iteration  37: 5.614 s/op
Iteration  38: 5.601 s/op
Iteration  39: 5.598 s/op
Iteration  40: 5.602 s/op
Iteration  41: 5.598 s/op
Iteration  42: 5.600 s/op
Iteration  43: 5.587 s/op
Iteration  44: 5.599 s/op
Iteration  45: 5.601 s/op
Iteration  46: 5.603 s/op
Iteration  47: 5.590 s/op
Iteration  48: 5.606 s/op
Iteration  49: 5.602 s/op
Iteration  50: 5.603 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.610 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [5.500, 5.525) = 0 
    [5.525, 5.550) = 0 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 12 
    [5.600, 5.625) = 36 
    [5.625, 5.650) = 0 
    [5.650, 5.675) = 0 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 1 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 0 
    [5.850, 5.875) = 1 
    [5.875, 5.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.582 s/op
     p(50.0000) =      5.603 s/op
     p(90.0000) =      5.609 s/op
     p(95.0000) =      5.683 s/op
     p(99.0000) =      5.861 s/op
     p(99.9000) =      5.861 s/op
     p(99.9900) =      5.861 s/op
     p(99.9990) =      5.861 s/op
     p(99.9999) =      5.861 s/op
    p(100.0000) =      5.861 s/op


# Run complete. Total time: 00:04:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.610 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ce-19.1.1_1564927367557.json
{"wallclock_times": [281.43061965000004], "core_cycle_counts": [[219246277233], [137102765232], [304414372330], [253893855071]], "aperf_counts": [[218595304396], [137047391607], [304392437205], [253870750421]], "mperf_counts": [[218612937688], [137064557712], [304393760142], [253875805850]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 16:07:28: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 16:07:29: INFO] Estimated completion (whole session): 2019-08-05 20:38:56 (1 day, 4:31:26 from now)
[2019-08-04 16:07:29: INFO] 190 executions left in scheduler queue
[2019-08-04 16:07:29: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 16:07:29: INFO] Estimated completion (next execution): 2019-08-04 16:14:42 (0:07:13 from now)
[2019-08-04 16:07:29: INFO] Reboot in preparation for next execution
[2019-08-04 16:15:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.883 s/op
Iteration   2: 3.582 s/op
Iteration   3: 3.421 s/op
Iteration   4: 3.463 s/op
Iteration   5: 3.479 s/op
Iteration   6: 3.411 s/op
Iteration   7: 3.427 s/op
Iteration   8: 3.407 s/op
Iteration   9: 3.434 s/op
Iteration  10: 3.428 s/op
Iteration  11: 3.448 s/op
Iteration  12: 3.439 s/op
Iteration  13: 3.438 s/op
Iteration  14: 3.399 s/op
Iteration  15: 3.460 s/op
Iteration  16: 3.422 s/op
Iteration  17: 3.447 s/op
Iteration  18: 3.443 s/op
Iteration  19: 3.495 s/op
Iteration  20: 3.484 s/op
Iteration  21: 3.455 s/op
Iteration  22: 3.455 s/op
Iteration  23: 3.492 s/op
Iteration  24: 3.454 s/op
Iteration  25: 3.457 s/op
Iteration  26: 3.423 s/op
Iteration  27: 3.472 s/op
Iteration  28: 3.487 s/op
Iteration  29: 3.444 s/op
Iteration  30: 3.429 s/op
Iteration  31: 3.471 s/op
Iteration  32: 3.449 s/op
Iteration  33: 3.454 s/op
Iteration  34: 3.439 s/op
Iteration  35: 3.437 s/op
Iteration  36: 3.481 s/op
Iteration  37: 3.465 s/op
Iteration  38: 3.427 s/op
Iteration  39: 3.487 s/op
Iteration  40: 3.423 s/op
Iteration  41: 3.415 s/op
Iteration  42: 3.423 s/op
Iteration  43: 3.474 s/op
Iteration  44: 3.466 s/op
Iteration  45: 3.444 s/op
Iteration  46: 3.458 s/op
Iteration  47: 3.427 s/op
Iteration  48: 3.433 s/op
Iteration  49: 3.427 s/op
Iteration  50: 3.471 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.459 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 26 
    [3.450, 3.500) = 21 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.399 s/op
     p(50.0000) =      3.448 s/op
     p(90.0000) =      3.487 s/op
     p(95.0000) =      3.534 s/op
     p(99.0000) =      3.883 s/op
     p(99.9000) =      3.883 s/op
     p(99.9900) =      3.883 s/op
     p(99.9990) =      3.883 s/op
     p(99.9999) =      3.883 s/op
    p(100.0000) =      3.883 s/op


# Run complete. Total time: 00:02:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.459 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ce-19.1.1_1564927927494.json
{"wallclock_times": [173.95960700299997], "core_cycle_counts": [[159898446211], [110621182093], [150022151048], [157414267800]], "aperf_counts": [[159504007173], [110579567438], [149999662728], [157396494567]], "mperf_counts": [[159539150188], [110583092184], [150001892352], [157408525054]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 16:15:01: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 16:15:02: INFO] Estimated completion (whole session): 2019-08-05 20:41:05 (1 day, 4:26:02 from now)
[2019-08-04 16:15:02: INFO] 189 executions left in scheduler queue
[2019-08-04 16:15:02: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 16:15:02: INFO] Estimated completion (next execution): 2019-08-04 16:20:26 (0:05:23 from now)
[2019-08-04 16:15:02: INFO] Reboot in preparation for next execution
[2019-08-04 16:25:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.132 s/op
Iteration   2: 3.658 s/op
Iteration   3: 3.630 s/op
Iteration   4: 3.633 s/op
Iteration   5: 3.619 s/op
Iteration   6: 3.662 s/op
Iteration   7: 3.614 s/op
Iteration   8: 3.665 s/op
Iteration   9: 3.665 s/op
Iteration  10: 3.636 s/op
Iteration  11: 3.677 s/op
Iteration  12: 3.621 s/op
Iteration  13: 3.601 s/op
Iteration  14: 3.655 s/op
Iteration  15: 3.622 s/op
Iteration  16: 3.611 s/op
Iteration  17: 3.677 s/op
Iteration  18: 3.610 s/op
Iteration  19: 3.633 s/op
Iteration  20: 3.673 s/op
Iteration  21: 3.607 s/op
Iteration  22: 3.605 s/op
Iteration  23: 3.676 s/op
Iteration  24: 3.606 s/op
Iteration  25: 3.600 s/op
Iteration  26: 3.663 s/op
Iteration  27: 3.603 s/op
Iteration  28: 3.622 s/op
Iteration  29: 3.676 s/op
Iteration  30: 3.614 s/op
Iteration  31: 3.608 s/op
Iteration  32: 3.672 s/op
Iteration  33: 3.617 s/op
Iteration  34: 3.617 s/op
Iteration  35: 3.674 s/op
Iteration  36: 3.602 s/op
Iteration  37: 3.616 s/op
Iteration  38: 3.681 s/op
Iteration  39: 3.620 s/op
Iteration  40: 3.617 s/op
Iteration  41: 3.613 s/op
Iteration  42: 3.679 s/op
Iteration  43: 3.616 s/op
Iteration  44: 3.623 s/op
Iteration  45: 3.680 s/op
Iteration  46: 3.630 s/op
Iteration  47: 3.617 s/op
Iteration  48: 3.693 s/op
Iteration  49: 3.616 s/op
Iteration  50: 3.686 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.647 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 30 
    [3.650, 3.700) = 18 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 1 
    [4.150, 4.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.600 s/op
     p(50.0000) =      3.623 s/op
     p(90.0000) =      3.680 s/op
     p(95.0000) =      3.689 s/op
     p(99.0000) =      4.132 s/op
     p(99.9000) =      4.132 s/op
     p(99.9900) =      4.132 s/op
     p(99.9990) =      4.132 s/op
     p(99.9999) =      4.132 s/op
    p(100.0000) =      4.132 s/op


# Run complete. Total time: 00:03:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.647 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ce-19.1.1_1564928532606.json
{"wallclock_times": [183.425104821], "core_cycle_counts": [[127930126661], [173267951325], [183571267952], [176703677690]], "aperf_counts": [[127401582774], [173219560798], [183530957575], [176665143786]], "mperf_counts": [[127425492932], [173222726644], [183539092920], [176666051116]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 16:25:16: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 16:25:17: INFO] Estimated completion (whole session): 2019-08-05 20:45:45 (1 day, 4:20:28 from now)
[2019-08-04 16:25:17: INFO] 188 executions left in scheduler queue
[2019-08-04 16:25:17: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 16:25:17: INFO] Estimated completion (next execution): 2019-08-04 16:30:51 (0:05:34 from now)
[2019-08-04 16:25:17: INFO] Reboot in preparation for next execution
[2019-08-04 16:39:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.340 s/op
Iteration   2: 10.333 s/op
Iteration   3: 10.154 s/op
Iteration   4: 10.119 s/op
Iteration   5: 10.124 s/op
Iteration   6: 10.143 s/op
Iteration   7: 10.138 s/op
Iteration   8: 10.171 s/op
Iteration   9: 10.143 s/op
Iteration  10: 10.136 s/op
Iteration  11: 10.173 s/op
Iteration  12: 10.143 s/op
Iteration  13: 10.111 s/op
Iteration  14: 10.151 s/op
Iteration  15: 10.117 s/op
Iteration  16: 10.165 s/op
Iteration  17: 10.115 s/op
Iteration  18: 10.106 s/op
Iteration  19: 10.134 s/op
Iteration  20: 10.128 s/op
Iteration  21: 10.130 s/op
Iteration  22: 10.139 s/op
Iteration  23: 10.171 s/op
Iteration  24: 10.179 s/op
Iteration  25: 10.099 s/op
Iteration  26: 10.095 s/op
Iteration  27: 10.120 s/op
Iteration  28: 10.153 s/op
Iteration  29: 10.142 s/op
Iteration  30: 10.106 s/op
Iteration  31: 10.159 s/op
Iteration  32: 10.130 s/op
Iteration  33: 10.141 s/op
Iteration  34: 10.110 s/op
Iteration  35: 10.154 s/op
Iteration  36: 10.136 s/op
Iteration  37: 10.161 s/op
Iteration  38: 10.106 s/op
Iteration  39: 10.117 s/op
Iteration  40: 10.136 s/op
Iteration  41: 10.157 s/op
Iteration  42: 10.131 s/op
Iteration  43: 10.162 s/op
Iteration  44: 10.180 s/op
Iteration  45: 10.205 s/op
Iteration  46: 10.114 s/op
Iteration  47: 10.098 s/op
Iteration  48: 10.167 s/op
Iteration  49: 10.135 s/op
Iteration  50: 10.105 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.146 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [10.000, 10.025) = 0 
    [10.025, 10.050) = 0 
    [10.050, 10.075) = 0 
    [10.075, 10.100) = 3 
    [10.100, 10.125) = 13 
    [10.125, 10.150) = 16 
    [10.150, 10.175) = 13 
    [10.175, 10.200) = 2 
    [10.200, 10.225) = 1 
    [10.225, 10.250) = 0 
    [10.250, 10.275) = 0 
    [10.275, 10.300) = 0 
    [10.300, 10.325) = 0 
    [10.325, 10.350) = 2 
    [10.350, 10.375) = 0 
    [10.375, 10.400) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.095 s/op
     p(50.0000) =     10.137 s/op
     p(90.0000) =     10.178 s/op
     p(95.0000) =     10.263 s/op
     p(99.0000) =     10.340 s/op
     p(99.9000) =     10.340 s/op
     p(99.9900) =     10.340 s/op
     p(99.9990) =     10.340 s/op
     p(99.9999) =     10.340 s/op
    p(100.0000) =     10.340 s/op


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.146 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ce-19.1.1_1564929053874.json
{"wallclock_times": [508.228560829], "core_cycle_counts": [[424844594301], [509451807203], [376382446450], [326135610390]], "aperf_counts": [[423676473562], [509364088959], [376353328685], [326101497860]], "mperf_counts": [[423706381688], [509364962110], [376353959312], [326112472678]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 16:39:22: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-04 16:39:23: INFO] Estimated completion (whole session): 2019-08-05 20:48:49 (1 day, 4:09:26 from now)
[2019-08-04 16:39:23: INFO] 187 executions left in scheduler queue
[2019-08-04 16:39:23: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-04 16:39:23: INFO] Estimated completion (next execution): 2019-08-04 16:50:23 (0:11:00 from now)
[2019-08-04 16:39:23: INFO] Reboot in preparation for next execution
[2019-08-04 16:45:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 16:45:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 16:45:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 16:45:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 16:45:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 16:45:17: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 16:47:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.076 s/op
Iteration   2: 2.319 s/op
Iteration   3: 2.172 s/op
Iteration   4: 2.302 s/op
Iteration   5: 2.057 s/op
Iteration   6: 2.039 s/op
Iteration   7: 2.000 s/op
Iteration   8: 2.009 s/op
Iteration   9: 2.034 s/op
Iteration  10: 2.030 s/op
Iteration  11: 2.047 s/op
Iteration  12: 2.028 s/op
Iteration  13: 2.038 s/op
Iteration  14: 2.019 s/op
Iteration  15: 2.013 s/op
Iteration  16: 2.039 s/op
Iteration  17: 2.034 s/op
Iteration  18: 2.029 s/op
Iteration  19: 2.011 s/op
Iteration  20: 2.047 s/op
Iteration  21: 2.052 s/op
Iteration  22: 2.058 s/op
Iteration  23: 2.047 s/op
Iteration  24: 2.026 s/op
Iteration  25: 2.046 s/op
Iteration  26: 2.032 s/op
Iteration  27: 2.008 s/op
Iteration  28: 2.040 s/op
Iteration  29: 2.019 s/op
Iteration  30: 2.054 s/op
Iteration  31: 2.063 s/op
Iteration  32: 2.035 s/op
Iteration  33: 2.031 s/op
Iteration  34: 2.050 s/op
Iteration  35: 2.049 s/op
Iteration  36: 2.056 s/op
Iteration  37: 2.022 s/op
Iteration  38: 2.055 s/op
Iteration  39: 2.041 s/op
Iteration  40: 2.044 s/op
Iteration  41: 2.006 s/op
Iteration  42: 2.042 s/op
Iteration  43: 2.038 s/op
Iteration  44: 2.045 s/op
Iteration  45: 2.039 s/op
Iteration  46: 2.028 s/op
Iteration  47: 2.035 s/op
Iteration  48: 2.036 s/op
Iteration  49: 2.044 s/op
Iteration  50: 2.035 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.070 ?(99.9%) 0.078 s/op

  Histogram, s/op:
    [2.000, 2.125) = 46 
    [2.125, 2.250) = 1 
    [2.250, 2.375) = 2 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 
    [2.875, 3.000) = 0 
    [3.000, 3.125) = 1 
    [3.125, 3.250) = 0 
    [3.250, 3.375) = 0 
    [3.375, 3.500) = 0 
    [3.500, 3.625) = 0 
    [3.625, 3.750) = 0 
    [3.750, 3.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.000 s/op
     p(50.0000) =      2.039 s/op
     p(90.0000) =      2.062 s/op
     p(95.0000) =      2.310 s/op
     p(99.0000) =      3.076 s/op
     p(99.9000) =      3.076 s/op
     p(99.9900) =      3.076 s/op
     p(99.9990) =      3.076 s/op
     p(99.9999) =      3.076 s/op
    p(100.0000) =      3.076 s/op


# Run complete. Total time: 00:01:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.070 ? 0.078   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_11.0.4_1564929917279.json
{"wallclock_times": [105.18687728700002], "core_cycle_counts": [[118252319271], [85185719207], [95915161068], [68779221045]], "aperf_counts": [[117920994781], [85109304142], [95844830932], [68706431503]], "mperf_counts": [[117933337206], [85111167140], [95844932330], [68706908660]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 16:47:02: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-04 16:47:03: INFO] Estimated completion (whole session): 2019-08-05 20:52:18 (1 day, 4:05:15 from now)
[2019-08-04 16:47:03: INFO] 186 executions left in scheduler queue
[2019-08-04 16:47:03: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-04 16:47:03: INFO] Estimated completion (next execution): 2019-08-04 16:51:16 (0:04:13 from now)
[2019-08-04 16:47:03: INFO] Reboot in preparation for next execution
[2019-08-04 16:54:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 16:54:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 16:54:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 16:54:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 16:54:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 16:54:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 16:56:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.605 s/op
Iteration   2: 3.191 s/op
Iteration   3: 3.574 s/op
Iteration   4: 2.885 s/op
Iteration   5: 2.882 s/op
Iteration   6: 2.821 s/op
Iteration   7: 2.850 s/op
Iteration   8: 2.931 s/op
Iteration   9: 2.829 s/op
Iteration  10: 2.916 s/op
Iteration  11: 2.822 s/op
Iteration  12: 2.809 s/op
Iteration  13: 2.813 s/op
Iteration  14: 2.790 s/op
Iteration  15: 2.871 s/op
Iteration  16: 2.810 s/op
Iteration  17: 2.793 s/op
Iteration  18: 2.803 s/op
Iteration  19: 2.862 s/op
Iteration  20: 2.831 s/op
Iteration  21: 2.813 s/op
Iteration  22: 2.803 s/op
Iteration  23: 2.798 s/op
Iteration  24: 2.859 s/op
Iteration  25: 2.811 s/op
Iteration  26: 2.865 s/op
Iteration  27: 2.803 s/op
Iteration  28: 2.816 s/op
Iteration  29: 2.821 s/op
Iteration  30: 2.819 s/op
Iteration  31: 2.818 s/op
Iteration  32: 2.856 s/op
Iteration  33: 2.879 s/op
Iteration  34: 2.830 s/op
Iteration  35: 2.815 s/op
Iteration  36: 2.820 s/op
Iteration  37: 2.863 s/op
Iteration  38: 2.814 s/op
Iteration  39: 2.878 s/op
Iteration  40: 2.871 s/op
Iteration  41: 2.779 s/op
Iteration  42: 2.827 s/op
Iteration  43: 2.841 s/op
Iteration  44: 2.824 s/op
Iteration  45: 2.819 s/op
Iteration  46: 2.865 s/op
Iteration  47: 2.837 s/op
Iteration  48: 2.830 s/op
Iteration  49: 2.849 s/op
Iteration  50: 2.832 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.873 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [2.700, 2.800) = 4 
    [2.800, 2.900) = 41 
    [2.900, 3.000) = 2 
    [3.000, 3.100) = 0 
    [3.100, 3.200) = 1 
    [3.200, 3.300) = 0 
    [3.300, 3.400) = 0 
    [3.400, 3.500) = 0 
    [3.500, 3.600) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.779 s/op
     p(50.0000) =      2.829 s/op
     p(90.0000) =      2.913 s/op
     p(95.0000) =      3.363 s/op
     p(99.0000) =      3.605 s/op
     p(99.9000) =      3.605 s/op
     p(99.9900) =      3.605 s/op
     p(99.9990) =      3.605 s/op
     p(99.9999) =      3.605 s/op
    p(100.0000) =      3.605 s/op


# Run complete. Total time: 00:02:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.873 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_11.0.4_1564930454275.json
{"wallclock_times": [145.17065648500005], "core_cycle_counts": [[231722814802], [84800996441], [96808207471], [85477518968]], "aperf_counts": [[231439958017], [84722800895], [96731305581], [85402539089]], "mperf_counts": [[231445717222], [84722871848], [96731295030], [85402534436]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 16:56:39: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-04 16:56:40: INFO] Estimated completion (whole session): 2019-08-05 20:56:57 (1 day, 4:00:16 from now)
[2019-08-04 16:56:40: INFO] 185 executions left in scheduler queue
[2019-08-04 16:56:40: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-04 16:56:40: INFO] Estimated completion (next execution): 2019-08-04 17:01:37 (0:04:57 from now)
[2019-08-04 16:56:40: INFO] Reboot in preparation for next execution
[2019-08-04 17:06:35: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 17:06:35: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 17:06:35: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 17:06:35: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 17:06:35: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 17:06:35: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 17:08:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.742 s/op
Iteration   2: 2.353 s/op
Iteration   3: 2.474 s/op
Iteration   4: 2.451 s/op
Iteration   5: 2.099 s/op
Iteration   6: 1.971 s/op
Iteration   7: 1.886 s/op
Iteration   8: 1.857 s/op
Iteration   9: 1.886 s/op
Iteration  10: 1.863 s/op
Iteration  11: 1.862 s/op
Iteration  12: 1.832 s/op
Iteration  13: 1.852 s/op
Iteration  14: 1.848 s/op
Iteration  15: 1.846 s/op
Iteration  16: 1.833 s/op
Iteration  17: 1.862 s/op
Iteration  18: 1.916 s/op
Iteration  19: 1.863 s/op
Iteration  20: 1.883 s/op
Iteration  21: 1.910 s/op
Iteration  22: 1.891 s/op
Iteration  23: 1.883 s/op
Iteration  24: 1.896 s/op
Iteration  25: 1.893 s/op
Iteration  26: 1.877 s/op
Iteration  27: 1.881 s/op
Iteration  28: 1.886 s/op
Iteration  29: 1.866 s/op
Iteration  30: 1.899 s/op
Iteration  31: 1.877 s/op
Iteration  32: 1.903 s/op
Iteration  33: 1.894 s/op
Iteration  34: 1.890 s/op
Iteration  35: 1.891 s/op
Iteration  36: 1.915 s/op
Iteration  37: 1.890 s/op
Iteration  38: 1.858 s/op
Iteration  39: 1.906 s/op
Iteration  40: 1.906 s/op
Iteration  41: 1.915 s/op
Iteration  42: 1.892 s/op
Iteration  43: 1.904 s/op
Iteration  44: 1.915 s/op
Iteration  45: 1.916 s/op
Iteration  46: 1.920 s/op
Iteration  47: 1.896 s/op
Iteration  48: 1.887 s/op
Iteration  49: 1.877 s/op
Iteration  50: 1.903 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.940 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [1.800, 1.900) = 32 
    [1.900, 2.000) = 13 
    [2.000, 2.100) = 1 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 2 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.832 s/op
     p(50.0000) =      1.891 s/op
     p(90.0000) =      2.086 s/op
     p(95.0000) =      2.462 s/op
     p(99.0000) =      2.742 s/op
     p(99.9000) =      2.742 s/op
     p(99.9900) =      2.742 s/op
     p(99.9990) =      2.742 s/op
     p(99.9999) =      2.742 s/op
    p(100.0000) =      2.742 s/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.940 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9_12.0.1_1564931195330.json
{"wallclock_times": [98.66822614300003], "core_cycle_counts": [[98902969587], [61760283989], [83699065216], [99106771218]], "aperf_counts": [[98576405680], [61688932161], [83640082432], [99038451727]], "mperf_counts": [[98584568748], [61688927068], [83640582402], [99038556124]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 17:08:14: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-04 17:08:14: INFO] Estimated completion (whole session): 2019-08-05 21:04:20 (1 day, 3:56:05 from now)
[2019-08-04 17:08:14: INFO] 184 executions left in scheduler queue
[2019-08-04 17:08:14: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-04 17:08:14: INFO] Estimated completion (next execution): 2019-08-04 17:12:25 (0:04:10 from now)
[2019-08-04 17:08:14: INFO] Reboot in preparation for next execution
[2019-08-04 17:20:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 17:20:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 17:20:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 17:20:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 17:20:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 17:20:24: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-04 17:22:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.019 s/op
Iteration   2: 2.799 s/op
Iteration   3: 2.651 s/op
Iteration   4: 2.566 s/op
Iteration   5: 2.612 s/op
Iteration   6: 2.630 s/op
Iteration   7: 2.506 s/op
Iteration   8: 2.487 s/op
Iteration   9: 2.486 s/op
Iteration  10: 2.467 s/op
Iteration  11: 2.513 s/op
Iteration  12: 2.497 s/op
Iteration  13: 2.472 s/op
Iteration  14: 2.503 s/op
Iteration  15: 2.457 s/op
Iteration  16: 2.514 s/op
Iteration  17: 2.504 s/op
Iteration  18: 2.480 s/op
Iteration  19: 2.497 s/op
Iteration  20: 2.503 s/op
Iteration  21: 2.479 s/op
Iteration  22: 2.476 s/op
Iteration  23: 2.489 s/op
Iteration  24: 2.513 s/op
Iteration  25: 2.472 s/op
Iteration  26: 2.482 s/op
Iteration  27: 2.511 s/op
Iteration  28: 2.464 s/op
Iteration  29: 2.449 s/op
Iteration  30: 2.472 s/op
Iteration  31: 2.506 s/op
Iteration  32: 2.496 s/op
Iteration  33: 2.483 s/op
Iteration  34: 2.484 s/op
Iteration  35: 2.513 s/op
Iteration  36: 2.498 s/op
Iteration  37: 2.476 s/op
Iteration  38: 2.487 s/op
Iteration  39: 2.447 s/op
Iteration  40: 2.496 s/op
Iteration  41: 2.508 s/op
Iteration  42: 2.467 s/op
Iteration  43: 2.461 s/op
Iteration  44: 2.513 s/op
Iteration  45: 2.485 s/op
Iteration  46: 2.500 s/op
Iteration  47: 2.461 s/op
Iteration  48: 2.459 s/op
Iteration  49: 2.483 s/op
Iteration  50: 2.477 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.513 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [2.400, 2.450) = 2 
    [2.450, 2.500) = 29 
    [2.500, 2.550) = 13 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 2 
    [2.650, 2.700) = 1 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 1 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.447 s/op
     p(50.0000) =      2.488 s/op
     p(90.0000) =      2.607 s/op
     p(95.0000) =      2.717 s/op
     p(99.0000) =      3.019 s/op
     p(99.9000) =      3.019 s/op
     p(99.9900) =      3.019 s/op
     p(99.9990) =      3.019 s/op
     p(99.9999) =      3.019 s/op
    p(100.0000) =      3.019 s/op


# Run complete. Total time: 00:02:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.513 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9_12.0.1_1564932024541.json
{"wallclock_times": [127.20979194099993], "core_cycle_counts": [[142460363466], [151543900745], [80138103320], [61051508527]], "aperf_counts": [[142139468534], [151474062299], [80081159667], [60994457725]], "mperf_counts": [[142140945178], [151474047504], [80081154956], [60994453044]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 17:22:31: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-04 17:22:32: INFO] Estimated completion (whole session): 2019-08-05 21:14:02 (1 day, 3:51:29 from now)
[2019-08-04 17:22:32: INFO] 183 executions left in scheduler queue
[2019-08-04 17:22:32: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-04 17:22:32: INFO] Estimated completion (next execution): 2019-08-04 17:27:09 (0:04:36 from now)
[2019-08-04 17:22:32: INFO] Reboot in preparation for next execution
[2019-08-04 17:32:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 17:32:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 17:32:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 17:32:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 17:32:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 17:32:41: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 17:34:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.832 s/op
Iteration   2: 2.295 s/op
Iteration   3: 2.138 s/op
Iteration   4: 2.160 s/op
Iteration   5: 2.072 s/op
Iteration   6: 2.031 s/op
Iteration   7: 2.072 s/op
Iteration   8: 2.043 s/op
Iteration   9: 2.049 s/op
Iteration  10: 2.022 s/op
Iteration  11: 2.038 s/op
Iteration  12: 2.039 s/op
Iteration  13: 2.043 s/op
Iteration  14: 2.031 s/op
Iteration  15: 2.018 s/op
Iteration  16: 1.999 s/op
Iteration  17: 2.021 s/op
Iteration  18: 1.978 s/op
Iteration  19: 1.976 s/op
Iteration  20: 2.006 s/op
Iteration  21: 2.015 s/op
Iteration  22: 2.011 s/op
Iteration  23: 2.001 s/op
Iteration  24: 1.997 s/op
Iteration  25: 1.967 s/op
Iteration  26: 1.957 s/op
Iteration  27: 1.953 s/op
Iteration  28: 1.976 s/op
Iteration  29: 1.981 s/op
Iteration  30: 1.998 s/op
Iteration  31: 1.963 s/op
Iteration  32: 1.982 s/op
Iteration  33: 1.995 s/op
Iteration  34: 2.008 s/op
Iteration  35: 1.997 s/op
Iteration  36: 1.973 s/op
Iteration  37: 1.999 s/op
Iteration  38: 1.983 s/op
Iteration  39: 1.960 s/op
Iteration  40: 2.006 s/op
Iteration  41: 2.002 s/op
Iteration  42: 1.957 s/op
Iteration  43: 2.007 s/op
Iteration  44: 1.976 s/op
Iteration  45: 1.990 s/op
Iteration  46: 1.959 s/op
Iteration  47: 2.010 s/op
Iteration  48: 2.009 s/op
Iteration  49: 2.019 s/op
Iteration  50: 2.010 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.031 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [1.900, 2.000) = 22 
    [2.000, 2.100) = 24 
    [2.100, 2.200) = 2 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.953 s/op
     p(50.0000) =      2.006 s/op
     p(90.0000) =      2.072 s/op
     p(95.0000) =      2.221 s/op
     p(99.0000) =      2.832 s/op
     p(99.9000) =      2.832 s/op
     p(99.9900) =      2.832 s/op
     p(99.9990) =      2.832 s/op
     p(99.9999) =      2.832 s/op
    p(100.0000) =      2.832 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.031 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_11.0.4_1564932760911.json
{"wallclock_times": [103.16080706800005], "core_cycle_counts": [[111072563309], [49130380884], [112786134700], [85067280172]], "aperf_counts": [[110734736080], [49063390750], [112721426434], [84990551180]], "mperf_counts": [[110737088834], [49068354012], [112721442962], [84990628358]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 17:34:24: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-04 17:34:25: INFO] Estimated completion (whole session): 2019-08-05 21:21:45 (1 day, 3:47:20 from now)
[2019-08-04 17:34:25: INFO] 182 executions left in scheduler queue
[2019-08-04 17:34:25: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-04 17:34:25: INFO] Estimated completion (next execution): 2019-08-04 17:38:36 (0:04:11 from now)
[2019-08-04 17:34:25: INFO] Reboot in preparation for next execution
[2019-08-04 17:41:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 17:41:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 17:41:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 17:41:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 17:41:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 17:41:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 17:43:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.315 s/op
Iteration   2: 3.109 s/op
Iteration   3: 2.989 s/op
Iteration   4: 2.996 s/op
Iteration   5: 2.726 s/op
Iteration   6: 2.826 s/op
Iteration   7: 2.735 s/op
Iteration   8: 2.774 s/op
Iteration   9: 2.766 s/op
Iteration  10: 2.769 s/op
Iteration  11: 2.758 s/op
Iteration  12: 2.745 s/op
Iteration  13: 2.798 s/op
Iteration  14: 2.800 s/op
Iteration  15: 2.733 s/op
Iteration  16: 2.675 s/op
Iteration  17: 2.665 s/op
Iteration  18: 2.687 s/op
Iteration  19: 2.685 s/op
Iteration  20: 2.669 s/op
Iteration  21: 2.651 s/op
Iteration  22: 2.630 s/op
Iteration  23: 2.709 s/op
Iteration  24: 2.670 s/op
Iteration  25: 2.656 s/op
Iteration  26: 2.678 s/op
Iteration  27: 2.732 s/op
Iteration  28: 2.615 s/op
Iteration  29: 2.719 s/op
Iteration  30: 2.660 s/op
Iteration  31: 2.678 s/op
Iteration  32: 2.712 s/op
Iteration  33: 2.657 s/op
Iteration  34: 2.666 s/op
Iteration  35: 2.743 s/op
Iteration  36: 2.733 s/op
Iteration  37: 2.741 s/op
Iteration  38: 2.724 s/op
Iteration  39: 2.676 s/op
Iteration  40: 2.726 s/op
Iteration  41: 2.605 s/op
Iteration  42: 2.682 s/op
Iteration  43: 2.733 s/op
Iteration  44: 2.748 s/op
Iteration  45: 2.658 s/op
Iteration  46: 2.648 s/op
Iteration  47: 2.732 s/op
Iteration  48: 2.682 s/op
Iteration  49: 2.660 s/op
Iteration  50: 2.742 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.738 ?(99.9%) 0.062 s/op

  Histogram, s/op:
    [2.600, 2.650) = 4 
    [2.650, 2.700) = 18 
    [2.700, 2.750) = 17 
    [2.750, 2.800) = 6 
    [2.800, 2.850) = 1 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 2 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 1 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 1 
    [3.350, 3.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.605 s/op
     p(50.0000) =      2.721 s/op
     p(90.0000) =      2.823 s/op
     p(95.0000) =      3.047 s/op
     p(99.0000) =      3.315 s/op
     p(99.9000) =      3.315 s/op
     p(99.9900) =      3.315 s/op
     p(99.9990) =      3.315 s/op
     p(99.9999) =      3.315 s/op
    p(100.0000) =      3.315 s/op


# Run complete. Total time: 00:02:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.738 ? 0.062   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_11.0.4_1564933289620.json
{"wallclock_times": [138.40922083099997], "core_cycle_counts": [[158572555049], [53803100837], [140607458882], [124837637525]], "aperf_counts": [[158222595660], [53723662506], [140552013166], [124776821085]], "mperf_counts": [[158238907292], [53723664630], [140552980606], [124777463026]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 17:43:48: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-04 17:43:49: INFO] Estimated completion (whole session): 2019-08-05 21:26:18 (1 day, 3:42:29 from now)
[2019-08-04 17:43:49: INFO] 181 executions left in scheduler queue
[2019-08-04 17:43:49: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 17:43:49: INFO] Estimated completion (next execution): 2019-08-04 17:48:38 (0:04:49 from now)
[2019-08-04 17:43:49: INFO] Reboot in preparation for next execution
[2019-08-04 17:56:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 17:56:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 17:56:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 17:56:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 17:56:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 18:05:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.676 s/op
Iteration   2: 11.263 s/op
Iteration   3: 10.960 s/op
Iteration   4: 10.702 s/op
Iteration   5: 10.775 s/op
Iteration   6: 10.733 s/op
Iteration   7: 10.762 s/op
Iteration   8: 10.686 s/op
Iteration   9: 10.768 s/op
Iteration  10: 10.744 s/op
Iteration  11: 10.686 s/op
Iteration  12: 10.783 s/op
Iteration  13: 10.786 s/op
Iteration  14: 10.704 s/op
Iteration  15: 10.746 s/op
Iteration  16: 10.690 s/op
Iteration  17: 10.757 s/op
Iteration  18: 10.682 s/op
Iteration  19: 10.714 s/op
Iteration  20: 10.736 s/op
Iteration  21: 10.686 s/op
Iteration  22: 10.778 s/op
Iteration  23: 10.701 s/op
Iteration  24: 10.714 s/op
Iteration  25: 10.747 s/op
Iteration  26: 10.702 s/op
Iteration  27: 10.684 s/op
Iteration  28: 10.718 s/op
Iteration  29: 10.799 s/op
Iteration  30: 10.702 s/op
Iteration  31: 10.740 s/op
Iteration  32: 10.782 s/op
Iteration  33: 10.732 s/op
Iteration  34: 10.727 s/op
Iteration  35: 10.739 s/op
Iteration  36: 10.673 s/op
Iteration  37: 10.766 s/op
Iteration  38: 10.707 s/op
Iteration  39: 10.742 s/op
Iteration  40: 10.689 s/op
Iteration  41: 10.737 s/op
Iteration  42: 10.735 s/op
Iteration  43: 10.762 s/op
Iteration  44: 10.704 s/op
Iteration  45: 10.686 s/op
Iteration  46: 10.727 s/op
Iteration  47: 10.690 s/op
Iteration  48: 10.688 s/op
Iteration  49: 10.733 s/op
Iteration  50: 10.736 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.742 ?(99.9%) 0.044 s/op

  Histogram, s/op:
    [10.600, 10.650) = 0 
    [10.650, 10.700) = 12 
    [10.700, 10.750) = 25 
    [10.750, 10.800) = 11 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 1 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 0 
    [11.100, 11.150) = 0 
    [11.150, 11.200) = 0 
    [11.200, 11.250) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.673 s/op
     p(50.0000) =     10.733 s/op
     p(90.0000) =     10.783 s/op
     p(95.0000) =     10.871 s/op
     p(99.0000) =     11.263 s/op
     p(99.9000) =     11.263 s/op
     p(99.9900) =     11.263 s/op
     p(99.9990) =     11.263 s/op
     p(99.9999) =     11.263 s/op
    p(100.0000) =     11.263 s/op


# Run complete. Total time: 00:08:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.742 ? 0.044   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot_12.0.2_1564934219187.json
{"wallclock_times": [538.0848831090001], "core_cycle_counts": [[557670270516], [173435466631], [441362346088], [565220970437]], "aperf_counts": [[556506104175], [173267129111], [441276350695], [565162799895]], "mperf_counts": [[557010976868], [173322680822], [441324277036], [565211598752]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 18:05:57: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 18:05:58: INFO] Estimated completion (whole session): 2019-08-05 21:37:04 (1 day, 3:31:06 from now)
[2019-08-04 18:05:58: INFO] 180 executions left in scheduler queue
[2019-08-04 18:05:58: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 18:05:58: INFO] Estimated completion (next execution): 2019-08-04 18:17:24 (0:11:25 from now)
[2019-08-04 18:05:58: INFO] Reboot in preparation for next execution
[2019-08-04 18:32:46: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 18:32:46: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 18:32:46: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 18:32:46: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 18:32:46: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 18:38:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.264 s/op
Iteration   2: 7.607 s/op
Iteration   3: 7.324 s/op
Iteration   4: 7.704 s/op
Iteration   5: 7.393 s/op
Iteration   6: 6.559 s/op
Iteration   7: 6.816 s/op
Iteration   8: 7.401 s/op
Iteration   9: 7.393 s/op
Iteration  10: 6.798 s/op
Iteration  11: 7.404 s/op
Iteration  12: 7.382 s/op
Iteration  13: 7.406 s/op
Iteration  14: 7.396 s/op
Iteration  15: 7.384 s/op
Iteration  16: 7.426 s/op
Iteration  17: 6.480 s/op
Iteration  18: 7.399 s/op
Iteration  19: 7.281 s/op
Iteration  20: 6.629 s/op
Iteration  21: 7.406 s/op
Iteration  22: 7.399 s/op
Iteration  23: 7.082 s/op
Iteration  24: 7.381 s/op
Iteration  25: 7.414 s/op
Iteration  26: 7.377 s/op
Iteration  27: 7.404 s/op
Iteration  28: 7.158 s/op
Iteration  29: 7.405 s/op
Iteration  30: 7.399 s/op
Iteration  31: 6.823 s/op
Iteration  32: 7.384 s/op
Iteration  33: 7.414 s/op
Iteration  34: 7.376 s/op
Iteration  35: 7.415 s/op
Iteration  36: 7.393 s/op
Iteration  37: 6.717 s/op
Iteration  38: 6.952 s/op
Iteration  39: 7.402 s/op
Iteration  40: 7.344 s/op
Iteration  41: 7.437 s/op
Iteration  42: 7.399 s/op
Iteration  43: 7.403 s/op
Iteration  44: 7.033 s/op
Iteration  45: 6.839 s/op
Iteration  46: 7.421 s/op
Iteration  47: 7.407 s/op
Iteration  48: 7.409 s/op
Iteration  49: 7.429 s/op
Iteration  50: 7.398 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.265 ?(99.9%) 0.137 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 2 
    [6.750, 6.875) = 4 
    [6.875, 7.000) = 1 
    [7.000, 7.125) = 2 
    [7.125, 7.250) = 1 
    [7.250, 7.375) = 4 
    [7.375, 7.500) = 32 
    [7.500, 7.625) = 1 
    [7.625, 7.750) = 1 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.480 s/op
     p(50.0000) =      7.394 s/op
     p(90.0000) =      7.426 s/op
     p(95.0000) =      7.514 s/op
     p(99.0000) =      7.704 s/op
     p(99.9000) =      7.704 s/op
     p(99.9900) =      7.704 s/op
     p(99.9990) =      7.704 s/op
     p(99.9999) =      7.704 s/op
    p(100.0000) =      7.704 s/op


# Run complete. Total time: 00:06:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.265 ? 0.137   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot_12.0.2_1564936366539.json
{"wallclock_times": [364.369407702], "core_cycle_counts": [[166719095230], [212574435377], [290739669025], [393503489548]], "aperf_counts": [[165698852418], [212492220234], [290706751786], [393476388569]], "mperf_counts": [[184085041614], [238395624780], [321472523524], [441856870180]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 18:38:50: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 18:38:51: INFO] Estimated completion (whole session): 2019-08-05 22:01:18 (1 day, 3:22:27 from now)
[2019-08-04 18:38:51: INFO] 179 executions left in scheduler queue
[2019-08-04 18:38:51: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 18:38:51: INFO] Estimated completion (next execution): 2019-08-04 18:47:28 (0:08:36 from now)
[2019-08-04 18:38:51: INFO] Reboot in preparation for next execution
[2019-08-04 18:54:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 18:54:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 18:54:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 18:54:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 18:54:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 19:00:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.422 s/op
Iteration   2: 7.080 s/op
Iteration   3: 7.181 s/op
Iteration   4: 7.058 s/op
Iteration   5: 7.110 s/op
Iteration   6: 6.971 s/op
Iteration   7: 7.078 s/op
Iteration   8: 6.951 s/op
Iteration   9: 7.065 s/op
Iteration  10: 7.083 s/op
Iteration  11: 6.943 s/op
Iteration  12: 7.089 s/op
Iteration  13: 6.942 s/op
Iteration  14: 7.085 s/op
Iteration  15: 7.063 s/op
Iteration  16: 6.957 s/op
Iteration  17: 7.069 s/op
Iteration  18: 6.936 s/op
Iteration  19: 7.067 s/op
Iteration  20: 7.112 s/op
Iteration  21: 6.946 s/op
Iteration  22: 7.058 s/op
Iteration  23: 7.078 s/op
Iteration  24: 6.912 s/op
Iteration  25: 7.017 s/op
Iteration  26: 7.048 s/op
Iteration  27: 7.026 s/op
Iteration  28: 7.020 s/op
Iteration  29: 7.047 s/op
Iteration  30: 7.003 s/op
Iteration  31: 7.093 s/op
Iteration  32: 6.995 s/op
Iteration  33: 7.033 s/op
Iteration  34: 6.942 s/op
Iteration  35: 7.079 s/op
Iteration  36: 7.067 s/op
Iteration  37: 6.947 s/op
Iteration  38: 7.062 s/op
Iteration  39: 6.937 s/op
Iteration  40: 7.068 s/op
Iteration  41: 7.074 s/op
Iteration  42: 6.930 s/op
Iteration  43: 7.082 s/op
Iteration  44: 6.936 s/op
Iteration  45: 7.071 s/op
Iteration  46: 7.085 s/op
Iteration  47: 6.957 s/op
Iteration  48: 7.068 s/op
Iteration  49: 7.079 s/op
Iteration  50: 6.950 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.037 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [6.900, 6.950) = 10 
    [6.950, 7.000) = 6 
    [7.000, 7.050) = 7 
    [7.050, 7.100) = 23 
    [7.100, 7.150) = 2 
    [7.150, 7.200) = 1 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 0 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.912 s/op
     p(50.0000) =      7.060 s/op
     p(90.0000) =      7.093 s/op
     p(95.0000) =      7.143 s/op
     p(99.0000) =      7.422 s/op
     p(99.9000) =      7.422 s/op
     p(99.9900) =      7.422 s/op
     p(99.9990) =      7.422 s/op
     p(99.9999) =      7.422 s/op
    p(100.0000) =      7.422 s/op


# Run complete. Total time: 00:05:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.037 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot_12.0.2_1564937680864.json
{"wallclock_times": [353.03230531299994], "core_cycle_counts": [[348689479551], [274780523372], [288153526651], [341740187098]], "aperf_counts": [[347850355039], [274678271366], [288102707978], [341702469241]], "mperf_counts": [[348458021578], [274820239694], [288485462672], [341916943730]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 19:00:33: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 19:00:34: INFO] Estimated completion (whole session): 2019-08-05 22:14:35 (1 day, 3:14:01 from now)
[2019-08-04 19:00:34: INFO] 178 executions left in scheduler queue
[2019-08-04 19:00:34: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 19:00:34: INFO] Estimated completion (next execution): 2019-08-04 19:08:59 (0:08:24 from now)
[2019-08-04 19:00:34: INFO] Reboot in preparation for next execution
[2019-08-04 19:38:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 19:38:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 19:38:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 19:38:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 19:38:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 19:52:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.896 s/op
Iteration   2: 17.339 s/op
Iteration   3: 17.738 s/op
Iteration   4: 17.224 s/op
Iteration   5: 16.899 s/op
Iteration   6: 16.928 s/op
Iteration   7: 16.913 s/op
Iteration   8: 16.965 s/op
Iteration   9: 16.986 s/op
Iteration  10: 16.958 s/op
Iteration  11: 16.894 s/op
Iteration  12: 16.943 s/op
Iteration  13: 16.960 s/op
Iteration  14: 16.890 s/op
Iteration  15: 16.926 s/op
Iteration  16: 16.987 s/op
Iteration  17: 17.057 s/op
Iteration  18: 17.340 s/op
Iteration  19: 16.962 s/op
Iteration  20: 16.967 s/op
Iteration  21: 16.998 s/op
Iteration  22: 17.081 s/op
Iteration  23: 16.977 s/op
Iteration  24: 17.001 s/op
Iteration  25: 16.989 s/op
Iteration  26: 16.998 s/op
Iteration  27: 17.053 s/op
Iteration  28: 16.995 s/op
Iteration  29: 17.005 s/op
Iteration  30: 16.994 s/op
Iteration  31: 16.983 s/op
Iteration  32: 17.026 s/op
Iteration  33: 17.156 s/op
Iteration  34: 17.011 s/op
Iteration  35: 17.059 s/op
Iteration  36: 17.057 s/op
Iteration  37: 17.026 s/op
Iteration  38: 17.026 s/op
Iteration  39: 17.355 s/op
Iteration  40: 16.994 s/op
Iteration  41: 17.052 s/op
Iteration  42: 16.983 s/op
Iteration  43: 16.954 s/op
Iteration  44: 16.970 s/op
Iteration  45: 16.986 s/op
Iteration  46: 17.122 s/op
Iteration  47: 17.034 s/op
Iteration  48: 16.998 s/op
Iteration  49: 17.092 s/op
Iteration  50: 17.009 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.035 ?(99.9%) 0.072 s/op

  Histogram, s/op:
    [16.800, 16.900) = 4 
    [16.900, 17.000) = 24 
    [17.000, 17.100) = 15 
    [17.100, 17.200) = 2 
    [17.200, 17.300) = 1 
    [17.300, 17.400) = 3 
    [17.400, 17.500) = 0 
    [17.500, 17.600) = 0 
    [17.600, 17.700) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.890 s/op
     p(50.0000) =     16.997 s/op
     p(90.0000) =     17.217 s/op
     p(95.0000) =     17.347 s/op
     p(99.0000) =     17.738 s/op
     p(99.9000) =     17.738 s/op
     p(99.9900) =     17.738 s/op
     p(99.9990) =     17.738 s/op
     p(99.9999) =     17.738 s/op
    p(100.0000) =     17.738 s/op


# Run complete. Total time: 00:14:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.035 ? 0.072   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot_12.0.2_1564940319019.json
{"wallclock_times": [852.8038330240001], "core_cycle_counts": [[768941046735], [673687706179], [736255250213], [566380001350]], "aperf_counts": [[766959027843], [673500641974], [736183726554], [566306925123]], "mperf_counts": [[768546312626], [673961544558], [738793369174], [566803234178]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 19:52:51: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-04 19:52:52: INFO] Estimated completion (whole session): 2019-08-05 22:50:14 (1 day, 2:57:21 from now)
[2019-08-04 19:52:52: INFO] 177 executions left in scheduler queue
[2019-08-04 19:52:52: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-04 19:52:52: INFO] Estimated completion (next execution): 2019-08-04 20:09:34 (0:16:41 from now)
[2019-08-04 19:52:52: INFO] Reboot in preparation for next execution
[2019-08-04 20:12:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.804 s/op
Iteration   2: 1.587 s/op
Iteration   3: 1.570 s/op
Iteration   4: 1.658 s/op
Iteration   5: 1.562 s/op
Iteration   6: 1.567 s/op
Iteration   7: 1.571 s/op
Iteration   8: 1.570 s/op
Iteration   9: 1.566 s/op
Iteration  10: 1.570 s/op
Iteration  11: 1.571 s/op
Iteration  12: 1.568 s/op
Iteration  13: 1.567 s/op
Iteration  14: 1.567 s/op
Iteration  15: 1.570 s/op
Iteration  16: 1.577 s/op
Iteration  17: 1.568 s/op
Iteration  18: 1.572 s/op
Iteration  19: 1.569 s/op
Iteration  20: 1.570 s/op
Iteration  21: 1.574 s/op
Iteration  22: 1.567 s/op
Iteration  23: 1.571 s/op
Iteration  24: 1.566 s/op
Iteration  25: 1.573 s/op
Iteration  26: 1.571 s/op
Iteration  27: 1.566 s/op
Iteration  28: 1.571 s/op
Iteration  29: 1.569 s/op
Iteration  30: 1.570 s/op
Iteration  31: 1.574 s/op
Iteration  32: 1.573 s/op
Iteration  33: 1.562 s/op
Iteration  34: 1.563 s/op
Iteration  35: 1.566 s/op
Iteration  36: 1.562 s/op
Iteration  37: 1.563 s/op
Iteration  38: 1.570 s/op
Iteration  39: 1.570 s/op
Iteration  40: 1.576 s/op
Iteration  41: 1.567 s/op
Iteration  42: 1.575 s/op
Iteration  43: 1.567 s/op
Iteration  44: 1.559 s/op
Iteration  45: 1.566 s/op
Iteration  46: 1.567 s/op
Iteration  47: 1.571 s/op
Iteration  48: 1.567 s/op
Iteration  49: 1.565 s/op
Iteration  50: 1.563 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.575 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 45 
    [1.575, 1.600) = 3 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.559 s/op
     p(50.0000) =      1.569 s/op
     p(90.0000) =      1.576 s/op
     p(95.0000) =      1.619 s/op
     p(99.0000) =      1.804 s/op
     p(99.9000) =      1.804 s/op
     p(99.9900) =      1.804 s/op
     p(99.9990) =      1.804 s/op
     p(99.9999) =      1.804 s/op
    p(100.0000) =      1.804 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.575 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_graalvm-ce-19.1.1_1564942245710.json
{"wallclock_times": [79.68929754499993], "core_cycle_counts": [[97072233948], [83081388131], [42041501053], [43972120279]], "aperf_counts": [[96855218091], [83045296306], [42016753852], [43949794565]], "mperf_counts": [[96880457322], [83047967068], [42022694606], [43953023826]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 20:12:05: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-04 20:12:06: INFO] Estimated completion (whole session): 2019-08-05 23:05:35 (1 day, 2:53:29 from now)
[2019-08-04 20:12:06: INFO] 176 executions left in scheduler queue
[2019-08-04 20:12:06: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-04 20:12:06: INFO] Estimated completion (next execution): 2019-08-04 20:15:57 (0:03:51 from now)
[2019-08-04 20:12:06: INFO] Reboot in preparation for next execution
[2019-08-04 20:32:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.682 s/op
Iteration   2: 1.590 s/op
Iteration   3: 1.649 s/op
Iteration   4: 1.536 s/op
Iteration   5: 1.535 s/op
Iteration   6: 1.537 s/op
Iteration   7: 1.536 s/op
Iteration   8: 1.534 s/op
Iteration   9: 1.534 s/op
Iteration  10: 1.534 s/op
Iteration  11: 1.533 s/op
Iteration  12: 1.534 s/op
Iteration  13: 1.534 s/op
Iteration  14: 1.534 s/op
Iteration  15: 1.534 s/op
Iteration  16: 1.537 s/op
Iteration  17: 1.539 s/op
Iteration  18: 1.536 s/op
Iteration  19: 1.537 s/op
Iteration  20: 1.534 s/op
Iteration  21: 1.539 s/op
Iteration  22: 1.537 s/op
Iteration  23: 1.537 s/op
Iteration  24: 1.537 s/op
Iteration  25: 1.535 s/op
Iteration  26: 1.541 s/op
Iteration  27: 1.537 s/op
Iteration  28: 1.535 s/op
Iteration  29: 1.539 s/op
Iteration  30: 1.537 s/op
Iteration  31: 1.537 s/op
Iteration  32: 1.535 s/op
Iteration  33: 1.538 s/op
Iteration  34: 1.536 s/op
Iteration  35: 1.535 s/op
Iteration  36: 1.537 s/op
Iteration  37: 1.536 s/op
Iteration  38: 1.537 s/op
Iteration  39: 1.536 s/op
Iteration  40: 1.539 s/op
Iteration  41: 1.535 s/op
Iteration  42: 1.535 s/op
Iteration  43: 1.542 s/op
Iteration  44: 1.538 s/op
Iteration  45: 1.539 s/op
Iteration  46: 1.538 s/op
Iteration  47: 1.542 s/op
Iteration  48: 1.535 s/op
Iteration  49: 1.538 s/op
Iteration  50: 1.541 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.543 ?(99.9%) 0.013 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 0 
    [1.525, 1.538) = 34 
    [1.538, 1.550) = 13 
    [1.550, 1.563) = 0 
    [1.563, 1.575) = 0 
    [1.575, 1.588) = 0 
    [1.588, 1.600) = 1 
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 1 
    [1.650, 1.663) = 0 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 1 
    [1.688, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.533 s/op
     p(50.0000) =      1.537 s/op
     p(90.0000) =      1.542 s/op
     p(95.0000) =      1.617 s/op
     p(99.0000) =      1.682 s/op
     p(99.9000) =      1.682 s/op
     p(99.9900) =      1.682 s/op
     p(99.9990) =      1.682 s/op
     p(99.9999) =      1.682 s/op
    p(100.0000) =      1.682 s/op


# Run complete. Total time: 00:01:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.543 ? 0.013   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_graalvm-ce-19.1.1_1564943460373.json
{"wallclock_times": [78.00400690600009], "core_cycle_counts": [[54430531444], [37007965310], [80233354050], [84661279065]], "aperf_counts": [[54240742664], [36981522631], [80217493629], [84647827260]], "mperf_counts": [[54265361150], [36985858408], [80222238666], [84649583350]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 20:32:18: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-04 20:32:19: INFO] Estimated completion (whole session): 2019-08-05 23:22:00 (1 day, 2:49:41 from now)
[2019-08-04 20:32:19: INFO] 175 executions left in scheduler queue
[2019-08-04 20:32:19: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-08-04 20:32:19: INFO] Estimated completion (next execution): 2019-08-04 20:36:07 (0:03:48 from now)
[2019-08-04 20:32:19: INFO] Reboot in preparation for next execution
[2019-08-04 20:46:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 20:46:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 20:46:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 20:46:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 20:46:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 20:55:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.778 s/op
Iteration   2: 10.997 s/op
Iteration   3: 10.671 s/op
Iteration   4: 10.719 s/op
Iteration   5: 10.730 s/op
Iteration   6: 10.715 s/op
Iteration   7: 10.717 s/op
Iteration   8: 10.722 s/op
Iteration   9: 10.714 s/op
Iteration  10: 10.727 s/op
Iteration  11: 10.726 s/op
Iteration  12: 10.736 s/op
Iteration  13: 10.728 s/op
Iteration  14: 10.731 s/op
Iteration  15: 10.713 s/op
Iteration  16: 10.710 s/op
Iteration  17: 10.721 s/op
Iteration  18: 10.714 s/op
Iteration  19: 10.706 s/op
Iteration  20: 10.711 s/op
Iteration  21: 10.716 s/op
Iteration  22: 10.725 s/op
Iteration  23: 10.714 s/op
Iteration  24: 10.717 s/op
Iteration  25: 10.717 s/op
Iteration  26: 10.712 s/op
Iteration  27: 10.717 s/op
Iteration  28: 10.713 s/op
Iteration  29: 10.707 s/op
Iteration  30: 10.719 s/op
Iteration  31: 10.721 s/op
Iteration  32: 10.711 s/op
Iteration  33: 10.716 s/op
Iteration  34: 10.711 s/op
Iteration  35: 10.727 s/op
Iteration  36: 10.712 s/op
Iteration  37: 10.709 s/op
Iteration  38: 10.717 s/op
Iteration  39: 10.712 s/op
Iteration  40: 10.716 s/op
Iteration  41: 10.715 s/op
Iteration  42: 10.723 s/op
Iteration  43: 10.711 s/op
Iteration  44: 10.721 s/op
Iteration  45: 10.716 s/op
Iteration  46: 10.712 s/op
Iteration  47: 10.718 s/op
Iteration  48: 10.710 s/op
Iteration  49: 10.712 s/op
Iteration  50: 10.714 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     10.743 ?(99.9%) 0.077 s/op

  Histogram, s/op:
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 0 
    [10.375, 10.500) = 0 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 48 
    [10.750, 10.875) = 0 
    [10.875, 11.000) = 1 
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.671 s/op
     p(50.0000) =     10.716 s/op
     p(90.0000) =     10.730 s/op
     p(95.0000) =     10.854 s/op
     p(99.0000) =     11.778 s/op
     p(99.9000) =     11.778 s/op
     p(99.9900) =     11.778 s/op
     p(99.9990) =     11.778 s/op
     p(99.9999) =     11.778 s/op
    p(100.0000) =     11.778 s/op


# Run complete. Total time: 00:08:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  10.743 ? 0.077   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot_11.0.4_1564944365408.json
{"wallclock_times": [538.162472341], "core_cycle_counts": [[275057121502], [719184896004], [317208618788], [425080025562]], "aperf_counts": [[273584918170], [719078713750], [317122402423], [425004859747]], "mperf_counts": [[273758619158], [719280254514], [317197116992], [425090285420]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 20:55:03: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-08-04 20:55:04: INFO] Estimated completion (whole session): 2019-08-05 23:33:13 (1 day, 2:38:08 from now)
[2019-08-04 20:55:04: INFO] 174 executions left in scheduler queue
[2019-08-04 20:55:04: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-04 20:55:04: INFO] Estimated completion (next execution): 2019-08-04 21:06:35 (0:11:30 from now)
[2019-08-04 20:55:04: INFO] Reboot in preparation for next execution
[2019-08-04 21:07:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.854 s/op
Iteration   2: 1.621 s/op
Iteration   3: 1.606 s/op
Iteration   4: 1.690 s/op
Iteration   5: 1.600 s/op
Iteration   6: 1.606 s/op
Iteration   7: 1.599 s/op
Iteration   8: 1.600 s/op
Iteration   9: 1.598 s/op
Iteration  10: 1.598 s/op
Iteration  11: 1.596 s/op
Iteration  12: 1.600 s/op
Iteration  13: 1.600 s/op
Iteration  14: 1.603 s/op
Iteration  15: 1.606 s/op
Iteration  16: 1.610 s/op
Iteration  17: 1.603 s/op
Iteration  18: 1.601 s/op
Iteration  19: 1.593 s/op
Iteration  20: 1.614 s/op
Iteration  21: 1.600 s/op
Iteration  22: 1.602 s/op
Iteration  23: 1.610 s/op
Iteration  24: 1.602 s/op
Iteration  25: 1.606 s/op
Iteration  26: 1.603 s/op
Iteration  27: 1.605 s/op
Iteration  28: 1.604 s/op
Iteration  29: 1.599 s/op
Iteration  30: 1.602 s/op
Iteration  31: 1.598 s/op
Iteration  32: 1.603 s/op
Iteration  33: 1.598 s/op
Iteration  34: 1.593 s/op
Iteration  35: 1.596 s/op
Iteration  36: 1.596 s/op
Iteration  37: 1.600 s/op
Iteration  38: 1.608 s/op
Iteration  39: 1.597 s/op
Iteration  40: 1.596 s/op
Iteration  41: 1.599 s/op
Iteration  42: 1.604 s/op
Iteration  43: 1.604 s/op
Iteration  44: 1.592 s/op
Iteration  45: 1.602 s/op
Iteration  46: 1.608 s/op
Iteration  47: 1.600 s/op
Iteration  48: 1.600 s/op
Iteration  49: 1.598 s/op
Iteration  50: 1.599 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.608 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 23 
    [1.600, 1.625) = 25 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 1 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 1 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.592 s/op
     p(50.0000) =      1.600 s/op
     p(90.0000) =      1.610 s/op
     p(95.0000) =      1.652 s/op
     p(99.0000) =      1.854 s/op
     p(99.9000) =      1.854 s/op
     p(99.9900) =      1.854 s/op
     p(99.9990) =      1.854 s/op
     p(99.9999) =      1.854 s/op
    p(100.0000) =      1.854 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.608 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ce-19.1.1_1564945595971.json
{"wallclock_times": [81.35084664700003], "core_cycle_counts": [[35984225979], [153662678353], [29546552326], [52729731635]], "aperf_counts": [[35679742683], [153645569312], [29522684757], [52704289650]], "mperf_counts": [[35693240490], [153652042926], [29523630314], [52709652466]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 21:07:57: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-04 21:07:58: INFO] Estimated completion (whole session): 2019-08-05 23:42:14 (1 day, 2:34:16 from now)
[2019-08-04 21:07:58: INFO] 173 executions left in scheduler queue
[2019-08-04 21:07:58: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-04 21:07:58: INFO] Estimated completion (next execution): 2019-08-04 21:11:50 (0:03:51 from now)
[2019-08-04 21:07:58: INFO] Reboot in preparation for next execution
[2019-08-04 21:19:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.970 s/op
Iteration   2: 1.879 s/op
Iteration   3: 1.930 s/op
Iteration   4: 1.824 s/op
Iteration   5: 1.817 s/op
Iteration   6: 1.819 s/op
Iteration   7: 1.820 s/op
Iteration   8: 1.818 s/op
Iteration   9: 1.817 s/op
Iteration  10: 1.817 s/op
Iteration  11: 1.815 s/op
Iteration  12: 1.815 s/op
Iteration  13: 1.816 s/op
Iteration  14: 1.814 s/op
Iteration  15: 1.817 s/op
Iteration  16: 1.818 s/op
Iteration  17: 1.817 s/op
Iteration  18: 1.814 s/op
Iteration  19: 1.817 s/op
Iteration  20: 1.815 s/op
Iteration  21: 1.816 s/op
Iteration  22: 1.818 s/op
Iteration  23: 1.817 s/op
Iteration  24: 1.815 s/op
Iteration  25: 1.817 s/op
Iteration  26: 1.814 s/op
Iteration  27: 1.813 s/op
Iteration  28: 1.815 s/op
Iteration  29: 1.814 s/op
Iteration  30: 1.816 s/op
Iteration  31: 1.815 s/op
Iteration  32: 1.815 s/op
Iteration  33: 1.816 s/op
Iteration  34: 1.814 s/op
Iteration  35: 1.819 s/op
Iteration  36: 1.817 s/op
Iteration  37: 1.818 s/op
Iteration  38: 1.816 s/op
Iteration  39: 1.817 s/op
Iteration  40: 1.816 s/op
Iteration  41: 1.818 s/op
Iteration  42: 1.817 s/op
Iteration  43: 1.817 s/op
Iteration  44: 1.815 s/op
Iteration  45: 1.816 s/op
Iteration  46: 1.820 s/op
Iteration  47: 1.814 s/op
Iteration  48: 1.815 s/op
Iteration  49: 1.815 s/op
Iteration  50: 1.816 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.823 ?(99.9%) 0.014 s/op

  Histogram, s/op:
    [1.800, 1.813) = 0 
    [1.813, 1.825) = 47 
    [1.825, 1.838) = 0 
    [1.838, 1.850) = 0 
    [1.850, 1.863) = 0 
    [1.863, 1.875) = 0 
    [1.875, 1.888) = 1 
    [1.888, 1.900) = 0 
    [1.900, 1.913) = 0 
    [1.913, 1.925) = 0 
    [1.925, 1.938) = 1 
    [1.938, 1.950) = 0 
    [1.950, 1.963) = 0 
    [1.963, 1.975) = 1 
    [1.975, 1.988) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.813 s/op
     p(50.0000) =      1.816 s/op
     p(90.0000) =      1.820 s/op
     p(95.0000) =      1.902 s/op
     p(99.0000) =      1.970 s/op
     p(99.9000) =      1.970 s/op
     p(99.9900) =      1.970 s/op
     p(99.9990) =      1.970 s/op
     p(99.9999) =      1.970 s/op
    p(100.0000) =      1.970 s/op


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.823 ? 0.014   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ce-19.1.1_1564946254725.json
{"wallclock_times": [91.98915902700003], "core_cycle_counts": [[93425993713], [93153915768], [46451688695], [67323070790]], "aperf_counts": [[93224586622], [93127050572], [46432895354], [67310643523]], "mperf_counts": [[93232164228], [93133177382], [46440011760], [67328687728]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 21:19:06: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-04 21:19:07: INFO] Estimated completion (whole session): 2019-08-05 23:49:30 (1 day, 2:30:22 from now)
[2019-08-04 21:19:07: INFO] 172 executions left in scheduler queue
[2019-08-04 21:19:07: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 21:19:07: INFO] Estimated completion (next execution): 2019-08-04 21:23:05 (0:03:58 from now)
[2019-08-04 21:19:07: INFO] Reboot in preparation for next execution
[2019-08-04 21:32:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.756 s/op
Iteration   2: 7.645 s/op
Iteration   3: 7.760 s/op
Iteration   4: 7.620 s/op
Iteration   5: 7.607 s/op
Iteration   6: 7.688 s/op
Iteration   7: 7.633 s/op
Iteration   8: 7.649 s/op
Iteration   9: 7.735 s/op
Iteration  10: 7.687 s/op
Iteration  11: 7.690 s/op
Iteration  12: 7.648 s/op
Iteration  13: 7.671 s/op
Iteration  14: 7.661 s/op
Iteration  15: 7.656 s/op
Iteration  16: 7.598 s/op
Iteration  17: 7.704 s/op
Iteration  18: 7.634 s/op
Iteration  19: 7.618 s/op
Iteration  20: 7.620 s/op
Iteration  21: 7.639 s/op
Iteration  22: 7.729 s/op
Iteration  23: 7.758 s/op
Iteration  24: 7.658 s/op
Iteration  25: 7.706 s/op
Iteration  26: 7.639 s/op
Iteration  27: 7.641 s/op
Iteration  28: 7.619 s/op
Iteration  29: 7.642 s/op
Iteration  30: 7.678 s/op
Iteration  31: 7.654 s/op
Iteration  32: 7.600 s/op
Iteration  33: 7.658 s/op
Iteration  34: 7.621 s/op
Iteration  35: 7.655 s/op
Iteration  36: 7.658 s/op
Iteration  37: 7.676 s/op
Iteration  38: 7.672 s/op
Iteration  39: 7.618 s/op
Iteration  40: 7.604 s/op
Iteration  41: 7.677 s/op
Iteration  42: 7.602 s/op
Iteration  43: 7.689 s/op
Iteration  44: 7.642 s/op
Iteration  45: 7.684 s/op
Iteration  46: 7.664 s/op
Iteration  47: 7.585 s/op
Iteration  48: 7.679 s/op
Iteration  49: 7.645 s/op
Iteration  50: 7.647 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.658 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [7.500, 7.525) = 0 
    [7.525, 7.550) = 0 
    [7.550, 7.575) = 0 
    [7.575, 7.600) = 3 
    [7.600, 7.625) = 9 
    [7.625, 7.650) = 12 
    [7.650, 7.675) = 10 
    [7.675, 7.700) = 9 
    [7.700, 7.725) = 2 
    [7.725, 7.750) = 2 
    [7.750, 7.775) = 3 
    [7.775, 7.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.585 s/op
     p(50.0000) =      7.655 s/op
     p(90.0000) =      7.727 s/op
     p(95.0000) =      7.757 s/op
     p(99.0000) =      7.760 s/op
     p(99.9000) =      7.760 s/op
     p(99.9900) =      7.760 s/op
     p(99.9990) =      7.760 s/op
     p(99.9999) =      7.760 s/op
    p(100.0000) =      7.760 s/op


# Run complete. Total time: 00:06:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.658 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ee-19.1.1_1564946767991.json
{"wallclock_times": [383.81591401800006], "core_cycle_counts": [[144530858338], [59552407384], [500542089850], [532327712132]], "aperf_counts": [[143515306730], [59491847595], [500525687189], [532304133734]], "mperf_counts": [[143535185824], [59492087358], [500531611316], [532311563356]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 21:32:31: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 21:32:32: INFO] Estimated completion (whole session): 2019-08-05 23:54:02 (1 day, 2:21:29 from now)
[2019-08-04 21:32:32: INFO] 171 executions left in scheduler queue
[2019-08-04 21:32:32: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 21:32:32: INFO] Estimated completion (next execution): 2019-08-04 21:41:26 (0:08:53 from now)
[2019-08-04 21:32:32: INFO] Reboot in preparation for next execution
[2019-08-04 21:44:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.760 s/op
Iteration   2: 6.514 s/op
Iteration   3: 6.674 s/op
Iteration   4: 6.657 s/op
Iteration   5: 6.544 s/op
Iteration   6: 6.543 s/op
Iteration   7: 6.572 s/op
Iteration   8: 6.610 s/op
Iteration   9: 6.538 s/op
Iteration  10: 6.542 s/op
Iteration  11: 6.553 s/op
Iteration  12: 6.601 s/op
Iteration  13: 6.564 s/op
Iteration  14: 6.565 s/op
Iteration  15: 6.565 s/op
Iteration  16: 6.608 s/op
Iteration  17: 6.612 s/op
Iteration  18: 6.540 s/op
Iteration  19: 6.557 s/op
Iteration  20: 6.553 s/op
Iteration  21: 6.592 s/op
Iteration  22: 6.548 s/op
Iteration  23: 6.549 s/op
Iteration  24: 6.591 s/op
Iteration  25: 6.569 s/op
Iteration  26: 6.609 s/op
Iteration  27: 6.547 s/op
Iteration  28: 6.551 s/op
Iteration  29: 6.594 s/op
Iteration  30: 6.543 s/op
Iteration  31: 6.600 s/op
Iteration  32: 6.566 s/op
Iteration  33: 6.596 s/op
Iteration  34: 6.556 s/op
Iteration  35: 6.550 s/op
Iteration  36: 6.576 s/op
Iteration  37: 6.568 s/op
Iteration  38: 6.616 s/op
Iteration  39: 6.563 s/op
Iteration  40: 6.576 s/op
Iteration  41: 6.564 s/op
Iteration  42: 6.578 s/op
Iteration  43: 6.554 s/op
Iteration  44: 6.557 s/op
Iteration  45: 6.617 s/op
Iteration  46: 6.537 s/op
Iteration  47: 6.591 s/op
Iteration  48: 6.594 s/op
Iteration  49: 6.536 s/op
Iteration  50: 6.600 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.577 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [6.500, 6.525) = 1 
    [6.525, 6.550) = 11 
    [6.550, 6.575) = 17 
    [6.575, 6.600) = 9 
    [6.600, 6.625) = 9 
    [6.625, 6.650) = 0 
    [6.650, 6.675) = 2 
    [6.675, 6.700) = 0 
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 1 
    [6.775, 6.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.514 s/op
     p(50.0000) =      6.566 s/op
     p(90.0000) =      6.616 s/op
     p(95.0000) =      6.665 s/op
     p(99.0000) =      6.760 s/op
     p(99.9000) =      6.760 s/op
     p(99.9900) =      6.760 s/op
     p(99.9990) =      6.760 s/op
     p(99.9999) =      6.760 s/op
    p(100.0000) =      6.760 s/op


# Run complete. Total time: 00:05:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.577 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ee-19.1.1_1564947515785.json
{"wallclock_times": [329.79868114199996], "core_cycle_counts": [[205251758255], [220356101756], [362251068127], [277895332463]], "aperf_counts": [[204388985934], [220297028347], [362226062336], [277875302736]], "mperf_counts": [[204413763958], [220301063600], [362233577496], [277876679004]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 21:44:05: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 21:44:06: INFO] Estimated completion (whole session): 2019-08-05 23:57:34 (1 day, 2:13:27 from now)
[2019-08-04 21:44:06: INFO] 170 executions left in scheduler queue
[2019-08-04 21:44:06: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 21:44:06: INFO] Estimated completion (next execution): 2019-08-04 21:52:07 (0:08:01 from now)
[2019-08-04 21:44:06: INFO] Reboot in preparation for next execution
[2019-08-04 21:53:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.913 s/op
Iteration   2: 3.430 s/op
Iteration   3: 3.405 s/op
Iteration   4: 3.386 s/op
Iteration   5: 3.480 s/op
Iteration   6: 3.400 s/op
Iteration   7: 3.441 s/op
Iteration   8: 3.440 s/op
Iteration   9: 3.380 s/op
Iteration  10: 3.413 s/op
Iteration  11: 3.441 s/op
Iteration  12: 3.438 s/op
Iteration  13: 3.427 s/op
Iteration  14: 3.380 s/op
Iteration  15: 3.399 s/op
Iteration  16: 3.461 s/op
Iteration  17: 3.441 s/op
Iteration  18: 3.435 s/op
Iteration  19: 3.391 s/op
Iteration  20: 3.399 s/op
Iteration  21: 3.453 s/op
Iteration  22: 3.434 s/op
Iteration  23: 3.445 s/op
Iteration  24: 3.441 s/op
Iteration  25: 3.427 s/op
Iteration  26: 3.384 s/op
Iteration  27: 3.412 s/op
Iteration  28: 3.443 s/op
Iteration  29: 3.437 s/op
Iteration  30: 3.440 s/op
Iteration  31: 3.382 s/op
Iteration  32: 3.394 s/op
Iteration  33: 3.453 s/op
Iteration  34: 3.433 s/op
Iteration  35: 3.445 s/op
Iteration  36: 3.443 s/op
Iteration  37: 3.440 s/op
Iteration  38: 3.372 s/op
Iteration  39: 3.405 s/op
Iteration  40: 3.454 s/op
Iteration  41: 3.443 s/op
Iteration  42: 3.449 s/op
Iteration  43: 3.437 s/op
Iteration  44: 3.434 s/op
Iteration  45: 3.377 s/op
Iteration  46: 3.412 s/op
Iteration  47: 3.441 s/op
Iteration  48: 3.438 s/op
Iteration  49: 3.439 s/op
Iteration  50: 3.450 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.435 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 11 
    [3.400, 3.450) = 32 
    [3.450, 3.500) = 6 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.372 s/op
     p(50.0000) =      3.437 s/op
     p(90.0000) =      3.453 s/op
     p(95.0000) =      3.470 s/op
     p(99.0000) =      3.913 s/op
     p(99.9000) =      3.913 s/op
     p(99.9900) =      3.913 s/op
     p(99.9990) =      3.913 s/op
     p(99.9999) =      3.913 s/op
    p(100.0000) =      3.913 s/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.435 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ee-19.1.1_1564948219838.json
{"wallclock_times": [172.768088314], "core_cycle_counts": [[171686184064], [92897508362], [193915376786], [138054860294]], "aperf_counts": [[171291360484], [92851125220], [193873995529], [138021391360]], "mperf_counts": [[171310809170], [92851548968], [193874633686], [138026813794]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 21:53:12: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 21:53:13: INFO] Estimated completion (whole session): 2019-08-06 00:01:11 (1 day, 2:07:58 from now)
[2019-08-04 21:53:13: INFO] 169 executions left in scheduler queue
[2019-08-04 21:53:13: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 21:53:13: INFO] Estimated completion (next execution): 2019-08-04 21:58:39 (0:05:26 from now)
[2019-08-04 21:53:13: INFO] Reboot in preparation for next execution
[2019-08-04 22:01:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.292 s/op
Iteration   2: 3.135 s/op
Iteration   3: 3.168 s/op
Iteration   4: 3.270 s/op
Iteration   5: 3.296 s/op
Iteration   6: 3.141 s/op
Iteration   7: 3.149 s/op
Iteration   8: 3.003 s/op
Iteration   9: 3.183 s/op
Iteration  10: 3.146 s/op
Iteration  11: 3.259 s/op
Iteration  12: 3.079 s/op
Iteration  13: 3.076 s/op
Iteration  14: 3.201 s/op
Iteration  15: 3.214 s/op
Iteration  16: 3.256 s/op
Iteration  17: 3.118 s/op
Iteration  18: 3.159 s/op
Iteration  19: 3.196 s/op
Iteration  20: 3.147 s/op
Iteration  21: 3.177 s/op
Iteration  22: 3.220 s/op
Iteration  23: 3.104 s/op
Iteration  24: 3.096 s/op
Iteration  25: 3.264 s/op
Iteration  26: 3.191 s/op
Iteration  27: 3.219 s/op
Iteration  28: 3.193 s/op
Iteration  29: 3.188 s/op
Iteration  30: 3.329 s/op
Iteration  31: 3.134 s/op
Iteration  32: 3.222 s/op
Iteration  33: 3.206 s/op
Iteration  34: 3.148 s/op
Iteration  35: 3.271 s/op
Iteration  36: 3.160 s/op
Iteration  37: 3.205 s/op
Iteration  38: 3.181 s/op
Iteration  39: 3.226 s/op
Iteration  40: 3.197 s/op
Iteration  41: 3.197 s/op
Iteration  42: 3.330 s/op
Iteration  43: 3.187 s/op
Iteration  44: 3.090 s/op
Iteration  45: 3.158 s/op
Iteration  46: 3.169 s/op
Iteration  47: 3.161 s/op
Iteration  48: 3.229 s/op
Iteration  49: 3.097 s/op
Iteration  50: 3.160 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.184 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [3.000, 3.025) = 1 
    [3.025, 3.050) = 0 
    [3.050, 3.075) = 0 
    [3.075, 3.100) = 5 
    [3.100, 3.125) = 2 
    [3.125, 3.150) = 7 
    [3.150, 3.175) = 7 
    [3.175, 3.200) = 10 
    [3.200, 3.225) = 7 
    [3.225, 3.250) = 2 
    [3.250, 3.275) = 5 
    [3.275, 3.300) = 2 
    [3.300, 3.325) = 0 
    [3.325, 3.350) = 2 
    [3.350, 3.375) = 0 
    [3.375, 3.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.003 s/op
     p(50.0000) =      3.185 s/op
     p(90.0000) =      3.271 s/op
     p(95.0000) =      3.311 s/op
     p(99.0000) =      3.330 s/op
     p(99.9000) =      3.330 s/op
     p(99.9900) =      3.330 s/op
     p(99.9990) =      3.330 s/op
     p(99.9999) =      3.330 s/op
    p(100.0000) =      3.330 s/op


# Run complete. Total time: 00:02:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.184 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ee-19.1.1_1564948739015.json
{"wallclock_times": [160.16731133399998], "core_cycle_counts": [[88184155285], [145621503947], [158471895233], [131015356310]], "aperf_counts": [[87759542558], [145591637039], [158450807902], [130999139969]], "mperf_counts": [[87779679464], [145591758780], [158453456900], [131001902276]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 22:01:39: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-04 22:01:40: INFO] Estimated completion (whole session): 2019-08-06 00:04:37 (1 day, 2:02:57 from now)
[2019-08-04 22:01:40: INFO] 168 executions left in scheduler queue
[2019-08-04 22:01:40: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:01:40: INFO] Estimated completion (next execution): 2019-08-04 22:06:45 (0:05:05 from now)
[2019-08-04 22:01:40: INFO] Reboot in preparation for next execution
[2019-08-04 22:05:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 22:05:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 22:05:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 22:05:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 22:05:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 22:05:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 22:11:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.236 s/op
Iteration   2: 7.096 s/op
Iteration   3: 6.823 s/op
Iteration   4: 6.795 s/op
Iteration   5: 6.779 s/op
Iteration   6: 6.580 s/op
Iteration   7: 6.529 s/op
Iteration   8: 6.522 s/op
Iteration   9: 6.502 s/op
Iteration  10: 6.528 s/op
Iteration  11: 6.518 s/op
Iteration  12: 6.493 s/op
Iteration  13: 6.536 s/op
Iteration  14: 6.477 s/op
Iteration  15: 6.477 s/op
Iteration  16: 6.509 s/op
Iteration  17: 6.493 s/op
Iteration  18: 6.503 s/op
Iteration  19: 6.479 s/op
Iteration  20: 6.521 s/op
Iteration  21: 6.480 s/op
Iteration  22: 6.529 s/op
Iteration  23: 6.536 s/op
Iteration  24: 6.537 s/op
Iteration  25: 6.528 s/op
Iteration  26: 6.490 s/op
Iteration  27: 6.506 s/op
Iteration  28: 6.519 s/op
Iteration  29: 6.534 s/op
Iteration  30: 6.482 s/op
Iteration  31: 6.415 s/op
Iteration  32: 6.400 s/op
Iteration  33: 6.487 s/op
Iteration  34: 6.547 s/op
Iteration  35: 6.543 s/op
Iteration  36: 6.512 s/op
Iteration  37: 6.484 s/op
Iteration  38: 6.463 s/op
Iteration  39: 6.504 s/op
Iteration  40: 6.446 s/op
Iteration  41: 6.528 s/op
Iteration  42: 6.500 s/op
Iteration  43: 6.472 s/op
Iteration  44: 6.532 s/op
Iteration  45: 6.515 s/op
Iteration  46: 6.499 s/op
Iteration  47: 6.462 s/op
Iteration  48: 6.486 s/op
Iteration  49: 6.458 s/op
Iteration  50: 6.542 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.567 ?(99.9%) 0.132 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 19 
    [6.500, 6.750) = 26 
    [6.750, 7.000) = 3 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.400 s/op
     p(50.0000) =      6.510 s/op
     p(90.0000) =      6.759 s/op
     p(95.0000) =      6.946 s/op
     p(99.0000) =      8.236 s/op
     p(99.9000) =      8.236 s/op
     p(99.9900) =      8.236 s/op
     p(99.9990) =      8.236 s/op
     p(99.9999) =      8.236 s/op
    p(100.0000) =      8.236 s/op


# Run complete. Total time: 00:05:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.567 ? 0.132   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_11.0.4_1564949151952.json
{"wallclock_times": [330.206075389], "core_cycle_counts": [[340291984069], [282647966047], [257011345207], [352136010672]], "aperf_counts": [[339394076832], [282498446172], [256854444230], [351977123812]], "mperf_counts": [[339396401204], [282498422896], [256856088890], [351977098008]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 22:11:22: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:11:23: INFO] Estimated completion (whole session): 2019-08-06 00:05:06 (1 day, 1:53:43 from now)
[2019-08-04 22:11:23: INFO] 167 executions left in scheduler queue
[2019-08-04 22:11:23: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:11:23: INFO] Estimated completion (next execution): 2019-08-04 22:20:00 (0:08:37 from now)
[2019-08-04 22:11:23: INFO] Reboot in preparation for next execution
[2019-08-04 22:18:03: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 22:18:03: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 22:18:03: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 22:18:03: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 22:18:03: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 22:18:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 22:28:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.946 s/op
Iteration   2: 12.037 s/op
Iteration   3: 12.095 s/op
Iteration   4: 11.998 s/op
Iteration   5: 12.021 s/op
Iteration   6: 12.112 s/op
Iteration   7: 12.218 s/op
Iteration   8: 12.173 s/op
Iteration   9: 12.237 s/op
Iteration  10: 12.374 s/op
Iteration  11: 12.458 s/op
Iteration  12: 12.325 s/op
Iteration  13: 12.301 s/op
Iteration  14: 12.281 s/op
Iteration  15: 12.358 s/op
Iteration  16: 12.340 s/op
Iteration  17: 12.238 s/op
Iteration  18: 12.317 s/op
Iteration  19: 12.325 s/op
Iteration  20: 12.314 s/op
Iteration  21: 12.307 s/op
Iteration  22: 12.264 s/op
Iteration  23: 12.195 s/op
Iteration  24: 12.273 s/op
Iteration  25: 12.230 s/op
Iteration  26: 12.218 s/op
Iteration  27: 12.289 s/op
Iteration  28: 12.338 s/op
Iteration  29: 12.280 s/op
Iteration  30: 12.271 s/op
Iteration  31: 12.290 s/op
Iteration  32: 12.273 s/op
Iteration  33: 12.317 s/op
Iteration  34: 12.288 s/op
Iteration  35: 12.197 s/op
Iteration  36: 12.339 s/op
Iteration  37: 12.312 s/op
Iteration  38: 12.297 s/op
Iteration  39: 12.263 s/op
Iteration  40: 12.253 s/op
Iteration  41: 12.305 s/op
Iteration  42: 12.327 s/op
Iteration  43: 12.330 s/op
Iteration  44: 12.283 s/op
Iteration  45: 12.298 s/op
Iteration  46: 12.293 s/op
Iteration  47: 12.305 s/op
Iteration  48: 12.327 s/op
Iteration  49: 12.307 s/op
Iteration  50: 12.269 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.280 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [11.900, 12.000) = 1 
    [12.000, 12.100) = 3 
    [12.100, 12.200) = 4 
    [12.200, 12.300) = 21 
    [12.300, 12.400) = 19 
    [12.400, 12.500) = 1 
    [12.500, 12.600) = 0 
    [12.600, 12.700) = 0 
    [12.700, 12.800) = 0 
    [12.800, 12.900) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.998 s/op
     p(50.0000) =     12.290 s/op
     p(90.0000) =     12.340 s/op
     p(95.0000) =     12.412 s/op
     p(99.0000) =     12.946 s/op
     p(99.9000) =     12.946 s/op
     p(99.9900) =     12.946 s/op
     p(99.9990) =     12.946 s/op
     p(99.9999) =     12.946 s/op
    p(100.0000) =     12.946 s/op


# Run complete. Total time: 00:10:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.280 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_11.0.4_1564949883485.json
{"wallclock_times": [615.538111459], "core_cycle_counts": [[757004040100], [498170768385], [456492797234], [320043859004]], "aperf_counts": [[755671263265], [497931056167], [456328136414], [319938297123]], "mperf_counts": [[755678779740], [497931145492], [456328158220], [319940043110]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 22:28:19: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:28:19: INFO] Estimated completion (whole session): 2019-08-06 00:09:20 (1 day, 1:41:00 from now)
[2019-08-04 22:28:19: INFO] 166 executions left in scheduler queue
[2019-08-04 22:28:19: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:28:19: INFO] Estimated completion (next execution): 2019-08-04 22:41:04 (0:12:44 from now)
[2019-08-04 22:28:19: INFO] Reboot in preparation for next execution
[2019-08-04 22:33:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 22:33:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 22:33:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 22:33:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 22:33:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 22:33:18: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 22:39:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.857 s/op
Iteration   2: 8.656 s/op
Iteration   3: 8.138 s/op
Iteration   4: 8.004 s/op
Iteration   5: 8.005 s/op
Iteration   6: 7.979 s/op
Iteration   7: 7.944 s/op
Iteration   8: 7.960 s/op
Iteration   9: 7.985 s/op
Iteration  10: 7.940 s/op
Iteration  11: 7.917 s/op
Iteration  12: 7.888 s/op
Iteration  13: 7.913 s/op
Iteration  14: 7.931 s/op
Iteration  15: 7.810 s/op
Iteration  16: 7.904 s/op
Iteration  17: 7.876 s/op
Iteration  18: 7.881 s/op
Iteration  19: 7.795 s/op
Iteration  20: 7.908 s/op
Iteration  21: 7.843 s/op
Iteration  22: 7.778 s/op
Iteration  23: 7.927 s/op
Iteration  24: 7.812 s/op
Iteration  25: 7.915 s/op
Iteration  26: 7.902 s/op
Iteration  27: 7.804 s/op
Iteration  28: 7.910 s/op
Iteration  29: 7.869 s/op
Iteration  30: 7.802 s/op
Iteration  31: 7.848 s/op
Iteration  32: 7.805 s/op
Iteration  33: 8.013 s/op
Iteration  34: 7.920 s/op
Iteration  35: 7.869 s/op
Iteration  36: 7.952 s/op
Iteration  37: 7.901 s/op
Iteration  38: 7.848 s/op
Iteration  39: 7.935 s/op
Iteration  40: 7.852 s/op
Iteration  41: 8.003 s/op
Iteration  42: 7.924 s/op
Iteration  43: 7.841 s/op
Iteration  44: 7.980 s/op
Iteration  45: 7.895 s/op
Iteration  46: 7.832 s/op
Iteration  47: 7.900 s/op
Iteration  48: 7.878 s/op
Iteration  49: 7.953 s/op
Iteration  50: 7.870 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.957 ?(99.9%) 0.150 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 43 
    [ 8.000,  8.250) = 5 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.778 s/op
     p(50.0000) =      7.906 s/op
     p(90.0000) =      8.005 s/op
     p(95.0000) =      8.371 s/op
     p(99.0000) =      9.857 s/op
     p(99.9000) =      9.857 s/op
     p(99.9900) =      9.857 s/op
     p(99.9990) =      9.857 s/op
     p(99.9999) =      9.857 s/op
    p(100.0000) =      9.857 s/op


# Run complete. Total time: 00:06:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.957 ? 0.150   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_11.0.4_1564950797949.json
{"wallclock_times": [399.688089], "core_cycle_counts": [[461631503092], [200351075674], [401697020294], [294944149677]], "aperf_counts": [[460703544859], [200171966535], [401582982228], [294846908959]], "mperf_counts": [[460703979776], [200174600132], [401583039732], [294846896092]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 22:39:57: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:39:58: INFO] Estimated completion (whole session): 2019-08-06 00:11:45 (1 day, 1:31:46 from now)
[2019-08-04 22:39:58: INFO] 165 executions left in scheduler queue
[2019-08-04 22:39:58: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:39:58: INFO] Estimated completion (next execution): 2019-08-04 22:49:10 (0:09:11 from now)
[2019-08-04 22:39:58: INFO] Reboot in preparation for next execution
[2019-08-04 22:44:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 22:44:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 22:44:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 22:44:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 22:44:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 22:44:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-04 22:56:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.565 s/op
Iteration   2: 14.156 s/op
Iteration   3: 15.234 s/op
Iteration   4: 15.199 s/op
Iteration   5: 14.353 s/op
Iteration   6: 14.387 s/op
Iteration   7: 15.152 s/op
Iteration   8: 14.409 s/op
Iteration   9: 14.320 s/op
Iteration  10: 14.319 s/op
Iteration  11: 14.480 s/op
Iteration  12: 14.315 s/op
Iteration  13: 14.381 s/op
Iteration  14: 14.356 s/op
Iteration  15: 14.416 s/op
Iteration  16: 14.338 s/op
Iteration  17: 14.362 s/op
Iteration  18: 14.255 s/op
Iteration  19: 14.316 s/op
Iteration  20: 14.276 s/op
Iteration  21: 14.374 s/op
Iteration  22: 14.371 s/op
Iteration  23: 15.051 s/op
Iteration  24: 14.301 s/op
Iteration  25: 15.238 s/op
Iteration  26: 14.349 s/op
Iteration  27: 14.270 s/op
Iteration  28: 14.222 s/op
Iteration  29: 15.299 s/op
Iteration  30: 15.205 s/op
Iteration  31: 14.321 s/op
Iteration  32: 15.038 s/op
Iteration  33: 15.301 s/op
Iteration  34: 15.252 s/op
Iteration  35: 15.230 s/op
Iteration  36: 14.362 s/op
Iteration  37: 15.166 s/op
Iteration  38: 14.263 s/op
Iteration  39: 14.290 s/op
Iteration  40: 14.356 s/op
Iteration  41: 15.246 s/op
Iteration  42: 14.343 s/op
Iteration  43: 14.353 s/op
Iteration  44: 14.245 s/op
Iteration  45: 14.352 s/op
Iteration  46: 14.272 s/op
Iteration  47: 14.313 s/op
Iteration  48: 15.152 s/op
Iteration  49: 14.322 s/op
Iteration  50: 14.204 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.593 ?(99.9%) 0.210 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 4 
    [14.250, 14.375) = 26 
    [14.375, 14.500) = 5 
    [14.500, 14.625) = 0 
    [14.625, 14.750) = 0 
    [14.750, 14.875) = 0 
    [14.875, 15.000) = 0 
    [15.000, 15.125) = 2 
    [15.125, 15.250) = 9 
    [15.250, 15.375) = 3 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 1 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.156 s/op
     p(50.0000) =     14.356 s/op
     p(90.0000) =     15.245 s/op
     p(95.0000) =     15.300 s/op
     p(99.0000) =     15.565 s/op
     p(99.9000) =     15.565 s/op
     p(99.9900) =     15.565 s/op
     p(99.9990) =     15.565 s/op
     p(99.9999) =     15.565 s/op
    p(100.0000) =     15.565 s/op


# Run complete. Total time: 00:12:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.593 ? 0.210   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_11.0.4_1564951451057.json
{"wallclock_times": [731.307989218], "core_cycle_counts": [[827567214822], [522630341709], [410547321050], [638683759501]], "aperf_counts": [[825912239552], [522479493987], [410295422029], [638519012154]], "mperf_counts": [[825918761630], [522480275818], [410295324528], [638519058962]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-04 22:56:22: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-04 22:56:23: INFO] Estimated completion (whole session): 2019-08-06 00:13:09 (1 day, 1:16:45 from now)
[2019-08-04 22:56:23: INFO] 164 executions left in scheduler queue
[2019-08-04 22:56:23: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-08-04 22:56:23: INFO] Estimated completion (next execution): 2019-08-04 23:11:14 (0:14:51 from now)
[2019-08-04 22:56:23: INFO] Reboot in preparation for next execution
[2019-08-04 23:03:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.260 s/op
Iteration   2: 2.609 s/op
Iteration   3: 2.493 s/op
Iteration   4: 2.991 s/op
Iteration   5: 2.982 s/op
Iteration   6: 2.993 s/op
Iteration   7: 3.059 s/op
Iteration   8: 2.990 s/op
Iteration   9: 2.985 s/op
Iteration  10: 2.987 s/op
Iteration  11: 2.985 s/op
Iteration  12: 2.986 s/op
Iteration  13: 2.983 s/op
Iteration  14: 2.983 s/op
Iteration  15: 2.987 s/op
Iteration  16: 2.987 s/op
Iteration  17: 2.986 s/op
Iteration  18: 2.986 s/op
Iteration  19: 2.976 s/op
Iteration  20: 2.986 s/op
Iteration  21: 2.989 s/op
Iteration  22: 2.984 s/op
Iteration  23: 2.984 s/op
Iteration  24: 2.979 s/op
Iteration  25: 2.989 s/op
Iteration  26: 3.008 s/op
Iteration  27: 2.997 s/op
Iteration  28: 2.984 s/op
Iteration  29: 2.984 s/op
Iteration  30: 2.986 s/op
Iteration  31: 2.995 s/op
Iteration  32: 2.990 s/op
Iteration  33: 2.985 s/op
Iteration  34: 3.011 s/op
Iteration  35: 2.984 s/op
Iteration  36: 2.984 s/op
Iteration  37: 2.983 s/op
Iteration  38: 3.004 s/op
Iteration  39: 2.987 s/op
Iteration  40: 2.995 s/op
Iteration  41: 2.991 s/op
Iteration  42: 2.992 s/op
Iteration  43: 2.984 s/op
Iteration  44: 2.955 s/op
Iteration  45: 2.985 s/op
Iteration  46: 2.988 s/op
Iteration  47: 2.982 s/op
Iteration  48: 2.981 s/op
Iteration  49: 2.997 s/op
Iteration  50: 2.979 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      2.977 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 43 
    [3.000, 3.050) = 3 
    [3.050, 3.100) = 1 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.493 s/op
     p(50.0000) =      2.986 s/op
     p(90.0000) =      3.003 s/op
     p(95.0000) =      3.032 s/op
     p(99.0000) =      3.260 s/op
     p(99.9000) =      3.260 s/op
     p(99.9900) =      3.260 s/op
     p(99.9990) =      3.260 s/op
     p(99.9999) =      3.260 s/op
    p(100.0000) =      3.260 s/op


# Run complete. Total time: 00:02:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.977 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_graalvm-ee-19.1.1_1564952449652.json
{"wallclock_times": [149.73748448299997], "core_cycle_counts": [[102365132898], [102954587309], [145452944037], [139337097259]], "aperf_counts": [[101976812011], [102907322237], [145422848009], [139309410941]], "mperf_counts": [[102019293130], [102909482840], [145424069192], [139322426176]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 23:03:19: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-08-04 23:03:20: INFO] Estimated completion (whole session): 2019-08-06 00:15:18 (1 day, 1:11:58 from now)
[2019-08-04 23:03:20: INFO] 163 executions left in scheduler queue
[2019-08-04 23:03:20: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-08-04 23:03:20: INFO] Estimated completion (next execution): 2019-08-04 23:08:13 (0:04:53 from now)
[2019-08-04 23:03:20: INFO] Reboot in preparation for next execution
[2019-08-04 23:07:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 23:07:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 23:07:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 23:07:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 23:07:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 23:18:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.482 s/op
Iteration   2: 12.818 s/op
Iteration   3: 13.307 s/op
Iteration   4: 12.780 s/op
Iteration   5: 12.681 s/op
Iteration   6: 12.852 s/op
Iteration   7: 12.795 s/op
Iteration   8: 12.830 s/op
Iteration   9: 12.663 s/op
Iteration  10: 12.659 s/op
Iteration  11: 12.677 s/op
Iteration  12: 12.851 s/op
Iteration  13: 12.861 s/op
Iteration  14: 12.751 s/op
Iteration  15: 12.786 s/op
Iteration  16: 12.573 s/op
Iteration  17: 13.032 s/op
Iteration  18: 12.883 s/op
Iteration  19: 13.021 s/op
Iteration  20: 12.941 s/op
Iteration  21: 12.989 s/op
Iteration  22: 12.891 s/op
Iteration  23: 12.899 s/op
Iteration  24: 13.021 s/op
Iteration  25: 12.891 s/op
Iteration  26: 13.105 s/op
Iteration  27: 12.935 s/op
Iteration  28: 12.900 s/op
Iteration  29: 12.933 s/op
Iteration  30: 12.992 s/op
Iteration  31: 13.006 s/op
Iteration  32: 12.931 s/op
Iteration  33: 13.089 s/op
Iteration  34: 12.851 s/op
Iteration  35: 12.836 s/op
Iteration  36: 13.049 s/op
Iteration  37: 13.045 s/op
Iteration  38: 12.907 s/op
Iteration  39: 12.915 s/op
Iteration  40: 12.965 s/op
Iteration  41: 12.894 s/op
Iteration  42: 13.036 s/op
Iteration  43: 12.879 s/op
Iteration  44: 13.057 s/op
Iteration  45: 12.953 s/op
Iteration  46: 12.865 s/op
Iteration  47: 12.909 s/op
Iteration  48: 13.027 s/op
Iteration  49: 13.020 s/op
Iteration  50: 12.928 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.919 ?(99.9%) 0.077 s/op

  Histogram, s/op:
    [12.500, 12.600) = 1 
    [12.600, 12.700) = 4 
    [12.700, 12.800) = 4 
    [12.800, 12.900) = 15 
    [12.900, 13.000) = 12 
    [13.000, 13.100) = 11 
    [13.100, 13.200) = 1 
    [13.200, 13.300) = 0 
    [13.300, 13.400) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.573 s/op
     p(50.0000) =     12.908 s/op
     p(90.0000) =     13.057 s/op
     p(95.0000) =     13.196 s/op
     p(99.0000) =     13.482 s/op
     p(99.9000) =     13.482 s/op
     p(99.9900) =     13.482 s/op
     p(99.9990) =     13.482 s/op
     p(99.9999) =     13.482 s/op
    p(100.0000) =     13.482 s/op


# Run complete. Total time: 00:10:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.919 ? 0.077   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_12.0.2_1564952872745.json
{"wallclock_times": [646.9984026750001], "core_cycle_counts": [[532553283117], [399182426549], [869727631917], [489509676693]], "aperf_counts": [[530666514171], [398955752360], [869385563175], [489331208485]], "mperf_counts": [[539643937890], [405923490982], [889416931992], [497810577194]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-04 23:18:39: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-08-04 23:18:40: INFO] Estimated completion (whole session): 2019-08-06 00:16:35 (1 day, 0:57:55 from now)
[2019-08-04 23:18:40: INFO] 162 executions left in scheduler queue
[2019-08-04 23:18:40: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-04 23:18:40: INFO] Estimated completion (next execution): 2019-08-04 23:32:21 (0:13:40 from now)
[2019-08-04 23:18:40: INFO] Reboot in preparation for next execution
[2019-08-04 23:24:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.320 s/op
Iteration   2: 0.848 s/op
Iteration   3: 0.836 s/op
Iteration   4: 0.918 s/op
Iteration   5: 0.828 s/op
Iteration   6: 0.831 s/op
Iteration   7: 0.826 s/op
Iteration   8: 0.832 s/op
Iteration   9: 0.833 s/op
Iteration  10: 0.829 s/op
Iteration  11: 0.825 s/op
Iteration  12: 0.834 s/op
Iteration  13: 0.828 s/op
Iteration  14: 0.830 s/op
Iteration  15: 0.830 s/op
Iteration  16: 0.831 s/op
Iteration  17: 0.831 s/op
Iteration  18: 0.835 s/op
Iteration  19: 0.828 s/op
Iteration  20: 0.831 s/op
Iteration  21: 0.831 s/op
Iteration  22: 0.826 s/op
Iteration  23: 0.834 s/op
Iteration  24: 0.833 s/op
Iteration  25: 0.829 s/op
Iteration  26: 0.828 s/op
Iteration  27: 0.825 s/op
Iteration  28: 0.828 s/op
Iteration  29: 0.827 s/op
Iteration  30: 0.826 s/op
Iteration  31: 0.825 s/op
Iteration  32: 0.829 s/op
Iteration  33: 0.824 s/op
Iteration  34: 0.823 s/op
Iteration  35: 0.829 s/op
Iteration  36: 0.825 s/op
Iteration  37: 0.829 s/op
Iteration  38: 0.830 s/op
Iteration  39: 0.827 s/op
Iteration  40: 0.829 s/op
Iteration  41: 0.826 s/op
Iteration  42: 0.830 s/op
Iteration  43: 0.829 s/op
Iteration  44: 0.826 s/op
Iteration  45: 0.828 s/op
Iteration  46: 0.827 s/op
Iteration  47: 0.824 s/op
Iteration  48: 0.827 s/op
Iteration  49: 0.833 s/op
Iteration  50: 0.829 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      0.841 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [0.800, 0.850) = 48 
    [0.850, 0.900) = 0 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.823 s/op
     p(50.0000) =      0.829 s/op
     p(90.0000) =      0.835 s/op
     p(95.0000) =      0.879 s/op
     p(99.0000) =      1.320 s/op
     p(99.9000) =      1.320 s/op
     p(99.9900) =      1.320 s/op
     p(99.9990) =      1.320 s/op
     p(99.9999) =      1.320 s/op
    p(100.0000) =      1.320 s/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.841 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ee-19.1.1_1564953852668.json
{"wallclock_times": [42.968452895999974], "core_cycle_counts": [[47810690849], [33207112099], [39483083599], [28199385051]], "aperf_counts": [[47668692647], [33174415051], [39463007245], [28178934303]], "mperf_counts": [[47701044318], [33175644944], [39463300796], [28184022276]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 23:24:55: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-04 23:24:56: INFO] Estimated completion (whole session): 2019-08-06 00:19:38 (1 day, 0:54:41 from now)
[2019-08-04 23:24:56: INFO] 161 executions left in scheduler queue
[2019-08-04 23:24:56: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-04 23:24:56: INFO] Estimated completion (next execution): 2019-08-04 23:28:09 (0:03:13 from now)
[2019-08-04 23:24:56: INFO] Reboot in preparation for next execution
[2019-08-04 23:30:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.778 s/op
Iteration   2: 1.417 s/op
Iteration   3: 1.474 s/op
Iteration   4: 1.361 s/op
Iteration   5: 1.363 s/op
Iteration   6: 1.362 s/op
Iteration   7: 1.363 s/op
Iteration   8: 1.364 s/op
Iteration   9: 1.363 s/op
Iteration  10: 1.361 s/op
Iteration  11: 1.360 s/op
Iteration  12: 1.361 s/op
Iteration  13: 1.363 s/op
Iteration  14: 1.362 s/op
Iteration  15: 1.362 s/op
Iteration  16: 1.362 s/op
Iteration  17: 1.362 s/op
Iteration  18: 1.361 s/op
Iteration  19: 1.362 s/op
Iteration  20: 1.361 s/op
Iteration  21: 1.361 s/op
Iteration  22: 1.362 s/op
Iteration  23: 1.360 s/op
Iteration  24: 1.361 s/op
Iteration  25: 1.362 s/op
Iteration  26: 1.360 s/op
Iteration  27: 1.361 s/op
Iteration  28: 1.362 s/op
Iteration  29: 1.361 s/op
Iteration  30: 1.361 s/op
Iteration  31: 1.363 s/op
Iteration  32: 1.363 s/op
Iteration  33: 1.362 s/op
Iteration  34: 1.362 s/op
Iteration  35: 1.362 s/op
Iteration  36: 1.360 s/op
Iteration  37: 1.362 s/op
Iteration  38: 1.362 s/op
Iteration  39: 1.359 s/op
Iteration  40: 1.359 s/op
Iteration  41: 1.359 s/op
Iteration  42: 1.359 s/op
Iteration  43: 1.359 s/op
Iteration  44: 1.361 s/op
Iteration  45: 1.360 s/op
Iteration  46: 1.361 s/op
Iteration  47: 1.364 s/op
Iteration  48: 1.363 s/op
Iteration  49: 1.364 s/op
Iteration  50: 1.360 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.373 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 47 
    [1.400, 1.450) = 1 
    [1.450, 1.500) = 1 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.359 s/op
     p(50.0000) =      1.362 s/op
     p(90.0000) =      1.364 s/op
     p(95.0000) =      1.443 s/op
     p(99.0000) =      1.778 s/op
     p(99.9000) =      1.778 s/op
     p(99.9900) =      1.778 s/op
     p(99.9990) =      1.778 s/op
     p(99.9999) =      1.778 s/op
    p(100.0000) =      1.778 s/op


# Run complete. Total time: 00:01:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.373 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ee-19.1.1_1564954172676.json
{"wallclock_times": [69.53834487900002], "core_cycle_counts": [[107013203859], [37781791586], [25404102948], [58652776309]], "aperf_counts": [[106895403417], [37754295649], [25382452312], [58638989314]], "mperf_counts": [[106925392042], [37758256932], [25384023314], [58640054224]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 23:30:42: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-04 23:30:43: INFO] Estimated completion (whole session): 2019-08-06 00:21:43 (1 day, 0:51:00 from now)
[2019-08-04 23:30:43: INFO] 160 executions left in scheduler queue
[2019-08-04 23:30:43: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-08-04 23:30:43: INFO] Estimated completion (next execution): 2019-08-04 23:34:23 (0:03:40 from now)
[2019-08-04 23:30:43: INFO] Reboot in preparation for next execution
[2019-08-04 23:37:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.890 s/op
Iteration   2: 2.318 s/op
Iteration   3: 2.901 s/op
Iteration   4: 2.642 s/op
Iteration   5: 2.636 s/op
Iteration   6: 2.621 s/op
Iteration   7: 2.642 s/op
Iteration   8: 2.644 s/op
Iteration   9: 2.642 s/op
Iteration  10: 2.641 s/op
Iteration  11: 2.643 s/op
Iteration  12: 2.644 s/op
Iteration  13: 2.648 s/op
Iteration  14: 2.640 s/op
Iteration  15: 2.645 s/op
Iteration  16: 2.623 s/op
Iteration  17: 2.639 s/op
Iteration  18: 2.631 s/op
Iteration  19: 2.632 s/op
Iteration  20: 2.638 s/op
Iteration  21: 2.644 s/op
Iteration  22: 2.647 s/op
Iteration  23: 2.646 s/op
Iteration  24: 2.640 s/op
Iteration  25: 2.638 s/op
Iteration  26: 2.595 s/op
Iteration  27: 2.642 s/op
Iteration  28: 2.645 s/op
Iteration  29: 2.642 s/op
Iteration  30: 2.647 s/op
Iteration  31: 2.637 s/op
Iteration  32: 2.644 s/op
Iteration  33: 2.641 s/op
Iteration  34: 2.620 s/op
Iteration  35: 2.639 s/op
Iteration  36: 2.628 s/op
Iteration  37: 2.613 s/op
Iteration  38: 2.624 s/op
Iteration  39: 2.632 s/op
Iteration  40: 2.615 s/op
Iteration  41: 2.632 s/op
Iteration  42: 2.636 s/op
Iteration  43: 2.628 s/op
Iteration  44: 2.607 s/op
Iteration  45: 2.642 s/op
Iteration  46: 2.641 s/op
Iteration  47: 2.609 s/op
Iteration  48: 2.610 s/op
Iteration  49: 2.644 s/op
Iteration  50: 2.636 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      2.638 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 46 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 1 
    [2.900, 2.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.318 s/op
     p(50.0000) =      2.640 s/op
     p(90.0000) =      2.647 s/op
     p(95.0000) =      2.757 s/op
     p(99.0000) =      2.901 s/op
     p(99.9000) =      2.901 s/op
     p(99.9900) =      2.901 s/op
     p(99.9990) =      2.901 s/op
     p(99.9999) =      2.901 s/op
    p(100.0000) =      2.901 s/op


# Run complete. Total time: 00:02:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.638 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_graalvm-ee-19.1.1_1564954496584.json
{"wallclock_times": [132.81036308299997], "core_cycle_counts": [[166406385167], [78256596246], [79833175130], [112199604888]], "aperf_counts": [[166137308903], [78200199663], [79804297932], [112175146925]], "mperf_counts": [[166162050696], [78204338050], [79805295048], [112182895318]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 23:37:09: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-08-04 23:37:10: INFO] Estimated completion (whole session): 2019-08-06 00:23:09 (1 day, 0:45:59 from now)
[2019-08-04 23:37:10: INFO] 159 executions left in scheduler queue
[2019-08-04 23:37:10: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-08-04 23:37:10: INFO] Estimated completion (next execution): 2019-08-04 23:42:02 (0:04:52 from now)
[2019-08-04 23:37:10: INFO] Reboot in preparation for next execution
[2019-08-04 23:51:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.034 s/op
Iteration   2: 11.787 s/op
Iteration   3: 11.873 s/op
Iteration   4: 11.570 s/op
Iteration   5: 11.569 s/op
Iteration   6: 11.681 s/op
Iteration   7: 11.820 s/op
Iteration   8: 11.693 s/op
Iteration   9: 11.700 s/op
Iteration  10: 11.844 s/op
Iteration  11: 11.672 s/op
Iteration  12: 12.304 s/op
Iteration  13: 11.982 s/op
Iteration  14: 11.568 s/op
Iteration  15: 11.666 s/op
Iteration  16: 11.769 s/op
Iteration  17: 11.842 s/op
Iteration  18: 11.623 s/op
Iteration  19: 11.670 s/op
Iteration  20: 11.747 s/op
Iteration  21: 11.800 s/op
Iteration  22: 11.656 s/op
Iteration  23: 12.202 s/op
Iteration  24: 11.776 s/op
Iteration  25: 11.578 s/op
Iteration  26: 11.655 s/op
Iteration  27: 11.708 s/op
Iteration  28: 11.778 s/op
Iteration  29: 11.621 s/op
Iteration  30: 11.680 s/op
Iteration  31: 11.710 s/op
Iteration  32: 11.577 s/op
Iteration  33: 11.687 s/op
Iteration  34: 12.225 s/op
Iteration  35: 11.726 s/op
Iteration  36: 11.612 s/op
Iteration  37: 11.650 s/op
Iteration  38: 11.727 s/op
Iteration  39: 11.800 s/op
Iteration  40: 11.637 s/op
Iteration  41: 11.710 s/op
Iteration  42: 11.973 s/op
Iteration  43: 11.598 s/op
Iteration  44: 11.701 s/op
Iteration  45: 12.219 s/op
Iteration  46: 11.760 s/op
Iteration  47: 11.579 s/op
Iteration  48: 11.643 s/op
Iteration  49: 11.736 s/op
Iteration  50: 11.834 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.759 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [11.500, 11.550) = 0 
    [11.550, 11.600) = 7 
    [11.600, 11.650) = 5 
    [11.650, 11.700) = 11 
    [11.700, 11.750) = 8 
    [11.750, 11.800) = 7 
    [11.800, 11.850) = 4 
    [11.850, 11.900) = 1 
    [11.900, 11.950) = 0 
    [11.950, 12.000) = 2 
    [12.000, 12.050) = 1 
    [12.050, 12.100) = 0 
    [12.100, 12.150) = 0 
    [12.150, 12.200) = 0 
    [12.200, 12.250) = 3 
    [12.250, 12.300) = 0 
    [12.300, 12.350) = 1 
    [12.350, 12.400) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.568 s/op
     p(50.0000) =     11.709 s/op
     p(90.0000) =     12.029 s/op
     p(95.0000) =     12.222 s/op
     p(99.0000) =     12.304 s/op
     p(99.9000) =     12.304 s/op
     p(99.9900) =     12.304 s/op
     p(99.9990) =     12.304 s/op
     p(99.9999) =     12.304 s/op
    p(100.0000) =     12.304 s/op


# Run complete. Total time: 00:09:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.759 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot-8u222-b10_1564954892654.json
{"wallclock_times": [589.380043843], "core_cycle_counts": [[399219378087], [540043146655], [604584835733], [644301737361]], "aperf_counts": [[397460430790], [539890993066], [604495860523], [644226025584]], "mperf_counts": [[397470914260], [539891085700], [604495934250], [644228151618]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-04 23:51:22: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-08-04 23:51:23: INFO] Estimated completion (whole session): 2019-08-06 00:25:00 (1 day, 0:33:37 from now)
[2019-08-04 23:51:23: INFO] 158 executions left in scheduler queue
[2019-08-04 23:51:23: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-04 23:51:23: INFO] Estimated completion (next execution): 2019-08-05 00:03:43 (0:12:20 from now)
[2019-08-04 23:51:23: INFO] Reboot in preparation for next execution
[2019-08-04 23:56:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-04 23:56:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-04 23:56:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-04 23:56:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-04 23:56:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-04 23:56:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 00:04:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.855 s/op
Iteration   2: 9.674 s/op
Iteration   3: 9.728 s/op
Iteration   4: 9.565 s/op
Iteration   5: 9.598 s/op
Iteration   6: 9.579 s/op
Iteration   7: 9.628 s/op
Iteration   8: 9.574 s/op
Iteration   9: 9.620 s/op
Iteration  10: 9.587 s/op
Iteration  11: 9.597 s/op
Iteration  12: 9.647 s/op
Iteration  13: 9.637 s/op
Iteration  14: 9.643 s/op
Iteration  15: 9.596 s/op
Iteration  16: 9.613 s/op
Iteration  17: 9.542 s/op
Iteration  18: 9.568 s/op
Iteration  19: 9.583 s/op
Iteration  20: 9.559 s/op
Iteration  21: 9.586 s/op
Iteration  22: 9.640 s/op
Iteration  23: 9.625 s/op
Iteration  24: 9.571 s/op
Iteration  25: 9.596 s/op
Iteration  26: 9.633 s/op
Iteration  27: 9.547 s/op
Iteration  28: 9.588 s/op
Iteration  29: 9.574 s/op
Iteration  30: 9.576 s/op
Iteration  31: 9.590 s/op
Iteration  32: 9.648 s/op
Iteration  33: 9.523 s/op
Iteration  34: 9.627 s/op
Iteration  35: 9.614 s/op
Iteration  36: 9.568 s/op
Iteration  37: 9.593 s/op
Iteration  38: 9.572 s/op
Iteration  39: 9.577 s/op
Iteration  40: 9.605 s/op
Iteration  41: 9.568 s/op
Iteration  42: 9.533 s/op
Iteration  43: 9.593 s/op
Iteration  44: 9.586 s/op
Iteration  45: 9.563 s/op
Iteration  46: 9.569 s/op
Iteration  47: 9.562 s/op
Iteration  48: 9.643 s/op
Iteration  49: 9.517 s/op
Iteration  50: 9.586 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.639 ?(99.9%) 0.159 s/op

  Histogram, s/op:
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 49 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.517 s/op
     p(50.0000) =      9.587 s/op
     p(90.0000) =      9.647 s/op
     p(95.0000) =      9.698 s/op
     p(99.0000) =     11.855 s/op
     p(99.9000) =     11.855 s/op
     p(99.9900) =     11.855 s/op
     p(99.9990) =     11.855 s/op
     p(99.9999) =     11.855 s/op
    p(100.0000) =     11.855 s/op


# Run complete. Total time: 00:08:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.639 ? 0.159   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_11.0.4_1564955765980.json
{"wallclock_times": [483.624627292], "core_cycle_counts": [[443072072407], [270021934516], [429040612197], [474346184537]], "aperf_counts": [[441850034916], [269869138494], [428959531981], [474193176695]], "mperf_counts": [[441851931888], [269869510214], [428959526282], [474193171266]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 00:04:09: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-05 00:04:10: INFO] Estimated completion (whole session): 2019-08-06 00:28:54 (1 day, 0:24:44 from now)
[2019-08-05 00:04:10: INFO] 157 executions left in scheduler queue
[2019-08-05 00:04:10: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-05 00:04:10: INFO] Estimated completion (next execution): 2019-08-05 00:13:54 (0:09:43 from now)
[2019-08-05 00:04:10: INFO] Reboot in preparation for next execution
[2019-08-05 00:08:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 00:08:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 00:08:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 00:08:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 00:08:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 00:08:22: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 00:13:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.811 s/op
Iteration   2: 6.549 s/op
Iteration   3: 6.185 s/op
Iteration   4: 6.109 s/op
Iteration   5: 6.377 s/op
Iteration   6: 6.206 s/op
Iteration   7: 6.058 s/op
Iteration   8: 6.042 s/op
Iteration   9: 6.390 s/op
Iteration  10: 6.090 s/op
Iteration  11: 6.175 s/op
Iteration  12: 6.308 s/op
Iteration  13: 6.329 s/op
Iteration  14: 6.012 s/op
Iteration  15: 6.318 s/op
Iteration  16: 6.217 s/op
Iteration  17: 6.032 s/op
Iteration  18: 6.173 s/op
Iteration  19: 6.336 s/op
Iteration  20: 6.064 s/op
Iteration  21: 6.081 s/op
Iteration  22: 6.045 s/op
Iteration  23: 6.230 s/op
Iteration  24: 6.235 s/op
Iteration  25: 5.894 s/op
Iteration  26: 6.036 s/op
Iteration  27: 5.987 s/op
Iteration  28: 6.274 s/op
Iteration  29: 5.927 s/op
Iteration  30: 5.994 s/op
Iteration  31: 6.098 s/op
Iteration  32: 6.041 s/op
Iteration  33: 6.310 s/op
Iteration  34: 5.979 s/op
Iteration  35: 6.007 s/op
Iteration  36: 5.997 s/op
Iteration  37: 5.949 s/op
Iteration  38: 6.152 s/op
Iteration  39: 6.048 s/op
Iteration  40: 6.050 s/op
Iteration  41: 6.050 s/op
Iteration  42: 6.033 s/op
Iteration  43: 6.016 s/op
Iteration  44: 6.315 s/op
Iteration  45: 6.033 s/op
Iteration  46: 6.087 s/op
Iteration  47: 6.192 s/op
Iteration  48: 6.022 s/op
Iteration  49: 5.986 s/op
Iteration  50: 6.296 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.163 ?(99.9%) 0.137 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 8 
    [6.000, 6.250) = 30 
    [6.250, 6.500) = 10 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.894 s/op
     p(50.0000) =      6.084 s/op
     p(90.0000) =      6.335 s/op
     p(95.0000) =      6.462 s/op
     p(99.0000) =      7.811 s/op
     p(99.9000) =      7.811 s/op
     p(99.9900) =      7.811 s/op
     p(99.9990) =      7.811 s/op
     p(99.9999) =      7.811 s/op
    p(100.0000) =      7.811 s/op


# Run complete. Total time: 00:05:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.163 ? 0.137   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_11.0.4_1564956501861.json
{"wallclock_times": [310.055171982], "core_cycle_counts": [[293088965857], [278803738466], [312229333975], [240913680764]], "aperf_counts": [[292291809781], [278665542982], [312124447542], [240822471154]], "mperf_counts": [[292295886402], [278667340260], [312124421900], [240822677812]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 00:13:31: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-05 00:13:32: INFO] Estimated completion (whole session): 2019-08-06 00:30:41 (1 day, 0:17:09 from now)
[2019-08-05 00:13:32: INFO] 156 executions left in scheduler queue
[2019-08-05 00:13:32: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-05 00:13:32: INFO] Estimated completion (next execution): 2019-08-05 00:21:10 (0:07:37 from now)
[2019-08-05 00:13:32: INFO] Reboot in preparation for next execution
[2019-08-05 00:17:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 00:17:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 00:17:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 00:17:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 00:17:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 00:17:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 00:22:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.336 s/op
Iteration   2: 6.211 s/op
Iteration   3: 5.858 s/op
Iteration   4: 5.966 s/op
Iteration   5: 5.845 s/op
Iteration   6: 5.850 s/op
Iteration   7: 5.759 s/op
Iteration   8: 5.818 s/op
Iteration   9: 5.812 s/op
Iteration  10: 5.764 s/op
Iteration  11: 5.793 s/op
Iteration  12: 5.746 s/op
Iteration  13: 5.735 s/op
Iteration  14: 5.686 s/op
Iteration  15: 5.767 s/op
Iteration  16: 5.731 s/op
Iteration  17: 5.720 s/op
Iteration  18: 5.741 s/op
Iteration  19: 5.721 s/op
Iteration  20: 5.730 s/op
Iteration  21: 5.691 s/op
Iteration  22: 5.676 s/op
Iteration  23: 5.794 s/op
Iteration  24: 5.796 s/op
Iteration  25: 5.803 s/op
Iteration  26: 5.793 s/op
Iteration  27: 5.752 s/op
Iteration  28: 5.737 s/op
Iteration  29: 5.731 s/op
Iteration  30: 5.740 s/op
Iteration  31: 5.781 s/op
Iteration  32: 5.802 s/op
Iteration  33: 5.761 s/op
Iteration  34: 5.703 s/op
Iteration  35: 5.688 s/op
Iteration  36: 5.672 s/op
Iteration  37: 5.759 s/op
Iteration  38: 5.821 s/op
Iteration  39: 5.819 s/op
Iteration  40: 5.786 s/op
Iteration  41: 5.710 s/op
Iteration  42: 5.763 s/op
Iteration  43: 5.715 s/op
Iteration  44: 5.736 s/op
Iteration  45: 5.823 s/op
Iteration  46: 5.763 s/op
Iteration  47: 5.753 s/op
Iteration  48: 5.771 s/op
Iteration  49: 5.830 s/op
Iteration  50: 5.767 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.807 ?(99.9%) 0.117 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 19 
    [5.750, 6.000) = 29 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.672 s/op
     p(50.0000) =      5.763 s/op
     p(90.0000) =      5.849 s/op
     p(95.0000) =      6.076 s/op
     p(99.0000) =      7.336 s/op
     p(99.9000) =      7.336 s/op
     p(99.9900) =      7.336 s/op
     p(99.9990) =      7.336 s/op
     p(99.9999) =      7.336 s/op
    p(100.0000) =      7.336 s/op


# Run complete. Total time: 00:04:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.807 ? 0.117   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_11.0.4_1564957074846.json
{"wallclock_times": [292.286928697], "core_cycle_counts": [[229587522396], [288540866449], [347236132462], [245728411140]], "aperf_counts": [[228663786805], [288411642397], [347132066843], [245647629464]], "mperf_counts": [[228671033000], [288411663306], [347133029864], [245648613918]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 00:22:47: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-05 00:22:48: INFO] Estimated completion (whole session): 2019-08-06 00:32:58 (1 day, 0:10:10 from now)
[2019-08-05 00:22:48: INFO] 155 executions left in scheduler queue
[2019-08-05 00:22:48: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-05 00:22:48: INFO] Estimated completion (next execution): 2019-08-05 00:29:58 (0:07:10 from now)
[2019-08-05 00:22:48: INFO] Reboot in preparation for next execution
[2019-08-05 00:28:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 00:28:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 00:28:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 00:28:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 00:28:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 00:28:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 00:37:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.773 s/op
Iteration   2: 10.802 s/op
Iteration   3: 10.875 s/op
Iteration   4: 10.613 s/op
Iteration   5: 11.367 s/op
Iteration   6: 10.540 s/op
Iteration   7: 11.298 s/op
Iteration   8: 10.633 s/op
Iteration   9: 11.187 s/op
Iteration  10: 10.607 s/op
Iteration  11: 10.542 s/op
Iteration  12: 11.296 s/op
Iteration  13: 11.263 s/op
Iteration  14: 11.263 s/op
Iteration  15: 10.509 s/op
Iteration  16: 10.521 s/op
Iteration  17: 10.582 s/op
Iteration  18: 10.538 s/op
Iteration  19: 11.215 s/op
Iteration  20: 10.577 s/op
Iteration  21: 10.514 s/op
Iteration  22: 10.555 s/op
Iteration  23: 10.496 s/op
Iteration  24: 10.595 s/op
Iteration  25: 10.583 s/op
Iteration  26: 10.521 s/op
Iteration  27: 10.583 s/op
Iteration  28: 10.661 s/op
Iteration  29: 10.559 s/op
Iteration  30: 10.523 s/op
Iteration  31: 11.303 s/op
Iteration  32: 10.527 s/op
Iteration  33: 10.546 s/op
Iteration  34: 10.526 s/op
Iteration  35: 10.538 s/op
Iteration  36: 11.302 s/op
Iteration  37: 11.182 s/op
Iteration  38: 10.544 s/op
Iteration  39: 10.554 s/op
Iteration  40: 10.565 s/op
Iteration  41: 10.609 s/op
Iteration  42: 10.531 s/op
Iteration  43: 10.535 s/op
Iteration  44: 11.314 s/op
Iteration  45: 10.616 s/op
Iteration  46: 10.723 s/op
Iteration  47: 10.540 s/op
Iteration  48: 11.362 s/op
Iteration  49: 11.240 s/op
Iteration  50: 10.573 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.804 ?(99.9%) 0.210 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 1 
    [10.500, 10.750) = 33 
    [10.750, 11.000) = 2 
    [11.000, 11.250) = 4 
    [11.250, 11.500) = 9 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.496 s/op
     p(50.0000) =     10.583 s/op
     p(90.0000) =     11.303 s/op
     p(95.0000) =     11.364 s/op
     p(99.0000) =     12.773 s/op
     p(99.9000) =     12.773 s/op
     p(99.9900) =     12.773 s/op
     p(99.9990) =     12.773 s/op
     p(99.9999) =     12.773 s/op
    p(100.0000) =     12.773 s/op


# Run complete. Total time: 00:09:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.804 ? 0.210   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_11.0.4_1564957701003.json
{"wallclock_times": [541.943098961], "core_cycle_counts": [[543731936347], [396754176898], [350405149838], [510886945057]], "aperf_counts": [[542421239403], [396609054311], [350238224544], [510719982572]], "mperf_counts": [[542434412986], [396613106286], [350238349312], [510721954914]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 00:37:22: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-05 00:37:23: INFO] Estimated completion (whole session): 2019-08-06 00:33:52 (23:56:29 from now)
[2019-08-05 00:37:23: INFO] 154 executions left in scheduler queue
[2019-08-05 00:37:23: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 00:37:23: INFO] Estimated completion (next execution): 2019-08-05 00:50:01 (0:12:37 from now)
[2019-08-05 00:37:23: INFO] Reboot in preparation for next execution
[2019-08-05 00:42:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 00:47:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.321 s/op
Iteration   2: 6.680 s/op
Iteration   3: 7.249 s/op
Iteration   4: 7.024 s/op
Iteration   5: 6.207 s/op
Iteration   6: 5.820 s/op
Iteration   7: 5.796 s/op
Iteration   8: 5.804 s/op
Iteration   9: 5.756 s/op
Iteration  10: 5.835 s/op
Iteration  11: 5.826 s/op
Iteration  12: 5.842 s/op
Iteration  13: 5.774 s/op
Iteration  14: 5.840 s/op
Iteration  15: 5.816 s/op
Iteration  16: 5.865 s/op
Iteration  17: 5.823 s/op
Iteration  18: 5.838 s/op
Iteration  19: 5.880 s/op
Iteration  20: 5.728 s/op
Iteration  21: 5.755 s/op
Iteration  22: 5.784 s/op
Iteration  23: 5.810 s/op
Iteration  24: 5.750 s/op
Iteration  25: 5.780 s/op
Iteration  26: 5.787 s/op
Iteration  27: 5.742 s/op
Iteration  28: 5.806 s/op
Iteration  29: 5.768 s/op
Iteration  30: 5.768 s/op
Iteration  31: 5.749 s/op
Iteration  32: 5.770 s/op
Iteration  33: 5.857 s/op
Iteration  34: 5.778 s/op
Iteration  35: 5.846 s/op
Iteration  36: 5.746 s/op
Iteration  37: 5.775 s/op
Iteration  38: 5.699 s/op
Iteration  39: 5.806 s/op
Iteration  40: 5.759 s/op
Iteration  41: 5.801 s/op
Iteration  42: 5.761 s/op
Iteration  43: 5.745 s/op
Iteration  44: 5.801 s/op
Iteration  45: 5.812 s/op
Iteration  46: 5.733 s/op
Iteration  47: 5.797 s/op
Iteration  48: 5.753 s/op
Iteration  49: 5.801 s/op
Iteration  50: 5.756 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.900 ?(99.9%) 0.179 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 7 
    [5.750, 6.000) = 38 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 2 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.699 s/op
     p(50.0000) =      5.799 s/op
     p(90.0000) =      6.174 s/op
     p(95.0000) =      7.125 s/op
     p(99.0000) =      7.321 s/op
     p(99.9000) =      7.321 s/op
     p(99.9900) =      7.321 s/op
     p(99.9990) =      7.321 s/op
     p(99.9999) =      7.321 s/op
    p(100.0000) =      7.321 s/op


# Run complete. Total time: 00:04:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.900 ? 0.179   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9-8u222-b10_1564958527666.json
{"wallclock_times": [296.27910296199997], "core_cycle_counts": [[275029302998], [350397563410], [210648827828], [195893709736]], "aperf_counts": [[274239990412], [350303731755], [210543565323], [195849161851]], "mperf_counts": [[274245049002], [350304682170], [210544524982], [195850011838]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 00:47:03: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 00:47:04: INFO] Estimated completion (whole session): 2019-08-06 00:36:17 (23:49:12 from now)
[2019-08-05 00:47:04: INFO] 153 executions left in scheduler queue
[2019-08-05 00:47:04: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 00:47:04: INFO] Estimated completion (next execution): 2019-08-05 00:54:26 (0:07:21 from now)
[2019-08-05 00:47:04: INFO] Reboot in preparation for next execution
[2019-08-05 00:51:15: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 00:58:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.201 s/op
Iteration   2: 9.566 s/op
Iteration   3: 9.474 s/op
Iteration   4: 9.291 s/op
Iteration   5: 9.371 s/op
Iteration   6: 9.273 s/op
Iteration   7: 9.409 s/op
Iteration   8: 9.253 s/op
Iteration   9: 9.320 s/op
Iteration  10: 9.164 s/op
Iteration  11: 9.149 s/op
Iteration  12: 9.216 s/op
Iteration  13: 9.101 s/op
Iteration  14: 9.224 s/op
Iteration  15: 9.113 s/op
Iteration  16: 9.200 s/op
Iteration  17: 9.221 s/op
Iteration  18: 9.021 s/op
Iteration  19: 9.140 s/op
Iteration  20: 9.031 s/op
Iteration  21: 9.213 s/op
Iteration  22: 9.124 s/op
Iteration  23: 9.166 s/op
Iteration  24: 9.113 s/op
Iteration  25: 9.185 s/op
Iteration  26: 9.095 s/op
Iteration  27: 9.202 s/op
Iteration  28: 9.176 s/op
Iteration  29: 9.138 s/op
Iteration  30: 9.159 s/op
Iteration  31: 9.140 s/op
Iteration  32: 9.200 s/op
Iteration  33: 9.128 s/op
Iteration  34: 9.056 s/op
Iteration  35: 9.202 s/op
Iteration  36: 9.102 s/op
Iteration  37: 9.188 s/op
Iteration  38: 9.097 s/op
Iteration  39: 9.186 s/op
Iteration  40: 9.107 s/op
Iteration  41: 9.187 s/op
Iteration  42: 9.151 s/op
Iteration  43: 9.110 s/op
Iteration  44: 9.181 s/op
Iteration  45: 9.110 s/op
Iteration  46: 9.166 s/op
Iteration  47: 9.072 s/op
Iteration  48: 9.206 s/op
Iteration  49: 9.135 s/op
Iteration  50: 9.046 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.222 ?(99.9%) 0.151 s/op

  Histogram, s/op:
    [ 9.000,  9.250) = 41 
    [ 9.250,  9.500) = 7 
    [ 9.500,  9.750) = 1 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 1 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.021 s/op
     p(50.0000) =      9.166 s/op
     p(90.0000) =      9.366 s/op
     p(95.0000) =      9.516 s/op
     p(99.0000) =     11.201 s/op
     p(99.9000) =     11.201 s/op
     p(99.9900) =     11.201 s/op
     p(99.9990) =     11.201 s/op
     p(99.9999) =     11.201 s/op
    p(100.0000) =     11.201 s/op


# Run complete. Total time: 00:07:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  9.222 ? 0.151   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9-8u222-b10_1564959075715.json
{"wallclock_times": [462.363904026], "core_cycle_counts": [[575007021211], [304133831665], [276600382112], [380355684850]], "aperf_counts": [[574017302107], [303955870052], [276467630162], [380224646664]], "mperf_counts": [[574021399364], [303961179248], [276467591464], [380224644126]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 00:58:58: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 00:58:59: INFO] Estimated completion (whole session): 2019-08-06 00:36:56 (23:37:56 from now)
[2019-08-05 00:58:59: INFO] 152 executions left in scheduler queue
[2019-08-05 00:58:59: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 00:58:59: INFO] Estimated completion (next execution): 2019-08-05 01:09:43 (0:10:44 from now)
[2019-08-05 00:58:59: INFO] Reboot in preparation for next execution
[2019-08-05 01:03:13: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 01:07:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.027 s/op
Iteration   2: 5.327 s/op
Iteration   3: 4.909 s/op
Iteration   4: 4.844 s/op
Iteration   5: 4.797 s/op
Iteration   6: 4.825 s/op
Iteration   7: 4.986 s/op
Iteration   8: 4.617 s/op
Iteration   9: 4.614 s/op
Iteration  10: 4.658 s/op
Iteration  11: 4.624 s/op
Iteration  12: 4.625 s/op
Iteration  13: 4.594 s/op
Iteration  14: 4.600 s/op
Iteration  15: 4.631 s/op
Iteration  16: 4.625 s/op
Iteration  17: 4.620 s/op
Iteration  18: 4.606 s/op
Iteration  19: 4.626 s/op
Iteration  20: 4.665 s/op
Iteration  21: 4.621 s/op
Iteration  22: 4.584 s/op
Iteration  23: 4.556 s/op
Iteration  24: 4.627 s/op
Iteration  25: 4.591 s/op
Iteration  26: 4.618 s/op
Iteration  27: 4.608 s/op
Iteration  28: 4.638 s/op
Iteration  29: 4.581 s/op
Iteration  30: 4.521 s/op
Iteration  31: 4.627 s/op
Iteration  32: 4.592 s/op
Iteration  33: 4.636 s/op
Iteration  34: 4.606 s/op
Iteration  35: 4.641 s/op
Iteration  36: 4.551 s/op
Iteration  37: 4.598 s/op
Iteration  38: 4.577 s/op
Iteration  39: 4.591 s/op
Iteration  40: 4.590 s/op
Iteration  41: 4.621 s/op
Iteration  42: 4.620 s/op
Iteration  43: 4.617 s/op
Iteration  44: 4.631 s/op
Iteration  45: 4.588 s/op
Iteration  46: 4.577 s/op
Iteration  47: 4.578 s/op
Iteration  48: 4.608 s/op
Iteration  49: 4.634 s/op
Iteration  50: 4.588 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.677 ?(99.9%) 0.116 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 43 
    [4.750, 5.000) = 5 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.521 s/op
     p(50.0000) =      4.619 s/op
     p(90.0000) =      4.842 s/op
     p(95.0000) =      5.139 s/op
     p(99.0000) =      6.027 s/op
     p(99.9000) =      6.027 s/op
     p(99.9900) =      6.027 s/op
     p(99.9990) =      6.027 s/op
     p(99.9999) =      6.027 s/op
    p(100.0000) =      6.027 s/op


# Run complete. Total time: 00:03:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.677 ? 0.116   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9-8u222-b10_1564959793570.json
{"wallclock_times": [235.275474085], "core_cycle_counts": [[206111551603], [173503906929], [306430573201], [199830755576]], "aperf_counts": [[205431932738], [173400001691], [306347397375], [199741099651]], "mperf_counts": [[205434654438], [173400878460], [306349916508], [199741550444]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 01:07:08: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 01:07:09: INFO] Estimated completion (whole session): 2019-08-06 00:38:53 (23:31:43 from now)
[2019-08-05 01:07:09: INFO] 151 executions left in scheduler queue
[2019-08-05 01:07:09: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 01:07:09: INFO] Estimated completion (next execution): 2019-08-05 01:13:29 (0:06:19 from now)
[2019-08-05 01:07:09: INFO] Reboot in preparation for next execution
[2019-08-05 01:11:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 01:15:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.340 s/op
Iteration   2: 5.329 s/op
Iteration   3: 4.807 s/op
Iteration   4: 5.132 s/op
Iteration   5: 4.842 s/op
Iteration   6: 4.918 s/op
Iteration   7: 4.873 s/op
Iteration   8: 4.998 s/op
Iteration   9: 4.932 s/op
Iteration  10: 4.864 s/op
Iteration  11: 4.971 s/op
Iteration  12: 4.772 s/op
Iteration  13: 4.896 s/op
Iteration  14: 4.844 s/op
Iteration  15: 4.773 s/op
Iteration  16: 4.828 s/op
Iteration  17: 4.786 s/op
Iteration  18: 4.712 s/op
Iteration  19: 4.858 s/op
Iteration  20: 4.812 s/op
Iteration  21: 4.856 s/op
Iteration  22: 4.841 s/op
Iteration  23: 4.745 s/op
Iteration  24: 4.877 s/op
Iteration  25: 4.758 s/op
Iteration  26: 4.897 s/op
Iteration  27: 4.819 s/op
Iteration  28: 4.764 s/op
Iteration  29: 4.896 s/op
Iteration  30: 4.791 s/op
Iteration  31: 4.729 s/op
Iteration  32: 4.859 s/op
Iteration  33: 4.750 s/op
Iteration  34: 4.905 s/op
Iteration  35: 4.806 s/op
Iteration  36: 4.753 s/op
Iteration  37: 4.874 s/op
Iteration  38: 4.787 s/op
Iteration  39: 4.731 s/op
Iteration  40: 4.870 s/op
Iteration  41: 4.768 s/op
Iteration  42: 4.862 s/op
Iteration  43: 4.857 s/op
Iteration  44: 4.753 s/op
Iteration  45: 4.858 s/op
Iteration  46: 4.795 s/op
Iteration  47: 4.730 s/op
Iteration  48: 4.818 s/op
Iteration  49: 4.794 s/op
Iteration  50: 4.870 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.874 ?(99.9%) 0.117 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 6 
    [4.750, 5.000) = 41 
    [5.000, 5.250) = 1 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.712 s/op
     p(50.0000) =      4.842 s/op
     p(90.0000) =      4.967 s/op
     p(95.0000) =      5.221 s/op
     p(99.0000) =      6.340 s/op
     p(99.9000) =      6.340 s/op
     p(99.9900) =      6.340 s/op
     p(99.9990) =      6.340 s/op
     p(99.9999) =      6.340 s/op
    p(100.0000) =      6.340 s/op


# Run complete. Total time: 00:04:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.874 ? 0.117   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9-8u222-b10_1564960281701.json
{"wallclock_times": [245.138486472], "core_cycle_counts": [[254542619027], [252029959308], [208058047760], [186062945630]], "aperf_counts": [[253912595561], [251919067335], [207959028194], [186005997039]], "mperf_counts": [[253914434436], [251921614952], [207960223990], [186005991212]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 01:15:26: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-05 01:15:27: INFO] Estimated completion (whole session): 2019-08-06 00:40:35 (23:25:07 from now)
[2019-08-05 01:15:27: INFO] 150 executions left in scheduler queue
[2019-08-05 01:15:27: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:15:27: INFO] Estimated completion (next execution): 2019-08-05 01:22:03 (0:06:35 from now)
[2019-08-05 01:15:27: INFO] Reboot in preparation for next execution
[2019-08-05 01:26:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.964 s/op
Iteration   2: 7.904 s/op
Iteration   3: 7.820 s/op
Iteration   4: 7.804 s/op
Iteration   5: 7.761 s/op
Iteration   6: 7.799 s/op
Iteration   7: 7.791 s/op
Iteration   8: 7.809 s/op
Iteration   9: 7.841 s/op
Iteration  10: 7.818 s/op
Iteration  11: 7.806 s/op
Iteration  12: 7.806 s/op
Iteration  13: 7.797 s/op
Iteration  14: 7.819 s/op
Iteration  15: 7.808 s/op
Iteration  16: 7.789 s/op
Iteration  17: 7.789 s/op
Iteration  18: 7.785 s/op
Iteration  19: 7.764 s/op
Iteration  20: 7.777 s/op
Iteration  21: 7.794 s/op
Iteration  22: 7.808 s/op
Iteration  23: 7.763 s/op
Iteration  24: 7.796 s/op
Iteration  25: 7.776 s/op
Iteration  26: 7.778 s/op
Iteration  27: 7.794 s/op
Iteration  28: 7.817 s/op
Iteration  29: 7.800 s/op
Iteration  30: 7.801 s/op
Iteration  31: 7.802 s/op
Iteration  32: 7.748 s/op
Iteration  33: 7.786 s/op
Iteration  34: 7.800 s/op
Iteration  35: 7.789 s/op
Iteration  36: 7.808 s/op
Iteration  37: 7.799 s/op
Iteration  38: 7.780 s/op
Iteration  39: 7.780 s/op
Iteration  40: 7.776 s/op
Iteration  41: 7.779 s/op
Iteration  42: 7.808 s/op
Iteration  43: 7.790 s/op
Iteration  44: 7.786 s/op
Iteration  45: 7.802 s/op
Iteration  46: 7.785 s/op
Iteration  47: 7.782 s/op
Iteration  48: 7.776 s/op
Iteration  49: 7.791 s/op
Iteration  50: 7.804 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.799 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [7.700, 7.725) = 0 
    [7.725, 7.750) = 1 
    [7.750, 7.775) = 3 
    [7.775, 7.800) = 26 
    [7.800, 7.825) = 17 
    [7.825, 7.850) = 1 
    [7.850, 7.875) = 0 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 1 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.748 s/op
     p(50.0000) =      7.795 s/op
     p(90.0000) =      7.819 s/op
     p(95.0000) =      7.870 s/op
     p(99.0000) =      7.964 s/op
     p(99.9000) =      7.964 s/op
     p(99.9900) =      7.964 s/op
     p(99.9990) =      7.964 s/op
     p(99.9999) =      7.964 s/op
    p(100.0000) =      7.964 s/op


# Run complete. Total time: 00:06:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.799 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ee-19.1.1_1564960828592.json
{"wallclock_times": [390.87428738000006], "core_cycle_counts": [[271935923124], [497163007545], [201009181637], [289284852461]], "aperf_counts": [[271007703212], [497105123056], [200979054560], [289265991652]], "mperf_counts": [[271036535350], [497113015394], [200980314458], [289266404490]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 01:26:59: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:27:00: INFO] Estimated completion (whole session): 2019-08-06 00:43:09 (23:16:08 from now)
[2019-08-05 01:27:00: INFO] 149 executions left in scheduler queue
[2019-08-05 01:27:00: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:27:00: INFO] Estimated completion (next execution): 2019-08-05 01:36:00 (0:09:00 from now)
[2019-08-05 01:27:00: INFO] Reboot in preparation for next execution
[2019-08-05 01:34:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.276 s/op
Iteration   2: 3.097 s/op
Iteration   3: 2.951 s/op
Iteration   4: 2.947 s/op
Iteration   5: 2.948 s/op
Iteration   6: 2.952 s/op
Iteration   7: 2.948 s/op
Iteration   8: 2.937 s/op
Iteration   9: 2.937 s/op
Iteration  10: 2.946 s/op
Iteration  11: 2.967 s/op
Iteration  12: 2.940 s/op
Iteration  13: 2.942 s/op
Iteration  14: 2.966 s/op
Iteration  15: 2.960 s/op
Iteration  16: 2.938 s/op
Iteration  17: 2.949 s/op
Iteration  18: 2.950 s/op
Iteration  19: 2.956 s/op
Iteration  20: 2.951 s/op
Iteration  21: 2.943 s/op
Iteration  22: 2.948 s/op
Iteration  23: 2.939 s/op
Iteration  24: 2.958 s/op
Iteration  25: 2.944 s/op
Iteration  26: 2.946 s/op
Iteration  27: 2.951 s/op
Iteration  28: 2.973 s/op
Iteration  29: 2.975 s/op
Iteration  30: 2.940 s/op
Iteration  31: 2.940 s/op
Iteration  32: 2.949 s/op
Iteration  33: 2.959 s/op
Iteration  34: 2.944 s/op
Iteration  35: 2.963 s/op
Iteration  36: 2.953 s/op
Iteration  37: 2.946 s/op
Iteration  38: 2.947 s/op
Iteration  39: 2.952 s/op
Iteration  40: 2.952 s/op
Iteration  41: 2.933 s/op
Iteration  42: 2.943 s/op
Iteration  43: 2.956 s/op
Iteration  44: 2.936 s/op
Iteration  45: 2.930 s/op
Iteration  46: 2.954 s/op
Iteration  47: 2.954 s/op
Iteration  48: 2.928 s/op
Iteration  49: 2.942 s/op
Iteration  50: 2.948 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      2.958 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 29 
    [2.950, 2.975) = 18 
    [2.975, 3.000) = 1 
    [3.000, 3.025) = 0 
    [3.025, 3.050) = 0 
    [3.050, 3.075) = 0 
    [3.075, 3.100) = 1 
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 0 
    [3.150, 3.175) = 0 
    [3.175, 3.200) = 0 
    [3.200, 3.225) = 0 
    [3.225, 3.250) = 0 
    [3.250, 3.275) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.928 s/op
     p(50.0000) =      2.948 s/op
     p(90.0000) =      2.967 s/op
     p(95.0000) =      3.030 s/op
     p(99.0000) =      3.276 s/op
     p(99.9000) =      3.276 s/op
     p(99.9900) =      3.276 s/op
     p(99.9990) =      3.276 s/op
     p(99.9999) =      3.276 s/op
    p(100.0000) =      3.276 s/op


# Run complete. Total time: 00:02:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  2.958 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ee-19.1.1_1564961524743.json
{"wallclock_times": [148.923828558], "core_cycle_counts": [[133534081990], [131055449881], [103159059272], [120946908266]], "aperf_counts": [[133185605310], [131019073052], [103135010029], [120926210173]], "mperf_counts": [[133225424574], [131020548204], [103135399578], [120932901442]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 01:34:33: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:34:34: INFO] Estimated completion (whole session): 2019-08-06 00:45:30 (23:10:55 from now)
[2019-08-05 01:34:34: INFO] 148 executions left in scheduler queue
[2019-08-05 01:34:34: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:34:34: INFO] Estimated completion (next execution): 2019-08-05 01:39:40 (0:05:06 from now)
[2019-08-05 01:34:34: INFO] Reboot in preparation for next execution
[2019-08-05 01:41:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.198 s/op
Iteration   2: 3.589 s/op
Iteration   3: 3.658 s/op
Iteration   4: 3.594 s/op
Iteration   5: 3.618 s/op
Iteration   6: 3.639 s/op
Iteration   7: 3.702 s/op
Iteration   8: 3.646 s/op
Iteration   9: 3.639 s/op
Iteration  10: 3.635 s/op
Iteration  11: 3.641 s/op
Iteration  12: 3.654 s/op
Iteration  13: 3.687 s/op
Iteration  14: 3.638 s/op
Iteration  15: 3.633 s/op
Iteration  16: 3.689 s/op
Iteration  17: 3.640 s/op
Iteration  18: 3.651 s/op
Iteration  19: 3.701 s/op
Iteration  20: 3.650 s/op
Iteration  21: 3.637 s/op
Iteration  22: 3.649 s/op
Iteration  23: 3.691 s/op
Iteration  24: 3.641 s/op
Iteration  25: 3.643 s/op
Iteration  26: 3.710 s/op
Iteration  27: 3.633 s/op
Iteration  28: 3.648 s/op
Iteration  29: 3.650 s/op
Iteration  30: 3.698 s/op
Iteration  31: 3.631 s/op
Iteration  32: 3.660 s/op
Iteration  33: 3.697 s/op
Iteration  34: 3.660 s/op
Iteration  35: 3.656 s/op
Iteration  36: 3.645 s/op
Iteration  37: 3.690 s/op
Iteration  38: 3.641 s/op
Iteration  39: 3.665 s/op
Iteration  40: 3.708 s/op
Iteration  41: 3.652 s/op
Iteration  42: 3.649 s/op
Iteration  43: 3.657 s/op
Iteration  44: 3.702 s/op
Iteration  45: 3.661 s/op
Iteration  46: 3.641 s/op
Iteration  47: 3.701 s/op
Iteration  48: 3.642 s/op
Iteration  49: 3.656 s/op
Iteration  50: 4.039 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.675 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 2 
    [3.600, 3.650) = 22 
    [3.650, 3.700) = 18 
    [3.700, 3.750) = 6 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 1 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.589 s/op
     p(50.0000) =      3.651 s/op
     p(90.0000) =      3.702 s/op
     p(95.0000) =      3.858 s/op
     p(99.0000) =      4.198 s/op
     p(99.9000) =      4.198 s/op
     p(99.9900) =      4.198 s/op
     p(99.9990) =      4.198 s/op
     p(99.9999) =      4.198 s/op
    p(100.0000) =      4.198 s/op


# Run complete. Total time: 00:03:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.675 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ee-19.1.1_1564961926628.json
{"wallclock_times": [184.92018414199998], "core_cycle_counts": [[273742267798], [84682433011], [105638594802], [203544198303]], "aperf_counts": [[273378678226], [84609560474], [105586251656], [203506264042]], "mperf_counts": [[273405941962], [84616696102], [105587241122], [203513407356]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 01:41:51: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:41:52: INFO] Estimated completion (whole session): 2019-08-06 00:47:12 (23:05:19 from now)
[2019-08-05 01:41:52: INFO] 147 executions left in scheduler queue
[2019-08-05 01:41:52: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:41:52: INFO] Estimated completion (next execution): 2019-08-05 01:47:27 (0:05:35 from now)
[2019-08-05 01:41:52: INFO] Reboot in preparation for next execution
[2019-08-05 01:52:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.994 s/op
Iteration   2: 6.836 s/op
Iteration   3: 6.795 s/op
Iteration   4: 6.757 s/op
Iteration   5: 6.790 s/op
Iteration   6: 6.807 s/op
Iteration   7: 6.798 s/op
Iteration   8: 6.786 s/op
Iteration   9: 6.750 s/op
Iteration  10: 6.727 s/op
Iteration  11: 6.753 s/op
Iteration  12: 6.789 s/op
Iteration  13: 6.786 s/op
Iteration  14: 6.749 s/op
Iteration  15: 6.754 s/op
Iteration  16: 6.796 s/op
Iteration  17: 6.731 s/op
Iteration  18: 6.731 s/op
Iteration  19: 6.734 s/op
Iteration  20: 6.751 s/op
Iteration  21: 6.747 s/op
Iteration  22: 6.797 s/op
Iteration  23: 6.710 s/op
Iteration  24: 6.768 s/op
Iteration  25: 6.743 s/op
Iteration  26: 6.715 s/op
Iteration  27: 6.727 s/op
Iteration  28: 6.741 s/op
Iteration  29: 6.714 s/op
Iteration  30: 6.765 s/op
Iteration  31: 6.737 s/op
Iteration  32: 6.793 s/op
Iteration  33: 6.756 s/op
Iteration  34: 6.760 s/op
Iteration  35: 6.773 s/op
Iteration  36: 6.736 s/op
Iteration  37: 6.755 s/op
Iteration  38: 6.828 s/op
Iteration  39: 6.748 s/op
Iteration  40: 6.793 s/op
Iteration  41: 6.750 s/op
Iteration  42: 6.720 s/op
Iteration  43: 6.712 s/op
Iteration  44: 6.754 s/op
Iteration  45: 6.748 s/op
Iteration  46: 6.717 s/op
Iteration  47: 6.753 s/op
Iteration  48: 6.806 s/op
Iteration  49: 6.743 s/op
Iteration  50: 6.744 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.763 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [6.700, 6.725) = 6 
    [6.725, 6.750) = 16 
    [6.750, 6.775) = 13 
    [6.775, 6.800) = 10 
    [6.800, 6.825) = 2 
    [6.825, 6.850) = 2 
    [6.850, 6.875) = 0 
    [6.875, 6.900) = 0 
    [6.900, 6.925) = 0 
    [6.925, 6.950) = 0 
    [6.950, 6.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.710 s/op
     p(50.0000) =      6.753 s/op
     p(90.0000) =      6.805 s/op
     p(95.0000) =      6.832 s/op
     p(99.0000) =      6.994 s/op
     p(99.9000) =      6.994 s/op
     p(99.9900) =      6.994 s/op
     p(99.9990) =      6.994 s/op
     p(99.9999) =      6.994 s/op
    p(100.0000) =      6.994 s/op


# Run complete. Total time: 00:05:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.763 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ee-19.1.1_1564962410669.json
{"wallclock_times": [339.13391535200003], "core_cycle_counts": [[277860408037], [204510618471], [295163424346], [318966832234]], "aperf_counts": [[277072578018], [204447411219], [295129530762], [318944705500]], "mperf_counts": [[277109833288], [204449282532], [295131258806], [318952202092]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 01:52:29: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-05 01:52:30: INFO] Estimated completion (whole session): 2019-08-06 00:49:39 (22:57:08 from now)
[2019-08-05 01:52:30: INFO] 146 executions left in scheduler queue
[2019-08-05 01:52:30: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-08-05 01:52:30: INFO] Estimated completion (next execution): 2019-08-05 02:00:41 (0:08:10 from now)
[2019-08-05 01:52:30: INFO] Reboot in preparation for next execution
[2019-08-05 02:04:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.278 s/op
Iteration   2: 8.053 s/op
Iteration   3: 8.145 s/op
Iteration   4: 8.024 s/op
Iteration   5: 8.003 s/op
Iteration   6: 8.273 s/op
Iteration   7: 7.998 s/op
Iteration   8: 7.900 s/op
Iteration   9: 8.127 s/op
Iteration  10: 7.971 s/op
Iteration  11: 7.960 s/op
Iteration  12: 8.093 s/op
Iteration  13: 8.304 s/op
Iteration  14: 7.949 s/op
Iteration  15: 8.041 s/op
Iteration  16: 7.862 s/op
Iteration  17: 7.832 s/op
Iteration  18: 7.886 s/op
Iteration  19: 7.703 s/op
Iteration  20: 7.756 s/op
Iteration  21: 7.904 s/op
Iteration  22: 7.702 s/op
Iteration  23: 7.720 s/op
Iteration  24: 7.913 s/op
Iteration  25: 7.858 s/op
Iteration  26: 7.861 s/op
Iteration  27: 7.714 s/op
Iteration  28: 7.776 s/op
Iteration  29: 7.873 s/op
Iteration  30: 7.691 s/op
Iteration  31: 7.750 s/op
Iteration  32: 7.912 s/op
Iteration  33: 7.868 s/op
Iteration  34: 7.856 s/op
Iteration  35: 7.738 s/op
Iteration  36: 7.811 s/op
Iteration  37: 8.631 s/op
Iteration  38: 7.736 s/op
Iteration  39: 7.853 s/op
Iteration  40: 7.862 s/op
Iteration  41: 7.717 s/op
Iteration  42: 7.741 s/op
Iteration  43: 7.900 s/op
Iteration  44: 7.702 s/op
Iteration  45: 7.715 s/op
Iteration  46: 7.908 s/op
Iteration  47: 7.896 s/op
Iteration  48: 7.869 s/op
Iteration  49: 7.714 s/op
Iteration  50: 7.758 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      7.902 ?(99.9%) 0.093 s/op

  Histogram, s/op:
    [7.600, 7.700) = 1 
    [7.700, 7.800) = 15 
    [7.800, 7.900) = 14 
    [7.900, 8.000) = 9 
    [8.000, 8.100) = 5 
    [8.100, 8.200) = 2 
    [8.200, 8.300) = 2 
    [8.300, 8.400) = 1 
    [8.400, 8.500) = 0 
    [8.500, 8.600) = 0 
    [8.600, 8.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.691 s/op
     p(50.0000) =      7.869 s/op
     p(90.0000) =      8.143 s/op
     p(95.0000) =      8.290 s/op
     p(99.0000) =      8.631 s/op
     p(99.9000) =      8.631 s/op
     p(99.9900) =      8.631 s/op
     p(99.9990) =      8.631 s/op
     p(99.9999) =      8.631 s/op
    p(100.0000) =      8.631 s/op


# Run complete. Total time: 00:06:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  7.902 ? 0.093   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ce-19.1.1_1564963046075.json
{"wallclock_times": [396.100580182], "core_cycle_counts": [[317261633819], [210882360008], [432646633773], [430897082514]], "aperf_counts": [[316276733120], [210793706681], [432619137138], [430869576036]], "mperf_counts": [[316281843466], [210794186802], [432638629424], [430887251720]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 02:04:02: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-08-05 02:04:03: INFO] Estimated completion (whole session): 2019-08-06 00:52:03 (22:48:00 from now)
[2019-08-05 02:04:03: INFO] 145 executions left in scheduler queue
[2019-08-05 02:04:03: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-05 02:04:03: INFO] Estimated completion (next execution): 2019-08-05 02:13:10 (0:09:07 from now)
[2019-08-05 02:04:03: INFO] Reboot in preparation for next execution
[2019-08-05 02:08:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 02:08:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 02:08:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 02:08:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 02:08:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 02:08:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 02:10:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.791 s/op
Iteration   2: 2.341 s/op
Iteration   3: 2.298 s/op
Iteration   4: 2.295 s/op
Iteration   5: 2.261 s/op
Iteration   6: 2.185 s/op
Iteration   7: 2.026 s/op
Iteration   8: 2.021 s/op
Iteration   9: 2.005 s/op
Iteration  10: 2.061 s/op
Iteration  11: 2.052 s/op
Iteration  12: 2.041 s/op
Iteration  13: 2.077 s/op
Iteration  14: 2.057 s/op
Iteration  15: 2.042 s/op
Iteration  16: 2.073 s/op
Iteration  17: 2.062 s/op
Iteration  18: 2.063 s/op
Iteration  19: 2.090 s/op
Iteration  20: 2.052 s/op
Iteration  21: 2.036 s/op
Iteration  22: 2.017 s/op
Iteration  23: 2.046 s/op
Iteration  24: 2.051 s/op
Iteration  25: 2.053 s/op
Iteration  26: 2.029 s/op
Iteration  27: 2.024 s/op
Iteration  28: 2.052 s/op
Iteration  29: 2.044 s/op
Iteration  30: 1.996 s/op
Iteration  31: 2.045 s/op
Iteration  32: 2.002 s/op
Iteration  33: 1.996 s/op
Iteration  34: 2.030 s/op
Iteration  35: 2.050 s/op
Iteration  36: 2.000 s/op
Iteration  37: 2.020 s/op
Iteration  38: 2.038 s/op
Iteration  39: 2.033 s/op
Iteration  40: 2.021 s/op
Iteration  41: 2.031 s/op
Iteration  42: 2.019 s/op
Iteration  43: 2.038 s/op
Iteration  44: 2.022 s/op
Iteration  45: 2.029 s/op
Iteration  46: 2.049 s/op
Iteration  47: 2.035 s/op
Iteration  48: 2.022 s/op
Iteration  49: 2.021 s/op
Iteration  50: 2.001 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.075 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 3 
    [2.000, 2.050) = 28 
    [2.050, 2.100) = 13 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 3 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.996 s/op
     p(50.0000) =      2.039 s/op
     p(90.0000) =      2.253 s/op
     p(95.0000) =      2.317 s/op
     p(99.0000) =      2.791 s/op
     p(99.9000) =      2.791 s/op
     p(99.9900) =      2.791 s/op
     p(99.9990) =      2.791 s/op
     p(99.9999) =      2.791 s/op
    p(100.0000) =      2.791 s/op


# Run complete. Total time: 00:01:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.075 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_12.0.1_1564963701742.json
{"wallclock_times": [105.45996265700003], "core_cycle_counts": [[103357020873], [77532615576], [101506769148], [83178829403]], "aperf_counts": [[103002976221], [77443048602], [101443068193], [83116314274]], "mperf_counts": [[103012158888], [77443067310], [101443153350], [83116311600]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 02:10:07: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-05 02:10:08: INFO] Estimated completion (whole session): 2019-08-06 00:53:55 (22:43:46 from now)
[2019-08-05 02:10:08: INFO] 144 executions left in scheduler queue
[2019-08-05 02:10:08: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-05 02:10:08: INFO] Estimated completion (next execution): 2019-08-05 02:14:23 (0:04:14 from now)
[2019-08-05 02:10:08: INFO] Reboot in preparation for next execution
[2019-08-05 02:14:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 02:14:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 02:14:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 02:14:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 02:14:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 02:14:20: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 02:17:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.588 s/op
Iteration   2: 3.340 s/op
Iteration   3: 3.317 s/op
Iteration   4: 3.166 s/op
Iteration   5: 3.215 s/op
Iteration   6: 3.310 s/op
Iteration   7: 3.189 s/op
Iteration   8: 3.153 s/op
Iteration   9: 3.146 s/op
Iteration  10: 3.116 s/op
Iteration  11: 3.133 s/op
Iteration  12: 3.068 s/op
Iteration  13: 3.097 s/op
Iteration  14: 3.132 s/op
Iteration  15: 3.075 s/op
Iteration  16: 3.152 s/op
Iteration  17: 3.130 s/op
Iteration  18: 3.087 s/op
Iteration  19: 3.090 s/op
Iteration  20: 3.151 s/op
Iteration  21: 3.153 s/op
Iteration  22: 3.067 s/op
Iteration  23: 3.126 s/op
Iteration  24: 3.178 s/op
Iteration  25: 3.088 s/op
Iteration  26: 3.230 s/op
Iteration  27: 3.194 s/op
Iteration  28: 3.205 s/op
Iteration  29: 3.160 s/op
Iteration  30: 3.184 s/op
Iteration  31: 3.127 s/op
Iteration  32: 3.164 s/op
Iteration  33: 3.137 s/op
Iteration  34: 3.128 s/op
Iteration  35: 3.197 s/op
Iteration  36: 3.195 s/op
Iteration  37: 3.207 s/op
Iteration  38: 3.191 s/op
Iteration  39: 3.215 s/op
Iteration  40: 3.148 s/op
Iteration  41: 3.175 s/op
Iteration  42: 3.190 s/op
Iteration  43: 3.185 s/op
Iteration  44: 3.142 s/op
Iteration  45: 3.194 s/op
Iteration  46: 3.106 s/op
Iteration  47: 3.219 s/op
Iteration  48: 3.136 s/op
Iteration  49: 3.107 s/op
Iteration  50: 3.156 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      3.171 ?(99.9%) 0.041 s/op

  Histogram, s/op:
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 7 
    [3.100, 3.150) = 14 
    [3.150, 3.200) = 19 
    [3.200, 3.250) = 6 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 3 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.067 s/op
     p(50.0000) =      3.155 s/op
     p(90.0000) =      3.229 s/op
     p(95.0000) =      3.327 s/op
     p(99.0000) =      3.588 s/op
     p(99.9000) =      3.588 s/op
     p(99.9900) =      3.588 s/op
     p(99.9990) =      3.588 s/op
     p(99.9999) =      3.588 s/op
    p(100.0000) =      3.588 s/op


# Run complete. Total time: 00:02:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.171 ? 0.041   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_12.0.1_1564964060102.json
{"wallclock_times": [160.13272832899997], "core_cycle_counts": [[122641726499], [124279594321], [151936909437], [158415074481]], "aperf_counts": [[122191051679], [124193886386], [151878265119], [158376616200]], "mperf_counts": [[122210028748], [124194957426], [151878349776], [158376625024]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 02:17:00: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-05 02:17:01: INFO] Estimated completion (whole session): 2019-08-06 00:55:41 (22:38:39 from now)
[2019-08-05 02:17:01: INFO] 143 executions left in scheduler queue
[2019-08-05 02:17:01: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-05 02:17:01: INFO] Estimated completion (next execution): 2019-08-05 02:22:09 (0:05:08 from now)
[2019-08-05 02:17:01: INFO] Reboot in preparation for next execution
[2019-08-05 02:21:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 02:22:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.894 s/op
Iteration   2: 2.186 s/op
Iteration   3: 2.144 s/op
Iteration   4: 2.026 s/op
Iteration   5: 2.019 s/op
Iteration   6: 1.922 s/op
Iteration   7: 1.919 s/op
Iteration   8: 1.905 s/op
Iteration   9: 1.916 s/op
Iteration  10: 1.916 s/op
Iteration  11: 1.939 s/op
Iteration  12: 1.905 s/op
Iteration  13: 1.915 s/op
Iteration  14: 1.915 s/op
Iteration  15: 1.902 s/op
Iteration  16: 1.925 s/op
Iteration  17: 1.950 s/op
Iteration  18: 1.888 s/op
Iteration  19: 1.907 s/op
Iteration  20: 1.946 s/op
Iteration  21: 1.934 s/op
Iteration  22: 1.916 s/op
Iteration  23: 1.953 s/op
Iteration  24: 1.959 s/op
Iteration  25: 1.905 s/op
Iteration  26: 1.934 s/op
Iteration  27: 1.913 s/op
Iteration  28: 1.955 s/op
Iteration  29: 1.950 s/op
Iteration  30: 1.947 s/op
Iteration  31: 1.925 s/op
Iteration  32: 1.933 s/op
Iteration  33: 1.957 s/op
Iteration  34: 1.955 s/op
Iteration  35: 1.943 s/op
Iteration  36: 1.941 s/op
Iteration  37: 1.918 s/op
Iteration  38: 1.958 s/op
Iteration  39: 1.947 s/op
Iteration  40: 1.958 s/op
Iteration  41: 1.964 s/op
Iteration  42: 1.933 s/op
Iteration  43: 1.951 s/op
Iteration  44: 1.961 s/op
Iteration  45: 1.954 s/op
Iteration  46: 1.946 s/op
Iteration  47: 1.941 s/op
Iteration  48: 1.925 s/op
Iteration  49: 1.939 s/op
Iteration  50: 1.933 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.966 ?(99.9%) 0.071 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 0 
    [1.875, 2.000) = 45 
    [2.000, 2.125) = 2 
    [2.125, 2.250) = 2 
    [2.250, 2.375) = 0 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.888 s/op
     p(50.0000) =      1.940 s/op
     p(90.0000) =      2.014 s/op
     p(95.0000) =      2.163 s/op
     p(99.0000) =      2.894 s/op
     p(99.9000) =      2.894 s/op
     p(99.9900) =      2.894 s/op
     p(99.9990) =      2.894 s/op
     p(99.9999) =      2.894 s/op
    p(100.0000) =      2.894 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.966 ? 0.071   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9-8u222-b10_1564964471692.json
{"wallclock_times": [99.54191034400003], "core_cycle_counts": [[97074970216], [60452788886], [98514055607], [89667043765]], "aperf_counts": [[96723479810], [60369689230], [98466649479], [89631330876]], "mperf_counts": [[96729623306], [60370157522], [98468315044], [89632283596]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 02:22:51: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-05 02:22:52: INFO] Estimated completion (whole session): 2019-08-06 00:57:24 (22:34:32 from now)
[2019-08-05 02:22:52: INFO] 142 executions left in scheduler queue
[2019-08-05 02:22:52: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-05 02:22:52: INFO] Estimated completion (next execution): 2019-08-05 02:27:00 (0:04:08 from now)
[2019-08-05 02:22:52: INFO] Reboot in preparation for next execution
[2019-08-05 02:27:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 02:29:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.693 s/op
Iteration   2: 3.483 s/op
Iteration   3: 3.354 s/op
Iteration   4: 3.238 s/op
Iteration   5: 3.314 s/op
Iteration   6: 3.232 s/op
Iteration   7: 3.186 s/op
Iteration   8: 3.271 s/op
Iteration   9: 3.232 s/op
Iteration  10: 3.361 s/op
Iteration  11: 3.335 s/op
Iteration  12: 3.368 s/op
Iteration  13: 3.352 s/op
Iteration  14: 3.355 s/op
Iteration  15: 3.339 s/op
Iteration  16: 3.356 s/op
Iteration  17: 3.266 s/op
Iteration  18: 3.269 s/op
Iteration  19: 3.268 s/op
Iteration  20: 3.266 s/op
Iteration  21: 3.271 s/op
Iteration  22: 3.265 s/op
Iteration  23: 3.272 s/op
Iteration  24: 3.284 s/op
Iteration  25: 3.260 s/op
Iteration  26: 3.266 s/op
Iteration  27: 3.279 s/op
Iteration  28: 3.277 s/op
Iteration  29: 3.280 s/op
Iteration  30: 3.278 s/op
Iteration  31: 3.289 s/op
Iteration  32: 3.293 s/op
Iteration  33: 3.261 s/op
Iteration  34: 3.253 s/op
Iteration  35: 3.284 s/op
Iteration  36: 3.270 s/op
Iteration  37: 3.264 s/op
Iteration  38: 3.266 s/op
Iteration  39: 3.284 s/op
Iteration  40: 3.275 s/op
Iteration  41: 3.300 s/op
Iteration  42: 3.270 s/op
Iteration  43: 3.274 s/op
Iteration  44: 3.277 s/op
Iteration  45: 3.282 s/op
Iteration  46: 3.267 s/op
Iteration  47: 3.279 s/op
Iteration  48: 3.289 s/op
Iteration  49: 3.276 s/op
Iteration  50: 3.266 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.296 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 1 
    [3.200, 3.250) = 3 
    [3.250, 3.300) = 34 
    [3.300, 3.350) = 4 
    [3.350, 3.400) = 6 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 1 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.186 s/op
     p(50.0000) =      3.276 s/op
     p(90.0000) =      3.356 s/op
     p(95.0000) =      3.420 s/op
     p(99.0000) =      3.693 s/op
     p(99.9000) =      3.693 s/op
     p(99.9900) =      3.693 s/op
     p(99.9990) =      3.693 s/op
     p(99.9999) =      3.693 s/op
    p(100.0000) =      3.693 s/op


# Run complete. Total time: 00:02:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.296 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9-8u222-b10_1564964823505.json
{"wallclock_times": [165.89763992400003], "core_cycle_counts": [[146887310634], [119545933157], [140189590541], [159698240535]], "aperf_counts": [[146444645410], [119477269551], [140157239919], [159643122383]], "mperf_counts": [[146448272712], [119477286136], [140159444994], [159643119100]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 02:29:49: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-05 02:29:50: INFO] Estimated completion (whole session): 2019-08-06 00:59:09 (22:29:18 from now)
[2019-08-05 02:29:50: INFO] 141 executions left in scheduler queue
[2019-08-05 02:29:50: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-08-05 02:29:50: INFO] Estimated completion (next execution): 2019-08-05 02:35:05 (0:05:14 from now)
[2019-08-05 02:29:50: INFO] Reboot in preparation for next execution
[2019-08-05 02:34:03: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 02:34:03: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 02:34:03: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 02:34:03: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 02:34:03: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 02:44:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.201 s/op
Iteration   2: 13.209 s/op
Iteration   3: 13.163 s/op
Iteration   4: 12.897 s/op
Iteration   5: 12.925 s/op
Iteration   6: 12.923 s/op
Iteration   7: 12.987 s/op
Iteration   8: 12.978 s/op
Iteration   9: 12.930 s/op
Iteration  10: 12.960 s/op
Iteration  11: 12.957 s/op
Iteration  12: 12.930 s/op
Iteration  13: 12.908 s/op
Iteration  14: 12.953 s/op
Iteration  15: 13.000 s/op
Iteration  16: 12.981 s/op
Iteration  17: 13.000 s/op
Iteration  18: 12.998 s/op
Iteration  19: 12.968 s/op
Iteration  20: 12.936 s/op
Iteration  21: 13.095 s/op
Iteration  22: 12.983 s/op
Iteration  23: 12.883 s/op
Iteration  24: 12.974 s/op
Iteration  25: 13.114 s/op
Iteration  26: 12.913 s/op
Iteration  27: 12.946 s/op
Iteration  28: 12.895 s/op
Iteration  29: 13.039 s/op
Iteration  30: 12.972 s/op
Iteration  31: 12.957 s/op
Iteration  32: 13.029 s/op
Iteration  33: 12.928 s/op
Iteration  34: 12.894 s/op
Iteration  35: 12.955 s/op
Iteration  36: 12.989 s/op
Iteration  37: 13.013 s/op
Iteration  38: 13.028 s/op
Iteration  39: 12.931 s/op
Iteration  40: 13.145 s/op
Iteration  41: 13.022 s/op
Iteration  42: 12.982 s/op
Iteration  43: 12.982 s/op
Iteration  44: 12.937 s/op
Iteration  45: 12.971 s/op
Iteration  46: 12.995 s/op
Iteration  47: 13.006 s/op
Iteration  48: 12.952 s/op
Iteration  49: 13.124 s/op
Iteration  50: 12.949 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     12.988 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [12.800, 12.850) = 0 
    [12.850, 12.900) = 4 
    [12.900, 12.950) = 12 
    [12.950, 13.000) = 19 
    [13.000, 13.050) = 8 
    [13.050, 13.100) = 1 
    [13.100, 13.150) = 3 
    [13.150, 13.200) = 1 
    [13.200, 13.250) = 2 

  Percentiles, s/op:
      p(0.0000) =     12.883 s/op
     p(50.0000) =     12.973 s/op
     p(90.0000) =     13.123 s/op
     p(95.0000) =     13.180 s/op
     p(99.0000) =     13.209 s/op
     p(99.9000) =     13.209 s/op
     p(99.9900) =     13.209 s/op
     p(99.9990) =     13.209 s/op
     p(99.9999) =     13.209 s/op
    p(100.0000) =     13.209 s/op


# Run complete. Total time: 00:10:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.988 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot_11.0.4_1564965243029.json
{"wallclock_times": [650.6489089830001], "core_cycle_counts": [[735420501472], [617811607168], [582761867287], [447226750899]], "aperf_counts": [[733915838457], [617605928120], [582649834128], [447129829830]], "mperf_counts": [[734633580330], [618136238464], [582984843820], [447297854670]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 02:44:53: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-08-05 02:44:54: INFO] Estimated completion (whole session): 2019-08-06 01:00:51 (22:15:56 from now)
[2019-08-05 02:44:54: INFO] 140 executions left in scheduler queue
[2019-08-05 02:44:54: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-08-05 02:44:54: INFO] Estimated completion (next execution): 2019-08-05 02:58:16 (0:13:21 from now)
[2019-08-05 02:44:54: INFO] Reboot in preparation for next execution
[2019-08-05 02:49:37: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 03:03:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.143 s/op
Iteration   2: 16.479 s/op
Iteration   3: 16.636 s/op
Iteration   4: 16.789 s/op
Iteration   5: 16.852 s/op
Iteration   6: 16.961 s/op
Iteration   7: 16.989 s/op
Iteration   8: 16.319 s/op
Iteration   9: 16.523 s/op
Iteration  10: 16.624 s/op
Iteration  11: 16.912 s/op
Iteration  12: 16.951 s/op
Iteration  13: 16.820 s/op
Iteration  14: 15.632 s/op
Iteration  15: 16.767 s/op
Iteration  16: 16.874 s/op
Iteration  17: 15.572 s/op
Iteration  18: 16.482 s/op
Iteration  19: 16.934 s/op
Iteration  20: 16.666 s/op
Iteration  21: 16.680 s/op
Iteration  22: 16.577 s/op
Iteration  23: 16.676 s/op
Iteration  24: 16.601 s/op
Iteration  25: 16.988 s/op
Iteration  26: 16.729 s/op
Iteration  27: 16.009 s/op
Iteration  28: 16.693 s/op
Iteration  29: 16.752 s/op
Iteration  30: 16.803 s/op
Iteration  31: 16.701 s/op
Iteration  32: 16.353 s/op
Iteration  33: 16.632 s/op
Iteration  34: 16.726 s/op
Iteration  35: 16.646 s/op
Iteration  36: 16.758 s/op
Iteration  37: 16.179 s/op
Iteration  38: 16.782 s/op
Iteration  39: 16.564 s/op
Iteration  40: 16.945 s/op
Iteration  41: 16.593 s/op
Iteration  42: 16.857 s/op
Iteration  43: 16.495 s/op
Iteration  44: 16.786 s/op
Iteration  45: 16.772 s/op
Iteration  46: 16.569 s/op
Iteration  47: 16.649 s/op
Iteration  48: 16.576 s/op
Iteration  49: 16.373 s/op
Iteration  50: 16.746 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.623 ?(99.9%) 0.149 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 1 
    [15.625, 15.750) = 1 
    [15.750, 15.875) = 0 
    [15.875, 16.000) = 0 
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 2 
    [16.250, 16.375) = 3 
    [16.375, 16.500) = 3 
    [16.500, 16.625) = 8 
    [16.625, 16.750) = 12 
    [16.750, 16.875) = 12 

  Percentiles, s/op:
      p(0.0000) =     15.572 s/op
     p(50.0000) =     16.678 s/op
     p(90.0000) =     16.944 s/op
     p(95.0000) =     16.973 s/op
     p(99.0000) =     16.989 s/op
     p(99.9000) =     16.989 s/op
     p(99.9900) =     16.989 s/op
     p(99.9990) =     16.989 s/op
     p(99.9999) =     16.989 s/op
    p(100.0000) =     16.989 s/op


# Run complete. Total time: 00:13:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.623 ? 0.149   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9-8u222-b10_1564966177719.json
{"wallclock_times": [832.4832198579999], "core_cycle_counts": [[468353146504], [799292882229], [1156020410104], [538135251609]], "aperf_counts": [[465922217317], [799168082498], [1155873029435], [537954097490]], "mperf_counts": [[465925121012], [799168195110], [1155873065716], [537954051920]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 03:03:30: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-08-05 03:03:31: INFO] Estimated completion (whole session): 2019-08-06 01:02:52 (21:59:20 from now)
[2019-08-05 03:03:31: INFO] 139 executions left in scheduler queue
[2019-08-05 03:03:31: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:03:31: INFO] Estimated completion (next execution): 2019-08-05 03:20:00 (0:16:29 from now)
[2019-08-05 03:03:31: INFO] Reboot in preparation for next execution
[2019-08-05 03:07:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 03:07:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 03:07:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 03:07:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 03:07:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 03:07:43: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 03:14:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.630 s/op
Iteration   2: 8.261 s/op
Iteration   3: 8.250 s/op
Iteration   4: 8.275 s/op
Iteration   5: 7.871 s/op
Iteration   6: 7.827 s/op
Iteration   7: 7.760 s/op
Iteration   8: 7.817 s/op
Iteration   9: 7.913 s/op
Iteration  10: 7.882 s/op
Iteration  11: 7.817 s/op
Iteration  12: 7.807 s/op
Iteration  13: 7.879 s/op
Iteration  14: 7.850 s/op
Iteration  15: 7.803 s/op
Iteration  16: 7.887 s/op
Iteration  17: 7.862 s/op
Iteration  18: 7.828 s/op
Iteration  19: 7.842 s/op
Iteration  20: 7.861 s/op
Iteration  21: 7.815 s/op
Iteration  22: 7.899 s/op
Iteration  23: 7.937 s/op
Iteration  24: 7.921 s/op
Iteration  25: 7.863 s/op
Iteration  26: 7.805 s/op
Iteration  27: 7.879 s/op
Iteration  28: 7.922 s/op
Iteration  29: 7.941 s/op
Iteration  30: 7.918 s/op
Iteration  31: 7.858 s/op
Iteration  32: 7.842 s/op
Iteration  33: 7.871 s/op
Iteration  34: 7.858 s/op
Iteration  35: 7.899 s/op
Iteration  36: 7.790 s/op
Iteration  37: 7.871 s/op
Iteration  38: 7.942 s/op
Iteration  39: 7.886 s/op
Iteration  40: 7.898 s/op
Iteration  41: 7.831 s/op
Iteration  42: 7.827 s/op
Iteration  43: 7.891 s/op
Iteration  44: 7.899 s/op
Iteration  45: 7.889 s/op
Iteration  46: 7.933 s/op
Iteration  47: 7.826 s/op
Iteration  48: 7.877 s/op
Iteration  49: 7.895 s/op
Iteration  50: 7.924 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.927 ?(99.9%) 0.132 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 46 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 3 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.760 s/op
     p(50.0000) =      7.878 s/op
     p(90.0000) =      7.942 s/op
     p(95.0000) =      8.267 s/op
     p(99.0000) =      9.630 s/op
     p(99.9000) =      9.630 s/op
     p(99.9900) =      9.630 s/op
     p(99.9990) =      9.630 s/op
     p(99.9999) =      9.630 s/op
    p(100.0000) =      9.630 s/op


# Run complete. Total time: 00:06:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.927 ? 0.132   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_12.0.1_1564967262944.json
{"wallclock_times": [397.99974665599996], "core_cycle_counts": [[340121190876], [313570132457], [333889592760], [370914203267]], "aperf_counts": [[339043062090], [313449707713], [333773478030], [370826484898]], "mperf_counts": [[339054526398], [313449683820], [333773659500], [370830621126]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 03:14:20: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:14:21: INFO] Estimated completion (whole session): 2019-08-06 01:04:31 (21:50:09 from now)
[2019-08-05 03:14:21: INFO] 138 executions left in scheduler queue
[2019-08-05 03:14:21: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:14:21: INFO] Estimated completion (next execution): 2019-08-05 03:23:31 (0:09:09 from now)
[2019-08-05 03:14:21: INFO] Reboot in preparation for next execution
[2019-08-05 03:18:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 03:18:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 03:18:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 03:18:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 03:18:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 03:18:35: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 03:23:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.602 s/op
Iteration   2: 6.228 s/op
Iteration   3: 5.994 s/op
Iteration   4: 5.909 s/op
Iteration   5: 6.000 s/op
Iteration   6: 6.010 s/op
Iteration   7: 5.966 s/op
Iteration   8: 5.780 s/op
Iteration   9: 5.875 s/op
Iteration  10: 5.740 s/op
Iteration  11: 5.891 s/op
Iteration  12: 5.757 s/op
Iteration  13: 5.759 s/op
Iteration  14: 5.800 s/op
Iteration  15: 5.746 s/op
Iteration  16: 5.833 s/op
Iteration  17: 5.781 s/op
Iteration  18: 5.788 s/op
Iteration  19: 5.720 s/op
Iteration  20: 5.765 s/op
Iteration  21: 5.945 s/op
Iteration  22: 5.844 s/op
Iteration  23: 5.833 s/op
Iteration  24: 5.763 s/op
Iteration  25: 5.658 s/op
Iteration  26: 5.852 s/op
Iteration  27: 5.730 s/op
Iteration  28: 5.878 s/op
Iteration  29: 5.791 s/op
Iteration  30: 5.713 s/op
Iteration  31: 5.776 s/op
Iteration  32: 5.738 s/op
Iteration  33: 5.874 s/op
Iteration  34: 5.726 s/op
Iteration  35: 5.769 s/op
Iteration  36: 5.908 s/op
Iteration  37: 5.865 s/op
Iteration  38: 5.853 s/op
Iteration  39: 5.924 s/op
Iteration  40: 5.785 s/op
Iteration  41: 5.826 s/op
Iteration  42: 5.942 s/op
Iteration  43: 5.932 s/op
Iteration  44: 5.894 s/op
Iteration  45: 5.923 s/op
Iteration  46: 5.774 s/op
Iteration  47: 5.917 s/op
Iteration  48: 5.788 s/op
Iteration  49: 5.832 s/op
Iteration  50: 5.776 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.875 ?(99.9%) 0.133 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 8 
    [5.750, 6.000) = 39 
    [6.000, 6.250) = 2 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.658 s/op
     p(50.0000) =      5.832 s/op
     p(90.0000) =      5.991 s/op
     p(95.0000) =      6.108 s/op
     p(99.0000) =      7.602 s/op
     p(99.9000) =      7.602 s/op
     p(99.9900) =      7.602 s/op
     p(99.9990) =      7.602 s/op
     p(99.9999) =      7.602 s/op
    p(100.0000) =      7.602 s/op


# Run complete. Total time: 00:04:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.875 ? 0.133   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_12.0.1_1564967914815.json
{"wallclock_times": [295.65000504], "core_cycle_counts": [[281601049361], [212471613833], [297409808908], [276800835871]], "aperf_counts": [[280840705416], [212338411309], [297287255100], [276706362288]], "mperf_counts": [[280858433816], [212338388086], [297287378480], [276706481140]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 03:23:30: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:23:31: INFO] Estimated completion (whole session): 2019-08-06 01:05:36 (21:42:04 from now)
[2019-08-05 03:23:31: INFO] 137 executions left in scheduler queue
[2019-08-05 03:23:31: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:23:31: INFO] Estimated completion (next execution): 2019-08-05 03:31:17 (0:07:45 from now)
[2019-08-05 03:23:31: INFO] Reboot in preparation for next execution
[2019-08-05 03:27:56: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 03:27:56: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 03:27:56: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 03:27:56: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 03:27:56: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 03:27:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 03:32:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.275 s/op
Iteration   2: 6.399 s/op
Iteration   3: 6.044 s/op
Iteration   4: 6.071 s/op
Iteration   5: 5.940 s/op
Iteration   6: 5.919 s/op
Iteration   7: 5.856 s/op
Iteration   8: 5.910 s/op
Iteration   9: 5.895 s/op
Iteration  10: 5.895 s/op
Iteration  11: 5.877 s/op
Iteration  12: 5.831 s/op
Iteration  13: 5.848 s/op
Iteration  14: 5.879 s/op
Iteration  15: 5.889 s/op
Iteration  16: 5.885 s/op
Iteration  17: 5.840 s/op
Iteration  18: 5.877 s/op
Iteration  19: 5.871 s/op
Iteration  20: 5.849 s/op
Iteration  21: 5.916 s/op
Iteration  22: 5.902 s/op
Iteration  23: 5.857 s/op
Iteration  24: 5.878 s/op
Iteration  25: 5.909 s/op
Iteration  26: 5.853 s/op
Iteration  27: 5.837 s/op
Iteration  28: 5.848 s/op
Iteration  29: 5.918 s/op
Iteration  30: 5.909 s/op
Iteration  31: 5.871 s/op
Iteration  32: 5.856 s/op
Iteration  33: 5.883 s/op
Iteration  34: 5.864 s/op
Iteration  35: 5.834 s/op
Iteration  36: 5.890 s/op
Iteration  37: 5.848 s/op
Iteration  38: 5.851 s/op
Iteration  39: 5.858 s/op
Iteration  40: 5.853 s/op
Iteration  41: 5.866 s/op
Iteration  42: 5.879 s/op
Iteration  43: 5.833 s/op
Iteration  44: 5.957 s/op
Iteration  45: 5.878 s/op
Iteration  46: 5.890 s/op
Iteration  47: 5.865 s/op
Iteration  48: 5.888 s/op
Iteration  49: 5.879 s/op
Iteration  50: 5.824 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.921 ?(99.9%) 0.106 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 46 
    [6.000, 6.250) = 2 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.824 s/op
     p(50.0000) =      5.878 s/op
     p(90.0000) =      5.955 s/op
     p(95.0000) =      6.219 s/op
     p(99.0000) =      7.275 s/op
     p(99.9000) =      7.275 s/op
     p(99.9900) =      7.275 s/op
     p(99.9990) =      7.275 s/op
     p(99.9999) =      7.275 s/op
    p(100.0000) =      7.275 s/op


# Run complete. Total time: 00:04:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.921 ? 0.106   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_12.0.1_1564968476873.json
{"wallclock_times": [298.006604859], "core_cycle_counts": [[265409904546], [245044895596], [399450142177], [198014500986]], "aperf_counts": [[264543455218], [244901686906], [399319212648], [197899429587]], "mperf_counts": [[264556295124], [244910722388], [399319435632], [197899689598]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 03:32:54: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:32:55: INFO] Estimated completion (whole session): 2019-08-06 01:07:59 (21:35:03 from now)
[2019-08-05 03:32:55: INFO] 136 executions left in scheduler queue
[2019-08-05 03:32:55: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:32:55: INFO] Estimated completion (next execution): 2019-08-05 03:40:10 (0:07:14 from now)
[2019-08-05 03:32:55: INFO] Reboot in preparation for next execution
[2019-08-05 03:36:30: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 03:36:30: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 03:36:30: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 03:36:30: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 03:36:30: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 03:36:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 03:48:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.229 s/op
Iteration   2: 14.797 s/op
Iteration   3: 14.447 s/op
Iteration   4: 14.438 s/op
Iteration   5: 14.405 s/op
Iteration   6: 14.344 s/op
Iteration   7: 14.437 s/op
Iteration   8: 14.347 s/op
Iteration   9: 14.496 s/op
Iteration  10: 14.903 s/op
Iteration  11: 14.474 s/op
Iteration  12: 14.427 s/op
Iteration  13: 14.698 s/op
Iteration  14: 14.503 s/op
Iteration  15: 14.506 s/op
Iteration  16: 14.480 s/op
Iteration  17: 14.685 s/op
Iteration  18: 14.428 s/op
Iteration  19: 14.432 s/op
Iteration  20: 14.680 s/op
Iteration  21: 14.411 s/op
Iteration  22: 14.663 s/op
Iteration  23: 14.593 s/op
Iteration  24: 14.430 s/op
Iteration  25: 15.000 s/op
Iteration  26: 14.458 s/op
Iteration  27: 14.393 s/op
Iteration  28: 14.435 s/op
Iteration  29: 14.416 s/op
Iteration  30: 14.687 s/op
Iteration  31: 14.451 s/op
Iteration  32: 14.381 s/op
Iteration  33: 14.686 s/op
Iteration  34: 14.701 s/op
Iteration  35: 14.406 s/op
Iteration  36: 15.004 s/op
Iteration  37: 14.519 s/op
Iteration  38: 14.949 s/op
Iteration  39: 14.490 s/op
Iteration  40: 14.413 s/op
Iteration  41: 14.450 s/op
Iteration  42: 14.450 s/op
Iteration  43: 14.669 s/op
Iteration  44: 14.403 s/op
Iteration  45: 14.472 s/op
Iteration  46: 15.014 s/op
Iteration  47: 14.562 s/op
Iteration  48: 14.497 s/op
Iteration  49: 14.429 s/op
Iteration  50: 14.430 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.580 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 30 
    [14.500, 14.750) = 13 
    [14.750, 15.000) = 3 
    [15.000, 15.250) = 3 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.344 s/op
     p(50.0000) =     14.473 s/op
     p(90.0000) =     14.945 s/op
     p(95.0000) =     15.008 s/op
     p(99.0000) =     16.229 s/op
     p(99.9000) =     16.229 s/op
     p(99.9900) =     16.229 s/op
     p(99.9990) =     16.229 s/op
     p(99.9999) =     16.229 s/op
    p(100.0000) =     16.229 s/op


# Run complete. Total time: 00:12:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.580 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_12.0.1_1564968990800.json
{"wallclock_times": [730.7609740180001], "core_cycle_counts": [[764333808890], [595965247742], [652356335039], [379436412128]], "aperf_counts": [[762620743406], [595758930729], [652191848207], [379235463733]], "mperf_counts": [[762631530996], [595759784830], [652191831924], [379235612880]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 03:48:41: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-05 03:48:42: INFO] Estimated completion (whole session): 2019-08-06 01:03:41 (21:14:58 from now)
[2019-08-05 03:48:42: INFO] 135 executions left in scheduler queue
[2019-08-05 03:48:42: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 03:48:42: INFO] Estimated completion (next execution): 2019-08-05 04:06:05 (0:17:23 from now)
[2019-08-05 03:48:42: INFO] Reboot in preparation for next execution
[2019-08-05 03:52:53: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 03:58:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.218 s/op
Iteration   2: 7.494 s/op
Iteration   3: 6.673 s/op
Iteration   4: 6.519 s/op
Iteration   5: 6.389 s/op
Iteration   6: 6.460 s/op
Iteration   7: 6.413 s/op
Iteration   8: 6.432 s/op
Iteration   9: 6.412 s/op
Iteration  10: 6.368 s/op
Iteration  11: 6.451 s/op
Iteration  12: 6.441 s/op
Iteration  13: 6.427 s/op
Iteration  14: 6.534 s/op
Iteration  15: 6.593 s/op
Iteration  16: 6.579 s/op
Iteration  17: 6.527 s/op
Iteration  18: 6.555 s/op
Iteration  19: 6.469 s/op
Iteration  20: 6.536 s/op
Iteration  21: 6.473 s/op
Iteration  22: 6.579 s/op
Iteration  23: 6.570 s/op
Iteration  24: 6.519 s/op
Iteration  25: 6.607 s/op
Iteration  26: 6.427 s/op
Iteration  27: 6.474 s/op
Iteration  28: 6.514 s/op
Iteration  29: 6.488 s/op
Iteration  30: 6.555 s/op
Iteration  31: 6.533 s/op
Iteration  32: 6.687 s/op
Iteration  33: 6.548 s/op
Iteration  34: 6.627 s/op
Iteration  35: 6.621 s/op
Iteration  36: 6.491 s/op
Iteration  37: 6.515 s/op
Iteration  38: 6.560 s/op
Iteration  39: 6.563 s/op
Iteration  40: 6.573 s/op
Iteration  41: 6.523 s/op
Iteration  42: 6.671 s/op
Iteration  43: 6.480 s/op
Iteration  44: 6.637 s/op
Iteration  45: 6.564 s/op
Iteration  46: 6.482 s/op
Iteration  47: 6.507 s/op
Iteration  48: 6.596 s/op
Iteration  49: 6.563 s/op
Iteration  50: 6.546 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.580 ?(99.9%) 0.140 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 17 
    [6.500, 6.750) = 31 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.368 s/op
     p(50.0000) =      6.533 s/op
     p(90.0000) =      6.667 s/op
     p(95.0000) =      7.050 s/op
     p(99.0000) =      8.218 s/op
     p(99.9000) =      8.218 s/op
     p(99.9900) =      8.218 s/op
     p(99.9990) =      8.218 s/op
     p(99.9999) =      8.218 s/op
    p(100.0000) =      8.218 s/op


# Run complete. Total time: 00:05:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.580 ? 0.140   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9-8u222-b10_1564969973686.json
{"wallclock_times": [330.40122928100004], "core_cycle_counts": [[392825491196], [188533722452], [242968576060], [283221493161]], "aperf_counts": [[392106110323], [188437884578], [242811017604], [283160063716]], "mperf_counts": [[392116396518], [188442421408], [242813272774], [283161288384]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 03:58:24: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 03:58:25: INFO] Estimated completion (whole session): 2019-08-06 01:05:13 (21:06:48 from now)
[2019-08-05 03:58:25: INFO] 134 executions left in scheduler queue
[2019-08-05 03:58:25: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 03:58:25: INFO] Estimated completion (next execution): 2019-08-05 04:06:30 (0:08:05 from now)
[2019-08-05 03:58:25: INFO] Reboot in preparation for next execution
[2019-08-05 04:03:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 04:10:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.625 s/op
Iteration   2: 9.664 s/op
Iteration   3: 9.605 s/op
Iteration   4: 9.095 s/op
Iteration   5: 8.814 s/op
Iteration   6: 8.893 s/op
Iteration   7: 8.776 s/op
Iteration   8: 8.706 s/op
Iteration   9: 8.717 s/op
Iteration  10: 8.746 s/op
Iteration  11: 8.663 s/op
Iteration  12: 8.698 s/op
Iteration  13: 8.721 s/op
Iteration  14: 8.639 s/op
Iteration  15: 8.663 s/op
Iteration  16: 8.767 s/op
Iteration  17: 8.712 s/op
Iteration  18: 8.750 s/op
Iteration  19: 8.752 s/op
Iteration  20: 8.761 s/op
Iteration  21: 8.703 s/op
Iteration  22: 8.728 s/op
Iteration  23: 8.904 s/op
Iteration  24: 8.917 s/op
Iteration  25: 8.975 s/op
Iteration  26: 8.914 s/op
Iteration  27: 8.935 s/op
Iteration  28: 8.935 s/op
Iteration  29: 8.966 s/op
Iteration  30: 8.918 s/op
Iteration  31: 8.956 s/op
Iteration  32: 8.975 s/op
Iteration  33: 8.937 s/op
Iteration  34: 8.937 s/op
Iteration  35: 8.939 s/op
Iteration  36: 8.918 s/op
Iteration  37: 8.930 s/op
Iteration  38: 8.890 s/op
Iteration  39: 8.880 s/op
Iteration  40: 8.964 s/op
Iteration  41: 8.969 s/op
Iteration  42: 8.932 s/op
Iteration  43: 8.963 s/op
Iteration  44: 8.931 s/op
Iteration  45: 8.928 s/op
Iteration  46: 8.934 s/op
Iteration  47: 8.934 s/op
Iteration  48: 8.927 s/op
Iteration  49: 8.956 s/op
Iteration  50: 9.003 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.929 ?(99.9%) 0.153 s/op

  Histogram, s/op:
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 12 
    [ 8.750,  9.000) = 33 
    [ 9.000,  9.250) = 2 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 2 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.639 s/op
     p(50.0000) =      8.923 s/op
     p(90.0000) =      9.000 s/op
     p(95.0000) =      9.632 s/op
     p(99.0000) =     10.625 s/op
     p(99.9000) =     10.625 s/op
     p(99.9900) =     10.625 s/op
     p(99.9990) =     10.625 s/op
     p(99.9999) =     10.625 s/op
    p(100.0000) =     10.625 s/op


# Run complete. Total time: 00:07:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  8.929 ? 0.153   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9-8u222-b10_1564970586425.json
{"wallclock_times": [447.70431434299996], "core_cycle_counts": [[545521267283], [369453885315], [360040654041], [247652700565]], "aperf_counts": [[544542691188], [369345078494], [359856325155], [247565307201]], "mperf_counts": [[544545357080], [369345053588], [359858147064], [247565565520]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 04:10:34: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 04:10:35: INFO] Estimated completion (whole session): 2019-08-06 01:06:14 (20:55:39 from now)
[2019-08-05 04:10:35: INFO] 133 executions left in scheduler queue
[2019-08-05 04:10:35: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 04:10:35: INFO] Estimated completion (next execution): 2019-08-05 04:21:08 (0:10:33 from now)
[2019-08-05 04:10:35: INFO] Reboot in preparation for next execution
[2019-08-05 04:15:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 04:20:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.439 s/op
Iteration   2: 6.195 s/op
Iteration   3: 5.755 s/op
Iteration   4: 5.767 s/op
Iteration   5: 5.918 s/op
Iteration   6: 5.755 s/op
Iteration   7: 5.754 s/op
Iteration   8: 5.754 s/op
Iteration   9: 5.760 s/op
Iteration  10: 5.741 s/op
Iteration  11: 5.717 s/op
Iteration  12: 5.772 s/op
Iteration  13: 5.722 s/op
Iteration  14: 5.790 s/op
Iteration  15: 5.722 s/op
Iteration  16: 5.721 s/op
Iteration  17: 5.727 s/op
Iteration  18: 5.734 s/op
Iteration  19: 5.735 s/op
Iteration  20: 5.742 s/op
Iteration  21: 5.753 s/op
Iteration  22: 5.741 s/op
Iteration  23: 5.730 s/op
Iteration  24: 5.705 s/op
Iteration  25: 5.683 s/op
Iteration  26: 5.696 s/op
Iteration  27: 5.745 s/op
Iteration  28: 5.809 s/op
Iteration  29: 5.774 s/op
Iteration  30: 5.774 s/op
Iteration  31: 5.707 s/op
Iteration  32: 5.679 s/op
Iteration  33: 5.707 s/op
Iteration  34: 5.752 s/op
Iteration  35: 5.746 s/op
Iteration  36: 5.712 s/op
Iteration  37: 5.744 s/op
Iteration  38: 5.738 s/op
Iteration  39: 5.690 s/op
Iteration  40: 5.718 s/op
Iteration  41: 5.723 s/op
Iteration  42: 5.736 s/op
Iteration  43: 5.749 s/op
Iteration  44: 5.752 s/op
Iteration  45: 5.749 s/op
Iteration  46: 5.715 s/op
Iteration  47: 5.710 s/op
Iteration  48: 5.687 s/op
Iteration  49: 5.741 s/op
Iteration  50: 5.657 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.781 ?(99.9%) 0.124 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 33 
    [5.750, 6.000) = 15 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.657 s/op
     p(50.0000) =      5.741 s/op
     p(90.0000) =      5.788 s/op
     p(95.0000) =      6.043 s/op
     p(99.0000) =      7.439 s/op
     p(99.9000) =      7.439 s/op
     p(99.9900) =      7.439 s/op
     p(99.9990) =      7.439 s/op
     p(99.9999) =      7.439 s/op
    p(100.0000) =      7.439 s/op


# Run complete. Total time: 00:04:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.781 ? 0.124   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9-8u222-b10_1564971314278.json
{"wallclock_times": [290.499964616], "core_cycle_counts": [[253905504779], [438484681727], [117176014853], [238232117930]], "aperf_counts": [[253082178272], [438357405717], [117025780811], [238135306955]], "mperf_counts": [[253087908260], [438357390972], [117025889538], [238136391540]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 04:20:04: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 04:20:05: INFO] Estimated completion (whole session): 2019-08-06 01:08:12 (20:48:06 from now)
[2019-08-05 04:20:05: INFO] 132 executions left in scheduler queue
[2019-08-05 04:20:05: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 04:20:05: INFO] Estimated completion (next execution): 2019-08-05 04:27:32 (0:07:26 from now)
[2019-08-05 04:20:05: INFO] Reboot in preparation for next execution
[2019-08-05 04:24:17: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 04:34:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.100 s/op
Iteration   2: 12.808 s/op
Iteration   3: 12.859 s/op
Iteration   4: 12.278 s/op
Iteration   5: 12.173 s/op
Iteration   6: 12.923 s/op
Iteration   7: 12.242 s/op
Iteration   8: 12.831 s/op
Iteration   9: 12.855 s/op
Iteration  10: 12.058 s/op
Iteration  11: 12.154 s/op
Iteration  12: 12.090 s/op
Iteration  13: 12.126 s/op
Iteration  14: 12.143 s/op
Iteration  15: 12.279 s/op
Iteration  16: 13.046 s/op
Iteration  17: 12.231 s/op
Iteration  18: 12.106 s/op
Iteration  19: 12.890 s/op
Iteration  20: 12.944 s/op
Iteration  21: 12.138 s/op
Iteration  22: 12.098 s/op
Iteration  23: 12.162 s/op
Iteration  24: 12.749 s/op
Iteration  25: 12.095 s/op
Iteration  26: 11.999 s/op
Iteration  27: 12.052 s/op
Iteration  28: 12.071 s/op
Iteration  29: 12.133 s/op
Iteration  30: 12.054 s/op
Iteration  31: 12.755 s/op
Iteration  32: 12.058 s/op
Iteration  33: 11.971 s/op
Iteration  34: 12.164 s/op
Iteration  35: 12.126 s/op
Iteration  36: 12.056 s/op
Iteration  37: 12.035 s/op
Iteration  38: 12.015 s/op
Iteration  39: 12.126 s/op
Iteration  40: 12.048 s/op
Iteration  41: 12.124 s/op
Iteration  42: 12.177 s/op
Iteration  43: 12.039 s/op
Iteration  44: 12.082 s/op
Iteration  45: 12.813 s/op
Iteration  46: 12.836 s/op
Iteration  47: 12.067 s/op
Iteration  48: 12.779 s/op
Iteration  49: 12.901 s/op
Iteration  50: 12.145 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.360 ?(99.9%) 0.211 s/op

  Histogram, s/op:
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 2 
    [12.000, 12.250) = 31 
    [12.250, 12.500) = 2 
    [12.500, 12.750) = 1 
    [12.750, 13.000) = 12 
    [13.000, 13.250) = 1 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 0 
    [14.000, 14.250) = 1 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.971 s/op
     p(50.0000) =     12.144 s/op
     p(90.0000) =     12.900 s/op
     p(95.0000) =     12.990 s/op
     p(99.0000) =     14.100 s/op
     p(99.9000) =     14.100 s/op
     p(99.9900) =     14.100 s/op
     p(99.9990) =     14.100 s/op
     p(99.9999) =     14.100 s/op
    p(100.0000) =     14.100 s/op


# Run complete. Total time: 00:10:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  12.360 ? 0.211   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9-8u222-b10_1564971857183.json
{"wallclock_times": [619.306122844], "core_cycle_counts": [[679434872145], [520401421849], [366896402730], [458746754010]], "aperf_counts": [[678030984443], [520176448014], [366773760395], [458641036121]], "mperf_counts": [[678034978810], [520178052828], [366773855150], [458642199858]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 04:34:36: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-05 04:34:37: INFO] Estimated completion (whole session): 2019-08-06 01:11:05 (20:36:27 from now)
[2019-08-05 04:34:37: INFO] 131 executions left in scheduler queue
[2019-08-05 04:34:37: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-08-05 04:34:37: INFO] Estimated completion (next execution): 2019-08-05 04:46:51 (0:12:14 from now)
[2019-08-05 04:34:37: INFO] Reboot in preparation for next execution
[2019-08-05 04:45:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.913 s/op
Iteration   2: 8.355 s/op
Iteration   3: 8.317 s/op
Iteration   4: 8.325 s/op
Iteration   5: 8.317 s/op
Iteration   6: 8.319 s/op
Iteration   7: 8.319 s/op
Iteration   8: 8.323 s/op
Iteration   9: 8.317 s/op
Iteration  10: 8.324 s/op
Iteration  11: 8.317 s/op
Iteration  12: 8.317 s/op
Iteration  13: 8.318 s/op
Iteration  14: 8.322 s/op
Iteration  15: 8.325 s/op
Iteration  16: 8.315 s/op
Iteration  17: 8.316 s/op
Iteration  18: 8.314 s/op
Iteration  19: 8.316 s/op
Iteration  20: 8.316 s/op
Iteration  21: 8.324 s/op
Iteration  22: 8.325 s/op
Iteration  23: 8.316 s/op
Iteration  24: 8.319 s/op
Iteration  25: 8.317 s/op
Iteration  26: 8.314 s/op
Iteration  27: 8.319 s/op
Iteration  28: 8.327 s/op
Iteration  29: 8.320 s/op
Iteration  30: 8.316 s/op
Iteration  31: 8.318 s/op
Iteration  32: 8.331 s/op
Iteration  33: 8.314 s/op
Iteration  34: 8.316 s/op
Iteration  35: 8.315 s/op
Iteration  36: 8.321 s/op
Iteration  37: 8.315 s/op
Iteration  38: 8.315 s/op
Iteration  39: 8.316 s/op
Iteration  40: 8.325 s/op
Iteration  41: 8.325 s/op
Iteration  42: 8.316 s/op
Iteration  43: 8.316 s/op
Iteration  44: 8.315 s/op
Iteration  45: 8.316 s/op
Iteration  46: 8.315 s/op
Iteration  47: 8.316 s/op
Iteration  48: 8.316 s/op
Iteration  49: 8.315 s/op
Iteration  50: 8.323 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      8.311 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [7.900, 7.950) = 1 
    [7.950, 8.000) = 0 
    [8.000, 8.050) = 0 
    [8.050, 8.100) = 0 
    [8.100, 8.150) = 0 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 0 
    [8.300, 8.350) = 48 

  Percentiles, s/op:
      p(0.0000) =      7.913 s/op
     p(50.0000) =      8.317 s/op
     p(90.0000) =      8.325 s/op
     p(95.0000) =      8.329 s/op
     p(99.0000) =      8.355 s/op
     p(99.9000) =      8.355 s/op
     p(99.9900) =      8.355 s/op
     p(99.9990) =      8.355 s/op
     p(99.9999) =      8.355 s/op
    p(100.0000) =      8.355 s/op


# Run complete. Total time: 00:06:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  8.311 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_graalvm-ce-19.1.1_1564972730584.json
{"wallclock_times": [416.459940337], "core_cycle_counts": [[322182731759], [300837576629], [453692640737], [271321410389]], "aperf_counts": [[321190109592], [300746610311], [453647545319], [271276926156]], "mperf_counts": [[321209017978], [300770364340], [453650230256], [271281747224]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 04:45:47: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-08-05 04:45:48: INFO] Estimated completion (whole session): 2019-08-06 01:13:14 (20:27:26 from now)
[2019-08-05 04:45:48: INFO] 130 executions left in scheduler queue
[2019-08-05 04:45:48: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-05 04:45:48: INFO] Estimated completion (next execution): 2019-08-05 04:55:01 (0:09:13 from now)
[2019-08-05 04:45:48: INFO] Reboot in preparation for next execution
[2019-08-05 04:50:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.342 s/op
Iteration   2: 0.855 s/op
Iteration   3: 0.836 s/op
Iteration   4: 0.926 s/op
Iteration   5: 0.835 s/op
Iteration   6: 0.839 s/op
Iteration   7: 0.833 s/op
Iteration   8: 0.839 s/op
Iteration   9: 0.831 s/op
Iteration  10: 0.834 s/op
Iteration  11: 0.830 s/op
Iteration  12: 0.837 s/op
Iteration  13: 0.835 s/op
Iteration  14: 0.833 s/op
Iteration  15: 0.833 s/op
Iteration  16: 0.839 s/op
Iteration  17: 0.837 s/op
Iteration  18: 0.838 s/op
Iteration  19: 0.829 s/op
Iteration  20: 0.838 s/op
Iteration  21: 0.834 s/op
Iteration  22: 0.828 s/op
Iteration  23: 0.840 s/op
Iteration  24: 0.832 s/op
Iteration  25: 0.834 s/op
Iteration  26: 0.834 s/op
Iteration  27: 0.836 s/op
Iteration  28: 0.831 s/op
Iteration  29: 0.832 s/op
Iteration  30: 0.837 s/op
Iteration  31: 0.833 s/op
Iteration  32: 0.837 s/op
Iteration  33: 0.832 s/op
Iteration  34: 0.835 s/op
Iteration  35: 0.838 s/op
Iteration  36: 0.832 s/op
Iteration  37: 0.834 s/op
Iteration  38: 0.835 s/op
Iteration  39: 0.832 s/op
Iteration  40: 0.833 s/op
Iteration  41: 0.835 s/op
Iteration  42: 0.840 s/op
Iteration  43: 0.840 s/op
Iteration  44: 0.830 s/op
Iteration  45: 0.837 s/op
Iteration  46: 0.836 s/op
Iteration  47: 0.834 s/op
Iteration  48: 0.833 s/op
Iteration  49: 0.831 s/op
Iteration  50: 0.834 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      0.847 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [0.800, 0.850) = 47 
    [0.850, 0.900) = 1 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.828 s/op
     p(50.0000) =      0.834 s/op
     p(90.0000) =      0.840 s/op
     p(95.0000) =      0.887 s/op
     p(99.0000) =      1.342 s/op
     p(99.9000) =      1.342 s/op
     p(99.9900) =      1.342 s/op
     p(99.9990) =      1.342 s/op
     p(99.9999) =      1.342 s/op
    p(100.0000) =      1.342 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.847 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ee-19.1.1_1564973401492.json
{"wallclock_times": [43.28544430100001], "core_cycle_counts": [[22855122269], [61343514642], [25843153934], [39604690511]], "aperf_counts": [[22673705539], [61321373307], [25822188266], [39587438451]], "mperf_counts": [[22710451230], [61322108084], [25829104682], [39591771686]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 04:50:44: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-05 04:50:45: INFO] Estimated completion (whole session): 2019-08-06 01:14:58 (20:24:13 from now)
[2019-08-05 04:50:45: INFO] 129 executions left in scheduler queue
[2019-08-05 04:50:45: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-05 04:50:45: INFO] Estimated completion (next execution): 2019-08-05 04:53:59 (0:03:13 from now)
[2019-08-05 04:50:45: INFO] Reboot in preparation for next execution
[2019-08-05 04:56:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.787 s/op
Iteration   2: 1.468 s/op
Iteration   3: 1.534 s/op
Iteration   4: 1.426 s/op
Iteration   5: 1.423 s/op
Iteration   6: 1.421 s/op
Iteration   7: 1.428 s/op
Iteration   8: 1.421 s/op
Iteration   9: 1.420 s/op
Iteration  10: 1.430 s/op
Iteration  11: 1.420 s/op
Iteration  12: 1.423 s/op
Iteration  13: 1.429 s/op
Iteration  14: 1.422 s/op
Iteration  15: 1.424 s/op
Iteration  16: 1.422 s/op
Iteration  17: 1.422 s/op
Iteration  18: 1.423 s/op
Iteration  19: 1.422 s/op
Iteration  20: 1.451 s/op
Iteration  21: 1.419 s/op
Iteration  22: 1.422 s/op
Iteration  23: 1.420 s/op
Iteration  24: 1.420 s/op
Iteration  25: 1.421 s/op
Iteration  26: 1.421 s/op
Iteration  27: 1.425 s/op
Iteration  28: 1.422 s/op
Iteration  29: 1.422 s/op
Iteration  30: 1.423 s/op
Iteration  31: 1.422 s/op
Iteration  32: 1.423 s/op
Iteration  33: 1.421 s/op
Iteration  34: 1.422 s/op
Iteration  35: 1.422 s/op
Iteration  36: 1.421 s/op
Iteration  37: 1.420 s/op
Iteration  38: 1.420 s/op
Iteration  39: 1.424 s/op
Iteration  40: 1.422 s/op
Iteration  41: 1.420 s/op
Iteration  42: 1.422 s/op
Iteration  43: 1.422 s/op
Iteration  44: 1.421 s/op
Iteration  45: 1.425 s/op
Iteration  46: 1.435 s/op
Iteration  47: 1.422 s/op
Iteration  48: 1.422 s/op
Iteration  49: 1.421 s/op
Iteration  50: 1.423 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.434 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.400, 1.425) = 39 
    [1.425, 1.450) = 7 
    [1.450, 1.475) = 2 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 1 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.419 s/op
     p(50.0000) =      1.422 s/op
     p(90.0000) =      1.435 s/op
     p(95.0000) =      1.498 s/op
     p(99.0000) =      1.787 s/op
     p(99.9000) =      1.787 s/op
     p(99.9900) =      1.787 s/op
     p(99.9990) =      1.787 s/op
     p(99.9999) =      1.787 s/op
    p(100.0000) =      1.787 s/op


# Run complete. Total time: 00:01:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.434 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ee-19.1.1_1564973698678.json
{"wallclock_times": [72.56026316], "core_cycle_counts": [[59809340649], [70899655016], [48267084470], [59421109587]], "aperf_counts": [[59631646042], [70876309649], [48246131746], [59408302423]], "mperf_counts": [[59665105628], [70877666560], [48248399990], [59424451570]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 04:56:11: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-05 04:56:12: INFO] Estimated completion (whole session): 2019-08-06 01:16:42 (20:20:30 from now)
[2019-08-05 04:56:12: INFO] 128 executions left in scheduler queue
[2019-08-05 04:56:12: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-08-05 04:56:12: INFO] Estimated completion (next execution): 2019-08-05 04:59:54 (0:03:42 from now)
[2019-08-05 04:56:12: INFO] Reboot in preparation for next execution
[2019-08-05 05:00:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 05:00:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 05:00:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 05:00:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 05:00:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 05:12:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.661 s/op
Iteration   2: 14.431 s/op
Iteration   3: 14.604 s/op
Iteration   4: 14.480 s/op
Iteration   5: 14.386 s/op
Iteration   6: 14.534 s/op
Iteration   7: 14.379 s/op
Iteration   8: 14.285 s/op
Iteration   9: 14.314 s/op
Iteration  10: 14.352 s/op
Iteration  11: 14.505 s/op
Iteration  12: 14.346 s/op
Iteration  13: 14.356 s/op
Iteration  14: 14.371 s/op
Iteration  15: 14.358 s/op
Iteration  16: 14.330 s/op
Iteration  17: 14.356 s/op
Iteration  18: 14.483 s/op
Iteration  19: 14.367 s/op
Iteration  20: 15.123 s/op
Iteration  21: 14.556 s/op
Iteration  22: 14.411 s/op
Iteration  23: 14.389 s/op
Iteration  24: 14.491 s/op
Iteration  25: 14.376 s/op
Iteration  26: 14.454 s/op
Iteration  27: 14.463 s/op
Iteration  28: 14.466 s/op
Iteration  29: 14.376 s/op
Iteration  30: 14.594 s/op
Iteration  31: 14.480 s/op
Iteration  32: 14.512 s/op
Iteration  33: 14.454 s/op
Iteration  34: 14.405 s/op
Iteration  35: 14.390 s/op
Iteration  36: 14.343 s/op
Iteration  37: 14.451 s/op
Iteration  38: 14.796 s/op
Iteration  39: 14.418 s/op
Iteration  40: 14.402 s/op
Iteration  41: 14.448 s/op
Iteration  42: 14.508 s/op
Iteration  43: 14.428 s/op
Iteration  44: 14.369 s/op
Iteration  45: 14.682 s/op
Iteration  46: 14.401 s/op
Iteration  47: 14.386 s/op
Iteration  48: 14.373 s/op
Iteration  49: 14.441 s/op
Iteration  50: 14.486 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     14.475 ?(99.9%) 0.108 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 13 
    [14.375, 14.500) = 26 
    [14.500, 14.625) = 7 
    [14.625, 14.750) = 1 
    [14.750, 14.875) = 1 
    [14.875, 15.000) = 0 
    [15.000, 15.125) = 1 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 1 
    [15.750, 15.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.285 s/op
     p(50.0000) =     14.423 s/op
     p(90.0000) =     14.603 s/op
     p(95.0000) =     14.943 s/op
     p(99.0000) =     15.661 s/op
     p(99.9000) =     15.661 s/op
     p(99.9900) =     15.661 s/op
     p(99.9990) =     15.661 s/op
     p(99.9999) =     15.661 s/op
    p(100.0000) =     15.661 s/op


# Run complete. Total time: 00:12:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.475 ? 0.108   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot_12.0.2_1564974037597.json
{"wallclock_times": [724.808964201], "core_cycle_counts": [[484256905047], [648618990211], [726023318910], [673376324272]], "aperf_counts": [[482082684518], [648297395273], [725727817222], [673119352367]], "mperf_counts": [[492320813652], [662842688474], [741850592258], [688931409208]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 05:12:42: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-08-05 05:12:43: INFO] Estimated completion (whole session): 2019-08-06 01:18:37 (20:05:54 from now)
[2019-08-05 05:12:43: INFO] 127 executions left in scheduler queue
[2019-08-05 05:12:43: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-08-05 05:12:43: INFO] Estimated completion (next execution): 2019-08-05 05:27:19 (0:14:35 from now)
[2019-08-05 05:12:43: INFO] Reboot in preparation for next execution
[2019-08-05 05:16:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 05:16:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 05:16:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 05:16:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 05:16:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 05:27:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.444 s/op
Iteration   2: 13.228 s/op
Iteration   3: 13.239 s/op
Iteration   4: 13.192 s/op
Iteration   5: 12.956 s/op
Iteration   6: 13.256 s/op
Iteration   7: 13.116 s/op
Iteration   8: 13.056 s/op
Iteration   9: 13.058 s/op
Iteration  10: 13.055 s/op
Iteration  11: 13.069 s/op
Iteration  12: 13.085 s/op
Iteration  13: 13.058 s/op
Iteration  14: 13.086 s/op
Iteration  15: 13.045 s/op
Iteration  16: 13.092 s/op
Iteration  17: 13.001 s/op
Iteration  18: 13.058 s/op
Iteration  19: 13.055 s/op
Iteration  20: 13.027 s/op
Iteration  21: 13.203 s/op
Iteration  22: 13.126 s/op
Iteration  23: 12.994 s/op
Iteration  24: 13.053 s/op
Iteration  25: 13.056 s/op
Iteration  26: 13.154 s/op
Iteration  27: 13.079 s/op
Iteration  28: 13.129 s/op
Iteration  29: 13.093 s/op
Iteration  30: 13.059 s/op
Iteration  31: 13.053 s/op
Iteration  32: 13.015 s/op
Iteration  33: 13.149 s/op
Iteration  34: 13.080 s/op
Iteration  35: 13.069 s/op
Iteration  36: 13.085 s/op
Iteration  37: 13.058 s/op
Iteration  38: 13.166 s/op
Iteration  39: 13.056 s/op
Iteration  40: 13.018 s/op
Iteration  41: 13.098 s/op
Iteration  42: 13.073 s/op
Iteration  43: 13.051 s/op
Iteration  44: 13.155 s/op
Iteration  45: 13.069 s/op
Iteration  46: 13.196 s/op
Iteration  47: 13.113 s/op
Iteration  48: 13.116 s/op
Iteration  49: 13.128 s/op
Iteration  50: 13.011 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.098 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [12.900, 12.950) = 0 
    [12.950, 13.000) = 2 
    [13.000, 13.050) = 6 
    [13.050, 13.100) = 25 
    [13.100, 13.150) = 7 
    [13.150, 13.200) = 5 
    [13.200, 13.250) = 3 
    [13.250, 13.300) = 1 
    [13.300, 13.350) = 0 
    [13.350, 13.400) = 0 
    [13.400, 13.450) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.956 s/op
     p(50.0000) =     13.076 s/op
     p(90.0000) =     13.202 s/op
     p(95.0000) =     13.247 s/op
     p(99.0000) =     13.444 s/op
     p(99.9000) =     13.444 s/op
     p(99.9900) =     13.444 s/op
     p(99.9990) =     13.444 s/op
     p(99.9999) =     13.444 s/op
    p(100.0000) =     13.444 s/op


# Run complete. Total time: 00:10:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.098 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_11.0.4_1564975014642.json
{"wallclock_times": [655.935570777], "core_cycle_counts": [[711883179768], [519951494256], [575175626584], [593946471213]], "aperf_counts": [[710327250616], [519740455951], [575057469513], [593862226536]], "mperf_counts": [[711100725972], [520006699422], [575397663510], [594478765632]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 05:27:50: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-08-05 05:27:51: INFO] Estimated completion (whole session): 2019-08-06 01:20:18 (19:52:27 from now)
[2019-08-05 05:27:51: INFO] 126 executions left in scheduler queue
[2019-08-05 05:27:51: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 05:27:51: INFO] Estimated completion (next execution): 2019-08-05 05:41:18 (0:13:26 from now)
[2019-08-05 05:27:51: INFO] Reboot in preparation for next execution
[2019-08-05 05:36:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.725 s/op
Iteration   2: 5.327 s/op
Iteration   3: 5.338 s/op
Iteration   4: 5.369 s/op
Iteration   5: 5.328 s/op
Iteration   6: 5.325 s/op
Iteration   7: 5.314 s/op
Iteration   8: 5.285 s/op
Iteration   9: 5.315 s/op
Iteration  10: 5.314 s/op
Iteration  11: 5.319 s/op
Iteration  12: 5.311 s/op
Iteration  13: 5.311 s/op
Iteration  14: 5.330 s/op
Iteration  15: 5.280 s/op
Iteration  16: 5.328 s/op
Iteration  17: 5.328 s/op
Iteration  18: 5.320 s/op
Iteration  19: 5.333 s/op
Iteration  20: 5.262 s/op
Iteration  21: 5.308 s/op
Iteration  22: 5.335 s/op
Iteration  23: 5.314 s/op
Iteration  24: 5.341 s/op
Iteration  25: 5.278 s/op
Iteration  26: 5.327 s/op
Iteration  27: 5.328 s/op
Iteration  28: 5.316 s/op
Iteration  29: 5.323 s/op
Iteration  30: 5.343 s/op
Iteration  31: 5.278 s/op
Iteration  32: 5.339 s/op
Iteration  33: 5.324 s/op
Iteration  34: 5.327 s/op
Iteration  35: 5.327 s/op
Iteration  36: 5.286 s/op
Iteration  37: 5.337 s/op
Iteration  38: 5.331 s/op
Iteration  39: 5.343 s/op
Iteration  40: 5.324 s/op
Iteration  41: 5.284 s/op
Iteration  42: 5.323 s/op
Iteration  43: 5.347 s/op
Iteration  44: 5.328 s/op
Iteration  45: 5.332 s/op
Iteration  46: 5.283 s/op
Iteration  47: 5.347 s/op
Iteration  48: 5.343 s/op
Iteration  49: 5.391 s/op
Iteration  50: 5.329 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.330 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 8 
    [5.300, 5.350) = 39 
    [5.350, 5.400) = 2 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 1 
    [5.750, 5.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.262 s/op
     p(50.0000) =      5.327 s/op
     p(90.0000) =      5.346 s/op
     p(95.0000) =      5.379 s/op
     p(99.0000) =      5.725 s/op
     p(99.9000) =      5.725 s/op
     p(99.9900) =      5.725 s/op
     p(99.9990) =      5.725 s/op
     p(99.9999) =      5.725 s/op
    p(100.0000) =      5.725 s/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.330 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_graalvm-ee-19.1.1_1564975923569.json
{"wallclock_times": [267.56821787], "core_cycle_counts": [[190070500521], [221304603352], [332853686067], [191322482673]], "aperf_counts": [[189344200896], [221226881468], [332804374608], [191266867892]], "mperf_counts": [[189374605264], [221227498210], [332816211668], [191275199998]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 05:36:31: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 05:36:32: INFO] Estimated completion (whole session): 2019-08-06 01:22:01 (19:45:29 from now)
[2019-08-05 05:36:32: INFO] 125 executions left in scheduler queue
[2019-08-05 05:36:32: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 05:36:32: INFO] Estimated completion (next execution): 2019-08-05 05:43:30 (0:06:57 from now)
[2019-08-05 05:36:32: INFO] Reboot in preparation for next execution
[2019-08-05 05:48:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.532 s/op
Iteration   2: 9.394 s/op
Iteration   3: 9.308 s/op
Iteration   4: 9.316 s/op
Iteration   5: 9.300 s/op
Iteration   6: 9.288 s/op
Iteration   7: 9.282 s/op
Iteration   8: 9.288 s/op
Iteration   9: 9.291 s/op
Iteration  10: 9.314 s/op
Iteration  11: 9.275 s/op
Iteration  12: 9.270 s/op
Iteration  13: 9.305 s/op
Iteration  14: 9.329 s/op
Iteration  15: 9.305 s/op
Iteration  16: 9.270 s/op
Iteration  17: 9.276 s/op
Iteration  18: 9.303 s/op
Iteration  19: 9.277 s/op
Iteration  20: 9.295 s/op
Iteration  21: 9.279 s/op
Iteration  22: 9.302 s/op
Iteration  23: 9.311 s/op
Iteration  24: 9.303 s/op
Iteration  25: 9.316 s/op
Iteration  26: 9.284 s/op
Iteration  27: 9.286 s/op
Iteration  28: 9.309 s/op
Iteration  29: 9.298 s/op
Iteration  30: 9.296 s/op
Iteration  31: 9.311 s/op
Iteration  32: 9.304 s/op
Iteration  33: 9.309 s/op
Iteration  34: 9.277 s/op
Iteration  35: 9.294 s/op
Iteration  36: 9.292 s/op
Iteration  37: 9.307 s/op
Iteration  38: 9.283 s/op
Iteration  39: 9.306 s/op
Iteration  40: 9.289 s/op
Iteration  41: 9.298 s/op
Iteration  42: 9.296 s/op
Iteration  43: 9.317 s/op
Iteration  44: 9.293 s/op
Iteration  45: 9.296 s/op
Iteration  46: 9.307 s/op
Iteration  47: 9.307 s/op
Iteration  48: 9.271 s/op
Iteration  49: 9.289 s/op
Iteration  50: 9.273 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.302 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [9.200, 9.225) = 0 
    [9.225, 9.250) = 0 
    [9.250, 9.275) = 5 
    [9.275, 9.300) = 23 
    [9.300, 9.325) = 19 
    [9.325, 9.350) = 1 
    [9.350, 9.375) = 0 
    [9.375, 9.400) = 1 
    [9.400, 9.425) = 0 
    [9.425, 9.450) = 0 
    [9.450, 9.475) = 0 
    [9.475, 9.500) = 0 
    [9.500, 9.525) = 0 
    [9.525, 9.550) = 1 
    [9.550, 9.575) = 0 
    [9.575, 9.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.270 s/op
     p(50.0000) =      9.297 s/op
     p(90.0000) =      9.316 s/op
     p(95.0000) =      9.358 s/op
     p(99.0000) =      9.532 s/op
     p(99.9000) =      9.532 s/op
     p(99.9900) =      9.532 s/op
     p(99.9990) =      9.532 s/op
     p(99.9999) =      9.532 s/op
    p(100.0000) =      9.532 s/op


# Run complete. Total time: 00:07:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.302 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_graalvm-ee-19.1.1_1564976458812.json
{"wallclock_times": [466.03239750499995], "core_cycle_counts": [[376880595683], [383553028860], [465512953105], [274738255553]], "aperf_counts": [[375810061911], [383473558213], [465477775341], [274709145126]], "mperf_counts": [[375833343064], [383475240652], [465478308896], [274715378230]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 05:48:44: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 05:48:45: INFO] Estimated completion (whole session): 2019-08-06 01:23:58 (19:35:12 from now)
[2019-08-05 05:48:45: INFO] 124 executions left in scheduler queue
[2019-08-05 05:48:45: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 05:48:45: INFO] Estimated completion (next execution): 2019-08-05 05:59:02 (0:10:16 from now)
[2019-08-05 05:48:45: INFO] Reboot in preparation for next execution
[2019-08-05 05:56:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.014 s/op
Iteration   2: 4.957 s/op
Iteration   3: 4.794 s/op
Iteration   4: 4.777 s/op
Iteration   5: 4.799 s/op
Iteration   6: 4.795 s/op
Iteration   7: 4.812 s/op
Iteration   8: 4.782 s/op
Iteration   9: 4.799 s/op
Iteration  10: 4.777 s/op
Iteration  11: 4.770 s/op
Iteration  12: 4.795 s/op
Iteration  13: 4.777 s/op
Iteration  14: 4.795 s/op
Iteration  15: 4.786 s/op
Iteration  16: 4.773 s/op
Iteration  17: 4.756 s/op
Iteration  18: 4.775 s/op
Iteration  19: 4.777 s/op
Iteration  20: 4.779 s/op
Iteration  21: 4.781 s/op
Iteration  22: 4.818 s/op
Iteration  23: 4.759 s/op
Iteration  24: 4.775 s/op
Iteration  25: 4.769 s/op
Iteration  26: 4.767 s/op
Iteration  27: 4.824 s/op
Iteration  28: 4.776 s/op
Iteration  29: 4.775 s/op
Iteration  30: 4.796 s/op
Iteration  31: 4.771 s/op
Iteration  32: 4.766 s/op
Iteration  33: 4.785 s/op
Iteration  34: 4.798 s/op
Iteration  35: 4.767 s/op
Iteration  36: 4.785 s/op
Iteration  37: 4.760 s/op
Iteration  38: 4.824 s/op
Iteration  39: 4.799 s/op
Iteration  40: 4.768 s/op
Iteration  41: 4.804 s/op
Iteration  42: 4.786 s/op
Iteration  43: 4.770 s/op
Iteration  44: 4.781 s/op
Iteration  45: 4.775 s/op
Iteration  46: 4.798 s/op
Iteration  47: 4.803 s/op
Iteration  48: 4.798 s/op
Iteration  49: 4.770 s/op
Iteration  50: 4.802 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.793 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [4.700, 4.725) = 0 
    [4.725, 4.750) = 0 
    [4.750, 4.775) = 15 
    [4.775, 4.800) = 26 
    [4.800, 4.825) = 7 
    [4.825, 4.850) = 0 
    [4.850, 4.875) = 0 
    [4.875, 4.900) = 0 
    [4.900, 4.925) = 0 
    [4.925, 4.950) = 0 
    [4.950, 4.975) = 1 
    [4.975, 5.000) = 0 
    [5.000, 5.025) = 1 
    [5.025, 5.050) = 0 
    [5.050, 5.075) = 0 
    [5.075, 5.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.756 s/op
     p(50.0000) =      4.782 s/op
     p(90.0000) =      4.818 s/op
     p(95.0000) =      4.884 s/op
     p(99.0000) =      5.014 s/op
     p(99.9000) =      5.014 s/op
     p(99.9900) =      5.014 s/op
     p(99.9990) =      5.014 s/op
     p(99.9999) =      5.014 s/op
    p(100.0000) =      5.014 s/op


# Run complete. Total time: 00:04:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.793 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_graalvm-ee-19.1.1_1564977178732.json
{"wallclock_times": [240.61186129100003], "core_cycle_counts": [[216799513735], [172761001708], [163898878950], [228722137408]], "aperf_counts": [[216252602389], [172709732226], [163868748266], [228698694606]], "mperf_counts": [[216274242618], [172726211672], [163870718204], [228699820632]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 05:56:59: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 05:57:00: INFO] Estimated completion (whole session): 2019-08-06 01:25:41 (19:28:41 from now)
[2019-08-05 05:57:00: INFO] 123 executions left in scheduler queue
[2019-08-05 05:57:00: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 05:57:00: INFO] Estimated completion (next execution): 2019-08-05 06:03:31 (0:06:30 from now)
[2019-08-05 05:57:00: INFO] Reboot in preparation for next execution
[2019-08-05 06:07:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.920 s/op
Iteration   2: 7.752 s/op
Iteration   3: 7.725 s/op
Iteration   4: 7.645 s/op
Iteration   5: 7.670 s/op
Iteration   6: 7.671 s/op
Iteration   7: 7.706 s/op
Iteration   8: 7.673 s/op
Iteration   9: 7.690 s/op
Iteration  10: 7.677 s/op
Iteration  11: 7.659 s/op
Iteration  12: 7.670 s/op
Iteration  13: 7.693 s/op
Iteration  14: 7.658 s/op
Iteration  15: 7.685 s/op
Iteration  16: 7.718 s/op
Iteration  17: 7.660 s/op
Iteration  18: 7.674 s/op
Iteration  19: 7.667 s/op
Iteration  20: 7.661 s/op
Iteration  21: 7.668 s/op
Iteration  22: 7.685 s/op
Iteration  23: 7.681 s/op
Iteration  24: 7.617 s/op
Iteration  25: 7.671 s/op
Iteration  26: 7.677 s/op
Iteration  27: 7.681 s/op
Iteration  28: 7.656 s/op
Iteration  29: 7.663 s/op
Iteration  30: 7.688 s/op
Iteration  31: 7.656 s/op
Iteration  32: 7.669 s/op
Iteration  33: 7.661 s/op
Iteration  34: 7.658 s/op
Iteration  35: 7.664 s/op
Iteration  36: 7.645 s/op
Iteration  37: 7.671 s/op
Iteration  38: 7.670 s/op
Iteration  39: 7.634 s/op
Iteration  40: 7.663 s/op
Iteration  41: 7.667 s/op
Iteration  42: 7.670 s/op
Iteration  43: 7.669 s/op
Iteration  44: 7.658 s/op
Iteration  45: 7.666 s/op
Iteration  46: 7.684 s/op
Iteration  47: 7.597 s/op
Iteration  48: 7.688 s/op
Iteration  49: 7.668 s/op
Iteration  50: 7.639 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.675 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [7.500, 7.550) = 0 
    [7.550, 7.600) = 1 
    [7.600, 7.650) = 5 
    [7.650, 7.700) = 39 
    [7.700, 7.750) = 3 
    [7.750, 7.800) = 1 
    [7.800, 7.850) = 0 
    [7.850, 7.900) = 0 
    [7.900, 7.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.597 s/op
     p(50.0000) =      7.669 s/op
     p(90.0000) =      7.705 s/op
     p(95.0000) =      7.737 s/op
     p(99.0000) =      7.920 s/op
     p(99.9000) =      7.920 s/op
     p(99.9900) =      7.920 s/op
     p(99.9990) =      7.920 s/op
     p(99.9999) =      7.920 s/op
    p(100.0000) =      7.920 s/op


# Run complete. Total time: 00:06:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  7.675 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_graalvm-ee-19.1.1_1564977673910.json
{"wallclock_times": [384.685855961], "core_cycle_counts": [[290046804160], [367814417207], [253986352359], [329485254345]], "aperf_counts": [[289130194720], [367744212364], [253954032890], [329460529793]], "mperf_counts": [[289147361924], [367745562864], [253955099492], [329465659852]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 06:07:38: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-05 06:07:39: INFO] Estimated completion (whole session): 2019-08-06 01:27:32 (19:19:53 from now)
[2019-08-05 06:07:39: INFO] 122 executions left in scheduler queue
[2019-08-05 06:07:39: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-08-05 06:07:39: INFO] Estimated completion (next execution): 2019-08-05 06:16:31 (0:08:51 from now)
[2019-08-05 06:07:39: INFO] Reboot in preparation for next execution
[2019-08-05 06:11:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 06:11:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 06:11:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 06:11:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 06:11:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 06:11:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 06:27:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.876 s/op
Iteration   2: 17.575 s/op
Iteration   3: 18.796 s/op
Iteration   4: 18.206 s/op
Iteration   5: 17.980 s/op
Iteration   6: 17.991 s/op
Iteration   7: 18.950 s/op
Iteration   8: 18.969 s/op
Iteration   9: 18.935 s/op
Iteration  10: 18.938 s/op
Iteration  11: 18.927 s/op
Iteration  12: 18.974 s/op
Iteration  13: 18.988 s/op
Iteration  14: 18.969 s/op
Iteration  15: 18.989 s/op
Iteration  16: 18.994 s/op
Iteration  17: 18.897 s/op
Iteration  18: 18.884 s/op
Iteration  19: 18.882 s/op
Iteration  20: 18.908 s/op
Iteration  21: 18.887 s/op
Iteration  22: 18.904 s/op
Iteration  23: 18.902 s/op
Iteration  24: 18.884 s/op
Iteration  25: 18.932 s/op
Iteration  26: 18.942 s/op
Iteration  27: 18.904 s/op
Iteration  28: 18.950 s/op
Iteration  29: 18.934 s/op
Iteration  30: 18.933 s/op
Iteration  31: 18.865 s/op
Iteration  32: 18.920 s/op
Iteration  33: 18.915 s/op
Iteration  34: 18.925 s/op
Iteration  35: 18.889 s/op
Iteration  36: 18.890 s/op
Iteration  37: 18.941 s/op
Iteration  38: 18.933 s/op
Iteration  39: 18.899 s/op
Iteration  40: 18.934 s/op
Iteration  41: 18.932 s/op
Iteration  42: 18.881 s/op
Iteration  43: 18.879 s/op
Iteration  44: 18.922 s/op
Iteration  45: 18.922 s/op
Iteration  46: 18.900 s/op
Iteration  47: 18.874 s/op
Iteration  48: 18.923 s/op
Iteration  49: 18.883 s/op
Iteration  50: 18.930 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     18.839 ?(99.9%) 0.138 s/op

  Histogram, s/op:
    [17.000, 17.125) = 0 
    [17.125, 17.250) = 0 
    [17.250, 17.375) = 0 
    [17.375, 17.500) = 0 
    [17.500, 17.625) = 1 
    [17.625, 17.750) = 0 
    [17.750, 17.875) = 0 
    [17.875, 18.000) = 2 
    [18.000, 18.125) = 0 
    [18.125, 18.250) = 1 
    [18.250, 18.375) = 0 
    [18.375, 18.500) = 0 
    [18.500, 18.625) = 0 
    [18.625, 18.750) = 0 
    [18.750, 18.875) = 3 

  Percentiles, s/op:
      p(0.0000) =     17.575 s/op
     p(50.0000) =     18.918 s/op
     p(90.0000) =     18.969 s/op
     p(95.0000) =     18.988 s/op
     p(99.0000) =     18.994 s/op
     p(99.9000) =     18.994 s/op
     p(99.9900) =     18.994 s/op
     p(99.9990) =     18.994 s/op
     p(99.9999) =     18.994 s/op
    p(100.0000) =     18.994 s/op


# Run complete. Total time: 00:15:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  18.839 ? 0.138   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_12.0.1_1564978312408.json
{"wallclock_times": [943.5641477490001], "core_cycle_counts": [[487579550767], [676965737360], [1048252309710], [841229222517]], "aperf_counts": [[484766291640], [676825275240], [1048055086702], [841120428004]], "mperf_counts": [[484777322168], [676827138400], [1048055989556], [841120711166]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 06:27:35: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-08-05 06:27:36: INFO] Estimated completion (whole session): 2019-08-06 01:28:35 (19:00:58 from now)
[2019-08-05 06:27:36: INFO] 121 executions left in scheduler queue
[2019-08-05 06:27:36: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-05 06:27:36: INFO] Estimated completion (next execution): 2019-08-05 06:46:11 (0:18:34 from now)
[2019-08-05 06:27:36: INFO] Reboot in preparation for next execution
[2019-08-05 06:31:50: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 06:31:50: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 06:31:50: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 06:31:50: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 06:31:50: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 06:33:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.625 s/op
Iteration   2: 2.482 s/op
Iteration   3: 2.067 s/op
Iteration   4: 2.041 s/op
Iteration   5: 2.103 s/op
Iteration   6: 2.032 s/op
Iteration   7: 2.171 s/op
Iteration   8: 2.174 s/op
Iteration   9: 2.164 s/op
Iteration  10: 2.171 s/op
Iteration  11: 2.189 s/op
Iteration  12: 2.174 s/op
Iteration  13: 2.163 s/op
Iteration  14: 2.003 s/op
Iteration  15: 2.125 s/op
Iteration  16: 2.173 s/op
Iteration  17: 2.168 s/op
Iteration  18: 2.047 s/op
Iteration  19: 2.177 s/op
Iteration  20: 2.176 s/op
Iteration  21: 2.166 s/op
Iteration  22: 2.177 s/op
Iteration  23: 2.182 s/op
Iteration  24: 2.171 s/op
Iteration  25: 2.165 s/op
Iteration  26: 2.170 s/op
Iteration  27: 2.178 s/op
Iteration  28: 2.173 s/op
Iteration  29: 2.168 s/op
Iteration  30: 2.176 s/op
Iteration  31: 2.181 s/op
Iteration  32: 2.176 s/op
Iteration  33: 2.175 s/op
Iteration  34: 2.179 s/op
Iteration  35: 2.175 s/op
Iteration  36: 2.180 s/op
Iteration  37: 2.170 s/op
Iteration  38: 2.041 s/op
Iteration  39: 2.167 s/op
Iteration  40: 2.169 s/op
Iteration  41: 2.173 s/op
Iteration  42: 2.170 s/op
Iteration  43: 2.097 s/op
Iteration  44: 2.172 s/op
Iteration  45: 2.169 s/op
Iteration  46: 2.165 s/op
Iteration  47: 1.997 s/op
Iteration  48: 2.138 s/op
Iteration  49: 2.173 s/op
Iteration  50: 2.162 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.164 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 5 
    [2.050, 2.100) = 2 
    [2.100, 2.150) = 3 
    [2.150, 2.200) = 37 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.997 s/op
     p(50.0000) =      2.171 s/op
     p(90.0000) =      2.181 s/op
     p(95.0000) =      2.321 s/op
     p(99.0000) =      2.625 s/op
     p(99.9000) =      2.625 s/op
     p(99.9900) =      2.625 s/op
     p(99.9990) =      2.625 s/op
     p(99.9999) =      2.625 s/op
    p(100.0000) =      2.625 s/op


# Run complete. Total time: 00:01:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.164 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_12.0.2_1564979510575.json
{"wallclock_times": [109.218599515], "core_cycle_counts": [[45563050440], [56003753219], [91501377873], [133377394073]], "aperf_counts": [[45172906446], [55970108857], [91484654099], [133361075031]], "mperf_counts": [[50434044086], [63094680276], [102200637770], [150954094862]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 06:33:39: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-05 06:33:40: INFO] Estimated completion (whole session): 2019-08-06 01:30:25 (18:56:45 from now)
[2019-08-05 06:33:40: INFO] 120 executions left in scheduler queue
[2019-08-05 06:33:40: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-05 06:33:40: INFO] Estimated completion (next execution): 2019-08-05 06:37:57 (0:04:16 from now)
[2019-08-05 06:33:40: INFO] Reboot in preparation for next execution
[2019-08-05 06:38:23: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 06:38:23: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 06:38:23: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 06:38:23: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 06:38:23: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 06:40:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.492 s/op
Iteration   2: 2.790 s/op
Iteration   3: 2.725 s/op
Iteration   4: 2.758 s/op
Iteration   5: 2.777 s/op
Iteration   6: 2.604 s/op
Iteration   7: 2.596 s/op
Iteration   8: 2.597 s/op
Iteration   9: 2.595 s/op
Iteration  10: 2.598 s/op
Iteration  11: 2.593 s/op
Iteration  12: 2.597 s/op
Iteration  13: 2.592 s/op
Iteration  14: 2.592 s/op
Iteration  15: 2.592 s/op
Iteration  16: 2.592 s/op
Iteration  17: 2.592 s/op
Iteration  18: 2.591 s/op
Iteration  19: 2.590 s/op
Iteration  20: 2.593 s/op
Iteration  21: 2.591 s/op
Iteration  22: 2.594 s/op
Iteration  23: 2.598 s/op
Iteration  24: 2.594 s/op
Iteration  25: 2.594 s/op
Iteration  26: 2.590 s/op
Iteration  27: 2.590 s/op
Iteration  28: 2.592 s/op
Iteration  29: 2.590 s/op
Iteration  30: 2.590 s/op
Iteration  31: 2.590 s/op
Iteration  32: 2.597 s/op
Iteration  33: 2.589 s/op
Iteration  34: 2.590 s/op
Iteration  35: 2.593 s/op
Iteration  36: 2.590 s/op
Iteration  37: 2.590 s/op
Iteration  38: 2.589 s/op
Iteration  39: 2.598 s/op
Iteration  40: 2.588 s/op
Iteration  41: 2.589 s/op
Iteration  42: 2.592 s/op
Iteration  43: 2.590 s/op
Iteration  44: 2.589 s/op
Iteration  45: 2.589 s/op
Iteration  46: 2.593 s/op
Iteration  47: 2.589 s/op
Iteration  48: 2.588 s/op
Iteration  49: 2.588 s/op
Iteration  50: 2.590 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.604 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [2.400, 2.425) = 0 
    [2.425, 2.450) = 0 
    [2.450, 2.475) = 0 
    [2.475, 2.500) = 1 
    [2.500, 2.525) = 0 
    [2.525, 2.550) = 0 
    [2.550, 2.575) = 0 
    [2.575, 2.600) = 44 
    [2.600, 2.625) = 1 
    [2.625, 2.650) = 0 
    [2.650, 2.675) = 0 
    [2.675, 2.700) = 0 
    [2.700, 2.725) = 0 
    [2.725, 2.750) = 1 
    [2.750, 2.775) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.492 s/op
     p(50.0000) =      2.592 s/op
     p(90.0000) =      2.603 s/op
     p(95.0000) =      2.767 s/op
     p(99.0000) =      2.790 s/op
     p(99.9000) =      2.790 s/op
     p(99.9900) =      2.790 s/op
     p(99.9990) =      2.790 s/op
     p(99.9999) =      2.790 s/op
    p(100.0000) =      2.790 s/op


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.604 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_12.0.2_1564979903207.json
{"wallclock_times": [131.16422776699997], "core_cycle_counts": [[82734521336], [74540678834], [164940651578], [104669451958]], "aperf_counts": [[82381021613], [74503202211], [164919971319], [104652648840]], "mperf_counts": [[82748922548], [74557447746], [164983667478], [104734436148]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 06:40:34: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-05 06:40:35: INFO] Estimated completion (whole session): 2019-08-06 01:33:00 (18:52:24 from now)
[2019-08-05 06:40:35: INFO] 119 executions left in scheduler queue
[2019-08-05 06:40:35: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-08-05 06:40:35: INFO] Estimated completion (next execution): 2019-08-05 06:45:06 (0:04:30 from now)
[2019-08-05 06:40:35: INFO] Reboot in preparation for next execution
[2019-08-05 06:45:01: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 06:45:01: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 06:45:01: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 06:45:01: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 06:45:01: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 06:45:02: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 06:56:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.905 s/op
Iteration   2: 12.889 s/op
Iteration   3: 13.394 s/op
Iteration   4: 13.147 s/op
Iteration   5: 13.178 s/op
Iteration   6: 13.114 s/op
Iteration   7: 13.223 s/op
Iteration   8: 13.282 s/op
Iteration   9: 13.264 s/op
Iteration  10: 13.223 s/op
Iteration  11: 13.216 s/op
Iteration  12: 13.231 s/op
Iteration  13: 13.259 s/op
Iteration  14: 13.293 s/op
Iteration  15: 13.222 s/op
Iteration  16: 13.250 s/op
Iteration  17: 13.215 s/op
Iteration  18: 13.216 s/op
Iteration  19: 13.204 s/op
Iteration  20: 13.245 s/op
Iteration  21: 13.244 s/op
Iteration  22: 13.313 s/op
Iteration  23: 13.210 s/op
Iteration  24: 13.218 s/op
Iteration  25: 13.224 s/op
Iteration  26: 13.233 s/op
Iteration  27: 13.223 s/op
Iteration  28: 13.248 s/op
Iteration  29: 13.250 s/op
Iteration  30: 13.213 s/op
Iteration  31: 13.243 s/op
Iteration  32: 13.211 s/op
Iteration  33: 13.237 s/op
Iteration  34: 13.242 s/op
Iteration  35: 13.226 s/op
Iteration  36: 13.266 s/op
Iteration  37: 13.272 s/op
Iteration  38: 13.243 s/op
Iteration  39: 13.244 s/op
Iteration  40: 13.239 s/op
Iteration  41: 13.279 s/op
Iteration  42: 13.205 s/op
Iteration  43: 13.206 s/op
Iteration  44: 13.268 s/op
Iteration  45: 13.231 s/op
Iteration  46: 13.248 s/op
Iteration  47: 13.216 s/op
Iteration  48: 13.287 s/op
Iteration  49: 13.239 s/op
Iteration  50: 13.256 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.244 ?(99.9%) 0.057 s/op

  Histogram, s/op:
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 
    [12.875, 13.000) = 1 
    [13.000, 13.125) = 1 
    [13.125, 13.250) = 34 
    [13.250, 13.375) = 12 
    [13.375, 13.500) = 1 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.889 s/op
     p(50.0000) =     13.238 s/op
     p(90.0000) =     13.287 s/op
     p(95.0000) =     13.350 s/op
     p(99.0000) =     13.905 s/op
     p(99.9000) =     13.905 s/op
     p(99.9900) =     13.905 s/op
     p(99.9990) =     13.905 s/op
     p(99.9999) =     13.905 s/op
    p(100.0000) =     13.905 s/op


# Run complete. Total time: 00:11:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.244 ? 0.057   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_12.0.1_1564980301934.json
{"wallclock_times": [663.777692238], "core_cycle_counts": [[501009993385], [396733649331], [624674693138], [628874264734]], "aperf_counts": [[499197930911], [396610400340], [624518079963], [628734476338]], "mperf_counts": [[499207331580], [396610972612], [624518117686], [628734525028]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 06:56:05: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-08-05 06:56:06: INFO] Estimated completion (whole session): 2019-08-06 01:34:26 (18:38:19 from now)
[2019-08-05 06:56:06: INFO] 118 executions left in scheduler queue
[2019-08-05 06:56:06: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-08-05 06:56:06: INFO] Estimated completion (next execution): 2019-08-05 07:09:56 (0:13:49 from now)
[2019-08-05 06:56:06: INFO] Reboot in preparation for next execution
[2019-08-05 07:10:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.282 s/op
Iteration   2: 12.001 s/op
Iteration   3: 11.866 s/op
Iteration   4: 11.916 s/op
Iteration   5: 12.131 s/op
Iteration   6: 11.829 s/op
Iteration   7: 11.894 s/op
Iteration   8: 11.926 s/op
Iteration   9: 11.945 s/op
Iteration  10: 12.033 s/op
Iteration  11: 11.860 s/op
Iteration  12: 12.564 s/op
Iteration  13: 11.903 s/op
Iteration  14: 11.889 s/op
Iteration  15: 11.892 s/op
Iteration  16: 12.008 s/op
Iteration  17: 11.800 s/op
Iteration  18: 11.863 s/op
Iteration  19: 11.918 s/op
Iteration  20: 11.958 s/op
Iteration  21: 11.935 s/op
Iteration  22: 12.007 s/op
Iteration  23: 12.469 s/op
Iteration  24: 11.801 s/op
Iteration  25: 11.864 s/op
Iteration  26: 11.907 s/op
Iteration  27: 11.904 s/op
Iteration  28: 12.027 s/op
Iteration  29: 12.031 s/op
Iteration  30: 11.820 s/op
Iteration  31: 11.942 s/op
Iteration  32: 11.939 s/op
Iteration  33: 11.927 s/op
Iteration  34: 12.445 s/op
Iteration  35: 11.919 s/op
Iteration  36: 12.041 s/op
Iteration  37: 11.846 s/op
Iteration  38: 11.895 s/op
Iteration  39: 11.915 s/op
Iteration  40: 11.911 s/op
Iteration  41: 11.993 s/op
Iteration  42: 12.052 s/op
Iteration  43: 11.824 s/op
Iteration  44: 11.905 s/op
Iteration  45: 12.516 s/op
Iteration  46: 11.914 s/op
Iteration  47: 11.969 s/op
Iteration  48: 11.975 s/op
Iteration  49: 11.834 s/op
Iteration  50: 11.860 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.977 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [11.800, 11.850) = 7 
    [11.850, 11.900) = 9 
    [11.900, 11.950) = 16 
    [11.950, 12.000) = 4 
    [12.000, 12.050) = 7 
    [12.050, 12.100) = 1 
    [12.100, 12.150) = 1 
    [12.150, 12.200) = 0 
    [12.200, 12.250) = 0 
    [12.250, 12.300) = 1 
    [12.300, 12.350) = 0 
    [12.350, 12.400) = 0 
    [12.400, 12.450) = 1 
    [12.450, 12.500) = 1 
    [12.500, 12.550) = 1 
    [12.550, 12.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     11.800 s/op
     p(50.0000) =     11.918 s/op
     p(90.0000) =     12.267 s/op
     p(95.0000) =     12.490 s/op
     p(99.0000) =     12.564 s/op
     p(99.9000) =     12.564 s/op
     p(99.9900) =     12.564 s/op
     p(99.9990) =     12.564 s/op
     p(99.9999) =     12.564 s/op
    p(100.0000) =     12.564 s/op


# Run complete. Total time: 00:09:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.977 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot-8u222-b10_1564981219647.json
{"wallclock_times": [600.0546954060001], "core_cycle_counts": [[594469674231], [477202556535], [617064245087], [529146457059]], "aperf_counts": [[592860585686], [477013321502], [616984589718], [529066874627]], "mperf_counts": [[592863950846], [477018521670], [616993595398], [529068562586]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 07:10:19: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-08-05 07:10:20: INFO] Estimated completion (whole session): 2019-08-06 01:36:10 (18:25:49 from now)
[2019-08-05 07:10:20: INFO] 117 executions left in scheduler queue
[2019-08-05 07:10:20: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-08-05 07:10:20: INFO] Estimated completion (next execution): 2019-08-05 07:22:50 (0:12:30 from now)
[2019-08-05 07:10:20: INFO] Reboot in preparation for next execution
[2019-08-05 07:14:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 07:14:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 07:14:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 07:14:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 07:14:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 07:22:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.249 s/op
Iteration   2: 9.056 s/op
Iteration   3: 8.940 s/op
Iteration   4: 8.941 s/op
Iteration   5: 8.946 s/op
Iteration   6: 8.932 s/op
Iteration   7: 8.934 s/op
Iteration   8: 8.940 s/op
Iteration   9: 8.936 s/op
Iteration  10: 8.941 s/op
Iteration  11: 8.922 s/op
Iteration  12: 8.932 s/op
Iteration  13: 8.936 s/op
Iteration  14: 8.927 s/op
Iteration  15: 8.948 s/op
Iteration  16: 8.942 s/op
Iteration  17: 8.931 s/op
Iteration  18: 8.923 s/op
Iteration  19: 8.917 s/op
Iteration  20: 8.925 s/op
Iteration  21: 8.935 s/op
Iteration  22: 8.939 s/op
Iteration  23: 8.934 s/op
Iteration  24: 8.925 s/op
Iteration  25: 8.950 s/op
Iteration  26: 8.940 s/op
Iteration  27: 8.926 s/op
Iteration  28: 8.917 s/op
Iteration  29: 8.924 s/op
Iteration  30: 8.934 s/op
Iteration  31: 8.920 s/op
Iteration  32: 8.921 s/op
Iteration  33: 8.925 s/op
Iteration  34: 8.929 s/op
Iteration  35: 8.922 s/op
Iteration  36: 8.924 s/op
Iteration  37: 8.925 s/op
Iteration  38: 8.927 s/op
Iteration  39: 8.920 s/op
Iteration  40: 8.919 s/op
Iteration  41: 8.917 s/op
Iteration  42: 8.924 s/op
Iteration  43: 8.922 s/op
Iteration  44: 8.923 s/op
Iteration  45: 8.912 s/op
Iteration  46: 8.921 s/op
Iteration  47: 8.937 s/op
Iteration  48: 8.927 s/op
Iteration  49: 8.919 s/op
Iteration  50: 8.934 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      8.938 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [8.900, 8.925) = 19 
    [8.925, 8.950) = 29 
    [8.950, 8.975) = 0 
    [8.975, 9.000) = 0 
    [9.000, 9.025) = 0 
    [9.025, 9.050) = 0 
    [9.050, 9.075) = 1 
    [9.075, 9.100) = 0 
    [9.100, 9.125) = 0 
    [9.125, 9.150) = 0 
    [9.150, 9.175) = 0 
    [9.175, 9.200) = 0 
    [9.200, 9.225) = 0 
    [9.225, 9.250) = 1 
    [9.250, 9.275) = 0 
    [9.275, 9.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.912 s/op
     p(50.0000) =      8.927 s/op
     p(90.0000) =      8.945 s/op
     p(95.0000) =      8.997 s/op
     p(99.0000) =      9.249 s/op
     p(99.9000) =      9.249 s/op
     p(99.9900) =      9.249 s/op
     p(99.9990) =      9.249 s/op
     p(99.9999) =      9.249 s/op
    p(100.0000) =      9.249 s/op


# Run complete. Total time: 00:07:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  8.938 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot_12.0.2_1564982074263.json
{"wallclock_times": [447.91973234], "core_cycle_counts": [[225484250960], [242856410532], [733330999863], [239269370955]], "aperf_counts": [[224211637938], [242755225722], [733269414719], [239203550827]], "mperf_counts": [[225078787750], [243213737388], [734720928878], [239767646586]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 07:22:02: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-08-05 07:22:03: INFO] Estimated completion (whole session): 2019-08-06 01:37:50 (18:15:47 from now)
[2019-08-05 07:22:03: INFO] 116 executions left in scheduler queue
[2019-08-05 07:22:03: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-05 07:22:03: INFO] Estimated completion (next execution): 2019-08-05 07:32:03 (0:10:00 from now)
[2019-08-05 07:22:03: INFO] Reboot in preparation for next execution
[2019-08-05 07:27:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.104 s/op
Iteration   2: 1.582 s/op
Iteration   3: 1.560 s/op
Iteration   4: 1.646 s/op
Iteration   5: 1.681 s/op
Iteration   6: 1.671 s/op
Iteration   7: 1.678 s/op
Iteration   8: 1.671 s/op
Iteration   9: 1.686 s/op
Iteration  10: 1.677 s/op
Iteration  11: 1.673 s/op
Iteration  12: 1.678 s/op
Iteration  13: 1.673 s/op
Iteration  14: 1.675 s/op
Iteration  15: 1.680 s/op
Iteration  16: 1.678 s/op
Iteration  17: 1.681 s/op
Iteration  18: 1.681 s/op
Iteration  19: 1.692 s/op
Iteration  20: 1.677 s/op
Iteration  21: 1.678 s/op
Iteration  22: 1.677 s/op
Iteration  23: 1.679 s/op
Iteration  24: 1.679 s/op
Iteration  25: 1.679 s/op
Iteration  26: 1.679 s/op
Iteration  27: 1.679 s/op
Iteration  28: 1.673 s/op
Iteration  29: 1.676 s/op
Iteration  30: 1.673 s/op
Iteration  31: 1.679 s/op
Iteration  32: 1.679 s/op
Iteration  33: 1.678 s/op
Iteration  34: 1.680 s/op
Iteration  35: 1.681 s/op
Iteration  36: 1.678 s/op
Iteration  37: 1.678 s/op
Iteration  38: 1.680 s/op
Iteration  39: 1.678 s/op
Iteration  40: 1.680 s/op
Iteration  41: 1.676 s/op
Iteration  42: 1.677 s/op
Iteration  43: 1.679 s/op
Iteration  44: 1.677 s/op
Iteration  45: 1.678 s/op
Iteration  46: 1.682 s/op
Iteration  47: 1.678 s/op
Iteration  48: 1.679 s/op
Iteration  49: 1.676 s/op
Iteration  50: 1.674 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.682 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 2 
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 46 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.560 s/op
     p(50.0000) =      1.678 s/op
     p(90.0000) =      1.681 s/op
     p(95.0000) =      1.689 s/op
     p(99.0000) =      2.104 s/op
     p(99.9000) =      2.104 s/op
     p(99.9900) =      2.104 s/op
     p(99.9990) =      2.104 s/op
     p(99.9999) =      2.104 s/op
    p(100.0000) =      2.104 s/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.682 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot-8u222-b10_1564982777566.json
{"wallclock_times": [84.96603156999998], "core_cycle_counts": [[96255334262], [57748491462], [41434549946], [92165738629]], "aperf_counts": [[96033140193], [57703283813], [41407426859], [92147303081]], "mperf_counts": [[96054026024], [57707911756], [41407687484], [92147387600]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 07:27:42: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-05 07:27:43: INFO] Estimated completion (whole session): 2019-08-06 01:39:30 (18:11:47 from now)
[2019-08-05 07:27:43: INFO] 115 executions left in scheduler queue
[2019-08-05 07:27:43: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-05 07:27:43: INFO] Estimated completion (next execution): 2019-08-05 07:31:41 (0:03:57 from now)
[2019-08-05 07:27:43: INFO] Reboot in preparation for next execution
[2019-08-05 07:33:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.120 s/op
Iteration   2: 1.662 s/op
Iteration   3: 2.034 s/op
Iteration   4: 1.890 s/op
Iteration   5: 1.884 s/op
Iteration   6: 1.871 s/op
Iteration   7: 1.905 s/op
Iteration   8: 1.903 s/op
Iteration   9: 1.922 s/op
Iteration  10: 1.870 s/op
Iteration  11: 1.910 s/op
Iteration  12: 1.881 s/op
Iteration  13: 1.932 s/op
Iteration  14: 1.877 s/op
Iteration  15: 1.873 s/op
Iteration  16: 1.872 s/op
Iteration  17: 1.875 s/op
Iteration  18: 1.892 s/op
Iteration  19: 1.893 s/op
Iteration  20: 1.861 s/op
Iteration  21: 1.913 s/op
Iteration  22: 1.876 s/op
Iteration  23: 1.870 s/op
Iteration  24: 1.876 s/op
Iteration  25: 1.892 s/op
Iteration  26: 1.882 s/op
Iteration  27: 1.894 s/op
Iteration  28: 1.920 s/op
Iteration  29: 1.896 s/op
Iteration  30: 1.879 s/op
Iteration  31: 1.868 s/op
Iteration  32: 1.869 s/op
Iteration  33: 1.900 s/op
Iteration  34: 1.879 s/op
Iteration  35: 1.889 s/op
Iteration  36: 1.870 s/op
Iteration  37: 1.879 s/op
Iteration  38: 1.931 s/op
Iteration  39: 1.869 s/op
Iteration  40: 1.896 s/op
Iteration  41: 1.872 s/op
Iteration  42: 1.877 s/op
Iteration  43: 1.917 s/op
Iteration  44: 1.903 s/op
Iteration  45: 1.870 s/op
Iteration  46: 1.873 s/op
Iteration  47: 1.898 s/op
Iteration  48: 1.884 s/op
Iteration  49: 1.911 s/op
Iteration  50: 1.902 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.892 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 35 
    [1.900, 1.950) = 12 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.662 s/op
     p(50.0000) =      1.884 s/op
     p(90.0000) =      1.922 s/op
     p(95.0000) =      1.978 s/op
     p(99.0000) =      2.120 s/op
     p(99.9000) =      2.120 s/op
     p(99.9900) =      2.120 s/op
     p(99.9990) =      2.120 s/op
     p(99.9999) =      2.120 s/op
    p(100.0000) =      2.120 s/op


# Run complete. Total time: 00:01:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.892 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot-8u222-b10_1564983120049.json
{"wallclock_times": [95.42110814900002], "core_cycle_counts": [[73321473819], [95232190486], [6201709101], [136605270354]], "aperf_counts": [[73092980218], [95211154290], [6180906245], [136593996935]], "mperf_counts": [[73110956678], [95211373034], [6181007750], [136612564462]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 07:33:35: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-08-05 07:33:36: INFO] Estimated completion (whole session): 2019-08-06 01:41:13 (18:07:36 from now)
[2019-08-05 07:33:36: INFO] 114 executions left in scheduler queue
[2019-08-05 07:33:36: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-08-05 07:33:36: INFO] Estimated completion (next execution): 2019-08-05 07:37:44 (0:04:08 from now)
[2019-08-05 07:33:36: INFO] Reboot in preparation for next execution
[2019-08-05 07:42:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.097 s/op
Iteration   2: 5.594 s/op
Iteration   3: 6.060 s/op
Iteration   4: 5.908 s/op
Iteration   5: 5.806 s/op
Iteration   6: 5.851 s/op
Iteration   7: 5.796 s/op
Iteration   8: 5.827 s/op
Iteration   9: 5.825 s/op
Iteration  10: 5.702 s/op
Iteration  11: 5.709 s/op
Iteration  12: 5.871 s/op
Iteration  13: 6.541 s/op
Iteration  14: 5.799 s/op
Iteration  15: 5.700 s/op
Iteration  16: 5.853 s/op
Iteration  17: 5.716 s/op
Iteration  18: 5.852 s/op
Iteration  19: 5.710 s/op
Iteration  20: 5.867 s/op
Iteration  21: 5.721 s/op
Iteration  22: 5.869 s/op
Iteration  23: 5.725 s/op
Iteration  24: 6.918 s/op
Iteration  25: 5.662 s/op
Iteration  26: 5.849 s/op
Iteration  27: 5.705 s/op
Iteration  28: 5.906 s/op
Iteration  29: 5.731 s/op
Iteration  30: 5.737 s/op
Iteration  31: 5.855 s/op
Iteration  32: 5.710 s/op
Iteration  33: 5.862 s/op
Iteration  34: 5.742 s/op
Iteration  35: 6.859 s/op
Iteration  36: 5.668 s/op
Iteration  37: 5.850 s/op
Iteration  38: 5.713 s/op
Iteration  39: 5.878 s/op
Iteration  40: 5.717 s/op
Iteration  41: 5.895 s/op
Iteration  42: 5.712 s/op
Iteration  43: 5.733 s/op
Iteration  44: 5.736 s/op
Iteration  45: 5.729 s/op
Iteration  46: 6.804 s/op
Iteration  47: 5.662 s/op
Iteration  48: 5.880 s/op
Iteration  49: 5.716 s/op
Iteration  50: 5.872 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      5.870 ?(99.9%) 0.144 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 22 
    [5.750, 5.875) = 16 
    [5.875, 6.000) = 5 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 2 

  Percentiles, s/op:
      p(0.0000) =      5.594 s/op
     p(50.0000) =      5.802 s/op
     p(90.0000) =      6.093 s/op
     p(95.0000) =      6.829 s/op
     p(99.0000) =      6.918 s/op
     p(99.9000) =      6.918 s/op
     p(99.9900) =      6.918 s/op
     p(99.9990) =      6.918 s/op
     p(99.9999) =      6.918 s/op
    p(100.0000) =      6.918 s/op


# Run complete. Total time: 00:04:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.870 ? 0.144   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_graalvm-ee-19.1.1_1564983470796.json
{"wallclock_times": [294.836719136], "core_cycle_counts": [[331708439029], [266245195442], [292152305045], [273545805621]], "aperf_counts": [[331036879302], [266163861872], [292091460793], [273499849974]], "mperf_counts": [[331063658202], [266168626752], [292092031508], [273505083936]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 07:42:45: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-08-05 07:42:46: INFO] Estimated completion (whole session): 2019-08-06 01:42:43 (17:59:57 from now)
[2019-08-05 07:42:46: INFO] 113 executions left in scheduler queue
[2019-08-05 07:42:46: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-08-05 07:42:46: INFO] Estimated completion (next execution): 2019-08-05 07:50:18 (0:07:32 from now)
[2019-08-05 07:42:46: INFO] Reboot in preparation for next execution
[2019-08-05 07:51:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.755 s/op
Iteration   2: 5.094 s/op
Iteration   3: 5.189 s/op
Iteration   4: 5.079 s/op
Iteration   5: 5.093 s/op
Iteration   6: 5.123 s/op
Iteration   7: 5.136 s/op
Iteration   8: 5.130 s/op
Iteration   9: 5.109 s/op
Iteration  10: 5.094 s/op
Iteration  11: 5.136 s/op
Iteration  12: 5.067 s/op
Iteration  13: 5.123 s/op
Iteration  14: 5.135 s/op
Iteration  15: 5.148 s/op
Iteration  16: 5.107 s/op
Iteration  17: 5.126 s/op
Iteration  18: 5.135 s/op
Iteration  19: 5.123 s/op
Iteration  20: 5.121 s/op
Iteration  21: 5.104 s/op
Iteration  22: 5.084 s/op
Iteration  23: 5.150 s/op
Iteration  24: 5.110 s/op
Iteration  25: 5.131 s/op
Iteration  26: 5.086 s/op
Iteration  27: 5.120 s/op
Iteration  28: 5.120 s/op
Iteration  29: 5.131 s/op
Iteration  30: 5.136 s/op
Iteration  31: 5.119 s/op
Iteration  32: 5.128 s/op
Iteration  33: 5.099 s/op
Iteration  34: 5.091 s/op
Iteration  35: 5.121 s/op
Iteration  36: 5.139 s/op
Iteration  37: 5.122 s/op
Iteration  38: 5.133 s/op
Iteration  39: 5.125 s/op
Iteration  40: 5.138 s/op
Iteration  41: 5.100 s/op
Iteration  42: 5.015 s/op
Iteration  43: 5.125 s/op
Iteration  44: 5.112 s/op
Iteration  45: 5.116 s/op
Iteration  46: 5.097 s/op
Iteration  47: 5.097 s/op
Iteration  48: 5.132 s/op
Iteration  49: 5.113 s/op
Iteration  50: 5.143 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.129 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [5.000, 5.050) = 1 
    [5.050, 5.100) = 12 
    [5.100, 5.150) = 34 
    [5.150, 5.200) = 2 
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 0 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.015 s/op
     p(50.0000) =      5.121 s/op
     p(90.0000) =      5.143 s/op
     p(95.0000) =      5.168 s/op
     p(99.0000) =      5.755 s/op
     p(99.9000) =      5.755 s/op
     p(99.9900) =      5.755 s/op
     p(99.9990) =      5.755 s/op
     p(99.9999) =      5.755 s/op
    p(100.0000) =      5.755 s/op


# Run complete. Total time: 00:04:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.129 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_graalvm-ce-19.1.1_1564984019660.json
{"wallclock_times": [257.334516682], "core_cycle_counts": [[179492776299], [282070714526], [240879179505], [128850660204]], "aperf_counts": [[178860845326], [282001137778], [240810831912], [128805890768]], "mperf_counts": [[178895599098], [282004120756], [240822697984], [128811084830]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 07:51:17: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-08-05 07:51:17: INFO] Estimated completion (whole session): 2019-08-06 01:44:19 (17:53:01 from now)
[2019-08-05 07:51:17: INFO] 112 executions left in scheduler queue
[2019-08-05 07:51:17: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 07:51:17: INFO] Estimated completion (next execution): 2019-08-05 07:58:09 (0:06:51 from now)
[2019-08-05 07:51:17: INFO] Reboot in preparation for next execution
[2019-08-05 07:54:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 07:54:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 07:54:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 07:54:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 07:54:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 08:03:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.509 s/op
Iteration   2: 11.115 s/op
Iteration   3: 10.831 s/op
Iteration   4: 10.642 s/op
Iteration   5: 10.658 s/op
Iteration   6: 10.664 s/op
Iteration   7: 10.635 s/op
Iteration   8: 10.610 s/op
Iteration   9: 10.615 s/op
Iteration  10: 10.657 s/op
Iteration  11: 10.632 s/op
Iteration  12: 10.624 s/op
Iteration  13: 10.606 s/op
Iteration  14: 10.612 s/op
Iteration  15: 10.609 s/op
Iteration  16: 10.615 s/op
Iteration  17: 10.638 s/op
Iteration  18: 10.601 s/op
Iteration  19: 10.632 s/op
Iteration  20: 10.632 s/op
Iteration  21: 10.608 s/op
Iteration  22: 10.614 s/op
Iteration  23: 10.658 s/op
Iteration  24: 10.602 s/op
Iteration  25: 10.619 s/op
Iteration  26: 10.607 s/op
Iteration  27: 10.657 s/op
Iteration  28: 10.692 s/op
Iteration  29: 10.657 s/op
Iteration  30: 10.609 s/op
Iteration  31: 10.658 s/op
Iteration  32: 10.616 s/op
Iteration  33: 10.629 s/op
Iteration  34: 10.611 s/op
Iteration  35: 10.664 s/op
Iteration  36: 10.633 s/op
Iteration  37: 10.637 s/op
Iteration  38: 10.645 s/op
Iteration  39: 10.618 s/op
Iteration  40: 10.638 s/op
Iteration  41: 10.633 s/op
Iteration  42: 10.616 s/op
Iteration  43: 10.639 s/op
Iteration  44: 10.626 s/op
Iteration  45: 10.648 s/op
Iteration  46: 10.635 s/op
Iteration  47: 10.627 s/op
Iteration  48: 10.612 s/op
Iteration  49: 10.621 s/op
Iteration  50: 10.616 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.642 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [10.500, 10.550) = 1 
    [10.550, 10.600) = 0 
    [10.600, 10.650) = 38 
    [10.650, 10.700) = 9 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 1 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 0 
    [11.100, 11.150) = 1 
    [11.150, 11.200) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.509 s/op
     p(50.0000) =     10.630 s/op
     p(90.0000) =     10.663 s/op
     p(95.0000) =     10.755 s/op
     p(99.0000) =     11.115 s/op
     p(99.9000) =     11.115 s/op
     p(99.9900) =     11.115 s/op
     p(99.9990) =     11.115 s/op
     p(99.9999) =     11.115 s/op
    p(100.0000) =     11.115 s/op


# Run complete. Total time: 00:08:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.642 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot_11.0.4_1564984488595.json
{"wallclock_times": [533.1625952740001], "core_cycle_counts": [[145852160035], [586369319970], [345863443212], [645039318935]], "aperf_counts": [[144238686041], [586296489675], [345814021319], [644996693574]], "mperf_counts": [[144475465714], [586746956368], [345856001604], [645021395128]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 08:03:41: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 08:03:42: INFO] Estimated completion (whole session): 2019-08-06 01:45:26 (17:41:43 from now)
[2019-08-05 08:03:42: INFO] 111 executions left in scheduler queue
[2019-08-05 08:03:42: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 08:03:42: INFO] Estimated completion (next execution): 2019-08-05 08:15:03 (0:11:20 from now)
[2019-08-05 08:03:42: INFO] Reboot in preparation for next execution
[2019-08-05 08:08:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 08:08:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 08:08:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 08:08:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 08:08:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 08:14:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.139 s/op
Iteration   2: 7.135 s/op
Iteration   3: 7.617 s/op
Iteration   4: 7.381 s/op
Iteration   5: 7.368 s/op
Iteration   6: 7.337 s/op
Iteration   7: 7.333 s/op
Iteration   8: 7.320 s/op
Iteration   9: 7.319 s/op
Iteration  10: 7.327 s/op
Iteration  11: 7.341 s/op
Iteration  12: 7.296 s/op
Iteration  13: 7.318 s/op
Iteration  14: 7.368 s/op
Iteration  15: 7.314 s/op
Iteration  16: 7.354 s/op
Iteration  17: 7.368 s/op
Iteration  18: 7.341 s/op
Iteration  19: 7.359 s/op
Iteration  20: 7.375 s/op
Iteration  21: 7.343 s/op
Iteration  22: 7.342 s/op
Iteration  23: 7.325 s/op
Iteration  24: 7.347 s/op
Iteration  25: 7.296 s/op
Iteration  26: 7.335 s/op
Iteration  27: 6.677 s/op
Iteration  28: 7.322 s/op
Iteration  29: 7.357 s/op
Iteration  30: 7.367 s/op
Iteration  31: 7.351 s/op
Iteration  32: 7.372 s/op
Iteration  33: 7.349 s/op
Iteration  34: 7.336 s/op
Iteration  35: 7.345 s/op
Iteration  36: 7.346 s/op
Iteration  37: 7.335 s/op
Iteration  38: 7.345 s/op
Iteration  39: 7.353 s/op
Iteration  40: 7.340 s/op
Iteration  41: 7.349 s/op
Iteration  42: 7.353 s/op
Iteration  43: 7.350 s/op
Iteration  44: 7.380 s/op
Iteration  45: 7.361 s/op
Iteration  46: 7.338 s/op
Iteration  47: 7.381 s/op
Iteration  48: 7.343 s/op
Iteration  49: 7.354 s/op
Iteration  50: 7.371 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.329 ?(99.9%) 0.055 s/op

  Histogram, s/op:
    [6.600, 6.700) = 1 
    [6.700, 6.800) = 0 
    [6.800, 6.900) = 0 
    [6.900, 7.000) = 0 
    [7.000, 7.100) = 0 
    [7.100, 7.200) = 2 
    [7.200, 7.300) = 2 
    [7.300, 7.400) = 44 
    [7.400, 7.500) = 0 
    [7.500, 7.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.677 s/op
     p(50.0000) =      7.345 s/op
     p(90.0000) =      7.374 s/op
     p(95.0000) =      7.381 s/op
     p(99.0000) =      7.617 s/op
     p(99.9000) =      7.617 s/op
     p(99.9900) =      7.617 s/op
     p(99.9990) =      7.617 s/op
     p(99.9999) =      7.617 s/op
    p(100.0000) =      7.617 s/op


# Run complete. Total time: 00:06:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.329 ? 0.055   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot_11.0.4_1564985290494.json
{"wallclock_times": [367.637731162], "core_cycle_counts": [[270469152480], [251258871841], [411286524022], [122876437093]], "aperf_counts": [[269593850483], [251162982972], [411227726808], [122823924234]], "mperf_counts": [[305658242656], [284263759076], [468063921856], [138839092848]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 08:14:18: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 08:14:19: INFO] Estimated completion (whole session): 2019-08-06 01:47:22 (17:33:02 from now)
[2019-08-05 08:14:19: INFO] 110 executions left in scheduler queue
[2019-08-05 08:14:19: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 08:14:19: INFO] Estimated completion (next execution): 2019-08-05 08:22:58 (0:08:39 from now)
[2019-08-05 08:14:19: INFO] Reboot in preparation for next execution
[2019-08-05 08:18:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 08:18:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 08:18:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 08:18:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 08:18:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 08:24:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.332 s/op
Iteration   2: 7.022 s/op
Iteration   3: 7.280 s/op
Iteration   4: 7.041 s/op
Iteration   5: 7.022 s/op
Iteration   6: 6.996 s/op
Iteration   7: 7.029 s/op
Iteration   8: 6.916 s/op
Iteration   9: 7.026 s/op
Iteration  10: 6.909 s/op
Iteration  11: 7.026 s/op
Iteration  12: 7.054 s/op
Iteration  13: 6.906 s/op
Iteration  14: 7.028 s/op
Iteration  15: 6.904 s/op
Iteration  16: 7.010 s/op
Iteration  17: 7.023 s/op
Iteration  18: 6.902 s/op
Iteration  19: 7.025 s/op
Iteration  20: 6.902 s/op
Iteration  21: 7.016 s/op
Iteration  22: 7.035 s/op
Iteration  23: 6.882 s/op
Iteration  24: 7.003 s/op
Iteration  25: 6.999 s/op
Iteration  26: 7.007 s/op
Iteration  27: 6.984 s/op
Iteration  28: 6.970 s/op
Iteration  29: 6.962 s/op
Iteration  30: 6.943 s/op
Iteration  31: 7.039 s/op
Iteration  32: 6.969 s/op
Iteration  33: 6.932 s/op
Iteration  34: 6.976 s/op
Iteration  35: 6.871 s/op
Iteration  36: 7.013 s/op
Iteration  37: 6.886 s/op
Iteration  38: 7.019 s/op
Iteration  39: 7.047 s/op
Iteration  40: 6.894 s/op
Iteration  41: 7.019 s/op
Iteration  42: 6.896 s/op
Iteration  43: 7.029 s/op
Iteration  44: 7.023 s/op
Iteration  45: 6.921 s/op
Iteration  46: 7.015 s/op
Iteration  47: 6.872 s/op
Iteration  48: 7.019 s/op
Iteration  49: 7.015 s/op
Iteration  50: 7.004 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.992 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 6 
    [6.900, 6.950) = 9 
    [6.950, 7.000) = 7 
    [7.000, 7.050) = 25 
    [7.050, 7.100) = 1 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 1 
    [7.300, 7.350) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.871 s/op
     p(50.0000) =      7.009 s/op
     p(90.0000) =      7.041 s/op
     p(95.0000) =      7.156 s/op
     p(99.0000) =      7.332 s/op
     p(99.9000) =      7.332 s/op
     p(99.9900) =      7.332 s/op
     p(99.9990) =      7.332 s/op
     p(99.9999) =      7.332 s/op
    p(100.0000) =      7.332 s/op


# Run complete. Total time: 00:05:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.992 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot_11.0.4_1564985913571.json
{"wallclock_times": [350.835026017], "core_cycle_counts": [[374897565050], [247901260618], [336185660125], [291678977540]], "aperf_counts": [[374091756190], [247790418747], [336132513501], [291633771266]], "mperf_counts": [[374383942606], [247950692512], [336198408136], [291680555070]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 08:24:24: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 08:24:25: INFO] Estimated completion (whole session): 2019-08-06 01:49:08 (17:24:43 from now)
[2019-08-05 08:24:25: INFO] 109 executions left in scheduler queue
[2019-08-05 08:24:25: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 08:24:25: INFO] Estimated completion (next execution): 2019-08-05 08:32:45 (0:08:20 from now)
[2019-08-05 08:24:25: INFO] Reboot in preparation for next execution
[2019-08-05 08:28:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 08:28:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 08:28:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 08:28:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 08:28:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 08:42:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 20.555 s/op
Iteration   2: 16.588 s/op
Iteration   3: 17.056 s/op
Iteration   4: 16.270 s/op
Iteration   5: 16.256 s/op
Iteration   6: 16.242 s/op
Iteration   7: 16.305 s/op
Iteration   8: 16.275 s/op
Iteration   9: 16.238 s/op
Iteration  10: 16.335 s/op
Iteration  11: 16.324 s/op
Iteration  12: 16.214 s/op
Iteration  13: 16.296 s/op
Iteration  14: 16.341 s/op
Iteration  15: 16.240 s/op
Iteration  16: 16.273 s/op
Iteration  17: 16.281 s/op
Iteration  18: 16.230 s/op
Iteration  19: 16.249 s/op
Iteration  20: 16.251 s/op
Iteration  21: 16.274 s/op
Iteration  22: 16.231 s/op
Iteration  23: 16.216 s/op
Iteration  24: 16.286 s/op
Iteration  25: 16.255 s/op
Iteration  26: 16.377 s/op
Iteration  27: 16.291 s/op
Iteration  28: 16.231 s/op
Iteration  29: 16.241 s/op
Iteration  30: 16.309 s/op
Iteration  31: 16.303 s/op
Iteration  32: 16.257 s/op
Iteration  33: 16.259 s/op
Iteration  34: 16.314 s/op
Iteration  35: 16.233 s/op
Iteration  36: 16.242 s/op
Iteration  37: 16.361 s/op
Iteration  38: 16.253 s/op
Iteration  39: 16.253 s/op
Iteration  40: 16.275 s/op
Iteration  41: 16.250 s/op
Iteration  42: 16.244 s/op
Iteration  43: 16.321 s/op
Iteration  44: 16.310 s/op
Iteration  45: 16.261 s/op
Iteration  46: 16.239 s/op
Iteration  47: 16.315 s/op
Iteration  48: 16.235 s/op
Iteration  49: 16.205 s/op
Iteration  50: 16.299 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.379 ?(99.9%) 0.305 s/op

  Histogram, s/op:
    [16.000, 16.500) = 47 
    [16.500, 17.000) = 1 
    [17.000, 17.500) = 1 
    [17.500, 18.000) = 0 
    [18.000, 18.500) = 0 
    [18.500, 19.000) = 0 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.205 s/op
     p(50.0000) =     16.265 s/op
     p(90.0000) =     16.359 s/op
     p(95.0000) =     16.798 s/op
     p(99.0000) =     20.555 s/op
     p(99.9000) =     20.555 s/op
     p(99.9900) =     20.555 s/op
     p(99.9990) =     20.555 s/op
     p(99.9999) =     20.555 s/op
    p(100.0000) =     20.555 s/op


# Run complete. Total time: 00:13:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.379 ? 0.305   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot_11.0.4_1564986519194.json
{"wallclock_times": [820.06825762], "core_cycle_counts": [[522250181590], [838661780787], [857884488824], [424463770224]], "aperf_counts": [[520141086308], [838509988937], [857822026010], [424343991607]], "mperf_counts": [[521053316998], [838591248008], [859148265974], [424460902680]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 08:42:19: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-08-05 08:42:20: INFO] Estimated completion (whole session): 2019-08-06 01:50:45 (17:08:24 from now)
[2019-08-05 08:42:20: INFO] 108 executions left in scheduler queue
[2019-08-05 08:42:20: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-05 08:42:20: INFO] Estimated completion (next execution): 2019-08-05 08:58:34 (0:16:14 from now)
[2019-08-05 08:42:20: INFO] Reboot in preparation for next execution
[2019-08-05 08:46:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 08:46:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 08:46:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 08:46:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 08:46:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 08:46:35: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 08:48:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.873 s/op
Iteration   2: 2.287 s/op
Iteration   3: 2.628 s/op
Iteration   4: 2.042 s/op
Iteration   5: 2.046 s/op
Iteration   6: 1.977 s/op
Iteration   7: 1.985 s/op
Iteration   8: 1.977 s/op
Iteration   9: 1.969 s/op
Iteration  10: 1.941 s/op
Iteration  11: 1.952 s/op
Iteration  12: 1.952 s/op
Iteration  13: 1.947 s/op
Iteration  14: 1.942 s/op
Iteration  15: 1.974 s/op
Iteration  16: 1.988 s/op
Iteration  17: 1.999 s/op
Iteration  18: 1.985 s/op
Iteration  19: 1.986 s/op
Iteration  20: 1.999 s/op
Iteration  21: 1.984 s/op
Iteration  22: 1.987 s/op
Iteration  23: 1.998 s/op
Iteration  24: 2.009 s/op
Iteration  25: 1.985 s/op
Iteration  26: 1.987 s/op
Iteration  27: 1.992 s/op
Iteration  28: 1.981 s/op
Iteration  29: 1.966 s/op
Iteration  30: 1.982 s/op
Iteration  31: 2.004 s/op
Iteration  32: 1.977 s/op
Iteration  33: 1.988 s/op
Iteration  34: 1.977 s/op
Iteration  35: 1.983 s/op
Iteration  36: 1.983 s/op
Iteration  37: 1.990 s/op
Iteration  38: 1.985 s/op
Iteration  39: 1.998 s/op
Iteration  40: 2.001 s/op
Iteration  41: 1.988 s/op
Iteration  42: 1.973 s/op
Iteration  43: 1.988 s/op
Iteration  44: 1.955 s/op
Iteration  45: 1.986 s/op
Iteration  46: 2.006 s/op
Iteration  47: 1.988 s/op
Iteration  48: 1.984 s/op
Iteration  49: 1.994 s/op
Iteration  50: 1.990 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.021 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [1.900, 2.000) = 41 
    [2.000, 2.100) = 6 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 1 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.941 s/op
     p(50.0000) =      1.986 s/op
     p(90.0000) =      2.039 s/op
     p(95.0000) =      2.441 s/op
     p(99.0000) =      2.873 s/op
     p(99.9000) =      2.873 s/op
     p(99.9900) =      2.873 s/op
     p(99.9990) =      2.873 s/op
     p(99.9999) =      2.873 s/op
    p(100.0000) =      2.873 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.021 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9_11.0.4_1564987594832.json
{"wallclock_times": [102.69515502500002], "core_cycle_counts": [[177159384653], [47478653169], [54390274043], [79366753426]], "aperf_counts": [[176922943495], [47405208765], [54292424494], [79287695638]], "mperf_counts": [[176925832898], [47405326092], [54293975100], [79288594370]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 08:48:17: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-05 08:48:18: INFO] Estimated completion (whole session): 2019-08-06 01:52:29 (17:04:10 from now)
[2019-08-05 08:48:18: INFO] 107 executions left in scheduler queue
[2019-08-05 08:48:18: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-05 08:48:18: INFO] Estimated completion (next execution): 2019-08-05 08:52:32 (0:04:13 from now)
[2019-08-05 08:48:18: INFO] Reboot in preparation for next execution
[2019-08-05 08:52:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 08:52:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 08:52:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 08:52:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 08:52:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 08:52:33: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 08:55:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.716 s/op
Iteration   2: 3.427 s/op
Iteration   3: 3.374 s/op
Iteration   4: 3.300 s/op
Iteration   5: 3.306 s/op
Iteration   6: 3.315 s/op
Iteration   7: 3.260 s/op
Iteration   8: 3.241 s/op
Iteration   9: 3.177 s/op
Iteration  10: 3.177 s/op
Iteration  11: 3.164 s/op
Iteration  12: 3.173 s/op
Iteration  13: 3.174 s/op
Iteration  14: 3.202 s/op
Iteration  15: 3.171 s/op
Iteration  16: 3.154 s/op
Iteration  17: 3.129 s/op
Iteration  18: 3.185 s/op
Iteration  19: 3.136 s/op
Iteration  20: 3.154 s/op
Iteration  21: 3.159 s/op
Iteration  22: 3.148 s/op
Iteration  23: 3.160 s/op
Iteration  24: 3.178 s/op
Iteration  25: 3.136 s/op
Iteration  26: 3.170 s/op
Iteration  27: 3.178 s/op
Iteration  28: 3.156 s/op
Iteration  29: 3.184 s/op
Iteration  30: 3.180 s/op
Iteration  31: 3.156 s/op
Iteration  32: 3.165 s/op
Iteration  33: 3.172 s/op
Iteration  34: 3.117 s/op
Iteration  35: 3.154 s/op
Iteration  36: 3.169 s/op
Iteration  37: 3.166 s/op
Iteration  38: 3.188 s/op
Iteration  39: 3.191 s/op
Iteration  40: 3.161 s/op
Iteration  41: 3.184 s/op
Iteration  42: 3.138 s/op
Iteration  43: 3.163 s/op
Iteration  44: 3.168 s/op
Iteration  45: 3.174 s/op
Iteration  46: 3.210 s/op
Iteration  47: 3.174 s/op
Iteration  48: 3.148 s/op
Iteration  49: 3.177 s/op
Iteration  50: 3.202 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.199 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [3.100, 3.150) = 7 
    [3.150, 3.200) = 32 
    [3.200, 3.250) = 4 
    [3.250, 3.300) = 2 
    [3.300, 3.350) = 2 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 1 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 1 
    [3.750, 3.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.117 s/op
     p(50.0000) =      3.173 s/op
     p(90.0000) =      3.306 s/op
     p(95.0000) =      3.398 s/op
     p(99.0000) =      3.716 s/op
     p(99.9000) =      3.716 s/op
     p(99.9900) =      3.716 s/op
     p(99.9990) =      3.716 s/op
     p(99.9999) =      3.716 s/op
    p(100.0000) =      3.716 s/op


# Run complete. Total time: 00:02:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.199 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9_11.0.4_1564987953029.json
{"wallclock_times": [161.464837937], "core_cycle_counts": [[125434842021], [142883179232], [115583846494], [163990312924]], "aperf_counts": [[124969168194], [142808210478], [115518042437], [163941854764]], "mperf_counts": [[124973937128], [142808938722], [115518036716], [163941850460]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 08:55:14: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-08-05 08:55:15: INFO] Estimated completion (whole session): 2019-08-06 01:54:08 (16:58:53 from now)
[2019-08-05 08:55:15: INFO] 106 executions left in scheduler queue
[2019-08-05 08:55:15: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 08:55:15: INFO] Estimated completion (next execution): 2019-08-05 09:00:30 (0:05:14 from now)
[2019-08-05 08:55:15: INFO] Reboot in preparation for next execution
[2019-08-05 09:02:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.342 s/op
Iteration   2: 3.158 s/op
Iteration   3: 3.009 s/op
Iteration   4: 3.082 s/op
Iteration   5: 3.000 s/op
Iteration   6: 3.014 s/op
Iteration   7: 3.000 s/op
Iteration   8: 3.015 s/op
Iteration   9: 3.003 s/op
Iteration  10: 2.996 s/op
Iteration  11: 3.009 s/op
Iteration  12: 3.000 s/op
Iteration  13: 3.015 s/op
Iteration  14: 3.012 s/op
Iteration  15: 3.023 s/op
Iteration  16: 3.033 s/op
Iteration  17: 2.987 s/op
Iteration  18: 3.014 s/op
Iteration  19: 2.997 s/op
Iteration  20: 3.003 s/op
Iteration  21: 2.982 s/op
Iteration  22: 2.995 s/op
Iteration  23: 2.995 s/op
Iteration  24: 3.004 s/op
Iteration  25: 3.024 s/op
Iteration  26: 2.985 s/op
Iteration  27: 3.001 s/op
Iteration  28: 2.998 s/op
Iteration  29: 2.997 s/op
Iteration  30: 3.004 s/op
Iteration  31: 3.002 s/op
Iteration  32: 2.994 s/op
Iteration  33: 2.993 s/op
Iteration  34: 3.000 s/op
Iteration  35: 3.003 s/op
Iteration  36: 3.004 s/op
Iteration  37: 2.997 s/op
Iteration  38: 2.999 s/op
Iteration  39: 2.997 s/op
Iteration  40: 2.996 s/op
Iteration  41: 3.004 s/op
Iteration  42: 3.004 s/op
Iteration  43: 3.008 s/op
Iteration  44: 2.990 s/op
Iteration  45: 3.017 s/op
Iteration  46: 3.000 s/op
Iteration  47: 2.986 s/op
Iteration  48: 2.998 s/op
Iteration  49: 3.002 s/op
Iteration  50: 2.997 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.014 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 23 
    [3.000, 3.050) = 24 
    [3.050, 3.100) = 1 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 1 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.982 s/op
     p(50.0000) =      3.002 s/op
     p(90.0000) =      3.024 s/op
     p(95.0000) =      3.116 s/op
     p(99.0000) =      3.342 s/op
     p(99.9000) =      3.342 s/op
     p(99.9900) =      3.342 s/op
     p(99.9990) =      3.342 s/op
     p(99.9999) =      3.342 s/op
    p(100.0000) =      3.342 s/op


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.014 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_graalvm-ee-19.1.1_1564988369472.json
{"wallclock_times": [151.69046685899997], "core_cycle_counts": [[162631558354], [63874386740], [127388915985], [143678691518]], "aperf_counts": [[162305287975], [63827239220], [127363566246], [143658598098]], "mperf_counts": [[162328507838], [63832391548], [127364742620], [143661835176]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 09:02:01: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 09:02:02: INFO] Estimated completion (whole session): 2019-08-06 01:55:46 (16:53:43 from now)
[2019-08-05 09:02:02: INFO] 105 executions left in scheduler queue
[2019-08-05 09:02:02: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 09:02:02: INFO] Estimated completion (next execution): 2019-08-05 09:07:07 (0:05:05 from now)
[2019-08-05 09:02:02: INFO] Reboot in preparation for next execution
[2019-08-05 09:12:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.124 s/op
Iteration   2: 7.995 s/op
Iteration   3: 7.853 s/op
Iteration   4: 7.857 s/op
Iteration   5: 7.854 s/op
Iteration   6: 7.869 s/op
Iteration   7: 7.850 s/op
Iteration   8: 7.861 s/op
Iteration   9: 7.849 s/op
Iteration  10: 7.837 s/op
Iteration  11: 7.843 s/op
Iteration  12: 7.859 s/op
Iteration  13: 7.847 s/op
Iteration  14: 7.856 s/op
Iteration  15: 7.858 s/op
Iteration  16: 7.869 s/op
Iteration  17: 7.870 s/op
Iteration  18: 7.852 s/op
Iteration  19: 7.835 s/op
Iteration  20: 7.840 s/op
Iteration  21: 7.851 s/op
Iteration  22: 7.848 s/op
Iteration  23: 7.856 s/op
Iteration  24: 7.867 s/op
Iteration  25: 7.845 s/op
Iteration  26: 7.849 s/op
Iteration  27: 7.846 s/op
Iteration  28: 7.846 s/op
Iteration  29: 7.844 s/op
Iteration  30: 7.841 s/op
Iteration  31: 7.843 s/op
Iteration  32: 7.855 s/op
Iteration  33: 7.854 s/op
Iteration  34: 7.847 s/op
Iteration  35: 7.850 s/op
Iteration  36: 7.847 s/op
Iteration  37: 7.841 s/op
Iteration  38: 7.847 s/op
Iteration  39: 7.848 s/op
Iteration  40: 7.838 s/op
Iteration  41: 7.851 s/op
Iteration  42: 7.841 s/op
Iteration  43: 7.827 s/op
Iteration  44: 7.848 s/op
Iteration  45: 7.844 s/op
Iteration  46: 7.853 s/op
Iteration  47: 7.838 s/op
Iteration  48: 7.863 s/op
Iteration  49: 7.853 s/op
Iteration  50: 7.861 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.858 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 26 
    [7.850, 7.875) = 22 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 
    [7.975, 8.000) = 1 
    [8.000, 8.025) = 0 
    [8.025, 8.050) = 0 
    [8.050, 8.075) = 0 
    [8.075, 8.100) = 0 
    [8.100, 8.125) = 1 
    [8.125, 8.150) = 0 
    [8.150, 8.175) = 0 
    [8.175, 8.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.827 s/op
     p(50.0000) =      7.850 s/op
     p(90.0000) =      7.869 s/op
     p(95.0000) =      7.926 s/op
     p(99.0000) =      8.124 s/op
     p(99.9000) =      8.124 s/op
     p(99.9900) =      8.124 s/op
     p(99.9990) =      8.124 s/op
     p(99.9999) =      8.124 s/op
    p(100.0000) =      8.124 s/op


# Run complete. Total time: 00:06:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.858 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_graalvm-ee-19.1.1_1564988732508.json
{"wallclock_times": [393.827021485], "core_cycle_counts": [[280953477282], [390866873118], [213821548265], [383807565016]], "aperf_counts": [[280018856490], [390806306569], [213784841816], [383786524093]], "mperf_counts": [[280043572784], [390813633140], [213788852242], [383787061542]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 09:12:06: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 09:12:07: INFO] Estimated completion (whole session): 2019-08-06 01:56:43 (16:44:35 from now)
[2019-08-05 09:12:07: INFO] 104 executions left in scheduler queue
[2019-08-05 09:12:07: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 09:12:07: INFO] Estimated completion (next execution): 2019-08-05 09:21:13 (0:09:06 from now)
[2019-08-05 09:12:07: INFO] Reboot in preparation for next execution
[2019-08-05 09:19:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.262 s/op
Iteration   2: 3.844 s/op
Iteration   3: 3.844 s/op
Iteration   4: 3.887 s/op
Iteration   5: 3.879 s/op
Iteration   6: 3.937 s/op
Iteration   7: 3.870 s/op
Iteration   8: 3.862 s/op
Iteration   9: 3.981 s/op
Iteration  10: 3.904 s/op
Iteration  11: 3.942 s/op
Iteration  12: 3.882 s/op
Iteration  13: 3.886 s/op
Iteration  14: 3.939 s/op
Iteration  15: 3.866 s/op
Iteration  16: 3.885 s/op
Iteration  17: 3.936 s/op
Iteration  18: 3.874 s/op
Iteration  19: 3.878 s/op
Iteration  20: 3.946 s/op
Iteration  21: 3.878 s/op
Iteration  22: 3.888 s/op
Iteration  23: 3.938 s/op
Iteration  24: 3.883 s/op
Iteration  25: 3.877 s/op
Iteration  26: 3.927 s/op
Iteration  27: 3.876 s/op
Iteration  28: 3.889 s/op
Iteration  29: 3.945 s/op
Iteration  30: 3.870 s/op
Iteration  31: 3.878 s/op
Iteration  32: 3.894 s/op
Iteration  33: 3.949 s/op
Iteration  34: 3.889 s/op
Iteration  35: 3.888 s/op
Iteration  36: 3.948 s/op
Iteration  37: 3.873 s/op
Iteration  38: 3.883 s/op
Iteration  39: 3.942 s/op
Iteration  40: 3.879 s/op
Iteration  41: 3.884 s/op
Iteration  42: 3.888 s/op
Iteration  43: 3.930 s/op
Iteration  44: 3.877 s/op
Iteration  45: 3.880 s/op
Iteration  46: 3.949 s/op
Iteration  47: 3.877 s/op
Iteration  48: 3.871 s/op
Iteration  49: 4.250 s/op
Iteration  50: 3.848 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.911 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [3.800, 3.825) = 0 
    [3.825, 3.850) = 3 
    [3.850, 3.875) = 7 
    [3.875, 3.900) = 23 
    [3.900, 3.925) = 1 
    [3.925, 3.950) = 13 
    [3.950, 3.975) = 0 
    [3.975, 4.000) = 1 
    [4.000, 4.025) = 0 
    [4.025, 4.050) = 0 
    [4.050, 4.075) = 0 
    [4.075, 4.100) = 0 
    [4.100, 4.125) = 0 
    [4.125, 4.150) = 0 
    [4.150, 4.175) = 0 
    [4.175, 4.200) = 0 
    [4.200, 4.225) = 0 
    [4.225, 4.250) = 1 
    [4.250, 4.275) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.844 s/op
     p(50.0000) =      3.885 s/op
     p(90.0000) =      3.949 s/op
     p(95.0000) =      4.102 s/op
     p(99.0000) =      4.262 s/op
     p(99.9000) =      4.262 s/op
     p(99.9900) =      4.262 s/op
     p(99.9990) =      4.262 s/op
     p(99.9999) =      4.262 s/op
    p(100.0000) =      4.262 s/op


# Run complete. Total time: 00:03:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.911 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_graalvm-ee-19.1.1_1564989382087.json
{"wallclock_times": [196.63947834299998], "core_cycle_counts": [[158829655659], [190690561250], [184338233398], [172687155107]], "aperf_counts": [[158313394931], [190633688283], [184284268291], [172644360301]], "mperf_counts": [[158337444340], [190634879066], [184295643250], [172649409434]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 09:19:38: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 09:19:39: INFO] Estimated completion (whole session): 2019-08-06 01:58:31 (16:38:52 from now)
[2019-08-05 09:19:39: INFO] 103 executions left in scheduler queue
[2019-08-05 09:19:39: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 09:19:39: INFO] Estimated completion (next execution): 2019-08-05 09:25:25 (0:05:45 from now)
[2019-08-05 09:19:39: INFO] Reboot in preparation for next execution
[2019-08-05 09:29:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.022 s/op
Iteration   2: 6.884 s/op
Iteration   3: 6.813 s/op
Iteration   4: 6.797 s/op
Iteration   5: 6.816 s/op
Iteration   6: 6.768 s/op
Iteration   7: 6.813 s/op
Iteration   8: 6.808 s/op
Iteration   9: 6.796 s/op
Iteration  10: 6.717 s/op
Iteration  11: 6.762 s/op
Iteration  12: 6.806 s/op
Iteration  13: 6.803 s/op
Iteration  14: 6.801 s/op
Iteration  15: 6.816 s/op
Iteration  16: 6.806 s/op
Iteration  17: 6.726 s/op
Iteration  18: 6.790 s/op
Iteration  19: 6.741 s/op
Iteration  20: 6.744 s/op
Iteration  21: 6.735 s/op
Iteration  22: 6.707 s/op
Iteration  23: 6.754 s/op
Iteration  24: 6.760 s/op
Iteration  25: 6.787 s/op
Iteration  26: 6.777 s/op
Iteration  27: 6.798 s/op
Iteration  28: 6.711 s/op
Iteration  29: 6.728 s/op
Iteration  30: 6.702 s/op
Iteration  31: 6.752 s/op
Iteration  32: 6.738 s/op
Iteration  33: 6.783 s/op
Iteration  34: 6.785 s/op
Iteration  35: 6.765 s/op
Iteration  36: 6.764 s/op
Iteration  37: 6.775 s/op
Iteration  38: 6.762 s/op
Iteration  39: 6.744 s/op
Iteration  40: 6.780 s/op
Iteration  41: 6.780 s/op
Iteration  42: 6.780 s/op
Iteration  43: 6.729 s/op
Iteration  44: 6.742 s/op
Iteration  45: 6.725 s/op
Iteration  46: 6.776 s/op
Iteration  47: 6.743 s/op
Iteration  48: 6.765 s/op
Iteration  49: 6.756 s/op
Iteration  50: 6.721 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.773 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [6.700, 6.725) = 5 
    [6.725, 6.750) = 11 
    [6.750, 6.775) = 11 
    [6.775, 6.800) = 12 
    [6.800, 6.825) = 9 
    [6.825, 6.850) = 0 
    [6.850, 6.875) = 0 
    [6.875, 6.900) = 1 
    [6.900, 6.925) = 0 
    [6.925, 6.950) = 0 
    [6.950, 6.975) = 0 
    [6.975, 7.000) = 0 
    [7.000, 7.025) = 1 
    [7.025, 7.050) = 0 
    [7.050, 7.075) = 0 
    [7.075, 7.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.702 s/op
     p(50.0000) =      6.767 s/op
     p(90.0000) =      6.813 s/op
     p(95.0000) =      6.846 s/op
     p(99.0000) =      7.022 s/op
     p(99.9000) =      7.022 s/op
     p(99.9900) =      7.022 s/op
     p(99.9990) =      7.022 s/op
     p(99.9999) =      7.022 s/op
    p(100.0000) =      7.022 s/op


# Run complete. Total time: 00:05:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.773 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_graalvm-ee-19.1.1_1564989834567.json
{"wallclock_times": [339.60232212100004], "core_cycle_counts": [[246873752609], [188751014726], [229463602864], [431381559021]], "aperf_counts": [[246044702233], [188690465076], [229432609399], [431365104768]], "mperf_counts": [[246070150658], [188691338348], [229433799926], [431375401030]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 09:29:34: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-08-05 09:29:35: INFO] Estimated completion (whole session): 2019-08-06 02:00:14 (16:30:39 from now)
[2019-08-05 09:29:35: INFO] 102 executions left in scheduler queue
[2019-08-05 09:29:35: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 09:29:35: INFO] Estimated completion (next execution): 2019-08-05 09:37:46 (0:08:11 from now)
[2019-08-05 09:29:35: INFO] Reboot in preparation for next execution
[2019-08-05 09:34:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 09:40:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.750 s/op
Iteration   2: 7.953 s/op
Iteration   3: 7.754 s/op
Iteration   4: 8.098 s/op
Iteration   5: 7.470 s/op
Iteration   6: 7.446 s/op
Iteration   7: 7.472 s/op
Iteration   8: 7.414 s/op
Iteration   9: 7.406 s/op
Iteration  10: 7.425 s/op
Iteration  11: 7.445 s/op
Iteration  12: 7.514 s/op
Iteration  13: 7.425 s/op
Iteration  14: 7.486 s/op
Iteration  15: 7.495 s/op
Iteration  16: 7.477 s/op
Iteration  17: 7.451 s/op
Iteration  18: 7.538 s/op
Iteration  19: 7.401 s/op
Iteration  20: 7.516 s/op
Iteration  21: 7.489 s/op
Iteration  22: 7.456 s/op
Iteration  23: 7.468 s/op
Iteration  24: 7.444 s/op
Iteration  25: 7.404 s/op
Iteration  26: 7.433 s/op
Iteration  27: 7.472 s/op
Iteration  28: 7.383 s/op
Iteration  29: 7.474 s/op
Iteration  30: 7.482 s/op
Iteration  31: 7.524 s/op
Iteration  32: 7.516 s/op
Iteration  33: 7.497 s/op
Iteration  34: 7.420 s/op
Iteration  35: 7.522 s/op
Iteration  36: 7.429 s/op
Iteration  37: 7.495 s/op
Iteration  38: 7.474 s/op
Iteration  39: 7.435 s/op
Iteration  40: 7.482 s/op
Iteration  41: 7.512 s/op
Iteration  42: 7.477 s/op
Iteration  43: 7.463 s/op
Iteration  44: 7.394 s/op
Iteration  45: 7.425 s/op
Iteration  46: 7.504 s/op
Iteration  47: 7.373 s/op
Iteration  48: 7.424 s/op
Iteration  49: 7.478 s/op
Iteration  50: 7.489 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.515 ?(99.9%) 0.108 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 1 
    [7.375, 7.500) = 37 
    [7.500, 7.625) = 8 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 1 
    [7.875, 8.000) = 1 
    [8.000, 8.125) = 1 
    [8.125, 8.250) = 0 
    [8.250, 8.375) = 0 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 0 
    [8.625, 8.750) = 0 
    [8.750, 8.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.373 s/op
     p(50.0000) =      7.473 s/op
     p(90.0000) =      7.537 s/op
     p(95.0000) =      8.018 s/op
     p(99.0000) =      8.750 s/op
     p(99.9000) =      8.750 s/op
     p(99.9900) =      8.750 s/op
     p(99.9990) =      8.750 s/op
     p(99.9999) =      8.750 s/op
    p(100.0000) =      8.750 s/op


# Run complete. Total time: 00:06:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.515 ? 0.108   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9-8u222-b10_1564990443590.json
{"wallclock_times": [377.02501139500004], "core_cycle_counts": [[333716864343], [372180943500], [366757823482], [218689984298]], "aperf_counts": [[332706785501], [372065121739], [366680701666], [218628854133]], "mperf_counts": [[332717642380], [372066355348], [366681107346], [218631837688]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 09:40:20: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 09:40:21: INFO] Estimated completion (whole session): 2019-08-06 02:02:03 (16:21:41 from now)
[2019-08-05 09:40:21: INFO] 101 executions left in scheduler queue
[2019-08-05 09:40:21: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 09:40:21: INFO] Estimated completion (next execution): 2019-08-05 09:49:13 (0:08:52 from now)
[2019-08-05 09:40:21: INFO] Reboot in preparation for next execution
[2019-08-05 09:44:35: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 09:49:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.560 s/op
Iteration   2: 6.770 s/op
Iteration   3: 7.299 s/op
Iteration   4: 6.478 s/op
Iteration   5: 6.103 s/op
Iteration   6: 6.101 s/op
Iteration   7: 6.438 s/op
Iteration   8: 6.367 s/op
Iteration   9: 5.857 s/op
Iteration  10: 6.129 s/op
Iteration  11: 6.243 s/op
Iteration  12: 6.150 s/op
Iteration  13: 6.110 s/op
Iteration  14: 5.700 s/op
Iteration  15: 5.813 s/op
Iteration  16: 6.270 s/op
Iteration  17: 5.750 s/op
Iteration  18: 5.726 s/op
Iteration  19: 6.190 s/op
Iteration  20: 6.259 s/op
Iteration  21: 5.783 s/op
Iteration  22: 6.312 s/op
Iteration  23: 5.840 s/op
Iteration  24: 6.226 s/op
Iteration  25: 6.349 s/op
Iteration  26: 6.225 s/op
Iteration  27: 6.197 s/op
Iteration  28: 6.199 s/op
Iteration  29: 6.315 s/op
Iteration  30: 6.352 s/op
Iteration  31: 6.266 s/op
Iteration  32: 5.764 s/op
Iteration  33: 6.261 s/op
Iteration  34: 6.232 s/op
Iteration  35: 6.166 s/op
Iteration  36: 5.889 s/op
Iteration  37: 5.937 s/op
Iteration  38: 6.265 s/op
Iteration  39: 6.231 s/op
Iteration  40: 5.747 s/op
Iteration  41: 5.813 s/op
Iteration  42: 6.207 s/op
Iteration  43: 6.351 s/op
Iteration  44: 6.287 s/op
Iteration  45: 6.297 s/op
Iteration  46: 6.223 s/op
Iteration  47: 6.206 s/op
Iteration  48: 6.163 s/op
Iteration  49: 5.884 s/op
Iteration  50: 6.421 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.195 ?(99.9%) 0.171 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 4 
    [5.750, 6.000) = 9 
    [6.000, 6.250) = 18 
    [6.250, 6.500) = 16 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.700 s/op
     p(50.0000) =      6.215 s/op
     p(90.0000) =      6.436 s/op
     p(95.0000) =      7.008 s/op
     p(99.0000) =      7.560 s/op
     p(99.9000) =      7.560 s/op
     p(99.9900) =      7.560 s/op
     p(99.9990) =      7.560 s/op
     p(99.9999) =      7.560 s/op
    p(100.0000) =      7.560 s/op


# Run complete. Total time: 00:05:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.195 ? 0.171   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9-8u222-b10_1564991075733.json
{"wallclock_times": [311.19589723700005], "core_cycle_counts": [[313355335757], [236740880857], [268823938832], [317939516614]], "aperf_counts": [[312556933070], [236578299548], [268720634819], [317885821868]], "mperf_counts": [[312566349910], [236578732514], [268722268246], [317889687956]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 09:49:46: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 09:49:47: INFO] Estimated completion (whole session): 2019-08-06 02:04:02 (16:14:14 from now)
[2019-08-05 09:49:47: INFO] 100 executions left in scheduler queue
[2019-08-05 09:49:47: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 09:49:47: INFO] Estimated completion (next execution): 2019-08-05 09:57:22 (0:07:34 from now)
[2019-08-05 09:49:47: INFO] Reboot in preparation for next execution
[2019-08-05 09:54:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 09:58:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.816 s/op
Iteration   2: 5.747 s/op
Iteration   3: 5.368 s/op
Iteration   4: 5.376 s/op
Iteration   5: 5.341 s/op
Iteration   6: 5.333 s/op
Iteration   7: 5.358 s/op
Iteration   8: 5.348 s/op
Iteration   9: 5.345 s/op
Iteration  10: 5.230 s/op
Iteration  11: 5.203 s/op
Iteration  12: 5.191 s/op
Iteration  13: 5.214 s/op
Iteration  14: 5.181 s/op
Iteration  15: 5.178 s/op
Iteration  16: 5.203 s/op
Iteration  17: 5.170 s/op
Iteration  18: 5.169 s/op
Iteration  19: 5.183 s/op
Iteration  20: 5.211 s/op
Iteration  21: 5.187 s/op
Iteration  22: 5.156 s/op
Iteration  23: 5.218 s/op
Iteration  24: 5.143 s/op
Iteration  25: 5.118 s/op
Iteration  26: 5.126 s/op
Iteration  27: 5.071 s/op
Iteration  28: 5.061 s/op
Iteration  29: 5.145 s/op
Iteration  30: 5.231 s/op
Iteration  31: 5.192 s/op
Iteration  32: 5.207 s/op
Iteration  33: 5.179 s/op
Iteration  34: 5.147 s/op
Iteration  35: 5.169 s/op
Iteration  36: 5.168 s/op
Iteration  37: 5.169 s/op
Iteration  38: 5.164 s/op
Iteration  39: 5.158 s/op
Iteration  40: 5.162 s/op
Iteration  41: 5.149 s/op
Iteration  42: 5.129 s/op
Iteration  43: 5.179 s/op
Iteration  44: 5.191 s/op
Iteration  45: 5.225 s/op
Iteration  46: 5.141 s/op
Iteration  47: 5.147 s/op
Iteration  48: 5.078 s/op
Iteration  49: 5.117 s/op
Iteration  50: 5.074 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.235 ?(99.9%) 0.125 s/op

  Histogram, s/op:
    [5.000, 5.125) = 6 
    [5.125, 5.250) = 35 
    [5.250, 5.375) = 6 
    [5.375, 5.500) = 1 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 1 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.061 s/op
     p(50.0000) =      5.179 s/op
     p(90.0000) =      5.357 s/op
     p(95.0000) =      5.543 s/op
     p(99.0000) =      6.816 s/op
     p(99.9000) =      6.816 s/op
     p(99.9900) =      6.816 s/op
     p(99.9990) =      6.816 s/op
     p(99.9999) =      6.816 s/op
    p(100.0000) =      6.816 s/op


# Run complete. Total time: 00:04:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.235 ? 0.125   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9-8u222-b10_1564991643505.json
{"wallclock_times": [263.35733363400004], "core_cycle_counts": [[274895781766], [284641176035], [203489300289], [309014882344]], "aperf_counts": [[274134627552], [284493566915], [203348591408], [308896350468]], "mperf_counts": [[274138862714], [284494497228], [203349019868], [308897189156]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 09:58:26: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 09:58:27: INFO] Estimated completion (whole session): 2019-08-06 02:05:45 (16:07:18 from now)
[2019-08-05 09:58:27: INFO] 99 executions left in scheduler queue
[2019-08-05 09:58:27: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 09:58:27: INFO] Estimated completion (next execution): 2019-08-05 10:05:22 (0:06:54 from now)
[2019-08-05 09:58:27: INFO] Reboot in preparation for next execution
[2019-08-05 10:02:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 10:11:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.995 s/op
Iteration   2: 11.512 s/op
Iteration   3: 11.045 s/op
Iteration   4: 11.009 s/op
Iteration   5: 10.962 s/op
Iteration   6: 10.901 s/op
Iteration   7: 10.924 s/op
Iteration   8: 11.026 s/op
Iteration   9: 11.024 s/op
Iteration  10: 10.897 s/op
Iteration  11: 10.956 s/op
Iteration  12: 10.993 s/op
Iteration  13: 10.999 s/op
Iteration  14: 10.823 s/op
Iteration  15: 10.780 s/op
Iteration  16: 10.996 s/op
Iteration  17: 10.981 s/op
Iteration  18: 10.861 s/op
Iteration  19: 10.960 s/op
Iteration  20: 10.830 s/op
Iteration  21: 10.793 s/op
Iteration  22: 10.844 s/op
Iteration  23: 10.834 s/op
Iteration  24: 10.952 s/op
Iteration  25: 10.884 s/op
Iteration  26: 10.885 s/op
Iteration  27: 10.965 s/op
Iteration  28: 10.803 s/op
Iteration  29: 10.850 s/op
Iteration  30: 10.815 s/op
Iteration  31: 10.767 s/op
Iteration  32: 10.789 s/op
Iteration  33: 10.937 s/op
Iteration  34: 10.905 s/op
Iteration  35: 10.953 s/op
Iteration  36: 10.947 s/op
Iteration  37: 10.883 s/op
Iteration  38: 10.855 s/op
Iteration  39: 10.863 s/op
Iteration  40: 10.793 s/op
Iteration  41: 10.864 s/op
Iteration  42: 10.866 s/op
Iteration  43: 10.956 s/op
Iteration  44: 10.848 s/op
Iteration  45: 10.868 s/op
Iteration  46: 10.946 s/op
Iteration  47: 10.903 s/op
Iteration  48: 10.766 s/op
Iteration  49: 10.898 s/op
Iteration  50: 10.867 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.951 ?(99.9%) 0.156 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 
    [10.750, 11.000) = 44 
    [11.000, 11.250) = 4 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 1 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.766 s/op
     p(50.0000) =     10.897 s/op
     p(90.0000) =     11.022 s/op
     p(95.0000) =     11.255 s/op
     p(99.0000) =     12.995 s/op
     p(99.9000) =     12.995 s/op
     p(99.9900) =     12.995 s/op
     p(99.9990) =     12.995 s/op
     p(99.9999) =     12.995 s/op
    p(100.0000) =     12.995 s/op


# Run complete. Total time: 00:09:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.951 ? 0.156   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9-8u222-b10_1564992162272.json
{"wallclock_times": [548.959171295], "core_cycle_counts": [[341908679241], [442218792943], [738536873268], [283992991378]], "aperf_counts": [[340378632396], [442081999123], [738430791697], [283889980122]], "mperf_counts": [[340386448440], [442082603512], [738431507276], [283890122940]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 10:11:51: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-08-05 10:11:52: INFO] Estimated completion (whole session): 2019-08-06 02:07:13 (15:55:21 from now)
[2019-08-05 10:11:52: INFO] 98 executions left in scheduler queue
[2019-08-05 10:11:52: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-05 10:11:52: INFO] Estimated completion (next execution): 2019-08-05 10:23:40 (0:11:48 from now)
[2019-08-05 10:11:52: INFO] Reboot in preparation for next execution
[2019-08-05 10:16:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 10:16:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 10:16:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 10:16:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 10:16:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 10:17:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.350 s/op
Iteration   2: 2.497 s/op
Iteration   3: 1.890 s/op
Iteration   4: 1.877 s/op
Iteration   5: 1.894 s/op
Iteration   6: 2.019 s/op
Iteration   7: 2.042 s/op
Iteration   8: 2.006 s/op
Iteration   9: 2.010 s/op
Iteration  10: 1.982 s/op
Iteration  11: 2.018 s/op
Iteration  12: 2.005 s/op
Iteration  13: 2.011 s/op
Iteration  14: 1.997 s/op
Iteration  15: 2.007 s/op
Iteration  16: 2.004 s/op
Iteration  17: 1.867 s/op
Iteration  18: 1.974 s/op
Iteration  19: 2.007 s/op
Iteration  20: 2.001 s/op
Iteration  21: 2.010 s/op
Iteration  22: 2.014 s/op
Iteration  23: 2.011 s/op
Iteration  24: 2.005 s/op
Iteration  25: 1.871 s/op
Iteration  26: 1.969 s/op
Iteration  27: 2.007 s/op
Iteration  28: 2.000 s/op
Iteration  29: 1.896 s/op
Iteration  30: 2.008 s/op
Iteration  31: 2.011 s/op
Iteration  32: 2.004 s/op
Iteration  33: 2.009 s/op
Iteration  34: 2.011 s/op
Iteration  35: 2.009 s/op
Iteration  36: 2.003 s/op
Iteration  37: 2.009 s/op
Iteration  38: 1.969 s/op
Iteration  39: 2.008 s/op
Iteration  40: 2.003 s/op
Iteration  41: 1.973 s/op
Iteration  42: 2.016 s/op
Iteration  43: 2.007 s/op
Iteration  44: 2.000 s/op
Iteration  45: 2.009 s/op
Iteration  46: 1.967 s/op
Iteration  47: 2.008 s/op
Iteration  48: 2.003 s/op
Iteration  49: 1.971 s/op
Iteration  50: 1.989 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.005 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 6 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 9 
    [2.000, 2.050) = 33 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.867 s/op
     p(50.0000) =      2.006 s/op
     p(90.0000) =      2.018 s/op
     p(95.0000) =      2.181 s/op
     p(99.0000) =      2.497 s/op
     p(99.9000) =      2.497 s/op
     p(99.9900) =      2.497 s/op
     p(99.9990) =      2.497 s/op
     p(99.9999) =      2.497 s/op
    p(100.0000) =      2.497 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.005 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot_11.0.4_1564992966724.json
{"wallclock_times": [101.30872181099997], "core_cycle_counts": [[49554855265], [88344585448], [62847953514], [103214231931]], "aperf_counts": [[49202281754], [88314181793], [62827424509], [103197086670]], "mperf_counts": [[54749696810], [98863485738], [71134179260], [116557083834]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 10:17:48: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-05 10:17:49: INFO] Estimated completion (whole session): 2019-08-06 02:09:00 (15:51:11 from now)
[2019-08-05 10:17:49: INFO] 97 executions left in scheduler queue
[2019-08-05 10:17:49: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-05 10:17:49: INFO] Estimated completion (next execution): 2019-08-05 10:21:59 (0:04:10 from now)
[2019-08-05 10:17:49: INFO] Reboot in preparation for next execution
[2019-08-05 10:22:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 10:22:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 10:22:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 10:22:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 10:22:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 10:24:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.222 s/op
Iteration   2: 2.368 s/op
Iteration   3: 2.458 s/op
Iteration   4: 2.458 s/op
Iteration   5: 2.729 s/op
Iteration   6: 2.417 s/op
Iteration   7: 2.388 s/op
Iteration   8: 2.388 s/op
Iteration   9: 2.388 s/op
Iteration  10: 2.385 s/op
Iteration  11: 2.384 s/op
Iteration  12: 2.390 s/op
Iteration  13: 2.386 s/op
Iteration  14: 2.386 s/op
Iteration  15: 2.389 s/op
Iteration  16: 2.391 s/op
Iteration  17: 2.384 s/op
Iteration  18: 2.390 s/op
Iteration  19: 2.384 s/op
Iteration  20: 2.383 s/op
Iteration  21: 2.386 s/op
Iteration  22: 2.387 s/op
Iteration  23: 2.385 s/op
Iteration  24: 2.388 s/op
Iteration  25: 2.384 s/op
Iteration  26: 2.384 s/op
Iteration  27: 2.382 s/op
Iteration  28: 2.382 s/op
Iteration  29: 2.383 s/op
Iteration  30: 2.383 s/op
Iteration  31: 2.385 s/op
Iteration  32: 2.383 s/op
Iteration  33: 2.389 s/op
Iteration  34: 2.386 s/op
Iteration  35: 2.387 s/op
Iteration  36: 2.385 s/op
Iteration  37: 2.384 s/op
Iteration  38: 2.385 s/op
Iteration  39: 2.390 s/op
Iteration  40: 2.385 s/op
Iteration  41: 2.385 s/op
Iteration  42: 2.385 s/op
Iteration  43: 2.388 s/op
Iteration  44: 2.386 s/op
Iteration  45: 2.385 s/op
Iteration  46: 2.387 s/op
Iteration  47: 2.387 s/op
Iteration  48: 2.388 s/op
Iteration  49: 2.386 s/op
Iteration  50: 2.382 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.393 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 45 
    [2.400, 2.450) = 1 
    [2.450, 2.500) = 2 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.222 s/op
     p(50.0000) =      2.386 s/op
     p(90.0000) =      2.391 s/op
     p(95.0000) =      2.458 s/op
     p(99.0000) =      2.729 s/op
     p(99.9000) =      2.729 s/op
     p(99.9900) =      2.729 s/op
     p(99.9990) =      2.729 s/op
     p(99.9999) =      2.729 s/op
    p(100.0000) =      2.729 s/op


# Run complete. Total time: 00:02:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.393 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot_11.0.4_1564993324415.json
{"wallclock_times": [120.65854959700002], "core_cycle_counts": [[128779789215], [70290674014], [82046634188], [112788599629]], "aperf_counts": [[128502187711], [70238773699], [82025372346], [112772014458]], "mperf_counts": [[128899608318], [70303439726], [82180311824], [113036288176]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 10:24:05: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-08-05 10:24:06: INFO] Estimated completion (whole session): 2019-08-06 02:10:49 (15:46:43 from now)
[2019-08-05 10:24:06: INFO] 96 executions left in scheduler queue
[2019-08-05 10:24:06: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 10:24:06: INFO] Estimated completion (next execution): 2019-08-05 10:28:35 (0:04:29 from now)
[2019-08-05 10:24:06: INFO] Reboot in preparation for next execution
[2019-08-05 10:28:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 10:28:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 10:28:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 10:28:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 10:28:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 10:34:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.351 s/op
Iteration   2: 8.014 s/op
Iteration   3: 8.092 s/op
Iteration   4: 7.838 s/op
Iteration   5: 7.849 s/op
Iteration   6: 7.891 s/op
Iteration   7: 7.872 s/op
Iteration   8: 7.909 s/op
Iteration   9: 7.880 s/op
Iteration  10: 7.762 s/op
Iteration  11: 7.878 s/op
Iteration  12: 7.850 s/op
Iteration  13: 7.852 s/op
Iteration  14: 7.842 s/op
Iteration  15: 7.852 s/op
Iteration  16: 7.858 s/op
Iteration  17: 7.882 s/op
Iteration  18: 7.880 s/op
Iteration  19: 7.886 s/op
Iteration  20: 7.876 s/op
Iteration  21: 7.871 s/op
Iteration  22: 7.843 s/op
Iteration  23: 7.829 s/op
Iteration  24: 7.842 s/op
Iteration  25: 7.935 s/op
Iteration  26: 7.790 s/op
Iteration  27: 7.811 s/op
Iteration  28: 7.888 s/op
Iteration  29: 7.771 s/op
Iteration  30: 7.857 s/op
Iteration  31: 7.858 s/op
Iteration  32: 7.866 s/op
Iteration  33: 7.809 s/op
Iteration  34: 7.866 s/op
Iteration  35: 7.861 s/op
Iteration  36: 7.851 s/op
Iteration  37: 7.862 s/op
Iteration  38: 7.856 s/op
Iteration  39: 7.852 s/op
Iteration  40: 7.878 s/op
Iteration  41: 7.841 s/op
Iteration  42: 7.868 s/op
Iteration  43: 7.853 s/op
Iteration  44: 7.874 s/op
Iteration  45: 7.860 s/op
Iteration  46: 7.854 s/op
Iteration  47: 7.724 s/op
Iteration  48: 7.849 s/op
Iteration  49: 7.829 s/op
Iteration  50: 7.833 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.870 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [7.700, 7.750) = 1 
    [7.750, 7.800) = 3 
    [7.800, 7.850) = 12 
    [7.850, 7.900) = 29 
    [7.900, 7.950) = 2 
    [7.950, 8.000) = 0 
    [8.000, 8.050) = 1 
    [8.050, 8.100) = 1 
    [8.100, 8.150) = 0 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 0 
    [8.300, 8.350) = 0 
    [8.350, 8.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.724 s/op
     p(50.0000) =      7.857 s/op
     p(90.0000) =      7.907 s/op
     p(95.0000) =      8.049 s/op
     p(99.0000) =      8.351 s/op
     p(99.9000) =      8.351 s/op
     p(99.9900) =      8.351 s/op
     p(99.9990) =      8.351 s/op
     p(99.9999) =      8.351 s/op
    p(100.0000) =      8.351 s/op


# Run complete. Total time: 00:06:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.870 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot_11.0.4_1564993700608.json
{"wallclock_times": [394.821008057], "core_cycle_counts": [[369756711706], [356200654615], [384386017238], [292487897314]], "aperf_counts": [[368792613857], [356090943528], [384324544780], [292431313076]], "mperf_counts": [[369111492000], [356173308216], [384507901926], [292501354202]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 10:34:55: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 10:34:56: INFO] Estimated completion (whole session): 2019-08-06 02:12:30 (15:37:34 from now)
[2019-08-05 10:34:56: INFO] 95 executions left in scheduler queue
[2019-08-05 10:34:56: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 10:34:56: INFO] Estimated completion (next execution): 2019-08-05 10:44:03 (0:09:07 from now)
[2019-08-05 10:34:56: INFO] Reboot in preparation for next execution
[2019-08-05 10:39:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 10:39:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 10:39:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 10:39:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 10:39:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 10:49:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.685 s/op
Iteration   2: 12.943 s/op
Iteration   3: 12.320 s/op
Iteration   4: 12.318 s/op
Iteration   5: 12.401 s/op
Iteration   6: 12.390 s/op
Iteration   7: 12.394 s/op
Iteration   8: 12.380 s/op
Iteration   9: 12.381 s/op
Iteration  10: 12.390 s/op
Iteration  11: 12.415 s/op
Iteration  12: 12.427 s/op
Iteration  13: 12.408 s/op
Iteration  14: 12.385 s/op
Iteration  15: 12.390 s/op
Iteration  16: 12.378 s/op
Iteration  17: 12.378 s/op
Iteration  18: 12.416 s/op
Iteration  19: 12.420 s/op
Iteration  20: 12.395 s/op
Iteration  21: 12.417 s/op
Iteration  22: 12.410 s/op
Iteration  23: 12.447 s/op
Iteration  24: 12.420 s/op
Iteration  25: 12.423 s/op
Iteration  26: 12.422 s/op
Iteration  27: 12.439 s/op
Iteration  28: 12.422 s/op
Iteration  29: 12.425 s/op
Iteration  30: 12.423 s/op
Iteration  31: 12.420 s/op
Iteration  32: 12.399 s/op
Iteration  33: 12.407 s/op
Iteration  34: 12.409 s/op
Iteration  35: 12.406 s/op
Iteration  36: 12.426 s/op
Iteration  37: 12.425 s/op
Iteration  38: 12.448 s/op
Iteration  39: 12.465 s/op
Iteration  40: 12.422 s/op
Iteration  41: 12.401 s/op
Iteration  42: 12.418 s/op
Iteration  43: 12.439 s/op
Iteration  44: 12.416 s/op
Iteration  45: 12.408 s/op
Iteration  46: 12.392 s/op
Iteration  47: 12.419 s/op
Iteration  48: 12.426 s/op
Iteration  49: 12.379 s/op
Iteration  50: 12.386 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.423 ?(99.9%) 0.044 s/op

  Histogram, s/op:
    [12.300, 12.350) = 2 
    [12.350, 12.400) = 14 
    [12.400, 12.450) = 31 
    [12.450, 12.500) = 1 
    [12.500, 12.550) = 0 
    [12.550, 12.600) = 0 
    [12.600, 12.650) = 0 
    [12.650, 12.700) = 1 
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 0 
    [12.800, 12.850) = 0 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.318 s/op
     p(50.0000) =     12.415 s/op
     p(90.0000) =     12.447 s/op
     p(95.0000) =     12.564 s/op
     p(99.0000) =     12.943 s/op
     p(99.9000) =     12.943 s/op
     p(99.9900) =     12.943 s/op
     p(99.9990) =     12.943 s/op
     p(99.9999) =     12.943 s/op
    p(100.0000) =     12.943 s/op


# Run complete. Total time: 00:10:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.423 ? 0.044   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot_11.0.4_1564994351914.json
{"wallclock_times": [622.227941712], "core_cycle_counts": [[646497468898], [350615438080], [473917480109], [538635914978]], "aperf_counts": [[645145640456], [350438347151], [473825668743], [538583587371]], "mperf_counts": [[645615227042], [350474817034], [473875972678], [538634513506]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 10:49:34: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 10:49:35: INFO] Estimated completion (whole session): 2019-08-06 02:14:07 (15:24:32 from now)
[2019-08-05 10:49:35: INFO] 94 executions left in scheduler queue
[2019-08-05 10:49:35: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 10:49:35: INFO] Estimated completion (next execution): 2019-08-05 11:02:32 (0:12:57 from now)
[2019-08-05 10:49:35: INFO] Reboot in preparation for next execution
[2019-08-05 10:54:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 10:54:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 10:54:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 10:54:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 10:54:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 11:01:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.254 s/op
Iteration   2: 8.717 s/op
Iteration   3: 8.782 s/op
Iteration   4: 7.467 s/op
Iteration   5: 8.508 s/op
Iteration   6: 8.138 s/op
Iteration   7: 8.550 s/op
Iteration   8: 8.391 s/op
Iteration   9: 8.555 s/op
Iteration  10: 8.509 s/op
Iteration  11: 8.527 s/op
Iteration  12: 8.515 s/op
Iteration  13: 8.529 s/op
Iteration  14: 8.525 s/op
Iteration  15: 8.510 s/op
Iteration  16: 8.515 s/op
Iteration  17: 8.543 s/op
Iteration  18: 8.543 s/op
Iteration  19: 8.542 s/op
Iteration  20: 8.516 s/op
Iteration  21: 8.522 s/op
Iteration  22: 8.508 s/op
Iteration  23: 8.556 s/op
Iteration  24: 8.547 s/op
Iteration  25: 8.529 s/op
Iteration  26: 8.527 s/op
Iteration  27: 8.400 s/op
Iteration  28: 8.564 s/op
Iteration  29: 8.547 s/op
Iteration  30: 8.553 s/op
Iteration  31: 7.735 s/op
Iteration  32: 8.567 s/op
Iteration  33: 8.506 s/op
Iteration  34: 8.093 s/op
Iteration  35: 8.531 s/op
Iteration  36: 8.560 s/op
Iteration  37: 8.547 s/op
Iteration  38: 8.527 s/op
Iteration  39: 8.537 s/op
Iteration  40: 8.536 s/op
Iteration  41: 8.574 s/op
Iteration  42: 8.556 s/op
Iteration  43: 8.560 s/op
Iteration  44: 8.554 s/op
Iteration  45: 8.536 s/op
Iteration  46: 8.548 s/op
Iteration  47: 8.537 s/op
Iteration  48: 8.551 s/op
Iteration  49: 8.532 s/op
Iteration  50: 8.533 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.480 ?(99.9%) 0.105 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 1 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 1 
    [7.750, 7.875) = 0 
    [7.875, 8.000) = 0 
    [8.000, 8.125) = 1 
    [8.125, 8.250) = 1 
    [8.250, 8.375) = 1 
    [8.375, 8.500) = 2 
    [8.500, 8.625) = 41 
    [8.625, 8.750) = 1 
    [8.750, 8.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.467 s/op
     p(50.0000) =      8.534 s/op
     p(90.0000) =      8.563 s/op
     p(95.0000) =      8.638 s/op
     p(99.0000) =      8.782 s/op
     p(99.9000) =      8.782 s/op
     p(99.9900) =      8.782 s/op
     p(99.9990) =      8.782 s/op
     p(99.9999) =      8.782 s/op
    p(100.0000) =      8.782 s/op


# Run complete. Total time: 00:07:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.480 ? 0.105   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot_11.0.4_1564995242616.json
{"wallclock_times": [425.175270486], "core_cycle_counts": [[331548828219], [388185527230], [182820240215], [324669821712]], "aperf_counts": [[330514854224], [388074240507], [182762636538], [324641787868]], "mperf_counts": [[375882947120], [438043974218], [202253477022], [369156811416]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 11:01:07: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 11:01:08: INFO] Estimated completion (whole session): 2019-08-06 02:15:58 (15:14:49 from now)
[2019-08-05 11:01:08: INFO] 93 executions left in scheduler queue
[2019-08-05 11:01:08: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 11:01:08: INFO] Estimated completion (next execution): 2019-08-05 11:10:47 (0:09:38 from now)
[2019-08-05 11:01:08: INFO] Reboot in preparation for next execution
[2019-08-05 11:04:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 11:04:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 11:04:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 11:04:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 11:04:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 11:19:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.122 s/op
Iteration   2: 17.672 s/op
Iteration   3: 18.079 s/op
Iteration   4: 17.393 s/op
Iteration   5: 17.405 s/op
Iteration   6: 17.485 s/op
Iteration   7: 17.411 s/op
Iteration   8: 17.431 s/op
Iteration   9: 17.399 s/op
Iteration  10: 17.444 s/op
Iteration  11: 17.364 s/op
Iteration  12: 17.432 s/op
Iteration  13: 17.379 s/op
Iteration  14: 17.597 s/op
Iteration  15: 17.416 s/op
Iteration  16: 17.320 s/op
Iteration  17: 17.343 s/op
Iteration  18: 17.391 s/op
Iteration  19: 17.364 s/op
Iteration  20: 17.440 s/op
Iteration  21: 17.522 s/op
Iteration  22: 17.414 s/op
Iteration  23: 17.376 s/op
Iteration  24: 18.241 s/op
Iteration  25: 17.372 s/op
Iteration  26: 17.374 s/op
Iteration  27: 17.464 s/op
Iteration  28: 17.471 s/op
Iteration  29: 17.450 s/op
Iteration  30: 17.373 s/op
Iteration  31: 17.506 s/op
Iteration  32: 17.460 s/op
Iteration  33: 17.358 s/op
Iteration  34: 17.410 s/op
Iteration  35: 17.413 s/op
Iteration  36: 17.540 s/op
Iteration  37: 17.433 s/op
Iteration  38: 17.429 s/op
Iteration  39: 17.426 s/op
Iteration  40: 17.399 s/op
Iteration  41: 17.370 s/op
Iteration  42: 17.460 s/op
Iteration  43: 17.544 s/op
Iteration  44: 17.548 s/op
Iteration  45: 17.499 s/op
Iteration  46: 17.451 s/op
Iteration  47: 17.418 s/op
Iteration  48: 17.669 s/op
Iteration  49: 17.490 s/op
Iteration  50: 17.401 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.463 ?(99.9%) 0.083 s/op

  Histogram, s/op:
    [17.000, 17.125) = 1 
    [17.125, 17.250) = 0 
    [17.250, 17.375) = 9 
    [17.375, 17.500) = 30 
    [17.500, 17.625) = 6 
    [17.625, 17.750) = 2 
    [17.750, 17.875) = 0 
    [17.875, 18.000) = 0 
    [18.000, 18.125) = 1 
    [18.125, 18.250) = 1 
    [18.250, 18.375) = 0 
    [18.375, 18.500) = 0 
    [18.500, 18.625) = 0 
    [18.625, 18.750) = 0 
    [18.750, 18.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.122 s/op
     p(50.0000) =     17.428 s/op
     p(90.0000) =     17.592 s/op
     p(95.0000) =     17.855 s/op
     p(99.0000) =     18.241 s/op
     p(99.9000) =     18.241 s/op
     p(99.9900) =     18.241 s/op
     p(99.9990) =     18.241 s/op
     p(99.9999) =     18.241 s/op
    p(100.0000) =     18.241 s/op


# Run complete. Total time: 00:14:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.463 ? 0.083   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot_11.0.4_1564995880130.json
{"wallclock_times": [874.2640344499999], "core_cycle_counts": [[724129484088], [1001020604181], [783788247296], [307933032293]], "aperf_counts": [[722000581893], [1000880361850], [783673758018], [307848648840]], "mperf_counts": [[723752740498], [1000957236454], [783709831070], [307887768278]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 11:19:14: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-08-05 11:19:15: INFO] Estimated completion (whole session): 2019-08-06 02:16:53 (14:57:38 from now)
[2019-08-05 11:19:15: INFO] 92 executions left in scheduler queue
[2019-08-05 11:19:15: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-08-05 11:19:15: INFO] Estimated completion (next execution): 2019-08-05 11:36:23 (0:17:08 from now)
[2019-08-05 11:19:15: INFO] Reboot in preparation for next execution
[2019-08-05 11:23:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 11:23:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 11:23:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 11:23:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 11:23:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 11:23:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 11:37:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.655 s/op
Iteration   2: 17.662 s/op
Iteration   3: 16.959 s/op
Iteration   4: 16.793 s/op
Iteration   5: 16.810 s/op
Iteration   6: 16.783 s/op
Iteration   7: 16.776 s/op
Iteration   8: 16.788 s/op
Iteration   9: 16.808 s/op
Iteration  10: 16.817 s/op
Iteration  11: 16.781 s/op
Iteration  12: 16.802 s/op
Iteration  13: 16.768 s/op
Iteration  14: 16.785 s/op
Iteration  15: 16.747 s/op
Iteration  16: 16.740 s/op
Iteration  17: 16.812 s/op
Iteration  18: 16.780 s/op
Iteration  19: 16.778 s/op
Iteration  20: 16.780 s/op
Iteration  21: 16.787 s/op
Iteration  22: 16.804 s/op
Iteration  23: 16.786 s/op
Iteration  24: 16.777 s/op
Iteration  25: 16.805 s/op
Iteration  26: 16.761 s/op
Iteration  27: 16.824 s/op
Iteration  28: 16.794 s/op
Iteration  29: 16.828 s/op
Iteration  30: 16.802 s/op
Iteration  31: 16.778 s/op
Iteration  32: 16.777 s/op
Iteration  33: 16.804 s/op
Iteration  34: 16.774 s/op
Iteration  35: 16.775 s/op
Iteration  36: 16.781 s/op
Iteration  37: 16.772 s/op
Iteration  38: 16.701 s/op
Iteration  39: 16.801 s/op
Iteration  40: 16.759 s/op
Iteration  41: 16.818 s/op
Iteration  42: 16.798 s/op
Iteration  43: 16.830 s/op
Iteration  44: 16.831 s/op
Iteration  45: 16.796 s/op
Iteration  46: 16.744 s/op
Iteration  47: 16.773 s/op
Iteration  48: 16.759 s/op
Iteration  49: 16.767 s/op
Iteration  50: 16.745 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     16.864 ?(99.9%) 0.209 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 5 
    [16.750, 17.000) = 43 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 1 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 
    [18.750, 19.000) = 0 
    [19.000, 19.250) = 0 
    [19.250, 19.500) = 0 
    [19.500, 19.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.701 s/op
     p(50.0000) =     16.786 s/op
     p(90.0000) =     16.830 s/op
     p(95.0000) =     17.275 s/op
     p(99.0000) =     19.655 s/op
     p(99.9000) =     19.655 s/op
     p(99.9900) =     19.655 s/op
     p(99.9990) =     19.655 s/op
     p(99.9999) =     19.655 s/op
    p(100.0000) =     19.655 s/op


# Run complete. Total time: 00:14:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  16.864 ? 0.209   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9_11.0.4_1564997009083.json
{"wallclock_times": [844.720241078], "core_cycle_counts": [[530311958537], [404582811937], [1079084987582], [729190135364]], "aperf_counts": [[527887652072], [404384820645], [1078981656828], [729010034318]], "mperf_counts": [[527899294168], [404384949754], [1078981650466], [729010130452]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 11:37:33: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-08-05 11:37:34: INFO] Estimated completion (whole session): 2019-08-06 02:18:01 (14:40:26 from now)
[2019-08-05 11:37:34: INFO] 91 executions left in scheduler queue
[2019-08-05 11:37:34: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-08-05 11:37:34: INFO] Estimated completion (next execution): 2019-08-05 11:54:28 (0:16:53 from now)
[2019-08-05 11:37:34: INFO] Reboot in preparation for next execution
[2019-08-05 11:41:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 11:41:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 11:41:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 11:41:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 11:41:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 11:41:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 11:54:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.885 s/op
Iteration   2: 14.726 s/op
Iteration   3: 15.936 s/op
Iteration   4: 14.398 s/op
Iteration   5: 15.793 s/op
Iteration   6: 14.696 s/op
Iteration   7: 14.770 s/op
Iteration   8: 15.648 s/op
Iteration   9: 15.217 s/op
Iteration  10: 14.392 s/op
Iteration  11: 15.236 s/op
Iteration  12: 14.682 s/op
Iteration  13: 14.694 s/op
Iteration  14: 14.402 s/op
Iteration  15: 14.514 s/op
Iteration  16: 14.434 s/op
Iteration  17: 14.585 s/op
Iteration  18: 14.973 s/op
Iteration  19: 15.240 s/op
Iteration  20: 14.679 s/op
Iteration  21: 14.447 s/op
Iteration  22: 14.860 s/op
Iteration  23: 13.942 s/op
Iteration  24: 15.125 s/op
Iteration  25: 14.213 s/op
Iteration  26: 14.726 s/op
Iteration  27: 15.375 s/op
Iteration  28: 15.163 s/op
Iteration  29: 15.046 s/op
Iteration  30: 15.084 s/op
Iteration  31: 15.198 s/op
Iteration  32: 14.494 s/op
Iteration  33: 14.500 s/op
Iteration  34: 14.773 s/op
Iteration  35: 14.572 s/op
Iteration  36: 15.099 s/op
Iteration  37: 14.431 s/op
Iteration  38: 14.124 s/op
Iteration  39: 15.590 s/op
Iteration  40: 13.953 s/op
Iteration  41: 15.427 s/op
Iteration  42: 14.769 s/op
Iteration  43: 14.413 s/op
Iteration  44: 14.495 s/op
Iteration  45: 14.490 s/op
Iteration  46: 14.547 s/op
Iteration  47: 14.436 s/op
Iteration  48: 14.463 s/op
Iteration  49: 14.843 s/op
Iteration  50: 14.336 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.777 ?(99.9%) 0.223 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 2 
    [14.000, 14.250) = 2 
    [14.250, 14.500) = 13 
    [14.500, 14.750) = 11 
    [14.750, 15.000) = 7 
    [15.000, 15.250) = 9 
    [15.250, 15.500) = 2 
    [15.500, 15.750) = 2 

  Percentiles, s/op:
      p(0.0000) =     13.942 s/op
     p(50.0000) =     14.695 s/op
     p(90.0000) =     15.421 s/op
     p(95.0000) =     15.713 s/op
     p(99.0000) =     15.936 s/op
     p(99.9000) =     15.936 s/op
     p(99.9900) =     15.936 s/op
     p(99.9990) =     15.936 s/op
     p(99.9999) =     15.936 s/op
    p(100.0000) =     15.936 s/op


# Run complete. Total time: 00:12:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.777 ? 0.223   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9_11.0.4_1564998108934.json
{"wallclock_times": [740.664239395], "core_cycle_counts": [[791076724206], [672819910525], [625604847870], [854302844322]], "aperf_counts": [[789311115400], [672669191023], [625388920295], [854121213730]], "mperf_counts": [[789316970466], [672669157356], [625388946696], [854121195510]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 11:54:09: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-08-05 11:54:10: INFO] Estimated completion (whole session): 2019-08-06 02:19:46 (14:25:36 from now)
[2019-08-05 11:54:10: INFO] 90 executions left in scheduler queue
[2019-08-05 11:54:10: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-08-05 11:54:10: INFO] Estimated completion (next execution): 2019-08-05 12:09:01 (0:14:50 from now)
[2019-08-05 11:54:10: INFO] Reboot in preparation for next execution
[2019-08-05 11:58:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 11:58:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 11:58:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 11:58:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 11:58:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 11:58:25: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 12:13:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.465 s/op
Iteration   2: 18.412 s/op
Iteration   3: 18.358 s/op
Iteration   4: 18.443 s/op
Iteration   5: 17.442 s/op
Iteration   6: 18.543 s/op
Iteration   7: 18.212 s/op
Iteration   8: 17.339 s/op
Iteration   9: 18.313 s/op
Iteration  10: 18.213 s/op
Iteration  11: 18.384 s/op
Iteration  12: 18.188 s/op
Iteration  13: 18.564 s/op
Iteration  14: 17.586 s/op
Iteration  15: 18.227 s/op
Iteration  16: 18.359 s/op
Iteration  17: 18.272 s/op
Iteration  18: 18.326 s/op
Iteration  19: 18.335 s/op
Iteration  20: 18.368 s/op
Iteration  21: 18.284 s/op
Iteration  22: 17.909 s/op
Iteration  23: 18.307 s/op
Iteration  24: 18.350 s/op
Iteration  25: 18.416 s/op
Iteration  26: 18.145 s/op
Iteration  27: 18.457 s/op
Iteration  28: 18.316 s/op
Iteration  29: 17.467 s/op
Iteration  30: 18.311 s/op
Iteration  31: 18.355 s/op
Iteration  32: 17.641 s/op
Iteration  33: 18.415 s/op
Iteration  34: 18.416 s/op
Iteration  35: 18.239 s/op
Iteration  36: 17.668 s/op
Iteration  37: 18.393 s/op
Iteration  38: 18.396 s/op
Iteration  39: 17.854 s/op
Iteration  40: 18.286 s/op
Iteration  41: 18.347 s/op
Iteration  42: 18.189 s/op
Iteration  43: 17.915 s/op
Iteration  44: 18.280 s/op
Iteration  45: 18.252 s/op
Iteration  46: 18.193 s/op
Iteration  47: 18.170 s/op
Iteration  48: 18.233 s/op
Iteration  49: 18.420 s/op
Iteration  50: 18.261 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     18.185 ?(99.9%) 0.152 s/op

  Histogram, s/op:
    [17.000, 17.125) = 0 
    [17.125, 17.250) = 0 
    [17.250, 17.375) = 1 
    [17.375, 17.500) = 3 
    [17.500, 17.625) = 1 
    [17.625, 17.750) = 2 
    [17.750, 17.875) = 1 
    [17.875, 18.000) = 2 
    [18.000, 18.125) = 0 
    [18.125, 18.250) = 10 
    [18.250, 18.375) = 18 
    [18.375, 18.500) = 10 
    [18.500, 18.625) = 2 
    [18.625, 18.750) = 0 
    [18.750, 18.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.339 s/op
     p(50.0000) =     18.285 s/op
     p(90.0000) =     18.419 s/op
     p(95.0000) =     18.496 s/op
     p(99.0000) =     18.564 s/op
     p(99.9000) =     18.564 s/op
     p(99.9900) =     18.564 s/op
     p(99.9990) =     18.564 s/op
     p(99.9999) =     18.564 s/op
    p(100.0000) =     18.564 s/op


# Run complete. Total time: 00:15:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  18.185 ? 0.152   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9_12.0.1_1564999104850.json
{"wallclock_times": [911.007119373], "core_cycle_counts": [[1056415236604], [700015003936], [601078768509], [874453028874]], "aperf_counts": [[1054329348734], [699813994420], [600786191607], [874229436503]], "mperf_counts": [[1054345014380], [699814331218], [600786201700], [874229747062]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 12:13:35: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-08-05 12:13:36: INFO] Estimated completion (whole session): 2019-08-06 02:21:17 (14:07:40 from now)
[2019-08-05 12:13:36: INFO] 89 executions left in scheduler queue
[2019-08-05 12:13:36: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-08-05 12:13:36: INFO] Estimated completion (next execution): 2019-08-05 12:31:25 (0:17:48 from now)
[2019-08-05 12:13:36: INFO] Reboot in preparation for next execution
[2019-08-05 12:17:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 12:17:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 12:17:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 12:17:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 12:17:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 12:29:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.255 s/op
Iteration   2: 14.328 s/op
Iteration   3: 14.139 s/op
Iteration   4: 14.004 s/op
Iteration   5: 14.164 s/op
Iteration   6: 13.954 s/op
Iteration   7: 13.984 s/op
Iteration   8: 14.055 s/op
Iteration   9: 13.908 s/op
Iteration  10: 13.970 s/op
Iteration  11: 13.978 s/op
Iteration  12: 14.079 s/op
Iteration  13: 13.947 s/op
Iteration  14: 14.058 s/op
Iteration  15: 13.956 s/op
Iteration  16: 13.964 s/op
Iteration  17: 13.899 s/op
Iteration  18: 13.957 s/op
Iteration  19: 14.012 s/op
Iteration  20: 13.918 s/op
Iteration  21: 13.975 s/op
Iteration  22: 13.958 s/op
Iteration  23: 13.897 s/op
Iteration  24: 14.093 s/op
Iteration  25: 13.891 s/op
Iteration  26: 14.052 s/op
Iteration  27: 14.021 s/op
Iteration  28: 13.959 s/op
Iteration  29: 13.932 s/op
Iteration  30: 13.924 s/op
Iteration  31: 14.002 s/op
Iteration  32: 13.905 s/op
Iteration  33: 13.952 s/op
Iteration  34: 13.905 s/op
Iteration  35: 13.899 s/op
Iteration  36: 14.034 s/op
Iteration  37: 13.865 s/op
Iteration  38: 14.004 s/op
Iteration  39: 13.965 s/op
Iteration  40: 14.046 s/op
Iteration  41: 13.897 s/op
Iteration  42: 14.060 s/op
Iteration  43: 13.872 s/op
Iteration  44: 14.013 s/op
Iteration  45: 13.894 s/op
Iteration  46: 13.990 s/op
Iteration  47: 13.937 s/op
Iteration  48: 14.076 s/op
Iteration  49: 13.872 s/op
Iteration  50: 14.015 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     13.989 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [13.800, 13.850) = 0 
    [13.850, 13.900) = 9 
    [13.900, 13.950) = 8 
    [13.950, 14.000) = 13 
    [14.000, 14.050) = 9 
    [14.050, 14.100) = 7 
    [14.100, 14.150) = 1 
    [14.150, 14.200) = 1 
    [14.200, 14.250) = 0 
    [14.250, 14.300) = 1 
    [14.300, 14.350) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.865 s/op
     p(50.0000) =     13.967 s/op
     p(90.0000) =     14.091 s/op
     p(95.0000) =     14.205 s/op
     p(99.0000) =     14.328 s/op
     p(99.9000) =     14.328 s/op
     p(99.9900) =     14.328 s/op
     p(99.9990) =     14.328 s/op
     p(99.9999) =     14.328 s/op
    p(100.0000) =     14.328 s/op


# Run complete. Total time: 00:11:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.989 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot_11.0.4_1565000269723.json
{"wallclock_times": [700.476992072], "core_cycle_counts": [[780505186338], [571448160939], [776421030000], [396827732064]], "aperf_counts": [[778758140910], [571164432653], [776240316915], [396708780403]], "mperf_counts": [[785008453264], [575396625176], [782748819028], [399481700634]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 12:29:30: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-08-05 12:29:31: INFO] Estimated completion (whole session): 2019-08-06 02:23:05 (13:53:34 from now)
[2019-08-05 12:29:31: INFO] 88 executions left in scheduler queue
[2019-08-05 12:29:31: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-05 12:29:31: INFO] Estimated completion (next execution): 2019-08-05 12:43:39 (0:14:08 from now)
[2019-08-05 12:29:31: INFO] Reboot in preparation for next execution
[2019-08-05 12:33:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 12:33:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 12:33:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 12:33:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 12:33:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 12:35:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.467 s/op
Iteration   2: 2.465 s/op
Iteration   3: 2.025 s/op
Iteration   4: 2.006 s/op
Iteration   5: 2.145 s/op
Iteration   6: 2.129 s/op
Iteration   7: 2.152 s/op
Iteration   8: 2.130 s/op
Iteration   9: 2.128 s/op
Iteration  10: 2.114 s/op
Iteration  11: 2.147 s/op
Iteration  12: 2.127 s/op
Iteration  13: 2.121 s/op
Iteration  14: 2.108 s/op
Iteration  15: 2.125 s/op
Iteration  16: 2.128 s/op
Iteration  17: 2.118 s/op
Iteration  18: 2.132 s/op
Iteration  19: 2.116 s/op
Iteration  20: 2.128 s/op
Iteration  21: 2.112 s/op
Iteration  22: 2.135 s/op
Iteration  23: 2.118 s/op
Iteration  24: 2.129 s/op
Iteration  25: 2.109 s/op
Iteration  26: 2.127 s/op
Iteration  27: 2.112 s/op
Iteration  28: 2.129 s/op
Iteration  29: 2.110 s/op
Iteration  30: 2.132 s/op
Iteration  31: 2.115 s/op
Iteration  32: 2.128 s/op
Iteration  33: 2.124 s/op
Iteration  34: 2.124 s/op
Iteration  35: 2.132 s/op
Iteration  36: 2.130 s/op
Iteration  37: 2.125 s/op
Iteration  38: 2.122 s/op
Iteration  39: 2.131 s/op
Iteration  40: 2.127 s/op
Iteration  41: 2.104 s/op
Iteration  42: 2.121 s/op
Iteration  43: 2.130 s/op
Iteration  44: 2.128 s/op
Iteration  45: 2.124 s/op
Iteration  46: 2.120 s/op
Iteration  47: 2.130 s/op
Iteration  48: 2.125 s/op
Iteration  49: 2.102 s/op
Iteration  50: 2.128 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.134 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [2.000, 2.050) = 2 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 45 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.006 s/op
     p(50.0000) =      2.127 s/op
     p(90.0000) =      2.144 s/op
     p(95.0000) =      2.293 s/op
     p(99.0000) =      2.467 s/op
     p(99.9000) =      2.467 s/op
     p(99.9900) =      2.467 s/op
     p(99.9990) =      2.467 s/op
     p(99.9999) =      2.467 s/op
    p(100.0000) =      2.467 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.134 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot_12.0.2_1565001228640.json
{"wallclock_times": [107.77580295000001], "core_cycle_counts": [[50966698065], [57979500640], [94481224261], [116833838242]], "aperf_counts": [[50588437750], [57955192752], [94458666450], [116817698004]], "mperf_counts": [[57323643090], [65333745228], [106637153240], [132714735356]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 12:35:36: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-05 12:35:37: INFO] Estimated completion (whole session): 2019-08-06 02:24:53 (13:49:16 from now)
[2019-08-05 12:35:37: INFO] 87 executions left in scheduler queue
[2019-08-05 12:35:37: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-05 12:35:37: INFO] Estimated completion (next execution): 2019-08-05 12:39:55 (0:04:18 from now)
[2019-08-05 12:35:37: INFO] Reboot in preparation for next execution
[2019-08-05 12:39:53: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 12:39:53: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 12:39:53: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 12:39:53: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 12:39:53: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 12:41:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.078 s/op
Iteration   2: 1.831 s/op
Iteration   3: 1.997 s/op
Iteration   4: 2.024 s/op
Iteration   5: 2.067 s/op
Iteration   6: 1.844 s/op
Iteration   7: 1.842 s/op
Iteration   8: 1.841 s/op
Iteration   9: 1.843 s/op
Iteration  10: 1.842 s/op
Iteration  11: 1.843 s/op
Iteration  12: 1.842 s/op
Iteration  13: 1.843 s/op
Iteration  14: 1.842 s/op
Iteration  15: 1.844 s/op
Iteration  16: 1.840 s/op
Iteration  17: 1.836 s/op
Iteration  18: 1.838 s/op
Iteration  19: 1.835 s/op
Iteration  20: 1.837 s/op
Iteration  21: 1.834 s/op
Iteration  22: 1.839 s/op
Iteration  23: 1.837 s/op
Iteration  24: 1.838 s/op
Iteration  25: 1.838 s/op
Iteration  26: 1.842 s/op
Iteration  27: 1.839 s/op
Iteration  28: 1.837 s/op
Iteration  29: 1.842 s/op
Iteration  30: 1.837 s/op
Iteration  31: 1.839 s/op
Iteration  32: 1.839 s/op
Iteration  33: 1.838 s/op
Iteration  34: 1.842 s/op
Iteration  35: 1.836 s/op
Iteration  36: 1.836 s/op
Iteration  37: 1.841 s/op
Iteration  38: 1.837 s/op
Iteration  39: 1.835 s/op
Iteration  40: 1.838 s/op
Iteration  41: 1.839 s/op
Iteration  42: 1.837 s/op
Iteration  43: 1.836 s/op
Iteration  44: 1.840 s/op
Iteration  45: 1.836 s/op
Iteration  46: 1.838 s/op
Iteration  47: 1.835 s/op
Iteration  48: 1.840 s/op
Iteration  49: 1.841 s/op
Iteration  50: 1.840 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.855 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 46 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 0 
    [1.950, 1.975) = 0 
    [1.975, 2.000) = 1 
    [2.000, 2.025) = 1 
    [2.025, 2.050) = 0 
    [2.050, 2.075) = 1 
    [2.075, 2.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.831 s/op
     p(50.0000) =      1.839 s/op
     p(90.0000) =      1.844 s/op
     p(95.0000) =      2.043 s/op
     p(99.0000) =      2.078 s/op
     p(99.9000) =      2.078 s/op
     p(99.9900) =      2.078 s/op
     p(99.9990) =      2.078 s/op
     p(99.9999) =      2.078 s/op
    p(100.0000) =      2.078 s/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.855 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot_12.0.2_1565001593786.json
{"wallclock_times": [93.75964289799998], "core_cycle_counts": [[51877300878], [86389486006], [116691955443], [52708515295]], "aperf_counts": [[51608479376], [86360922445], [116673164142], [52689842504]], "mperf_counts": [[52014496198], [86598420244], [117110200868], [52802126914]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 12:41:27: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-08-05 12:41:28: INFO] Estimated completion (whole session): 2019-08-06 02:26:36 (13:45:08 from now)
[2019-08-05 12:41:28: INFO] 86 executions left in scheduler queue
[2019-08-05 12:41:28: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-08-05 12:41:28: INFO] Estimated completion (next execution): 2019-08-05 12:45:34 (0:04:05 from now)
[2019-08-05 12:41:28: INFO] Reboot in preparation for next execution
[2019-08-05 12:45:45: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 12:45:45: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 12:45:45: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 12:45:45: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 12:45:45: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 12:45:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 13:00:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.317 s/op
Iteration   2: 17.022 s/op
Iteration   3: 17.086 s/op
Iteration   4: 16.736 s/op
Iteration   5: 17.135 s/op
Iteration   6: 17.397 s/op
Iteration   7: 16.539 s/op
Iteration   8: 17.308 s/op
Iteration   9: 16.429 s/op
Iteration  10: 17.120 s/op
Iteration  11: 17.119 s/op
Iteration  12: 17.177 s/op
Iteration  13: 16.447 s/op
Iteration  14: 17.264 s/op
Iteration  15: 17.308 s/op
Iteration  16: 16.873 s/op
Iteration  17: 18.073 s/op
Iteration  18: 17.640 s/op
Iteration  19: 18.122 s/op
Iteration  20: 17.586 s/op
Iteration  21: 17.900 s/op
Iteration  22: 17.047 s/op
Iteration  23: 17.994 s/op
Iteration  24: 17.793 s/op
Iteration  25: 18.114 s/op
Iteration  26: 17.687 s/op
Iteration  27: 17.755 s/op
Iteration  28: 17.885 s/op
Iteration  29: 17.628 s/op
Iteration  30: 17.722 s/op
Iteration  31: 17.789 s/op
Iteration  32: 17.665 s/op
Iteration  33: 17.698 s/op
Iteration  34: 17.878 s/op
Iteration  35: 17.138 s/op
Iteration  36: 17.864 s/op
Iteration  37: 17.356 s/op
Iteration  38: 17.436 s/op
Iteration  39: 17.556 s/op
Iteration  40: 17.891 s/op
Iteration  41: 18.048 s/op
Iteration  42: 17.840 s/op
Iteration  43: 17.401 s/op
Iteration  44: 17.819 s/op
Iteration  45: 17.656 s/op
Iteration  46: 17.746 s/op
Iteration  47: 17.904 s/op
Iteration  48: 17.037 s/op
Iteration  49: 18.099 s/op
Iteration  50: 17.482 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.471 ?(99.9%) 0.232 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 3 
    [16.500, 16.750) = 2 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 9 
    [17.250, 17.500) = 8 
    [17.500, 17.750) = 10 
    [17.750, 18.000) = 12 
    [18.000, 18.250) = 5 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.317 s/op
     p(50.0000) =     17.607 s/op
     p(90.0000) =     18.042 s/op
     p(95.0000) =     18.106 s/op
     p(99.0000) =     18.122 s/op
     p(99.9000) =     18.122 s/op
     p(99.9900) =     18.122 s/op
     p(99.9990) =     18.122 s/op
     p(99.9999) =     18.122 s/op
    p(100.0000) =     18.122 s/op


# Run complete. Total time: 00:14:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.471 ? 0.232   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9_11.0.4_1565001945339.json
{"wallclock_times": [875.3423776280001], "core_cycle_counts": [[401743935458], [692758684262], [1033723225807], [998042839000]], "aperf_counts": [[399083447242], [692597570012], [1033598767872], [997921233554]], "mperf_counts": [[399088511148], [692601150712], [1033602743896], [997921292580]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 13:00:20: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-08-05 13:00:21: INFO] Estimated completion (whole session): 2019-08-06 02:28:57 (13:28:36 from now)
[2019-08-05 13:00:21: INFO] 85 executions left in scheduler queue
[2019-08-05 13:00:21: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-08-05 13:00:21: INFO] Estimated completion (next execution): 2019-08-05 13:17:10 (0:16:49 from now)
[2019-08-05 13:00:21: INFO] Reboot in preparation for next execution
[2019-08-05 13:04:50: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 13:04:50: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 13:04:50: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 13:04:50: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 13:04:50: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 13:04:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 13:19:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.868 s/op
Iteration   2: 17.200 s/op
Iteration   3: 16.491 s/op
Iteration   4: 17.341 s/op
Iteration   5: 17.702 s/op
Iteration   6: 16.984 s/op
Iteration   7: 17.511 s/op
Iteration   8: 17.657 s/op
Iteration   9: 17.661 s/op
Iteration  10: 17.725 s/op
Iteration  11: 17.338 s/op
Iteration  12: 17.656 s/op
Iteration  13: 17.834 s/op
Iteration  14: 17.521 s/op
Iteration  15: 16.727 s/op
Iteration  16: 17.723 s/op
Iteration  17: 16.805 s/op
Iteration  18: 17.224 s/op
Iteration  19: 17.119 s/op
Iteration  20: 17.570 s/op
Iteration  21: 17.450 s/op
Iteration  22: 17.394 s/op
Iteration  23: 17.632 s/op
Iteration  24: 16.829 s/op
Iteration  25: 17.304 s/op
Iteration  26: 17.466 s/op
Iteration  27: 17.206 s/op
Iteration  28: 16.459 s/op
Iteration  29: 17.472 s/op
Iteration  30: 17.114 s/op
Iteration  31: 17.162 s/op
Iteration  32: 17.271 s/op
Iteration  33: 16.741 s/op
Iteration  34: 16.985 s/op
Iteration  35: 17.177 s/op
Iteration  36: 17.342 s/op
Iteration  37: 17.576 s/op
Iteration  38: 17.534 s/op
Iteration  39: 17.399 s/op
Iteration  40: 17.347 s/op
Iteration  41: 17.497 s/op
Iteration  42: 17.467 s/op
Iteration  43: 17.083 s/op
Iteration  44: 17.514 s/op
Iteration  45: 17.323 s/op
Iteration  46: 17.511 s/op
Iteration  47: 17.381 s/op
Iteration  48: 17.466 s/op
Iteration  49: 17.311 s/op
Iteration  50: 17.466 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.331 ?(99.9%) 0.159 s/op

  Histogram, s/op:
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 2 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 2 
    [16.750, 16.875) = 2 
    [16.875, 17.000) = 2 
    [17.000, 17.125) = 3 
    [17.125, 17.250) = 5 
    [17.250, 17.375) = 8 
    [17.375, 17.500) = 10 
    [17.500, 17.625) = 7 
    [17.625, 17.750) = 7 
    [17.750, 17.875) = 2 

  Percentiles, s/op:
      p(0.0000) =     16.459 s/op
     p(50.0000) =     17.387 s/op
     p(90.0000) =     17.698 s/op
     p(95.0000) =     17.774 s/op
     p(99.0000) =     17.868 s/op
     p(99.9000) =     17.868 s/op
     p(99.9900) =     17.868 s/op
     p(99.9990) =     17.868 s/op
     p(99.9999) =     17.868 s/op
    p(100.0000) =     17.868 s/op


# Run complete. Total time: 00:14:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.331 ? 0.159   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9_12.0.1_1565003090941.json
{"wallclock_times": [868.3931044229998], "core_cycle_counts": [[693093726194], [852254709797], [801886291842], [1001263754595]], "aperf_counts": [[690810744301], [852077565331], [801678218511], [1001117194711]], "mperf_counts": [[690815268724], [852077532484], [801678158378], [1001117171008]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 13:19:19: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-08-05 13:19:20: INFO] Estimated completion (whole session): 2019-08-06 02:31:07 (13:11:47 from now)
[2019-08-05 13:19:20: INFO] 84 executions left in scheduler queue
[2019-08-05 13:19:20: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-08-05 13:19:20: INFO] Estimated completion (next execution): 2019-08-05 13:36:14 (0:16:54 from now)
[2019-08-05 13:19:20: INFO] Reboot in preparation for next execution
[2019-08-05 13:23:36: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 13:37:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.680 s/op
Iteration   2: 16.249 s/op
Iteration   3: 16.995 s/op
Iteration   4: 16.979 s/op
Iteration   5: 16.870 s/op
Iteration   6: 16.517 s/op
Iteration   7: 16.727 s/op
Iteration   8: 15.763 s/op
Iteration   9: 16.330 s/op
Iteration  10: 16.325 s/op
Iteration  11: 16.304 s/op
Iteration  12: 16.062 s/op
Iteration  13: 16.728 s/op
Iteration  14: 15.649 s/op
Iteration  15: 16.634 s/op
Iteration  16: 16.488 s/op
Iteration  17: 16.452 s/op
Iteration  18: 16.585 s/op
Iteration  19: 16.434 s/op
Iteration  20: 16.081 s/op
Iteration  21: 16.126 s/op
Iteration  22: 16.552 s/op
Iteration  23: 16.715 s/op
Iteration  24: 16.291 s/op
Iteration  25: 16.629 s/op
Iteration  26: 16.317 s/op
Iteration  27: 16.330 s/op
Iteration  28: 16.594 s/op
Iteration  29: 16.471 s/op
Iteration  30: 16.457 s/op
Iteration  31: 16.531 s/op
Iteration  32: 16.209 s/op
Iteration  33: 16.558 s/op
Iteration  34: 16.691 s/op
Iteration  35: 16.479 s/op
Iteration  36: 16.539 s/op
Iteration  37: 16.894 s/op
Iteration  38: 16.409 s/op
Iteration  39: 16.151 s/op
Iteration  40: 16.418 s/op
Iteration  41: 16.143 s/op
Iteration  42: 16.398 s/op
Iteration  43: 16.492 s/op
Iteration  44: 16.318 s/op
Iteration  45: 15.662 s/op
Iteration  46: 16.517 s/op
Iteration  47: 16.445 s/op
Iteration  48: 15.153 s/op
Iteration  49: 15.691 s/op
Iteration  50: 16.314 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.387 ?(99.9%) 0.174 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 1 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 3 
    [15.750, 15.875) = 1 
    [15.875, 16.000) = 0 
    [16.000, 16.125) = 2 
    [16.125, 16.250) = 5 
    [16.250, 16.375) = 8 
    [16.375, 16.500) = 11 
    [16.500, 16.625) = 8 
    [16.625, 16.750) = 7 
    [16.750, 16.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.153 s/op
     p(50.0000) =     16.449 s/op
     p(90.0000) =     16.728 s/op
     p(95.0000) =     16.932 s/op
     p(99.0000) =     16.995 s/op
     p(99.9000) =     16.995 s/op
     p(99.9900) =     16.995 s/op
     p(99.9990) =     16.995 s/op
     p(99.9999) =     16.995 s/op
    p(100.0000) =     16.995 s/op


# Run complete. Total time: 00:13:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.387 ? 0.174   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9-8u222-b10_1565004216692.json
{"wallclock_times": [820.6952547220001], "core_cycle_counts": [[652855382296], [530999496236], [1047877610324], [693729459285]], "aperf_counts": [[650625826814], [530795590887], [1047702906627], [693566662304]], "mperf_counts": [[650627766696], [530795549944], [1047702894150], [693566630442]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 13:37:17: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-08-05 13:37:18: INFO] Estimated completion (whole session): 2019-08-06 02:33:08 (12:55:49 from now)
[2019-08-05 13:37:18: INFO] 83 executions left in scheduler queue
[2019-08-05 13:37:18: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-08-05 13:37:18: INFO] Estimated completion (next execution): 2019-08-05 13:53:22 (0:16:04 from now)
[2019-08-05 13:37:18: INFO] Reboot in preparation for next execution
[2019-08-05 13:41:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 13:41:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 13:41:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 13:41:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 13:41:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 13:47:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.474 s/op
Iteration   2: 7.076 s/op
Iteration   3: 6.718 s/op
Iteration   4: 6.618 s/op
Iteration   5: 6.627 s/op
Iteration   6: 6.628 s/op
Iteration   7: 6.622 s/op
Iteration   8: 6.619 s/op
Iteration   9: 6.628 s/op
Iteration  10: 6.623 s/op
Iteration  11: 6.621 s/op
Iteration  12: 6.623 s/op
Iteration  13: 6.636 s/op
Iteration  14: 6.635 s/op
Iteration  15: 6.624 s/op
Iteration  16: 6.631 s/op
Iteration  17: 6.624 s/op
Iteration  18: 6.613 s/op
Iteration  19: 6.618 s/op
Iteration  20: 6.621 s/op
Iteration  21: 6.630 s/op
Iteration  22: 6.637 s/op
Iteration  23: 6.633 s/op
Iteration  24: 6.636 s/op
Iteration  25: 6.629 s/op
Iteration  26: 6.633 s/op
Iteration  27: 6.629 s/op
Iteration  28: 6.637 s/op
Iteration  29: 6.635 s/op
Iteration  30: 6.628 s/op
Iteration  31: 6.631 s/op
Iteration  32: 6.632 s/op
Iteration  33: 6.630 s/op
Iteration  34: 6.627 s/op
Iteration  35: 6.617 s/op
Iteration  36: 6.624 s/op
Iteration  37: 6.631 s/op
Iteration  38: 6.628 s/op
Iteration  39: 6.625 s/op
Iteration  40: 6.633 s/op
Iteration  41: 6.636 s/op
Iteration  42: 6.622 s/op
Iteration  43: 6.629 s/op
Iteration  44: 6.631 s/op
Iteration  45: 6.637 s/op
Iteration  46: 6.636 s/op
Iteration  47: 6.638 s/op
Iteration  48: 6.636 s/op
Iteration  49: 6.634 s/op
Iteration  50: 6.641 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.636 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 1 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 47 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.474 s/op
     p(50.0000) =      6.630 s/op
     p(90.0000) =      6.637 s/op
     p(95.0000) =      6.675 s/op
     p(99.0000) =      7.076 s/op
     p(99.9000) =      7.076 s/op
     p(99.9900) =      7.076 s/op
     p(99.9990) =      7.076 s/op
     p(99.9999) =      7.076 s/op
    p(100.0000) =      7.076 s/op


# Run complete. Total time: 00:05:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.636 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot_11.0.4_1565005291647.json
{"wallclock_times": [332.85515585200005], "core_cycle_counts": [[314670264959], [366427953187], [100065197131], [293038280477]], "aperf_counts": [[313864357598], [366318469923], [100002346175], [292989078711]], "mperf_counts": [[314609883258], [367178007812], [100226978370], [293728626978]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 13:47:04: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-08-05 13:47:05: INFO] Estimated completion (whole session): 2019-08-06 02:34:49 (12:47:43 from now)
[2019-08-05 13:47:05: INFO] 82 executions left in scheduler queue
[2019-08-05 13:47:05: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-08-05 13:47:05: INFO] Estimated completion (next execution): 2019-08-05 13:55:09 (0:08:04 from now)
[2019-08-05 13:47:05: INFO] Reboot in preparation for next execution
[2019-08-05 13:51:19: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 13:51:19: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 13:51:19: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 13:51:19: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 13:51:19: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 13:56:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.705 s/op
Iteration   2: 6.978 s/op
Iteration   3: 6.636 s/op
Iteration   4: 6.585 s/op
Iteration   5: 6.593 s/op
Iteration   6: 6.590 s/op
Iteration   7: 6.587 s/op
Iteration   8: 6.591 s/op
Iteration   9: 6.589 s/op
Iteration  10: 6.589 s/op
Iteration  11: 6.591 s/op
Iteration  12: 6.590 s/op
Iteration  13: 6.603 s/op
Iteration  14: 6.600 s/op
Iteration  15: 6.587 s/op
Iteration  16: 6.593 s/op
Iteration  17: 6.591 s/op
Iteration  18: 6.587 s/op
Iteration  19: 6.592 s/op
Iteration  20: 6.585 s/op
Iteration  21: 6.586 s/op
Iteration  22: 6.583 s/op
Iteration  23: 6.593 s/op
Iteration  24: 6.595 s/op
Iteration  25: 6.584 s/op
Iteration  26: 6.590 s/op
Iteration  27: 6.585 s/op
Iteration  28: 6.586 s/op
Iteration  29: 6.590 s/op
Iteration  30: 6.588 s/op
Iteration  31: 6.589 s/op
Iteration  32: 6.598 s/op
Iteration  33: 6.592 s/op
Iteration  34: 6.590 s/op
Iteration  35: 6.590 s/op
Iteration  36: 6.580 s/op
Iteration  37: 6.580 s/op
Iteration  38: 6.596 s/op
Iteration  39: 6.589 s/op
Iteration  40: 6.593 s/op
Iteration  41: 6.597 s/op
Iteration  42: 6.596 s/op
Iteration  43: 6.587 s/op
Iteration  44: 6.590 s/op
Iteration  45: 6.581 s/op
Iteration  46: 6.590 s/op
Iteration  47: 6.593 s/op
Iteration  48: 6.586 s/op
Iteration  49: 6.591 s/op
Iteration  50: 6.586 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.601 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 46 
    [6.600, 6.650) = 2 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.580 s/op
     p(50.0000) =      6.590 s/op
     p(90.0000) =      6.600 s/op
     p(95.0000) =      6.667 s/op
     p(99.0000) =      6.978 s/op
     p(99.9000) =      6.978 s/op
     p(99.9900) =      6.978 s/op
     p(99.9990) =      6.978 s/op
     p(99.9999) =      6.978 s/op
    p(100.0000) =      6.978 s/op


# Run complete. Total time: 00:05:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.601 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot_11.0.4_1565005879671.json
{"wallclock_times": [331.059460635], "core_cycle_counts": [[267725780684], [315960053380], [148902282825], [336810899103]], "aperf_counts": [[266879017696], [315861122165], [148841775323], [336764775688]], "mperf_counts": [[267173626724], [316126778794], [149064889242], [336981330698]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 13:56:50: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-08-05 13:56:51: INFO] Estimated completion (whole session): 2019-08-06 02:36:40 (12:39:48 from now)
[2019-08-05 13:56:51: INFO] 81 executions left in scheduler queue
[2019-08-05 13:56:51: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-08-05 13:56:51: INFO] Estimated completion (next execution): 2019-08-05 14:04:50 (0:07:58 from now)
[2019-08-05 13:56:51: INFO] Reboot in preparation for next execution
[2019-08-05 14:01:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 14:13:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.419 s/op
Iteration   2: 14.882 s/op
Iteration   3: 14.884 s/op
Iteration   4: 14.945 s/op
Iteration   5: 15.995 s/op
Iteration   6: 14.985 s/op
Iteration   7: 14.603 s/op
Iteration   8: 14.763 s/op
Iteration   9: 15.560 s/op
Iteration  10: 15.174 s/op
Iteration  11: 14.543 s/op
Iteration  12: 15.709 s/op
Iteration  13: 14.868 s/op
Iteration  14: 15.567 s/op
Iteration  15: 14.289 s/op
Iteration  16: 14.723 s/op
Iteration  17: 15.734 s/op
Iteration  18: 15.028 s/op
Iteration  19: 15.106 s/op
Iteration  20: 15.180 s/op
Iteration  21: 15.657 s/op
Iteration  22: 14.843 s/op
Iteration  23: 14.838 s/op
Iteration  24: 15.377 s/op
Iteration  25: 15.248 s/op
Iteration  26: 15.234 s/op
Iteration  27: 15.236 s/op
Iteration  28: 14.950 s/op
Iteration  29: 15.073 s/op
Iteration  30: 15.773 s/op
Iteration  31: 14.670 s/op
Iteration  32: 14.805 s/op
Iteration  33: 15.245 s/op
Iteration  34: 15.037 s/op
Iteration  35: 15.378 s/op
Iteration  36: 15.029 s/op
Iteration  37: 15.151 s/op
Iteration  38: 15.823 s/op
Iteration  39: 14.799 s/op
Iteration  40: 15.783 s/op
Iteration  41: 15.453 s/op
Iteration  42: 15.428 s/op
Iteration  43: 14.953 s/op
Iteration  44: 15.684 s/op
Iteration  45: 15.360 s/op
Iteration  46: 14.709 s/op
Iteration  47: 14.942 s/op
Iteration  48: 14.955 s/op
Iteration  49: 14.668 s/op
Iteration  50: 15.070 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.143 ?(99.9%) 0.190 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 1 
    [14.375, 14.500) = 0 
    [14.500, 14.625) = 2 
    [14.625, 14.750) = 4 
    [14.750, 14.875) = 6 
    [14.875, 15.000) = 8 
    [15.000, 15.125) = 6 
    [15.125, 15.250) = 7 
    [15.250, 15.375) = 1 
    [15.375, 15.500) = 5 
    [15.500, 15.625) = 2 
    [15.625, 15.750) = 4 
    [15.750, 15.875) = 3 

  Percentiles, s/op:
      p(0.0000) =     14.289 s/op
     p(50.0000) =     15.072 s/op
     p(90.0000) =     15.732 s/op
     p(95.0000) =     15.801 s/op
     p(99.0000) =     15.995 s/op
     p(99.9000) =     15.995 s/op
     p(99.9900) =     15.995 s/op
     p(99.9990) =     15.995 s/op
     p(99.9999) =     15.995 s/op
    p(100.0000) =     15.995 s/op


# Run complete. Total time: 00:12:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  15.143 ? 0.190   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9-8u222-b10_1565006467149.json
{"wallclock_times": [758.529936088], "core_cycle_counts": [[495352571147], [883277686815], [656823767633], [691912115992]], "aperf_counts": [[493193215964], [883133032984], [656661460113], [691781832753]], "mperf_counts": [[493195657056], [883133582106], [656662092256], [691782325094]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 14:13:45: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-08-05 14:13:46: INFO] Estimated completion (whole session): 2019-08-06 02:38:40 (12:24:53 from now)
[2019-08-05 14:13:46: INFO] 80 executions left in scheduler queue
[2019-08-05 14:13:46: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-08-05 14:13:46: INFO] Estimated completion (next execution): 2019-08-05 14:28:48 (0:15:01 from now)
[2019-08-05 14:13:46: INFO] Reboot in preparation for next execution
[2019-08-05 14:18:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 14:30:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.577 s/op
Iteration   2: 15.324 s/op
Iteration   3: 15.220 s/op
Iteration   4: 15.145 s/op
Iteration   5: 15.137 s/op
Iteration   6: 14.694 s/op
Iteration   7: 14.714 s/op
Iteration   8: 14.656 s/op
Iteration   9: 14.700 s/op
Iteration  10: 14.658 s/op
Iteration  11: 14.698 s/op
Iteration  12: 14.694 s/op
Iteration  13: 14.761 s/op
Iteration  14: 14.643 s/op
Iteration  15: 14.743 s/op
Iteration  16: 14.696 s/op
Iteration  17: 14.649 s/op
Iteration  18: 14.655 s/op
Iteration  19: 14.651 s/op
Iteration  20: 14.728 s/op
Iteration  21: 14.705 s/op
Iteration  22: 14.739 s/op
Iteration  23: 14.675 s/op
Iteration  24: 14.657 s/op
Iteration  25: 14.622 s/op
Iteration  26: 14.645 s/op
Iteration  27: 14.626 s/op
Iteration  28: 14.747 s/op
Iteration  29: 14.650 s/op
Iteration  30: 14.711 s/op
Iteration  31: 14.636 s/op
Iteration  32: 14.626 s/op
Iteration  33: 14.690 s/op
Iteration  34: 14.682 s/op
Iteration  35: 14.682 s/op
Iteration  36: 14.659 s/op
Iteration  37: 14.665 s/op
Iteration  38: 14.632 s/op
Iteration  39: 14.656 s/op
Iteration  40: 14.682 s/op
Iteration  41: 14.675 s/op
Iteration  42: 14.734 s/op
Iteration  43: 14.644 s/op
Iteration  44: 14.704 s/op
Iteration  45: 14.647 s/op
Iteration  46: 14.634 s/op
Iteration  47: 14.675 s/op
Iteration  48: 14.648 s/op
Iteration  49: 14.767 s/op
Iteration  50: 14.670 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     14.779 ?(99.9%) 0.213 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 43 
    [14.750, 15.000) = 2 
    [15.000, 15.250) = 3 
    [15.250, 15.500) = 1 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.622 s/op
     p(50.0000) =     14.679 s/op
     p(90.0000) =     15.100 s/op
     p(95.0000) =     15.267 s/op
     p(99.0000) =     17.577 s/op
     p(99.9000) =     17.577 s/op
     p(99.9900) =     17.577 s/op
     p(99.9990) =     17.577 s/op
     p(99.9999) =     17.577 s/op
    p(100.0000) =     17.577 s/op


# Run complete. Total time: 00:12:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  14.779 ? 0.213   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9-8u222-b10_1565007481682.json
{"wallclock_times": [740.1310500019999], "core_cycle_counts": [[802834231462], [262999995193], [675676768041], [675576692206]], "aperf_counts": [[801024462542], [262763466132], [675515755093], [675419777007]], "mperf_counts": [[801027387594], [262763541892], [675515791476], [675423566362]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 14:30:21: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-08-05 14:30:22: INFO] Estimated completion (whole session): 2019-08-06 02:40:15 (12:09:52 from now)
[2019-08-05 14:30:22: INFO] 79 executions left in scheduler queue
[2019-08-05 14:30:22: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-08-05 14:30:22: INFO] Estimated completion (next execution): 2019-08-05 14:45:18 (0:14:55 from now)
[2019-08-05 14:30:22: INFO] Reboot in preparation for next execution
[2019-08-05 14:34:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 14:34:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 14:34:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 14:34:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 14:34:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 14:40:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.681 s/op
Iteration   2: 6.916 s/op
Iteration   3: 6.527 s/op
Iteration   4: 6.515 s/op
Iteration   5: 6.519 s/op
Iteration   6: 6.519 s/op
Iteration   7: 6.524 s/op
Iteration   8: 6.519 s/op
Iteration   9: 6.519 s/op
Iteration  10: 6.521 s/op
Iteration  11: 6.519 s/op
Iteration  12: 6.528 s/op
Iteration  13: 6.521 s/op
Iteration  14: 6.521 s/op
Iteration  15: 6.520 s/op
Iteration  16: 6.518 s/op
Iteration  17: 6.519 s/op
Iteration  18: 6.519 s/op
Iteration  19: 6.518 s/op
Iteration  20: 6.522 s/op
Iteration  21: 6.520 s/op
Iteration  22: 6.519 s/op
Iteration  23: 6.518 s/op
Iteration  24: 6.518 s/op
Iteration  25: 6.516 s/op
Iteration  26: 6.516 s/op
Iteration  27: 6.517 s/op
Iteration  28: 6.514 s/op
Iteration  29: 6.522 s/op
Iteration  30: 6.520 s/op
Iteration  31: 6.518 s/op
Iteration  32: 6.518 s/op
Iteration  33: 6.520 s/op
Iteration  34: 6.520 s/op
Iteration  35: 6.517 s/op
Iteration  36: 6.520 s/op
Iteration  37: 6.519 s/op
Iteration  38: 6.517 s/op
Iteration  39: 6.519 s/op
Iteration  40: 6.517 s/op
Iteration  41: 6.524 s/op
Iteration  42: 6.521 s/op
Iteration  43: 6.517 s/op
Iteration  44: 6.519 s/op
Iteration  45: 6.516 s/op
Iteration  46: 6.519 s/op
Iteration  47: 6.517 s/op
Iteration  48: 6.518 s/op
Iteration  49: 6.520 s/op
Iteration  50: 6.519 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.530 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [6.500, 6.550) = 48 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 1 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.514 s/op
     p(50.0000) =      6.519 s/op
     p(90.0000) =      6.524 s/op
     p(95.0000) =      6.596 s/op
     p(99.0000) =      6.916 s/op
     p(99.9000) =      6.916 s/op
     p(99.9900) =      6.916 s/op
     p(99.9990) =      6.916 s/op
     p(99.9999) =      6.916 s/op
    p(100.0000) =      6.916 s/op


# Run complete. Total time: 00:05:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.530 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot_12.0.2_1565008480134.json
{"wallclock_times": [327.52122322499997], "core_cycle_counts": [[129161971985], [161976230700], [546502928205], [219783557265]], "aperf_counts": [[128177536422], [161908261119], [546468719096], [219742586149]], "mperf_counts": [[128394803116], [162184428610], [546581729982], [219805904030]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 14:40:07: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-08-05 14:40:08: INFO] Estimated completion (whole session): 2019-08-06 02:41:52 (12:01:44 from now)
[2019-08-05 14:40:08: INFO] 78 executions left in scheduler queue
[2019-08-05 14:40:08: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-08-05 14:40:08: INFO] Estimated completion (next execution): 2019-08-05 14:48:11 (0:08:03 from now)
[2019-08-05 14:40:08: INFO] Reboot in preparation for next execution
[2019-08-05 14:44:25: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 14:44:25: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 14:44:25: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 14:44:25: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 14:44:25: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 14:44:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 14:58:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.662 s/op
Iteration   2: 16.862 s/op
Iteration   3: 15.694 s/op
Iteration   4: 16.065 s/op
Iteration   5: 16.110 s/op
Iteration   6: 16.939 s/op
Iteration   7: 16.872 s/op
Iteration   8: 17.140 s/op
Iteration   9: 16.488 s/op
Iteration  10: 16.583 s/op
Iteration  11: 16.686 s/op
Iteration  12: 16.778 s/op
Iteration  13: 16.742 s/op
Iteration  14: 16.831 s/op
Iteration  15: 16.722 s/op
Iteration  16: 16.847 s/op
Iteration  17: 17.089 s/op
Iteration  18: 16.935 s/op
Iteration  19: 16.679 s/op
Iteration  20: 16.994 s/op
Iteration  21: 17.078 s/op
Iteration  22: 16.807 s/op
Iteration  23: 16.317 s/op
Iteration  24: 17.025 s/op
Iteration  25: 16.919 s/op
Iteration  26: 16.870 s/op
Iteration  27: 16.958 s/op
Iteration  28: 16.926 s/op
Iteration  29: 16.445 s/op
Iteration  30: 17.017 s/op
Iteration  31: 16.669 s/op
Iteration  32: 17.027 s/op
Iteration  33: 17.102 s/op
Iteration  34: 16.840 s/op
Iteration  35: 17.065 s/op
Iteration  36: 17.146 s/op
Iteration  37: 17.000 s/op
Iteration  38: 16.229 s/op
Iteration  39: 16.642 s/op
Iteration  40: 16.323 s/op
Iteration  41: 16.327 s/op
Iteration  42: 16.792 s/op
Iteration  43: 16.831 s/op
Iteration  44: 17.079 s/op
Iteration  45: 16.242 s/op
Iteration  46: 16.902 s/op
Iteration  47: 16.670 s/op
Iteration  48: 16.827 s/op
Iteration  49: 15.580 s/op
Iteration  50: 16.981 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.727 ?(99.9%) 0.176 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 2 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 4 
    [16.250, 16.500) = 5 
    [16.500, 16.750) = 9 
    [16.750, 17.000) = 19 
    [17.000, 17.250) = 11 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.580 s/op
     p(50.0000) =     16.831 s/op
     p(90.0000) =     17.079 s/op
     p(95.0000) =     17.119 s/op
     p(99.0000) =     17.146 s/op
     p(99.9000) =     17.146 s/op
     p(99.9900) =     17.146 s/op
     p(99.9990) =     17.146 s/op
     p(99.9999) =     17.146 s/op
    p(100.0000) =     17.146 s/op


# Run complete. Total time: 00:13:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.727 ? 0.176   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9_11.0.4_1565009065921.json
{"wallclock_times": [838.121617693], "core_cycle_counts": [[619714097467], [836534157107], [871449259768], [686382640350]], "aperf_counts": [[617424838352], [836370056527], [871286811476], [686203265541]], "mperf_counts": [[617425688004], [836370697994], [871286782014], [686203231368]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 14:58:24: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-08-05 14:58:25: INFO] Estimated completion (whole session): 2019-08-06 02:44:01 (11:45:36 from now)
[2019-08-05 14:58:25: INFO] 77 executions left in scheduler queue
[2019-08-05 14:58:25: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-08-05 14:58:25: INFO] Estimated completion (next execution): 2019-08-05 15:14:43 (0:16:18 from now)
[2019-08-05 14:58:25: INFO] Reboot in preparation for next execution
[2019-08-05 15:02:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 15:12:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.945 s/op
Iteration   2: 11.647 s/op
Iteration   3: 11.167 s/op
Iteration   4: 11.148 s/op
Iteration   5: 11.127 s/op
Iteration   6: 10.993 s/op
Iteration   7: 10.968 s/op
Iteration   8: 10.984 s/op
Iteration   9: 10.972 s/op
Iteration  10: 11.015 s/op
Iteration  11: 11.031 s/op
Iteration  12: 11.003 s/op
Iteration  13: 10.974 s/op
Iteration  14: 11.002 s/op
Iteration  15: 10.973 s/op
Iteration  16: 10.965 s/op
Iteration  17: 10.991 s/op
Iteration  18: 10.985 s/op
Iteration  19: 10.980 s/op
Iteration  20: 11.050 s/op
Iteration  21: 10.987 s/op
Iteration  22: 11.015 s/op
Iteration  23: 10.993 s/op
Iteration  24: 10.992 s/op
Iteration  25: 11.009 s/op
Iteration  26: 11.036 s/op
Iteration  27: 11.026 s/op
Iteration  28: 10.994 s/op
Iteration  29: 11.008 s/op
Iteration  30: 11.013 s/op
Iteration  31: 10.985 s/op
Iteration  32: 10.987 s/op
Iteration  33: 11.006 s/op
Iteration  34: 11.004 s/op
Iteration  35: 10.990 s/op
Iteration  36: 10.983 s/op
Iteration  37: 10.989 s/op
Iteration  38: 10.975 s/op
Iteration  39: 11.016 s/op
Iteration  40: 11.003 s/op
Iteration  41: 10.999 s/op
Iteration  42: 11.014 s/op
Iteration  43: 11.030 s/op
Iteration  44: 11.022 s/op
Iteration  45: 10.997 s/op
Iteration  46: 10.985 s/op
Iteration  47: 10.979 s/op
Iteration  48: 10.980 s/op
Iteration  49: 10.998 s/op
Iteration  50: 11.015 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     11.039 ?(99.9%) 0.081 s/op

  Histogram, s/op:
    [10.900, 11.000) = 26 
    [11.000, 11.100) = 19 
    [11.100, 11.200) = 3 
    [11.200, 11.300) = 0 
    [11.300, 11.400) = 0 
    [11.400, 11.500) = 0 
    [11.500, 11.600) = 0 
    [11.600, 11.700) = 1 
    [11.700, 11.800) = 0 
    [11.800, 11.900) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.965 s/op
     p(50.0000) =     10.998 s/op
     p(90.0000) =     11.120 s/op
     p(95.0000) =     11.383 s/op
     p(99.0000) =     11.945 s/op
     p(99.9000) =     11.945 s/op
     p(99.9900) =     11.945 s/op
     p(99.9990) =     11.945 s/op
     p(99.9999) =     11.945 s/op
    p(100.0000) =     11.945 s/op


# Run complete. Total time: 00:09:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  11.039 ? 0.081   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9-8u222-b10_1565010176007.json
{"wallclock_times": [553.150217214], "core_cycle_counts": [[453724486534], [253537273511], [425214182098], [661882069017]], "aperf_counts": [[452188101389], [253346250562], [425096217792], [661824626468]], "mperf_counts": [[452199631122], [253347545300], [425097388996], [661825716746]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 15:12:09: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-08-05 15:12:10: INFO] Estimated completion (whole session): 2019-08-06 02:45:58 (11:33:48 from now)
[2019-08-05 15:12:10: INFO] 76 executions left in scheduler queue
[2019-08-05 15:12:10: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-08-05 15:12:10: INFO] Estimated completion (next execution): 2019-08-05 15:23:55 (0:11:45 from now)
[2019-08-05 15:12:10: INFO] Reboot in preparation for next execution
[2019-08-05 15:22:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.068 s/op
Iteration   2: 7.976 s/op
Iteration   3: 7.640 s/op
Iteration   4: 7.645 s/op
Iteration   5: 7.652 s/op
Iteration   6: 7.647 s/op
Iteration   7: 7.651 s/op
Iteration   8: 7.643 s/op
Iteration   9: 7.650 s/op
Iteration  10: 7.642 s/op
Iteration  11: 7.648 s/op
Iteration  12: 7.653 s/op
Iteration  13: 7.656 s/op
Iteration  14: 7.646 s/op
Iteration  15: 7.653 s/op
Iteration  16: 7.643 s/op
Iteration  17: 7.651 s/op
Iteration  18: 7.653 s/op
Iteration  19: 7.653 s/op
Iteration  20: 7.652 s/op
Iteration  21: 7.641 s/op
Iteration  22: 7.653 s/op
Iteration  23: 7.649 s/op
Iteration  24: 7.646 s/op
Iteration  25: 7.652 s/op
Iteration  26: 7.644 s/op
Iteration  27: 7.658 s/op
Iteration  28: 7.649 s/op
Iteration  29: 7.645 s/op
Iteration  30: 7.649 s/op
Iteration  31: 7.644 s/op
Iteration  32: 7.647 s/op
Iteration  33: 7.660 s/op
Iteration  34: 7.642 s/op
Iteration  35: 7.648 s/op
Iteration  36: 7.645 s/op
Iteration  37: 7.643 s/op
Iteration  38: 7.648 s/op
Iteration  39: 7.643 s/op
Iteration  40: 7.649 s/op
Iteration  41: 7.652 s/op
Iteration  42: 7.648 s/op
Iteration  43: 7.645 s/op
Iteration  44: 7.650 s/op
Iteration  45: 7.653 s/op
Iteration  46: 7.655 s/op
Iteration  47: 7.649 s/op
Iteration  48: 7.651 s/op
Iteration  49: 7.648 s/op
Iteration  50: 7.643 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      7.663 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [7.600, 7.625) = 0 
    [7.625, 7.650) = 31 
    [7.650, 7.675) = 17 
    [7.675, 7.700) = 0 
    [7.700, 7.725) = 0 
    [7.725, 7.750) = 0 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 0 
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 0 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 
    [7.975, 8.000) = 1 
    [8.000, 8.025) = 0 
    [8.025, 8.050) = 0 
    [8.050, 8.075) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.640 s/op
     p(50.0000) =      7.649 s/op
     p(90.0000) =      7.656 s/op
     p(95.0000) =      7.803 s/op
     p(99.0000) =      8.068 s/op
     p(99.9000) =      8.068 s/op
     p(99.9900) =      8.068 s/op
     p(99.9990) =      8.068 s/op
     p(99.9999) =      8.068 s/op
    p(100.0000) =      8.068 s/op


# Run complete. Total time: 00:06:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  7.663 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot-8u222-b10_1565010983779.json
{"wallclock_times": [384.05373873400004], "core_cycle_counts": [[322744418715], [216006081797], [340797463014], [356945253209]], "aperf_counts": [[321849608787], [215918387445], [340760361808], [356911869043]], "mperf_counts": [[321874929808], [215942992704], [340762960970], [356913251592]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 15:22:47: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-08-05 15:22:48: INFO] Estimated completion (whole session): 2019-08-06 02:47:31 (11:24:43 from now)
[2019-08-05 15:22:48: INFO] 75 executions left in scheduler queue
[2019-08-05 15:22:48: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-05 15:22:48: INFO] Estimated completion (next execution): 2019-08-05 15:31:48 (0:08:59 from now)
[2019-08-05 15:22:48: INFO] Reboot in preparation for next execution
[2019-08-05 15:28:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.056 s/op
Iteration   2: 1.582 s/op
Iteration   3: 1.891 s/op
Iteration   4: 1.967 s/op
Iteration   5: 1.892 s/op
Iteration   6: 1.885 s/op
Iteration   7: 1.881 s/op
Iteration   8: 1.880 s/op
Iteration   9: 1.899 s/op
Iteration  10: 1.889 s/op
Iteration  11: 1.886 s/op
Iteration  12: 1.886 s/op
Iteration  13: 1.887 s/op
Iteration  14: 1.885 s/op
Iteration  15: 1.883 s/op
Iteration  16: 1.890 s/op
Iteration  17: 1.890 s/op
Iteration  18: 1.884 s/op
Iteration  19: 1.886 s/op
Iteration  20: 1.890 s/op
Iteration  21: 1.878 s/op
Iteration  22: 1.882 s/op
Iteration  23: 1.885 s/op
Iteration  24: 1.885 s/op
Iteration  25: 1.881 s/op
Iteration  26: 1.882 s/op
Iteration  27: 1.880 s/op
Iteration  28: 1.885 s/op
Iteration  29: 1.884 s/op
Iteration  30: 1.885 s/op
Iteration  31: 1.880 s/op
Iteration  32: 1.880 s/op
Iteration  33: 1.878 s/op
Iteration  34: 1.880 s/op
Iteration  35: 1.878 s/op
Iteration  36: 1.880 s/op
Iteration  37: 1.888 s/op
Iteration  38: 1.886 s/op
Iteration  39: 1.880 s/op
Iteration  40: 1.882 s/op
Iteration  41: 1.886 s/op
Iteration  42: 1.883 s/op
Iteration  43: 1.886 s/op
Iteration  44: 1.887 s/op
Iteration  45: 1.887 s/op
Iteration  46: 1.884 s/op
Iteration  47: 1.886 s/op
Iteration  48: 1.884 s/op
Iteration  49: 1.887 s/op
Iteration  50: 1.887 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.884 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 1 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 47 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.582 s/op
     p(50.0000) =      1.885 s/op
     p(90.0000) =      1.891 s/op
     p(95.0000) =      1.929 s/op
     p(99.0000) =      2.056 s/op
     p(99.9000) =      2.056 s/op
     p(99.9900) =      2.056 s/op
     p(99.9990) =      2.056 s/op
     p(99.9999) =      2.056 s/op
    p(100.0000) =      2.056 s/op


# Run complete. Total time: 00:01:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.884 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot-8u222-b10_1565011622723.json
{"wallclock_times": [95.097921213], "core_cycle_counts": [[126930703320], [89673407397], [35029702726], [67747230714]], "aperf_counts": [[126700516059], [89634619644], [35001836889], [67725678775]], "mperf_counts": [[126736168762], [89639620462], [35004416392], [67726336004]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 15:28:37: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-05 15:28:38: INFO] Estimated completion (whole session): 2019-08-06 02:49:08 (11:20:29 from now)
[2019-08-05 15:28:38: INFO] 74 executions left in scheduler queue
[2019-08-05 15:28:38: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-05 15:28:38: INFO] Estimated completion (next execution): 2019-08-05 15:32:48 (0:04:09 from now)
[2019-08-05 15:28:38: INFO] Reboot in preparation for next execution
[2019-08-05 15:34:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.944 s/op
Iteration   2: 1.433 s/op
Iteration   3: 1.769 s/op
Iteration   4: 1.626 s/op
Iteration   5: 1.643 s/op
Iteration   6: 1.630 s/op
Iteration   7: 1.623 s/op
Iteration   8: 1.624 s/op
Iteration   9: 1.624 s/op
Iteration  10: 1.623 s/op
Iteration  11: 1.624 s/op
Iteration  12: 1.627 s/op
Iteration  13: 1.624 s/op
Iteration  14: 1.624 s/op
Iteration  15: 1.624 s/op
Iteration  16: 1.623 s/op
Iteration  17: 1.621 s/op
Iteration  18: 1.619 s/op
Iteration  19: 1.622 s/op
Iteration  20: 1.619 s/op
Iteration  21: 1.620 s/op
Iteration  22: 1.618 s/op
Iteration  23: 1.620 s/op
Iteration  24: 1.619 s/op
Iteration  25: 1.619 s/op
Iteration  26: 1.622 s/op
Iteration  27: 1.620 s/op
Iteration  28: 1.620 s/op
Iteration  29: 1.619 s/op
Iteration  30: 1.620 s/op
Iteration  31: 1.619 s/op
Iteration  32: 1.619 s/op
Iteration  33: 1.618 s/op
Iteration  34: 1.620 s/op
Iteration  35: 1.619 s/op
Iteration  36: 1.622 s/op
Iteration  37: 1.618 s/op
Iteration  38: 1.617 s/op
Iteration  39: 1.618 s/op
Iteration  40: 1.619 s/op
Iteration  41: 1.621 s/op
Iteration  42: 1.618 s/op
Iteration  43: 1.618 s/op
Iteration  44: 1.619 s/op
Iteration  45: 1.617 s/op
Iteration  46: 1.619 s/op
Iteration  47: 1.617 s/op
Iteration  48: 1.618 s/op
Iteration  49: 1.619 s/op
Iteration  50: 1.620 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.627 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.400, 1.450) = 1 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 47 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.433 s/op
     p(50.0000) =      1.620 s/op
     p(90.0000) =      1.627 s/op
     p(95.0000) =      1.700 s/op
     p(99.0000) =      1.944 s/op
     p(99.9000) =      1.944 s/op
     p(99.9900) =      1.944 s/op
     p(99.9990) =      1.944 s/op
     p(99.9999) =      1.944 s/op
    p(100.0000) =      1.944 s/op


# Run complete. Total time: 00:01:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.627 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot-8u222-b10_1565011974256.json
{"wallclock_times": [82.200362471], "core_cycle_counts": [[34089574328], [36602464931], [70385425245], [129503786936]], "aperf_counts": [[33860389688], [36579554216], [70373081557], [129493777100]], "mperf_counts": [[33900838722], [36580679308], [70376931002], [129494018756]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 15:34:16: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-05 15:34:17: INFO] Estimated completion (whole session): 2019-08-06 02:50:36 (11:16:18 from now)
[2019-08-05 15:34:17: INFO] 73 executions left in scheduler queue
[2019-08-05 15:34:17: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-08-05 15:34:17: INFO] Estimated completion (next execution): 2019-08-05 15:38:18 (0:04:01 from now)
[2019-08-05 15:34:17: INFO] Reboot in preparation for next execution
[2019-08-05 15:45:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.006 s/op
Iteration   2: 8.591 s/op
Iteration   3: 9.044 s/op
Iteration   4: 8.902 s/op
Iteration   5: 8.722 s/op
Iteration   6: 8.711 s/op
Iteration   7: 8.684 s/op
Iteration   8: 8.721 s/op
Iteration   9: 8.736 s/op
Iteration  10: 8.774 s/op
Iteration  11: 8.608 s/op
Iteration  12: 8.809 s/op
Iteration  13: 9.472 s/op
Iteration  14: 8.686 s/op
Iteration  15: 8.636 s/op
Iteration  16: 8.808 s/op
Iteration  17: 8.625 s/op
Iteration  18: 8.635 s/op
Iteration  19: 8.787 s/op
Iteration  20: 8.640 s/op
Iteration  21: 8.802 s/op
Iteration  22: 8.646 s/op
Iteration  23: 8.642 s/op
Iteration  24: 9.782 s/op
Iteration  25: 8.562 s/op
Iteration  26: 8.785 s/op
Iteration  27: 8.636 s/op
Iteration  28: 8.656 s/op
Iteration  29: 8.810 s/op
Iteration  30: 8.651 s/op
Iteration  31: 8.680 s/op
Iteration  32: 8.847 s/op
Iteration  33: 8.692 s/op
Iteration  34: 8.841 s/op
Iteration  35: 9.585 s/op
Iteration  36: 8.608 s/op
Iteration  37: 8.816 s/op
Iteration  38: 8.644 s/op
Iteration  39: 8.639 s/op
Iteration  40: 8.798 s/op
Iteration  41: 8.656 s/op
Iteration  42: 8.651 s/op
Iteration  43: 8.806 s/op
Iteration  44: 8.643 s/op
Iteration  45: 8.837 s/op
Iteration  46: 9.534 s/op
Iteration  47: 8.593 s/op
Iteration  48: 8.799 s/op
Iteration  49: 8.624 s/op
Iteration  50: 8.644 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.790 ?(99.9%) 0.130 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 7 
    [ 8.625,  8.750) = 22 
    [ 8.750,  8.875) = 14 
    [ 8.875,  9.000) = 1 
    [ 9.000,  9.125) = 2 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 2 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.562 s/op
     p(50.0000) =      8.701 s/op
     p(90.0000) =      9.041 s/op
     p(95.0000) =      9.557 s/op
     p(99.0000) =      9.782 s/op
     p(99.9000) =      9.782 s/op
     p(99.9900) =      9.782 s/op
     p(99.9990) =      9.782 s/op
     p(99.9999) =      9.782 s/op
    p(100.0000) =      9.782 s/op


# Run complete. Total time: 00:07:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.790 ? 0.130   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_graalvm-ce-19.1.1_1565012311848.json
{"wallclock_times": [440.47703646599996], "core_cycle_counts": [[407284926711], [387567804439], [391471439538], [442204549861]], "aperf_counts": [[406186209515], [387464276339], [391428953613], [442164723674]], "mperf_counts": [[406199426220], [387480205870], [391431233898], [442175904178]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 15:45:52: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-08-05 15:45:53: INFO] Estimated completion (whole session): 2019-08-06 02:52:21 (11:06:28 from now)
[2019-08-05 15:45:53: INFO] 72 executions left in scheduler queue
[2019-08-05 15:45:53: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-08-05 15:45:53: INFO] Estimated completion (next execution): 2019-08-05 15:55:44 (0:09:50 from now)
[2019-08-05 15:45:53: INFO] Reboot in preparation for next execution
[2019-08-05 15:53:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.435 s/op
Iteration   2: 4.165 s/op
Iteration   3: 4.274 s/op
Iteration   4: 4.268 s/op
Iteration   5: 4.132 s/op
Iteration   6: 4.128 s/op
Iteration   7: 4.128 s/op
Iteration   8: 4.131 s/op
Iteration   9: 4.134 s/op
Iteration  10: 4.171 s/op
Iteration  11: 4.131 s/op
Iteration  12: 4.126 s/op
Iteration  13: 4.130 s/op
Iteration  14: 4.135 s/op
Iteration  15: 4.129 s/op
Iteration  16: 4.129 s/op
Iteration  17: 4.125 s/op
Iteration  18: 4.126 s/op
Iteration  19: 4.132 s/op
Iteration  20: 4.133 s/op
Iteration  21: 4.135 s/op
Iteration  22: 4.136 s/op
Iteration  23: 4.132 s/op
Iteration  24: 4.128 s/op
Iteration  25: 4.129 s/op
Iteration  26: 4.124 s/op
Iteration  27: 4.129 s/op
Iteration  28: 4.134 s/op
Iteration  29: 4.128 s/op
Iteration  30: 4.130 s/op
Iteration  31: 4.135 s/op
Iteration  32: 4.126 s/op
Iteration  33: 4.144 s/op
Iteration  34: 4.126 s/op
Iteration  35: 4.147 s/op
Iteration  36: 4.129 s/op
Iteration  37: 4.131 s/op
Iteration  38: 4.129 s/op
Iteration  39: 4.133 s/op
Iteration  40: 4.140 s/op
Iteration  41: 4.131 s/op
Iteration  42: 4.128 s/op
Iteration  43: 4.145 s/op
Iteration  44: 4.134 s/op
Iteration  45: 4.128 s/op
Iteration  46: 4.127 s/op
Iteration  47: 4.132 s/op
Iteration  48: 4.128 s/op
Iteration  49: 4.143 s/op
Iteration  50: 4.130 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      4.145 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [4.100, 4.125) = 2 
    [4.125, 4.150) = 43 
    [4.150, 4.175) = 2 
    [4.175, 4.200) = 0 
    [4.200, 4.225) = 0 
    [4.225, 4.250) = 0 
    [4.250, 4.275) = 2 
    [4.275, 4.300) = 0 
    [4.300, 4.325) = 0 
    [4.325, 4.350) = 0 
    [4.350, 4.375) = 0 
    [4.375, 4.400) = 0 
    [4.400, 4.425) = 0 
    [4.425, 4.450) = 1 
    [4.450, 4.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.124 s/op
     p(50.0000) =      4.131 s/op
     p(90.0000) =      4.163 s/op
     p(95.0000) =      4.271 s/op
     p(99.0000) =      4.435 s/op
     p(99.9000) =      4.435 s/op
     p(99.9900) =      4.435 s/op
     p(99.9990) =      4.435 s/op
     p(99.9999) =      4.435 s/op
    p(100.0000) =      4.435 s/op


# Run complete. Total time: 00:03:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  4.145 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot-8u222-b10_1565013010783.json
{"wallclock_times": [208.11574061199997], "core_cycle_counts": [[91757663626], [231617366336], [216436889770], [131363100819]], "aperf_counts": [[91199706505], [231577615536], [216413307820], [131336936147]], "mperf_counts": [[91223694512], [231577809794], [216435828630], [131337399490]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 15:53:38: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-08-05 15:53:39: INFO] Estimated completion (whole session): 2019-08-06 02:54:18 (11:00:38 from now)
[2019-08-05 15:53:39: INFO] 71 executions left in scheduler queue
[2019-08-05 15:53:39: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-08-05 15:53:39: INFO] Estimated completion (next execution): 2019-08-05 15:59:33 (0:05:54 from now)
[2019-08-05 15:53:39: INFO] Reboot in preparation for next execution
[2019-08-05 16:05:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.998 s/op
Iteration   2: 8.963 s/op
Iteration   3: 8.846 s/op
Iteration   4: 8.989 s/op
Iteration   5: 8.755 s/op
Iteration   6: 8.673 s/op
Iteration   7: 8.821 s/op
Iteration   8: 8.737 s/op
Iteration   9: 8.785 s/op
Iteration  10: 8.626 s/op
Iteration  11: 8.804 s/op
Iteration  12: 9.465 s/op
Iteration  13: 8.681 s/op
Iteration  14: 8.705 s/op
Iteration  15: 8.692 s/op
Iteration  16: 8.830 s/op
Iteration  17: 8.662 s/op
Iteration  18: 8.676 s/op
Iteration  19: 8.829 s/op
Iteration  20: 8.683 s/op
Iteration  21: 8.675 s/op
Iteration  22: 8.664 s/op
Iteration  23: 9.834 s/op
Iteration  24: 8.613 s/op
Iteration  25: 8.674 s/op
Iteration  26: 8.852 s/op
Iteration  27: 8.672 s/op
Iteration  28: 8.688 s/op
Iteration  29: 8.663 s/op
Iteration  30: 8.861 s/op
Iteration  31: 8.673 s/op
Iteration  32: 8.706 s/op
Iteration  33: 8.662 s/op
Iteration  34: 9.945 s/op
Iteration  35: 8.617 s/op
Iteration  36: 8.681 s/op
Iteration  37: 8.711 s/op
Iteration  38: 8.845 s/op
Iteration  39: 8.690 s/op
Iteration  40: 8.698 s/op
Iteration  41: 8.675 s/op
Iteration  42: 8.864 s/op
Iteration  43: 8.682 s/op
Iteration  44: 8.696 s/op
Iteration  45: 8.675 s/op
Iteration  46: 8.903 s/op
Iteration  47: 8.706 s/op
Iteration  48: 8.682 s/op
Iteration  49: 8.677 s/op
Iteration  50: 8.850 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.801 ?(99.9%) 0.131 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 2 
    [ 8.625,  8.750) = 29 
    [ 8.750,  8.875) = 12 
    [ 8.875,  9.000) = 4 
    [ 9.000,  9.125) = 0 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.613 s/op
     p(50.0000) =      8.697 s/op
     p(90.0000) =      8.986 s/op
     p(95.0000) =      9.631 s/op
     p(99.0000) =      9.945 s/op
     p(99.9000) =      9.945 s/op
     p(99.9900) =      9.945 s/op
     p(99.9990) =      9.945 s/op
     p(99.9999) =      9.945 s/op
    p(100.0000) =      9.945 s/op


# Run complete. Total time: 00:07:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.801 ? 0.131   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_graalvm-ce-19.1.1_1565013474626.json
{"wallclock_times": [441.03572714699993], "core_cycle_counts": [[262786355432], [293522344746], [562132984619], [509225364297]], "aperf_counts": [[261529884449], [293448687053], [562089934630], [509189118859]], "mperf_counts": [[261538103920], [293449073078], [562100191132], [509207460904]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 16:05:15: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-08-05 16:05:16: INFO] Estimated completion (whole session): 2019-08-06 02:56:03 (10:50:47 from now)
[2019-08-05 16:05:16: INFO] 70 executions left in scheduler queue
[2019-08-05 16:05:16: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:05:16: INFO] Estimated completion (next execution): 2019-08-05 16:15:08 (0:09:51 from now)
[2019-08-05 16:05:16: INFO] Reboot in preparation for next execution
[2019-08-05 16:08:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 16:08:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 16:08:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 16:08:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 16:08:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 16:08:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 16:14:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.559 s/op
Iteration   2: 6.941 s/op
Iteration   3: 6.622 s/op
Iteration   4: 6.576 s/op
Iteration   5: 6.474 s/op
Iteration   6: 6.620 s/op
Iteration   7: 6.574 s/op
Iteration   8: 6.635 s/op
Iteration   9: 6.532 s/op
Iteration  10: 6.603 s/op
Iteration  11: 6.529 s/op
Iteration  12: 6.552 s/op
Iteration  13: 6.505 s/op
Iteration  14: 6.543 s/op
Iteration  15: 6.485 s/op
Iteration  16: 6.485 s/op
Iteration  17: 6.528 s/op
Iteration  18: 6.513 s/op
Iteration  19: 6.440 s/op
Iteration  20: 6.494 s/op
Iteration  21: 6.537 s/op
Iteration  22: 6.622 s/op
Iteration  23: 6.510 s/op
Iteration  24: 6.633 s/op
Iteration  25: 6.498 s/op
Iteration  26: 6.510 s/op
Iteration  27: 6.596 s/op
Iteration  28: 6.568 s/op
Iteration  29: 6.632 s/op
Iteration  30: 6.532 s/op
Iteration  31: 6.567 s/op
Iteration  32: 6.614 s/op
Iteration  33: 6.458 s/op
Iteration  34: 6.555 s/op
Iteration  35: 6.473 s/op
Iteration  36: 6.597 s/op
Iteration  37: 6.551 s/op
Iteration  38: 6.533 s/op
Iteration  39: 6.549 s/op
Iteration  40: 6.493 s/op
Iteration  41: 6.556 s/op
Iteration  42: 6.484 s/op
Iteration  43: 6.470 s/op
Iteration  44: 6.526 s/op
Iteration  45: 6.495 s/op
Iteration  46: 6.432 s/op
Iteration  47: 6.558 s/op
Iteration  48: 6.544 s/op
Iteration  49: 6.550 s/op
Iteration  50: 6.469 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.586 ?(99.9%) 0.146 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 14 
    [6.500, 6.750) = 34 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.432 s/op
     p(50.0000) =      6.540 s/op
     p(90.0000) =      6.631 s/op
     p(95.0000) =      6.773 s/op
     p(99.0000) =      8.559 s/op
     p(99.9000) =      8.559 s/op
     p(99.9900) =      8.559 s/op
     p(99.9990) =      8.559 s/op
     p(99.9999) =      8.559 s/op
    p(100.0000) =      8.559 s/op


# Run complete. Total time: 00:05:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.586 ? 0.146   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9_11.0.4_1565014129598.json
{"wallclock_times": [331.211112431], "core_cycle_counts": [[341877156798], [224584933987], [285817501273], [244918353383]], "aperf_counts": [[341082004507], [224459827116], [285721785792], [244789112550]], "mperf_counts": [[341084159406], [224459794440], [285722482818], [244789108614]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 16:14:20: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:14:21: INFO] Estimated completion (whole session): 2019-08-06 02:56:53 (10:42:31 from now)
[2019-08-05 16:14:21: INFO] 69 executions left in scheduler queue
[2019-08-05 16:14:21: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:14:21: INFO] Estimated completion (next execution): 2019-08-05 16:22:30 (0:08:08 from now)
[2019-08-05 16:14:21: INFO] Reboot in preparation for next execution
[2019-08-05 16:18:38: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 16:18:38: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 16:18:38: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 16:18:38: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 16:18:38: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 16:18:38: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 16:27:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.397 s/op
Iteration   2: 10.117 s/op
Iteration   3: 10.248 s/op
Iteration   4: 10.263 s/op
Iteration   5: 10.283 s/op
Iteration   6: 10.268 s/op
Iteration   7: 10.235 s/op
Iteration   8: 10.253 s/op
Iteration   9: 10.261 s/op
Iteration  10: 10.183 s/op
Iteration  11: 10.252 s/op
Iteration  12: 10.239 s/op
Iteration  13: 10.194 s/op
Iteration  14: 10.348 s/op
Iteration  15: 10.544 s/op
Iteration  16: 10.589 s/op
Iteration  17: 10.589 s/op
Iteration  18: 10.560 s/op
Iteration  19: 10.510 s/op
Iteration  20: 10.608 s/op
Iteration  21: 10.585 s/op
Iteration  22: 10.545 s/op
Iteration  23: 10.597 s/op
Iteration  24: 10.602 s/op
Iteration  25: 10.510 s/op
Iteration  26: 10.582 s/op
Iteration  27: 10.514 s/op
Iteration  28: 10.529 s/op
Iteration  29: 10.498 s/op
Iteration  30: 10.447 s/op
Iteration  31: 10.510 s/op
Iteration  32: 10.407 s/op
Iteration  33: 10.491 s/op
Iteration  34: 10.438 s/op
Iteration  35: 10.526 s/op
Iteration  36: 10.564 s/op
Iteration  37: 10.504 s/op
Iteration  38: 10.418 s/op
Iteration  39: 10.520 s/op
Iteration  40: 10.505 s/op
Iteration  41: 10.490 s/op
Iteration  42: 10.533 s/op
Iteration  43: 10.454 s/op
Iteration  44: 10.484 s/op
Iteration  45: 10.539 s/op
Iteration  46: 10.531 s/op
Iteration  47: 10.536 s/op
Iteration  48: 10.467 s/op
Iteration  49: 10.450 s/op
Iteration  50: 10.433 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.483 ?(99.9%) 0.152 s/op

  Histogram, s/op:
    [10.000, 10.250) = 6 
    [10.250, 10.500) = 19 
    [10.500, 10.750) = 24 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 1 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.117 s/op
     p(50.0000) =     10.501 s/op
     p(90.0000) =     10.589 s/op
     p(95.0000) =     10.605 s/op
     p(99.0000) =     12.397 s/op
     p(99.9000) =     12.397 s/op
     p(99.9900) =     12.397 s/op
     p(99.9990) =     12.397 s/op
     p(99.9999) =     12.397 s/op
    p(100.0000) =     12.397 s/op


# Run complete. Total time: 00:08:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.483 ? 0.152   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9_11.0.4_1565014718164.json
{"wallclock_times": [525.707428955], "core_cycle_counts": [[306127214318], [385669667104], [535777031709], [496579454498]], "aperf_counts": [[304643997416], [385548210012], [535674192199], [496514321284]], "mperf_counts": [[304653350142], [385548369186], [535676098806], [496514311008]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 16:27:23: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:27:24: INFO] Estimated completion (whole session): 2019-08-06 02:59:45 (10:32:20 from now)
[2019-08-05 16:27:24: INFO] 68 executions left in scheduler queue
[2019-08-05 16:27:24: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:27:24: INFO] Estimated completion (next execution): 2019-08-05 16:38:08 (0:10:43 from now)
[2019-08-05 16:27:24: INFO] Reboot in preparation for next execution
[2019-08-05 16:31:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 16:31:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 16:31:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 16:31:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 16:31:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 16:31:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 16:37:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.261 s/op
Iteration   2: 6.848 s/op
Iteration   3: 6.442 s/op
Iteration   4: 6.417 s/op
Iteration   5: 6.447 s/op
Iteration   6: 6.363 s/op
Iteration   7: 6.325 s/op
Iteration   8: 6.364 s/op
Iteration   9: 6.340 s/op
Iteration  10: 6.313 s/op
Iteration  11: 6.317 s/op
Iteration  12: 6.301 s/op
Iteration  13: 6.318 s/op
Iteration  14: 6.341 s/op
Iteration  15: 6.354 s/op
Iteration  16: 6.365 s/op
Iteration  17: 6.344 s/op
Iteration  18: 6.275 s/op
Iteration  19: 6.238 s/op
Iteration  20: 6.258 s/op
Iteration  21: 6.247 s/op
Iteration  22: 6.326 s/op
Iteration  23: 6.344 s/op
Iteration  24: 6.324 s/op
Iteration  25: 6.332 s/op
Iteration  26: 6.277 s/op
Iteration  27: 6.274 s/op
Iteration  28: 6.251 s/op
Iteration  29: 6.326 s/op
Iteration  30: 6.293 s/op
Iteration  31: 6.300 s/op
Iteration  32: 6.296 s/op
Iteration  33: 6.298 s/op
Iteration  34: 6.305 s/op
Iteration  35: 6.259 s/op
Iteration  36: 6.315 s/op
Iteration  37: 6.290 s/op
Iteration  38: 6.287 s/op
Iteration  39: 6.356 s/op
Iteration  40: 6.314 s/op
Iteration  41: 6.301 s/op
Iteration  42: 6.263 s/op
Iteration  43: 6.281 s/op
Iteration  44: 6.300 s/op
Iteration  45: 6.291 s/op
Iteration  46: 6.320 s/op
Iteration  47: 6.384 s/op
Iteration  48: 6.247 s/op
Iteration  49: 6.243 s/op
Iteration  50: 6.213 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.362 ?(99.9%) 0.143 s/op

  Histogram, s/op:
    [6.000, 6.250) = 5 
    [6.250, 6.500) = 43 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.213 s/op
     p(50.0000) =      6.313 s/op
     p(90.0000) =      6.413 s/op
     p(95.0000) =      6.628 s/op
     p(99.0000) =      8.261 s/op
     p(99.9000) =      8.261 s/op
     p(99.9900) =      8.261 s/op
     p(99.9990) =      8.261 s/op
     p(99.9999) =      8.261 s/op
    p(100.0000) =      8.261 s/op


# Run complete. Total time: 00:05:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.362 ? 0.143   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9_11.0.4_1565015515093.json
{"wallclock_times": [320.00133886000003], "core_cycle_counts": [[292220515859], [263402557473], [371894753275], [273379122129]], "aperf_counts": [[291305813792], [263251833077], [371801751607], [273267957366]], "mperf_counts": [[291315506110], [263258306770], [371803336154], [273267949270]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 16:37:15: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:37:16: INFO] Estimated completion (whole session): 2019-08-06 03:02:05 (10:24:49 from now)
[2019-08-05 16:37:16: INFO] 67 executions left in scheduler queue
[2019-08-05 16:37:16: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:37:16: INFO] Estimated completion (next execution): 2019-08-05 16:44:57 (0:07:41 from now)
[2019-08-05 16:37:16: INFO] Reboot in preparation for next execution
[2019-08-05 16:41:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 16:41:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 16:41:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 16:41:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 16:41:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 16:41:33: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 16:52:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.011 s/op
Iteration   2: 13.772 s/op
Iteration   3: 13.530 s/op
Iteration   4: 13.672 s/op
Iteration   5: 13.482 s/op
Iteration   6: 13.436 s/op
Iteration   7: 13.417 s/op
Iteration   8: 13.464 s/op
Iteration   9: 13.404 s/op
Iteration  10: 13.466 s/op
Iteration  11: 13.423 s/op
Iteration  12: 13.531 s/op
Iteration  13: 13.458 s/op
Iteration  14: 13.432 s/op
Iteration  15: 13.450 s/op
Iteration  16: 13.395 s/op
Iteration  17: 13.501 s/op
Iteration  18: 13.529 s/op
Iteration  19: 13.486 s/op
Iteration  20: 13.439 s/op
Iteration  21: 13.541 s/op
Iteration  22: 13.586 s/op
Iteration  23: 13.477 s/op
Iteration  24: 13.964 s/op
Iteration  25: 13.551 s/op
Iteration  26: 13.479 s/op
Iteration  27: 13.456 s/op
Iteration  28: 13.464 s/op
Iteration  29: 13.610 s/op
Iteration  30: 13.469 s/op
Iteration  31: 13.591 s/op
Iteration  32: 13.600 s/op
Iteration  33: 13.580 s/op
Iteration  34: 13.432 s/op
Iteration  35: 13.496 s/op
Iteration  36: 13.525 s/op
Iteration  37: 13.498 s/op
Iteration  38: 13.573 s/op
Iteration  39: 13.559 s/op
Iteration  40: 13.510 s/op
Iteration  41: 13.489 s/op
Iteration  42: 13.516 s/op
Iteration  43: 13.468 s/op
Iteration  44: 13.639 s/op
Iteration  45: 13.487 s/op
Iteration  46: 13.518 s/op
Iteration  47: 13.468 s/op
Iteration  48: 13.533 s/op
Iteration  49: 13.511 s/op
Iteration  50: 13.486 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     13.567 ?(99.9%) 0.181 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 26 
    [13.500, 13.750) = 21 
    [13.750, 14.000) = 2 
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.395 s/op
     p(50.0000) =     13.497 s/op
     p(90.0000) =     13.636 s/op
     p(95.0000) =     13.858 s/op
     p(99.0000) =     16.011 s/op
     p(99.9000) =     16.011 s/op
     p(99.9900) =     16.011 s/op
     p(99.9990) =     16.011 s/op
     p(99.9999) =     16.011 s/op
    p(100.0000) =     16.011 s/op


# Run complete. Total time: 00:11:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  13.567 ? 0.181   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9_11.0.4_1565016093575.json
{"wallclock_times": [680.097987076], "core_cycle_counts": [[632018659955], [571975853305], [540029811176], [508193967158]], "aperf_counts": [[630319018661], [571835950952], [539849489901], [508036389892]], "mperf_counts": [[630325242186], [571836062804], [539849432910], [508039196834]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 16:52:53: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-05 16:52:54: INFO] Estimated completion (whole session): 2019-08-06 03:02:13 (10:09:18 from now)
[2019-08-05 16:52:54: INFO] 66 executions left in scheduler queue
[2019-08-05 16:52:54: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 16:52:54: INFO] Estimated completion (next execution): 2019-08-05 17:07:35 (0:14:40 from now)
[2019-08-05 16:52:54: INFO] Reboot in preparation for next execution
[2019-08-05 17:05:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.752 s/op
Iteration   2: 10.241 s/op
Iteration   3: 9.768 s/op
Iteration   4: 9.764 s/op
Iteration   5: 9.769 s/op
Iteration   6: 9.756 s/op
Iteration   7: 9.771 s/op
Iteration   8: 9.755 s/op
Iteration   9: 9.764 s/op
Iteration  10: 9.733 s/op
Iteration  11: 9.778 s/op
Iteration  12: 9.765 s/op
Iteration  13: 9.752 s/op
Iteration  14: 9.788 s/op
Iteration  15: 9.777 s/op
Iteration  16: 9.755 s/op
Iteration  17: 9.750 s/op
Iteration  18: 9.794 s/op
Iteration  19: 9.785 s/op
Iteration  20: 9.785 s/op
Iteration  21: 9.773 s/op
Iteration  22: 9.749 s/op
Iteration  23: 9.791 s/op
Iteration  24: 9.769 s/op
Iteration  25: 9.764 s/op
Iteration  26: 9.793 s/op
Iteration  27: 9.768 s/op
Iteration  28: 9.810 s/op
Iteration  29: 9.777 s/op
Iteration  30: 9.754 s/op
Iteration  31: 9.758 s/op
Iteration  32: 9.766 s/op
Iteration  33: 9.768 s/op
Iteration  34: 9.747 s/op
Iteration  35: 9.775 s/op
Iteration  36: 9.764 s/op
Iteration  37: 9.765 s/op
Iteration  38: 9.766 s/op
Iteration  39: 9.777 s/op
Iteration  40: 9.778 s/op
Iteration  41: 9.769 s/op
Iteration  42: 9.752 s/op
Iteration  43: 9.754 s/op
Iteration  44: 9.778 s/op
Iteration  45: 9.763 s/op
Iteration  46: 9.760 s/op
Iteration  47: 9.773 s/op
Iteration  48: 9.769 s/op
Iteration  49: 9.758 s/op
Iteration  50: 9.766 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.777 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [ 9.700,  9.750) = 4 
    [ 9.750,  9.800) = 44 
    [ 9.800,  9.850) = 1 
    [ 9.850,  9.900) = 0 
    [ 9.900,  9.950) = 0 
    [ 9.950, 10.000) = 0 
    [10.000, 10.050) = 0 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 0 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.733 s/op
     p(50.0000) =      9.767 s/op
     p(90.0000) =      9.791 s/op
     p(95.0000) =      9.801 s/op
     p(99.0000) =     10.241 s/op
     p(99.9000) =     10.241 s/op
     p(99.9900) =     10.241 s/op
     p(99.9990) =     10.241 s/op
     p(99.9999) =     10.241 s/op
    p(100.0000) =     10.241 s/op


# Run complete. Total time: 00:08:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.777 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot-8u222-b10_1565017029736.json
{"wallclock_times": [489.784344206], "core_cycle_counts": [[243439149122], [490113311597], [549683601732], [298203526287]], "aperf_counts": [[242250744551], [490033168901], [549631372767], [298124503367]], "mperf_counts": [[242294375696], [490036320160], [549636335728], [298124655466]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 17:05:19: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 17:05:20: INFO] Estimated completion (whole session): 2019-08-06 03:03:47 (9:58:27 from now)
[2019-08-05 17:05:20: INFO] 65 executions left in scheduler queue
[2019-08-05 17:05:20: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 17:05:20: INFO] Estimated completion (next execution): 2019-08-05 17:16:06 (0:10:45 from now)
[2019-08-05 17:05:20: INFO] Reboot in preparation for next execution
[2019-08-05 17:14:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.216 s/op
Iteration   2: 5.965 s/op
Iteration   3: 5.733 s/op
Iteration   4: 5.747 s/op
Iteration   5: 5.794 s/op
Iteration   6: 5.746 s/op
Iteration   7: 5.784 s/op
Iteration   8: 5.724 s/op
Iteration   9: 5.719 s/op
Iteration  10: 5.735 s/op
Iteration  11: 5.742 s/op
Iteration  12: 5.744 s/op
Iteration  13: 5.753 s/op
Iteration  14: 5.745 s/op
Iteration  15: 5.743 s/op
Iteration  16: 5.732 s/op
Iteration  17: 5.728 s/op
Iteration  18: 5.737 s/op
Iteration  19: 5.731 s/op
Iteration  20: 5.766 s/op
Iteration  21: 5.741 s/op
Iteration  22: 5.717 s/op
Iteration  23: 5.725 s/op
Iteration  24: 5.764 s/op
Iteration  25: 5.740 s/op
Iteration  26: 5.727 s/op
Iteration  27: 5.728 s/op
Iteration  28: 5.725 s/op
Iteration  29: 5.752 s/op
Iteration  30: 5.763 s/op
Iteration  31: 5.760 s/op
Iteration  32: 5.728 s/op
Iteration  33: 5.750 s/op
Iteration  34: 5.697 s/op
Iteration  35: 5.744 s/op
Iteration  36: 5.739 s/op
Iteration  37: 5.714 s/op
Iteration  38: 5.734 s/op
Iteration  39: 5.733 s/op
Iteration  40: 5.756 s/op
Iteration  41: 5.731 s/op
Iteration  42: 5.710 s/op
Iteration  43: 5.722 s/op
Iteration  44: 5.702 s/op
Iteration  45: 5.727 s/op
Iteration  46: 5.735 s/op
Iteration  47: 5.732 s/op
Iteration  48: 5.737 s/op
Iteration  49: 5.740 s/op
Iteration  50: 5.707 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.751 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 1 
    [5.700, 5.750) = 37 
    [5.750, 5.800) = 10 
    [5.800, 5.850) = 0 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 1 
    [6.000, 6.050) = 0 
    [6.050, 6.100) = 0 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 1 
    [6.250, 6.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.697 s/op
     p(50.0000) =      5.736 s/op
     p(90.0000) =      5.766 s/op
     p(95.0000) =      5.871 s/op
     p(99.0000) =      6.216 s/op
     p(99.9000) =      6.216 s/op
     p(99.9900) =      6.216 s/op
     p(99.9990) =      6.216 s/op
     p(99.9999) =      6.216 s/op
    p(100.0000) =      6.216 s/op


# Run complete. Total time: 00:04:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.751 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot-8u222-b10_1565017774593.json
{"wallclock_times": [288.560347433], "core_cycle_counts": [[151388826600], [279383502721], [227400489169], [281057933278]], "aperf_counts": [[150637507523], [279342605091], [227371919073], [281036271907]], "mperf_counts": [[150674996588], [279343046522], [227372033120], [281038056294]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 17:14:23: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 17:14:24: INFO] Estimated completion (whole session): 2019-08-06 03:05:26 (9:51:02 from now)
[2019-08-05 17:14:24: INFO] 64 executions left in scheduler queue
[2019-08-05 17:14:24: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 17:14:24: INFO] Estimated completion (next execution): 2019-08-05 17:21:45 (0:07:21 from now)
[2019-08-05 17:14:24: INFO] Reboot in preparation for next execution
[2019-08-05 17:23:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.774 s/op
Iteration   2: 6.249 s/op
Iteration   3: 6.205 s/op
Iteration   4: 6.183 s/op
Iteration   5: 6.250 s/op
Iteration   6: 6.252 s/op
Iteration   7: 6.242 s/op
Iteration   8: 6.249 s/op
Iteration   9: 6.258 s/op
Iteration  10: 6.215 s/op
Iteration  11: 6.264 s/op
Iteration  12: 6.259 s/op
Iteration  13: 6.266 s/op
Iteration  14: 6.199 s/op
Iteration  15: 6.248 s/op
Iteration  16: 6.264 s/op
Iteration  17: 6.254 s/op
Iteration  18: 6.192 s/op
Iteration  19: 6.261 s/op
Iteration  20: 6.263 s/op
Iteration  21: 6.268 s/op
Iteration  22: 6.220 s/op
Iteration  23: 6.261 s/op
Iteration  24: 6.265 s/op
Iteration  25: 6.273 s/op
Iteration  26: 6.207 s/op
Iteration  27: 6.265 s/op
Iteration  28: 6.268 s/op
Iteration  29: 6.268 s/op
Iteration  30: 6.208 s/op
Iteration  31: 6.261 s/op
Iteration  32: 6.265 s/op
Iteration  33: 6.275 s/op
Iteration  34: 6.212 s/op
Iteration  35: 6.277 s/op
Iteration  36: 6.256 s/op
Iteration  37: 6.267 s/op
Iteration  38: 6.218 s/op
Iteration  39: 6.255 s/op
Iteration  40: 6.269 s/op
Iteration  41: 6.270 s/op
Iteration  42: 6.236 s/op
Iteration  43: 6.245 s/op
Iteration  44: 6.274 s/op
Iteration  45: 6.279 s/op
Iteration  46: 6.213 s/op
Iteration  47: 6.287 s/op
Iteration  48: 6.265 s/op
Iteration  49: 6.609 s/op
Iteration  50: 6.180 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.265 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 4 
    [6.200, 6.250) = 14 
    [6.250, 6.300) = 30 
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.180 s/op
     p(50.0000) =      6.260 s/op
     p(90.0000) =      6.277 s/op
     p(95.0000) =      6.432 s/op
     p(99.0000) =      6.774 s/op
     p(99.9000) =      6.774 s/op
     p(99.9900) =      6.774 s/op
     p(99.9990) =      6.774 s/op
     p(99.9999) =      6.774 s/op
    p(100.0000) =      6.774 s/op


# Run complete. Total time: 00:05:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.265 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot-8u222-b10_1565018313673.json
{"wallclock_times": [314.318018295], "core_cycle_counts": [[284718733700], [292863146577], [335335185214], [172593263096]], "aperf_counts": [[283954061470], [292795546583], [335275516253], [172531839061]], "mperf_counts": [[283983277766], [292811316572], [335277474464], [172533407052]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 17:23:47: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 17:23:48: INFO] Estimated completion (whole session): 2019-08-06 03:07:07 (9:43:18 from now)
[2019-08-05 17:23:48: INFO] 63 executions left in scheduler queue
[2019-08-05 17:23:48: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 17:23:48: INFO] Estimated completion (next execution): 2019-08-05 17:31:33 (0:07:44 from now)
[2019-08-05 17:23:48: INFO] Reboot in preparation for next execution
[2019-08-05 17:40:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.186 s/op
Iteration   2: 15.508 s/op
Iteration   3: 15.420 s/op
Iteration   4: 15.432 s/op
Iteration   5: 15.302 s/op
Iteration   6: 16.748 s/op
Iteration   7: 15.351 s/op
Iteration   8: 15.325 s/op
Iteration   9: 15.302 s/op
Iteration  10: 15.432 s/op
Iteration  11: 15.418 s/op
Iteration  12: 15.325 s/op
Iteration  13: 15.376 s/op
Iteration  14: 15.352 s/op
Iteration  15: 15.310 s/op
Iteration  16: 15.353 s/op
Iteration  17: 15.355 s/op
Iteration  18: 15.404 s/op
Iteration  19: 15.288 s/op
Iteration  20: 15.324 s/op
Iteration  21: 15.302 s/op
Iteration  22: 15.273 s/op
Iteration  23: 15.361 s/op
Iteration  24: 15.272 s/op
Iteration  25: 15.376 s/op
Iteration  26: 15.340 s/op
Iteration  27: 15.293 s/op
Iteration  28: 15.344 s/op
Iteration  29: 15.321 s/op
Iteration  30: 15.282 s/op
Iteration  31: 15.404 s/op
Iteration  32: 15.440 s/op
Iteration  33: 15.437 s/op
Iteration  34: 15.361 s/op
Iteration  35: 15.340 s/op
Iteration  36: 15.264 s/op
Iteration  37: 15.351 s/op
Iteration  38: 15.472 s/op
Iteration  39: 15.358 s/op
Iteration  40: 15.275 s/op
Iteration  41: 15.276 s/op
Iteration  42: 15.319 s/op
Iteration  43: 15.285 s/op
Iteration  44: 15.392 s/op
Iteration  45: 15.272 s/op
Iteration  46: 15.310 s/op
Iteration  47: 15.376 s/op
Iteration  48: 15.360 s/op
Iteration  49: 15.286 s/op
Iteration  50: 15.341 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.372 ?(99.9%) 0.103 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 1 
    [15.250, 15.375) = 34 
    [15.375, 15.500) = 13 
    [15.500, 15.625) = 1 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 0 
    [15.875, 16.000) = 0 
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 0 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 1 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.186 s/op
     p(50.0000) =     15.343 s/op
     p(90.0000) =     15.436 s/op
     p(95.0000) =     15.488 s/op
     p(99.0000) =     16.748 s/op
     p(99.9000) =     16.748 s/op
     p(99.9900) =     16.748 s/op
     p(99.9990) =     16.748 s/op
     p(99.9999) =     16.748 s/op
    p(100.0000) =     16.748 s/op


# Run complete. Total time: 00:12:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.372 ? 0.103   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot-8u222-b10_1565018879648.json
{"wallclock_times": [769.499802565], "core_cycle_counts": [[592617548040], [510635778567], [524517755354], [849901519297]], "aperf_counts": [[590862223342], [510494502487], [524397283695], [849860778711]], "mperf_counts": [[590877658390], [510510127262], [524398152782], [849861779370]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 17:40:49: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-05 17:40:50: INFO] Estimated completion (whole session): 2019-08-06 03:09:00 (9:28:10 from now)
[2019-08-05 17:40:50: INFO] 62 executions left in scheduler queue
[2019-08-05 17:40:50: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-08-05 17:40:50: INFO] Estimated completion (next execution): 2019-08-05 17:56:04 (0:15:14 from now)
[2019-08-05 17:40:50: INFO] Reboot in preparation for next execution
[2019-08-05 17:44:59: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 17:56:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.706 s/op
Iteration   2: 14.735 s/op
Iteration   3: 13.791 s/op
Iteration   4: 13.728 s/op
Iteration   5: 13.736 s/op
Iteration   6: 13.679 s/op
Iteration   7: 13.670 s/op
Iteration   8: 13.724 s/op
Iteration   9: 13.706 s/op
Iteration  10: 13.691 s/op
Iteration  11: 13.724 s/op
Iteration  12: 13.687 s/op
Iteration  13: 13.801 s/op
Iteration  14: 13.676 s/op
Iteration  15: 13.661 s/op
Iteration  16: 13.691 s/op
Iteration  17: 13.676 s/op
Iteration  18: 13.686 s/op
Iteration  19: 13.703 s/op
Iteration  20: 13.787 s/op
Iteration  21: 13.681 s/op
Iteration  22: 13.667 s/op
Iteration  23: 13.750 s/op
Iteration  24: 13.713 s/op
Iteration  25: 13.667 s/op
Iteration  26: 13.701 s/op
Iteration  27: 13.685 s/op
Iteration  28: 13.678 s/op
Iteration  29: 13.738 s/op
Iteration  30: 13.643 s/op
Iteration  31: 13.657 s/op
Iteration  32: 13.676 s/op
Iteration  33: 13.653 s/op
Iteration  34: 13.683 s/op
Iteration  35: 13.689 s/op
Iteration  36: 13.692 s/op
Iteration  37: 13.673 s/op
Iteration  38: 13.719 s/op
Iteration  39: 13.679 s/op
Iteration  40: 13.688 s/op
Iteration  41: 13.695 s/op
Iteration  42: 13.690 s/op
Iteration  43: 13.680 s/op
Iteration  44: 13.690 s/op
Iteration  45: 13.688 s/op
Iteration  46: 13.659 s/op
Iteration  47: 13.671 s/op
Iteration  48: 13.700 s/op
Iteration  49: 13.694 s/op
Iteration  50: 13.700 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     13.737 ?(99.9%) 0.102 s/op

  Histogram, s/op:
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 0 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 44 
    [13.750, 13.875) = 4 
    [13.875, 14.000) = 0 
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 0 
    [14.375, 14.500) = 0 
    [14.500, 14.625) = 0 
    [14.625, 14.750) = 2 
    [14.750, 14.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.643 s/op
     p(50.0000) =     13.690 s/op
     p(90.0000) =     13.784 s/op
     p(95.0000) =     14.208 s/op
     p(99.0000) =     14.735 s/op
     p(99.9000) =     14.735 s/op
     p(99.9900) =     14.735 s/op
     p(99.9990) =     14.735 s/op
     p(99.9999) =     14.735 s/op
    p(100.0000) =     14.735 s/op


# Run complete. Total time: 00:11:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.737 ? 0.102   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9-8u222-b10_1565019899654.json
{"wallclock_times": [688.0578985340001], "core_cycle_counts": [[772452333348], [432044508512], [517080618825], [537458732339]], "aperf_counts": [[770870715589], [431829429997], [516932453490], [537312423342]], "mperf_counts": [[770875978008], [431830402402], [516933316514], [537312940126]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 17:56:27: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-08-05 17:56:28: INFO] Estimated completion (whole session): 2019-08-06 03:10:00 (9:13:31 from now)
[2019-08-05 17:56:28: INFO] 61 executions left in scheduler queue
[2019-08-05 17:56:28: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 17:56:28: INFO] Estimated completion (next execution): 2019-08-05 18:10:47 (0:14:18 from now)
[2019-08-05 17:56:28: INFO] Reboot in preparation for next execution
[2019-08-05 18:00:38: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 18:00:38: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 18:00:38: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 18:00:38: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 18:00:38: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 18:08:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.919 s/op
Iteration   2: 9.896 s/op
Iteration   3: 9.776 s/op
Iteration   4: 9.952 s/op
Iteration   5: 9.654 s/op
Iteration   6: 9.666 s/op
Iteration   7: 9.696 s/op
Iteration   8: 9.667 s/op
Iteration   9: 9.686 s/op
Iteration  10: 9.654 s/op
Iteration  11: 9.673 s/op
Iteration  12: 9.668 s/op
Iteration  13: 9.678 s/op
Iteration  14: 9.649 s/op
Iteration  15: 9.659 s/op
Iteration  16: 9.634 s/op
Iteration  17: 9.724 s/op
Iteration  18: 9.656 s/op
Iteration  19: 9.676 s/op
Iteration  20: 9.658 s/op
Iteration  21: 9.769 s/op
Iteration  22: 9.668 s/op
Iteration  23: 9.666 s/op
Iteration  24: 9.720 s/op
Iteration  25: 9.658 s/op
Iteration  26: 9.651 s/op
Iteration  27: 9.643 s/op
Iteration  28: 9.751 s/op
Iteration  29: 9.647 s/op
Iteration  30: 9.659 s/op
Iteration  31: 9.654 s/op
Iteration  32: 9.703 s/op
Iteration  33: 9.699 s/op
Iteration  34: 9.627 s/op
Iteration  35: 9.653 s/op
Iteration  36: 9.656 s/op
Iteration  37: 9.723 s/op
Iteration  38: 9.641 s/op
Iteration  39: 9.707 s/op
Iteration  40: 9.639 s/op
Iteration  41: 9.641 s/op
Iteration  42: 9.678 s/op
Iteration  43: 9.690 s/op
Iteration  44: 9.654 s/op
Iteration  45: 9.677 s/op
Iteration  46: 9.654 s/op
Iteration  47: 9.677 s/op
Iteration  48: 9.666 s/op
Iteration  49: 9.662 s/op
Iteration  50: 9.679 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.689 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [ 9.600,  9.625) = 0 
    [ 9.625,  9.650) = 8 
    [ 9.650,  9.675) = 21 
    [ 9.675,  9.700) = 10 
    [ 9.700,  9.725) = 5 
    [ 9.725,  9.750) = 0 
    [ 9.750,  9.775) = 2 
    [ 9.775,  9.800) = 1 
    [ 9.800,  9.825) = 0 
    [ 9.825,  9.850) = 0 
    [ 9.850,  9.875) = 0 
    [ 9.875,  9.900) = 1 
    [ 9.900,  9.925) = 1 
    [ 9.925,  9.950) = 0 
    [ 9.950,  9.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.627 s/op
     p(50.0000) =      9.667 s/op
     p(90.0000) =      9.767 s/op
     p(95.0000) =      9.906 s/op
     p(99.0000) =      9.952 s/op
     p(99.9000) =      9.952 s/op
     p(99.9900) =      9.952 s/op
     p(99.9990) =      9.952 s/op
     p(99.9999) =      9.952 s/op
    p(100.0000) =      9.952 s/op


# Run complete. Total time: 00:08:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.689 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot_12.0.2_1565020838651.json
{"wallclock_times": [485.45932293100003], "core_cycle_counts": [[154286484405], [364453746208], [736011987431], [312851972466]], "aperf_counts": [[152869566979], [364387368295], [735978236789], [312808094064]], "mperf_counts": [[153049274414], [364489353004], [736023487836], [312889165932]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 18:08:44: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 18:08:45: INFO] Estimated completion (whole session): 2019-08-06 03:11:53 (9:03:08 from now)
[2019-08-05 18:08:45: INFO] 60 executions left in scheduler queue
[2019-08-05 18:08:45: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 18:08:45: INFO] Estimated completion (next execution): 2019-08-05 18:19:14 (0:10:29 from now)
[2019-08-05 18:08:45: INFO] Reboot in preparation for next execution
[2019-08-05 18:13:09: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 18:13:09: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 18:13:09: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 18:13:09: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 18:13:09: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 18:26:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.362 s/op
Iteration   2: 15.714 s/op
Iteration   3: 15.865 s/op
Iteration   4: 15.693 s/op
Iteration   5: 15.977 s/op
Iteration   6: 15.700 s/op
Iteration   7: 15.682 s/op
Iteration   8: 15.645 s/op
Iteration   9: 15.622 s/op
Iteration  10: 15.619 s/op
Iteration  11: 15.763 s/op
Iteration  12: 15.620 s/op
Iteration  13: 15.563 s/op
Iteration  14: 15.575 s/op
Iteration  15: 15.566 s/op
Iteration  16: 15.565 s/op
Iteration  17: 15.610 s/op
Iteration  18: 15.678 s/op
Iteration  19: 15.702 s/op
Iteration  20: 15.677 s/op
Iteration  21: 15.626 s/op
Iteration  22: 15.581 s/op
Iteration  23: 15.595 s/op
Iteration  24: 15.553 s/op
Iteration  25: 15.559 s/op
Iteration  26: 15.547 s/op
Iteration  27: 15.554 s/op
Iteration  28: 15.541 s/op
Iteration  29: 15.587 s/op
Iteration  30: 15.633 s/op
Iteration  31: 15.644 s/op
Iteration  32: 15.701 s/op
Iteration  33: 15.619 s/op
Iteration  34: 15.656 s/op
Iteration  35: 15.596 s/op
Iteration  36: 15.601 s/op
Iteration  37: 15.589 s/op
Iteration  38: 15.547 s/op
Iteration  39: 15.562 s/op
Iteration  40: 15.602 s/op
Iteration  41: 15.633 s/op
Iteration  42: 15.632 s/op
Iteration  43: 15.685 s/op
Iteration  44: 15.703 s/op
Iteration  45: 15.662 s/op
Iteration  46: 15.618 s/op
Iteration  47: 15.569 s/op
Iteration  48: 15.557 s/op
Iteration  49: 15.541 s/op
Iteration  50: 15.541 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.645 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [15.500, 15.550) = 5 
    [15.550, 15.600) = 15 
    [15.600, 15.650) = 14 
    [15.650, 15.700) = 8 
    [15.700, 15.750) = 4 
    [15.750, 15.800) = 1 
    [15.800, 15.850) = 0 
    [15.850, 15.900) = 1 
    [15.900, 15.950) = 0 
    [15.950, 16.000) = 1 
    [16.000, 16.050) = 0 
    [16.050, 16.100) = 0 
    [16.100, 16.150) = 0 
    [16.150, 16.200) = 0 
    [16.200, 16.250) = 0 
    [16.250, 16.300) = 0 
    [16.300, 16.350) = 0 
    [16.350, 16.400) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.541 s/op
     p(50.0000) =     15.619 s/op
     p(90.0000) =     15.713 s/op
     p(95.0000) =     15.916 s/op
     p(99.0000) =     16.362 s/op
     p(99.9000) =     16.362 s/op
     p(99.9900) =     16.362 s/op
     p(99.9990) =     16.362 s/op
     p(99.9999) =     16.362 s/op
    p(100.0000) =     16.362 s/op


# Run complete. Total time: 00:13:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.645 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot_12.0.2_1565021589740.json
{"wallclock_times": [783.256802817], "core_cycle_counts": [[464641839655], [585375940276], [562809444213], [912065360343]], "aperf_counts": [[462602066299], [585243311187], [562737243261], [912015407509]], "mperf_counts": [[463334370550], [585412470208], [563688137842], [912611062052]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 18:26:13: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 18:26:13: INFO] Estimated completion (whole session): 2019-08-06 03:13:22 (8:47:08 from now)
[2019-08-05 18:26:13: INFO] 59 executions left in scheduler queue
[2019-08-05 18:26:13: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 18:26:13: INFO] Estimated completion (next execution): 2019-08-05 18:42:01 (0:15:47 from now)
[2019-08-05 18:26:13: INFO] Reboot in preparation for next execution
[2019-08-05 18:30:35: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 18:30:35: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 18:30:35: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 18:30:35: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 18:30:35: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 18:35:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.843 s/op
Iteration   2: 6.437 s/op
Iteration   3: 6.841 s/op
Iteration   4: 6.416 s/op
Iteration   5: 6.466 s/op
Iteration   6: 6.465 s/op
Iteration   7: 6.378 s/op
Iteration   8: 6.493 s/op
Iteration   9: 6.459 s/op
Iteration  10: 6.471 s/op
Iteration  11: 6.455 s/op
Iteration  12: 6.425 s/op
Iteration  13: 6.395 s/op
Iteration  14: 6.394 s/op
Iteration  15: 6.370 s/op
Iteration  16: 6.391 s/op
Iteration  17: 6.548 s/op
Iteration  18: 6.446 s/op
Iteration  19: 6.431 s/op
Iteration  20: 6.429 s/op
Iteration  21: 6.413 s/op
Iteration  22: 6.410 s/op
Iteration  23: 6.417 s/op
Iteration  24: 6.400 s/op
Iteration  25: 6.513 s/op
Iteration  26: 6.395 s/op
Iteration  27: 6.393 s/op
Iteration  28: 6.376 s/op
Iteration  29: 6.504 s/op
Iteration  30: 6.377 s/op
Iteration  31: 6.493 s/op
Iteration  32: 6.462 s/op
Iteration  33: 6.421 s/op
Iteration  34: 6.355 s/op
Iteration  35: 6.467 s/op
Iteration  36: 6.387 s/op
Iteration  37: 6.394 s/op
Iteration  38: 6.513 s/op
Iteration  39: 6.405 s/op
Iteration  40: 6.411 s/op
Iteration  41: 6.404 s/op
Iteration  42: 6.400 s/op
Iteration  43: 6.568 s/op
Iteration  44: 6.394 s/op
Iteration  45: 6.429 s/op
Iteration  46: 6.411 s/op
Iteration  47: 6.401 s/op
Iteration  48: 6.391 s/op
Iteration  49: 6.399 s/op
Iteration  50: 6.398 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.445 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 17 
    [6.400, 6.450) = 17 
    [6.450, 6.500) = 9 
    [6.500, 6.550) = 4 
    [6.550, 6.600) = 1 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 2 

  Percentiles, s/op:
      p(0.0000) =      6.355 s/op
     p(50.0000) =      6.415 s/op
     p(90.0000) =      6.513 s/op
     p(95.0000) =      6.691 s/op
     p(99.0000) =      6.843 s/op
     p(99.9000) =      6.843 s/op
     p(99.9900) =      6.843 s/op
     p(99.9990) =      6.843 s/op
     p(99.9999) =      6.843 s/op
    p(100.0000) =      6.843 s/op


# Run complete. Total time: 00:05:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.445 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot_12.0.2_1565022635780.json
{"wallclock_times": [323.41587254700005], "core_cycle_counts": [[270563271215], [265349969543], [301789603133], [292971768027]], "aperf_counts": [[269746811421], [265278602423], [301742995835], [292933559772]], "mperf_counts": [[271125898214], [265469614110], [301985658014], [293074193038]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 18:35:59: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 18:36:00: INFO] Estimated completion (whole session): 2019-08-06 03:15:11 (8:39:11 from now)
[2019-08-05 18:36:00: INFO] 58 executions left in scheduler queue
[2019-08-05 18:36:00: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 18:36:00: INFO] Estimated completion (next execution): 2019-08-05 18:43:55 (0:07:55 from now)
[2019-08-05 18:36:00: INFO] Reboot in preparation for next execution
[2019-08-05 18:40:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 18:40:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 18:40:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 18:40:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 18:40:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 18:45:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.358 s/op
Iteration   2: 6.549 s/op
Iteration   3: 6.689 s/op
Iteration   4: 6.344 s/op
Iteration   5: 6.644 s/op
Iteration   6: 6.847 s/op
Iteration   7: 6.599 s/op
Iteration   8: 6.577 s/op
Iteration   9: 6.647 s/op
Iteration  10: 6.583 s/op
Iteration  11: 6.598 s/op
Iteration  12: 6.570 s/op
Iteration  13: 6.549 s/op
Iteration  14: 6.578 s/op
Iteration  15: 6.545 s/op
Iteration  16: 6.574 s/op
Iteration  17: 6.589 s/op
Iteration  18: 6.559 s/op
Iteration  19: 6.574 s/op
Iteration  20: 6.559 s/op
Iteration  21: 6.602 s/op
Iteration  22: 6.580 s/op
Iteration  23: 6.554 s/op
Iteration  24: 6.582 s/op
Iteration  25: 6.575 s/op
Iteration  26: 6.561 s/op
Iteration  27: 6.591 s/op
Iteration  28: 6.599 s/op
Iteration  29: 6.582 s/op
Iteration  30: 6.604 s/op
Iteration  31: 6.553 s/op
Iteration  32: 6.558 s/op
Iteration  33: 6.564 s/op
Iteration  34: 6.575 s/op
Iteration  35: 6.577 s/op
Iteration  36: 6.549 s/op
Iteration  37: 6.576 s/op
Iteration  38: 6.600 s/op
Iteration  39: 6.592 s/op
Iteration  40: 6.579 s/op
Iteration  41: 6.582 s/op
Iteration  42: 6.556 s/op
Iteration  43: 6.579 s/op
Iteration  44: 6.582 s/op
Iteration  45: 6.560 s/op
Iteration  46: 6.569 s/op
Iteration  47: 6.562 s/op
Iteration  48: 6.571 s/op
Iteration  49: 6.567 s/op
Iteration  50: 6.556 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.575 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [6.300, 6.350) = 1 
    [6.350, 6.400) = 1 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 4 
    [6.550, 6.600) = 37 
    [6.600, 6.650) = 5 
    [6.650, 6.700) = 1 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.344 s/op
     p(50.0000) =      6.575 s/op
     p(90.0000) =      6.604 s/op
     p(95.0000) =      6.666 s/op
     p(99.0000) =      6.847 s/op
     p(99.9000) =      6.847 s/op
     p(99.9900) =      6.847 s/op
     p(99.9990) =      6.847 s/op
     p(99.9999) =      6.847 s/op
    p(100.0000) =      6.847 s/op


# Run complete. Total time: 00:05:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.575 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot_12.0.2_1565023210744.json
{"wallclock_times": [329.85802813], "core_cycle_counts": [[223756370359], [187289818023], [142518131803], [390250851097]], "aperf_counts": [[222925146339], [187213861966], [142477608556], [390222159374]], "mperf_counts": [[252767003084], [212547560750], [162041313004], [444124191310]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 18:45:40: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-05 18:45:41: INFO] Estimated completion (whole session): 2019-08-06 03:16:48 (8:31:07 from now)
[2019-08-05 18:45:41: INFO] 57 executions left in scheduler queue
[2019-08-05 18:45:41: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 18:45:41: INFO] Estimated completion (next execution): 2019-08-05 18:53:43 (0:08:02 from now)
[2019-08-05 18:45:41: INFO] Reboot in preparation for next execution
[2019-08-05 18:50:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 18:50:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 18:50:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 18:50:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 18:50:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 18:56:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.125 s/op
Iteration   2: 7.308 s/op
Iteration   3: 7.553 s/op
Iteration   4: 7.181 s/op
Iteration   5: 7.107 s/op
Iteration   6: 7.155 s/op
Iteration   7: 7.129 s/op
Iteration   8: 7.115 s/op
Iteration   9: 6.643 s/op
Iteration  10: 7.100 s/op
Iteration  11: 7.116 s/op
Iteration  12: 7.112 s/op
Iteration  13: 7.123 s/op
Iteration  14: 7.121 s/op
Iteration  15: 7.142 s/op
Iteration  16: 6.854 s/op
Iteration  17: 7.113 s/op
Iteration  18: 7.131 s/op
Iteration  19: 7.118 s/op
Iteration  20: 7.119 s/op
Iteration  21: 7.132 s/op
Iteration  22: 7.113 s/op
Iteration  23: 7.105 s/op
Iteration  24: 7.118 s/op
Iteration  25: 7.121 s/op
Iteration  26: 7.127 s/op
Iteration  27: 7.138 s/op
Iteration  28: 7.128 s/op
Iteration  29: 6.550 s/op
Iteration  30: 7.121 s/op
Iteration  31: 7.108 s/op
Iteration  32: 7.125 s/op
Iteration  33: 7.128 s/op
Iteration  34: 7.114 s/op
Iteration  35: 7.083 s/op
Iteration  36: 7.097 s/op
Iteration  37: 7.126 s/op
Iteration  38: 7.139 s/op
Iteration  39: 7.123 s/op
Iteration  40: 7.130 s/op
Iteration  41: 7.139 s/op
Iteration  42: 7.087 s/op
Iteration  43: 7.122 s/op
Iteration  44: 7.118 s/op
Iteration  45: 7.121 s/op
Iteration  46: 7.116 s/op
Iteration  47: 7.099 s/op
Iteration  48: 7.130 s/op
Iteration  49: 7.107 s/op
Iteration  50: 7.120 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.107 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 1 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 29 
    [7.125, 7.250) = 16 
    [7.250, 7.375) = 1 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 1 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.550 s/op
     p(50.0000) =      7.121 s/op
     p(90.0000) =      7.141 s/op
     p(95.0000) =      7.238 s/op
     p(99.0000) =      7.553 s/op
     p(99.9000) =      7.553 s/op
     p(99.9900) =      7.553 s/op
     p(99.9990) =      7.553 s/op
     p(99.9999) =      7.553 s/op
    p(100.0000) =      7.553 s/op


# Run complete. Total time: 00:05:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.107 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot_11.0.4_1565023811724.json
{"wallclock_times": [356.51113500099996], "core_cycle_counts": [[249917316979], [236560748478], [413326015460], [124342338940]], "aperf_counts": [[249012937024], [236480807036], [413279336052], [124302226640]], "mperf_counts": [[280999462694], [267967333810], [471070202334], [139746714768]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 18:56:08: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 18:56:09: INFO] Estimated completion (whole session): 2019-08-06 03:18:49 (8:22:39 from now)
[2019-08-05 18:56:09: INFO] 56 executions left in scheduler queue
[2019-08-05 18:56:09: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 18:56:09: INFO] Estimated completion (next execution): 2019-08-05 19:04:36 (0:08:27 from now)
[2019-08-05 18:56:09: INFO] Reboot in preparation for next execution
[2019-08-05 19:00:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 19:00:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 19:00:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 19:00:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 19:00:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 19:09:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.696 s/op
Iteration   2: 11.129 s/op
Iteration   3: 10.823 s/op
Iteration   4: 10.589 s/op
Iteration   5: 10.584 s/op
Iteration   6: 10.615 s/op
Iteration   7: 10.602 s/op
Iteration   8: 10.629 s/op
Iteration   9: 10.621 s/op
Iteration  10: 10.635 s/op
Iteration  11: 10.640 s/op
Iteration  12: 10.638 s/op
Iteration  13: 10.622 s/op
Iteration  14: 10.596 s/op
Iteration  15: 10.627 s/op
Iteration  16: 10.602 s/op
Iteration  17: 10.602 s/op
Iteration  18: 10.600 s/op
Iteration  19: 10.605 s/op
Iteration  20: 10.613 s/op
Iteration  21: 10.618 s/op
Iteration  22: 10.605 s/op
Iteration  23: 10.627 s/op
Iteration  24: 10.610 s/op
Iteration  25: 10.612 s/op
Iteration  26: 10.617 s/op
Iteration  27: 10.624 s/op
Iteration  28: 10.637 s/op
Iteration  29: 10.633 s/op
Iteration  30: 10.616 s/op
Iteration  31: 10.637 s/op
Iteration  32: 10.628 s/op
Iteration  33: 10.607 s/op
Iteration  34: 10.629 s/op
Iteration  35: 10.600 s/op
Iteration  36: 10.603 s/op
Iteration  37: 10.623 s/op
Iteration  38: 10.613 s/op
Iteration  39: 10.620 s/op
Iteration  40: 10.610 s/op
Iteration  41: 10.667 s/op
Iteration  42: 10.626 s/op
Iteration  43: 10.612 s/op
Iteration  44: 10.636 s/op
Iteration  45: 10.620 s/op
Iteration  46: 10.640 s/op
Iteration  47: 10.612 s/op
Iteration  48: 10.642 s/op
Iteration  49: 10.646 s/op
Iteration  50: 10.613 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.635 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [10.500, 10.550) = 0 
    [10.550, 10.600) = 5 
    [10.600, 10.650) = 41 
    [10.650, 10.700) = 2 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 1 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 0 
    [11.100, 11.150) = 1 
    [11.150, 11.200) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.584 s/op
     p(50.0000) =     10.620 s/op
     p(90.0000) =     10.646 s/op
     p(95.0000) =     10.753 s/op
     p(99.0000) =     11.129 s/op
     p(99.9000) =     11.129 s/op
     p(99.9900) =     11.129 s/op
     p(99.9990) =     11.129 s/op
     p(99.9999) =     11.129 s/op
    p(100.0000) =     11.129 s/op


# Run complete. Total time: 00:08:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.635 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot_11.0.4_1565024439516.json
{"wallclock_times": [532.816234974], "core_cycle_counts": [[178325428593], [221532651859], [903486415438], [419326395776]], "aperf_counts": [[176818498808], [221373638056], [903445516094], [419274905194]], "mperf_counts": [[177425692914], [221414434842], [903488174518], [419328535746]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 19:09:32: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 19:09:33: INFO] Estimated completion (whole session): 2019-08-06 03:20:44 (8:11:11 from now)
[2019-08-05 19:09:33: INFO] 55 executions left in scheduler queue
[2019-08-05 19:09:33: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 19:09:33: INFO] Estimated completion (next execution): 2019-08-05 19:20:58 (0:11:25 from now)
[2019-08-05 19:09:33: INFO] Reboot in preparation for next execution
[2019-08-05 19:14:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 19:14:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 19:14:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 19:14:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 19:14:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 19:20:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.392 s/op
Iteration   2: 6.841 s/op
Iteration   3: 6.868 s/op
Iteration   4: 6.801 s/op
Iteration   5: 6.964 s/op
Iteration   6: 6.868 s/op
Iteration   7: 6.705 s/op
Iteration   8: 6.868 s/op
Iteration   9: 6.846 s/op
Iteration  10: 6.726 s/op
Iteration  11: 6.858 s/op
Iteration  12: 6.718 s/op
Iteration  13: 6.871 s/op
Iteration  14: 6.882 s/op
Iteration  15: 6.717 s/op
Iteration  16: 6.857 s/op
Iteration  17: 6.856 s/op
Iteration  18: 6.708 s/op
Iteration  19: 6.853 s/op
Iteration  20: 6.724 s/op
Iteration  21: 6.847 s/op
Iteration  22: 6.845 s/op
Iteration  23: 6.847 s/op
Iteration  24: 6.683 s/op
Iteration  25: 6.847 s/op
Iteration  26: 6.811 s/op
Iteration  27: 6.815 s/op
Iteration  28: 6.796 s/op
Iteration  29: 6.794 s/op
Iteration  30: 6.780 s/op
Iteration  31: 6.891 s/op
Iteration  32: 6.802 s/op
Iteration  33: 6.773 s/op
Iteration  34: 6.800 s/op
Iteration  35: 6.827 s/op
Iteration  36: 6.704 s/op
Iteration  37: 6.831 s/op
Iteration  38: 6.851 s/op
Iteration  39: 6.716 s/op
Iteration  40: 6.841 s/op
Iteration  41: 6.723 s/op
Iteration  42: 6.845 s/op
Iteration  43: 6.845 s/op
Iteration  44: 6.726 s/op
Iteration  45: 6.837 s/op
Iteration  46: 6.851 s/op
Iteration  47: 6.732 s/op
Iteration  48: 6.848 s/op
Iteration  49: 6.848 s/op
Iteration  50: 6.715 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.820 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 1 
    [6.700, 6.750) = 12 
    [6.750, 6.800) = 5 
    [6.800, 6.850) = 18 
    [6.850, 6.900) = 12 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 1 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.683 s/op
     p(50.0000) =      6.839 s/op
     p(90.0000) =      6.871 s/op
     p(95.0000) =      6.924 s/op
     p(99.0000) =      7.392 s/op
     p(99.9000) =      7.392 s/op
     p(99.9900) =      7.392 s/op
     p(99.9990) =      7.392 s/op
     p(99.9999) =      7.392 s/op
    p(100.0000) =      7.392 s/op


# Run complete. Total time: 00:05:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.820 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot_11.0.4_1565025264270.json
{"wallclock_times": [342.226568187], "core_cycle_counts": [[342257357722], [219850555528], [330930906375], [331949421977]], "aperf_counts": [[341442200827], [219750479540], [330874467590], [331902603507]], "mperf_counts": [[341597051054], [219954748990], [331067263106], [331959917656]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 19:20:06: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 19:20:07: INFO] Estimated completion (whole session): 2019-08-06 03:23:07 (8:03:00 from now)
[2019-08-05 19:20:07: INFO] 54 executions left in scheduler queue
[2019-08-05 19:20:07: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 19:20:07: INFO] Estimated completion (next execution): 2019-08-05 19:28:19 (0:08:11 from now)
[2019-08-05 19:20:07: INFO] Reboot in preparation for next execution
[2019-08-05 19:24:25: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 19:24:25: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 19:24:25: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 19:24:25: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 19:24:25: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 19:37:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.816 s/op
Iteration   2: 16.575 s/op
Iteration   3: 18.397 s/op
Iteration   4: 16.225 s/op
Iteration   5: 16.229 s/op
Iteration   6: 16.178 s/op
Iteration   7: 16.220 s/op
Iteration   8: 16.181 s/op
Iteration   9: 16.279 s/op
Iteration  10: 16.171 s/op
Iteration  11: 16.176 s/op
Iteration  12: 16.187 s/op
Iteration  13: 16.213 s/op
Iteration  14: 16.196 s/op
Iteration  15: 16.162 s/op
Iteration  16: 16.211 s/op
Iteration  17: 16.185 s/op
Iteration  18: 16.167 s/op
Iteration  19: 16.155 s/op
Iteration  20: 16.244 s/op
Iteration  21: 16.212 s/op
Iteration  22: 16.178 s/op
Iteration  23: 16.216 s/op
Iteration  24: 16.234 s/op
Iteration  25: 16.214 s/op
Iteration  26: 16.190 s/op
Iteration  27: 16.200 s/op
Iteration  28: 16.214 s/op
Iteration  29: 16.187 s/op
Iteration  30: 16.202 s/op
Iteration  31: 16.212 s/op
Iteration  32: 16.266 s/op
Iteration  33: 16.217 s/op
Iteration  34: 16.177 s/op
Iteration  35: 16.200 s/op
Iteration  36: 16.261 s/op
Iteration  37: 16.183 s/op
Iteration  38: 16.181 s/op
Iteration  39: 16.229 s/op
Iteration  40: 16.303 s/op
Iteration  41: 16.152 s/op
Iteration  42: 16.180 s/op
Iteration  43: 16.232 s/op
Iteration  44: 16.260 s/op
Iteration  45: 16.133 s/op
Iteration  46: 16.184 s/op
Iteration  47: 16.198 s/op
Iteration  48: 16.209 s/op
Iteration  49: 16.267 s/op
Iteration  50: 16.175 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.249 ?(99.9%) 0.159 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 41 
    [16.250, 16.500) = 6 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 1 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.816 s/op
     p(50.0000) =     16.201 s/op
     p(90.0000) =     16.267 s/op
     p(95.0000) =     16.425 s/op
     p(99.0000) =     18.397 s/op
     p(99.9000) =     18.397 s/op
     p(99.9900) =     18.397 s/op
     p(99.9990) =     18.397 s/op
     p(99.9999) =     18.397 s/op
    p(100.0000) =     18.397 s/op


# Run complete. Total time: 00:13:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.249 ? 0.159   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot_11.0.4_1565025865775.json
{"wallclock_times": [813.535940377], "core_cycle_counts": [[131416844933], [472106298601], [1392977068400], [627890295867]], "aperf_counts": [[128907862322], [471993481407], [1392909712304], [627842289678]], "mperf_counts": [[129820810274], [472734938162], [1394631336102], [628007498444]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 19:37:59: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-05 19:38:00: INFO] Estimated completion (whole session): 2019-08-06 03:25:12 (7:47:12 from now)
[2019-08-05 19:38:00: INFO] 53 executions left in scheduler queue
[2019-08-05 19:38:00: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-05 19:38:00: INFO] Estimated completion (next execution): 2019-08-05 19:53:56 (0:15:55 from now)
[2019-08-05 19:38:00: INFO] Reboot in preparation for next execution
[2019-08-05 19:44:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.006 s/op
Iteration   2: 1.681 s/op
Iteration   3: 1.972 s/op
Iteration   4: 2.048 s/op
Iteration   5: 2.016 s/op
Iteration   6: 2.014 s/op
Iteration   7: 2.007 s/op
Iteration   8: 2.017 s/op
Iteration   9: 2.016 s/op
Iteration  10: 2.010 s/op
Iteration  11: 2.010 s/op
Iteration  12: 2.014 s/op
Iteration  13: 2.005 s/op
Iteration  14: 2.008 s/op
Iteration  15: 2.009 s/op
Iteration  16: 2.006 s/op
Iteration  17: 2.011 s/op
Iteration  18: 2.008 s/op
Iteration  19: 2.009 s/op
Iteration  20: 2.010 s/op
Iteration  21: 2.010 s/op
Iteration  22: 2.008 s/op
Iteration  23: 2.006 s/op
Iteration  24: 2.011 s/op
Iteration  25: 2.011 s/op
Iteration  26: 2.009 s/op
Iteration  27: 2.010 s/op
Iteration  28: 2.009 s/op
Iteration  29: 2.016 s/op
Iteration  30: 2.012 s/op
Iteration  31: 2.012 s/op
Iteration  32: 2.012 s/op
Iteration  33: 2.011 s/op
Iteration  34: 2.015 s/op
Iteration  35: 2.011 s/op
Iteration  36: 2.013 s/op
Iteration  37: 2.012 s/op
Iteration  38: 2.008 s/op
Iteration  39: 2.010 s/op
Iteration  40: 2.012 s/op
Iteration  41: 2.011 s/op
Iteration  42: 2.014 s/op
Iteration  43: 2.017 s/op
Iteration  44: 2.011 s/op
Iteration  45: 2.011 s/op
Iteration  46: 2.014 s/op
Iteration  47: 2.016 s/op
Iteration  48: 2.015 s/op
Iteration  49: 2.009 s/op
Iteration  50: 2.013 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.004 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 48 

  Percentiles, s/op:
      p(0.0000) =      1.681 s/op
     p(50.0000) =      2.011 s/op
     p(90.0000) =      2.016 s/op
     p(95.0000) =      2.017 s/op
     p(99.0000) =      2.048 s/op
     p(99.9000) =      2.048 s/op
     p(99.9900) =      2.048 s/op
     p(99.9990) =      2.048 s/op
     p(99.9999) =      2.048 s/op
    p(100.0000) =      2.048 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.004 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot-8u222-b10_1565026951750.json
{"wallclock_times": [101.09414344800004], "core_cycle_counts": [[96507725062], [61437426983], [62436967203], [117529847671]], "aperf_counts": [[96205183029], [61394610928], [62417188459], [117513885971]], "mperf_counts": [[96221489828], [61400189428], [62431802534], [117514186848]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 19:44:12: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-05 19:44:13: INFO] Estimated completion (whole session): 2019-08-06 03:27:20 (7:43:06 from now)
[2019-08-05 19:44:13: INFO] 52 executions left in scheduler queue
[2019-08-05 19:44:13: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-05 19:44:13: INFO] Estimated completion (next execution): 2019-08-05 19:48:22 (0:04:08 from now)
[2019-08-05 19:44:13: INFO] Reboot in preparation for next execution
[2019-08-05 19:50:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.780 s/op
Iteration   2: 1.401 s/op
Iteration   3: 1.732 s/op
Iteration   4: 1.649 s/op
Iteration   5: 1.620 s/op
Iteration   6: 1.594 s/op
Iteration   7: 1.593 s/op
Iteration   8: 1.596 s/op
Iteration   9: 1.593 s/op
Iteration  10: 1.594 s/op
Iteration  11: 1.627 s/op
Iteration  12: 1.597 s/op
Iteration  13: 1.592 s/op
Iteration  14: 1.606 s/op
Iteration  15: 1.594 s/op
Iteration  16: 1.594 s/op
Iteration  17: 1.595 s/op
Iteration  18: 1.597 s/op
Iteration  19: 1.598 s/op
Iteration  20: 1.602 s/op
Iteration  21: 1.600 s/op
Iteration  22: 1.633 s/op
Iteration  23: 1.613 s/op
Iteration  24: 1.598 s/op
Iteration  25: 1.600 s/op
Iteration  26: 1.600 s/op
Iteration  27: 1.599 s/op
Iteration  28: 1.600 s/op
Iteration  29: 1.600 s/op
Iteration  30: 1.600 s/op
Iteration  31: 1.599 s/op
Iteration  32: 1.599 s/op
Iteration  33: 1.607 s/op
Iteration  34: 1.602 s/op
Iteration  35: 1.601 s/op
Iteration  36: 1.610 s/op
Iteration  37: 1.623 s/op
Iteration  38: 1.628 s/op
Iteration  39: 1.600 s/op
Iteration  40: 1.599 s/op
Iteration  41: 1.602 s/op
Iteration  42: 1.598 s/op
Iteration  43: 1.602 s/op
Iteration  44: 1.624 s/op
Iteration  45: 1.600 s/op
Iteration  46: 1.599 s/op
Iteration  47: 1.608 s/op
Iteration  48: 1.600 s/op
Iteration  49: 1.597 s/op
Iteration  50: 1.604 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.606 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [1.400, 1.425) = 1 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 26 
    [1.600, 1.625) = 17 
    [1.625, 1.650) = 4 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 1 
    [1.750, 1.775) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.401 s/op
     p(50.0000) =      1.600 s/op
     p(90.0000) =      1.628 s/op
     p(95.0000) =      1.686 s/op
     p(99.0000) =      1.780 s/op
     p(99.9000) =      1.780 s/op
     p(99.9900) =      1.780 s/op
     p(99.9990) =      1.780 s/op
     p(99.9999) =      1.780 s/op
    p(100.0000) =      1.780 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.606 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot-8u222-b10_1565027360341.json
{"wallclock_times": [81.11726627600001], "core_cycle_counts": [[84317159320], [24959975617], [24459066838], [130938867064]], "aperf_counts": [[84143745457], [24931600768], [24446184724], [130929523201]], "mperf_counts": [[84160519814], [24933751464], [24447120684], [130942713604]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 19:50:41: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-05 19:50:42: INFO] Estimated completion (whole session): 2019-08-06 03:29:57 (7:39:14 from now)
[2019-08-05 19:50:42: INFO] 51 executions left in scheduler queue
[2019-08-05 19:50:42: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 19:50:42: INFO] Estimated completion (next execution): 2019-08-05 19:54:33 (0:03:51 from now)
[2019-08-05 19:50:42: INFO] Reboot in preparation for next execution
[2019-08-05 19:55:28: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 20:01:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.338 s/op
Iteration   2: 7.479 s/op
Iteration   3: 7.196 s/op
Iteration   4: 7.201 s/op
Iteration   5: 7.172 s/op
Iteration   6: 7.160 s/op
Iteration   7: 7.155 s/op
Iteration   8: 7.070 s/op
Iteration   9: 7.047 s/op
Iteration  10: 7.066 s/op
Iteration  11: 7.087 s/op
Iteration  12: 7.110 s/op
Iteration  13: 7.092 s/op
Iteration  14: 7.060 s/op
Iteration  15: 7.082 s/op
Iteration  16: 7.104 s/op
Iteration  17: 7.073 s/op
Iteration  18: 7.095 s/op
Iteration  19: 7.059 s/op
Iteration  20: 7.053 s/op
Iteration  21: 7.110 s/op
Iteration  22: 7.088 s/op
Iteration  23: 7.126 s/op
Iteration  24: 7.107 s/op
Iteration  25: 7.020 s/op
Iteration  26: 7.015 s/op
Iteration  27: 7.048 s/op
Iteration  28: 7.176 s/op
Iteration  29: 7.100 s/op
Iteration  30: 7.067 s/op
Iteration  31: 6.988 s/op
Iteration  32: 7.044 s/op
Iteration  33: 7.032 s/op
Iteration  34: 7.026 s/op
Iteration  35: 7.046 s/op
Iteration  36: 6.949 s/op
Iteration  37: 6.962 s/op
Iteration  38: 6.942 s/op
Iteration  39: 7.074 s/op
Iteration  40: 7.057 s/op
Iteration  41: 7.055 s/op
Iteration  42: 7.055 s/op
Iteration  43: 7.054 s/op
Iteration  44: 7.077 s/op
Iteration  45: 7.049 s/op
Iteration  46: 7.085 s/op
Iteration  47: 7.033 s/op
Iteration  48: 7.008 s/op
Iteration  49: 7.108 s/op
Iteration  50: 7.117 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.106 ?(99.9%) 0.097 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 4 
    [7.000, 7.250) = 44 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.942 s/op
     p(50.0000) =      7.071 s/op
     p(90.0000) =      7.175 s/op
     p(95.0000) =      7.326 s/op
     p(99.0000) =      8.338 s/op
     p(99.9000) =      8.338 s/op
     p(99.9900) =      8.338 s/op
     p(99.9990) =      8.338 s/op
     p(99.9999) =      8.338 s/op
    p(100.0000) =      8.338 s/op


# Run complete. Total time: 00:05:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.106 ? 0.097   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9-8u222-b10_1565027728241.json
{"wallclock_times": [356.82286316299997], "core_cycle_counts": [[265668071854], [467660687620], [274815392754], [242451836664]], "aperf_counts": [[264589653922], [467505840048], [274708088384], [242303106998]], "mperf_counts": [[264593045240], [467506141826], [274709107758], [242303791324]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 20:01:25: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 20:01:26: INFO] Estimated completion (whole session): 2019-08-06 03:31:59 (7:30:32 from now)
[2019-08-05 20:01:26: INFO] 50 executions left in scheduler queue
[2019-08-05 20:01:26: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 20:01:26: INFO] Estimated completion (next execution): 2019-08-05 20:10:00 (0:08:34 from now)
[2019-08-05 20:01:26: INFO] Reboot in preparation for next execution
[2019-08-05 20:06:04: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 20:16:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.065 s/op
Iteration   2: 12.372 s/op
Iteration   3: 12.183 s/op
Iteration   4: 12.305 s/op
Iteration   5: 12.289 s/op
Iteration   6: 12.321 s/op
Iteration   7: 12.320 s/op
Iteration   8: 12.253 s/op
Iteration   9: 12.323 s/op
Iteration  10: 12.238 s/op
Iteration  11: 12.267 s/op
Iteration  12: 12.272 s/op
Iteration  13: 12.311 s/op
Iteration  14: 12.298 s/op
Iteration  15: 12.257 s/op
Iteration  16: 12.342 s/op
Iteration  17: 12.224 s/op
Iteration  18: 12.319 s/op
Iteration  19: 12.309 s/op
Iteration  20: 12.327 s/op
Iteration  21: 12.355 s/op
Iteration  22: 12.191 s/op
Iteration  23: 12.246 s/op
Iteration  24: 12.257 s/op
Iteration  25: 12.197 s/op
Iteration  26: 12.235 s/op
Iteration  27: 12.347 s/op
Iteration  28: 12.302 s/op
Iteration  29: 12.310 s/op
Iteration  30: 12.314 s/op
Iteration  31: 12.297 s/op
Iteration  32: 12.276 s/op
Iteration  33: 12.314 s/op
Iteration  34: 12.241 s/op
Iteration  35: 12.319 s/op
Iteration  36: 12.204 s/op
Iteration  37: 12.220 s/op
Iteration  38: 12.310 s/op
Iteration  39: 12.316 s/op
Iteration  40: 12.312 s/op
Iteration  41: 12.260 s/op
Iteration  42: 12.288 s/op
Iteration  43: 12.308 s/op
Iteration  44: 12.269 s/op
Iteration  45: 12.308 s/op
Iteration  46: 12.283 s/op
Iteration  47: 12.247 s/op
Iteration  48: 12.322 s/op
Iteration  49: 12.232 s/op
Iteration  50: 12.354 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.301 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [12.100, 12.200) = 3 
    [12.200, 12.300) = 22 
    [12.300, 12.400) = 24 
    [12.400, 12.500) = 0 
    [12.500, 12.600) = 0 
    [12.600, 12.700) = 0 
    [12.700, 12.800) = 0 
    [12.800, 12.900) = 0 
    [12.900, 13.000) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.183 s/op
     p(50.0000) =     12.300 s/op
     p(90.0000) =     12.347 s/op
     p(95.0000) =     12.362 s/op
     p(99.0000) =     13.065 s/op
     p(99.9000) =     13.065 s/op
     p(99.9900) =     13.065 s/op
     p(99.9990) =     13.065 s/op
     p(99.9999) =     13.065 s/op
    p(100.0000) =     13.065 s/op


# Run complete. Total time: 00:10:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.301 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9-8u222-b10_1565028364829.json
{"wallclock_times": [616.174508503], "core_cycle_counts": [[767643966555], [133697431483], [514757337901], [584323851913]], "aperf_counts": [[766356584452], [133474982585], [514597264304], [584269016314]], "mperf_counts": [[766361773928], [133475897342], [514597547720], [584269762030]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 20:16:21: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 20:16:22: INFO] Estimated completion (whole session): 2019-08-06 03:35:20 (7:18:58 from now)
[2019-08-05 20:16:22: INFO] 49 executions left in scheduler queue
[2019-08-05 20:16:22: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 20:16:22: INFO] Estimated completion (next execution): 2019-08-05 20:28:32 (0:12:10 from now)
[2019-08-05 20:16:22: INFO] Reboot in preparation for next execution
[2019-08-05 20:20:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 20:27:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.536 s/op
Iteration   2: 8.240 s/op
Iteration   3: 8.127 s/op
Iteration   4: 8.026 s/op
Iteration   5: 7.973 s/op
Iteration   6: 8.099 s/op
Iteration   7: 8.053 s/op
Iteration   8: 8.062 s/op
Iteration   9: 8.001 s/op
Iteration  10: 7.959 s/op
Iteration  11: 7.987 s/op
Iteration  12: 8.010 s/op
Iteration  13: 8.101 s/op
Iteration  14: 7.991 s/op
Iteration  15: 8.043 s/op
Iteration  16: 7.973 s/op
Iteration  17: 8.073 s/op
Iteration  18: 8.117 s/op
Iteration  19: 7.975 s/op
Iteration  20: 8.015 s/op
Iteration  21: 7.915 s/op
Iteration  22: 8.030 s/op
Iteration  23: 8.002 s/op
Iteration  24: 7.918 s/op
Iteration  25: 7.990 s/op
Iteration  26: 7.937 s/op
Iteration  27: 8.011 s/op
Iteration  28: 7.956 s/op
Iteration  29: 8.027 s/op
Iteration  30: 8.031 s/op
Iteration  31: 7.919 s/op
Iteration  32: 8.016 s/op
Iteration  33: 7.956 s/op
Iteration  34: 8.031 s/op
Iteration  35: 7.954 s/op
Iteration  36: 7.956 s/op
Iteration  37: 8.029 s/op
Iteration  38: 7.929 s/op
Iteration  39: 8.037 s/op
Iteration  40: 8.012 s/op
Iteration  41: 8.086 s/op
Iteration  42: 7.996 s/op
Iteration  43: 7.978 s/op
Iteration  44: 8.015 s/op
Iteration  45: 7.918 s/op
Iteration  46: 8.075 s/op
Iteration  47: 7.987 s/op
Iteration  48: 7.925 s/op
Iteration  49: 8.013 s/op
Iteration  50: 7.982 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.040 ?(99.9%) 0.111 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 22 
    [ 8.000,  8.250) = 27 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.915 s/op
     p(50.0000) =      8.011 s/op
     p(90.0000) =      8.101 s/op
     p(95.0000) =      8.177 s/op
     p(99.0000) =      9.536 s/op
     p(99.9000) =      9.536 s/op
     p(99.9900) =      9.536 s/op
     p(99.9990) =      9.536 s/op
     p(99.9999) =      9.536 s/op
    p(100.0000) =      9.536 s/op


# Run complete. Total time: 00:06:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.040 ? 0.111   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9-8u222-b10_1565029232490.json
{"wallclock_times": [403.42686525799996], "core_cycle_counts": [[375779879804], [428380708608], [251409519241], [317135647400]], "aperf_counts": [[374778823721], [428263547760], [251304809240], [317040731634]], "mperf_counts": [[374784704300], [428264020728], [251305121198], [317040790042]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 20:27:15: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 20:27:16: INFO] Estimated completion (whole session): 2019-08-06 03:37:15 (7:09:58 from now)
[2019-08-05 20:27:16: INFO] 48 executions left in scheduler queue
[2019-08-05 20:27:16: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 20:27:16: INFO] Estimated completion (next execution): 2019-08-05 20:36:23 (0:09:06 from now)
[2019-08-05 20:27:16: INFO] Reboot in preparation for next execution
[2019-08-05 20:32:35: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-05 20:43:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.020 s/op
Iteration   2: 14.237 s/op
Iteration   3: 14.235 s/op
Iteration   4: 13.329 s/op
Iteration   5: 13.350 s/op
Iteration   6: 14.327 s/op
Iteration   7: 14.022 s/op
Iteration   8: 14.186 s/op
Iteration   9: 13.326 s/op
Iteration  10: 13.313 s/op
Iteration  11: 13.285 s/op
Iteration  12: 13.378 s/op
Iteration  13: 14.322 s/op
Iteration  14: 13.284 s/op
Iteration  15: 13.384 s/op
Iteration  16: 14.169 s/op
Iteration  17: 13.375 s/op
Iteration  18: 14.111 s/op
Iteration  19: 13.280 s/op
Iteration  20: 13.376 s/op
Iteration  21: 13.361 s/op
Iteration  22: 13.388 s/op
Iteration  23: 13.309 s/op
Iteration  24: 13.333 s/op
Iteration  25: 14.341 s/op
Iteration  26: 13.378 s/op
Iteration  27: 13.411 s/op
Iteration  28: 13.377 s/op
Iteration  29: 13.357 s/op
Iteration  30: 13.397 s/op
Iteration  31: 13.350 s/op
Iteration  32: 14.202 s/op
Iteration  33: 13.308 s/op
Iteration  34: 14.252 s/op
Iteration  35: 13.336 s/op
Iteration  36: 13.355 s/op
Iteration  37: 13.273 s/op
Iteration  38: 13.332 s/op
Iteration  39: 14.263 s/op
Iteration  40: 13.334 s/op
Iteration  41: 13.346 s/op
Iteration  42: 13.293 s/op
Iteration  43: 13.356 s/op
Iteration  44: 13.277 s/op
Iteration  45: 13.326 s/op
Iteration  46: 14.113 s/op
Iteration  47: 13.326 s/op
Iteration  48: 13.355 s/op
Iteration  49: 13.312 s/op
Iteration  50: 14.234 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     13.618 ?(99.9%) 0.222 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 35 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 0 
    [14.000, 14.250) = 9 
    [14.250, 14.500) = 5 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 1 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.273 s/op
     p(50.0000) =     13.359 s/op
     p(90.0000) =     14.262 s/op
     p(95.0000) =     14.333 s/op
     p(99.0000) =     15.020 s/op
     p(99.9000) =     15.020 s/op
     p(99.9900) =     15.020 s/op
     p(99.9990) =     15.020 s/op
     p(99.9999) =     15.020 s/op
    p(100.0000) =     15.020 s/op


# Run complete. Total time: 00:11:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  13.618 ? 0.222   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9-8u222-b10_1565029954930.json
{"wallclock_times": [682.2106812699999], "core_cycle_counts": [[987520865663], [404756078332], [592974299553], [259672631967]], "aperf_counts": [[986209953509], [404441621550], [592839488052], [259458148294]], "mperf_counts": [[986216886828], [404442170516], [592840922326], [259458817922]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 20:43:57: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-05 20:43:58: INFO] Estimated completion (whole session): 2019-08-06 03:40:07 (6:56:09 from now)
[2019-08-05 20:43:58: INFO] 47 executions left in scheduler queue
[2019-08-05 20:43:58: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-05 20:43:58: INFO] Estimated completion (next execution): 2019-08-05 20:57:49 (0:13:51 from now)
[2019-08-05 20:43:58: INFO] Reboot in preparation for next execution
[2019-08-05 20:48:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 20:48:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 20:48:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 20:48:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 20:48:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 20:50:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.418 s/op
Iteration   2: 2.510 s/op
Iteration   3: 2.087 s/op
Iteration   4: 2.101 s/op
Iteration   5: 2.199 s/op
Iteration   6: 2.188 s/op
Iteration   7: 2.193 s/op
Iteration   8: 2.151 s/op
Iteration   9: 2.161 s/op
Iteration  10: 2.163 s/op
Iteration  11: 2.204 s/op
Iteration  12: 2.176 s/op
Iteration  13: 2.056 s/op
Iteration  14: 2.179 s/op
Iteration  15: 2.167 s/op
Iteration  16: 2.183 s/op
Iteration  17: 2.182 s/op
Iteration  18: 2.179 s/op
Iteration  19: 2.179 s/op
Iteration  20: 2.001 s/op
Iteration  21: 2.184 s/op
Iteration  22: 2.179 s/op
Iteration  23: 2.180 s/op
Iteration  24: 2.046 s/op
Iteration  25: 2.188 s/op
Iteration  26: 2.179 s/op
Iteration  27: 2.172 s/op
Iteration  28: 2.082 s/op
Iteration  29: 2.177 s/op
Iteration  30: 2.170 s/op
Iteration  31: 1.989 s/op
Iteration  32: 2.184 s/op
Iteration  33: 2.182 s/op
Iteration  34: 2.169 s/op
Iteration  35: 2.026 s/op
Iteration  36: 2.162 s/op
Iteration  37: 2.178 s/op
Iteration  38: 1.938 s/op
Iteration  39: 2.184 s/op
Iteration  40: 2.179 s/op
Iteration  41: 2.171 s/op
Iteration  42: 2.031 s/op
Iteration  43: 2.111 s/op
Iteration  44: 2.178 s/op
Iteration  45: 2.176 s/op
Iteration  46: 2.021 s/op
Iteration  47: 2.156 s/op
Iteration  48: 2.180 s/op
Iteration  49: 1.924 s/op
Iteration  50: 2.059 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.149 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [1.900, 1.950) = 2 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 5 
    [2.050, 2.100) = 4 
    [2.100, 2.150) = 2 
    [2.150, 2.200) = 33 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 1 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.924 s/op
     p(50.0000) =      2.176 s/op
     p(90.0000) =      2.193 s/op
     p(95.0000) =      2.300 s/op
     p(99.0000) =      2.510 s/op
     p(99.9000) =      2.510 s/op
     p(99.9900) =      2.510 s/op
     p(99.9990) =      2.510 s/op
     p(99.9999) =      2.510 s/op
    p(100.0000) =      2.510 s/op


# Run complete. Total time: 00:01:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.149 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot_11.0.4_1565030931784.json
{"wallclock_times": [108.50111643500003], "core_cycle_counts": [[136505522720], [66728566798], [59204741762], [64685835907]], "aperf_counts": [[136263269280], [66678765654], [59177983554], [64659800113]], "mperf_counts": [[151499687128], [75080640502], [66431911056], [70849251536]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 20:50:40: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-05 20:50:41: INFO] Estimated completion (whole session): 2019-08-06 03:42:39 (6:51:58 from now)
[2019-08-05 20:50:41: INFO] 46 executions left in scheduler queue
[2019-08-05 20:50:41: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-05 20:50:41: INFO] Estimated completion (next execution): 2019-08-05 20:54:55 (0:04:14 from now)
[2019-08-05 20:50:41: INFO] Reboot in preparation for next execution
[2019-08-05 20:55:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 20:55:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 20:55:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 20:55:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 20:55:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 20:57:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.988 s/op
Iteration   2: 2.233 s/op
Iteration   3: 2.295 s/op
Iteration   4: 2.199 s/op
Iteration   5: 2.665 s/op
Iteration   6: 2.196 s/op
Iteration   7: 2.120 s/op
Iteration   8: 2.122 s/op
Iteration   9: 2.119 s/op
Iteration  10: 2.118 s/op
Iteration  11: 2.118 s/op
Iteration  12: 2.118 s/op
Iteration  13: 2.118 s/op
Iteration  14: 2.118 s/op
Iteration  15: 2.119 s/op
Iteration  16: 2.120 s/op
Iteration  17: 2.119 s/op
Iteration  18: 2.118 s/op
Iteration  19: 2.119 s/op
Iteration  20: 2.119 s/op
Iteration  21: 2.125 s/op
Iteration  22: 2.123 s/op
Iteration  23: 2.124 s/op
Iteration  24: 2.122 s/op
Iteration  25: 2.121 s/op
Iteration  26: 2.121 s/op
Iteration  27: 2.119 s/op
Iteration  28: 2.117 s/op
Iteration  29: 2.118 s/op
Iteration  30: 2.118 s/op
Iteration  31: 2.121 s/op
Iteration  32: 2.121 s/op
Iteration  33: 2.120 s/op
Iteration  34: 2.119 s/op
Iteration  35: 2.118 s/op
Iteration  36: 2.118 s/op
Iteration  37: 2.121 s/op
Iteration  38: 2.119 s/op
Iteration  39: 2.121 s/op
Iteration  40: 2.122 s/op
Iteration  41: 2.121 s/op
Iteration  42: 2.126 s/op
Iteration  43: 2.119 s/op
Iteration  44: 2.121 s/op
Iteration  45: 2.121 s/op
Iteration  46: 2.122 s/op
Iteration  47: 2.119 s/op
Iteration  48: 2.121 s/op
Iteration  49: 2.126 s/op
Iteration  50: 2.130 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.138 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 44 
    [2.150, 2.200) = 2 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.988 s/op
     p(50.0000) =      2.121 s/op
     p(90.0000) =      2.190 s/op
     p(95.0000) =      2.261 s/op
     p(99.0000) =      2.665 s/op
     p(99.9000) =      2.665 s/op
     p(99.9900) =      2.665 s/op
     p(99.9990) =      2.665 s/op
     p(99.9999) =      2.665 s/op
    p(100.0000) =      2.665 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.138 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot_11.0.4_1565031342289.json
{"wallclock_times": [107.87492807399997], "core_cycle_counts": [[118597556187], [106458000238], [60345727562], [66815995345]], "aperf_counts": [[118356702432], [106418563138], [60324643038], [66796786032]], "mperf_counts": [[119177050816], [106481655390], [60510274520], [66852909754]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 20:57:30: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-05 20:57:31: INFO] Estimated completion (whole session): 2019-08-06 03:45:09 (6:47:37 from now)
[2019-08-05 20:57:31: INFO] 45 executions left in scheduler queue
[2019-08-05 20:57:31: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-08-05 20:57:31: INFO] Estimated completion (next execution): 2019-08-05 21:01:50 (0:04:19 from now)
[2019-08-05 20:57:31: INFO] Reboot in preparation for next execution
[2019-08-05 21:06:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.176 s/op
Iteration   2: 5.576 s/op
Iteration   3: 5.663 s/op
Iteration   4: 5.653 s/op
Iteration   5: 5.652 s/op
Iteration   6: 5.657 s/op
Iteration   7: 5.656 s/op
Iteration   8: 5.586 s/op
Iteration   9: 5.619 s/op
Iteration  10: 5.658 s/op
Iteration  11: 5.640 s/op
Iteration  12: 5.647 s/op
Iteration  13: 5.646 s/op
Iteration  14: 5.627 s/op
Iteration  15: 5.615 s/op
Iteration  16: 5.630 s/op
Iteration  17: 5.598 s/op
Iteration  18: 5.644 s/op
Iteration  19: 5.639 s/op
Iteration  20: 5.644 s/op
Iteration  21: 5.649 s/op
Iteration  22: 5.655 s/op
Iteration  23: 5.646 s/op
Iteration  24: 5.628 s/op
Iteration  25: 5.628 s/op
Iteration  26: 5.576 s/op
Iteration  27: 5.630 s/op
Iteration  28: 5.561 s/op
Iteration  29: 5.642 s/op
Iteration  30: 5.654 s/op
Iteration  31: 5.644 s/op
Iteration  32: 5.608 s/op
Iteration  33: 5.648 s/op
Iteration  34: 5.610 s/op
Iteration  35: 5.645 s/op
Iteration  36: 5.648 s/op
Iteration  37: 5.622 s/op
Iteration  38: 5.612 s/op
Iteration  39: 5.643 s/op
Iteration  40: 5.617 s/op
Iteration  41: 5.651 s/op
Iteration  42: 5.641 s/op
Iteration  43: 5.616 s/op
Iteration  44: 5.660 s/op
Iteration  45: 5.605 s/op
Iteration  46: 5.633 s/op
Iteration  47: 5.641 s/op
Iteration  48: 5.648 s/op
Iteration  49: 5.624 s/op
Iteration  50: 5.651 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.623 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [5.100, 5.150) = 0 
    [5.150, 5.200) = 1 
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 0 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 5 
    [5.600, 5.650) = 33 

  Percentiles, s/op:
      p(0.0000) =      5.176 s/op
     p(50.0000) =      5.641 s/op
     p(90.0000) =      5.656 s/op
     p(95.0000) =      5.659 s/op
     p(99.0000) =      5.663 s/op
     p(99.9000) =      5.663 s/op
     p(99.9900) =      5.663 s/op
     p(99.9990) =      5.663 s/op
     p(99.9999) =      5.663 s/op
    p(100.0000) =      5.663 s/op


# Run complete. Total time: 00:04:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.623 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_graalvm-ce-19.1.1_1565031709780.json
{"wallclock_times": [282.046041104], "core_cycle_counts": [[265995448913], [231850106957], [165613127037], [246805431814]], "aperf_counts": [[265351191934], [231769928038], [165570323715], [246767913239]], "mperf_counts": [[265381822774], [231776994916], [165571428602], [246769694642]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 21:06:31: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-08-05 21:06:32: INFO] Estimated completion (whole session): 2019-08-06 03:47:11 (6:40:38 from now)
[2019-08-05 21:06:32: INFO] 44 executions left in scheduler queue
[2019-08-05 21:06:32: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-08-05 21:06:32: INFO] Estimated completion (next execution): 2019-08-05 21:13:38 (0:07:05 from now)
[2019-08-05 21:06:32: INFO] Reboot in preparation for next execution
[2019-08-05 21:10:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 21:10:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 21:10:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 21:10:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 21:10:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 21:10:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 21:24:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.767 s/op
Iteration   2: 15.015 s/op
Iteration   3: 17.123 s/op
Iteration   4: 16.752 s/op
Iteration   5: 16.723 s/op
Iteration   6: 16.759 s/op
Iteration   7: 16.739 s/op
Iteration   8: 16.710 s/op
Iteration   9: 16.709 s/op
Iteration  10: 16.784 s/op
Iteration  11: 16.712 s/op
Iteration  12: 16.711 s/op
Iteration  13: 16.578 s/op
Iteration  14: 16.557 s/op
Iteration  15: 16.595 s/op
Iteration  16: 16.573 s/op
Iteration  17: 16.583 s/op
Iteration  18: 16.575 s/op
Iteration  19: 16.631 s/op
Iteration  20: 16.589 s/op
Iteration  21: 16.588 s/op
Iteration  22: 16.597 s/op
Iteration  23: 16.651 s/op
Iteration  24: 16.563 s/op
Iteration  25: 16.599 s/op
Iteration  26: 16.580 s/op
Iteration  27: 16.592 s/op
Iteration  28: 16.585 s/op
Iteration  29: 16.558 s/op
Iteration  30: 16.594 s/op
Iteration  31: 16.571 s/op
Iteration  32: 16.598 s/op
Iteration  33: 16.564 s/op
Iteration  34: 16.596 s/op
Iteration  35: 16.622 s/op
Iteration  36: 16.566 s/op
Iteration  37: 16.604 s/op
Iteration  38: 16.593 s/op
Iteration  39: 16.579 s/op
Iteration  40: 16.589 s/op
Iteration  41: 16.582 s/op
Iteration  42: 16.586 s/op
Iteration  43: 16.592 s/op
Iteration  44: 16.589 s/op
Iteration  45: 16.569 s/op
Iteration  46: 16.622 s/op
Iteration  47: 16.621 s/op
Iteration  48: 16.533 s/op
Iteration  49: 16.572 s/op
Iteration  50: 16.584 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     16.597 ?(99.9%) 0.123 s/op

  Histogram, s/op:
    [15.000, 15.250) = 1 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 44 
    [16.750, 17.000) = 4 
    [17.000, 17.250) = 1 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.015 s/op
     p(50.0000) =     16.592 s/op
     p(90.0000) =     16.751 s/op
     p(95.0000) =     16.775 s/op
     p(99.0000) =     17.123 s/op
     p(99.9000) =     17.123 s/op
     p(99.9900) =     17.123 s/op
     p(99.9990) =     17.123 s/op
     p(99.9999) =     17.123 s/op
    p(100.0000) =     17.123 s/op


# Run complete. Total time: 00:13:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  16.597 ? 0.123   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9_12.0.1_1565032257672.json
{"wallclock_times": [831.421495701], "core_cycle_counts": [[712256724674], [480005140622], [699810047836], [842421981292]], "aperf_counts": [[710048649008], [479797535223], [699566704768], [842284652613]], "mperf_counts": [[710052055704], [479797484100], [699572903684], [842284666060]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 21:24:49: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-08-05 21:24:50: INFO] Estimated completion (whole session): 2019-08-06 03:49:59 (6:25:09 from now)
[2019-08-05 21:24:50: INFO] 43 executions left in scheduler queue
[2019-08-05 21:24:50: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 21:24:50: INFO] Estimated completion (next execution): 2019-08-05 21:40:45 (0:15:55 from now)
[2019-08-05 21:24:50: INFO] Reboot in preparation for next execution
[2019-08-05 21:29:28: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 21:29:28: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 21:29:28: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 21:29:28: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 21:29:28: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 21:29:28: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 21:34:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.164 s/op
Iteration   2: 6.686 s/op
Iteration   3: 6.217 s/op
Iteration   4: 6.184 s/op
Iteration   5: 6.167 s/op
Iteration   6: 6.119 s/op
Iteration   7: 6.184 s/op
Iteration   8: 6.138 s/op
Iteration   9: 6.135 s/op
Iteration  10: 6.157 s/op
Iteration  11: 6.115 s/op
Iteration  12: 6.067 s/op
Iteration  13: 6.174 s/op
Iteration  14: 5.992 s/op
Iteration  15: 6.092 s/op
Iteration  16: 6.002 s/op
Iteration  17: 6.094 s/op
Iteration  18: 6.112 s/op
Iteration  19: 5.973 s/op
Iteration  20: 6.114 s/op
Iteration  21: 6.095 s/op
Iteration  22: 6.082 s/op
Iteration  23: 6.037 s/op
Iteration  24: 6.127 s/op
Iteration  25: 5.980 s/op
Iteration  26: 6.124 s/op
Iteration  27: 6.086 s/op
Iteration  28: 6.078 s/op
Iteration  29: 6.088 s/op
Iteration  30: 6.058 s/op
Iteration  31: 6.129 s/op
Iteration  32: 6.123 s/op
Iteration  33: 6.108 s/op
Iteration  34: 6.111 s/op
Iteration  35: 6.113 s/op
Iteration  36: 6.070 s/op
Iteration  37: 6.094 s/op
Iteration  38: 6.117 s/op
Iteration  39: 6.074 s/op
Iteration  40: 6.102 s/op
Iteration  41: 6.135 s/op
Iteration  42: 6.120 s/op
Iteration  43: 6.090 s/op
Iteration  44: 6.042 s/op
Iteration  45: 6.073 s/op
Iteration  46: 6.103 s/op
Iteration  47: 6.118 s/op
Iteration  48: 6.003 s/op
Iteration  49: 6.058 s/op
Iteration  50: 6.145 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.151 ?(99.9%) 0.152 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 3 
    [6.000, 6.250) = 45 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.973 s/op
     p(50.0000) =      6.109 s/op
     p(90.0000) =      6.183 s/op
     p(95.0000) =      6.428 s/op
     p(99.0000) =      8.164 s/op
     p(99.9000) =      8.164 s/op
     p(99.9900) =      8.164 s/op
     p(99.9990) =      8.164 s/op
     p(99.9999) =      8.164 s/op
    p(100.0000) =      8.164 s/op


# Run complete. Total time: 00:05:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  6.151 ? 0.152   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9_11.0.4_1565033368066.json
{"wallclock_times": [309.17124096299995], "core_cycle_counts": [[313654201466], [223488161450], [196784832961], [289314375249]], "aperf_counts": [[312891702398], [223381591997], [196671938863], [289241901098]], "mperf_counts": [[312901949124], [223382574110], [196672081908], [289241888968]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 21:34:37: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 21:34:38: INFO] Estimated completion (whole session): 2019-08-06 03:51:55 (6:17:17 from now)
[2019-08-05 21:34:38: INFO] 42 executions left in scheduler queue
[2019-08-05 21:34:38: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 21:34:38: INFO] Estimated completion (next execution): 2019-08-05 21:42:24 (0:07:45 from now)
[2019-08-05 21:34:38: INFO] Reboot in preparation for next execution
[2019-08-05 21:39:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 21:39:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 21:39:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 21:39:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 21:39:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 21:39:33: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 21:48:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.390 s/op
Iteration   2: 11.259 s/op
Iteration   3: 10.540 s/op
Iteration   4: 10.601 s/op
Iteration   5: 10.764 s/op
Iteration   6: 10.625 s/op
Iteration   7: 10.707 s/op
Iteration   8: 10.615 s/op
Iteration   9: 10.690 s/op
Iteration  10: 10.606 s/op
Iteration  11: 10.547 s/op
Iteration  12: 10.553 s/op
Iteration  13: 10.536 s/op
Iteration  14: 10.633 s/op
Iteration  15: 10.573 s/op
Iteration  16: 10.671 s/op
Iteration  17: 10.588 s/op
Iteration  18: 10.646 s/op
Iteration  19: 10.577 s/op
Iteration  20: 10.566 s/op
Iteration  21: 10.602 s/op
Iteration  22: 10.621 s/op
Iteration  23: 10.553 s/op
Iteration  24: 10.599 s/op
Iteration  25: 10.657 s/op
Iteration  26: 10.650 s/op
Iteration  27: 10.721 s/op
Iteration  28: 10.558 s/op
Iteration  29: 10.603 s/op
Iteration  30: 10.656 s/op
Iteration  31: 10.525 s/op
Iteration  32: 10.580 s/op
Iteration  33: 10.598 s/op
Iteration  34: 10.772 s/op
Iteration  35: 10.553 s/op
Iteration  36: 10.714 s/op
Iteration  37: 10.589 s/op
Iteration  38: 10.516 s/op
Iteration  39: 10.548 s/op
Iteration  40: 10.545 s/op
Iteration  41: 10.627 s/op
Iteration  42: 10.579 s/op
Iteration  43: 10.616 s/op
Iteration  44: 10.515 s/op
Iteration  45: 10.774 s/op
Iteration  46: 10.637 s/op
Iteration  47: 10.575 s/op
Iteration  48: 10.612 s/op
Iteration  49: 10.589 s/op
Iteration  50: 10.686 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.661 ?(99.9%) 0.135 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 45 
    [10.750, 11.000) = 3 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 1 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 1 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.515 s/op
     p(50.0000) =     10.603 s/op
     p(90.0000) =     10.760 s/op
     p(95.0000) =     10.993 s/op
     p(99.0000) =     12.390 s/op
     p(99.9000) =     12.390 s/op
     p(99.9900) =     12.390 s/op
     p(99.9990) =     12.390 s/op
     p(99.9999) =     12.390 s/op
    p(100.0000) =     12.390 s/op


# Run complete. Total time: 00:08:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.661 ? 0.135   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9_11.0.4_1565033973577.json
{"wallclock_times": [534.7887560409999], "core_cycle_counts": [[784790346583], [391527124629], [336366541774], [248649978896]], "aperf_counts": [[783780939044], [391374528468], [336200374575], [248396864722]], "mperf_counts": [[783788658948], [391374497874], [336200315856], [248396824228]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 21:48:28: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 21:48:29: INFO] Estimated completion (whole session): 2019-08-06 03:52:27 (6:03:57 from now)
[2019-08-05 21:48:29: INFO] 41 executions left in scheduler queue
[2019-08-05 21:48:29: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 21:48:29: INFO] Estimated completion (next execution): 2019-08-05 22:00:51 (0:12:22 from now)
[2019-08-05 21:48:29: INFO] Reboot in preparation for next execution
[2019-08-05 21:52:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 21:52:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 21:52:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 21:52:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 21:52:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 21:52:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 21:56:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.943 s/op
Iteration   2: 6.388 s/op
Iteration   3: 4.578 s/op
Iteration   4: 4.515 s/op
Iteration   5: 4.475 s/op
Iteration   6: 4.489 s/op
Iteration   7: 4.482 s/op
Iteration   8: 4.499 s/op
Iteration   9: 4.510 s/op
Iteration  10: 4.496 s/op
Iteration  11: 4.498 s/op
Iteration  12: 4.529 s/op
Iteration  13: 4.502 s/op
Iteration  14: 4.428 s/op
Iteration  15: 4.412 s/op
Iteration  16: 4.404 s/op
Iteration  17: 4.426 s/op
Iteration  18: 4.447 s/op
Iteration  19: 4.438 s/op
Iteration  20: 4.475 s/op
Iteration  21: 4.454 s/op
Iteration  22: 4.429 s/op
Iteration  23: 4.375 s/op
Iteration  24: 4.375 s/op
Iteration  25: 4.432 s/op
Iteration  26: 4.432 s/op
Iteration  27: 4.422 s/op
Iteration  28: 4.453 s/op
Iteration  29: 4.430 s/op
Iteration  30: 4.438 s/op
Iteration  31: 4.454 s/op
Iteration  32: 4.439 s/op
Iteration  33: 4.460 s/op
Iteration  34: 4.396 s/op
Iteration  35: 4.414 s/op
Iteration  36: 4.403 s/op
Iteration  37: 4.404 s/op
Iteration  38: 4.420 s/op
Iteration  39: 4.432 s/op
Iteration  40: 4.441 s/op
Iteration  41: 4.442 s/op
Iteration  42: 4.433 s/op
Iteration  43: 4.432 s/op
Iteration  44: 4.456 s/op
Iteration  45: 4.451 s/op
Iteration  46: 4.437 s/op
Iteration  47: 4.390 s/op
Iteration  48: 4.399 s/op
Iteration  49: 4.385 s/op
Iteration  50: 4.387 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.533 ?(99.9%) 0.220 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 43 
    [4.500, 4.750) = 5 
    [4.750, 5.000) = 0 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.375 s/op
     p(50.0000) =      4.438 s/op
     p(90.0000) =      4.514 s/op
     p(95.0000) =      5.393 s/op
     p(99.0000) =      6.943 s/op
     p(99.9000) =      6.943 s/op
     p(99.9900) =      6.943 s/op
     p(99.9990) =      6.943 s/op
     p(99.9999) =      6.943 s/op
    p(100.0000) =      6.943 s/op


# Run complete. Total time: 00:03:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.533 ? 0.220   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9_11.0.4_1565034760007.json
{"wallclock_times": [228.526805308], "core_cycle_counts": [[289467658894], [181723473303], [217238463231], [170907301851]], "aperf_counts": [[288955689932], [181599445605], [217144053321], [170772424390]], "mperf_counts": [[288964667944], [181599451918], [217144035920], [170772440242]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 21:56:28: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 21:56:29: INFO] Estimated completion (whole session): 2019-08-06 03:53:56 (5:57:26 from now)
[2019-08-05 21:56:29: INFO] 40 executions left in scheduler queue
[2019-08-05 21:56:29: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 21:56:29: INFO] Estimated completion (next execution): 2019-08-05 22:02:54 (0:06:25 from now)
[2019-08-05 21:56:29: INFO] Reboot in preparation for next execution
[2019-08-05 22:01:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 22:01:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 22:01:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 22:01:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 22:01:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 22:01:24: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-05 22:05:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.611 s/op
Iteration   2: 5.502 s/op
Iteration   3: 4.890 s/op
Iteration   4: 4.951 s/op
Iteration   5: 4.645 s/op
Iteration   6: 4.726 s/op
Iteration   7: 4.608 s/op
Iteration   8: 4.585 s/op
Iteration   9: 4.584 s/op
Iteration  10: 4.454 s/op
Iteration  11: 4.608 s/op
Iteration  12: 4.493 s/op
Iteration  13: 4.481 s/op
Iteration  14: 4.568 s/op
Iteration  15: 4.480 s/op
Iteration  16: 4.607 s/op
Iteration  17: 4.540 s/op
Iteration  18: 4.450 s/op
Iteration  19: 4.572 s/op
Iteration  20: 4.494 s/op
Iteration  21: 4.576 s/op
Iteration  22: 4.531 s/op
Iteration  23: 4.472 s/op
Iteration  24: 4.601 s/op
Iteration  25: 4.534 s/op
Iteration  26: 4.667 s/op
Iteration  27: 4.564 s/op
Iteration  28: 4.529 s/op
Iteration  29: 4.607 s/op
Iteration  30: 4.523 s/op
Iteration  31: 4.649 s/op
Iteration  32: 4.587 s/op
Iteration  33: 4.481 s/op
Iteration  34: 4.645 s/op
Iteration  35: 4.542 s/op
Iteration  36: 4.492 s/op
Iteration  37: 4.584 s/op
Iteration  38: 4.537 s/op
Iteration  39: 4.615 s/op
Iteration  40: 4.581 s/op
Iteration  41: 4.448 s/op
Iteration  42: 4.622 s/op
Iteration  43: 4.583 s/op
Iteration  44: 4.471 s/op
Iteration  45: 4.569 s/op
Iteration  46: 4.515 s/op
Iteration  47: 4.632 s/op
Iteration  48: 4.555 s/op
Iteration  49: 4.501 s/op
Iteration  50: 4.641 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.634 ?(99.9%) 0.162 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 11 
    [4.500, 4.750) = 35 
    [4.750, 5.000) = 2 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.448 s/op
     p(50.0000) =      4.574 s/op
     p(90.0000) =      4.720 s/op
     p(95.0000) =      5.199 s/op
     p(99.0000) =      6.611 s/op
     p(99.9000) =      6.611 s/op
     p(99.9900) =      6.611 s/op
     p(99.9990) =      6.611 s/op
     p(99.9999) =      6.611 s/op
    p(100.0000) =      6.611 s/op


# Run complete. Total time: 00:03:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.634 ? 0.162   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9_11.0.4_1565035284356.json
{"wallclock_times": [233.502729645], "core_cycle_counts": [[228217001327], [176971504468], [250000739198], [157735307211]], "aperf_counts": [[227609059459], [176891848977], [249921344495], [157641748632]], "mperf_counts": [[227612485048], [176892342170], [249927160750], [157642012424]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 22:05:17: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-05 22:05:18: INFO] Estimated completion (whole session): 2019-08-06 03:56:01 (5:50:42 from now)
[2019-08-05 22:05:18: INFO] 39 executions left in scheduler queue
[2019-08-05 22:05:18: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-05 22:05:18: INFO] Estimated completion (next execution): 2019-08-05 22:11:53 (0:06:34 from now)
[2019-08-05 22:05:18: INFO] Reboot in preparation for next execution
[2019-08-05 22:10:03: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 22:10:03: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 22:10:03: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 22:10:03: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 22:10:03: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 22:12:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.475 s/op
Iteration   2: 2.462 s/op
Iteration   3: 2.453 s/op
Iteration   4: 2.410 s/op
Iteration   5: 2.429 s/op
Iteration   6: 2.425 s/op
Iteration   7: 2.442 s/op
Iteration   8: 2.425 s/op
Iteration   9: 2.420 s/op
Iteration  10: 2.426 s/op
Iteration  11: 2.426 s/op
Iteration  12: 2.415 s/op
Iteration  13: 2.409 s/op
Iteration  14: 2.415 s/op
Iteration  15: 2.418 s/op
Iteration  16: 2.411 s/op
Iteration  17: 2.407 s/op
Iteration  18: 2.411 s/op
Iteration  19: 2.411 s/op
Iteration  20: 2.416 s/op
Iteration  21: 2.411 s/op
Iteration  22: 2.409 s/op
Iteration  23: 2.419 s/op
Iteration  24: 2.419 s/op
Iteration  25: 2.413 s/op
Iteration  26: 2.403 s/op
Iteration  27: 2.411 s/op
Iteration  28: 2.418 s/op
Iteration  29: 2.415 s/op
Iteration  30: 2.405 s/op
Iteration  31: 2.408 s/op
Iteration  32: 2.413 s/op
Iteration  33: 2.412 s/op
Iteration  34: 2.404 s/op
Iteration  35: 2.416 s/op
Iteration  36: 2.411 s/op
Iteration  37: 2.413 s/op
Iteration  38: 2.411 s/op
Iteration  39: 2.409 s/op
Iteration  40: 2.399 s/op
Iteration  41: 2.418 s/op
Iteration  42: 2.411 s/op
Iteration  43: 2.403 s/op
Iteration  44: 2.413 s/op
Iteration  45: 2.417 s/op
Iteration  46: 2.416 s/op
Iteration  47: 2.403 s/op
Iteration  48: 2.407 s/op
Iteration  49: 2.417 s/op
Iteration  50: 2.412 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.417 ?(99.9%) 0.007 s/op

  Histogram, s/op:
    [2.390, 2.395) = 0 
    [2.395, 2.400) = 1 
    [2.400, 2.405) = 5 
    [2.405, 2.410) = 6 
    [2.410, 2.415) = 16 
    [2.415, 2.420) = 13 
    [2.420, 2.425) = 2 
    [2.425, 2.430) = 3 
    [2.430, 2.435) = 0 
    [2.435, 2.440) = 0 
    [2.440, 2.445) = 1 
    [2.445, 2.450) = 0 
    [2.450, 2.455) = 1 
    [2.455, 2.460) = 0 
    [2.460, 2.465) = 1 
    [2.465, 2.470) = 0 
    [2.470, 2.475) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.399 s/op
     p(50.0000) =      2.413 s/op
     p(90.0000) =      2.429 s/op
     p(95.0000) =      2.457 s/op
     p(99.0000) =      2.475 s/op
     p(99.9000) =      2.475 s/op
     p(99.9900) =      2.475 s/op
     p(99.9990) =      2.475 s/op
     p(99.9999) =      2.475 s/op
    p(100.0000) =      2.475 s/op


# Run complete. Total time: 00:02:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.417 ? 0.007   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot_12.0.2_1565035803183.json
{"wallclock_times": [121.907481203], "core_cycle_counts": [[90827818622], [79332774289], [48017439376], [140265097507]], "aperf_counts": [[90451645729], [79290972628], [47994434318], [140248853271]], "mperf_counts": [[102757520264], [90109864428], [54349983006], [159307556222]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 22:12:05: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-05 22:12:06: INFO] Estimated completion (whole session): 2019-08-06 03:58:34 (5:46:28 from now)
[2019-08-05 22:12:06: INFO] 38 executions left in scheduler queue
[2019-08-05 22:12:06: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-05 22:12:06: INFO] Estimated completion (next execution): 2019-08-05 22:16:29 (0:04:23 from now)
[2019-08-05 22:12:06: INFO] Reboot in preparation for next execution
[2019-08-05 22:16:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 22:16:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 22:16:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 22:16:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 22:16:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 22:17:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.120 s/op
Iteration   2: 1.844 s/op
Iteration   3: 2.027 s/op
Iteration   4: 2.014 s/op
Iteration   5: 2.057 s/op
Iteration   6: 2.168 s/op
Iteration   7: 1.938 s/op
Iteration   8: 1.969 s/op
Iteration   9: 1.977 s/op
Iteration  10: 1.963 s/op
Iteration  11: 1.969 s/op
Iteration  12: 1.965 s/op
Iteration  13: 1.984 s/op
Iteration  14: 1.974 s/op
Iteration  15: 1.961 s/op
Iteration  16: 1.952 s/op
Iteration  17: 1.946 s/op
Iteration  18: 1.944 s/op
Iteration  19: 1.969 s/op
Iteration  20: 1.967 s/op
Iteration  21: 1.964 s/op
Iteration  22: 1.943 s/op
Iteration  23: 1.950 s/op
Iteration  24: 1.962 s/op
Iteration  25: 1.967 s/op
Iteration  26: 1.967 s/op
Iteration  27: 1.949 s/op
Iteration  28: 1.962 s/op
Iteration  29: 1.966 s/op
Iteration  30: 1.972 s/op
Iteration  31: 1.967 s/op
Iteration  32: 1.954 s/op
Iteration  33: 1.951 s/op
Iteration  34: 1.954 s/op
Iteration  35: 1.976 s/op
Iteration  36: 1.948 s/op
Iteration  37: 1.961 s/op
Iteration  38: 1.961 s/op
Iteration  39: 1.964 s/op
Iteration  40: 1.957 s/op
Iteration  41: 1.968 s/op
Iteration  42: 1.960 s/op
Iteration  43: 1.970 s/op
Iteration  44: 1.966 s/op
Iteration  45: 1.949 s/op
Iteration  46: 1.975 s/op
Iteration  47: 1.971 s/op
Iteration  48: 1.956 s/op
Iteration  49: 1.945 s/op
Iteration  50: 1.971 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.971 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 1 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 8 
    [1.950, 1.975) = 32 
    [1.975, 2.000) = 4 
    [2.000, 2.025) = 1 
    [2.025, 2.050) = 1 
    [2.050, 2.075) = 1 
    [2.075, 2.100) = 0 
    [2.100, 2.125) = 1 
    [2.125, 2.150) = 0 
    [2.150, 2.175) = 1 
    [2.175, 2.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.844 s/op
     p(50.0000) =      1.964 s/op
     p(90.0000) =      2.011 s/op
     p(95.0000) =      2.085 s/op
     p(99.0000) =      2.168 s/op
     p(99.9000) =      2.168 s/op
     p(99.9900) =      2.168 s/op
     p(99.9990) =      2.168 s/op
     p(99.9999) =      2.168 s/op
    p(100.0000) =      2.168 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.971 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot_12.0.2_1565036178552.json
{"wallclock_times": [99.51825499400002], "core_cycle_counts": [[68192977495], [47608816374], [119411317279], [91728806288]], "aperf_counts": [[67926650445], [47572132689], [119394187233], [91714078148]], "mperf_counts": [[68426909384], [47610427730], [119478856742], [91809674902]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 22:17:58: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-05 22:17:59: INFO] Estimated completion (whole session): 2019-08-06 04:00:27 (5:42:28 from now)
[2019-08-05 22:17:59: INFO] 37 executions left in scheduler queue
[2019-08-05 22:17:59: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-05 22:17:59: INFO] Estimated completion (next execution): 2019-08-05 22:22:04 (0:04:05 from now)
[2019-08-05 22:17:59: INFO] Reboot in preparation for next execution
[2019-08-05 22:23:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.378 s/op
Iteration   2: 0.854 s/op
Iteration   3: 0.846 s/op
Iteration   4: 0.927 s/op
Iteration   5: 0.843 s/op
Iteration   6: 0.838 s/op
Iteration   7: 0.843 s/op
Iteration   8: 0.838 s/op
Iteration   9: 0.838 s/op
Iteration  10: 0.838 s/op
Iteration  11: 0.838 s/op
Iteration  12: 0.834 s/op
Iteration  13: 0.839 s/op
Iteration  14: 0.837 s/op
Iteration  15: 0.838 s/op
Iteration  16: 0.838 s/op
Iteration  17: 0.835 s/op
Iteration  18: 0.842 s/op
Iteration  19: 0.838 s/op
Iteration  20: 0.843 s/op
Iteration  21: 0.837 s/op
Iteration  22: 0.837 s/op
Iteration  23: 0.837 s/op
Iteration  24: 0.830 s/op
Iteration  25: 0.842 s/op
Iteration  26: 0.839 s/op
Iteration  27: 0.839 s/op
Iteration  28: 0.841 s/op
Iteration  29: 0.839 s/op
Iteration  30: 0.837 s/op
Iteration  31: 0.840 s/op
Iteration  32: 0.837 s/op
Iteration  33: 0.842 s/op
Iteration  34: 0.840 s/op
Iteration  35: 0.837 s/op
Iteration  36: 0.839 s/op
Iteration  37: 0.839 s/op
Iteration  38: 0.839 s/op
Iteration  39: 0.836 s/op
Iteration  40: 0.840 s/op
Iteration  41: 0.842 s/op
Iteration  42: 0.837 s/op
Iteration  43: 0.837 s/op
Iteration  44: 0.833 s/op
Iteration  45: 0.835 s/op
Iteration  46: 0.832 s/op
Iteration  47: 0.835 s/op
Iteration  48: 0.837 s/op
Iteration  49: 0.836 s/op
Iteration  50: 0.838 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      0.851 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [0.800, 0.850) = 47 
    [0.850, 0.900) = 1 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.830 s/op
     p(50.0000) =      0.838 s/op
     p(90.0000) =      0.843 s/op
     p(95.0000) =      0.887 s/op
     p(99.0000) =      1.378 s/op
     p(99.9000) =      1.378 s/op
     p(99.9900) =      1.378 s/op
     p(99.9990) =      1.378 s/op
     p(99.9999) =      1.378 s/op
    p(100.0000) =      1.378 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.851 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_graalvm-ee-19.1.1_1565036537692.json
{"wallclock_times": [43.4727498], "core_cycle_counts": [[55769176885], [46296104960], [15116679866], [32783977840]], "aperf_counts": [[55637777327], [46271406360], [15089292443], [32762576074]], "mperf_counts": [[55658219932], [46275157812], [15089793912], [32769481906]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 22:23:01: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-05 22:23:02: INFO] Estimated completion (whole session): 2019-08-06 04:02:16 (5:39:14 from now)
[2019-08-05 22:23:02: INFO] 36 executions left in scheduler queue
[2019-08-05 22:23:02: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-05 22:23:02: INFO] Estimated completion (next execution): 2019-08-05 22:26:15 (0:03:13 from now)
[2019-08-05 22:23:02: INFO] Reboot in preparation for next execution
[2019-08-05 22:28:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.563 s/op
Iteration   2: 1.173 s/op
Iteration   3: 1.156 s/op
Iteration   4: 1.261 s/op
Iteration   5: 1.150 s/op
Iteration   6: 1.152 s/op
Iteration   7: 1.151 s/op
Iteration   8: 1.154 s/op
Iteration   9: 1.153 s/op
Iteration  10: 1.153 s/op
Iteration  11: 1.151 s/op
Iteration  12: 1.149 s/op
Iteration  13: 1.149 s/op
Iteration  14: 1.151 s/op
Iteration  15: 1.150 s/op
Iteration  16: 1.150 s/op
Iteration  17: 1.149 s/op
Iteration  18: 1.152 s/op
Iteration  19: 1.149 s/op
Iteration  20: 1.148 s/op
Iteration  21: 1.150 s/op
Iteration  22: 1.151 s/op
Iteration  23: 1.151 s/op
Iteration  24: 1.149 s/op
Iteration  25: 1.151 s/op
Iteration  26: 1.152 s/op
Iteration  27: 1.149 s/op
Iteration  28: 1.150 s/op
Iteration  29: 1.150 s/op
Iteration  30: 1.150 s/op
Iteration  31: 1.150 s/op
Iteration  32: 1.149 s/op
Iteration  33: 1.149 s/op
Iteration  34: 1.150 s/op
Iteration  35: 1.148 s/op
Iteration  36: 1.148 s/op
Iteration  37: 1.148 s/op
Iteration  38: 1.148 s/op
Iteration  39: 1.152 s/op
Iteration  40: 1.152 s/op
Iteration  41: 1.152 s/op
Iteration  42: 1.152 s/op
Iteration  43: 1.153 s/op
Iteration  44: 1.153 s/op
Iteration  45: 1.151 s/op
Iteration  46: 1.151 s/op
Iteration  47: 1.150 s/op
Iteration  48: 1.150 s/op
Iteration  49: 1.152 s/op
Iteration  50: 1.151 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.162 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [1.100, 1.150) = 19 
    [1.150, 1.200) = 29 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 1 
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 0 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.148 s/op
     p(50.0000) =      1.151 s/op
     p(90.0000) =      1.154 s/op
     p(95.0000) =      1.213 s/op
     p(99.0000) =      1.563 s/op
     p(99.9000) =      1.563 s/op
     p(99.9900) =      1.563 s/op
     p(99.9990) =      1.563 s/op
     p(99.9999) =      1.563 s/op
    p(100.0000) =      1.563 s/op


# Run complete. Total time: 00:00:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.162 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_graalvm-ee-19.1.1_1565036847634.json
{"wallclock_times": [58.92921098400001], "core_cycle_counts": [[53972603939], [69516420086], [23301256270], [47285274549]], "aperf_counts": [[53834950830], [69498471681], [23286362311], [47271704970]], "mperf_counts": [[53851359560], [69515518490], [23287059120], [47272944076]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 22:28:26: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-05 22:28:27: INFO] Estimated completion (whole session): 2019-08-06 04:04:05 (5:35:38 from now)
[2019-08-05 22:28:27: INFO] 35 executions left in scheduler queue
[2019-08-05 22:28:27: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-08-05 22:28:27: INFO] Estimated completion (next execution): 2019-08-05 22:32:00 (0:03:32 from now)
[2019-08-05 22:28:27: INFO] Reboot in preparation for next execution
[2019-08-05 22:36:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.797 s/op
Iteration   2: 4.694 s/op
Iteration   3: 4.696 s/op
Iteration   4: 4.675 s/op
Iteration   5: 4.690 s/op
Iteration   6: 4.693 s/op
Iteration   7: 4.705 s/op
Iteration   8: 4.704 s/op
Iteration   9: 4.697 s/op
Iteration  10: 4.682 s/op
Iteration  11: 4.685 s/op
Iteration  12: 4.683 s/op
Iteration  13: 4.673 s/op
Iteration  14: 4.697 s/op
Iteration  15: 4.690 s/op
Iteration  16: 4.668 s/op
Iteration  17: 4.702 s/op
Iteration  18: 4.686 s/op
Iteration  19: 4.666 s/op
Iteration  20: 4.676 s/op
Iteration  21: 4.694 s/op
Iteration  22: 4.692 s/op
Iteration  23: 4.698 s/op
Iteration  24: 4.685 s/op
Iteration  25: 4.703 s/op
Iteration  26: 4.685 s/op
Iteration  27: 4.673 s/op
Iteration  28: 4.679 s/op
Iteration  29: 4.697 s/op
Iteration  30: 4.697 s/op
Iteration  31: 4.688 s/op
Iteration  32: 4.691 s/op
Iteration  33: 4.666 s/op
Iteration  34: 4.698 s/op
Iteration  35: 4.672 s/op
Iteration  36: 4.700 s/op
Iteration  37: 4.701 s/op
Iteration  38: 4.697 s/op
Iteration  39: 4.674 s/op
Iteration  40: 4.695 s/op
Iteration  41: 4.698 s/op
Iteration  42: 4.690 s/op
Iteration  43: 4.682 s/op
Iteration  44: 4.705 s/op
Iteration  45: 4.665 s/op
Iteration  46: 4.698 s/op
Iteration  47: 4.681 s/op
Iteration  48: 4.697 s/op
Iteration  49: 4.681 s/op
Iteration  50: 4.684 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      4.690 ?(99.9%) 0.009 s/op

  Histogram, s/op:
    [4.600, 4.613) = 0 
    [4.613, 4.625) = 0 
    [4.625, 4.638) = 0 
    [4.638, 4.650) = 0 
    [4.650, 4.663) = 0 
    [4.663, 4.675) = 8 
    [4.675, 4.688) = 13 
    [4.688, 4.700) = 22 
    [4.700, 4.713) = 6 
    [4.713, 4.725) = 0 
    [4.725, 4.738) = 0 
    [4.738, 4.750) = 0 
    [4.750, 4.763) = 0 
    [4.763, 4.775) = 0 
    [4.775, 4.788) = 0 
    [4.788, 4.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.665 s/op
     p(50.0000) =      4.690 s/op
     p(90.0000) =      4.703 s/op
     p(95.0000) =      4.705 s/op
     p(99.0000) =      4.797 s/op
     p(99.9000) =      4.797 s/op
     p(99.9900) =      4.797 s/op
     p(99.9990) =      4.797 s/op
     p(99.9999) =      4.797 s/op
    p(100.0000) =      4.797 s/op


# Run complete. Total time: 00:03:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  4.690 ? 0.009   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_graalvm-ce-19.1.1_1565037158670.json
{"wallclock_times": [235.44565013800002], "core_cycle_counts": [[219592974382], [171442781114], [200638054833], [171302473928]], "aperf_counts": [[219055199542], [171379968116], [200599919174], [171269648974]], "mperf_counts": [[219084726580], [171382030122], [200601549766], [171292794972]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-05 22:36:34: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-08-05 22:36:35: INFO] Estimated completion (whole session): 2019-08-06 04:05:51 (5:29:16 from now)
[2019-08-05 22:36:35: INFO] 34 executions left in scheduler queue
[2019-08-05 22:36:35: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-08-05 22:36:35: INFO] Estimated completion (next execution): 2019-08-05 22:42:58 (0:06:23 from now)
[2019-08-05 22:36:35: INFO] Reboot in preparation for next execution
[2019-08-05 22:41:08: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 22:41:08: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 22:41:08: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 22:41:08: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 22:41:08: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 22:45:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.851 s/op
Iteration   2: 5.863 s/op
Iteration   3: 5.586 s/op
Iteration   4: 5.503 s/op
Iteration   5: 5.503 s/op
Iteration   6: 5.505 s/op
Iteration   7: 5.501 s/op
Iteration   8: 5.505 s/op
Iteration   9: 5.503 s/op
Iteration  10: 5.510 s/op
Iteration  11: 5.512 s/op
Iteration  12: 5.504 s/op
Iteration  13: 5.504 s/op
Iteration  14: 5.502 s/op
Iteration  15: 5.503 s/op
Iteration  16: 5.505 s/op
Iteration  17: 5.507 s/op
Iteration  18: 5.514 s/op
Iteration  19: 5.503 s/op
Iteration  20: 5.504 s/op
Iteration  21: 5.503 s/op
Iteration  22: 5.510 s/op
Iteration  23: 5.503 s/op
Iteration  24: 5.505 s/op
Iteration  25: 5.505 s/op
Iteration  26: 5.501 s/op
Iteration  27: 5.503 s/op
Iteration  28: 5.502 s/op
Iteration  29: 5.504 s/op
Iteration  30: 5.500 s/op
Iteration  31: 5.504 s/op
Iteration  32: 5.500 s/op
Iteration  33: 5.500 s/op
Iteration  34: 5.504 s/op
Iteration  35: 5.509 s/op
Iteration  36: 5.504 s/op
Iteration  37: 5.500 s/op
Iteration  38: 5.508 s/op
Iteration  39: 5.507 s/op
Iteration  40: 5.502 s/op
Iteration  41: 5.506 s/op
Iteration  42: 5.506 s/op
Iteration  43: 5.505 s/op
Iteration  44: 5.502 s/op
Iteration  45: 5.499 s/op
Iteration  46: 5.501 s/op
Iteration  47: 5.501 s/op
Iteration  48: 5.504 s/op
Iteration  49: 5.502 s/op
Iteration  50: 5.502 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      5.520 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 2 
    [5.500, 5.550) = 45 
    [5.550, 5.600) = 1 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 0 
    [5.800, 5.850) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.499 s/op
     p(50.0000) =      5.504 s/op
     p(90.0000) =      5.512 s/op
     p(95.0000) =      5.705 s/op
     p(99.0000) =      5.863 s/op
     p(99.9000) =      5.863 s/op
     p(99.9900) =      5.863 s/op
     p(99.9990) =      5.863 s/op
     p(99.9999) =      5.863 s/op
    p(100.0000) =      5.863 s/op


# Run complete. Total time: 00:04:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.520 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot_12.0.2_1565037668293.json
{"wallclock_times": [276.99086044899997], "core_cycle_counts": [[116539945895], [135719617208], [565134970650], [76951389751]], "aperf_counts": [[115737808232], [135667645849], [565112804592], [76893902568]], "mperf_counts": [[116047696962], [135825281026], [565356086914], [76946388266]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-05 22:45:45: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-08-05 22:45:46: INFO] Estimated completion (whole session): 2019-08-06 04:07:57 (5:22:11 from now)
[2019-08-05 22:45:46: INFO] 33 executions left in scheduler queue
[2019-08-05 22:45:46: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-08-05 22:45:46: INFO] Estimated completion (next execution): 2019-08-05 22:52:52 (0:07:06 from now)
[2019-08-05 22:45:46: INFO] Reboot in preparation for next execution
[2019-08-05 22:49:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 22:49:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 22:49:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 22:49:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 22:49:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 22:49:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 23:05:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.706 s/op
Iteration   2: 18.319 s/op
Iteration   3: 19.319 s/op
Iteration   4: 19.024 s/op
Iteration   5: 18.972 s/op
Iteration   6: 18.953 s/op
Iteration   7: 18.906 s/op
Iteration   8: 18.922 s/op
Iteration   9: 18.954 s/op
Iteration  10: 18.944 s/op
Iteration  11: 18.922 s/op
Iteration  12: 18.954 s/op
Iteration  13: 18.958 s/op
Iteration  14: 18.979 s/op
Iteration  15: 18.934 s/op
Iteration  16: 18.942 s/op
Iteration  17: 18.916 s/op
Iteration  18: 18.930 s/op
Iteration  19: 18.924 s/op
Iteration  20: 18.892 s/op
Iteration  21: 18.937 s/op
Iteration  22: 18.959 s/op
Iteration  23: 18.967 s/op
Iteration  24: 18.957 s/op
Iteration  25: 18.933 s/op
Iteration  26: 18.947 s/op
Iteration  27: 18.919 s/op
Iteration  28: 18.940 s/op
Iteration  29: 18.904 s/op
Iteration  30: 18.950 s/op
Iteration  31: 18.941 s/op
Iteration  32: 18.908 s/op
Iteration  33: 18.945 s/op
Iteration  34: 18.907 s/op
Iteration  35: 18.891 s/op
Iteration  36: 18.897 s/op
Iteration  37: 18.919 s/op
Iteration  38: 18.880 s/op
Iteration  39: 18.940 s/op
Iteration  40: 18.925 s/op
Iteration  41: 19.019 s/op
Iteration  42: 18.985 s/op
Iteration  43: 18.954 s/op
Iteration  44: 18.937 s/op
Iteration  45: 18.930 s/op
Iteration  46: 18.871 s/op
Iteration  47: 18.952 s/op
Iteration  48: 18.972 s/op
Iteration  49: 18.910 s/op
Iteration  50: 18.926 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     18.948 ?(99.9%) 0.076 s/op

  Histogram, s/op:
    [18.000, 18.125) = 0 
    [18.125, 18.250) = 0 
    [18.250, 18.375) = 1 
    [18.375, 18.500) = 0 
    [18.500, 18.625) = 0 
    [18.625, 18.750) = 0 
    [18.750, 18.875) = 1 
    [18.875, 19.000) = 44 
    [19.000, 19.125) = 2 
    [19.125, 19.250) = 0 
    [19.250, 19.375) = 1 
    [19.375, 19.500) = 0 
    [19.500, 19.625) = 0 
    [19.625, 19.750) = 1 
    [19.750, 19.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     18.319 s/op
     p(50.0000) =     18.938 s/op
     p(90.0000) =     18.984 s/op
     p(95.0000) =     19.157 s/op
     p(99.0000) =     19.706 s/op
     p(99.9000) =     19.706 s/op
     p(99.9900) =     19.706 s/op
     p(99.9990) =     19.706 s/op
     p(99.9999) =     19.706 s/op
    p(100.0000) =     19.706 s/op


# Run complete. Total time: 00:15:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  18.948 ? 0.076   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9_12.0.1_1565038198397.json
{"wallclock_times": [948.947517571], "core_cycle_counts": [[716555420996], [367541863275], [574284464626], [1419101627585]], "aperf_counts": [[713990148450], [367319121611], [574124161001], [1418930409551]], "mperf_counts": [[714005908158], [367319364914], [574131793384], [1418930427304]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 23:05:47: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-08-05 23:05:48: INFO] Estimated completion (whole session): 2019-08-06 04:10:07 (5:04:19 from now)
[2019-08-05 23:05:48: INFO] 32 executions left in scheduler queue
[2019-08-05 23:05:48: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-08-05 23:05:48: INFO] Estimated completion (next execution): 2019-08-05 23:23:54 (0:18:05 from now)
[2019-08-05 23:05:48: INFO] Reboot in preparation for next execution
[2019-08-05 23:09:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 23:09:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 23:09:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 23:09:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 23:09:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 23:09:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 23:23:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.989 s/op
Iteration   2: 16.517 s/op
Iteration   3: 16.801 s/op
Iteration   4: 17.209 s/op
Iteration   5: 17.231 s/op
Iteration   6: 17.284 s/op
Iteration   7: 17.109 s/op
Iteration   8: 17.282 s/op
Iteration   9: 17.076 s/op
Iteration  10: 15.911 s/op
Iteration  11: 17.245 s/op
Iteration  12: 17.095 s/op
Iteration  13: 17.225 s/op
Iteration  14: 17.016 s/op
Iteration  15: 17.263 s/op
Iteration  16: 17.353 s/op
Iteration  17: 16.320 s/op
Iteration  18: 17.199 s/op
Iteration  19: 17.061 s/op
Iteration  20: 17.187 s/op
Iteration  21: 17.272 s/op
Iteration  22: 17.020 s/op
Iteration  23: 17.102 s/op
Iteration  24: 17.388 s/op
Iteration  25: 17.344 s/op
Iteration  26: 16.526 s/op
Iteration  27: 17.298 s/op
Iteration  28: 16.822 s/op
Iteration  29: 17.468 s/op
Iteration  30: 17.202 s/op
Iteration  31: 17.229 s/op
Iteration  32: 17.302 s/op
Iteration  33: 17.328 s/op
Iteration  34: 16.718 s/op
Iteration  35: 17.261 s/op
Iteration  36: 16.553 s/op
Iteration  37: 17.626 s/op
Iteration  38: 17.258 s/op
Iteration  39: 17.417 s/op
Iteration  40: 17.439 s/op
Iteration  41: 16.120 s/op
Iteration  42: 17.069 s/op
Iteration  43: 17.323 s/op
Iteration  44: 17.287 s/op
Iteration  45: 16.659 s/op
Iteration  46: 16.452 s/op
Iteration  47: 16.505 s/op
Iteration  48: 17.172 s/op
Iteration  49: 16.793 s/op
Iteration  50: 16.348 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.033 ?(99.9%) 0.188 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 3 
    [16.500, 16.750) = 6 
    [16.750, 17.000) = 4 
    [17.000, 17.250) = 17 
    [17.250, 17.500) = 17 
    [17.500, 17.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.911 s/op
     p(50.0000) =     17.193 s/op
     p(90.0000) =     17.384 s/op
     p(95.0000) =     17.452 s/op
     p(99.0000) =     17.626 s/op
     p(99.9000) =     17.626 s/op
     p(99.9900) =     17.626 s/op
     p(99.9990) =     17.626 s/op
     p(99.9999) =     17.626 s/op
    p(100.0000) =     17.626 s/op


# Run complete. Total time: 00:14:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.033 ? 0.188   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9_12.0.1_1565039382360.json
{"wallclock_times": [853.4659711999999], "core_cycle_counts": [[452923321398], [575135438010], [1062097365751], [970629065813]], "aperf_counts": [[450402972538], [574970791264], [1061958510245], [970506653974]], "mperf_counts": [[450407657636], [574970852502], [1061958673696], [970506720910]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 23:23:55: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-08-05 23:23:56: INFO] Estimated completion (whole session): 2019-08-06 04:11:45 (4:47:49 from now)
[2019-08-05 23:23:56: INFO] 31 executions left in scheduler queue
[2019-08-05 23:23:56: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-05 23:23:56: INFO] Estimated completion (next execution): 2019-08-05 23:40:33 (0:16:37 from now)
[2019-08-05 23:23:56: INFO] Reboot in preparation for next execution
[2019-08-05 23:28:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 23:28:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 23:28:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 23:28:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 23:28:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 23:28:08: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 23:33:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.842 s/op
Iteration   2: 7.246 s/op
Iteration   3: 6.805 s/op
Iteration   4: 6.813 s/op
Iteration   5: 6.783 s/op
Iteration   6: 6.828 s/op
Iteration   7: 6.813 s/op
Iteration   8: 6.666 s/op
Iteration   9: 6.728 s/op
Iteration  10: 6.647 s/op
Iteration  11: 6.789 s/op
Iteration  12: 6.741 s/op
Iteration  13: 6.791 s/op
Iteration  14: 6.978 s/op
Iteration  15: 6.833 s/op
Iteration  16: 6.695 s/op
Iteration  17: 6.910 s/op
Iteration  18: 6.999 s/op
Iteration  19: 6.819 s/op
Iteration  20: 6.864 s/op
Iteration  21: 6.869 s/op
Iteration  22: 6.809 s/op
Iteration  23: 7.081 s/op
Iteration  24: 6.840 s/op
Iteration  25: 6.765 s/op
Iteration  26: 6.728 s/op
Iteration  27: 6.941 s/op
Iteration  28: 6.717 s/op
Iteration  29: 6.825 s/op
Iteration  30: 6.739 s/op
Iteration  31: 6.673 s/op
Iteration  32: 6.830 s/op
Iteration  33: 6.774 s/op
Iteration  34: 6.764 s/op
Iteration  35: 6.876 s/op
Iteration  36: 6.745 s/op
Iteration  37: 6.765 s/op
Iteration  38: 6.705 s/op
Iteration  39: 6.701 s/op
Iteration  40: 6.825 s/op
Iteration  41: 6.678 s/op
Iteration  42: 6.740 s/op
Iteration  43: 6.736 s/op
Iteration  44: 6.689 s/op
Iteration  45: 6.796 s/op
Iteration  46: 6.932 s/op
Iteration  47: 6.753 s/op
Iteration  48: 6.701 s/op
Iteration  49: 6.658 s/op
Iteration  50: 6.908 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.843 ?(99.9%) 0.153 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 18 
    [6.750, 7.000) = 29 
    [7.000, 7.250) = 2 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.647 s/op
     p(50.0000) =      6.790 s/op
     p(90.0000) =      6.974 s/op
     p(95.0000) =      7.155 s/op
     p(99.0000) =      8.842 s/op
     p(99.9000) =      8.842 s/op
     p(99.9900) =      8.842 s/op
     p(99.9990) =      8.842 s/op
     p(99.9999) =      8.842 s/op
    p(100.0000) =      8.842 s/op


# Run complete. Total time: 00:05:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.843 ? 0.153   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9_12.0.1_1565040487879.json
{"wallclock_times": [344.049285558], "core_cycle_counts": [[270126406156], [297718940078], [331923277876], [283866123816]], "aperf_counts": [[269214393756], [297592122757], [331811750315], [283779016064]], "mperf_counts": [[269231594556], [297592212966], [331811785656], [283779072144]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 23:33:51: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-05 23:33:52: INFO] Estimated completion (whole session): 2019-08-06 04:13:15 (4:39:22 from now)
[2019-08-05 23:33:52: INFO] 30 executions left in scheduler queue
[2019-08-05 23:33:52: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-05 23:33:52: INFO] Estimated completion (next execution): 2019-08-05 23:42:13 (0:08:20 from now)
[2019-08-05 23:33:52: INFO] Reboot in preparation for next execution
[2019-08-05 23:38:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 23:38:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 23:38:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 23:38:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 23:38:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 23:38:05: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 23:47:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.749 s/op
Iteration   2: 11.139 s/op
Iteration   3: 11.208 s/op
Iteration   4: 11.232 s/op
Iteration   5: 11.198 s/op
Iteration   6: 11.243 s/op
Iteration   7: 11.172 s/op
Iteration   8: 11.167 s/op
Iteration   9: 11.113 s/op
Iteration  10: 11.078 s/op
Iteration  11: 11.137 s/op
Iteration  12: 11.187 s/op
Iteration  13: 11.131 s/op
Iteration  14: 11.127 s/op
Iteration  15: 11.140 s/op
Iteration  16: 11.116 s/op
Iteration  17: 11.154 s/op
Iteration  18: 11.124 s/op
Iteration  19: 11.131 s/op
Iteration  20: 11.148 s/op
Iteration  21: 11.118 s/op
Iteration  22: 11.147 s/op
Iteration  23: 11.074 s/op
Iteration  24: 11.063 s/op
Iteration  25: 11.121 s/op
Iteration  26: 11.142 s/op
Iteration  27: 11.181 s/op
Iteration  28: 11.072 s/op
Iteration  29: 11.118 s/op
Iteration  30: 11.068 s/op
Iteration  31: 11.059 s/op
Iteration  32: 11.084 s/op
Iteration  33: 11.138 s/op
Iteration  34: 11.130 s/op
Iteration  35: 11.094 s/op
Iteration  36: 11.073 s/op
Iteration  37: 11.159 s/op
Iteration  38: 11.142 s/op
Iteration  39: 11.087 s/op
Iteration  40: 11.101 s/op
Iteration  41: 11.063 s/op
Iteration  42: 11.129 s/op
Iteration  43: 11.108 s/op
Iteration  44: 11.069 s/op
Iteration  45: 11.092 s/op
Iteration  46: 11.052 s/op
Iteration  47: 11.123 s/op
Iteration  48: 11.126 s/op
Iteration  49: 11.058 s/op
Iteration  50: 11.073 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.155 ?(99.9%) 0.116 s/op

  Histogram, s/op:
    [11.000, 11.125) = 25 
    [11.125, 11.250) = 24 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 
    [11.875, 12.000) = 0 
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 1 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.052 s/op
     p(50.0000) =     11.125 s/op
     p(90.0000) =     11.197 s/op
     p(95.0000) =     11.237 s/op
     p(99.0000) =     12.749 s/op
     p(99.9000) =     12.749 s/op
     p(99.9900) =     12.749 s/op
     p(99.9990) =     12.749 s/op
     p(99.9999) =     12.749 s/op
    p(100.0000) =     12.749 s/op


# Run complete. Total time: 00:09:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.155 ? 0.116   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9_12.0.1_1565041084936.json
{"wallclock_times": [559.4255139649999], "core_cycle_counts": [[392106482589], [415608567831], [539996162518], [600497765813]], "aperf_counts": [[390612990739], [415472275157], [539881415783], [600417905810]], "mperf_counts": [[390622205472], [415472331242], [539881584618], [600417895708]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 23:47:24: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-05 23:47:25: INFO] Estimated completion (whole session): 2019-08-06 04:15:22 (4:27:57 from now)
[2019-08-05 23:47:25: INFO] 29 executions left in scheduler queue
[2019-08-05 23:47:25: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-05 23:47:25: INFO] Estimated completion (next execution): 2019-08-05 23:59:02 (0:11:37 from now)
[2019-08-05 23:47:25: INFO] Reboot in preparation for next execution
[2019-08-05 23:51:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-05 23:51:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-05 23:51:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-05 23:51:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-05 23:51:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-05 23:51:37: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-05 23:57:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.189 s/op
Iteration   2: 6.773 s/op
Iteration   3: 6.574 s/op
Iteration   4: 6.637 s/op
Iteration   5: 6.681 s/op
Iteration   6: 6.522 s/op
Iteration   7: 6.473 s/op
Iteration   8: 6.503 s/op
Iteration   9: 6.466 s/op
Iteration  10: 6.484 s/op
Iteration  11: 6.503 s/op
Iteration  12: 6.472 s/op
Iteration  13: 6.478 s/op
Iteration  14: 6.532 s/op
Iteration  15: 6.507 s/op
Iteration  16: 6.465 s/op
Iteration  17: 6.449 s/op
Iteration  18: 6.447 s/op
Iteration  19: 6.462 s/op
Iteration  20: 6.470 s/op
Iteration  21: 6.469 s/op
Iteration  22: 6.487 s/op
Iteration  23: 6.500 s/op
Iteration  24: 6.513 s/op
Iteration  25: 6.418 s/op
Iteration  26: 6.411 s/op
Iteration  27: 6.404 s/op
Iteration  28: 6.447 s/op
Iteration  29: 6.550 s/op
Iteration  30: 6.648 s/op
Iteration  31: 6.513 s/op
Iteration  32: 6.436 s/op
Iteration  33: 6.456 s/op
Iteration  34: 6.434 s/op
Iteration  35: 6.475 s/op
Iteration  36: 6.488 s/op
Iteration  37: 6.508 s/op
Iteration  38: 6.491 s/op
Iteration  39: 6.482 s/op
Iteration  40: 6.472 s/op
Iteration  41: 6.447 s/op
Iteration  42: 6.486 s/op
Iteration  43: 6.470 s/op
Iteration  44: 6.502 s/op
Iteration  45: 6.440 s/op
Iteration  46: 6.427 s/op
Iteration  47: 6.489 s/op
Iteration  48: 6.445 s/op
Iteration  49: 6.468 s/op
Iteration  50: 6.472 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.527 ?(99.9%) 0.123 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 33 
    [6.500, 6.750) = 15 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.404 s/op
     p(50.0000) =      6.477 s/op
     p(90.0000) =      6.631 s/op
     p(95.0000) =      6.722 s/op
     p(99.0000) =      8.189 s/op
     p(99.9000) =      8.189 s/op
     p(99.9900) =      8.189 s/op
     p(99.9990) =      8.189 s/op
     p(99.9999) =      8.189 s/op
    p(100.0000) =      8.189 s/op


# Run complete. Total time: 00:05:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.527 ? 0.123   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9_12.0.1_1565041897354.json
{"wallclock_times": [328.315312988], "core_cycle_counts": [[363340088333], [290823909578], [221264648719], [355007177467]], "aperf_counts": [[362504258748], [290663196366], [221109830597], [354893671945]], "mperf_counts": [[362508748430], [290664308372], [221109806608], [354893671042]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-05 23:57:05: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-05 23:57:06: INFO] Estimated completion (whole session): 2019-08-06 04:17:09 (4:20:02 from now)
[2019-08-05 23:57:06: INFO] 28 executions left in scheduler queue
[2019-08-05 23:57:06: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-05 23:57:06: INFO] Estimated completion (next execution): 2019-08-06 00:05:03 (0:07:56 from now)
[2019-08-05 23:57:06: INFO] Reboot in preparation for next execution
[2019-08-06 00:01:28: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 00:01:28: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 00:01:28: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 00:01:28: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 00:01:28: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 00:01:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-06 00:16:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.215 s/op
Iteration   2: 17.570 s/op
Iteration   3: 17.653 s/op
Iteration   4: 17.608 s/op
Iteration   5: 17.581 s/op
Iteration   6: 17.545 s/op
Iteration   7: 17.523 s/op
Iteration   8: 17.454 s/op
Iteration   9: 17.489 s/op
Iteration  10: 17.543 s/op
Iteration  11: 17.474 s/op
Iteration  12: 17.529 s/op
Iteration  13: 17.431 s/op
Iteration  14: 17.534 s/op
Iteration  15: 17.585 s/op
Iteration  16: 17.462 s/op
Iteration  17: 17.576 s/op
Iteration  18: 17.479 s/op
Iteration  19: 17.487 s/op
Iteration  20: 17.639 s/op
Iteration  21: 17.514 s/op
Iteration  22: 17.516 s/op
Iteration  23: 17.516 s/op
Iteration  24: 17.497 s/op
Iteration  25: 17.595 s/op
Iteration  26: 17.506 s/op
Iteration  27: 17.456 s/op
Iteration  28: 17.556 s/op
Iteration  29: 17.543 s/op
Iteration  30: 17.577 s/op
Iteration  31: 17.460 s/op
Iteration  32: 17.538 s/op
Iteration  33: 17.541 s/op
Iteration  34: 17.477 s/op
Iteration  35: 17.534 s/op
Iteration  36: 17.517 s/op
Iteration  37: 17.567 s/op
Iteration  38: 17.535 s/op
Iteration  39: 17.444 s/op
Iteration  40: 17.563 s/op
Iteration  41: 17.486 s/op
Iteration  42: 17.515 s/op
Iteration  43: 17.597 s/op
Iteration  44: 17.441 s/op
Iteration  45: 17.449 s/op
Iteration  46: 17.532 s/op
Iteration  47: 17.475 s/op
Iteration  48: 17.540 s/op
Iteration  49: 17.504 s/op
Iteration  50: 17.495 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.517 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [17.200, 17.250) = 1 
    [17.250, 17.300) = 0 
    [17.300, 17.350) = 0 
    [17.350, 17.400) = 0 
    [17.400, 17.450) = 4 
    [17.450, 17.500) = 13 
    [17.500, 17.550) = 19 
    [17.550, 17.600) = 10 
    [17.600, 17.650) = 2 

  Percentiles, s/op:
      p(0.0000) =     17.215 s/op
     p(50.0000) =     17.520 s/op
     p(90.0000) =     17.594 s/op
     p(95.0000) =     17.622 s/op
     p(99.0000) =     17.653 s/op
     p(99.9000) =     17.653 s/op
     p(99.9900) =     17.653 s/op
     p(99.9990) =     17.653 s/op
     p(99.9999) =     17.653 s/op
    p(100.0000) =     17.653 s/op


# Run complete. Total time: 00:14:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.517 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9_12.0.1_1565042488808.json
{"wallclock_times": [877.560680929], "core_cycle_counts": [[742017991656], [712499318858], [669756229230], [726381379875]], "aperf_counts": [[739804256550], [712320098046], [669584499256], [726209268627]], "mperf_counts": [[739808509548], [712320166394], [669585464442], [726209220094]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 00:16:06: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-06 00:16:07: INFO] Estimated completion (whole session): 2019-08-06 04:15:13 (3:59:06 from now)
[2019-08-06 00:16:07: INFO] 27 executions left in scheduler queue
[2019-08-06 00:16:07: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-06 00:16:07: INFO] Estimated completion (next execution): 2019-08-06 00:35:09 (0:19:02 from now)
[2019-08-06 00:16:07: INFO] Reboot in preparation for next execution
[2019-08-06 00:19:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 00:19:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 00:19:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 00:19:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 00:19:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 00:21:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.293 s/op
Iteration   2: 2.137 s/op
Iteration   3: 2.028 s/op
Iteration   4: 1.860 s/op
Iteration   5: 1.999 s/op
Iteration   6: 1.998 s/op
Iteration   7: 2.012 s/op
Iteration   8: 1.991 s/op
Iteration   9: 1.989 s/op
Iteration  10: 1.961 s/op
Iteration  11: 1.919 s/op
Iteration  12: 1.981 s/op
Iteration  13: 1.977 s/op
Iteration  14: 1.960 s/op
Iteration  15: 1.988 s/op
Iteration  16: 1.980 s/op
Iteration  17: 1.976 s/op
Iteration  18: 1.977 s/op
Iteration  19: 1.980 s/op
Iteration  20: 1.980 s/op
Iteration  21: 1.971 s/op
Iteration  22: 1.975 s/op
Iteration  23: 1.971 s/op
Iteration  24: 1.975 s/op
Iteration  25: 1.976 s/op
Iteration  26: 1.977 s/op
Iteration  27: 1.983 s/op
Iteration  28: 1.977 s/op
Iteration  29: 1.969 s/op
Iteration  30: 1.982 s/op
Iteration  31: 1.981 s/op
Iteration  32: 1.981 s/op
Iteration  33: 1.978 s/op
Iteration  34: 1.980 s/op
Iteration  35: 1.977 s/op
Iteration  36: 1.977 s/op
Iteration  37: 1.970 s/op
Iteration  38: 1.788 s/op
Iteration  39: 1.980 s/op
Iteration  40: 1.977 s/op
Iteration  41: 1.968 s/op
Iteration  42: 1.979 s/op
Iteration  43: 1.976 s/op
Iteration  44: 1.976 s/op
Iteration  45: 1.971 s/op
Iteration  46: 1.975 s/op
Iteration  47: 1.970 s/op
Iteration  48: 1.976 s/op
Iteration  49: 1.978 s/op
Iteration  50: 1.976 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.982 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 43 
    [2.000, 2.050) = 2 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.788 s/op
     p(50.0000) =      1.977 s/op
     p(90.0000) =      1.999 s/op
     p(95.0000) =      2.077 s/op
     p(99.0000) =      2.293 s/op
     p(99.9000) =      2.293 s/op
     p(99.9900) =      2.293 s/op
     p(99.9990) =      2.293 s/op
     p(99.9999) =      2.293 s/op
    p(100.0000) =      2.293 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.982 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot_11.0.4_1565043577002.json
{"wallclock_times": [100.17628680600004], "core_cycle_counts": [[48777436104], [54648649378], [96196396639], [100334084067]], "aperf_counts": [[48431291668], [54616748572], [96175754914], [100317226383]], "mperf_counts": [[54654106074], [61415767996], [108999761218], [112651220366]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 00:21:17: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-06 00:21:18: INFO] Estimated completion (whole session): 2019-08-06 04:16:03 (3:54:45 from now)
[2019-08-06 00:21:18: INFO] 26 executions left in scheduler queue
[2019-08-06 00:21:18: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-06 00:21:18: INFO] Estimated completion (next execution): 2019-08-06 00:25:33 (0:04:15 from now)
[2019-08-06 00:21:18: INFO] Reboot in preparation for next execution
[2019-08-06 00:25:43: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 00:25:43: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 00:25:43: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 00:25:43: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 00:25:43: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 00:27:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.456 s/op
Iteration   2: 2.771 s/op
Iteration   3: 2.732 s/op
Iteration   4: 2.982 s/op
Iteration   5: 2.625 s/op
Iteration   6: 2.627 s/op
Iteration   7: 2.612 s/op
Iteration   8: 2.611 s/op
Iteration   9: 2.617 s/op
Iteration  10: 2.611 s/op
Iteration  11: 2.612 s/op
Iteration  12: 2.611 s/op
Iteration  13: 2.615 s/op
Iteration  14: 2.609 s/op
Iteration  15: 2.621 s/op
Iteration  16: 2.611 s/op
Iteration  17: 2.607 s/op
Iteration  18: 2.612 s/op
Iteration  19: 2.609 s/op
Iteration  20: 2.607 s/op
Iteration  21: 2.611 s/op
Iteration  22: 2.609 s/op
Iteration  23: 2.614 s/op
Iteration  24: 2.615 s/op
Iteration  25: 2.608 s/op
Iteration  26: 2.608 s/op
Iteration  27: 2.608 s/op
Iteration  28: 2.607 s/op
Iteration  29: 2.611 s/op
Iteration  30: 2.611 s/op
Iteration  31: 2.608 s/op
Iteration  32: 2.609 s/op
Iteration  33: 2.608 s/op
Iteration  34: 2.608 s/op
Iteration  35: 2.611 s/op
Iteration  36: 2.613 s/op
Iteration  37: 2.620 s/op
Iteration  38: 2.610 s/op
Iteration  39: 2.609 s/op
Iteration  40: 2.610 s/op
Iteration  41: 2.608 s/op
Iteration  42: 2.608 s/op
Iteration  43: 2.614 s/op
Iteration  44: 2.609 s/op
Iteration  45: 2.613 s/op
Iteration  46: 2.614 s/op
Iteration  47: 2.609 s/op
Iteration  48: 2.615 s/op
Iteration  49: 2.615 s/op
Iteration  50: 2.611 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.622 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 46 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 1 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.456 s/op
     p(50.0000) =      2.611 s/op
     p(90.0000) =      2.625 s/op
     p(95.0000) =      2.749 s/op
     p(99.0000) =      2.982 s/op
     p(99.9000) =      2.982 s/op
     p(99.9900) =      2.982 s/op
     p(99.9990) =      2.982 s/op
     p(99.9999) =      2.982 s/op
    p(100.0000) =      2.982 s/op


# Run complete. Total time: 00:02:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.622 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot_11.0.4_1565043943740.json
{"wallclock_times": [132.11272847100003], "core_cycle_counts": [[66219778590], [120920105981], [179924707299], [65427736457]], "aperf_counts": [[65838897025], [120885459752], [179905930158], [65405255746]], "mperf_counts": [[66189219236], [120919891470], [179966644262], [65468130870]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 00:27:55: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-06 00:27:56: INFO] Estimated completion (whole session): 2019-08-06 04:18:22 (3:50:25 from now)
[2019-08-06 00:27:56: INFO] 25 executions left in scheduler queue
[2019-08-06 00:27:56: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-08-06 00:27:56: INFO] Estimated completion (next execution): 2019-08-06 00:32:27 (0:04:30 from now)
[2019-08-06 00:27:56: INFO] Reboot in preparation for next execution
[2019-08-06 00:32:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 00:32:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 00:32:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 00:32:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 00:32:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 00:32:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-06 00:47:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.627 s/op
Iteration   2: 18.173 s/op
Iteration   3: 18.173 s/op
Iteration   4: 18.383 s/op
Iteration   5: 17.423 s/op
Iteration   6: 18.347 s/op
Iteration   7: 18.483 s/op
Iteration   8: 18.419 s/op
Iteration   9: 18.116 s/op
Iteration  10: 18.013 s/op
Iteration  11: 18.408 s/op
Iteration  12: 17.989 s/op
Iteration  13: 17.987 s/op
Iteration  14: 18.283 s/op
Iteration  15: 18.267 s/op
Iteration  16: 18.046 s/op
Iteration  17: 18.330 s/op
Iteration  18: 18.148 s/op
Iteration  19: 18.118 s/op
Iteration  20: 18.315 s/op
Iteration  21: 18.120 s/op
Iteration  22: 17.914 s/op
Iteration  23: 18.367 s/op
Iteration  24: 18.354 s/op
Iteration  25: 18.157 s/op
Iteration  26: 18.285 s/op
Iteration  27: 17.830 s/op
Iteration  28: 16.730 s/op
Iteration  29: 16.856 s/op
Iteration  30: 17.535 s/op
Iteration  31: 17.636 s/op
Iteration  32: 16.992 s/op
Iteration  33: 18.320 s/op
Iteration  34: 18.391 s/op
Iteration  35: 18.823 s/op
Iteration  36: 18.774 s/op
Iteration  37: 17.986 s/op
Iteration  38: 18.490 s/op
Iteration  39: 18.480 s/op
Iteration  40: 18.574 s/op
Iteration  41: 18.298 s/op
Iteration  42: 16.894 s/op
Iteration  43: 18.796 s/op
Iteration  44: 18.452 s/op
Iteration  45: 18.076 s/op
Iteration  46: 18.966 s/op
Iteration  47: 18.634 s/op
Iteration  48: 18.541 s/op
Iteration  49: 18.604 s/op
Iteration  50: 17.631 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     18.131 ?(99.9%) 0.247 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 3 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 1 
    [17.500, 17.750) = 4 
    [17.750, 18.000) = 5 
    [18.000, 18.250) = 10 
    [18.250, 18.500) = 18 
    [18.500, 18.750) = 4 

  Percentiles, s/op:
      p(0.0000) =     16.730 s/op
     p(50.0000) =     18.275 s/op
     p(90.0000) =     18.631 s/op
     p(95.0000) =     18.808 s/op
     p(99.0000) =     18.966 s/op
     p(99.9000) =     18.966 s/op
     p(99.9900) =     18.966 s/op
     p(99.9990) =     18.966 s/op
     p(99.9999) =     18.966 s/op
    p(100.0000) =     18.966 s/op


# Run complete. Total time: 00:15:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  18.131 ? 0.247   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9_11.0.4_1565044327668.json
{"wallclock_times": [908.355322198], "core_cycle_counts": [[559059794664], [762998722786], [902756405381], [1020079028083]], "aperf_counts": [[556484976429], [762847091174], [902572923452], [1019927239449]], "mperf_counts": [[556494757658], [762848130958], [902573134742], [1019927294650]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 00:47:16: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-08-06 00:47:16: INFO] Estimated completion (whole session): 2019-08-06 04:20:07 (3:32:50 from now)
[2019-08-06 00:47:16: INFO] 24 executions left in scheduler queue
[2019-08-06 00:47:16: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-08-06 00:47:16: INFO] Estimated completion (next execution): 2019-08-06 01:04:54 (0:17:37 from now)
[2019-08-06 00:47:16: INFO] Reboot in preparation for next execution
[2019-08-06 00:51:28: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 00:51:28: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 00:51:28: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 00:51:28: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 00:51:28: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 00:56:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.736 s/op
Iteration   2: 6.873 s/op
Iteration   3: 6.421 s/op
Iteration   4: 6.468 s/op
Iteration   5: 6.471 s/op
Iteration   6: 6.468 s/op
Iteration   7: 6.470 s/op
Iteration   8: 6.469 s/op
Iteration   9: 6.468 s/op
Iteration  10: 6.483 s/op
Iteration  11: 6.468 s/op
Iteration  12: 6.469 s/op
Iteration  13: 6.475 s/op
Iteration  14: 6.467 s/op
Iteration  15: 6.475 s/op
Iteration  16: 6.488 s/op
Iteration  17: 6.482 s/op
Iteration  18: 6.469 s/op
Iteration  19: 6.493 s/op
Iteration  20: 6.575 s/op
Iteration  21: 6.613 s/op
Iteration  22: 6.490 s/op
Iteration  23: 6.476 s/op
Iteration  24: 6.487 s/op
Iteration  25: 6.512 s/op
Iteration  26: 6.493 s/op
Iteration  27: 6.565 s/op
Iteration  28: 6.470 s/op
Iteration  29: 6.506 s/op
Iteration  30: 6.467 s/op
Iteration  31: 6.466 s/op
Iteration  32: 6.471 s/op
Iteration  33: 6.471 s/op
Iteration  34: 6.477 s/op
Iteration  35: 6.472 s/op
Iteration  36: 6.466 s/op
Iteration  37: 6.465 s/op
Iteration  38: 6.468 s/op
Iteration  39: 6.504 s/op
Iteration  40: 6.488 s/op
Iteration  41: 6.504 s/op
Iteration  42: 6.469 s/op
Iteration  43: 6.494 s/op
Iteration  44: 6.470 s/op
Iteration  45: 6.469 s/op
Iteration  46: 6.470 s/op
Iteration  47: 6.468 s/op
Iteration  48: 6.472 s/op
Iteration  49: 6.466 s/op
Iteration  50: 6.496 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.496 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [6.400, 6.450) = 1 
    [6.450, 6.500) = 40 
    [6.500, 6.550) = 4 
    [6.550, 6.600) = 2 
    [6.600, 6.650) = 1 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.421 s/op
     p(50.0000) =      6.471 s/op
     p(90.0000) =      6.560 s/op
     p(95.0000) =      6.668 s/op
     p(99.0000) =      6.873 s/op
     p(99.9000) =      6.873 s/op
     p(99.9900) =      6.873 s/op
     p(99.9990) =      6.873 s/op
     p(99.9999) =      6.873 s/op
    p(100.0000) =      6.873 s/op


# Run complete. Total time: 00:05:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.496 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot_12.0.2_1565045488680.json
{"wallclock_times": [325.808185922], "core_cycle_counts": [[105122163395], [248842185052], [582121620319], [116320498829]], "aperf_counts": [[104115631239], [248780128589], [582075433401], [116278300583]], "mperf_counts": [[105186794610], [249222078332], [583030497338], [116490381610]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 00:56:54: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-08-06 00:56:55: INFO] Estimated completion (whole session): 2019-08-06 04:21:52 (3:24:57 from now)
[2019-08-06 00:56:55: INFO] 23 executions left in scheduler queue
[2019-08-06 00:56:55: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 00:56:55: INFO] Estimated completion (next execution): 2019-08-06 01:04:50 (0:07:54 from now)
[2019-08-06 00:56:55: INFO] Reboot in preparation for next execution
[2019-08-06 01:08:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.243 s/op
Iteration   2: 9.113 s/op
Iteration   3: 9.193 s/op
Iteration   4: 9.095 s/op
Iteration   5: 9.096 s/op
Iteration   6: 9.098 s/op
Iteration   7: 9.123 s/op
Iteration   8: 9.092 s/op
Iteration   9: 9.080 s/op
Iteration  10: 9.072 s/op
Iteration  11: 9.094 s/op
Iteration  12: 9.074 s/op
Iteration  13: 9.067 s/op
Iteration  14: 9.119 s/op
Iteration  15: 9.060 s/op
Iteration  16: 9.054 s/op
Iteration  17: 9.084 s/op
Iteration  18: 9.071 s/op
Iteration  19: 9.111 s/op
Iteration  20: 9.078 s/op
Iteration  21: 9.110 s/op
Iteration  22: 9.107 s/op
Iteration  23: 9.115 s/op
Iteration  24: 9.072 s/op
Iteration  25: 9.090 s/op
Iteration  26: 9.101 s/op
Iteration  27: 9.098 s/op
Iteration  28: 9.115 s/op
Iteration  29: 9.085 s/op
Iteration  30: 9.079 s/op
Iteration  31: 9.100 s/op
Iteration  32: 9.081 s/op
Iteration  33: 9.093 s/op
Iteration  34: 9.074 s/op
Iteration  35: 9.098 s/op
Iteration  36: 9.112 s/op
Iteration  37: 9.072 s/op
Iteration  38: 9.081 s/op
Iteration  39: 9.065 s/op
Iteration  40: 9.087 s/op
Iteration  41: 9.079 s/op
Iteration  42: 9.086 s/op
Iteration  43: 9.110 s/op
Iteration  44: 9.123 s/op
Iteration  45: 9.085 s/op
Iteration  46: 9.119 s/op
Iteration  47: 9.090 s/op
Iteration  48: 9.070 s/op
Iteration  49: 9.124 s/op
Iteration  50: 9.065 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.096 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [9.000, 9.025) = 0 
    [9.025, 9.050) = 0 
    [9.050, 9.075) = 12 
    [9.075, 9.100) = 21 
    [9.100, 9.125) = 15 
    [9.125, 9.150) = 0 
    [9.150, 9.175) = 0 
    [9.175, 9.200) = 1 
    [9.200, 9.225) = 0 
    [9.225, 9.250) = 1 
    [9.250, 9.275) = 0 
    [9.275, 9.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.054 s/op
     p(50.0000) =      9.091 s/op
     p(90.0000) =      9.123 s/op
     p(95.0000) =      9.155 s/op
     p(99.0000) =      9.243 s/op
     p(99.9000) =      9.243 s/op
     p(99.9900) =      9.243 s/op
     p(99.9990) =      9.243 s/op
     p(99.9999) =      9.243 s/op
    p(100.0000) =      9.243 s/op


# Run complete. Total time: 00:07:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.096 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot-8u222-b10_1565046067586.json
{"wallclock_times": [455.66886977499996], "core_cycle_counts": [[198967470645], [410044814182], [517968966855], [342045042436]], "aperf_counts": [[197799589900], [409986950374], [517946425603], [342008713228]], "mperf_counts": [[197812181688], [410002165578], [517949976460], [342008895274]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 01:08:43: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 01:08:44: INFO] Estimated completion (whole session): 2019-08-06 04:23:27 (3:14:43 from now)
[2019-08-06 01:08:44: INFO] 22 executions left in scheduler queue
[2019-08-06 01:08:44: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 01:08:44: INFO] Estimated completion (next execution): 2019-08-06 01:18:53 (0:10:09 from now)
[2019-08-06 01:08:44: INFO] Reboot in preparation for next execution
[2019-08-06 01:25:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.805 s/op
Iteration   2: 15.048 s/op
Iteration   3: 14.957 s/op
Iteration   4: 14.837 s/op
Iteration   5: 14.769 s/op
Iteration   6: 14.797 s/op
Iteration   7: 14.808 s/op
Iteration   8: 14.848 s/op
Iteration   9: 14.813 s/op
Iteration  10: 14.815 s/op
Iteration  11: 14.834 s/op
Iteration  12: 14.771 s/op
Iteration  13: 14.842 s/op
Iteration  14: 14.822 s/op
Iteration  15: 14.831 s/op
Iteration  16: 14.852 s/op
Iteration  17: 14.867 s/op
Iteration  18: 14.818 s/op
Iteration  19: 14.886 s/op
Iteration  20: 14.843 s/op
Iteration  21: 14.889 s/op
Iteration  22: 14.875 s/op
Iteration  23: 14.867 s/op
Iteration  24: 14.839 s/op
Iteration  25: 14.898 s/op
Iteration  26: 14.866 s/op
Iteration  27: 14.867 s/op
Iteration  28: 14.863 s/op
Iteration  29: 14.917 s/op
Iteration  30: 14.861 s/op
Iteration  31: 14.870 s/op
Iteration  32: 15.142 s/op
Iteration  33: 14.824 s/op
Iteration  34: 14.914 s/op
Iteration  35: 14.869 s/op
Iteration  36: 14.844 s/op
Iteration  37: 14.847 s/op
Iteration  38: 14.850 s/op
Iteration  39: 14.852 s/op
Iteration  40: 14.829 s/op
Iteration  41: 14.866 s/op
Iteration  42: 14.874 s/op
Iteration  43: 14.848 s/op
Iteration  44: 15.023 s/op
Iteration  45: 14.858 s/op
Iteration  46: 14.832 s/op
Iteration  47: 14.840 s/op
Iteration  48: 14.872 s/op
Iteration  49: 14.828 s/op
Iteration  50: 14.828 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.862 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [14.700, 14.750) = 0 
    [14.750, 14.800) = 3 
    [14.800, 14.850) = 22 
    [14.850, 14.900) = 19 
    [14.900, 14.950) = 2 
    [14.950, 15.000) = 1 
    [15.000, 15.050) = 2 
    [15.050, 15.100) = 0 
    [15.100, 15.150) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.769 s/op
     p(50.0000) =     14.849 s/op
     p(90.0000) =     14.917 s/op
     p(95.0000) =     15.034 s/op
     p(99.0000) =     15.142 s/op
     p(99.9000) =     15.142 s/op
     p(99.9900) =     15.142 s/op
     p(99.9990) =     15.142 s/op
     p(99.9999) =     15.142 s/op
    p(100.0000) =     15.142 s/op


# Run complete. Total time: 00:12:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.862 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot-8u222-b10_1565046777916.json
{"wallclock_times": [744.025371957], "core_cycle_counts": [[860286741376], [479513649649], [219486158654], [834743172192]], "aperf_counts": [[858843315292], [479343324305], [219400560531], [834705239747]], "mperf_counts": [[858857245026], [479362141292], [219400745248], [834705466298]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 01:25:21: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 01:25:22: INFO] Estimated completion (whole session): 2019-08-06 04:25:10 (2:59:47 from now)
[2019-08-06 01:25:22: INFO] 21 executions left in scheduler queue
[2019-08-06 01:25:22: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 01:25:22: INFO] Estimated completion (next execution): 2019-08-06 01:40:18 (0:14:55 from now)
[2019-08-06 01:25:22: INFO] Reboot in preparation for next execution
[2019-08-06 01:34:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.342 s/op
Iteration   2: 5.803 s/op
Iteration   3: 5.866 s/op
Iteration   4: 5.891 s/op
Iteration   5: 5.910 s/op
Iteration   6: 5.850 s/op
Iteration   7: 5.860 s/op
Iteration   8: 5.864 s/op
Iteration   9: 5.885 s/op
Iteration  10: 5.853 s/op
Iteration  11: 5.881 s/op
Iteration  12: 5.862 s/op
Iteration  13: 5.862 s/op
Iteration  14: 5.909 s/op
Iteration  15: 5.853 s/op
Iteration  16: 5.869 s/op
Iteration  17: 5.874 s/op
Iteration  18: 5.868 s/op
Iteration  19: 5.869 s/op
Iteration  20: 5.863 s/op
Iteration  21: 5.871 s/op
Iteration  22: 5.810 s/op
Iteration  23: 5.760 s/op
Iteration  24: 5.861 s/op
Iteration  25: 5.867 s/op
Iteration  26: 5.878 s/op
Iteration  27: 5.861 s/op
Iteration  28: 5.876 s/op
Iteration  29: 5.875 s/op
Iteration  30: 5.932 s/op
Iteration  31: 5.877 s/op
Iteration  32: 5.873 s/op
Iteration  33: 5.797 s/op
Iteration  34: 5.771 s/op
Iteration  35: 5.855 s/op
Iteration  36: 5.869 s/op
Iteration  37: 5.882 s/op
Iteration  38: 5.884 s/op
Iteration  39: 5.887 s/op
Iteration  40: 5.890 s/op
Iteration  41: 5.881 s/op
Iteration  42: 5.811 s/op
Iteration  43: 5.771 s/op
Iteration  44: 5.861 s/op
Iteration  45: 5.874 s/op
Iteration  46: 5.885 s/op
Iteration  47: 5.896 s/op
Iteration  48: 5.902 s/op
Iteration  49: 5.889 s/op
Iteration  50: 5.876 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.873 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 4 
    [5.800, 5.850) = 4 
    [5.850, 5.900) = 37 
    [5.900, 5.950) = 4 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 0 
    [6.050, 6.100) = 0 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 1 
    [6.350, 6.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.760 s/op
     p(50.0000) =      5.870 s/op
     p(90.0000) =      5.902 s/op
     p(95.0000) =      5.920 s/op
     p(99.0000) =      6.342 s/op
     p(99.9000) =      6.342 s/op
     p(99.9900) =      6.342 s/op
     p(99.9990) =      6.342 s/op
     p(99.9999) =      6.342 s/op
    p(100.0000) =      6.342 s/op


# Run complete. Total time: 00:04:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.873 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot-8u222-b10_1565047775494.json
{"wallclock_times": [294.68641744900003], "core_cycle_counts": [[164403464963], [174889309027], [268665856584], [406602122242]], "aperf_counts": [[163595280783], [174822851401], [268621493242], [406571769534]], "mperf_counts": [[163622367618], [174835458454], [268622086708], [406571973904]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 01:34:30: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 01:34:31: INFO] Estimated completion (whole session): 2019-08-06 04:26:55 (2:52:23 from now)
[2019-08-06 01:34:31: INFO] 20 executions left in scheduler queue
[2019-08-06 01:34:31: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 01:34:31: INFO] Estimated completion (next execution): 2019-08-06 01:41:55 (0:07:24 from now)
[2019-08-06 01:34:31: INFO] Reboot in preparation for next execution
[2019-08-06 01:43:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.642 s/op
Iteration   2: 5.231 s/op
Iteration   3: 5.253 s/op
Iteration   4: 5.143 s/op
Iteration   5: 5.162 s/op
Iteration   6: 5.187 s/op
Iteration   7: 5.170 s/op
Iteration   8: 5.168 s/op
Iteration   9: 5.141 s/op
Iteration  10: 5.149 s/op
Iteration  11: 5.179 s/op
Iteration  12: 5.169 s/op
Iteration  13: 5.151 s/op
Iteration  14: 5.181 s/op
Iteration  15: 5.155 s/op
Iteration  16: 5.155 s/op
Iteration  17: 5.133 s/op
Iteration  18: 5.153 s/op
Iteration  19: 5.166 s/op
Iteration  20: 5.155 s/op
Iteration  21: 5.169 s/op
Iteration  22: 5.166 s/op
Iteration  23: 5.146 s/op
Iteration  24: 5.153 s/op
Iteration  25: 5.179 s/op
Iteration  26: 5.179 s/op
Iteration  27: 5.171 s/op
Iteration  28: 5.177 s/op
Iteration  29: 5.190 s/op
Iteration  30: 5.184 s/op
Iteration  31: 5.162 s/op
Iteration  32: 5.144 s/op
Iteration  33: 5.155 s/op
Iteration  34: 5.150 s/op
Iteration  35: 5.179 s/op
Iteration  36: 5.157 s/op
Iteration  37: 5.165 s/op
Iteration  38: 5.147 s/op
Iteration  39: 5.139 s/op
Iteration  40: 5.171 s/op
Iteration  41: 5.175 s/op
Iteration  42: 5.172 s/op
Iteration  43: 5.195 s/op
Iteration  44: 5.149 s/op
Iteration  45: 5.160 s/op
Iteration  46: 5.165 s/op
Iteration  47: 5.153 s/op
Iteration  48: 5.157 s/op
Iteration  49: 5.157 s/op
Iteration  50: 5.173 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.176 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [5.100, 5.150) = 10 
    [5.150, 5.200) = 37 
    [5.200, 5.250) = 1 
    [5.250, 5.300) = 1 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.133 s/op
     p(50.0000) =      5.165 s/op
     p(90.0000) =      5.190 s/op
     p(95.0000) =      5.241 s/op
     p(99.0000) =      5.642 s/op
     p(99.9000) =      5.642 s/op
     p(99.9900) =      5.642 s/op
     p(99.9990) =      5.642 s/op
     p(99.9999) =      5.642 s/op
    p(100.0000) =      5.642 s/op


# Run complete. Total time: 00:04:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.176 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot-8u222-b10_1565048328668.json
{"wallclock_times": [259.743218963], "core_cycle_counts": [[193377422787], [221084782057], [266552774519], [170582947590]], "aperf_counts": [[192777593856], [221032147105], [266525332085], [170553637586]], "mperf_counts": [[192807144748], [221032539462], [266525420470], [170553656306]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 01:43:08: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-06 01:43:09: INFO] Estimated completion (whole session): 2019-08-06 04:28:33 (2:45:24 from now)
[2019-08-06 01:43:09: INFO] 19 executions left in scheduler queue
[2019-08-06 01:43:09: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-06 01:43:09: INFO] Estimated completion (next execution): 2019-08-06 01:50:04 (0:06:54 from now)
[2019-08-06 01:43:09: INFO] Reboot in preparation for next execution
[2019-08-06 01:47:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 01:47:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 01:47:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 01:47:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 01:47:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 01:47:37: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-06 01:49:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.697 s/op
Iteration   2: 2.212 s/op
Iteration   3: 2.049 s/op
Iteration   4: 2.138 s/op
Iteration   5: 2.161 s/op
Iteration   6: 1.950 s/op
Iteration   7: 1.960 s/op
Iteration   8: 1.934 s/op
Iteration   9: 1.963 s/op
Iteration  10: 1.962 s/op
Iteration  11: 1.951 s/op
Iteration  12: 1.956 s/op
Iteration  13: 1.948 s/op
Iteration  14: 1.913 s/op
Iteration  15: 1.943 s/op
Iteration  16: 1.942 s/op
Iteration  17: 1.900 s/op
Iteration  18: 1.904 s/op
Iteration  19: 1.954 s/op
Iteration  20: 1.940 s/op
Iteration  21: 1.941 s/op
Iteration  22: 1.932 s/op
Iteration  23: 1.901 s/op
Iteration  24: 1.918 s/op
Iteration  25: 1.927 s/op
Iteration  26: 1.925 s/op
Iteration  27: 1.903 s/op
Iteration  28: 1.950 s/op
Iteration  29: 1.945 s/op
Iteration  30: 1.921 s/op
Iteration  31: 1.903 s/op
Iteration  32: 1.924 s/op
Iteration  33: 1.942 s/op
Iteration  34: 1.948 s/op
Iteration  35: 1.910 s/op
Iteration  36: 1.947 s/op
Iteration  37: 1.959 s/op
Iteration  38: 1.921 s/op
Iteration  39: 1.929 s/op
Iteration  40: 1.933 s/op
Iteration  41: 1.928 s/op
Iteration  42: 1.945 s/op
Iteration  43: 1.957 s/op
Iteration  44: 1.903 s/op
Iteration  45: 1.964 s/op
Iteration  46: 1.909 s/op
Iteration  47: 1.912 s/op
Iteration  48: 1.921 s/op
Iteration  49: 1.899 s/op
Iteration  50: 1.930 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.964 ?(99.9%) 0.061 s/op

  Histogram, s/op:
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 34 
    [1.950, 2.000) = 10 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.899 s/op
     p(50.0000) =      1.940 s/op
     p(90.0000) =      2.041 s/op
     p(95.0000) =      2.184 s/op
     p(99.0000) =      2.697 s/op
     p(99.9000) =      2.697 s/op
     p(99.9900) =      2.697 s/op
     p(99.9990) =      2.697 s/op
     p(99.9999) =      2.697 s/op
    p(100.0000) =      2.697 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.964 ? 0.061   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9_11.0.4_1565048857031.json
{"wallclock_times": [99.87259299300001], "core_cycle_counts": [[84822331166], [105880116386], [121176743112], [37396426512]], "aperf_counts": [[84461311797], [105801052294], [121127323991], [37327114353]], "mperf_counts": [[84464358710], [105801050684], [121128291978], [37327664120]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 01:49:16: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-06 01:49:17: INFO] Estimated completion (whole session): 2019-08-06 04:30:31 (2:41:13 from now)
[2019-08-06 01:49:17: INFO] 18 executions left in scheduler queue
[2019-08-06 01:49:17: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-06 01:49:17: INFO] Estimated completion (next execution): 2019-08-06 01:53:28 (0:04:10 from now)
[2019-08-06 01:49:17: INFO] Reboot in preparation for next execution
[2019-08-06 01:53:30: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 01:53:30: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 01:53:30: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 01:53:30: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 01:53:30: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 01:53:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-06 01:55:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.990 s/op
Iteration   2: 2.614 s/op
Iteration   3: 2.628 s/op
Iteration   4: 2.493 s/op
Iteration   5: 2.323 s/op
Iteration   6: 2.416 s/op
Iteration   7: 2.394 s/op
Iteration   8: 2.419 s/op
Iteration   9: 2.340 s/op
Iteration  10: 2.363 s/op
Iteration  11: 2.383 s/op
Iteration  12: 2.371 s/op
Iteration  13: 2.393 s/op
Iteration  14: 2.376 s/op
Iteration  15: 2.389 s/op
Iteration  16: 2.400 s/op
Iteration  17: 2.397 s/op
Iteration  18: 2.354 s/op
Iteration  19: 2.381 s/op
Iteration  20: 2.413 s/op
Iteration  21: 2.375 s/op
Iteration  22: 2.347 s/op
Iteration  23: 2.413 s/op
Iteration  24: 2.358 s/op
Iteration  25: 2.396 s/op
Iteration  26: 2.362 s/op
Iteration  27: 2.394 s/op
Iteration  28: 2.373 s/op
Iteration  29: 2.407 s/op
Iteration  30: 2.353 s/op
Iteration  31: 2.408 s/op
Iteration  32: 2.367 s/op
Iteration  33: 2.375 s/op
Iteration  34: 2.364 s/op
Iteration  35: 2.388 s/op
Iteration  36: 2.407 s/op
Iteration  37: 2.368 s/op
Iteration  38: 2.380 s/op
Iteration  39: 2.393 s/op
Iteration  40: 2.363 s/op
Iteration  41: 2.402 s/op
Iteration  42: 2.369 s/op
Iteration  43: 2.350 s/op
Iteration  44: 2.387 s/op
Iteration  45: 2.415 s/op
Iteration  46: 2.391 s/op
Iteration  47: 2.385 s/op
Iteration  48: 2.373 s/op
Iteration  49: 2.363 s/op
Iteration  50: 2.405 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.405 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [2.300, 2.350) = 4 
    [2.350, 2.400) = 31 
    [2.400, 2.450) = 11 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 2 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.323 s/op
     p(50.0000) =      2.386 s/op
     p(90.0000) =      2.418 s/op
     p(95.0000) =      2.620 s/op
     p(99.0000) =      2.990 s/op
     p(99.9000) =      2.990 s/op
     p(99.9900) =      2.990 s/op
     p(99.9990) =      2.990 s/op
     p(99.9999) =      2.990 s/op
    p(100.0000) =      2.990 s/op


# Run complete. Total time: 00:02:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.405 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9_11.0.4_1565049210868.json
{"wallclock_times": [121.77796325100002], "core_cycle_counts": [[127097979040], [77186511133], [109844803664], [103980917632]], "aperf_counts": [[126779102160], [77107753935], [109803721655], [103931434893]], "mperf_counts": [[126780183380], [77109601122], [109803717168], [103931430560]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 01:55:32: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-06 01:55:33: INFO] Estimated completion (whole session): 2019-08-06 04:32:18 (2:36:44 from now)
[2019-08-06 01:55:33: INFO] 17 executions left in scheduler queue
[2019-08-06 01:55:33: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 01:55:33: INFO] Estimated completion (next execution): 2019-08-06 02:00:04 (0:04:30 from now)
[2019-08-06 01:55:33: INFO] Reboot in preparation for next execution
[2019-08-06 01:59:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 01:59:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 01:59:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 01:59:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 01:59:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 02:06:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.271 s/op
Iteration   2: 8.827 s/op
Iteration   3: 7.778 s/op
Iteration   4: 7.830 s/op
Iteration   5: 7.778 s/op
Iteration   6: 7.795 s/op
Iteration   7: 7.819 s/op
Iteration   8: 7.818 s/op
Iteration   9: 7.823 s/op
Iteration  10: 7.824 s/op
Iteration  11: 7.841 s/op
Iteration  12: 7.837 s/op
Iteration  13: 7.861 s/op
Iteration  14: 7.830 s/op
Iteration  15: 7.839 s/op
Iteration  16: 7.829 s/op
Iteration  17: 7.848 s/op
Iteration  18: 7.711 s/op
Iteration  19: 7.817 s/op
Iteration  20: 7.820 s/op
Iteration  21: 7.826 s/op
Iteration  22: 7.786 s/op
Iteration  23: 7.924 s/op
Iteration  24: 7.800 s/op
Iteration  25: 7.795 s/op
Iteration  26: 7.759 s/op
Iteration  27: 7.858 s/op
Iteration  28: 7.764 s/op
Iteration  29: 7.835 s/op
Iteration  30: 7.739 s/op
Iteration  31: 7.800 s/op
Iteration  32: 7.737 s/op
Iteration  33: 7.749 s/op
Iteration  34: 7.816 s/op
Iteration  35: 7.824 s/op
Iteration  36: 7.833 s/op
Iteration  37: 7.813 s/op
Iteration  38: 7.811 s/op
Iteration  39: 7.821 s/op
Iteration  40: 7.845 s/op
Iteration  41: 7.877 s/op
Iteration  42: 7.811 s/op
Iteration  43: 7.825 s/op
Iteration  44: 7.833 s/op
Iteration  45: 7.827 s/op
Iteration  46: 7.825 s/op
Iteration  47: 7.816 s/op
Iteration  48: 7.810 s/op
Iteration  49: 7.782 s/op
Iteration  50: 7.783 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.842 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 4 
    [7.750, 7.875) = 42 
    [7.875, 8.000) = 2 
    [8.000, 8.125) = 0 
    [8.125, 8.250) = 0 
    [8.250, 8.375) = 1 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 0 
    [8.625, 8.750) = 0 
    [8.750, 8.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.711 s/op
     p(50.0000) =      7.821 s/op
     p(90.0000) =      7.860 s/op
     p(95.0000) =      8.080 s/op
     p(99.0000) =      8.827 s/op
     p(99.9000) =      8.827 s/op
     p(99.9900) =      8.827 s/op
     p(99.9990) =      8.827 s/op
     p(99.9999) =      8.827 s/op
    p(100.0000) =      8.827 s/op


# Run complete. Total time: 00:06:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.842 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot_12.0.2_1565049589567.json
{"wallclock_times": [393.270998639], "core_cycle_counts": [[240185151324], [251970982272], [468730953562], [431282732661]], "aperf_counts": [[239081550964], [251886229162], [468693162417], [431236946850]], "mperf_counts": [[241332005794], [252053856948], [468857546790], [431399615224]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 02:06:22: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 02:06:23: INFO] Estimated completion (whole session): 2019-08-06 04:34:01 (2:27:37 from now)
[2019-08-06 02:06:23: INFO] 16 executions left in scheduler queue
[2019-08-06 02:06:23: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 02:06:23: INFO] Estimated completion (next execution): 2019-08-06 02:15:29 (0:09:05 from now)
[2019-08-06 02:06:23: INFO] Reboot in preparation for next execution
[2019-08-06 02:10:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 02:10:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 02:10:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 02:10:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 02:10:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 02:21:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.597 s/op
Iteration   2: 13.295 s/op
Iteration   3: 12.608 s/op
Iteration   4: 12.623 s/op
Iteration   5: 12.567 s/op
Iteration   6: 12.555 s/op
Iteration   7: 12.580 s/op
Iteration   8: 12.554 s/op
Iteration   9: 12.579 s/op
Iteration  10: 12.557 s/op
Iteration  11: 12.552 s/op
Iteration  12: 12.539 s/op
Iteration  13: 12.566 s/op
Iteration  14: 12.563 s/op
Iteration  15: 12.587 s/op
Iteration  16: 12.586 s/op
Iteration  17: 12.564 s/op
Iteration  18: 12.545 s/op
Iteration  19: 12.523 s/op
Iteration  20: 12.529 s/op
Iteration  21: 12.526 s/op
Iteration  22: 12.568 s/op
Iteration  23: 12.563 s/op
Iteration  24: 12.586 s/op
Iteration  25: 12.546 s/op
Iteration  26: 12.530 s/op
Iteration  27: 12.531 s/op
Iteration  28: 12.583 s/op
Iteration  29: 12.517 s/op
Iteration  30: 12.553 s/op
Iteration  31: 12.571 s/op
Iteration  32: 12.543 s/op
Iteration  33: 12.572 s/op
Iteration  34: 12.558 s/op
Iteration  35: 12.562 s/op
Iteration  36: 12.577 s/op
Iteration  37: 12.528 s/op
Iteration  38: 12.516 s/op
Iteration  39: 12.580 s/op
Iteration  40: 12.598 s/op
Iteration  41: 12.562 s/op
Iteration  42: 12.549 s/op
Iteration  43: 12.550 s/op
Iteration  44: 12.580 s/op
Iteration  45: 12.534 s/op
Iteration  46: 12.532 s/op
Iteration  47: 12.519 s/op
Iteration  48: 12.566 s/op
Iteration  49: 12.549 s/op
Iteration  50: 12.568 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.574 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [12.500, 12.550) = 17 
    [12.550, 12.600) = 30 
    [12.600, 12.650) = 2 
    [12.650, 12.700) = 0 
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 0 
    [12.800, 12.850) = 0 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 0 
    [12.950, 13.000) = 0 
    [13.000, 13.050) = 0 
    [13.050, 13.100) = 0 
    [13.100, 13.150) = 0 
    [13.150, 13.200) = 0 
    [13.200, 13.250) = 0 
    [13.250, 13.300) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.516 s/op
     p(50.0000) =     12.562 s/op
     p(90.0000) =     12.596 s/op
     p(95.0000) =     12.614 s/op
     p(99.0000) =     13.295 s/op
     p(99.9000) =     13.295 s/op
     p(99.9900) =     13.295 s/op
     p(99.9990) =     13.295 s/op
     p(99.9999) =     13.295 s/op
    p(100.0000) =     13.295 s/op


# Run complete. Total time: 00:10:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.574 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot_12.0.2_1565050237072.json
{"wallclock_times": [629.699028714], "core_cycle_counts": [[393130537720], [299892094367], [537368054610], [802892256615]], "aperf_counts": [[391494728926], [299760943281], [537315081827], [802836941226]], "mperf_counts": [[391933176302], [299817101250], [537433827466], [802875900180]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 02:21:06: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 02:21:07: INFO] Estimated completion (whole session): 2019-08-06 04:35:50 (2:14:42 from now)
[2019-08-06 02:21:07: INFO] 15 executions left in scheduler queue
[2019-08-06 02:21:07: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 02:21:07: INFO] Estimated completion (next execution): 2019-08-06 02:34:04 (0:12:57 from now)
[2019-08-06 02:21:07: INFO] Reboot in preparation for next execution
[2019-08-06 02:25:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 02:25:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 02:25:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 02:25:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 02:25:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 02:32:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.625 s/op
Iteration   2: 8.332 s/op
Iteration   3: 8.759 s/op
Iteration   4: 8.371 s/op
Iteration   5: 8.434 s/op
Iteration   6: 8.258 s/op
Iteration   7: 7.921 s/op
Iteration   8: 8.377 s/op
Iteration   9: 8.394 s/op
Iteration  10: 8.369 s/op
Iteration  11: 8.389 s/op
Iteration  12: 8.355 s/op
Iteration  13: 8.369 s/op
Iteration  14: 8.400 s/op
Iteration  15: 8.366 s/op
Iteration  16: 8.435 s/op
Iteration  17: 8.435 s/op
Iteration  18: 8.406 s/op
Iteration  19: 8.420 s/op
Iteration  20: 8.395 s/op
Iteration  21: 8.436 s/op
Iteration  22: 8.405 s/op
Iteration  23: 8.472 s/op
Iteration  24: 8.408 s/op
Iteration  25: 8.402 s/op
Iteration  26: 8.389 s/op
Iteration  27: 8.409 s/op
Iteration  28: 8.388 s/op
Iteration  29: 8.373 s/op
Iteration  30: 8.394 s/op
Iteration  31: 8.388 s/op
Iteration  32: 8.421 s/op
Iteration  33: 8.414 s/op
Iteration  34: 8.191 s/op
Iteration  35: 8.417 s/op
Iteration  36: 8.415 s/op
Iteration  37: 8.316 s/op
Iteration  38: 8.398 s/op
Iteration  39: 8.484 s/op
Iteration  40: 8.402 s/op
Iteration  41: 8.357 s/op
Iteration  42: 8.389 s/op
Iteration  43: 8.425 s/op
Iteration  44: 8.433 s/op
Iteration  45: 8.398 s/op
Iteration  46: 8.371 s/op
Iteration  47: 8.418 s/op
Iteration  48: 7.887 s/op
Iteration  49: 8.418 s/op
Iteration  50: 8.373 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.384 ?(99.9%) 0.062 s/op

  Histogram, s/op:
    [7.800, 7.900) = 1 
    [7.900, 8.000) = 1 
    [8.000, 8.100) = 0 
    [8.100, 8.200) = 1 
    [8.200, 8.300) = 1 
    [8.300, 8.400) = 22 
    [8.400, 8.500) = 22 
    [8.500, 8.600) = 0 
    [8.600, 8.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.887 s/op
     p(50.0000) =      8.398 s/op
     p(90.0000) =      8.436 s/op
     p(95.0000) =      8.547 s/op
     p(99.0000) =      8.759 s/op
     p(99.9000) =      8.759 s/op
     p(99.9900) =      8.759 s/op
     p(99.9990) =      8.759 s/op
     p(99.9999) =      8.759 s/op
    p(100.0000) =      8.759 s/op


# Run complete. Total time: 00:07:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.384 ? 0.062   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot_12.0.2_1565051120855.json
{"wallclock_times": [420.301886922], "core_cycle_counts": [[145635598834], [367990537020], [393562829332], [297966992520]], "aperf_counts": [[144383557338], [367930124020], [393532567216], [297935119768]], "mperf_counts": [[163403730108], [417045080016], [445853190298], [338879062080]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 02:32:21: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 02:32:22: INFO] Estimated completion (whole session): 2019-08-06 04:37:37 (2:05:15 from now)
[2019-08-06 02:32:22: INFO] 14 executions left in scheduler queue
[2019-08-06 02:32:22: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 02:32:22: INFO] Estimated completion (next execution): 2019-08-06 02:41:51 (0:09:29 from now)
[2019-08-06 02:32:22: INFO] Reboot in preparation for next execution
[2019-08-06 02:36:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 02:36:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 02:36:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 02:36:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 02:36:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 02:51:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.048 s/op
Iteration   2: 17.936 s/op
Iteration   3: 17.890 s/op
Iteration   4: 17.586 s/op
Iteration   5: 17.579 s/op
Iteration   6: 17.690 s/op
Iteration   7: 17.536 s/op
Iteration   8: 17.494 s/op
Iteration   9: 17.564 s/op
Iteration  10: 17.663 s/op
Iteration  11: 17.550 s/op
Iteration  12: 17.675 s/op
Iteration  13: 17.707 s/op
Iteration  14: 18.415 s/op
Iteration  15: 17.510 s/op
Iteration  16: 17.526 s/op
Iteration  17: 17.666 s/op
Iteration  18: 17.573 s/op
Iteration  19: 17.575 s/op
Iteration  20: 17.524 s/op
Iteration  21: 17.561 s/op
Iteration  22: 17.546 s/op
Iteration  23: 17.562 s/op
Iteration  24: 17.576 s/op
Iteration  25: 17.574 s/op
Iteration  26: 17.637 s/op
Iteration  27: 17.539 s/op
Iteration  28: 17.665 s/op
Iteration  29: 17.631 s/op
Iteration  30: 17.521 s/op
Iteration  31: 17.509 s/op
Iteration  32: 17.573 s/op
Iteration  33: 17.557 s/op
Iteration  34: 17.509 s/op
Iteration  35: 17.590 s/op
Iteration  36: 17.520 s/op
Iteration  37: 17.527 s/op
Iteration  38: 17.513 s/op
Iteration  39: 17.627 s/op
Iteration  40: 17.586 s/op
Iteration  41: 17.524 s/op
Iteration  42: 17.671 s/op
Iteration  43: 17.544 s/op
Iteration  44: 18.379 s/op
Iteration  45: 17.551 s/op
Iteration  46: 17.565 s/op
Iteration  47: 17.555 s/op
Iteration  48: 17.510 s/op
Iteration  49: 17.592 s/op
Iteration  50: 17.547 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.629 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [17.400, 17.500) = 1 
    [17.500, 17.600) = 34 
    [17.600, 17.700) = 9 
    [17.700, 17.800) = 1 
    [17.800, 17.900) = 1 
    [17.900, 18.000) = 1 
    [18.000, 18.100) = 1 
    [18.100, 18.200) = 0 
    [18.200, 18.300) = 0 
    [18.300, 18.400) = 1 

  Percentiles, s/op:
      p(0.0000) =     17.494 s/op
     p(50.0000) =     17.569 s/op
     p(90.0000) =     17.872 s/op
     p(95.0000) =     18.197 s/op
     p(99.0000) =     18.415 s/op
     p(99.9000) =     18.415 s/op
     p(99.9900) =     18.415 s/op
     p(99.9990) =     18.415 s/op
     p(99.9999) =     18.415 s/op
    p(100.0000) =     18.415 s/op


# Run complete. Total time: 00:14:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.629 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot_12.0.2_1565051794748.json
{"wallclock_times": [882.517118633], "core_cycle_counts": [[551755525563], [442924630372], [1174673976026], [678633396174]], "aperf_counts": [[549461690921], [442781414745], [1174607124090], [678590522966]], "mperf_counts": [[550153579816], [443319847916], [1174763183394], [678672269414]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 02:51:17: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-06 02:51:18: INFO] Estimated completion (whole session): 2019-08-06 04:39:15 (1:47:56 from now)
[2019-08-06 02:51:18: INFO] 13 executions left in scheduler queue
[2019-08-06 02:51:18: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-06 02:51:18: INFO] Estimated completion (next execution): 2019-08-06 03:08:33 (0:17:15 from now)
[2019-08-06 02:51:18: INFO] Reboot in preparation for next execution
[2019-08-06 02:55:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.700 s/op
Iteration   2: 1.315 s/op
Iteration   3: 1.309 s/op
Iteration   4: 1.389 s/op
Iteration   5: 1.295 s/op
Iteration   6: 1.300 s/op
Iteration   7: 1.300 s/op
Iteration   8: 1.299 s/op
Iteration   9: 1.301 s/op
Iteration  10: 1.305 s/op
Iteration  11: 1.300 s/op
Iteration  12: 1.298 s/op
Iteration  13: 1.302 s/op
Iteration  14: 1.298 s/op
Iteration  15: 1.297 s/op
Iteration  16: 1.298 s/op
Iteration  17: 1.295 s/op
Iteration  18: 1.297 s/op
Iteration  19: 1.299 s/op
Iteration  20: 1.299 s/op
Iteration  21: 1.298 s/op
Iteration  22: 1.299 s/op
Iteration  23: 1.301 s/op
Iteration  24: 1.299 s/op
Iteration  25: 1.299 s/op
Iteration  26: 1.295 s/op
Iteration  27: 1.298 s/op
Iteration  28: 1.301 s/op
Iteration  29: 1.297 s/op
Iteration  30: 1.303 s/op
Iteration  31: 1.300 s/op
Iteration  32: 1.302 s/op
Iteration  33: 1.301 s/op
Iteration  34: 1.299 s/op
Iteration  35: 1.301 s/op
Iteration  36: 1.302 s/op
Iteration  37: 1.303 s/op
Iteration  38: 1.303 s/op
Iteration  39: 1.304 s/op
Iteration  40: 1.299 s/op
Iteration  41: 1.305 s/op
Iteration  42: 1.302 s/op
Iteration  43: 1.303 s/op
Iteration  44: 1.302 s/op
Iteration  45: 1.305 s/op
Iteration  46: 1.310 s/op
Iteration  47: 1.303 s/op
Iteration  48: 1.304 s/op
Iteration  49: 1.301 s/op
Iteration  50: 1.303 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.311 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 21 
    [1.300, 1.350) = 27 
    [1.350, 1.400) = 1 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.295 s/op
     p(50.0000) =      1.301 s/op
     p(90.0000) =      1.309 s/op
     p(95.0000) =      1.348 s/op
     p(99.0000) =      1.700 s/op
     p(99.9000) =      1.700 s/op
     p(99.9900) =      1.700 s/op
     p(99.9990) =      1.700 s/op
     p(99.9999) =      1.700 s/op
    p(100.0000) =      1.700 s/op


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.311 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_graalvm-ee-19.1.1_1565052887625.json
{"wallclock_times": [66.49758447099998], "core_cycle_counts": [[84150708159], [46676437679], [47696578103], [44404528789]], "aperf_counts": [[83964129500], [46642626116], [47672786271], [44382114221]], "mperf_counts": [[83997806826], [46648402694], [47689572112], [44383337588]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 02:55:54: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-06 02:55:55: INFO] Estimated completion (whole session): 2019-08-06 04:40:14 (1:44:19 from now)
[2019-08-06 02:55:55: INFO] 12 executions left in scheduler queue
[2019-08-06 02:55:55: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-06 02:55:55: INFO] Estimated completion (next execution): 2019-08-06 02:59:32 (0:03:36 from now)
[2019-08-06 02:55:55: INFO] Reboot in preparation for next execution
[2019-08-06 03:01:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.645 s/op
Iteration   2: 1.334 s/op
Iteration   3: 1.395 s/op
Iteration   4: 1.279 s/op
Iteration   5: 1.278 s/op
Iteration   6: 1.278 s/op
Iteration   7: 1.276 s/op
Iteration   8: 1.280 s/op
Iteration   9: 1.278 s/op
Iteration  10: 1.277 s/op
Iteration  11: 1.280 s/op
Iteration  12: 1.278 s/op
Iteration  13: 1.277 s/op
Iteration  14: 1.278 s/op
Iteration  15: 1.276 s/op
Iteration  16: 1.278 s/op
Iteration  17: 1.277 s/op
Iteration  18: 1.277 s/op
Iteration  19: 1.276 s/op
Iteration  20: 1.276 s/op
Iteration  21: 1.277 s/op
Iteration  22: 1.276 s/op
Iteration  23: 1.276 s/op
Iteration  24: 1.277 s/op
Iteration  25: 1.279 s/op
Iteration  26: 1.279 s/op
Iteration  27: 1.276 s/op
Iteration  28: 1.279 s/op
Iteration  29: 1.276 s/op
Iteration  30: 1.277 s/op
Iteration  31: 1.277 s/op
Iteration  32: 1.276 s/op
Iteration  33: 1.276 s/op
Iteration  34: 1.276 s/op
Iteration  35: 1.277 s/op
Iteration  36: 1.276 s/op
Iteration  37: 1.276 s/op
Iteration  38: 1.276 s/op
Iteration  39: 1.276 s/op
Iteration  40: 1.276 s/op
Iteration  41: 1.278 s/op
Iteration  42: 1.276 s/op
Iteration  43: 1.279 s/op
Iteration  44: 1.280 s/op
Iteration  45: 1.279 s/op
Iteration  46: 1.278 s/op
Iteration  47: 1.275 s/op
Iteration  48: 1.276 s/op
Iteration  49: 1.275 s/op
Iteration  50: 1.276 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.288 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 47 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 1 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.275 s/op
     p(50.0000) =      1.277 s/op
     p(90.0000) =      1.280 s/op
     p(95.0000) =      1.362 s/op
     p(99.0000) =      1.645 s/op
     p(99.9000) =      1.645 s/op
     p(99.9900) =      1.645 s/op
     p(99.9990) =      1.645 s/op
     p(99.9999) =      1.645 s/op
    p(100.0000) =      1.645 s/op


# Run complete. Total time: 00:01:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.288 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_graalvm-ee-19.1.1_1565053209670.json
{"wallclock_times": [65.29267280799999], "core_cycle_counts": [[44804753407], [85535990135], [62976398730], [21534685964]], "aperf_counts": [[44638733529], [85517607696], [62959293744], [21519960941]], "mperf_counts": [[44666490166], [85528742870], [62959873650], [21520664112]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 03:01:14: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-06 03:01:15: INFO] Estimated completion (whole session): 2019-08-06 04:42:01 (1:40:45 from now)
[2019-08-06 03:01:15: INFO] 11 executions left in scheduler queue
[2019-08-06 03:01:15: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-08-06 03:01:15: INFO] Estimated completion (next execution): 2019-08-06 03:04:50 (0:03:34 from now)
[2019-08-06 03:01:15: INFO] Reboot in preparation for next execution
[2019-08-06 03:09:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.127 s/op
Iteration   2: 5.164 s/op
Iteration   3: 5.278 s/op
Iteration   4: 5.212 s/op
Iteration   5: 5.217 s/op
Iteration   6: 5.203 s/op
Iteration   7: 5.235 s/op
Iteration   8: 5.211 s/op
Iteration   9: 5.219 s/op
Iteration  10: 5.230 s/op
Iteration  11: 5.227 s/op
Iteration  12: 5.223 s/op
Iteration  13: 5.206 s/op
Iteration  14: 5.234 s/op
Iteration  15: 5.236 s/op
Iteration  16: 5.192 s/op
Iteration  17: 5.235 s/op
Iteration  18: 5.206 s/op
Iteration  19: 5.224 s/op
Iteration  20: 5.223 s/op
Iteration  21: 5.234 s/op
Iteration  22: 5.238 s/op
Iteration  23: 5.201 s/op
Iteration  24: 5.218 s/op
Iteration  25: 5.229 s/op
Iteration  26: 5.196 s/op
Iteration  27: 5.203 s/op
Iteration  28: 5.236 s/op
Iteration  29: 5.219 s/op
Iteration  30: 5.229 s/op
Iteration  31: 5.236 s/op
Iteration  32: 5.223 s/op
Iteration  33: 5.209 s/op
Iteration  34: 5.223 s/op
Iteration  35: 5.229 s/op
Iteration  36: 5.193 s/op
Iteration  37: 5.222 s/op
Iteration  38: 5.221 s/op
Iteration  39: 5.225 s/op
Iteration  40: 5.233 s/op
Iteration  41: 5.230 s/op
Iteration  42: 5.225 s/op
Iteration  43: 5.213 s/op
Iteration  44: 5.222 s/op
Iteration  45: 5.209 s/op
Iteration  46: 5.225 s/op
Iteration  47: 5.216 s/op
Iteration  48: 5.220 s/op
Iteration  49: 5.226 s/op
Iteration  50: 5.216 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      5.198 ?(99.9%) 0.077 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 1 
    [4.250, 4.375) = 0 
    [4.375, 4.500) = 0 
    [4.500, 4.625) = 0 
    [4.625, 4.750) = 0 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 0 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 48 
    [5.250, 5.375) = 1 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.127 s/op
     p(50.0000) =      5.222 s/op
     p(90.0000) =      5.236 s/op
     p(95.0000) =      5.237 s/op
     p(99.0000) =      5.278 s/op
     p(99.9000) =      5.278 s/op
     p(99.9900) =      5.278 s/op
     p(99.9990) =      5.278 s/op
     p(99.9999) =      5.278 s/op
    p(100.0000) =      5.278 s/op


# Run complete. Total time: 00:04:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.198 ? 0.077   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_graalvm-ee-19.1.1_1565053528536.json
{"wallclock_times": [260.849806983], "core_cycle_counts": [[196172848460], [199569755796], [234097040226], [214062563957]], "aperf_counts": [[195524069275], [199504475605], [234056701305], [214028619210]], "mperf_counts": [[195562662958], [199526357022], [234057616016], [214030452900]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 03:09:49: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-08-06 03:09:50: INFO] Estimated completion (whole session): 2019-08-06 04:43:59 (1:34:08 from now)
[2019-08-06 03:09:50: INFO] 10 executions left in scheduler queue
[2019-08-06 03:09:50: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-08-06 03:09:50: INFO] Estimated completion (next execution): 2019-08-06 03:16:34 (0:06:44 from now)
[2019-08-06 03:09:50: INFO] Reboot in preparation for next execution
[2019-08-06 03:16:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.973 s/op
Iteration   2: 2.597 s/op
Iteration   3: 2.622 s/op
Iteration   4: 2.555 s/op
Iteration   5: 2.550 s/op
Iteration   6: 2.551 s/op
Iteration   7: 2.560 s/op
Iteration   8: 2.546 s/op
Iteration   9: 2.555 s/op
Iteration  10: 2.550 s/op
Iteration  11: 2.558 s/op
Iteration  12: 2.550 s/op
Iteration  13: 2.557 s/op
Iteration  14: 2.549 s/op
Iteration  15: 2.532 s/op
Iteration  16: 2.549 s/op
Iteration  17: 2.549 s/op
Iteration  18: 2.552 s/op
Iteration  19: 2.558 s/op
Iteration  20: 2.549 s/op
Iteration  21: 2.551 s/op
Iteration  22: 2.550 s/op
Iteration  23: 2.543 s/op
Iteration  24: 2.573 s/op
Iteration  25: 2.550 s/op
Iteration  26: 2.554 s/op
Iteration  27: 2.562 s/op
Iteration  28: 2.549 s/op
Iteration  29: 2.552 s/op
Iteration  30: 2.551 s/op
Iteration  31: 2.573 s/op
Iteration  32: 2.552 s/op
Iteration  33: 2.551 s/op
Iteration  34: 2.548 s/op
Iteration  35: 2.554 s/op
Iteration  36: 2.551 s/op
Iteration  37: 2.571 s/op
Iteration  38: 2.551 s/op
Iteration  39: 2.571 s/op
Iteration  40: 2.551 s/op
Iteration  41: 2.556 s/op
Iteration  42: 2.552 s/op
Iteration  43: 2.554 s/op
Iteration  44: 2.565 s/op
Iteration  45: 2.551 s/op
Iteration  46: 2.550 s/op
Iteration  47: 2.547 s/op
Iteration  48: 2.548 s/op
Iteration  49: 2.537 s/op
Iteration  50: 2.553 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      2.564 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [2.500, 2.550) = 17 
    [2.550, 2.600) = 31 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.532 s/op
     p(50.0000) =      2.551 s/op
     p(90.0000) =      2.572 s/op
     p(95.0000) =      2.608 s/op
     p(99.0000) =      2.973 s/op
     p(99.9000) =      2.973 s/op
     p(99.9900) =      2.973 s/op
     p(99.9990) =      2.973 s/op
     p(99.9999) =      2.973 s/op
    p(100.0000) =      2.973 s/op


# Run complete. Total time: 00:02:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.564 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_graalvm-ee-19.1.1_1565054058986.json
{"wallclock_times": [129.11140279600002], "core_cycle_counts": [[112716542885], [88751266440], [131219721688], [87072491758]], "aperf_counts": [[112394986518], [88709297044], [131192076625], [87045689583]], "mperf_counts": [[112422263676], [88739186598], [131192298940], [87048629850]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 03:16:28: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-08-06 03:16:29: INFO] Estimated completion (whole session): 2019-08-06 04:45:54 (1:29:25 from now)
[2019-08-06 03:16:29: INFO] 9 executions left in scheduler queue
[2019-08-06 03:16:29: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-08-06 03:16:29: INFO] Estimated completion (next execution): 2019-08-06 03:21:10 (0:04:41 from now)
[2019-08-06 03:16:29: INFO] Reboot in preparation for next execution
[2019-08-06 03:20:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 03:20:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 03:20:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 03:20:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 03:20:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 03:31:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.193 s/op
Iteration   2: 13.264 s/op
Iteration   3: 13.322 s/op
Iteration   4: 13.343 s/op
Iteration   5: 13.229 s/op
Iteration   6: 13.166 s/op
Iteration   7: 13.210 s/op
Iteration   8: 13.284 s/op
Iteration   9: 13.077 s/op
Iteration  10: 13.139 s/op
Iteration  11: 13.110 s/op
Iteration  12: 13.159 s/op
Iteration  13: 13.128 s/op
Iteration  14: 13.182 s/op
Iteration  15: 13.163 s/op
Iteration  16: 13.116 s/op
Iteration  17: 13.157 s/op
Iteration  18: 13.129 s/op
Iteration  19: 13.158 s/op
Iteration  20: 13.285 s/op
Iteration  21: 13.134 s/op
Iteration  22: 13.176 s/op
Iteration  23: 13.154 s/op
Iteration  24: 13.265 s/op
Iteration  25: 13.149 s/op
Iteration  26: 13.257 s/op
Iteration  27: 13.156 s/op
Iteration  28: 13.221 s/op
Iteration  29: 13.246 s/op
Iteration  30: 13.190 s/op
Iteration  31: 13.221 s/op
Iteration  32: 13.198 s/op
Iteration  33: 13.100 s/op
Iteration  34: 13.181 s/op
Iteration  35: 13.226 s/op
Iteration  36: 13.290 s/op
Iteration  37: 13.125 s/op
Iteration  38: 13.157 s/op
Iteration  39: 13.261 s/op
Iteration  40: 13.237 s/op
Iteration  41: 13.165 s/op
Iteration  42: 13.264 s/op
Iteration  43: 13.114 s/op
Iteration  44: 13.186 s/op
Iteration  45: 13.234 s/op
Iteration  46: 13.179 s/op
Iteration  47: 13.149 s/op
Iteration  48: 13.140 s/op
Iteration  49: 13.239 s/op
Iteration  50: 13.158 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.212 ?(99.9%) 0.076 s/op

  Histogram, s/op:
    [13.000, 13.125) = 6 
    [13.125, 13.250) = 33 
    [13.250, 13.375) = 10 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 0 
    [13.875, 14.000) = 0 
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 1 
    [14.250, 14.375) = 0 
    [14.375, 14.500) = 0 
    [14.500, 14.625) = 0 
    [14.625, 14.750) = 0 
    [14.750, 14.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.077 s/op
     p(50.0000) =     13.180 s/op
     p(90.0000) =     13.285 s/op
     p(95.0000) =     13.331 s/op
     p(99.0000) =     14.193 s/op
     p(99.9000) =     14.193 s/op
     p(99.9900) =     14.193 s/op
     p(99.9990) =     14.193 s/op
     p(99.9999) =     14.193 s/op
    p(100.0000) =     14.193 s/op


# Run complete. Total time: 00:11:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.212 ? 0.076   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot_12.0.2_1565054441815.json
{"wallclock_times": [661.655798139], "core_cycle_counts": [[498567625761], [522919919037], [738607374612], [601062274317]], "aperf_counts": [[496642023564], [522696757155], [738402311058], [600890010076]], "mperf_counts": [[503698720726], [528317332396], [746824362808], [607348264608]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-06 03:31:43: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-08-06 03:31:44: INFO] Estimated completion (whole session): 2019-08-06 04:47:25 (1:15:41 from now)
[2019-08-06 03:31:44: INFO] 8 executions left in scheduler queue
[2019-08-06 03:31:44: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 03:31:44: INFO] Estimated completion (next execution): 2019-08-06 03:45:22 (0:13:38 from now)
[2019-08-06 03:31:44: INFO] Reboot in preparation for next execution
[2019-08-06 03:35:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 03:35:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 03:35:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 03:35:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 03:35:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 03:35:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-06 03:41:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.833 s/op
Iteration   2: 6.409 s/op
Iteration   3: 6.182 s/op
Iteration   4: 6.206 s/op
Iteration   5: 6.126 s/op
Iteration   6: 6.142 s/op
Iteration   7: 6.223 s/op
Iteration   8: 6.112 s/op
Iteration   9: 6.275 s/op
Iteration  10: 6.257 s/op
Iteration  11: 6.323 s/op
Iteration  12: 6.375 s/op
Iteration  13: 6.361 s/op
Iteration  14: 6.344 s/op
Iteration  15: 6.334 s/op
Iteration  16: 6.372 s/op
Iteration  17: 6.291 s/op
Iteration  18: 6.410 s/op
Iteration  19: 6.325 s/op
Iteration  20: 6.347 s/op
Iteration  21: 6.335 s/op
Iteration  22: 6.274 s/op
Iteration  23: 6.344 s/op
Iteration  24: 6.294 s/op
Iteration  25: 6.221 s/op
Iteration  26: 6.329 s/op
Iteration  27: 6.346 s/op
Iteration  28: 6.325 s/op
Iteration  29: 6.379 s/op
Iteration  30: 6.314 s/op
Iteration  31: 6.291 s/op
Iteration  32: 6.311 s/op
Iteration  33: 6.287 s/op
Iteration  34: 6.310 s/op
Iteration  35: 6.224 s/op
Iteration  36: 6.389 s/op
Iteration  37: 6.344 s/op
Iteration  38: 6.272 s/op
Iteration  39: 6.358 s/op
Iteration  40: 6.303 s/op
Iteration  41: 6.266 s/op
Iteration  42: 6.286 s/op
Iteration  43: 6.226 s/op
Iteration  44: 6.305 s/op
Iteration  45: 6.257 s/op
Iteration  46: 6.279 s/op
Iteration  47: 6.284 s/op
Iteration  48: 6.296 s/op
Iteration  49: 6.292 s/op
Iteration  50: 6.394 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.328 ?(99.9%) 0.113 s/op

  Histogram, s/op:
    [6.000, 6.125) = 1 
    [6.125, 6.250) = 8 
    [6.250, 6.375) = 35 
    [6.375, 6.500) = 5 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.112 s/op
     p(50.0000) =      6.304 s/op
     p(90.0000) =      6.388 s/op
     p(95.0000) =      6.410 s/op
     p(99.0000) =      7.833 s/op
     p(99.9000) =      7.833 s/op
     p(99.9900) =      7.833 s/op
     p(99.9990) =      7.833 s/op
     p(99.9999) =      7.833 s/op
    p(100.0000) =      7.833 s/op


# Run complete. Total time: 00:05:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  6.328 ? 0.113   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9_12.0.1_1565055357797.json
{"wallclock_times": [317.98694609], "core_cycle_counts": [[243939070480], [285885930810], [398874774550], [162463870287]], "aperf_counts": [[243073074600], [285777932088], [398786679578], [162414736775]], "mperf_counts": [[243083443016], [285779949442], [398786976302], [162414825618]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 03:41:15: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 03:41:16: INFO] Estimated completion (whole session): 2019-08-06 04:47:37 (1:06:21 from now)
[2019-08-06 03:41:16: INFO] 7 executions left in scheduler queue
[2019-08-06 03:41:16: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 03:41:16: INFO] Estimated completion (next execution): 2019-08-06 03:49:51 (0:08:34 from now)
[2019-08-06 03:41:16: INFO] Reboot in preparation for next execution
[2019-08-06 03:45:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 03:45:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 03:45:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 03:45:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 03:45:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 03:45:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-06 03:57:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.239 s/op
Iteration   2: 14.061 s/op
Iteration   3: 14.057 s/op
Iteration   4: 14.197 s/op
Iteration   5: 14.152 s/op
Iteration   6: 14.013 s/op
Iteration   7: 13.868 s/op
Iteration   8: 13.949 s/op
Iteration   9: 13.755 s/op
Iteration  10: 13.831 s/op
Iteration  11: 13.959 s/op
Iteration  12: 13.820 s/op
Iteration  13: 13.848 s/op
Iteration  14: 13.814 s/op
Iteration  15: 13.853 s/op
Iteration  16: 13.879 s/op
Iteration  17: 13.923 s/op
Iteration  18: 13.785 s/op
Iteration  19: 13.884 s/op
Iteration  20: 13.978 s/op
Iteration  21: 13.819 s/op
Iteration  22: 13.864 s/op
Iteration  23: 13.949 s/op
Iteration  24: 13.813 s/op
Iteration  25: 13.862 s/op
Iteration  26: 13.995 s/op
Iteration  27: 13.798 s/op
Iteration  28: 13.808 s/op
Iteration  29: 13.933 s/op
Iteration  30: 13.741 s/op
Iteration  31: 13.873 s/op
Iteration  32: 13.853 s/op
Iteration  33: 13.919 s/op
Iteration  34: 13.758 s/op
Iteration  35: 13.817 s/op
Iteration  36: 13.887 s/op
Iteration  37: 13.844 s/op
Iteration  38: 13.852 s/op
Iteration  39: 13.915 s/op
Iteration  40: 13.721 s/op
Iteration  41: 13.880 s/op
Iteration  42: 13.861 s/op
Iteration  43: 13.802 s/op
Iteration  44: 13.845 s/op
Iteration  45: 13.885 s/op
Iteration  46: 13.801 s/op
Iteration  47: 13.799 s/op
Iteration  48: 13.867 s/op
Iteration  49: 13.804 s/op
Iteration  50: 13.896 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     13.907 ?(99.9%) 0.106 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 2 
    [13.750, 14.000) = 42 
    [14.000, 14.250) = 5 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 1 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.721 s/op
     p(50.0000) =     13.863 s/op
     p(90.0000) =     14.052 s/op
     p(95.0000) =     14.172 s/op
     p(99.0000) =     15.239 s/op
     p(99.9000) =     15.239 s/op
     p(99.9900) =     15.239 s/op
     p(99.9990) =     15.239 s/op
     p(99.9999) =     15.239 s/op
    p(100.0000) =     15.239 s/op


# Run complete. Total time: 00:11:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  13.907 ? 0.106   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9_12.0.1_1565055932214.json
{"wallclock_times": [696.9920499990001], "core_cycle_counts": [[868427576317], [396117803547], [338430153817], [653080894637]], "aperf_counts": [[866960082490], [395926487582], [338201441563], [652960423737]], "mperf_counts": [[866976200750], [395926427018], [338201568176], [652960493898]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 03:57:09: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 03:57:10: INFO] Estimated completion (whole session): 2019-08-06 04:43:45 (0:46:35 from now)
[2019-08-06 03:57:10: INFO] 6 executions left in scheduler queue
[2019-08-06 03:57:10: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 03:57:10: INFO] Estimated completion (next execution): 2019-08-06 04:14:06 (0:16:56 from now)
[2019-08-06 03:57:10: INFO] Reboot in preparation for next execution
[2019-08-06 04:01:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 04:01:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 04:01:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 04:01:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 04:01:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 04:01:24: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-06 04:05:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.470 s/op
Iteration   2: 5.593 s/op
Iteration   3: 4.991 s/op
Iteration   4: 5.052 s/op
Iteration   5: 5.093 s/op
Iteration   6: 5.111 s/op
Iteration   7: 4.876 s/op
Iteration   8: 4.881 s/op
Iteration   9: 4.879 s/op
Iteration  10: 4.889 s/op
Iteration  11: 4.857 s/op
Iteration  12: 4.830 s/op
Iteration  13: 4.826 s/op
Iteration  14: 4.839 s/op
Iteration  15: 4.857 s/op
Iteration  16: 4.848 s/op
Iteration  17: 4.859 s/op
Iteration  18: 4.840 s/op
Iteration  19: 4.886 s/op
Iteration  20: 4.799 s/op
Iteration  21: 4.827 s/op
Iteration  22: 4.804 s/op
Iteration  23: 4.830 s/op
Iteration  24: 4.835 s/op
Iteration  25: 4.824 s/op
Iteration  26: 4.834 s/op
Iteration  27: 4.822 s/op
Iteration  28: 4.862 s/op
Iteration  29: 4.906 s/op
Iteration  30: 4.861 s/op
Iteration  31: 4.802 s/op
Iteration  32: 4.797 s/op
Iteration  33: 4.813 s/op
Iteration  34: 4.811 s/op
Iteration  35: 4.855 s/op
Iteration  36: 4.848 s/op
Iteration  37: 4.852 s/op
Iteration  38: 4.854 s/op
Iteration  39: 4.848 s/op
Iteration  40: 4.822 s/op
Iteration  41: 4.816 s/op
Iteration  42: 4.854 s/op
Iteration  43: 4.816 s/op
Iteration  44: 4.858 s/op
Iteration  45: 4.859 s/op
Iteration  46: 4.841 s/op
Iteration  47: 4.849 s/op
Iteration  48: 4.831 s/op
Iteration  49: 4.842 s/op
Iteration  50: 4.858 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.908 ?(99.9%) 0.127 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 
    [4.750, 5.000) = 45 
    [5.000, 5.250) = 3 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.797 s/op
     p(50.0000) =      4.848 s/op
     p(90.0000) =      5.046 s/op
     p(95.0000) =      5.328 s/op
     p(99.0000) =      6.470 s/op
     p(99.9000) =      6.470 s/op
     p(99.9900) =      6.470 s/op
     p(99.9990) =      6.470 s/op
     p(99.9999) =      6.470 s/op
    p(100.0000) =      6.470 s/op


# Run complete. Total time: 00:04:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.908 ? 0.127   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9_12.0.1_1565056884058.json
{"wallclock_times": [247.26569577100003], "core_cycle_counts": [[281684022736], [241273137828], [242543308745], [157669246069]], "aperf_counts": [[281054017867], [241191807638], [242412425668], [157547517075]], "mperf_counts": [[281064853202], [241192402660], [242412859592], [157547708676]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 04:05:31: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 04:05:32: INFO] Estimated completion (whole session): 2019-08-06 04:45:50 (0:40:18 from now)
[2019-08-06 04:05:32: INFO] 5 executions left in scheduler queue
[2019-08-06 04:05:32: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 04:05:32: INFO] Estimated completion (next execution): 2019-08-06 04:11:59 (0:06:27 from now)
[2019-08-06 04:05:32: INFO] Reboot in preparation for next execution
[2019-08-06 04:09:44: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-06 04:09:44: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-06 04:09:44: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-06 04:09:44: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-06 04:09:44: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-06 04:09:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-06 04:13:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.744 s/op
Iteration   2: 6.042 s/op
Iteration   3: 5.457 s/op
Iteration   4: 5.449 s/op
Iteration   5: 4.786 s/op
Iteration   6: 4.976 s/op
Iteration   7: 4.865 s/op
Iteration   8: 4.755 s/op
Iteration   9: 4.949 s/op
Iteration  10: 4.925 s/op
Iteration  11: 4.790 s/op
Iteration  12: 4.904 s/op
Iteration  13: 4.855 s/op
Iteration  14: 4.795 s/op
Iteration  15: 4.894 s/op
Iteration  16: 4.846 s/op
Iteration  17: 5.049 s/op
Iteration  18: 4.927 s/op
Iteration  19: 4.850 s/op
Iteration  20: 4.992 s/op
Iteration  21: 4.907 s/op
Iteration  22: 4.793 s/op
Iteration  23: 4.929 s/op
Iteration  24: 4.846 s/op
Iteration  25: 4.772 s/op
Iteration  26: 4.923 s/op
Iteration  27: 4.852 s/op
Iteration  28: 5.047 s/op
Iteration  29: 4.903 s/op
Iteration  30: 4.807 s/op
Iteration  31: 4.949 s/op
Iteration  32: 4.955 s/op
Iteration  33: 4.800 s/op
Iteration  34: 5.016 s/op
Iteration  35: 4.828 s/op
Iteration  36: 4.822 s/op
Iteration  37: 4.916 s/op
Iteration  38: 4.871 s/op
Iteration  39: 4.798 s/op
Iteration  40: 4.908 s/op
Iteration  41: 4.792 s/op
Iteration  42: 5.005 s/op
Iteration  43: 4.924 s/op
Iteration  44: 4.773 s/op
Iteration  45: 4.985 s/op
Iteration  46: 4.897 s/op
Iteration  47: 4.830 s/op
Iteration  48: 4.953 s/op
Iteration  49: 4.895 s/op
Iteration  50: 4.811 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.967 ?(99.9%) 0.164 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 
    [4.750, 5.000) = 42 
    [5.000, 5.250) = 4 
    [5.250, 5.500) = 2 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.755 s/op
     p(50.0000) =      4.900 s/op
     p(90.0000) =      5.049 s/op
     p(95.0000) =      5.720 s/op
     p(99.0000) =      6.744 s/op
     p(99.9000) =      6.744 s/op
     p(99.9900) =      6.744 s/op
     p(99.9990) =      6.744 s/op
     p(99.9999) =      6.744 s/op
    p(100.0000) =      6.744 s/op


# Run complete. Total time: 00:04:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.967 ? 0.164   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9_12.0.1_1565057384967.json
{"wallclock_times": [250.24193795899998], "core_cycle_counts": [[250676192205], [177796561300], [225591338403], [236180849618]], "aperf_counts": [[250052487396], [177690689131], [225469095766], [236109105867]], "mperf_counts": [[250057963888], [177690811080], [225469141828], [236109098984]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-06 04:13:55: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-06 04:13:56: INFO] Estimated completion (whole session): 2019-08-06 04:47:23 (0:33:26 from now)
[2019-08-06 04:13:56: INFO] 4 executions left in scheduler queue
[2019-08-06 04:13:56: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:13:56: INFO] Estimated completion (next execution): 2019-08-06 04:20:42 (0:06:46 from now)
[2019-08-06 04:13:56: INFO] Reboot in preparation for next execution
[2019-08-06 04:22:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.115 s/op
Iteration   2: 4.639 s/op
Iteration   3: 4.545 s/op
Iteration   4: 4.607 s/op
Iteration   5: 4.575 s/op
Iteration   6: 4.588 s/op
Iteration   7: 4.571 s/op
Iteration   8: 4.584 s/op
Iteration   9: 4.592 s/op
Iteration  10: 4.574 s/op
Iteration  11: 4.600 s/op
Iteration  12: 4.586 s/op
Iteration  13: 4.590 s/op
Iteration  14: 4.594 s/op
Iteration  15: 4.595 s/op
Iteration  16: 4.536 s/op
Iteration  17: 4.596 s/op
Iteration  18: 4.579 s/op
Iteration  19: 4.583 s/op
Iteration  20: 4.583 s/op
Iteration  21: 4.589 s/op
Iteration  22: 4.585 s/op
Iteration  23: 4.586 s/op
Iteration  24: 4.589 s/op
Iteration  25: 4.529 s/op
Iteration  26: 4.593 s/op
Iteration  27: 4.592 s/op
Iteration  28: 4.589 s/op
Iteration  29: 4.605 s/op
Iteration  30: 4.590 s/op
Iteration  31: 4.596 s/op
Iteration  32: 4.584 s/op
Iteration  33: 4.541 s/op
Iteration  34: 4.581 s/op
Iteration  35: 4.568 s/op
Iteration  36: 4.592 s/op
Iteration  37: 4.580 s/op
Iteration  38: 4.593 s/op
Iteration  39: 4.600 s/op
Iteration  40: 4.585 s/op
Iteration  41: 4.533 s/op
Iteration  42: 4.588 s/op
Iteration  43: 4.581 s/op
Iteration  44: 4.591 s/op
Iteration  45: 4.598 s/op
Iteration  46: 4.591 s/op
Iteration  47: 4.604 s/op
Iteration  48: 4.905 s/op
Iteration  49: 4.573 s/op
Iteration  50: 4.538 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.600 ?(99.9%) 0.044 s/op

  Histogram, s/op:
    [4.500, 4.550) = 6 
    [4.550, 4.600) = 38 
    [4.600, 4.650) = 4 
    [4.650, 4.700) = 0 
    [4.700, 4.750) = 0 
    [4.750, 4.800) = 0 
    [4.800, 4.850) = 0 
    [4.850, 4.900) = 0 
    [4.900, 4.950) = 1 
    [4.950, 5.000) = 0 
    [5.000, 5.050) = 0 
    [5.050, 5.100) = 0 
    [5.100, 5.150) = 1 
    [5.150, 5.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.529 s/op
     p(50.0000) =      4.588 s/op
     p(90.0000) =      4.605 s/op
     p(95.0000) =      4.759 s/op
     p(99.0000) =      5.115 s/op
     p(99.9000) =      5.115 s/op
     p(99.9900) =      5.115 s/op
     p(99.9990) =      5.115 s/op
     p(99.9999) =      5.115 s/op
    p(100.0000) =      5.115 s/op


# Run complete. Total time: 00:03:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.600 ? 0.044   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_graalvm-ce-19.1.1_1565057890740.json
{"wallclock_times": [231.069397434], "core_cycle_counts": [[291702167383], [264231001579], [142309745437], [122658682420]], "aperf_counts": [[291176927484], [264159999640], [142254059748], [122605288336]], "mperf_counts": [[291202161448], [264169433072], [142254967414], [122610258018]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 04:22:01: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:22:02: INFO] Estimated completion (whole session): 2019-08-06 04:49:11 (0:27:08 from now)
[2019-08-06 04:22:02: INFO] 3 executions left in scheduler queue
[2019-08-06 04:22:02: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:22:02: INFO] Estimated completion (next execution): 2019-08-06 04:28:22 (0:06:20 from now)
[2019-08-06 04:22:02: INFO] Reboot in preparation for next execution
[2019-08-06 04:33:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.782 s/op
Iteration   2: 8.235 s/op
Iteration   3: 8.045 s/op
Iteration   4: 8.033 s/op
Iteration   5: 8.047 s/op
Iteration   6: 8.030 s/op
Iteration   7: 8.054 s/op
Iteration   8: 8.061 s/op
Iteration   9: 8.060 s/op
Iteration  10: 8.075 s/op
Iteration  11: 8.053 s/op
Iteration  12: 8.041 s/op
Iteration  13: 8.067 s/op
Iteration  14: 8.061 s/op
Iteration  15: 8.056 s/op
Iteration  16: 8.071 s/op
Iteration  17: 8.071 s/op
Iteration  18: 8.069 s/op
Iteration  19: 8.062 s/op
Iteration  20: 8.061 s/op
Iteration  21: 8.056 s/op
Iteration  22: 8.036 s/op
Iteration  23: 8.046 s/op
Iteration  24: 8.070 s/op
Iteration  25: 8.060 s/op
Iteration  26: 8.072 s/op
Iteration  27: 8.060 s/op
Iteration  28: 8.044 s/op
Iteration  29: 8.076 s/op
Iteration  30: 8.056 s/op
Iteration  31: 8.076 s/op
Iteration  32: 8.074 s/op
Iteration  33: 8.062 s/op
Iteration  34: 8.071 s/op
Iteration  35: 8.087 s/op
Iteration  36: 8.055 s/op
Iteration  37: 8.059 s/op
Iteration  38: 8.067 s/op
Iteration  39: 8.058 s/op
Iteration  40: 8.056 s/op
Iteration  41: 8.089 s/op
Iteration  42: 8.045 s/op
Iteration  43: 8.037 s/op
Iteration  44: 8.072 s/op
Iteration  45: 8.084 s/op
Iteration  46: 8.066 s/op
Iteration  47: 8.080 s/op
Iteration  48: 8.063 s/op
Iteration  49: 8.053 s/op
Iteration  50: 8.059 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.058 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [7.700, 7.750) = 0 
    [7.750, 7.800) = 1 
    [7.800, 7.850) = 0 
    [7.850, 7.900) = 0 
    [7.900, 7.950) = 0 
    [7.950, 8.000) = 0 
    [8.000, 8.050) = 10 
    [8.050, 8.100) = 38 
    [8.100, 8.150) = 0 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 1 
    [8.250, 8.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.782 s/op
     p(50.0000) =      8.061 s/op
     p(90.0000) =      8.079 s/op
     p(95.0000) =      8.088 s/op
     p(99.0000) =      8.235 s/op
     p(99.9000) =      8.235 s/op
     p(99.9900) =      8.235 s/op
     p(99.9990) =      8.235 s/op
     p(99.9999) =      8.235 s/op
    p(100.0000) =      8.235 s/op


# Run complete. Total time: 00:06:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  8.058 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_graalvm-ce-19.1.1_1565058376685.json
{"wallclock_times": [403.83366038], "core_cycle_counts": [[190232840729], [281930496375], [419194644454], [411345859640]], "aperf_counts": [[189186051756], [281875200481], [419147544938], [411312245355]], "mperf_counts": [[189207108126], [281892623052], [419148943958], [411323217780]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 04:33:00: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:33:01: INFO] Estimated completion (whole session): 2019-08-06 04:51:05 (0:18:03 from now)
[2019-08-06 04:33:01: INFO] 2 executions left in scheduler queue
[2019-08-06 04:33:01: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:33:01: INFO] Estimated completion (next execution): 2019-08-06 04:42:10 (0:09:09 from now)
[2019-08-06 04:33:01: INFO] Reboot in preparation for next execution
[2019-08-06 04:41:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.928 s/op
Iteration   2: 4.506 s/op
Iteration   3: 4.435 s/op
Iteration   4: 4.431 s/op
Iteration   5: 4.418 s/op
Iteration   6: 4.401 s/op
Iteration   7: 4.393 s/op
Iteration   8: 4.397 s/op
Iteration   9: 4.410 s/op
Iteration  10: 4.439 s/op
Iteration  11: 4.406 s/op
Iteration  12: 4.393 s/op
Iteration  13: 4.427 s/op
Iteration  14: 4.405 s/op
Iteration  15: 4.430 s/op
Iteration  16: 4.423 s/op
Iteration  17: 4.387 s/op
Iteration  18: 4.430 s/op
Iteration  19: 4.421 s/op
Iteration  20: 4.366 s/op
Iteration  21: 4.387 s/op
Iteration  22: 4.413 s/op
Iteration  23: 4.383 s/op
Iteration  24: 4.382 s/op
Iteration  25: 4.384 s/op
Iteration  26: 4.367 s/op
Iteration  27: 4.400 s/op
Iteration  28: 4.415 s/op
Iteration  29: 4.379 s/op
Iteration  30: 4.416 s/op
Iteration  31: 4.365 s/op
Iteration  32: 4.386 s/op
Iteration  33: 4.444 s/op
Iteration  34: 4.412 s/op
Iteration  35: 4.408 s/op
Iteration  36: 4.394 s/op
Iteration  37: 4.425 s/op
Iteration  38: 4.422 s/op
Iteration  39: 4.399 s/op
Iteration  40: 4.387 s/op
Iteration  41: 4.377 s/op
Iteration  42: 4.403 s/op
Iteration  43: 4.370 s/op
Iteration  44: 4.398 s/op
Iteration  45: 4.383 s/op
Iteration  46: 4.345 s/op
Iteration  47: 4.396 s/op
Iteration  48: 4.380 s/op
Iteration  49: 4.394 s/op
Iteration  50: 4.381 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.413 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [4.300, 4.350) = 1 
    [4.350, 4.400) = 24 
    [4.400, 4.450) = 23 
    [4.450, 4.500) = 0 
    [4.500, 4.550) = 1 
    [4.550, 4.600) = 0 
    [4.600, 4.650) = 0 
    [4.650, 4.700) = 0 
    [4.700, 4.750) = 0 
    [4.750, 4.800) = 0 
    [4.800, 4.850) = 0 
    [4.850, 4.900) = 0 
    [4.900, 4.950) = 1 
    [4.950, 5.000) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.345 s/op
     p(50.0000) =      4.399 s/op
     p(90.0000) =      4.434 s/op
     p(95.0000) =      4.472 s/op
     p(99.0000) =      4.928 s/op
     p(99.9000) =      4.928 s/op
     p(99.9900) =      4.928 s/op
     p(99.9990) =      4.928 s/op
     p(99.9999) =      4.928 s/op
    p(100.0000) =      4.928 s/op


# Run complete. Total time: 00:03:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.413 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_graalvm-ce-19.1.1_1565059048156.json
{"wallclock_times": [221.647229543], "core_cycle_counts": [[171660564892], [159455581892], [245186696206], [147838441754]], "aperf_counts": [[171130927129], [159407315627], [245166667790], [147815770066]], "mperf_counts": [[171142106120], [159427581952], [245179476996], [147821860072]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 04:41:09: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:41:10: INFO] Estimated completion (whole session): 2019-08-06 04:52:57 (0:11:47 from now)
[2019-08-06 04:41:10: INFO] 1 executions left in scheduler queue
[2019-08-06 04:41:10: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:41:10: INFO] Estimated completion (next execution): 2019-08-06 04:47:25 (0:06:14 from now)
[2019-08-06 04:41:10: INFO] Reboot in preparation for next execution
[2019-08-06 04:54:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.264 s/op
Iteration   2: 11.173 s/op
Iteration   3: 11.048 s/op
Iteration   4: 11.037 s/op
Iteration   5: 11.031 s/op
Iteration   6: 11.046 s/op
Iteration   7: 11.072 s/op
Iteration   8: 11.034 s/op
Iteration   9: 11.051 s/op
Iteration  10: 11.074 s/op
Iteration  11: 11.077 s/op
Iteration  12: 11.015 s/op
Iteration  13: 11.074 s/op
Iteration  14: 11.075 s/op
Iteration  15: 11.050 s/op
Iteration  16: 11.026 s/op
Iteration  17: 11.029 s/op
Iteration  18: 11.057 s/op
Iteration  19: 11.034 s/op
Iteration  20: 11.059 s/op
Iteration  21: 11.044 s/op
Iteration  22: 11.107 s/op
Iteration  23: 11.060 s/op
Iteration  24: 11.064 s/op
Iteration  25: 11.075 s/op
Iteration  26: 11.059 s/op
Iteration  27: 11.060 s/op
Iteration  28: 11.035 s/op
Iteration  29: 11.072 s/op
Iteration  30: 11.039 s/op
Iteration  31: 11.133 s/op
Iteration  32: 11.040 s/op
Iteration  33: 11.023 s/op
Iteration  34: 11.019 s/op
Iteration  35: 11.059 s/op
Iteration  36: 11.117 s/op
Iteration  37: 11.051 s/op
Iteration  38: 11.049 s/op
Iteration  39: 11.025 s/op
Iteration  40: 11.048 s/op
Iteration  41: 11.036 s/op
Iteration  42: 11.040 s/op
Iteration  43: 11.040 s/op
Iteration  44: 11.042 s/op
Iteration  45: 11.062 s/op
Iteration  46: 11.119 s/op
Iteration  47: 11.054 s/op
Iteration  48: 11.023 s/op
Iteration  49: 11.102 s/op
Iteration  50: 11.096 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.062 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [11.000, 11.025) = 4 
    [11.025, 11.050) = 19 
    [11.050, 11.075) = 18 
    [11.075, 11.100) = 2 
    [11.100, 11.125) = 4 
    [11.125, 11.150) = 1 
    [11.150, 11.175) = 1 
    [11.175, 11.200) = 0 
    [11.200, 11.225) = 0 
    [11.225, 11.250) = 0 
    [11.250, 11.275) = 1 
    [11.275, 11.300) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.015 s/op
     p(50.0000) =     11.051 s/op
     p(90.0000) =     11.116 s/op
     p(95.0000) =     11.151 s/op
     p(99.0000) =     11.264 s/op
     p(99.9000) =     11.264 s/op
     p(99.9900) =     11.264 s/op
     p(99.9990) =     11.264 s/op
     p(99.9999) =     11.264 s/op
    p(100.0000) =     11.264 s/op


# Run complete. Total time: 00:09:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  11.062 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_graalvm-ce-19.1.1_1565059523756.json
{"wallclock_times": [554.069886529], "core_cycle_counts": [[686101571172], [543976784419], [220997956002], [336528632188]], "aperf_counts": [[685061042421], [543860252699], [220944881565], [336491879542]], "mperf_counts": [[685073584904], [543861280880], [220962216458], [336510211140]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-06 04:54:37: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-06 04:54:38: INFO] Estimated completion (whole session): 2019-08-06 04:54:38 (0:00:00 from now)
[2019-08-06 04:54:38: INFO] 0 executions left in scheduler queue
[2019-08-06 04:54:38: INFO] Done: Results dumped to /home/benchmarks/krun/examples/benchmarks_results.json.bz2
[2019-08-06 04:54:38: WARNING] Errors/warnings occurred -- read the log!
[2019-08-06 04:54:38: INFO] Session completed. Log file at: '/home/benchmarks/krun/examples/benchmarks.log'

Errors/warnings occurred -- read the log!

Don't forget to disable Krun at boot.
