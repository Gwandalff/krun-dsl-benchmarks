[2019-08-01 16:50:41: INFO] Wait 1 secs to allow system to cool prior to collecting initial temperature readings
[2019-08-01 16:54:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 16:54:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 16:54:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 16:54:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 16:54:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 17:05:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.482 s/op
Iteration   2: 12.578 s/op
Iteration   3: 12.251 s/op
Iteration   4: 12.474 s/op
Iteration   5: 12.227 s/op
Iteration   6: 12.446 s/op
Iteration   7: 12.264 s/op
Iteration   8: 12.236 s/op
Iteration   9: 12.188 s/op
Iteration  10: 12.321 s/op
Iteration  11: 12.212 s/op
Iteration  12: 12.173 s/op
Iteration  13: 12.342 s/op
Iteration  14: 12.257 s/op
Iteration  15: 12.368 s/op
Iteration  16: 12.105 s/op
Iteration  17: 12.189 s/op
Iteration  18: 12.343 s/op
Iteration  19: 12.255 s/op
Iteration  20: 12.314 s/op
Iteration  21: 12.270 s/op
Iteration  22: 12.356 s/op
Iteration  23: 12.158 s/op
Iteration  24: 12.265 s/op
Iteration  25: 12.194 s/op
Iteration  26: 12.331 s/op
Iteration  27: 12.173 s/op
Iteration  28: 12.291 s/op
Iteration  29: 12.229 s/op
Iteration  30: 12.156 s/op
Iteration  31: 12.225 s/op
Iteration  32: 12.341 s/op
Iteration  33: 12.321 s/op
Iteration  34: 12.236 s/op
Iteration  35: 12.246 s/op
Iteration  36: 12.247 s/op
Iteration  37: 12.182 s/op
Iteration  38: 12.201 s/op
Iteration  39: 12.294 s/op
Iteration  40: 12.224 s/op
Iteration  41: 12.326 s/op
Iteration  42: 12.205 s/op
Iteration  43: 12.148 s/op
Iteration  44: 12.193 s/op
Iteration  45: 12.320 s/op
Iteration  46: 12.337 s/op
Iteration  47: 12.210 s/op
Iteration  48: 12.280 s/op
Iteration  49: 12.088 s/op
Iteration  50: 12.302 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.268 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [12.000, 12.050) = 0 
    [12.050, 12.100) = 1 
    [12.100, 12.150) = 2 
    [12.150, 12.200) = 9 
    [12.200, 12.250) = 12 
    [12.250, 12.300) = 9 
    [12.300, 12.350) = 11 
    [12.350, 12.400) = 2 
    [12.400, 12.450) = 1 
    [12.450, 12.500) = 2 
    [12.500, 12.550) = 0 
    [12.550, 12.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.088 s/op
     p(50.0000) =     12.253 s/op
     p(90.0000) =     12.367 s/op
     p(95.0000) =     12.478 s/op
     p(99.0000) =     12.578 s/op
     p(99.9000) =     12.578 s/op
     p(99.9900) =     12.578 s/op
     p(99.9990) =     12.578 s/op
     p(99.9999) =     12.578 s/op
    p(100.0000) =     12.578 s/op


# Run complete. Total time: 00:10:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.268 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_11.0.4_1564671299427.json
{"wallclock_times": [614.437760987], "core_cycle_counts": [[773375213310], [474462248926], [592775017160], [354916166215]], "aperf_counts": [[771836515926], [474133313097], [592523470841], [354757844089]], "mperf_counts": [[786703549598], [482270056248], [603378246792], [360558541438]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 17:05:13: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_11.0.4'
[2019-08-01 17:05:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:05:14: INFO] 511 executions left in scheduler queue
[2019-08-01 17:05:14: INFO] Executions until ETA known: 4072
[2019-08-01 17:05:14: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-08-01 17:05:14: INFO] Estimated completion (next execution): 2019-08-01 17:17:59 (0:12:44 from now)
[2019-08-01 17:05:14: INFO] Reboot in preparation for next execution
[2019-08-01 17:13:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.516 s/op
Iteration   2: 5.443 s/op
Iteration   3: 5.308 s/op
Iteration   4: 5.455 s/op
Iteration   5: 5.195 s/op
Iteration   6: 5.245 s/op
Iteration   7: 5.159 s/op
Iteration   8: 5.191 s/op
Iteration   9: 5.241 s/op
Iteration  10: 5.288 s/op
Iteration  11: 5.116 s/op
Iteration  12: 6.403 s/op
Iteration  13: 5.055 s/op
Iteration  14: 5.264 s/op
Iteration  15: 5.126 s/op
Iteration  16: 5.125 s/op
Iteration  17: 5.313 s/op
Iteration  18: 5.124 s/op
Iteration  19: 5.123 s/op
Iteration  20: 5.317 s/op
Iteration  21: 5.130 s/op
Iteration  22: 5.147 s/op
Iteration  23: 5.136 s/op
Iteration  24: 5.282 s/op
Iteration  25: 5.129 s/op
Iteration  26: 5.137 s/op
Iteration  27: 5.301 s/op
Iteration  28: 5.151 s/op
Iteration  29: 5.142 s/op
Iteration  30: 5.315 s/op
Iteration  31: 5.143 s/op
Iteration  32: 5.163 s/op
Iteration  33: 5.136 s/op
Iteration  34: 5.317 s/op
Iteration  35: 6.075 s/op
Iteration  36: 5.075 s/op
Iteration  37: 5.296 s/op
Iteration  38: 5.147 s/op
Iteration  39: 5.134 s/op
Iteration  40: 5.161 s/op
Iteration  41: 5.301 s/op
Iteration  42: 5.130 s/op
Iteration  43: 5.157 s/op
Iteration  44: 5.141 s/op
Iteration  45: 5.142 s/op
Iteration  46: 6.002 s/op
Iteration  47: 5.144 s/op
Iteration  48: 5.285 s/op
Iteration  49: 5.160 s/op
Iteration  50: 5.143 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.263 ?(99.9%) 0.125 s/op

  Histogram, s/op:
    [5.000, 5.125) = 6 
    [5.125, 5.250) = 26 
    [5.250, 5.375) = 12 
    [5.375, 5.500) = 2 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.055 s/op
     p(50.0000) =      5.159 s/op
     p(90.0000) =      5.454 s/op
     p(95.0000) =      6.035 s/op
     p(99.0000) =      6.403 s/op
     p(99.9000) =      6.403 s/op
     p(99.9900) =      6.403 s/op
     p(99.9990) =      6.403 s/op
     p(99.9999) =      6.403 s/op
    p(100.0000) =      6.403 s/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.263 ? 0.125   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_graalvm-ee-19.1.1_1564672172039.json
{"wallclock_times": [264.314189889], "core_cycle_counts": [[236564666004], [257017435551], [303382470376], [263624391633]], "aperf_counts": [[235860062611], [256945579502], [303343676963], [263591046746]], "mperf_counts": [[235882735180], [256946208528], [303349260138], [263591451486]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:13:56: WARNING] Mail quota reached.
[2019-08-01 17:13:56: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-08-01 17:13:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:13:57: INFO] 510 executions left in scheduler queue
[2019-08-01 17:13:57: INFO] Executions until ETA known: 4054
[2019-08-01 17:13:57: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-08-01 17:13:57: INFO] Estimated completion (next execution): 2019-08-01 17:20:52 (0:06:54 from now)
[2019-08-01 17:13:57: INFO] Reboot in preparation for next execution
[2019-08-01 17:18:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 17:18:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 17:18:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 17:18:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 17:18:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 17:29:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.909 s/op
Iteration   2: 13.783 s/op
Iteration   3: 13.709 s/op
Iteration   4: 13.522 s/op
Iteration   5: 13.500 s/op
Iteration   6: 13.524 s/op
Iteration   7: 13.525 s/op
Iteration   8: 13.496 s/op
Iteration   9: 13.427 s/op
Iteration  10: 13.431 s/op
Iteration  11: 13.642 s/op
Iteration  12: 13.496 s/op
Iteration  13: 13.471 s/op
Iteration  14: 13.478 s/op
Iteration  15: 13.584 s/op
Iteration  16: 13.459 s/op
Iteration  17: 13.537 s/op
Iteration  18: 13.567 s/op
Iteration  19: 13.655 s/op
Iteration  20: 13.469 s/op
Iteration  21: 13.416 s/op
Iteration  22: 13.572 s/op
Iteration  23: 13.482 s/op
Iteration  24: 13.425 s/op
Iteration  25: 13.607 s/op
Iteration  26: 13.418 s/op
Iteration  27: 13.596 s/op
Iteration  28: 13.721 s/op
Iteration  29: 13.464 s/op
Iteration  30: 13.573 s/op
Iteration  31: 13.569 s/op
Iteration  32: 13.440 s/op
Iteration  33: 13.436 s/op
Iteration  34: 13.503 s/op
Iteration  35: 13.466 s/op
Iteration  36: 13.425 s/op
Iteration  37: 13.524 s/op
Iteration  38: 13.462 s/op
Iteration  39: 13.538 s/op
Iteration  40: 13.603 s/op
Iteration  41: 13.664 s/op
Iteration  42: 13.460 s/op
Iteration  43: 13.481 s/op
Iteration  44: 13.461 s/op
Iteration  45: 13.625 s/op
Iteration  46: 13.467 s/op
Iteration  47: 13.477 s/op
Iteration  48: 13.568 s/op
Iteration  49: 13.456 s/op
Iteration  50: 13.664 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.535 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [13.400, 13.450) = 8 
    [13.450, 13.500) = 16 
    [13.500, 13.550) = 8 
    [13.550, 13.600) = 7 
    [13.600, 13.650) = 4 
    [13.650, 13.700) = 3 
    [13.700, 13.750) = 2 
    [13.750, 13.800) = 1 
    [13.800, 13.850) = 0 
    [13.850, 13.900) = 0 
    [13.900, 13.950) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.416 s/op
     p(50.0000) =     13.501 s/op
     p(90.0000) =     13.664 s/op
     p(95.0000) =     13.749 s/op
     p(99.0000) =     13.909 s/op
     p(99.9000) =     13.909 s/op
     p(99.9900) =     13.909 s/op
     p(99.9990) =     13.909 s/op
     p(99.9999) =     13.909 s/op
    p(100.0000) =     13.909 s/op


# Run complete. Total time: 00:11:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.535 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_12.0.2_1564672694496.json
{"wallclock_times": [677.7933071719999], "core_cycle_counts": [[475972603503], [469924272540], [905072246640], [580939993905]], "aperf_counts": [[474014747475], [469774386963], [904966220289], [580856467341]], "mperf_counts": [[478982547978], [473470843964], [914912376300], [585848563510]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 17:29:32: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-08-01 17:29:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:29:33: INFO] 509 executions left in scheduler queue
[2019-08-01 17:29:33: INFO] Executions until ETA known: 4013
[2019-08-01 17:29:33: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:29:33: INFO] Estimated completion (next execution): 2019-08-01 17:43:21 (0:13:48 from now)
[2019-08-01 17:29:33: INFO] Reboot in preparation for next execution
[2019-08-01 17:38:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.530 s/op
Iteration   2: 5.366 s/op
Iteration   3: 5.423 s/op
Iteration   4: 5.304 s/op
Iteration   5: 5.286 s/op
Iteration   6: 5.290 s/op
Iteration   7: 5.309 s/op
Iteration   8: 5.303 s/op
Iteration   9: 5.302 s/op
Iteration  10: 5.306 s/op
Iteration  11: 5.310 s/op
Iteration  12: 5.287 s/op
Iteration  13: 5.302 s/op
Iteration  14: 5.310 s/op
Iteration  15: 5.303 s/op
Iteration  16: 5.308 s/op
Iteration  17: 5.302 s/op
Iteration  18: 5.287 s/op
Iteration  19: 5.294 s/op
Iteration  20: 5.295 s/op
Iteration  21: 5.311 s/op
Iteration  22: 5.298 s/op
Iteration  23: 5.304 s/op
Iteration  24: 5.309 s/op
Iteration  25: 5.305 s/op
Iteration  26: 5.300 s/op
Iteration  27: 5.311 s/op
Iteration  28: 5.292 s/op
Iteration  29: 5.305 s/op
Iteration  30: 5.298 s/op
Iteration  31: 5.304 s/op
Iteration  32: 5.299 s/op
Iteration  33: 5.281 s/op
Iteration  34: 5.278 s/op
Iteration  35: 5.298 s/op
Iteration  36: 5.279 s/op
Iteration  37: 5.300 s/op
Iteration  38: 5.297 s/op
Iteration  39: 5.303 s/op
Iteration  40: 5.279 s/op
Iteration  41: 5.306 s/op
Iteration  42: 5.298 s/op
Iteration  43: 5.310 s/op
Iteration  44: 5.301 s/op
Iteration  45: 5.287 s/op
Iteration  46: 5.305 s/op
Iteration  47: 5.297 s/op
Iteration  48: 5.282 s/op
Iteration  49: 5.304 s/op
Iteration  50: 5.297 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.307 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [5.200, 5.225) = 0 
    [5.225, 5.250) = 0 
    [5.250, 5.275) = 0 
    [5.275, 5.300) = 22 
    [5.300, 5.325) = 25 
    [5.325, 5.350) = 0 
    [5.350, 5.375) = 1 
    [5.375, 5.400) = 0 
    [5.400, 5.425) = 1 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 0 
    [5.475, 5.500) = 0 
    [5.500, 5.525) = 0 
    [5.525, 5.550) = 1 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.278 s/op
     p(50.0000) =      5.302 s/op
     p(90.0000) =      5.311 s/op
     p(95.0000) =      5.392 s/op
     p(99.0000) =      5.530 s/op
     p(99.9000) =      5.530 s/op
     p(99.9900) =      5.530 s/op
     p(99.9990) =      5.530 s/op
     p(99.9999) =      5.530 s/op
    p(100.0000) =      5.530 s/op


# Run complete. Total time: 00:04:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.307 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ce-19.1.1_1564673630524.json
{"wallclock_times": [266.219631081], "core_cycle_counts": [[188565352799], [300128532305], [206291222618], [166018200758]], "aperf_counts": [[187959022889], [300076937226], [206245838896], [165985393179]], "mperf_counts": [[187965676334], [300082113448], [206259558612], [165993423750]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:38:16: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:38:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:38:17: INFO] 508 executions left in scheduler queue
[2019-08-01 17:38:17: INFO] Executions until ETA known: 4007
[2019-08-01 17:38:17: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:38:17: INFO] Estimated completion (next execution): 2019-08-01 17:45:14 (0:06:56 from now)
[2019-08-01 17:38:17: INFO] Reboot in preparation for next execution
[2019-08-01 17:50:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.957 s/op
Iteration   2: 9.869 s/op
Iteration   3: 9.846 s/op
Iteration   4: 9.980 s/op
Iteration   5: 9.852 s/op
Iteration   6: 9.907 s/op
Iteration   7: 9.830 s/op
Iteration   8: 9.833 s/op
Iteration   9: 9.842 s/op
Iteration  10: 9.851 s/op
Iteration  11: 9.829 s/op
Iteration  12: 9.891 s/op
Iteration  13: 9.801 s/op
Iteration  14: 9.896 s/op
Iteration  15: 9.848 s/op
Iteration  16: 9.842 s/op
Iteration  17: 9.879 s/op
Iteration  18: 9.872 s/op
Iteration  19: 9.829 s/op
Iteration  20: 9.805 s/op
Iteration  21: 9.871 s/op
Iteration  22: 9.821 s/op
Iteration  23: 9.820 s/op
Iteration  24: 9.879 s/op
Iteration  25: 9.847 s/op
Iteration  26: 9.821 s/op
Iteration  27: 9.849 s/op
Iteration  28: 9.854 s/op
Iteration  29: 9.836 s/op
Iteration  30: 9.876 s/op
Iteration  31: 9.874 s/op
Iteration  32: 9.830 s/op
Iteration  33: 9.821 s/op
Iteration  34: 9.925 s/op
Iteration  35: 9.831 s/op
Iteration  36: 9.870 s/op
Iteration  37: 9.798 s/op
Iteration  38: 9.892 s/op
Iteration  39: 9.792 s/op
Iteration  40: 9.842 s/op
Iteration  41: 9.850 s/op
Iteration  42: 9.809 s/op
Iteration  43: 9.840 s/op
Iteration  44: 9.882 s/op
Iteration  45: 9.888 s/op
Iteration  46: 9.910 s/op
Iteration  47: 9.836 s/op
Iteration  48: 9.874 s/op
Iteration  49: 9.802 s/op
Iteration  50: 9.864 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.855 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [ 9.700,  9.725) = 0 
    [ 9.725,  9.750) = 0 
    [ 9.750,  9.775) = 0 
    [ 9.775,  9.800) = 2 
    [ 9.800,  9.825) = 8 
    [ 9.825,  9.850) = 17 
    [ 9.850,  9.875) = 10 
    [ 9.875,  9.900) = 8 
    [ 9.900,  9.925) = 3 
    [ 9.925,  9.950) = 0 
    [ 9.950,  9.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.792 s/op
     p(50.0000) =      9.848 s/op
     p(90.0000) =      9.906 s/op
     p(95.0000) =      9.939 s/op
     p(99.0000) =      9.980 s/op
     p(99.9000) =      9.980 s/op
     p(99.9900) =      9.980 s/op
     p(99.9990) =      9.980 s/op
     p(99.9999) =      9.980 s/op
    p(100.0000) =      9.980 s/op


# Run complete. Total time: 00:08:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  9.855 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ce-19.1.1_1564674154468.json
{"wallclock_times": [493.644053803], "core_cycle_counts": [[453332774364], [220463142936], [378866829485], [536941427984]], "aperf_counts": [[452288072381], [220375048465], [378793933359], [536880007256]], "mperf_counts": [[452306272298], [220379753560], [378800398110], [536888125854]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:50:48: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:50:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:50:49: INFO] 507 executions left in scheduler queue
[2019-08-01 17:50:49: INFO] Executions until ETA known: 4005
[2019-08-01 17:50:49: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:50:49: INFO] Estimated completion (next execution): 2019-08-01 18:01:33 (0:10:43 from now)
[2019-08-01 17:50:49: INFO] Reboot in preparation for next execution
[2019-08-01 17:57:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.776 s/op
Iteration   2: 3.300 s/op
Iteration   3: 3.313 s/op
Iteration   4: 3.406 s/op
Iteration   5: 3.276 s/op
Iteration   6: 3.307 s/op
Iteration   7: 3.270 s/op
Iteration   8: 3.302 s/op
Iteration   9: 3.325 s/op
Iteration  10: 3.311 s/op
Iteration  11: 3.306 s/op
Iteration  12: 3.310 s/op
Iteration  13: 3.299 s/op
Iteration  14: 3.304 s/op
Iteration  15: 3.315 s/op
Iteration  16: 3.304 s/op
Iteration  17: 3.312 s/op
Iteration  18: 3.290 s/op
Iteration  19: 3.306 s/op
Iteration  20: 3.300 s/op
Iteration  21: 3.327 s/op
Iteration  22: 3.310 s/op
Iteration  23: 3.312 s/op
Iteration  24: 3.294 s/op
Iteration  25: 3.312 s/op
Iteration  26: 3.310 s/op
Iteration  27: 3.307 s/op
Iteration  28: 3.289 s/op
Iteration  29: 3.309 s/op
Iteration  30: 3.290 s/op
Iteration  31: 3.310 s/op
Iteration  32: 3.307 s/op
Iteration  33: 3.305 s/op
Iteration  34: 3.307 s/op
Iteration  35: 3.324 s/op
Iteration  36: 3.288 s/op
Iteration  37: 3.322 s/op
Iteration  38: 3.293 s/op
Iteration  39: 3.318 s/op
Iteration  40: 3.303 s/op
Iteration  41: 3.314 s/op
Iteration  42: 3.300 s/op
Iteration  43: 3.322 s/op
Iteration  44: 3.309 s/op
Iteration  45: 3.311 s/op
Iteration  46: 3.286 s/op
Iteration  47: 3.327 s/op
Iteration  48: 3.302 s/op
Iteration  49: 3.318 s/op
Iteration  50: 3.306 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.317 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 11 
    [3.300, 3.350) = 37 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 1 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.270 s/op
     p(50.0000) =      3.307 s/op
     p(90.0000) =      3.325 s/op
     p(95.0000) =      3.363 s/op
     p(99.0000) =      3.776 s/op
     p(99.9000) =      3.776 s/op
     p(99.9900) =      3.776 s/op
     p(99.9990) =      3.776 s/op
     p(99.9999) =      3.776 s/op
    p(100.0000) =      3.776 s/op


# Run complete. Total time: 00:02:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.317 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ce-19.1.1_1564674904637.json
{"wallclock_times": [166.84144124500003], "core_cycle_counts": [[146656140983], [224552117849], [144649600495], [65477058820]], "aperf_counts": [[146253027812], [224521824938], [144610717061], [65439673359]], "mperf_counts": [[146261557594], [224537550078], [144613466086], [65442100368]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 17:57:51: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:57:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 17:57:52: INFO] 506 executions left in scheduler queue
[2019-08-01 17:57:52: INFO] Executions until ETA known: 3999
[2019-08-01 17:57:52: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 17:57:52: INFO] Estimated completion (next execution): 2019-08-01 18:03:09 (0:05:17 from now)
[2019-08-01 17:57:52: INFO] Reboot in preparation for next execution
[2019-08-01 18:04:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.640 s/op
Iteration   2: 3.218 s/op
Iteration   3: 3.154 s/op
Iteration   4: 3.277 s/op
Iteration   5: 3.155 s/op
Iteration   6: 3.194 s/op
Iteration   7: 3.130 s/op
Iteration   8: 3.144 s/op
Iteration   9: 3.137 s/op
Iteration  10: 3.176 s/op
Iteration  11: 3.159 s/op
Iteration  12: 3.161 s/op
Iteration  13: 3.122 s/op
Iteration  14: 3.145 s/op
Iteration  15: 3.144 s/op
Iteration  16: 3.175 s/op
Iteration  17: 3.120 s/op
Iteration  18: 3.129 s/op
Iteration  19: 3.158 s/op
Iteration  20: 3.146 s/op
Iteration  21: 3.139 s/op
Iteration  22: 3.132 s/op
Iteration  23: 3.110 s/op
Iteration  24: 3.123 s/op
Iteration  25: 3.162 s/op
Iteration  26: 3.161 s/op
Iteration  27: 3.129 s/op
Iteration  28: 3.167 s/op
Iteration  29: 3.121 s/op
Iteration  30: 3.127 s/op
Iteration  31: 3.122 s/op
Iteration  32: 3.146 s/op
Iteration  33: 3.155 s/op
Iteration  34: 3.157 s/op
Iteration  35: 3.169 s/op
Iteration  36: 3.164 s/op
Iteration  37: 3.115 s/op
Iteration  38: 3.172 s/op
Iteration  39: 3.117 s/op
Iteration  40: 3.142 s/op
Iteration  41: 3.155 s/op
Iteration  42: 3.150 s/op
Iteration  43: 3.136 s/op
Iteration  44: 3.154 s/op
Iteration  45: 3.129 s/op
Iteration  46: 3.135 s/op
Iteration  47: 3.131 s/op
Iteration  48: 3.162 s/op
Iteration  49: 3.131 s/op
Iteration  50: 3.167 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.159 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [3.100, 3.150) = 27 
    [3.150, 3.200) = 20 
    [3.200, 3.250) = 1 
    [3.250, 3.300) = 1 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.110 s/op
     p(50.0000) =      3.146 s/op
     p(90.0000) =      3.176 s/op
     p(95.0000) =      3.244 s/op
     p(99.0000) =      3.640 s/op
     p(99.9000) =      3.640 s/op
     p(99.9900) =      3.640 s/op
     p(99.9990) =      3.640 s/op
     p(99.9999) =      3.640 s/op
    p(100.0000) =      3.640 s/op


# Run complete. Total time: 00:02:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.159 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ce-19.1.1_1564675327601.json
{"wallclock_times": [158.91730055399998], "core_cycle_counts": [[163619945173], [124378167539], [136576129263], [95755922093]], "aperf_counts": [[163276103090], [124334230084], [136550647848], [95733442840]], "mperf_counts": [[163281877852], [124348025548], [136553276720], [95743754202]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 18:04:46: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-08-01 18:04:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:04:47: INFO] 505 executions left in scheduler queue
[2019-08-01 18:04:47: INFO] Executions until ETA known: 3987
[2019-08-01 18:04:47: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-08-01 18:04:47: INFO] Estimated completion (next execution): 2019-08-01 18:09:56 (0:05:09 from now)
[2019-08-01 18:04:47: INFO] Reboot in preparation for next execution
[2019-08-01 18:09:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 18:09:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 18:09:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 18:09:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 18:09:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 18:09:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 18:20:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.868 s/op
Iteration   2: 12.730 s/op
Iteration   3: 12.889 s/op
Iteration   4: 13.288 s/op
Iteration   5: 13.329 s/op
Iteration   6: 13.315 s/op
Iteration   7: 13.317 s/op
Iteration   8: 13.297 s/op
Iteration   9: 13.290 s/op
Iteration  10: 13.289 s/op
Iteration  11: 13.301 s/op
Iteration  12: 13.350 s/op
Iteration  13: 13.300 s/op
Iteration  14: 13.278 s/op
Iteration  15: 13.279 s/op
Iteration  16: 13.277 s/op
Iteration  17: 13.304 s/op
Iteration  18: 13.315 s/op
Iteration  19: 13.323 s/op
Iteration  20: 13.290 s/op
Iteration  21: 13.307 s/op
Iteration  22: 13.291 s/op
Iteration  23: 13.305 s/op
Iteration  24: 13.285 s/op
Iteration  25: 13.305 s/op
Iteration  26: 13.297 s/op
Iteration  27: 13.291 s/op
Iteration  28: 13.289 s/op
Iteration  29: 13.283 s/op
Iteration  30: 13.300 s/op
Iteration  31: 13.314 s/op
Iteration  32: 13.281 s/op
Iteration  33: 13.286 s/op
Iteration  34: 13.298 s/op
Iteration  35: 13.305 s/op
Iteration  36: 13.293 s/op
Iteration  37: 13.367 s/op
Iteration  38: 13.294 s/op
Iteration  39: 13.278 s/op
Iteration  40: 13.347 s/op
Iteration  41: 13.342 s/op
Iteration  42: 13.344 s/op
Iteration  43: 13.293 s/op
Iteration  44: 13.299 s/op
Iteration  45: 13.292 s/op
Iteration  46: 13.336 s/op
Iteration  47: 13.302 s/op
Iteration  48: 13.301 s/op
Iteration  49: 13.266 s/op
Iteration  50: 13.297 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.294 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 1 
    [12.750, 12.875) = 0 
    [12.875, 13.000) = 1 
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 47 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.730 s/op
     p(50.0000) =     13.298 s/op
     p(90.0000) =     13.343 s/op
     p(95.0000) =     13.357 s/op
     p(99.0000) =     13.868 s/op
     p(99.9000) =     13.868 s/op
     p(99.9900) =     13.868 s/op
     p(99.9990) =     13.868 s/op
     p(99.9999) =     13.868 s/op
    p(100.0000) =     13.868 s/op


# Run complete. Total time: 00:11:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.294 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_11.0.4_1564675750793.json
{"wallclock_times": [666.254303744], "core_cycle_counts": [[292751961173], [518499601739], [544072277933], [814542810085]], "aperf_counts": [[290624768434], [518362325554], [543944359219], [814450731957]], "mperf_counts": [[290631960830], [518362911532], [543944333534], [814450724152]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 18:20:17: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-08-01 18:20:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:20:18: INFO] 504 executions left in scheduler queue
[2019-08-01 18:20:18: INFO] Executions until ETA known: 3946
[2019-08-01 18:20:18: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:20:18: INFO] Estimated completion (next execution): 2019-08-01 18:33:54 (0:13:36 from now)
[2019-08-01 18:20:18: INFO] Reboot in preparation for next execution
[2019-08-01 18:24:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 18:24:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 18:24:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 18:24:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 18:24:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 18:26:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.674 s/op
Iteration   2: 2.542 s/op
Iteration   3: 2.513 s/op
Iteration   4: 2.470 s/op
Iteration   5: 2.529 s/op
Iteration   6: 2.517 s/op
Iteration   7: 2.478 s/op
Iteration   8: 2.531 s/op
Iteration   9: 2.515 s/op
Iteration  10: 2.524 s/op
Iteration  11: 2.533 s/op
Iteration  12: 2.516 s/op
Iteration  13: 2.506 s/op
Iteration  14: 2.387 s/op
Iteration  15: 2.429 s/op
Iteration  16: 2.492 s/op
Iteration  17: 2.516 s/op
Iteration  18: 2.513 s/op
Iteration  19: 2.323 s/op
Iteration  20: 2.443 s/op
Iteration  21: 2.518 s/op
Iteration  22: 2.496 s/op
Iteration  23: 2.488 s/op
Iteration  24: 2.399 s/op
Iteration  25: 2.517 s/op
Iteration  26: 2.514 s/op
Iteration  27: 2.244 s/op
Iteration  28: 2.482 s/op
Iteration  29: 2.484 s/op
Iteration  30: 2.522 s/op
Iteration  31: 2.506 s/op
Iteration  32: 2.514 s/op
Iteration  33: 2.438 s/op
Iteration  34: 2.517 s/op
Iteration  35: 2.506 s/op
Iteration  36: 2.392 s/op
Iteration  37: 2.400 s/op
Iteration  38: 2.526 s/op
Iteration  39: 2.517 s/op
Iteration  40: 2.469 s/op
Iteration  41: 2.505 s/op
Iteration  42: 2.527 s/op
Iteration  43: 2.518 s/op
Iteration  44: 2.507 s/op
Iteration  45: 2.515 s/op
Iteration  46: 2.432 s/op
Iteration  47: 2.515 s/op
Iteration  48: 2.502 s/op
Iteration  49: 2.513 s/op
Iteration  50: 2.518 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.489 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 3 
    [2.400, 2.450) = 5 
    [2.450, 2.500) = 8 
    [2.500, 2.550) = 31 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.244 s/op
     p(50.0000) =      2.513 s/op
     p(90.0000) =      2.528 s/op
     p(95.0000) =      2.537 s/op
     p(99.0000) =      2.674 s/op
     p(99.9000) =      2.674 s/op
     p(99.9900) =      2.674 s/op
     p(99.9990) =      2.674 s/op
     p(99.9999) =      2.674 s/op
    p(100.0000) =      2.674 s/op


# Run complete. Total time: 00:02:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.489 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_11.0.4_1564676667412.json
{"wallclock_times": [125.49670299100003], "core_cycle_counts": [[66371564465], [159951101582], [119419303960], [30728352759]], "aperf_counts": [[65985901522], [159917143946], [119383968075], [30699945287]], "mperf_counts": [[74396784540], [178894105588], [134011418790], [33783117016]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 18:26:32: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:26:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:26:33: INFO] 503 executions left in scheduler queue
[2019-08-01 18:26:33: INFO] Executions until ETA known: 3939
[2019-08-01 18:26:33: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:26:33: INFO] Estimated completion (next execution): 2019-08-01 18:31:09 (0:04:35 from now)
[2019-08-01 18:26:33: INFO] Reboot in preparation for next execution
[2019-08-01 18:30:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 18:30:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 18:30:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 18:30:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 18:30:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 18:31:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.435 s/op
Iteration   2: 2.403 s/op
Iteration   3: 2.446 s/op
Iteration   4: 2.611 s/op
Iteration   5: 2.268 s/op
Iteration   6: 2.275 s/op
Iteration   7: 2.249 s/op
Iteration   8: 2.249 s/op
Iteration   9: 2.244 s/op
Iteration  10: 2.248 s/op
Iteration  11: 2.249 s/op
Iteration  12: 2.247 s/op
Iteration  13: 2.247 s/op
Iteration  14: 2.245 s/op
Iteration  15: 2.248 s/op
Iteration  16: 2.251 s/op
Iteration  17: 2.241 s/op
Iteration  18: 2.243 s/op
Iteration  19: 2.243 s/op
Iteration  20: 2.243 s/op
Iteration  21: 2.247 s/op
Iteration  22: 2.241 s/op
Iteration  23: 2.242 s/op
Iteration  24: 2.242 s/op
Iteration  25: 2.244 s/op
Iteration  26: 2.238 s/op
Iteration  27: 2.241 s/op
Iteration  28: 2.241 s/op
Iteration  29: 2.240 s/op
Iteration  30: 2.244 s/op
Iteration  31: 2.242 s/op
Iteration  32: 2.242 s/op
Iteration  33: 2.242 s/op
Iteration  34: 2.240 s/op
Iteration  35: 2.251 s/op
Iteration  36: 2.242 s/op
Iteration  37: 2.244 s/op
Iteration  38: 2.241 s/op
Iteration  39: 2.240 s/op
Iteration  40: 2.242 s/op
Iteration  41: 2.244 s/op
Iteration  42: 2.243 s/op
Iteration  43: 2.240 s/op
Iteration  44: 2.243 s/op
Iteration  45: 2.239 s/op
Iteration  46: 2.240 s/op
Iteration  47: 2.245 s/op
Iteration  48: 2.246 s/op
Iteration  49: 2.247 s/op
Iteration  50: 2.241 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.263 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [2.200, 2.250) = 42 
    [2.250, 2.300) = 4 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 3 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.238 s/op
     p(50.0000) =      2.243 s/op
     p(90.0000) =      2.274 s/op
     p(95.0000) =      2.440 s/op
     p(99.0000) =      2.611 s/op
     p(99.9000) =      2.611 s/op
     p(99.9900) =      2.611 s/op
     p(99.9990) =      2.611 s/op
     p(99.9999) =      2.611 s/op
    p(100.0000) =      2.611 s/op


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.263 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_11.0.4_1564677005559.json
{"wallclock_times": [114.15204612600002], "core_cycle_counts": [[45933266164], [156604218397], [41999255319], [128840510091]], "aperf_counts": [[45603868658], [156577486418], [41966241218], [128818180550]], "mperf_counts": [[45756716688], [156632777480], [42139970912], [128884939996]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 18:31:59: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-08-01 18:32:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:32:00: INFO] 502 executions left in scheduler queue
[2019-08-01 18:32:00: INFO] Executions until ETA known: 3924
[2019-08-01 18:32:00: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:32:00: INFO] Estimated completion (next execution): 2019-08-01 18:36:25 (0:04:24 from now)
[2019-08-01 18:32:00: INFO] Reboot in preparation for next execution
[2019-08-01 18:42:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.753 s/op
Iteration   2: 7.286 s/op
Iteration   3: 7.229 s/op
Iteration   4: 7.247 s/op
Iteration   5: 7.260 s/op
Iteration   6: 7.214 s/op
Iteration   7: 7.276 s/op
Iteration   8: 7.233 s/op
Iteration   9: 7.239 s/op
Iteration  10: 7.248 s/op
Iteration  11: 7.224 s/op
Iteration  12: 7.256 s/op
Iteration  13: 7.233 s/op
Iteration  14: 7.246 s/op
Iteration  15: 7.280 s/op
Iteration  16: 7.265 s/op
Iteration  17: 7.238 s/op
Iteration  18: 7.276 s/op
Iteration  19: 7.230 s/op
Iteration  20: 7.239 s/op
Iteration  21: 7.254 s/op
Iteration  22: 7.234 s/op
Iteration  23: 7.247 s/op
Iteration  24: 7.285 s/op
Iteration  25: 7.251 s/op
Iteration  26: 7.251 s/op
Iteration  27: 7.289 s/op
Iteration  28: 7.242 s/op
Iteration  29: 7.249 s/op
Iteration  30: 7.271 s/op
Iteration  31: 7.220 s/op
Iteration  32: 7.283 s/op
Iteration  33: 7.241 s/op
Iteration  34: 7.247 s/op
Iteration  35: 7.281 s/op
Iteration  36: 7.240 s/op
Iteration  37: 7.243 s/op
Iteration  38: 7.282 s/op
Iteration  39: 7.233 s/op
Iteration  40: 7.220 s/op
Iteration  41: 7.298 s/op
Iteration  42: 7.239 s/op
Iteration  43: 7.252 s/op
Iteration  44: 7.284 s/op
Iteration  45: 7.236 s/op
Iteration  46: 7.226 s/op
Iteration  47: 7.284 s/op
Iteration  48: 7.258 s/op
Iteration  49: 7.272 s/op
Iteration  50: 7.274 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.263 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [7.200, 7.250) = 26 
    [7.250, 7.300) = 23 
    [7.300, 7.350) = 0 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 0 
    [7.450, 7.500) = 0 
    [7.500, 7.550) = 0 
    [7.550, 7.600) = 0 
    [7.600, 7.650) = 0 
    [7.650, 7.700) = 0 
    [7.700, 7.750) = 0 
    [7.750, 7.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.214 s/op
     p(50.0000) =      7.249 s/op
     p(90.0000) =      7.285 s/op
     p(95.0000) =      7.293 s/op
     p(99.0000) =      7.753 s/op
     p(99.9000) =      7.753 s/op
     p(99.9900) =      7.753 s/op
     p(99.9990) =      7.753 s/op
     p(99.9999) =      7.753 s/op
    p(100.0000) =      7.753 s/op


# Run complete. Total time: 00:06:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.263 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot-8u222-b10_1564677370671.json
{"wallclock_times": [364.144208748], "core_cycle_counts": [[299504571857], [360463253013], [221090457322], [366794276100]], "aperf_counts": [[298582851750], [360378139650], [221011257420], [366735212153]], "mperf_counts": [[298589096052], [360378209188], [221015544160], [366736029748]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 18:42:14: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:42:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:42:15: INFO] 501 executions left in scheduler queue
[2019-08-01 18:42:15: INFO] Executions until ETA known: 3905
[2019-08-01 18:42:15: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:42:15: INFO] Estimated completion (next execution): 2019-08-01 18:50:50 (0:08:34 from now)
[2019-08-01 18:42:15: INFO] Reboot in preparation for next execution
[2019-08-01 18:56:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.627 s/op
Iteration   2: 11.856 s/op
Iteration   3: 11.664 s/op
Iteration   4: 11.675 s/op
Iteration   5: 11.659 s/op
Iteration   6: 11.726 s/op
Iteration   7: 11.709 s/op
Iteration   8: 11.717 s/op
Iteration   9: 11.715 s/op
Iteration  10: 11.731 s/op
Iteration  11: 11.725 s/op
Iteration  12: 11.737 s/op
Iteration  13: 11.731 s/op
Iteration  14: 11.727 s/op
Iteration  15: 11.733 s/op
Iteration  16: 11.696 s/op
Iteration  17: 11.750 s/op
Iteration  18: 11.688 s/op
Iteration  19: 11.739 s/op
Iteration  20: 11.710 s/op
Iteration  21: 11.699 s/op
Iteration  22: 11.746 s/op
Iteration  23: 11.733 s/op
Iteration  24: 11.736 s/op
Iteration  25: 11.710 s/op
Iteration  26: 11.797 s/op
Iteration  27: 11.706 s/op
Iteration  28: 11.706 s/op
Iteration  29: 11.771 s/op
Iteration  30: 11.730 s/op
Iteration  31: 11.722 s/op
Iteration  32: 11.766 s/op
Iteration  33: 11.736 s/op
Iteration  34: 11.716 s/op
Iteration  35: 11.719 s/op
Iteration  36: 11.718 s/op
Iteration  37: 11.735 s/op
Iteration  38: 11.735 s/op
Iteration  39: 11.711 s/op
Iteration  40: 11.734 s/op
Iteration  41: 11.735 s/op
Iteration  42: 11.764 s/op
Iteration  43: 11.692 s/op
Iteration  44: 11.731 s/op
Iteration  45: 11.744 s/op
Iteration  46: 11.755 s/op
Iteration  47: 11.758 s/op
Iteration  48: 11.743 s/op
Iteration  49: 11.748 s/op
Iteration  50: 11.723 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.727 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [11.600, 11.625) = 0 
    [11.625, 11.650) = 1 
    [11.650, 11.675) = 2 
    [11.675, 11.700) = 5 
    [11.700, 11.725) = 13 
    [11.725, 11.750) = 22 
    [11.750, 11.775) = 5 
    [11.775, 11.800) = 1 
    [11.800, 11.825) = 0 
    [11.825, 11.850) = 0 
    [11.850, 11.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     11.627 s/op
     p(50.0000) =     11.730 s/op
     p(90.0000) =     11.764 s/op
     p(95.0000) =     11.783 s/op
     p(99.0000) =     11.856 s/op
     p(99.9000) =     11.856 s/op
     p(99.9900) =     11.856 s/op
     p(99.9990) =     11.856 s/op
     p(99.9999) =     11.856 s/op
    p(100.0000) =     11.856 s/op


# Run complete. Total time: 00:09:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.727 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot-8u222-b10_1564677991544.json
{"wallclock_times": [587.181676666], "core_cycle_counts": [[470840280866], [452238485308], [564973643448], [421793967077]], "aperf_counts": [[469530874643], [452139495288], [564942312089], [421760747673]], "mperf_counts": [[469538246210], [452149026478], [564944834196], [421760889248]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 18:56:18: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:56:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 18:56:19: INFO] 500 executions left in scheduler queue
[2019-08-01 18:56:19: INFO] Executions until ETA known: 3899
[2019-08-01 18:56:19: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 18:56:19: INFO] Estimated completion (next execution): 2019-08-01 19:08:37 (0:12:17 from now)
[2019-08-01 18:56:19: INFO] Reboot in preparation for next execution
[2019-08-01 19:06:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.195 s/op
Iteration   2: 6.587 s/op
Iteration   3: 6.394 s/op
Iteration   4: 6.503 s/op
Iteration   5: 6.513 s/op
Iteration   6: 6.482 s/op
Iteration   7: 6.487 s/op
Iteration   8: 6.476 s/op
Iteration   9: 6.538 s/op
Iteration  10: 6.510 s/op
Iteration  11: 6.514 s/op
Iteration  12: 6.490 s/op
Iteration  13: 6.541 s/op
Iteration  14: 6.496 s/op
Iteration  15: 6.490 s/op
Iteration  16: 6.486 s/op
Iteration  17: 6.504 s/op
Iteration  18: 6.501 s/op
Iteration  19: 6.491 s/op
Iteration  20: 6.484 s/op
Iteration  21: 6.551 s/op
Iteration  22: 6.542 s/op
Iteration  23: 6.491 s/op
Iteration  24: 6.504 s/op
Iteration  25: 6.478 s/op
Iteration  26: 6.498 s/op
Iteration  27: 6.497 s/op
Iteration  28: 6.480 s/op
Iteration  29: 6.511 s/op
Iteration  30: 6.488 s/op
Iteration  31: 6.495 s/op
Iteration  32: 6.535 s/op
Iteration  33: 6.500 s/op
Iteration  34: 6.509 s/op
Iteration  35: 6.490 s/op
Iteration  36: 6.491 s/op
Iteration  37: 6.499 s/op
Iteration  38: 6.488 s/op
Iteration  39: 6.513 s/op
Iteration  40: 6.498 s/op
Iteration  41: 6.469 s/op
Iteration  42: 6.512 s/op
Iteration  43: 6.492 s/op
Iteration  44: 6.460 s/op
Iteration  45: 6.518 s/op
Iteration  46: 6.494 s/op
Iteration  47: 6.488 s/op
Iteration  48: 6.493 s/op
Iteration  49: 6.500 s/op
Iteration  50: 6.503 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.513 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 1 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 28 
    [6.500, 6.550) = 18 
    [6.550, 6.600) = 2 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.394 s/op
     p(50.0000) =      6.498 s/op
     p(90.0000) =      6.541 s/op
     p(95.0000) =      6.567 s/op
     p(99.0000) =      7.195 s/op
     p(99.9000) =      7.195 s/op
     p(99.9900) =      7.195 s/op
     p(99.9990) =      7.195 s/op
     p(99.9999) =      7.195 s/op
    p(100.0000) =      7.195 s/op


# Run complete. Total time: 00:05:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.513 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot-8u222-b10_1564678848728.json
{"wallclock_times": [326.584868106], "core_cycle_counts": [[236920205690], [315864494822], [234802363929], [275383771058]], "aperf_counts": [[236137632961], [315801223485], [234776265857], [275362642553]], "mperf_counts": [[236144552636], [315803530010], [234776363204], [275362686410]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:06:15: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 19:06:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:06:16: INFO] 499 executions left in scheduler queue
[2019-08-01 19:06:16: INFO] Executions until ETA known: 3897
[2019-08-01 19:06:16: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 19:06:16: INFO] Estimated completion (next execution): 2019-08-01 19:14:13 (0:07:56 from now)
[2019-08-01 19:06:16: INFO] Reboot in preparation for next execution
[2019-08-01 19:24:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.173 s/op
Iteration   2: 16.614 s/op
Iteration   3: 16.444 s/op
Iteration   4: 16.420 s/op
Iteration   5: 16.453 s/op
Iteration   6: 16.425 s/op
Iteration   7: 16.433 s/op
Iteration   8: 16.465 s/op
Iteration   9: 16.417 s/op
Iteration  10: 16.448 s/op
Iteration  11: 16.433 s/op
Iteration  12: 16.396 s/op
Iteration  13: 16.454 s/op
Iteration  14: 16.464 s/op
Iteration  15: 16.404 s/op
Iteration  16: 16.431 s/op
Iteration  17: 16.372 s/op
Iteration  18: 16.366 s/op
Iteration  19: 16.376 s/op
Iteration  20: 16.359 s/op
Iteration  21: 16.413 s/op
Iteration  22: 16.379 s/op
Iteration  23: 16.445 s/op
Iteration  24: 16.418 s/op
Iteration  25: 16.417 s/op
Iteration  26: 16.372 s/op
Iteration  27: 16.721 s/op
Iteration  28: 16.370 s/op
Iteration  29: 16.423 s/op
Iteration  30: 16.414 s/op
Iteration  31: 16.385 s/op
Iteration  32: 16.361 s/op
Iteration  33: 16.369 s/op
Iteration  34: 16.385 s/op
Iteration  35: 16.350 s/op
Iteration  36: 16.436 s/op
Iteration  37: 16.401 s/op
Iteration  38: 16.451 s/op
Iteration  39: 16.416 s/op
Iteration  40: 16.366 s/op
Iteration  41: 16.374 s/op
Iteration  42: 16.423 s/op
Iteration  43: 16.383 s/op
Iteration  44: 16.402 s/op
Iteration  45: 16.409 s/op
Iteration  46: 16.422 s/op
Iteration  47: 16.422 s/op
Iteration  48: 16.379 s/op
Iteration  49: 16.439 s/op
Iteration  50: 16.402 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.414 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [16.100, 16.150) = 0 
    [16.150, 16.200) = 1 
    [16.200, 16.250) = 0 
    [16.250, 16.300) = 0 
    [16.300, 16.350) = 1 
    [16.350, 16.400) = 16 
    [16.400, 16.450) = 25 
    [16.450, 16.500) = 5 
    [16.500, 16.550) = 0 
    [16.550, 16.600) = 0 
    [16.600, 16.650) = 1 
    [16.650, 16.700) = 0 
    [16.700, 16.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.173 s/op
     p(50.0000) =     16.415 s/op
     p(90.0000) =     16.454 s/op
     p(95.0000) =     16.532 s/op
     p(99.0000) =     16.721 s/op
     p(99.9000) =     16.721 s/op
     p(99.9900) =     16.721 s/op
     p(99.9990) =     16.721 s/op
     p(99.9999) =     16.721 s/op
    p(100.0000) =     16.721 s/op


# Run complete. Total time: 00:13:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.414 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot-8u222-b10_1564679426503.json
{"wallclock_times": [821.571551638], "core_cycle_counts": [[708926540046], [581212015119], [447476820526], [905780241567]], "aperf_counts": [[707144821054], [581074404628], [447357459411], [905691177166]], "mperf_counts": [[707149874098], [581084255354], [447357514924], [905691347980]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:24:08: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-08-01 19:24:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:24:09: INFO] 498 executions left in scheduler queue
[2019-08-01 19:24:09: INFO] Executions until ETA known: 3895
[2019-08-01 19:24:09: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:24:09: INFO] Estimated completion (next execution): 2019-08-01 19:40:20 (0:16:11 from now)
[2019-08-01 19:24:09: INFO] Reboot in preparation for next execution
[2019-08-01 19:30:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.886 s/op
Iteration   2: 3.564 s/op
Iteration   3: 3.422 s/op
Iteration   4: 3.429 s/op
Iteration   5: 3.422 s/op
Iteration   6: 3.445 s/op
Iteration   7: 3.423 s/op
Iteration   8: 3.444 s/op
Iteration   9: 3.416 s/op
Iteration  10: 3.445 s/op
Iteration  11: 3.462 s/op
Iteration  12: 3.415 s/op
Iteration  13: 3.423 s/op
Iteration  14: 3.418 s/op
Iteration  15: 3.456 s/op
Iteration  16: 3.410 s/op
Iteration  17: 3.406 s/op
Iteration  18: 3.420 s/op
Iteration  19: 3.404 s/op
Iteration  20: 3.441 s/op
Iteration  21: 3.403 s/op
Iteration  22: 3.412 s/op
Iteration  23: 3.452 s/op
Iteration  24: 3.427 s/op
Iteration  25: 3.398 s/op
Iteration  26: 3.440 s/op
Iteration  27: 3.442 s/op
Iteration  28: 3.413 s/op
Iteration  29: 3.413 s/op
Iteration  30: 3.407 s/op
Iteration  31: 3.412 s/op
Iteration  32: 3.418 s/op
Iteration  33: 3.444 s/op
Iteration  34: 3.452 s/op
Iteration  35: 3.440 s/op
Iteration  36: 3.406 s/op
Iteration  37: 3.425 s/op
Iteration  38: 3.436 s/op
Iteration  39: 3.437 s/op
Iteration  40: 3.417 s/op
Iteration  41: 3.425 s/op
Iteration  42: 3.414 s/op
Iteration  43: 3.425 s/op
Iteration  44: 3.417 s/op
Iteration  45: 3.441 s/op
Iteration  46: 3.450 s/op
Iteration  47: 3.428 s/op
Iteration  48: 3.414 s/op
Iteration  49: 3.433 s/op
Iteration  50: 3.458 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.439 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 42 
    [3.450, 3.500) = 5 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.398 s/op
     p(50.0000) =      3.425 s/op
     p(90.0000) =      3.456 s/op
     p(95.0000) =      3.508 s/op
     p(99.0000) =      3.886 s/op
     p(99.9000) =      3.886 s/op
     p(99.9900) =      3.886 s/op
     p(99.9990) =      3.886 s/op
     p(99.9999) =      3.886 s/op
    p(100.0000) =      3.886 s/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.439 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_graalvm-ce-19.1.1_1564680457885.json
{"wallclock_times": [172.92850131199998], "core_cycle_counts": [[117848706905], [163389351006], [174781709150], [109415975631]], "aperf_counts": [[117438887942], [163345782164], [174746114765], [109387603667]], "mperf_counts": [[117457087646], [163346364086], [174749376800], [109393616444]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:30:30: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:30:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:30:31: INFO] 497 executions left in scheduler queue
[2019-08-01 19:30:31: INFO] Executions until ETA known: 3890
[2019-08-01 19:30:31: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:30:31: INFO] Estimated completion (next execution): 2019-08-01 19:35:55 (0:05:23 from now)
[2019-08-01 19:30:31: INFO] Reboot in preparation for next execution
[2019-08-01 19:39:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.953 s/op
Iteration   2: 5.829 s/op
Iteration   3: 5.664 s/op
Iteration   4: 5.651 s/op
Iteration   5: 5.637 s/op
Iteration   6: 5.635 s/op
Iteration   7: 5.632 s/op
Iteration   8: 5.628 s/op
Iteration   9: 5.652 s/op
Iteration  10: 5.632 s/op
Iteration  11: 5.635 s/op
Iteration  12: 5.644 s/op
Iteration  13: 5.641 s/op
Iteration  14: 5.631 s/op
Iteration  15: 5.630 s/op
Iteration  16: 5.641 s/op
Iteration  17: 5.648 s/op
Iteration  18: 5.639 s/op
Iteration  19: 5.640 s/op
Iteration  20: 5.640 s/op
Iteration  21: 5.642 s/op
Iteration  22: 5.630 s/op
Iteration  23: 5.639 s/op
Iteration  24: 5.646 s/op
Iteration  25: 5.635 s/op
Iteration  26: 5.649 s/op
Iteration  27: 5.652 s/op
Iteration  28: 5.655 s/op
Iteration  29: 5.655 s/op
Iteration  30: 5.635 s/op
Iteration  31: 5.629 s/op
Iteration  32: 5.627 s/op
Iteration  33: 5.659 s/op
Iteration  34: 5.640 s/op
Iteration  35: 5.652 s/op
Iteration  36: 5.641 s/op
Iteration  37: 5.643 s/op
Iteration  38: 5.644 s/op
Iteration  39: 5.647 s/op
Iteration  40: 5.650 s/op
Iteration  41: 5.627 s/op
Iteration  42: 5.642 s/op
Iteration  43: 5.643 s/op
Iteration  44: 5.654 s/op
Iteration  45: 5.655 s/op
Iteration  46: 5.639 s/op
Iteration  47: 5.664 s/op
Iteration  48: 5.652 s/op
Iteration  49: 5.636 s/op
Iteration  50: 5.656 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.653 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [5.600, 5.625) = 0 
    [5.625, 5.650) = 34 
    [5.650, 5.675) = 14 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 0 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 1 
    [5.850, 5.875) = 0 
    [5.875, 5.900) = 0 
    [5.900, 5.925) = 0 
    [5.925, 5.950) = 0 
    [5.950, 5.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.627 s/op
     p(50.0000) =      5.642 s/op
     p(90.0000) =      5.658 s/op
     p(95.0000) =      5.738 s/op
     p(99.0000) =      5.953 s/op
     p(99.9000) =      5.953 s/op
     p(99.9900) =      5.953 s/op
     p(99.9990) =      5.953 s/op
     p(99.9999) =      5.953 s/op
    p(100.0000) =      5.953 s/op


# Run complete. Total time: 00:04:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.653 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_graalvm-ce-19.1.1_1564680889469.json
{"wallclock_times": [283.53531459699997], "core_cycle_counts": [[151721287816], [221950714108], [194844397734], [348830403929]], "aperf_counts": [[150994079276], [221912788936], [194810256238], [348811793263]], "mperf_counts": [[151009346712], [221929412950], [194811764676], [348812108838]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:39:33: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:39:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:39:34: INFO] 496 executions left in scheduler queue
[2019-08-01 19:39:34: INFO] Executions until ETA known: 3888
[2019-08-01 19:39:34: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:39:34: INFO] Estimated completion (next execution): 2019-08-01 19:46:47 (0:07:13 from now)
[2019-08-01 19:39:34: INFO] Reboot in preparation for next execution
[2019-08-01 19:47:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.324 s/op
Iteration   2: 3.699 s/op
Iteration   3: 3.676 s/op
Iteration   4: 3.597 s/op
Iteration   5: 3.634 s/op
Iteration   6: 3.636 s/op
Iteration   7: 3.702 s/op
Iteration   8: 3.655 s/op
Iteration   9: 3.720 s/op
Iteration  10: 3.652 s/op
Iteration  11: 3.656 s/op
Iteration  12: 3.704 s/op
Iteration  13: 3.643 s/op
Iteration  14: 3.641 s/op
Iteration  15: 3.705 s/op
Iteration  16: 3.644 s/op
Iteration  17: 3.647 s/op
Iteration  18: 3.711 s/op
Iteration  19: 3.649 s/op
Iteration  20: 3.639 s/op
Iteration  21: 3.657 s/op
Iteration  22: 3.718 s/op
Iteration  23: 3.656 s/op
Iteration  24: 3.647 s/op
Iteration  25: 3.702 s/op
Iteration  26: 3.669 s/op
Iteration  27: 3.640 s/op
Iteration  28: 3.662 s/op
Iteration  29: 3.722 s/op
Iteration  30: 3.644 s/op
Iteration  31: 3.663 s/op
Iteration  32: 3.727 s/op
Iteration  33: 3.640 s/op
Iteration  34: 3.656 s/op
Iteration  35: 3.661 s/op
Iteration  36: 3.725 s/op
Iteration  37: 3.652 s/op
Iteration  38: 3.664 s/op
Iteration  39: 3.722 s/op
Iteration  40: 3.660 s/op
Iteration  41: 3.741 s/op
Iteration  42: 3.669 s/op
Iteration  43: 3.699 s/op
Iteration  44: 3.655 s/op
Iteration  45: 3.652 s/op
Iteration  46: 3.725 s/op
Iteration  47: 3.654 s/op
Iteration  48: 3.641 s/op
Iteration  49: 3.710 s/op
Iteration  50: 3.672 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.685 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 13 
    [3.650, 3.700) = 21 
    [3.700, 3.750) = 14 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 0 
    [4.200, 4.250) = 0 
    [4.250, 4.300) = 0 
    [4.300, 4.350) = 1 
    [4.350, 4.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.597 s/op
     p(50.0000) =      3.661 s/op
     p(90.0000) =      3.725 s/op
     p(95.0000) =      3.733 s/op
     p(99.0000) =      4.324 s/op
     p(99.9000) =      4.324 s/op
     p(99.9900) =      4.324 s/op
     p(99.9990) =      4.324 s/op
     p(99.9999) =      4.324 s/op
    p(100.0000) =      4.324 s/op


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.685 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_graalvm-ce-19.1.1_1564681448427.json
{"wallclock_times": [185.29196738100003], "core_cycle_counts": [[158222135200], [167317242530], [185800480572], [157789028212]], "aperf_counts": [[157732139683], [167263550369], [185751935083], [157753174560]], "mperf_counts": [[158278932564], [167265271864], [185756025364], [157757560962]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:47:13: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:47:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:47:14: INFO] 495 executions left in scheduler queue
[2019-08-01 19:47:14: INFO] Executions until ETA known: 3878
[2019-08-01 19:47:14: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:47:14: INFO] Estimated completion (next execution): 2019-08-01 19:52:50 (0:05:35 from now)
[2019-08-01 19:47:14: INFO] Reboot in preparation for next execution
[2019-08-01 19:59:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.427 s/op
Iteration   2: 10.343 s/op
Iteration   3: 10.179 s/op
Iteration   4: 10.212 s/op
Iteration   5: 10.171 s/op
Iteration   6: 10.155 s/op
Iteration   7: 10.152 s/op
Iteration   8: 10.133 s/op
Iteration   9: 10.178 s/op
Iteration  10: 10.174 s/op
Iteration  11: 10.192 s/op
Iteration  12: 10.170 s/op
Iteration  13: 10.200 s/op
Iteration  14: 10.190 s/op
Iteration  15: 10.186 s/op
Iteration  16: 10.196 s/op
Iteration  17: 10.194 s/op
Iteration  18: 10.242 s/op
Iteration  19: 10.201 s/op
Iteration  20: 10.327 s/op
Iteration  21: 10.154 s/op
Iteration  22: 10.159 s/op
Iteration  23: 10.148 s/op
Iteration  24: 10.187 s/op
Iteration  25: 10.197 s/op
Iteration  26: 10.588 s/op
Iteration  27: 10.176 s/op
Iteration  28: 10.165 s/op
Iteration  29: 10.151 s/op
Iteration  30: 10.154 s/op
Iteration  31: 10.131 s/op
Iteration  32: 10.194 s/op
Iteration  33: 10.145 s/op
Iteration  34: 10.187 s/op
Iteration  35: 10.207 s/op
Iteration  36: 10.214 s/op
Iteration  37: 10.215 s/op
Iteration  38: 10.148 s/op
Iteration  39: 10.165 s/op
Iteration  40: 10.143 s/op
Iteration  41: 10.230 s/op
Iteration  42: 10.174 s/op
Iteration  43: 10.182 s/op
Iteration  44: 10.160 s/op
Iteration  45: 10.219 s/op
Iteration  46: 10.168 s/op
Iteration  47: 10.150 s/op
Iteration  48: 10.151 s/op
Iteration  49: 10.177 s/op
Iteration  50: 10.176 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.197 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [10.100, 10.150) = 6 
    [10.150, 10.200) = 32 
    [10.200, 10.250) = 8 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 2 
    [10.350, 10.400) = 0 
    [10.400, 10.450) = 1 
    [10.450, 10.500) = 0 
    [10.500, 10.550) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.131 s/op
     p(50.0000) =     10.178 s/op
     p(90.0000) =     10.241 s/op
     p(95.0000) =     10.381 s/op
     p(99.0000) =     10.588 s/op
     p(99.9000) =     10.588 s/op
     p(99.9900) =     10.588 s/op
     p(99.9990) =     10.588 s/op
     p(99.9999) =     10.588 s/op
    p(100.0000) =     10.588 s/op


# Run complete. Total time: 00:08:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.197 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_graalvm-ce-19.1.1_1564681885520.json
{"wallclock_times": [510.71872010399994], "core_cycle_counts": [[270092745226], [356047516266], [605243921153], [414927384111]], "aperf_counts": [[268756314143], [355977423079], [605214879097], [414899766584]], "mperf_counts": [[268773472652], [355980167932], [605220914632], [414905603628]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 19:59:56: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-08-01 19:59:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 19:59:57: INFO] 494 executions left in scheduler queue
[2019-08-01 19:59:57: INFO] Executions until ETA known: 3854
[2019-08-01 19:59:57: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 19:59:57: INFO] Estimated completion (next execution): 2019-08-01 20:10:58 (0:11:01 from now)
[2019-08-01 19:59:57: INFO] Reboot in preparation for next execution
[2019-08-01 20:05:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.802 s/op
Iteration   2: 1.612 s/op
Iteration   3: 1.588 s/op
Iteration   4: 1.673 s/op
Iteration   5: 1.579 s/op
Iteration   6: 1.579 s/op
Iteration   7: 1.580 s/op
Iteration   8: 1.581 s/op
Iteration   9: 1.585 s/op
Iteration  10: 1.588 s/op
Iteration  11: 1.584 s/op
Iteration  12: 1.578 s/op
Iteration  13: 1.582 s/op
Iteration  14: 1.579 s/op
Iteration  15: 1.586 s/op
Iteration  16: 1.594 s/op
Iteration  17: 1.582 s/op
Iteration  18: 1.586 s/op
Iteration  19: 1.579 s/op
Iteration  20: 1.584 s/op
Iteration  21: 1.577 s/op
Iteration  22: 1.580 s/op
Iteration  23: 1.582 s/op
Iteration  24: 1.579 s/op
Iteration  25: 1.576 s/op
Iteration  26: 1.580 s/op
Iteration  27: 1.579 s/op
Iteration  28: 1.583 s/op
Iteration  29: 1.582 s/op
Iteration  30: 1.584 s/op
Iteration  31: 1.575 s/op
Iteration  32: 1.582 s/op
Iteration  33: 1.579 s/op
Iteration  34: 1.572 s/op
Iteration  35: 1.578 s/op
Iteration  36: 1.577 s/op
Iteration  37: 1.577 s/op
Iteration  38: 1.591 s/op
Iteration  39: 1.580 s/op
Iteration  40: 1.584 s/op
Iteration  41: 1.582 s/op
Iteration  42: 1.583 s/op
Iteration  43: 1.581 s/op
Iteration  44: 1.581 s/op
Iteration  45: 1.584 s/op
Iteration  46: 1.576 s/op
Iteration  47: 1.578 s/op
Iteration  48: 1.579 s/op
Iteration  49: 1.578 s/op
Iteration  50: 1.576 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.588 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 1 
    [1.575, 1.600) = 46 
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.572 s/op
     p(50.0000) =      1.581 s/op
     p(90.0000) =      1.591 s/op
     p(95.0000) =      1.640 s/op
     p(99.0000) =      1.802 s/op
     p(99.9000) =      1.802 s/op
     p(99.9900) =      1.802 s/op
     p(99.9990) =      1.802 s/op
     p(99.9999) =      1.802 s/op
    p(100.0000) =      1.802 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.588 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_graalvm-ce-19.1.1_1564682663559.json
{"wallclock_times": [80.302028181], "core_cycle_counts": [[60835577946], [53114093830], [63080625303], [90438494334]], "aperf_counts": [[60589236317], [53086100887], [63053268360], [90418710561]], "mperf_counts": [[60602684694], [53101155726], [63055703226], [90420615756]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:05:43: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 20:05:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:05:44: INFO] 493 executions left in scheduler queue
[2019-08-01 20:05:44: INFO] Executions until ETA known: 3851
[2019-08-01 20:05:44: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 20:05:44: INFO] Estimated completion (next execution): 2019-08-01 20:09:35 (0:03:50 from now)
[2019-08-01 20:05:44: INFO] Reboot in preparation for next execution
[2019-08-01 20:11:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.616 s/op
Iteration   2: 1.574 s/op
Iteration   3: 1.527 s/op
Iteration   4: 1.626 s/op
Iteration   5: 1.528 s/op
Iteration   6: 1.526 s/op
Iteration   7: 1.522 s/op
Iteration   8: 1.549 s/op
Iteration   9: 1.523 s/op
Iteration  10: 1.522 s/op
Iteration  11: 1.523 s/op
Iteration  12: 1.522 s/op
Iteration  13: 1.524 s/op
Iteration  14: 1.524 s/op
Iteration  15: 1.524 s/op
Iteration  16: 1.519 s/op
Iteration  17: 1.527 s/op
Iteration  18: 1.523 s/op
Iteration  19: 1.518 s/op
Iteration  20: 1.524 s/op
Iteration  21: 1.521 s/op
Iteration  22: 1.522 s/op
Iteration  23: 1.518 s/op
Iteration  24: 1.521 s/op
Iteration  25: 1.519 s/op
Iteration  26: 1.523 s/op
Iteration  27: 1.518 s/op
Iteration  28: 1.519 s/op
Iteration  29: 1.520 s/op
Iteration  30: 1.520 s/op
Iteration  31: 1.523 s/op
Iteration  32: 1.524 s/op
Iteration  33: 1.519 s/op
Iteration  34: 1.517 s/op
Iteration  35: 1.525 s/op
Iteration  36: 1.521 s/op
Iteration  37: 1.521 s/op
Iteration  38: 1.520 s/op
Iteration  39: 1.521 s/op
Iteration  40: 1.520 s/op
Iteration  41: 1.521 s/op
Iteration  42: 1.526 s/op
Iteration  43: 1.519 s/op
Iteration  44: 1.523 s/op
Iteration  45: 1.521 s/op
Iteration  46: 1.524 s/op
Iteration  47: 1.524 s/op
Iteration  48: 1.520 s/op
Iteration  49: 1.520 s/op
Iteration  50: 1.524 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.527 ?(99.9%) 0.010 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 41 
    [1.525, 1.538) = 5 
    [1.538, 1.550) = 1 
    [1.550, 1.563) = 0 
    [1.563, 1.575) = 1 
    [1.575, 1.588) = 0 
    [1.588, 1.600) = 0 
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 1 
    [1.625, 1.638) = 1 
    [1.638, 1.650) = 0 
    [1.650, 1.663) = 0 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.517 s/op
     p(50.0000) =      1.522 s/op
     p(90.0000) =      1.528 s/op
     p(95.0000) =      1.593 s/op
     p(99.0000) =      1.626 s/op
     p(99.9000) =      1.626 s/op
     p(99.9900) =      1.626 s/op
     p(99.9990) =      1.626 s/op
     p(99.9999) =      1.626 s/op
    p(100.0000) =      1.626 s/op


# Run complete. Total time: 00:01:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.527 ? 0.010   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_graalvm-ce-19.1.1_1564682993598.json
{"wallclock_times": [77.206611415], "core_cycle_counts": [[41665843310], [84645794342], [101519349213], [24790517306]], "aperf_counts": [[41465016906], [84629278950], [101506405855], [24777086253]], "mperf_counts": [[41479602100], [84630909724], [101524723682], [24781492492]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:11:10: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-08-01 20:11:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:11:11: INFO] 492 executions left in scheduler queue
[2019-08-01 20:11:11: INFO] Executions until ETA known: 3808
[2019-08-01 20:11:11: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-08-01 20:11:11: INFO] Estimated completion (next execution): 2019-08-01 20:14:59 (0:03:47 from now)
[2019-08-01 20:11:11: INFO] Reboot in preparation for next execution
[2019-08-01 20:24:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.329 s/op
Iteration   2: 11.416 s/op
Iteration   3: 11.011 s/op
Iteration   4: 11.149 s/op
Iteration   5: 11.188 s/op
Iteration   6: 11.112 s/op
Iteration   7: 11.164 s/op
Iteration   8: 11.067 s/op
Iteration   9: 11.015 s/op
Iteration  10: 11.086 s/op
Iteration  11: 11.116 s/op
Iteration  12: 11.760 s/op
Iteration  13: 11.115 s/op
Iteration  14: 11.114 s/op
Iteration  15: 11.165 s/op
Iteration  16: 10.976 s/op
Iteration  17: 10.984 s/op
Iteration  18: 11.112 s/op
Iteration  19: 11.054 s/op
Iteration  20: 11.081 s/op
Iteration  21: 11.143 s/op
Iteration  22: 11.154 s/op
Iteration  23: 11.775 s/op
Iteration  24: 11.148 s/op
Iteration  25: 11.193 s/op
Iteration  26: 11.164 s/op
Iteration  27: 10.997 s/op
Iteration  28: 11.013 s/op
Iteration  29: 11.069 s/op
Iteration  30: 11.040 s/op
Iteration  31: 11.053 s/op
Iteration  32: 11.121 s/op
Iteration  33: 11.127 s/op
Iteration  34: 11.788 s/op
Iteration  35: 11.186 s/op
Iteration  36: 11.159 s/op
Iteration  37: 11.171 s/op
Iteration  38: 11.001 s/op
Iteration  39: 11.063 s/op
Iteration  40: 11.138 s/op
Iteration  41: 11.041 s/op
Iteration  42: 11.037 s/op
Iteration  43: 11.095 s/op
Iteration  44: 11.189 s/op
Iteration  45: 11.749 s/op
Iteration  46: 11.152 s/op
Iteration  47: 11.211 s/op
Iteration  48: 11.161 s/op
Iteration  49: 11.028 s/op
Iteration  50: 11.018 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     11.164 ?(99.9%) 0.098 s/op

  Histogram, s/op:
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 3 
    [11.000, 11.050) = 9 
    [11.050, 11.100) = 8 
    [11.100, 11.150) = 11 
    [11.150, 11.200) = 12 
    [11.200, 11.250) = 1 
    [11.250, 11.300) = 0 
    [11.300, 11.350) = 1 
    [11.350, 11.400) = 0 
    [11.400, 11.450) = 1 
    [11.450, 11.500) = 0 
    [11.500, 11.550) = 0 
    [11.550, 11.600) = 0 
    [11.600, 11.650) = 0 
    [11.650, 11.700) = 0 
    [11.700, 11.750) = 1 
    [11.750, 11.800) = 3 

  Percentiles, s/op:
      p(0.0000) =     10.976 s/op
     p(50.0000) =     11.118 s/op
     p(90.0000) =     11.408 s/op
     p(95.0000) =     11.767 s/op
     p(99.0000) =     11.788 s/op
     p(99.9000) =     11.788 s/op
     p(99.9900) =     11.788 s/op
     p(99.9990) =     11.788 s/op
     p(99.9999) =     11.788 s/op
    p(100.0000) =     11.788 s/op


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.164 ? 0.098   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot-8u222-b10_1564683321578.json
{"wallclock_times": [559.1352332470001], "core_cycle_counts": [[317815921525], [581354806593], [723075117548], [459340460182]], "aperf_counts": [[316134282632], [581231334059], [722993756326], [459259831489]], "mperf_counts": [[316138715902], [581231463960], [723004319924], [459262576622]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:24:40: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-08-01 20:24:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:24:41: INFO] 491 executions left in scheduler queue
[2019-08-01 20:24:41: INFO] Executions until ETA known: 3790
[2019-08-01 20:24:41: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:24:41: INFO] Estimated completion (next execution): 2019-08-01 20:36:30 (0:11:49 from now)
[2019-08-01 20:24:41: INFO] Reboot in preparation for next execution
[2019-08-01 20:29:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 20:29:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 20:29:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 20:29:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 20:29:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 20:30:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.118 s/op
Iteration   2: 2.399 s/op
Iteration   3: 2.068 s/op
Iteration   4: 1.793 s/op
Iteration   5: 2.021 s/op
Iteration   6: 2.004 s/op
Iteration   7: 2.022 s/op
Iteration   8: 1.970 s/op
Iteration   9: 2.006 s/op
Iteration  10: 2.006 s/op
Iteration  11: 2.016 s/op
Iteration  12: 1.979 s/op
Iteration  13: 2.003 s/op
Iteration  14: 1.981 s/op
Iteration  15: 1.915 s/op
Iteration  16: 2.003 s/op
Iteration  17: 1.997 s/op
Iteration  18: 2.002 s/op
Iteration  19: 2.005 s/op
Iteration  20: 2.004 s/op
Iteration  21: 1.998 s/op
Iteration  22: 2.005 s/op
Iteration  23: 1.988 s/op
Iteration  24: 2.002 s/op
Iteration  25: 1.998 s/op
Iteration  26: 1.996 s/op
Iteration  27: 2.008 s/op
Iteration  28: 2.003 s/op
Iteration  29: 1.998 s/op
Iteration  30: 1.960 s/op
Iteration  31: 2.002 s/op
Iteration  32: 1.999 s/op
Iteration  33: 1.972 s/op
Iteration  34: 1.998 s/op
Iteration  35: 2.005 s/op
Iteration  36: 1.999 s/op
Iteration  37: 1.868 s/op
Iteration  38: 1.991 s/op
Iteration  39: 2.005 s/op
Iteration  40: 1.999 s/op
Iteration  41: 1.976 s/op
Iteration  42: 2.007 s/op
Iteration  43: 2.000 s/op
Iteration  44: 1.961 s/op
Iteration  45: 1.966 s/op
Iteration  46: 2.007 s/op
Iteration  47: 2.001 s/op
Iteration  48: 1.976 s/op
Iteration  49: 1.998 s/op
Iteration  50: 2.004 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.000 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 21 
    [2.000, 2.050) = 23 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.793 s/op
     p(50.0000) =      2.001 s/op
     p(90.0000) =      2.021 s/op
     p(95.0000) =      2.091 s/op
     p(99.0000) =      2.399 s/op
     p(99.9000) =      2.399 s/op
     p(99.9900) =      2.399 s/op
     p(99.9990) =      2.399 s/op
     p(99.9999) =      2.399 s/op
    p(100.0000) =      2.399 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.000 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot_12.0.2_1564684146551.json
{"wallclock_times": [101.02674241899999], "core_cycle_counts": [[119847883023], [58268901469], [62915048797], [59656030222]], "aperf_counts": [[119619289241], [58224469127], [62889959233], [59629449485]], "mperf_counts": [[135181904334], [66020741384], [70558862888], [66862110890]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 20:30:47: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:30:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:30:48: INFO] 490 executions left in scheduler queue
[2019-08-01 20:30:48: INFO] Executions until ETA known: 3787
[2019-08-01 20:30:48: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:30:48: INFO] Estimated completion (next execution): 2019-08-01 20:34:59 (0:04:11 from now)
[2019-08-01 20:30:48: INFO] Reboot in preparation for next execution
[2019-08-01 20:35:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 20:35:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 20:35:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 20:35:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 20:35:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 20:36:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.804 s/op
Iteration   2: 1.698 s/op
Iteration   3: 1.841 s/op
Iteration   4: 1.696 s/op
Iteration   5: 1.821 s/op
Iteration   6: 1.845 s/op
Iteration   7: 1.649 s/op
Iteration   8: 1.628 s/op
Iteration   9: 1.630 s/op
Iteration  10: 1.630 s/op
Iteration  11: 1.630 s/op
Iteration  12: 1.630 s/op
Iteration  13: 1.632 s/op
Iteration  14: 1.631 s/op
Iteration  15: 1.632 s/op
Iteration  16: 1.629 s/op
Iteration  17: 1.630 s/op
Iteration  18: 1.632 s/op
Iteration  19: 1.628 s/op
Iteration  20: 1.629 s/op
Iteration  21: 1.631 s/op
Iteration  22: 1.631 s/op
Iteration  23: 1.628 s/op
Iteration  24: 1.628 s/op
Iteration  25: 1.628 s/op
Iteration  26: 1.630 s/op
Iteration  27: 1.633 s/op
Iteration  28: 1.627 s/op
Iteration  29: 1.630 s/op
Iteration  30: 1.629 s/op
Iteration  31: 1.629 s/op
Iteration  32: 1.629 s/op
Iteration  33: 1.632 s/op
Iteration  34: 1.630 s/op
Iteration  35: 1.631 s/op
Iteration  36: 1.629 s/op
Iteration  37: 1.629 s/op
Iteration  38: 1.627 s/op
Iteration  39: 1.631 s/op
Iteration  40: 1.630 s/op
Iteration  41: 1.633 s/op
Iteration  42: 1.629 s/op
Iteration  43: 1.626 s/op
Iteration  44: 1.627 s/op
Iteration  45: 1.633 s/op
Iteration  46: 1.628 s/op
Iteration  47: 1.628 s/op
Iteration  48: 1.625 s/op
Iteration  49: 1.631 s/op
Iteration  50: 1.632 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.649 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 43 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 2 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 2 
    [1.825, 1.850) = 2 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.625 s/op
     p(50.0000) =      1.630 s/op
     p(90.0000) =      1.698 s/op
     p(95.0000) =      1.830 s/op
     p(99.0000) =      1.845 s/op
     p(99.9000) =      1.845 s/op
     p(99.9900) =      1.845 s/op
     p(99.9990) =      1.845 s/op
     p(99.9999) =      1.845 s/op
    p(100.0000) =      1.845 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.649 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot_12.0.2_1564684517772.json
{"wallclock_times": [83.368060447], "core_cycle_counts": [[56701602206], [48825894109], [90735577597], [75703482010]], "aperf_counts": [[56472542589], [48795010678], [90713281091], [75680775607]], "mperf_counts": [[57208200142], [49298418418], [91409769006], [76167755988]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 20:36:41: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-08-01 20:36:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:36:42: INFO] 489 executions left in scheduler queue
[2019-08-01 20:36:42: INFO] Executions until ETA known: 3740
[2019-08-01 20:36:42: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-08-01 20:36:42: INFO] Estimated completion (next execution): 2019-08-01 20:40:35 (0:03:53 from now)
[2019-08-01 20:36:42: INFO] Reboot in preparation for next execution
[2019-08-01 20:51:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.594 s/op
Iteration   2: 12.206 s/op
Iteration   3: 12.310 s/op
Iteration   4: 12.310 s/op
Iteration   5: 12.303 s/op
Iteration   6: 12.476 s/op
Iteration   7: 12.192 s/op
Iteration   8: 12.352 s/op
Iteration   9: 12.239 s/op
Iteration  10: 12.392 s/op
Iteration  11: 12.289 s/op
Iteration  12: 12.836 s/op
Iteration  13: 12.193 s/op
Iteration  14: 12.470 s/op
Iteration  15: 12.142 s/op
Iteration  16: 12.536 s/op
Iteration  17: 12.248 s/op
Iteration  18: 12.582 s/op
Iteration  19: 12.194 s/op
Iteration  20: 12.579 s/op
Iteration  21: 12.221 s/op
Iteration  22: 12.528 s/op
Iteration  23: 12.805 s/op
Iteration  24: 12.515 s/op
Iteration  25: 12.178 s/op
Iteration  26: 12.505 s/op
Iteration  27: 12.194 s/op
Iteration  28: 12.329 s/op
Iteration  29: 12.375 s/op
Iteration  30: 12.315 s/op
Iteration  31: 12.398 s/op
Iteration  32: 12.312 s/op
Iteration  33: 12.449 s/op
Iteration  34: 12.793 s/op
Iteration  35: 12.379 s/op
Iteration  36: 12.256 s/op
Iteration  37: 12.399 s/op
Iteration  38: 12.259 s/op
Iteration  39: 12.428 s/op
Iteration  40: 12.273 s/op
Iteration  41: 12.419 s/op
Iteration  42: 12.284 s/op
Iteration  43: 12.427 s/op
Iteration  44: 12.286 s/op
Iteration  45: 12.902 s/op
Iteration  46: 12.277 s/op
Iteration  47: 12.357 s/op
Iteration  48: 12.251 s/op
Iteration  49: 12.365 s/op
Iteration  50: 12.271 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     12.384 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [12.100, 12.150) = 1 
    [12.150, 12.200) = 5 
    [12.200, 12.250) = 4 
    [12.250, 12.300) = 9 
    [12.300, 12.350) = 6 
    [12.350, 12.400) = 8 
    [12.400, 12.450) = 4 
    [12.450, 12.500) = 2 
    [12.500, 12.550) = 4 
    [12.550, 12.600) = 3 
    [12.600, 12.650) = 0 
    [12.650, 12.700) = 0 
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 1 
    [12.800, 12.850) = 2 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.142 s/op
     p(50.0000) =     12.340 s/op
     p(90.0000) =     12.593 s/op
     p(95.0000) =     12.819 s/op
     p(99.0000) =     12.902 s/op
     p(99.9000) =     12.902 s/op
     p(99.9900) =     12.902 s/op
     p(99.9990) =     12.902 s/op
     p(99.9999) =     12.902 s/op
    p(100.0000) =     12.902 s/op


# Run complete. Total time: 00:10:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.384 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot-8u222-b10_1564684854570.json
{"wallclock_times": [620.1365547820001], "core_cycle_counts": [[526813543863], [586215969268], [505569351096], [668419655203]], "aperf_counts": [[525110019296], [586042551889], [505474354006], [668343492672]], "mperf_counts": [[525113294798], [586043312248], [505474546290], [668360377068]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 20:51:14: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-08-01 20:51:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:51:15: INFO] 488 executions left in scheduler queue
[2019-08-01 20:51:15: INFO] Executions until ETA known: 3726
[2019-08-01 20:51:15: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 20:51:15: INFO] Estimated completion (next execution): 2019-08-01 21:04:06 (0:12:50 from now)
[2019-08-01 20:51:15: INFO] Reboot in preparation for next execution
[2019-08-01 20:55:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 20:57:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.782 s/op
Iteration   2: 2.293 s/op
Iteration   3: 2.116 s/op
Iteration   4: 1.969 s/op
Iteration   5: 1.931 s/op
Iteration   6: 1.897 s/op
Iteration   7: 1.892 s/op
Iteration   8: 1.875 s/op
Iteration   9: 1.868 s/op
Iteration  10: 1.833 s/op
Iteration  11: 1.851 s/op
Iteration  12: 1.848 s/op
Iteration  13: 1.882 s/op
Iteration  14: 1.860 s/op
Iteration  15: 1.869 s/op
Iteration  16: 1.872 s/op
Iteration  17: 1.881 s/op
Iteration  18: 1.883 s/op
Iteration  19: 1.840 s/op
Iteration  20: 1.878 s/op
Iteration  21: 1.846 s/op
Iteration  22: 1.866 s/op
Iteration  23: 1.851 s/op
Iteration  24: 1.833 s/op
Iteration  25: 1.881 s/op
Iteration  26: 1.833 s/op
Iteration  27: 1.835 s/op
Iteration  28: 1.885 s/op
Iteration  29: 1.851 s/op
Iteration  30: 1.852 s/op
Iteration  31: 1.854 s/op
Iteration  32: 1.879 s/op
Iteration  33: 1.872 s/op
Iteration  34: 1.867 s/op
Iteration  35: 1.851 s/op
Iteration  36: 1.872 s/op
Iteration  37: 1.884 s/op
Iteration  38: 1.886 s/op
Iteration  39: 1.844 s/op
Iteration  40: 1.865 s/op
Iteration  41: 1.862 s/op
Iteration  42: 1.851 s/op
Iteration  43: 1.881 s/op
Iteration  44: 1.853 s/op
Iteration  45: 1.847 s/op
Iteration  46: 1.838 s/op
Iteration  47: 1.856 s/op
Iteration  48: 1.862 s/op
Iteration  49: 1.872 s/op
Iteration  50: 1.866 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.898 ?(99.9%) 0.073 s/op

  Histogram, s/op:
    [1.800, 1.900) = 45 
    [1.900, 2.000) = 2 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.833 s/op
     p(50.0000) =      1.867 s/op
     p(90.0000) =      1.928 s/op
     p(95.0000) =      2.196 s/op
     p(99.0000) =      2.782 s/op
     p(99.9000) =      2.782 s/op
     p(99.9900) =      2.782 s/op
     p(99.9990) =      2.782 s/op
     p(99.9999) =      2.782 s/op
    p(100.0000) =      2.782 s/op


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.898 ? 0.073   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9-8u222-b10_1564685747061.json
{"wallclock_times": [96.200330914], "core_cycle_counts": [[129369739439], [65713220895], [78340409910], [60383715564]], "aperf_counts": [[129086409210], [65636075532], [78275624357], [60328194279]], "mperf_counts": [[129088934432], [65636087982], [78275746334], [60330970134]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 20:57:23: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 20:57:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 20:57:24: INFO] 487 executions left in scheduler queue
[2019-08-01 20:57:24: INFO] Executions until ETA known: 3723
[2019-08-01 20:57:24: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 20:57:24: INFO] Estimated completion (next execution): 2019-08-01 21:01:30 (0:04:06 from now)
[2019-08-01 20:57:24: INFO] Reboot in preparation for next execution
[2019-08-01 21:01:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 21:03:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.018 s/op
Iteration   2: 2.675 s/op
Iteration   3: 2.508 s/op
Iteration   4: 2.568 s/op
Iteration   5: 2.325 s/op
Iteration   6: 2.357 s/op
Iteration   7: 2.386 s/op
Iteration   8: 2.381 s/op
Iteration   9: 2.392 s/op
Iteration  10: 2.357 s/op
Iteration  11: 2.383 s/op
Iteration  12: 2.337 s/op
Iteration  13: 2.345 s/op
Iteration  14: 2.376 s/op
Iteration  15: 2.362 s/op
Iteration  16: 2.334 s/op
Iteration  17: 2.387 s/op
Iteration  18: 2.388 s/op
Iteration  19: 2.369 s/op
Iteration  20: 2.386 s/op
Iteration  21: 2.375 s/op
Iteration  22: 2.337 s/op
Iteration  23: 2.330 s/op
Iteration  24: 2.320 s/op
Iteration  25: 2.317 s/op
Iteration  26: 2.320 s/op
Iteration  27: 2.324 s/op
Iteration  28: 2.325 s/op
Iteration  29: 2.320 s/op
Iteration  30: 2.325 s/op
Iteration  31: 2.327 s/op
Iteration  32: 2.303 s/op
Iteration  33: 2.309 s/op
Iteration  34: 2.309 s/op
Iteration  35: 2.293 s/op
Iteration  36: 2.284 s/op
Iteration  37: 2.291 s/op
Iteration  38: 2.299 s/op
Iteration  39: 2.306 s/op
Iteration  40: 2.280 s/op
Iteration  41: 2.303 s/op
Iteration  42: 2.302 s/op
Iteration  43: 2.278 s/op
Iteration  44: 2.305 s/op
Iteration  45: 2.301 s/op
Iteration  46: 2.299 s/op
Iteration  47: 2.310 s/op
Iteration  48: 2.292 s/op
Iteration  49: 2.296 s/op
Iteration  50: 2.295 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.358 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 10 
    [2.300, 2.350) = 23 
    [2.350, 2.400) = 13 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 1 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.278 s/op
     p(50.0000) =      2.325 s/op
     p(90.0000) =      2.391 s/op
     p(95.0000) =      2.616 s/op
     p(99.0000) =      3.018 s/op
     p(99.9000) =      3.018 s/op
     p(99.9900) =      3.018 s/op
     p(99.9990) =      3.018 s/op
     p(99.9999) =      3.018 s/op
    p(100.0000) =      3.018 s/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.358 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9-8u222-b10_1564686111510.json
{"wallclock_times": [119.03707611799999], "core_cycle_counts": [[124375199395], [107691447973], [82925405583], [90546445754]], "aperf_counts": [[124063818244], [107633961763], [82876813162], [90517930536]], "mperf_counts": [[124067804020], [107633948424], [82876893152], [90517966988]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 21:03:50: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-08-01 21:03:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:03:51: INFO] 486 executions left in scheduler queue
[2019-08-01 21:03:51: INFO] Executions until ETA known: 3703
[2019-08-01 21:03:51: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:03:51: INFO] Estimated completion (next execution): 2019-08-01 21:08:20 (0:04:29 from now)
[2019-08-01 21:03:51: INFO] Reboot in preparation for next execution
[2019-08-01 21:08:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:08:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:08:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:08:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:08:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:14:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.156 s/op
Iteration   2: 7.100 s/op
Iteration   3: 7.028 s/op
Iteration   4: 7.170 s/op
Iteration   5: 6.439 s/op
Iteration   6: 6.848 s/op
Iteration   7: 6.873 s/op
Iteration   8: 6.872 s/op
Iteration   9: 6.149 s/op
Iteration  10: 6.850 s/op
Iteration  11: 6.874 s/op
Iteration  12: 6.894 s/op
Iteration  13: 6.857 s/op
Iteration  14: 6.835 s/op
Iteration  15: 6.632 s/op
Iteration  16: 6.887 s/op
Iteration  17: 6.889 s/op
Iteration  18: 6.878 s/op
Iteration  19: 6.920 s/op
Iteration  20: 6.887 s/op
Iteration  21: 6.866 s/op
Iteration  22: 6.344 s/op
Iteration  23: 6.871 s/op
Iteration  24: 6.920 s/op
Iteration  25: 6.885 s/op
Iteration  26: 6.901 s/op
Iteration  27: 6.511 s/op
Iteration  28: 6.867 s/op
Iteration  29: 6.859 s/op
Iteration  30: 6.853 s/op
Iteration  31: 6.860 s/op
Iteration  32: 6.900 s/op
Iteration  33: 6.847 s/op
Iteration  34: 6.875 s/op
Iteration  35: 6.871 s/op
Iteration  36: 6.870 s/op
Iteration  37: 6.856 s/op
Iteration  38: 6.860 s/op
Iteration  39: 6.881 s/op
Iteration  40: 6.849 s/op
Iteration  41: 6.842 s/op
Iteration  42: 6.739 s/op
Iteration  43: 6.833 s/op
Iteration  44: 6.319 s/op
Iteration  45: 6.864 s/op
Iteration  46: 6.874 s/op
Iteration  47: 6.847 s/op
Iteration  48: 6.856 s/op
Iteration  49: 6.886 s/op
Iteration  50: 6.898 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.831 ?(99.9%) 0.092 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 2 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 2 
    [6.750, 6.875) = 25 
    [6.875, 7.000) = 14 
    [7.000, 7.125) = 2 
    [7.125, 7.250) = 2 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.149 s/op
     p(50.0000) =      6.869 s/op
     p(90.0000) =      6.920 s/op
     p(95.0000) =      7.125 s/op
     p(99.0000) =      7.170 s/op
     p(99.9000) =      7.170 s/op
     p(99.9900) =      7.170 s/op
     p(99.9990) =      7.170 s/op
     p(99.9999) =      7.170 s/op
    p(100.0000) =      7.170 s/op


# Run complete. Total time: 00:05:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.831 ? 0.092   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot_12.0.2_1564686498005.json
{"wallclock_times": [342.63843436700006], "core_cycle_counts": [[210605850035], [147054304982], [339073927839], [291164325172]], "aperf_counts": [[209701209064], [146985396349], [339032595622], [291136283830]], "mperf_counts": [[234454029246], [163437580806], [384791084480], [331834062876]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:14:00: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:14:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:14:01: INFO] 485 executions left in scheduler queue
[2019-08-01 21:14:01: INFO] Executions until ETA known: 3698
[2019-08-01 21:14:01: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:14:01: INFO] Estimated completion (next execution): 2019-08-01 21:22:14 (0:08:12 from now)
[2019-08-01 21:14:01: INFO] Reboot in preparation for next execution
[2019-08-01 21:18:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:18:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:18:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:18:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:18:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:27:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.655 s/op
Iteration   2: 11.272 s/op
Iteration   3: 10.920 s/op
Iteration   4: 10.659 s/op
Iteration   5: 10.678 s/op
Iteration   6: 10.674 s/op
Iteration   7: 10.705 s/op
Iteration   8: 10.667 s/op
Iteration   9: 10.695 s/op
Iteration  10: 10.692 s/op
Iteration  11: 10.684 s/op
Iteration  12: 10.684 s/op
Iteration  13: 10.694 s/op
Iteration  14: 10.668 s/op
Iteration  15: 10.679 s/op
Iteration  16: 10.689 s/op
Iteration  17: 10.645 s/op
Iteration  18: 10.666 s/op
Iteration  19: 10.659 s/op
Iteration  20: 10.665 s/op
Iteration  21: 10.671 s/op
Iteration  22: 10.658 s/op
Iteration  23: 10.675 s/op
Iteration  24: 10.655 s/op
Iteration  25: 10.659 s/op
Iteration  26: 10.665 s/op
Iteration  27: 10.661 s/op
Iteration  28: 10.641 s/op
Iteration  29: 10.654 s/op
Iteration  30: 10.647 s/op
Iteration  31: 10.658 s/op
Iteration  32: 10.653 s/op
Iteration  33: 10.662 s/op
Iteration  34: 10.663 s/op
Iteration  35: 10.675 s/op
Iteration  36: 10.657 s/op
Iteration  37: 10.661 s/op
Iteration  38: 10.689 s/op
Iteration  39: 10.670 s/op
Iteration  40: 10.662 s/op
Iteration  41: 10.652 s/op
Iteration  42: 10.660 s/op
Iteration  43: 10.649 s/op
Iteration  44: 10.682 s/op
Iteration  45: 10.673 s/op
Iteration  46: 10.643 s/op
Iteration  47: 10.663 s/op
Iteration  48: 10.672 s/op
Iteration  49: 10.675 s/op
Iteration  50: 10.676 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.685 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [10.600, 10.650) = 5 
    [10.650, 10.700) = 42 
    [10.700, 10.750) = 1 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 1 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 0 
    [11.100, 11.150) = 0 
    [11.150, 11.200) = 0 
    [11.200, 11.250) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.641 s/op
     p(50.0000) =     10.666 s/op
     p(90.0000) =     10.693 s/op
     p(95.0000) =     10.802 s/op
     p(99.0000) =     11.272 s/op
     p(99.9000) =     11.272 s/op
     p(99.9900) =     11.272 s/op
     p(99.9990) =     11.272 s/op
     p(99.9999) =     11.272 s/op
    p(100.0000) =     11.272 s/op


# Run complete. Total time: 00:08:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.685 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot_12.0.2_1564687093432.json
{"wallclock_times": [535.253234622], "core_cycle_counts": [[376817829230], [474617964320], [519427993545], [366327023341]], "aperf_counts": [[375432903380], [474509933194], [519386100696], [366287000487]], "mperf_counts": [[375915768978], [474557140964], [519427411686], [366372096946]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:27:08: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:27:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:27:09: INFO] 484 executions left in scheduler queue
[2019-08-01 21:27:09: INFO] Executions until ETA known: 3696
[2019-08-01 21:27:09: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:27:09: INFO] Estimated completion (next execution): 2019-08-01 21:38:35 (0:11:25 from now)
[2019-08-01 21:27:09: INFO] Reboot in preparation for next execution
[2019-08-01 21:31:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:31:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:31:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:31:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:31:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:37:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.187 s/op
Iteration   2: 6.759 s/op
Iteration   3: 6.727 s/op
Iteration   4: 6.905 s/op
Iteration   5: 6.733 s/op
Iteration   6: 6.723 s/op
Iteration   7: 6.609 s/op
Iteration   8: 6.742 s/op
Iteration   9: 6.764 s/op
Iteration  10: 6.623 s/op
Iteration  11: 6.761 s/op
Iteration  12: 6.640 s/op
Iteration  13: 6.745 s/op
Iteration  14: 6.783 s/op
Iteration  15: 6.625 s/op
Iteration  16: 6.737 s/op
Iteration  17: 6.607 s/op
Iteration  18: 6.744 s/op
Iteration  19: 6.758 s/op
Iteration  20: 6.624 s/op
Iteration  21: 6.742 s/op
Iteration  22: 6.736 s/op
Iteration  23: 6.600 s/op
Iteration  24: 6.731 s/op
Iteration  25: 6.734 s/op
Iteration  26: 6.709 s/op
Iteration  27: 6.689 s/op
Iteration  28: 6.716 s/op
Iteration  29: 6.673 s/op
Iteration  30: 6.687 s/op
Iteration  31: 6.784 s/op
Iteration  32: 6.701 s/op
Iteration  33: 6.683 s/op
Iteration  34: 6.721 s/op
Iteration  35: 6.628 s/op
Iteration  36: 6.768 s/op
Iteration  37: 6.757 s/op
Iteration  38: 6.611 s/op
Iteration  39: 6.738 s/op
Iteration  40: 6.612 s/op
Iteration  41: 6.769 s/op
Iteration  42: 6.742 s/op
Iteration  43: 6.658 s/op
Iteration  44: 6.740 s/op
Iteration  45: 6.759 s/op
Iteration  46: 6.612 s/op
Iteration  47: 6.751 s/op
Iteration  48: 6.765 s/op
Iteration  49: 6.645 s/op
Iteration  50: 6.756 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.720 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 1 
    [6.600, 6.650) = 11 
    [6.650, 6.700) = 5 
    [6.700, 6.750) = 18 
    [6.750, 6.800) = 13 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.600 s/op
     p(50.0000) =      6.733 s/op
     p(90.0000) =      6.769 s/op
     p(95.0000) =      6.838 s/op
     p(99.0000) =      7.187 s/op
     p(99.9000) =      7.187 s/op
     p(99.9900) =      7.187 s/op
     p(99.9990) =      7.187 s/op
     p(99.9999) =      7.187 s/op
    p(100.0000) =      7.187 s/op


# Run complete. Total time: 00:05:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.720 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot_12.0.2_1564687894663.json
{"wallclock_times": [337.145910611], "core_cycle_counts": [[395224456754], [209715610943], [255470854810], [340049650360]], "aperf_counts": [[394489317149], [209615777132], [255409816482], [340010099816]], "mperf_counts": [[395179164562], [209717891608], [255682293176], [340539825962]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:37:11: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:37:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:37:12: INFO] 483 executions left in scheduler queue
[2019-08-01 21:37:12: INFO] Executions until ETA known: 3686
[2019-08-01 21:37:12: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:37:12: INFO] Estimated completion (next execution): 2019-08-01 21:45:20 (0:08:07 from now)
[2019-08-01 21:37:12: INFO] Reboot in preparation for next execution
[2019-08-01 21:41:23: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 21:41:23: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 21:41:23: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 21:41:23: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 21:41:23: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 21:54:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.559 s/op
Iteration   2: 16.111 s/op
Iteration   3: 16.234 s/op
Iteration   4: 16.035 s/op
Iteration   5: 15.885 s/op
Iteration   6: 16.133 s/op
Iteration   7: 15.933 s/op
Iteration   8: 15.870 s/op
Iteration   9: 15.871 s/op
Iteration  10: 15.867 s/op
Iteration  11: 15.862 s/op
Iteration  12: 15.951 s/op
Iteration  13: 15.843 s/op
Iteration  14: 15.846 s/op
Iteration  15: 15.867 s/op
Iteration  16: 15.888 s/op
Iteration  17: 15.928 s/op
Iteration  18: 15.835 s/op
Iteration  19: 15.869 s/op
Iteration  20: 15.919 s/op
Iteration  21: 15.874 s/op
Iteration  22: 15.841 s/op
Iteration  23: 15.884 s/op
Iteration  24: 16.091 s/op
Iteration  25: 15.914 s/op
Iteration  26: 15.841 s/op
Iteration  27: 15.857 s/op
Iteration  28: 15.918 s/op
Iteration  29: 15.864 s/op
Iteration  30: 15.832 s/op
Iteration  31: 15.882 s/op
Iteration  32: 15.948 s/op
Iteration  33: 15.903 s/op
Iteration  34: 15.865 s/op
Iteration  35: 15.830 s/op
Iteration  36: 15.866 s/op
Iteration  37: 15.909 s/op
Iteration  38: 15.843 s/op
Iteration  39: 15.889 s/op
Iteration  40: 15.885 s/op
Iteration  41: 15.946 s/op
Iteration  42: 15.844 s/op
Iteration  43: 15.970 s/op
Iteration  44: 15.912 s/op
Iteration  45: 15.897 s/op
Iteration  46: 15.949 s/op
Iteration  47: 15.868 s/op
Iteration  48: 15.877 s/op
Iteration  49: 15.881 s/op
Iteration  50: 15.829 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.920 ?(99.9%) 0.061 s/op

  Histogram, s/op:
    [15.800, 15.850) = 10 
    [15.850, 15.900) = 21 
    [15.900, 15.950) = 11 
    [15.950, 16.000) = 2 
    [16.000, 16.050) = 1 
    [16.050, 16.100) = 1 
    [16.100, 16.150) = 2 
    [16.150, 16.200) = 0 
    [16.200, 16.250) = 1 
    [16.250, 16.300) = 0 
    [16.300, 16.350) = 0 
    [16.350, 16.400) = 0 
    [16.400, 16.450) = 0 
    [16.450, 16.500) = 0 
    [16.500, 16.550) = 0 
    [16.550, 16.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.829 s/op
     p(50.0000) =     15.883 s/op
     p(90.0000) =     16.086 s/op
     p(95.0000) =     16.178 s/op
     p(99.0000) =     16.559 s/op
     p(99.9000) =     16.559 s/op
     p(99.9900) =     16.559 s/op
     p(99.9990) =     16.559 s/op
     p(99.9999) =     16.559 s/op
    p(100.0000) =     16.559 s/op


# Run complete. Total time: 00:13:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.920 ? 0.061   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot_12.0.2_1564688483700.json
{"wallclock_times": [797.025391792], "core_cycle_counts": [[323059627149], [482399837168], [1000317910534], [766236446469]], "aperf_counts": [[320897916535], [482204716098], [1000228523364], [766174872928]], "mperf_counts": [[321738116804], [482300196262], [1000346622868], [766300990464]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 21:54:40: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-08-01 21:54:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 21:54:41: INFO] 482 executions left in scheduler queue
[2019-08-01 21:54:41: INFO] Executions until ETA known: 3670
[2019-08-01 21:54:41: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-08-01 21:54:41: INFO] Estimated completion (next execution): 2019-08-01 22:10:28 (0:15:47 from now)
[2019-08-01 21:54:41: INFO] Reboot in preparation for next execution
[2019-08-01 22:03:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.564 s/op
Iteration   2: 5.205 s/op
Iteration   3: 5.371 s/op
Iteration   4: 5.220 s/op
Iteration   5: 5.336 s/op
Iteration   6: 5.085 s/op
Iteration   7: 5.137 s/op
Iteration   8: 5.152 s/op
Iteration   9: 5.215 s/op
Iteration  10: 5.072 s/op
Iteration  11: 5.221 s/op
Iteration  12: 5.994 s/op
Iteration  13: 5.111 s/op
Iteration  14: 5.091 s/op
Iteration  15: 5.264 s/op
Iteration  16: 5.111 s/op
Iteration  17: 5.134 s/op
Iteration  18: 5.142 s/op
Iteration  19: 5.137 s/op
Iteration  20: 5.125 s/op
Iteration  21: 5.132 s/op
Iteration  22: 5.142 s/op
Iteration  23: 6.048 s/op
Iteration  24: 5.052 s/op
Iteration  25: 5.115 s/op
Iteration  26: 5.137 s/op
Iteration  27: 5.118 s/op
Iteration  28: 5.125 s/op
Iteration  29: 5.113 s/op
Iteration  30: 5.136 s/op
Iteration  31: 5.114 s/op
Iteration  32: 5.156 s/op
Iteration  33: 5.108 s/op
Iteration  34: 6.063 s/op
Iteration  35: 5.055 s/op
Iteration  36: 5.147 s/op
Iteration  37: 5.150 s/op
Iteration  38: 5.126 s/op
Iteration  39: 5.134 s/op
Iteration  40: 5.122 s/op
Iteration  41: 5.142 s/op
Iteration  42: 5.120 s/op
Iteration  43: 5.131 s/op
Iteration  44: 5.125 s/op
Iteration  45: 6.160 s/op
Iteration  46: 5.060 s/op
Iteration  47: 5.119 s/op
Iteration  48: 5.130 s/op
Iteration  49: 5.129 s/op
Iteration  50: 5.129 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.224 ?(99.9%) 0.131 s/op

  Histogram, s/op:
    [5.000, 5.125) = 17 
    [5.125, 5.250) = 25 
    [5.250, 5.375) = 3 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 1 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.052 s/op
     p(50.0000) =      5.133 s/op
     p(90.0000) =      5.545 s/op
     p(95.0000) =      6.055 s/op
     p(99.0000) =      6.160 s/op
     p(99.9000) =      6.160 s/op
     p(99.9900) =      6.160 s/op
     p(99.9990) =      6.160 s/op
     p(99.9999) =      6.160 s/op
    p(100.0000) =      6.160 s/op


# Run complete. Total time: 00:04:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.224 ? 0.131   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_graalvm-ee-19.1.1_1564689530460.json
{"wallclock_times": [262.209268597], "core_cycle_counts": [[280962837058], [267342698268], [273892871709], [233474056625]], "aperf_counts": [[280323109957], [267272898440], [273855115555], [233440381522]], "mperf_counts": [[280341211888], [267277214672], [273856357530], [233441778200]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 22:03:12: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-08-01 22:03:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:03:13: INFO] 481 executions left in scheduler queue
[2019-08-01 22:03:13: INFO] Executions until ETA known: 3629
[2019-08-01 22:03:13: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:03:13: INFO] Estimated completion (next execution): 2019-08-01 22:10:06 (0:06:52 from now)
[2019-08-01 22:03:13: INFO] Reboot in preparation for next execution
[2019-08-01 22:07:23: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:07:23: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:07:23: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:07:23: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:07:23: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:15:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.637 s/op
Iteration   2: 9.649 s/op
Iteration   3: 9.372 s/op
Iteration   4: 9.678 s/op
Iteration   5: 9.303 s/op
Iteration   6: 9.318 s/op
Iteration   7: 9.294 s/op
Iteration   8: 9.338 s/op
Iteration   9: 9.319 s/op
Iteration  10: 9.329 s/op
Iteration  11: 9.329 s/op
Iteration  12: 9.320 s/op
Iteration  13: 9.333 s/op
Iteration  14: 9.363 s/op
Iteration  15: 9.332 s/op
Iteration  16: 9.311 s/op
Iteration  17: 9.339 s/op
Iteration  18: 9.387 s/op
Iteration  19: 9.322 s/op
Iteration  20: 9.328 s/op
Iteration  21: 9.340 s/op
Iteration  22: 9.341 s/op
Iteration  23: 9.321 s/op
Iteration  24: 9.322 s/op
Iteration  25: 9.335 s/op
Iteration  26: 9.325 s/op
Iteration  27: 9.353 s/op
Iteration  28: 9.337 s/op
Iteration  29: 9.350 s/op
Iteration  30: 9.368 s/op
Iteration  31: 9.358 s/op
Iteration  32: 9.321 s/op
Iteration  33: 9.344 s/op
Iteration  34: 9.345 s/op
Iteration  35: 9.329 s/op
Iteration  36: 9.326 s/op
Iteration  37: 9.324 s/op
Iteration  38: 9.333 s/op
Iteration  39: 9.315 s/op
Iteration  40: 9.357 s/op
Iteration  41: 9.307 s/op
Iteration  42: 9.341 s/op
Iteration  43: 9.316 s/op
Iteration  44: 9.346 s/op
Iteration  45: 9.324 s/op
Iteration  46: 9.357 s/op
Iteration  47: 9.342 s/op
Iteration  48: 9.325 s/op
Iteration  49: 9.330 s/op
Iteration  50: 9.333 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.353 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [9.200, 9.250) = 0 
    [9.250, 9.300) = 1 
    [9.300, 9.350) = 38 
    [9.350, 9.400) = 8 
    [9.400, 9.450) = 0 
    [9.450, 9.500) = 0 
    [9.500, 9.550) = 0 
    [9.550, 9.600) = 0 
    [9.600, 9.650) = 2 

  Percentiles, s/op:
      p(0.0000) =      9.294 s/op
     p(50.0000) =      9.333 s/op
     p(90.0000) =      9.372 s/op
     p(95.0000) =      9.642 s/op
     p(99.0000) =      9.678 s/op
     p(99.9000) =      9.678 s/op
     p(99.9900) =      9.678 s/op
     p(99.9990) =      9.678 s/op
     p(99.9999) =      9.678 s/op
    p(100.0000) =      9.678 s/op


# Run complete. Total time: 00:07:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.353 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot_11.0.4_1564690043525.json
{"wallclock_times": [468.6899874420001], "core_cycle_counts": [[241331959469], [429176336237], [722640218564], [122560611780]], "aperf_counts": [[240026392084], [429095625644], [722603793275], [122522177575]], "mperf_counts": [[240590006336], [429131717882], [722649932480], [122661799634]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:15:12: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:15:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:15:13: INFO] 480 executions left in scheduler queue
[2019-08-01 22:15:13: INFO] Executions until ETA known: 3623
[2019-08-01 22:15:13: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:15:13: INFO] Estimated completion (next execution): 2019-08-01 22:25:32 (0:10:18 from now)
[2019-08-01 22:15:13: INFO] Reboot in preparation for next execution
[2019-08-01 22:19:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:19:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:19:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:19:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:19:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:32:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.497 s/op
Iteration   2: 16.044 s/op
Iteration   3: 15.809 s/op
Iteration   4: 15.883 s/op
Iteration   5: 16.973 s/op
Iteration   6: 15.899 s/op
Iteration   7: 15.766 s/op
Iteration   8: 15.790 s/op
Iteration   9: 15.780 s/op
Iteration  10: 15.746 s/op
Iteration  11: 15.807 s/op
Iteration  12: 15.829 s/op
Iteration  13: 15.930 s/op
Iteration  14: 15.883 s/op
Iteration  15: 15.910 s/op
Iteration  16: 15.806 s/op
Iteration  17: 15.839 s/op
Iteration  18: 15.811 s/op
Iteration  19: 15.741 s/op
Iteration  20: 15.750 s/op
Iteration  21: 15.730 s/op
Iteration  22: 15.873 s/op
Iteration  23: 15.781 s/op
Iteration  24: 15.758 s/op
Iteration  25: 15.819 s/op
Iteration  26: 15.797 s/op
Iteration  27: 15.944 s/op
Iteration  28: 15.824 s/op
Iteration  29: 15.799 s/op
Iteration  30: 15.750 s/op
Iteration  31: 15.772 s/op
Iteration  32: 15.705 s/op
Iteration  33: 15.745 s/op
Iteration  34: 15.843 s/op
Iteration  35: 15.767 s/op
Iteration  36: 15.758 s/op
Iteration  37: 15.810 s/op
Iteration  38: 16.294 s/op
Iteration  39: 16.419 s/op
Iteration  40: 15.727 s/op
Iteration  41: 15.709 s/op
Iteration  42: 15.770 s/op
Iteration  43: 15.759 s/op
Iteration  44: 15.761 s/op
Iteration  45: 15.734 s/op
Iteration  46: 15.832 s/op
Iteration  47: 15.761 s/op
Iteration  48: 15.811 s/op
Iteration  49: 15.877 s/op
Iteration  50: 15.927 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.847 ?(99.9%) 0.105 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 1 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 10 
    [15.750, 15.875) = 27 
    [15.875, 16.000) = 8 
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 1 
    [16.375, 16.500) = 1 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 0 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.497 s/op
     p(50.0000) =     15.802 s/op
     p(90.0000) =     15.942 s/op
     p(95.0000) =     16.350 s/op
     p(99.0000) =     16.973 s/op
     p(99.9000) =     16.973 s/op
     p(99.9900) =     16.973 s/op
     p(99.9990) =     16.973 s/op
     p(99.9999) =     16.973 s/op
    p(100.0000) =     16.973 s/op


# Run complete. Total time: 00:13:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.847 ? 0.105   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot_11.0.4_1564690762556.json
{"wallclock_times": [793.383620508], "core_cycle_counts": [[613063491125], [909993775804], [565297962155], [466764989081]], "aperf_counts": [[611044726591], [909821431052], [565239687278], [466713117881]], "mperf_counts": [[613052464302], [910060472286], [566882108186], [466752818512]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:32:35: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:32:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:32:36: INFO] 479 executions left in scheduler queue
[2019-08-01 22:32:36: INFO] Executions until ETA known: 3621
[2019-08-01 22:32:36: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:32:36: INFO] Estimated completion (next execution): 2019-08-01 22:48:20 (0:15:43 from now)
[2019-08-01 22:32:36: INFO] Reboot in preparation for next execution
[2019-08-01 22:36:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:36:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:36:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:36:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:36:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:42:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.642 s/op
Iteration   2: 6.853 s/op
Iteration   3: 6.287 s/op
Iteration   4: 6.278 s/op
Iteration   5: 6.303 s/op
Iteration   6: 6.362 s/op
Iteration   7: 6.359 s/op
Iteration   8: 6.281 s/op
Iteration   9: 6.260 s/op
Iteration  10: 6.400 s/op
Iteration  11: 6.268 s/op
Iteration  12: 6.251 s/op
Iteration  13: 6.266 s/op
Iteration  14: 6.260 s/op
Iteration  15: 6.428 s/op
Iteration  16: 6.297 s/op
Iteration  17: 6.281 s/op
Iteration  18: 6.301 s/op
Iteration  19: 6.256 s/op
Iteration  20: 6.259 s/op
Iteration  21: 6.266 s/op
Iteration  22: 6.238 s/op
Iteration  23: 6.252 s/op
Iteration  24: 6.384 s/op
Iteration  25: 6.258 s/op
Iteration  26: 6.246 s/op
Iteration  27: 6.219 s/op
Iteration  28: 6.341 s/op
Iteration  29: 6.230 s/op
Iteration  30: 6.330 s/op
Iteration  31: 6.230 s/op
Iteration  32: 6.317 s/op
Iteration  33: 6.228 s/op
Iteration  34: 6.203 s/op
Iteration  35: 6.345 s/op
Iteration  36: 6.256 s/op
Iteration  37: 6.257 s/op
Iteration  38: 6.270 s/op
Iteration  39: 6.268 s/op
Iteration  40: 6.254 s/op
Iteration  41: 6.249 s/op
Iteration  42: 6.235 s/op
Iteration  43: 6.234 s/op
Iteration  44: 6.244 s/op
Iteration  45: 6.376 s/op
Iteration  46: 6.253 s/op
Iteration  47: 6.275 s/op
Iteration  48: 6.242 s/op
Iteration  49: 6.255 s/op
Iteration  50: 6.234 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.298 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [6.200, 6.250) = 13 
    [6.250, 6.300) = 23 
    [6.300, 6.350) = 6 
    [6.350, 6.400) = 5 
    [6.400, 6.450) = 1 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.203 s/op
     p(50.0000) =      6.263 s/op
     p(90.0000) =      6.383 s/op
     p(95.0000) =      6.524 s/op
     p(99.0000) =      6.853 s/op
     p(99.9000) =      6.853 s/op
     p(99.9900) =      6.853 s/op
     p(99.9990) =      6.853 s/op
     p(99.9999) =      6.853 s/op
    p(100.0000) =      6.853 s/op


# Run complete. Total time: 00:05:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.298 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot_11.0.4_1564691808483.json
{"wallclock_times": [316.05888993], "core_cycle_counts": [[279820392003], [257940795260], [273791799991], [297692768078]], "aperf_counts": [[279040388685], [257859333534], [273742273999], [297653590620]], "mperf_counts": [[279507483064], [257933464418], [273808170950], [298808597944]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:42:04: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:42:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:42:05: INFO] 478 executions left in scheduler queue
[2019-08-01 22:42:05: INFO] Executions until ETA known: 3615
[2019-08-01 22:42:05: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:42:05: INFO] Estimated completion (next execution): 2019-08-01 22:49:51 (0:07:46 from now)
[2019-08-01 22:42:05: INFO] Reboot in preparation for next execution
[2019-08-01 22:46:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:46:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:46:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:46:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:46:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:51:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.619 s/op
Iteration   2: 5.127 s/op
Iteration   3: 6.448 s/op
Iteration   4: 6.481 s/op
Iteration   5: 6.763 s/op
Iteration   6: 6.226 s/op
Iteration   7: 6.334 s/op
Iteration   8: 6.383 s/op
Iteration   9: 6.365 s/op
Iteration  10: 6.358 s/op
Iteration  11: 6.362 s/op
Iteration  12: 6.346 s/op
Iteration  13: 6.369 s/op
Iteration  14: 6.332 s/op
Iteration  15: 6.366 s/op
Iteration  16: 6.344 s/op
Iteration  17: 6.347 s/op
Iteration  18: 6.070 s/op
Iteration  19: 6.369 s/op
Iteration  20: 6.353 s/op
Iteration  21: 6.344 s/op
Iteration  22: 6.355 s/op
Iteration  23: 6.354 s/op
Iteration  24: 6.336 s/op
Iteration  25: 6.347 s/op
Iteration  26: 6.354 s/op
Iteration  27: 6.332 s/op
Iteration  28: 6.364 s/op
Iteration  29: 6.338 s/op
Iteration  30: 6.350 s/op
Iteration  31: 6.372 s/op
Iteration  32: 6.356 s/op
Iteration  33: 6.344 s/op
Iteration  34: 6.353 s/op
Iteration  35: 5.544 s/op
Iteration  36: 6.378 s/op
Iteration  37: 6.368 s/op
Iteration  38: 6.391 s/op
Iteration  39: 6.362 s/op
Iteration  40: 6.373 s/op
Iteration  41: 6.352 s/op
Iteration  42: 6.078 s/op
Iteration  43: 6.094 s/op
Iteration  44: 6.377 s/op
Iteration  45: 6.368 s/op
Iteration  46: 6.375 s/op
Iteration  47: 6.362 s/op
Iteration  48: 6.373 s/op
Iteration  49: 6.386 s/op
Iteration  50: 6.353 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.316 ?(99.9%) 0.114 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 1 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 3 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 35 
    [6.375, 6.500) = 7 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.127 s/op
     p(50.0000) =      6.355 s/op
     p(90.0000) =      6.391 s/op
     p(95.0000) =      6.543 s/op
     p(99.0000) =      6.763 s/op
     p(99.9000) =      6.763 s/op
     p(99.9900) =      6.763 s/op
     p(99.9990) =      6.763 s/op
     p(99.9999) =      6.763 s/op
    p(100.0000) =      6.763 s/op


# Run complete. Total time: 00:05:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.316 ? 0.114   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot_11.0.4_1564692377527.json
{"wallclock_times": [316.932753378], "core_cycle_counts": [[178649059904], [404012969807], [224134561818], [105796286571]], "aperf_counts": [[177796681937], [403946051095], [224101405343], [105760756151]], "mperf_counts": [[202213366220], [459609780088], [248624181312], [120396062344]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 22:51:34: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-08-01 22:51:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 22:51:35: INFO] 477 executions left in scheduler queue
[2019-08-01 22:51:35: INFO] Executions until ETA known: 3604
[2019-08-01 22:51:35: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 22:51:35: INFO] Estimated completion (next execution): 2019-08-01 22:59:22 (0:07:47 from now)
[2019-08-01 22:51:35: INFO] Reboot in preparation for next execution
[2019-08-01 22:55:46: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 22:55:46: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 22:55:46: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 22:55:46: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 22:55:46: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 22:55:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:01:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.640 s/op
Iteration   2: 7.221 s/op
Iteration   3: 7.116 s/op
Iteration   4: 7.142 s/op
Iteration   5: 6.985 s/op
Iteration   6: 6.977 s/op
Iteration   7: 6.974 s/op
Iteration   8: 7.064 s/op
Iteration   9: 7.080 s/op
Iteration  10: 7.028 s/op
Iteration  11: 7.049 s/op
Iteration  12: 7.013 s/op
Iteration  13: 7.028 s/op
Iteration  14: 7.008 s/op
Iteration  15: 7.029 s/op
Iteration  16: 7.026 s/op
Iteration  17: 6.990 s/op
Iteration  18: 7.008 s/op
Iteration  19: 6.977 s/op
Iteration  20: 6.977 s/op
Iteration  21: 6.965 s/op
Iteration  22: 7.025 s/op
Iteration  23: 7.032 s/op
Iteration  24: 7.030 s/op
Iteration  25: 7.020 s/op
Iteration  26: 7.039 s/op
Iteration  27: 7.048 s/op
Iteration  28: 6.997 s/op
Iteration  29: 6.957 s/op
Iteration  30: 7.022 s/op
Iteration  31: 6.987 s/op
Iteration  32: 6.982 s/op
Iteration  33: 7.021 s/op
Iteration  34: 6.974 s/op
Iteration  35: 7.015 s/op
Iteration  36: 7.014 s/op
Iteration  37: 7.024 s/op
Iteration  38: 7.049 s/op
Iteration  39: 7.063 s/op
Iteration  40: 7.043 s/op
Iteration  41: 7.031 s/op
Iteration  42: 7.003 s/op
Iteration  43: 6.991 s/op
Iteration  44: 6.959 s/op
Iteration  45: 7.001 s/op
Iteration  46: 6.946 s/op
Iteration  47: 6.981 s/op
Iteration  48: 6.971 s/op
Iteration  49: 6.974 s/op
Iteration  50: 6.975 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.049 ?(99.9%) 0.116 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 19 
    [7.000, 7.250) = 30 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.946 s/op
     p(50.0000) =      7.015 s/op
     p(90.0000) =      7.078 s/op
     p(95.0000) =      7.177 s/op
     p(99.0000) =      8.640 s/op
     p(99.9000) =      8.640 s/op
     p(99.9900) =      8.640 s/op
     p(99.9990) =      8.640 s/op
     p(99.9999) =      8.640 s/op
    p(100.0000) =      8.640 s/op


# Run complete. Total time: 00:05:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.049 ? 0.116   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_12.0.1_1564692946845.json
{"wallclock_times": [354.421179318], "core_cycle_counts": [[374674042637], [232074569405], [238542587351], [478008012408]], "aperf_counts": [[373740254234], [231917876234], [238399995418], [477896594677]], "mperf_counts": [[373748800614], [231917873948], [238399982896], [477896572264]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:01:41: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:01:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:01:42: INFO] 476 executions left in scheduler queue
[2019-08-01 23:01:42: INFO] Executions until ETA known: 3585
[2019-08-01 23:01:42: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:01:42: INFO] Estimated completion (next execution): 2019-08-01 23:10:07 (0:08:24 from now)
[2019-08-01 23:01:42: INFO] Reboot in preparation for next execution
[2019-08-01 23:05:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:05:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:05:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:05:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:05:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:05:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:15:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.521 s/op
Iteration   2: 11.446 s/op
Iteration   3: 11.630 s/op
Iteration   4: 11.742 s/op
Iteration   5: 11.645 s/op
Iteration   6: 11.657 s/op
Iteration   7: 11.671 s/op
Iteration   8: 11.669 s/op
Iteration   9: 11.567 s/op
Iteration  10: 11.607 s/op
Iteration  11: 11.643 s/op
Iteration  12: 11.676 s/op
Iteration  13: 11.637 s/op
Iteration  14: 11.628 s/op
Iteration  15: 11.589 s/op
Iteration  16: 11.586 s/op
Iteration  17: 11.671 s/op
Iteration  18: 11.598 s/op
Iteration  19: 11.547 s/op
Iteration  20: 11.687 s/op
Iteration  21: 11.702 s/op
Iteration  22: 11.709 s/op
Iteration  23: 11.683 s/op
Iteration  24: 11.659 s/op
Iteration  25: 11.717 s/op
Iteration  26: 11.705 s/op
Iteration  27: 11.686 s/op
Iteration  28: 11.725 s/op
Iteration  29: 11.705 s/op
Iteration  30: 11.622 s/op
Iteration  31: 11.660 s/op
Iteration  32: 11.598 s/op
Iteration  33: 11.703 s/op
Iteration  34: 11.683 s/op
Iteration  35: 11.620 s/op
Iteration  36: 11.623 s/op
Iteration  37: 11.718 s/op
Iteration  38: 11.654 s/op
Iteration  39: 11.691 s/op
Iteration  40: 11.666 s/op
Iteration  41: 11.584 s/op
Iteration  42: 11.651 s/op
Iteration  43: 11.654 s/op
Iteration  44: 11.740 s/op
Iteration  45: 11.705 s/op
Iteration  46: 11.594 s/op
Iteration  47: 11.725 s/op
Iteration  48: 11.710 s/op
Iteration  49: 11.666 s/op
Iteration  50: 11.587 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.671 ?(99.9%) 0.067 s/op

  Histogram, s/op:
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 1 
    [11.500, 11.625) = 13 
    [11.625, 11.750) = 35 
    [11.750, 11.875) = 0 
    [11.875, 12.000) = 0 
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 1 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.446 s/op
     p(50.0000) =     11.663 s/op
     p(90.0000) =     11.724 s/op
     p(95.0000) =     11.741 s/op
     p(99.0000) =     12.521 s/op
     p(99.9000) =     12.521 s/op
     p(99.9900) =     12.521 s/op
     p(99.9990) =     12.521 s/op
     p(99.9999) =     12.521 s/op
    p(100.0000) =     12.521 s/op


# Run complete. Total time: 00:09:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.671 ? 0.067   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_12.0.1_1564693554968.json
{"wallclock_times": [585.1119948820001], "core_cycle_counts": [[624308535507], [782639119760], [190463201283], [303889006831]], "aperf_counts": [[622945727659], [782468025979], [190281454182], [303794639443]], "mperf_counts": [[622957723500], [782468138970], [190281392612], [303794728786]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:15:40: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:15:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:15:41: INFO] 475 executions left in scheduler queue
[2019-08-01 23:15:41: INFO] Executions until ETA known: 3579
[2019-08-01 23:15:41: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:15:41: INFO] Estimated completion (next execution): 2019-08-01 23:27:56 (0:12:15 from now)
[2019-08-01 23:15:41: INFO] Reboot in preparation for next execution
[2019-08-01 23:19:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:19:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:19:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:19:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:19:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:19:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:26:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.432 s/op
Iteration   2: 8.635 s/op
Iteration   3: 7.830 s/op
Iteration   4: 7.955 s/op
Iteration   5: 7.848 s/op
Iteration   6: 7.965 s/op
Iteration   7: 7.905 s/op
Iteration   8: 7.965 s/op
Iteration   9: 7.946 s/op
Iteration  10: 7.882 s/op
Iteration  11: 7.999 s/op
Iteration  12: 7.904 s/op
Iteration  13: 7.967 s/op
Iteration  14: 7.893 s/op
Iteration  15: 7.883 s/op
Iteration  16: 7.943 s/op
Iteration  17: 7.900 s/op
Iteration  18: 7.912 s/op
Iteration  19: 7.853 s/op
Iteration  20: 7.954 s/op
Iteration  21: 7.906 s/op
Iteration  22: 7.861 s/op
Iteration  23: 7.887 s/op
Iteration  24: 7.822 s/op
Iteration  25: 7.823 s/op
Iteration  26: 7.764 s/op
Iteration  27: 7.710 s/op
Iteration  28: 7.761 s/op
Iteration  29: 7.750 s/op
Iteration  30: 7.814 s/op
Iteration  31: 7.805 s/op
Iteration  32: 7.802 s/op
Iteration  33: 7.809 s/op
Iteration  34: 7.747 s/op
Iteration  35: 7.799 s/op
Iteration  36: 7.742 s/op
Iteration  37: 7.806 s/op
Iteration  38: 7.771 s/op
Iteration  39: 7.829 s/op
Iteration  40: 7.779 s/op
Iteration  41: 7.737 s/op
Iteration  42: 7.810 s/op
Iteration  43: 7.751 s/op
Iteration  44: 7.869 s/op
Iteration  45: 7.743 s/op
Iteration  46: 7.697 s/op
Iteration  47: 7.785 s/op
Iteration  48: 7.738 s/op
Iteration  49: 7.830 s/op
Iteration  50: 7.771 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.886 ?(99.9%) 0.129 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 8 
    [ 7.750,  8.000) = 40 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.697 s/op
     p(50.0000) =      7.829 s/op
     p(90.0000) =      7.965 s/op
     p(95.0000) =      8.285 s/op
     p(99.0000) =      9.432 s/op
     p(99.9000) =      9.432 s/op
     p(99.9900) =      9.432 s/op
     p(99.9990) =      9.432 s/op
     p(99.9999) =      9.432 s/op
    p(100.0000) =      9.432 s/op


# Run complete. Total time: 00:06:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.886 ? 0.129   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_12.0.1_1564694392756.json
{"wallclock_times": [396.13895682300006], "core_cycle_counts": [[476998180528], [293715202989], [346687172415], [236621218188]], "aperf_counts": [[476119748314], [293570547276], [346553008126], [236502939671]], "mperf_counts": [[476124048440], [293571329498], [346552975564], [236502924844]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:26:28: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:26:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:26:29: INFO] 474 executions left in scheduler queue
[2019-08-01 23:26:29: INFO] Executions until ETA known: 3577
[2019-08-01 23:26:29: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:26:29: INFO] Estimated completion (next execution): 2019-08-01 23:35:36 (0:09:06 from now)
[2019-08-01 23:26:29: INFO] Reboot in preparation for next execution
[2019-08-01 23:30:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:30:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:30:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:30:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:30:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:30:53: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 23:45:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.142 s/op
Iteration   2: 17.856 s/op
Iteration   3: 17.850 s/op
Iteration   4: 17.924 s/op
Iteration   5: 17.894 s/op
Iteration   6: 17.818 s/op
Iteration   7: 17.881 s/op
Iteration   8: 17.834 s/op
Iteration   9: 17.961 s/op
Iteration  10: 17.776 s/op
Iteration  11: 17.876 s/op
Iteration  12: 17.791 s/op
Iteration  13: 17.877 s/op
Iteration  14: 17.747 s/op
Iteration  15: 17.867 s/op
Iteration  16: 17.837 s/op
Iteration  17: 17.891 s/op
Iteration  18: 17.790 s/op
Iteration  19: 17.857 s/op
Iteration  20: 17.797 s/op
Iteration  21: 17.882 s/op
Iteration  22: 18.275 s/op
Iteration  23: 17.859 s/op
Iteration  24: 17.864 s/op
Iteration  25: 17.806 s/op
Iteration  26: 17.764 s/op
Iteration  27: 17.794 s/op
Iteration  28: 17.819 s/op
Iteration  29: 17.821 s/op
Iteration  30: 17.780 s/op
Iteration  31: 17.788 s/op
Iteration  32: 17.882 s/op
Iteration  33: 17.917 s/op
Iteration  34: 17.746 s/op
Iteration  35: 17.834 s/op
Iteration  36: 17.798 s/op
Iteration  37: 17.728 s/op
Iteration  38: 17.735 s/op
Iteration  39: 17.808 s/op
Iteration  40: 17.861 s/op
Iteration  41: 17.839 s/op
Iteration  42: 17.808 s/op
Iteration  43: 17.835 s/op
Iteration  44: 17.966 s/op
Iteration  45: 18.397 s/op
Iteration  46: 17.875 s/op
Iteration  47: 17.862 s/op
Iteration  48: 17.791 s/op
Iteration  49: 17.786 s/op
Iteration  50: 17.817 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.880 ?(99.9%) 0.106 s/op

  Histogram, s/op:
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 4 
    [17.750, 18.000) = 43 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 2 
    [18.500, 18.750) = 0 
    [18.750, 19.000) = 0 
    [19.000, 19.250) = 1 
    [19.250, 19.500) = 0 
    [19.500, 19.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.728 s/op
     p(50.0000) =     17.836 s/op
     p(90.0000) =     17.957 s/op
     p(95.0000) =     18.330 s/op
     p(99.0000) =     19.142 s/op
     p(99.9000) =     19.142 s/op
     p(99.9900) =     19.142 s/op
     p(99.9990) =     19.142 s/op
     p(99.9999) =     19.142 s/op
    p(100.0000) =     19.142 s/op


# Run complete. Total time: 00:14:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.880 ? 0.106   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_12.0.1_1564695052881.json
{"wallclock_times": [895.641954751], "core_cycle_counts": [[584786852161], [678178210358], [1000312281261], [636402386272]], "aperf_counts": [[582334740556], [677996586145], [1000136001167], [636305636100]], "mperf_counts": [[582350165606], [677996742350], [1000135939052], [636305628924]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 23:45:48: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-08-01 23:45:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:45:49: INFO] 473 executions left in scheduler queue
[2019-08-01 23:45:49: INFO] Executions until ETA known: 3564
[2019-08-01 23:45:49: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-08-01 23:45:49: INFO] Estimated completion (next execution): 2019-08-02 00:03:15 (0:17:26 from now)
[2019-08-01 23:45:49: INFO] Reboot in preparation for next execution
[2019-08-01 23:54:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.483 s/op
Iteration   2: 5.612 s/op
Iteration   3: 5.332 s/op
Iteration   4: 5.343 s/op
Iteration   5: 5.347 s/op
Iteration   6: 5.341 s/op
Iteration   7: 5.341 s/op
Iteration   8: 5.341 s/op
Iteration   9: 5.348 s/op
Iteration  10: 5.345 s/op
Iteration  11: 5.354 s/op
Iteration  12: 5.346 s/op
Iteration  13: 5.341 s/op
Iteration  14: 5.343 s/op
Iteration  15: 5.357 s/op
Iteration  16: 5.340 s/op
Iteration  17: 5.338 s/op
Iteration  18: 5.343 s/op
Iteration  19: 5.340 s/op
Iteration  20: 5.340 s/op
Iteration  21: 5.344 s/op
Iteration  22: 5.347 s/op
Iteration  23: 5.353 s/op
Iteration  24: 5.344 s/op
Iteration  25: 5.340 s/op
Iteration  26: 5.354 s/op
Iteration  27: 5.340 s/op
Iteration  28: 5.339 s/op
Iteration  29: 5.339 s/op
Iteration  30: 5.341 s/op
Iteration  31: 5.341 s/op
Iteration  32: 5.339 s/op
Iteration  33: 5.341 s/op
Iteration  34: 5.343 s/op
Iteration  35: 5.341 s/op
Iteration  36: 5.342 s/op
Iteration  37: 5.342 s/op
Iteration  38: 5.345 s/op
Iteration  39: 5.339 s/op
Iteration  40: 5.346 s/op
Iteration  41: 5.344 s/op
Iteration  42: 5.340 s/op
Iteration  43: 5.345 s/op
Iteration  44: 5.342 s/op
Iteration  45: 5.337 s/op
Iteration  46: 5.346 s/op
Iteration  47: 5.341 s/op
Iteration  48: 5.341 s/op
Iteration  49: 5.343 s/op
Iteration  50: 5.354 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.351 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [5.300, 5.325) = 0 
    [5.325, 5.350) = 43 
    [5.350, 5.375) = 5 
    [5.375, 5.400) = 0 
    [5.400, 5.425) = 0 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 0 
    [5.475, 5.500) = 1 
    [5.500, 5.525) = 0 
    [5.525, 5.550) = 0 
    [5.550, 5.575) = 0 
    [5.575, 5.600) = 0 
    [5.600, 5.625) = 1 
    [5.625, 5.650) = 0 
    [5.650, 5.675) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.332 s/op
     p(50.0000) =      5.342 s/op
     p(90.0000) =      5.354 s/op
     p(95.0000) =      5.414 s/op
     p(99.0000) =      5.612 s/op
     p(99.9000) =      5.612 s/op
     p(99.9900) =      5.612 s/op
     p(99.9990) =      5.612 s/op
     p(99.9999) =      5.612 s/op
    p(100.0000) =      5.612 s/op


# Run complete. Total time: 00:04:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.351 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot-8u222-b10_1564696200584.json
{"wallclock_times": [268.380291132], "core_cycle_counts": [[295607929909], [200688871921], [139373554584], [229300098347]], "aperf_counts": [[295037945026], [200611627543], [139338744582], [229271275884]], "mperf_counts": [[295041447720], [200616987616], [139341622280], [229272293556]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 23:54:28: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-08-01 23:54:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 23:54:29: INFO] 472 executions left in scheduler queue
[2019-08-01 23:54:29: INFO] Executions until ETA known: 3514
[2019-08-01 23:54:29: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-08-01 23:54:29: INFO] Estimated completion (next execution): 2019-08-02 00:01:28 (0:06:58 from now)
[2019-08-01 23:54:29: INFO] Reboot in preparation for next execution
[2019-08-01 23:58:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 23:58:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 23:58:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 23:58:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 23:58:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 23:58:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 00:13:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.689 s/op
Iteration   2: 16.943 s/op
Iteration   3: 16.441 s/op
Iteration   4: 18.000 s/op
Iteration   5: 17.989 s/op
Iteration   6: 17.985 s/op
Iteration   7: 17.946 s/op
Iteration   8: 18.020 s/op
Iteration   9: 18.062 s/op
Iteration  10: 18.048 s/op
Iteration  11: 17.967 s/op
Iteration  12: 18.051 s/op
Iteration  13: 17.979 s/op
Iteration  14: 18.027 s/op
Iteration  15: 17.992 s/op
Iteration  16: 17.965 s/op
Iteration  17: 18.001 s/op
Iteration  18: 17.994 s/op
Iteration  19: 18.052 s/op
Iteration  20: 18.008 s/op
Iteration  21: 18.001 s/op
Iteration  22: 17.988 s/op
Iteration  23: 17.962 s/op
Iteration  24: 17.984 s/op
Iteration  25: 17.995 s/op
Iteration  26: 18.014 s/op
Iteration  27: 18.018 s/op
Iteration  28: 18.021 s/op
Iteration  29: 18.002 s/op
Iteration  30: 17.975 s/op
Iteration  31: 17.997 s/op
Iteration  32: 17.993 s/op
Iteration  33: 18.010 s/op
Iteration  34: 17.989 s/op
Iteration  35: 18.016 s/op
Iteration  36: 18.033 s/op
Iteration  37: 17.985 s/op
Iteration  38: 17.975 s/op
Iteration  39: 18.023 s/op
Iteration  40: 17.964 s/op
Iteration  41: 17.943 s/op
Iteration  42: 17.953 s/op
Iteration  43: 17.947 s/op
Iteration  44: 18.037 s/op
Iteration  45: 18.008 s/op
Iteration  46: 17.946 s/op
Iteration  47: 18.002 s/op
Iteration  48: 18.032 s/op
Iteration  49: 18.006 s/op
Iteration  50: 17.933 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     17.958 ?(99.9%) 0.141 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 24 
    [18.000, 18.250) = 23 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.441 s/op
     p(50.0000) =     17.996 s/op
     p(90.0000) =     18.047 s/op
     p(95.0000) =     18.057 s/op
     p(99.0000) =     18.689 s/op
     p(99.9000) =     18.689 s/op
     p(99.9900) =     18.689 s/op
     p(99.9990) =     18.689 s/op
     p(99.9999) =     18.689 s/op
    p(100.0000) =     18.689 s/op


# Run complete. Total time: 00:14:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  17.958 ? 0.141   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_11.0.4_1564696719860.json
{"wallclock_times": [899.429950834], "core_cycle_counts": [[734102999829], [579269123583], [821357165684], [777024556853]], "aperf_counts": [[731695153590], [579045063346], [821178872745], [776849288480]], "mperf_counts": [[731698780058], [579044997416], [821178888086], [776849292248]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 00:13:39: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-08-02 00:13:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:13:40: INFO] 471 executions left in scheduler queue
[2019-08-02 00:13:40: INFO] Executions until ETA known: 3498
[2019-08-02 00:13:40: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:13:40: INFO] Estimated completion (next execution): 2019-08-02 00:31:10 (0:17:29 from now)
[2019-08-02 00:13:40: INFO] Reboot in preparation for next execution
[2019-08-02 00:17:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 00:17:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 00:17:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 00:17:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 00:17:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 00:17:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 00:18:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.009 s/op
Iteration   2: 2.394 s/op
Iteration   3: 2.328 s/op
Iteration   4: 2.342 s/op
Iteration   5: 2.360 s/op
Iteration   6: 1.947 s/op
Iteration   7: 1.892 s/op
Iteration   8: 1.918 s/op
Iteration   9: 1.930 s/op
Iteration  10: 1.911 s/op
Iteration  11: 1.924 s/op
Iteration  12: 1.916 s/op
Iteration  13: 1.924 s/op
Iteration  14: 1.879 s/op
Iteration  15: 1.897 s/op
Iteration  16: 1.891 s/op
Iteration  17: 1.883 s/op
Iteration  18: 1.910 s/op
Iteration  19: 1.916 s/op
Iteration  20: 1.883 s/op
Iteration  21: 1.869 s/op
Iteration  22: 1.920 s/op
Iteration  23: 1.907 s/op
Iteration  24: 1.917 s/op
Iteration  25: 1.883 s/op
Iteration  26: 1.921 s/op
Iteration  27: 1.961 s/op
Iteration  28: 1.977 s/op
Iteration  29: 1.976 s/op
Iteration  30: 1.948 s/op
Iteration  31: 1.938 s/op
Iteration  32: 1.930 s/op
Iteration  33: 1.941 s/op
Iteration  34: 1.948 s/op
Iteration  35: 1.948 s/op
Iteration  36: 1.925 s/op
Iteration  37: 1.959 s/op
Iteration  38: 1.958 s/op
Iteration  39: 1.922 s/op
Iteration  40: 1.977 s/op
Iteration  41: 1.971 s/op
Iteration  42: 1.954 s/op
Iteration  43: 1.939 s/op
Iteration  44: 1.951 s/op
Iteration  45: 1.939 s/op
Iteration  46: 1.942 s/op
Iteration  47: 1.951 s/op
Iteration  48: 1.941 s/op
Iteration  49: 1.947 s/op
Iteration  50: 1.938 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.985 ?(99.9%) 0.094 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 45 
    [2.000, 2.250) = 0 
    [2.250, 2.500) = 4 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 0 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.869 s/op
     p(50.0000) =      1.938 s/op
     p(90.0000) =      2.293 s/op
     p(95.0000) =      2.375 s/op
     p(99.0000) =      3.009 s/op
     p(99.9000) =      3.009 s/op
     p(99.9900) =      3.009 s/op
     p(99.9990) =      3.009 s/op
     p(99.9999) =      3.009 s/op
    p(100.0000) =      3.009 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.985 ? 0.094   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9_12.0.1_1564697830806.json
{"wallclock_times": [100.92282106599998], "core_cycle_counts": [[135510982014], [56574835412], [85401527444], [76197466338]], "aperf_counts": [[135221386167], [56497603798], [85331594802], [76122311147]], "mperf_counts": [[135229920778], [56497603064], [85332124678], [76122306832]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 00:18:51: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:18:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:18:52: INFO] 470 executions left in scheduler queue
[2019-08-02 00:18:52: INFO] Executions until ETA known: 3491
[2019-08-02 00:18:52: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:18:52: INFO] Estimated completion (next execution): 2019-08-02 00:23:04 (0:04:11 from now)
[2019-08-02 00:18:52: INFO] Reboot in preparation for next execution
[2019-08-02 00:23:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 00:23:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 00:23:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 00:23:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 00:23:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 00:23:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 00:25:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.663 s/op
Iteration   2: 3.683 s/op
Iteration   3: 3.844 s/op
Iteration   4: 3.446 s/op
Iteration   5: 3.466 s/op
Iteration   6: 3.455 s/op
Iteration   7: 3.478 s/op
Iteration   8: 3.429 s/op
Iteration   9: 3.393 s/op
Iteration  10: 3.411 s/op
Iteration  11: 3.417 s/op
Iteration  12: 3.400 s/op
Iteration  13: 3.438 s/op
Iteration  14: 3.409 s/op
Iteration  15: 3.443 s/op
Iteration  16: 3.407 s/op
Iteration  17: 3.389 s/op
Iteration  18: 3.401 s/op
Iteration  19: 3.399 s/op
Iteration  20: 3.401 s/op
Iteration  21: 3.413 s/op
Iteration  22: 3.414 s/op
Iteration  23: 3.403 s/op
Iteration  24: 3.419 s/op
Iteration  25: 3.386 s/op
Iteration  26: 3.429 s/op
Iteration  27: 3.392 s/op
Iteration  28: 3.409 s/op
Iteration  29: 3.405 s/op
Iteration  30: 3.420 s/op
Iteration  31: 3.408 s/op
Iteration  32: 3.434 s/op
Iteration  33: 3.420 s/op
Iteration  34: 3.398 s/op
Iteration  35: 3.378 s/op
Iteration  36: 3.413 s/op
Iteration  37: 3.408 s/op
Iteration  38: 3.397 s/op
Iteration  39: 3.406 s/op
Iteration  40: 3.414 s/op
Iteration  41: 3.422 s/op
Iteration  42: 3.403 s/op
Iteration  43: 3.398 s/op
Iteration  44: 3.412 s/op
Iteration  45: 3.418 s/op
Iteration  46: 3.430 s/op
Iteration  47: 3.418 s/op
Iteration  48: 3.402 s/op
Iteration  49: 3.440 s/op
Iteration  50: 3.405 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.434 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 9 
    [3.400, 3.450) = 35 
    [3.450, 3.500) = 3 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 2 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 1 
    [3.850, 3.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.378 s/op
     p(50.0000) =      3.412 s/op
     p(90.0000) =      3.464 s/op
     p(95.0000) =      3.672 s/op
     p(99.0000) =      3.844 s/op
     p(99.9000) =      3.844 s/op
     p(99.9900) =      3.844 s/op
     p(99.9990) =      3.844 s/op
     p(99.9999) =      3.844 s/op
    p(100.0000) =      3.844 s/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.434 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9_12.0.1_1564698186207.json
{"wallclock_times": [173.18048023800003], "core_cycle_counts": [[116505694802], [123134124962], [183599618260], [164658881745]], "aperf_counts": [[115981225899], [123052577613], [183552888486], [164604922642]], "mperf_counts": [[115991573944], [123052710342], [183552966534], [164604938054]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 00:25:59: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-08-02 00:26:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:26:00: INFO] 469 executions left in scheduler queue
[2019-08-02 00:26:00: INFO] Executions until ETA known: 3456
[2019-08-02 00:26:00: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-08-02 00:26:00: INFO] Estimated completion (next execution): 2019-08-02 00:31:23 (0:05:23 from now)
[2019-08-02 00:26:00: INFO] Reboot in preparation for next execution
[2019-08-02 00:33:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.993 s/op
Iteration   2: 4.651 s/op
Iteration   3: 4.280 s/op
Iteration   4: 4.332 s/op
Iteration   5: 4.329 s/op
Iteration   6: 4.320 s/op
Iteration   7: 4.529 s/op
Iteration   8: 4.612 s/op
Iteration   9: 4.459 s/op
Iteration  10: 4.483 s/op
Iteration  11: 4.551 s/op
Iteration  12: 4.535 s/op
Iteration  13: 4.394 s/op
Iteration  14: 4.340 s/op
Iteration  15: 4.658 s/op
Iteration  16: 4.454 s/op
Iteration  17: 4.296 s/op
Iteration  18: 4.353 s/op
Iteration  19: 4.463 s/op
Iteration  20: 4.309 s/op
Iteration  21: 4.392 s/op
Iteration  22: 4.460 s/op
Iteration  23: 4.287 s/op
Iteration  24: 4.260 s/op
Iteration  25: 4.362 s/op
Iteration  26: 5.366 s/op
Iteration  27: 4.339 s/op
Iteration  28: 4.273 s/op
Iteration  29: 4.337 s/op
Iteration  30: 4.465 s/op
Iteration  31: 4.309 s/op
Iteration  32: 4.257 s/op
Iteration  33: 4.348 s/op
Iteration  34: 4.451 s/op
Iteration  35: 4.314 s/op
Iteration  36: 4.258 s/op
Iteration  37: 4.331 s/op
Iteration  38: 4.485 s/op
Iteration  39: 4.287 s/op
Iteration  40: 4.263 s/op
Iteration  41: 4.321 s/op
Iteration  42: 4.475 s/op
Iteration  43: 4.308 s/op
Iteration  44: 4.261 s/op
Iteration  45: 4.344 s/op
Iteration  46: 4.503 s/op
Iteration  47: 4.321 s/op
Iteration  48: 4.246 s/op
Iteration  49: 4.334 s/op
Iteration  50: 4.470 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.415 ?(99.9%) 0.096 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 1 
    [4.250, 4.375) = 28 
    [4.375, 4.500) = 12 
    [4.500, 4.625) = 5 
    [4.625, 4.750) = 2 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 1 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 1 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.246 s/op
     p(50.0000) =      4.342 s/op
     p(90.0000) =      4.606 s/op
     p(95.0000) =      4.809 s/op
     p(99.0000) =      5.366 s/op
     p(99.9000) =      5.366 s/op
     p(99.9900) =      5.366 s/op
     p(99.9990) =      5.366 s/op
     p(99.9999) =      5.366 s/op
    p(100.0000) =      5.366 s/op


# Run complete. Total time: 00:03:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  4.415 ? 0.096   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ee-19.1.1_1564698611406.json
{"wallclock_times": [221.74282033400002], "core_cycle_counts": [[181057438903], [207883374833], [212399194577], [202701116558]], "aperf_counts": [[180492303998], [207836324865], [212367345351], [202680047338]], "mperf_counts": [[180506623804], [207847166920], [212367802414], [202680126918]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 00:33:53: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-08-02 00:33:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:33:54: INFO] 468 executions left in scheduler queue
[2019-08-02 00:33:54: INFO] Executions until ETA known: 3420
[2019-08-02 00:33:54: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-08-02 00:33:54: INFO] Estimated completion (next execution): 2019-08-02 00:40:06 (0:06:12 from now)
[2019-08-02 00:33:54: INFO] Reboot in preparation for next execution
[2019-08-02 00:45:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.801 s/op
Iteration   2: 9.362 s/op
Iteration   3: 9.680 s/op
Iteration   4: 9.388 s/op
Iteration   5: 9.328 s/op
Iteration   6: 9.372 s/op
Iteration   7: 9.292 s/op
Iteration   8: 9.466 s/op
Iteration   9: 9.362 s/op
Iteration  10: 9.216 s/op
Iteration  11: 9.362 s/op
Iteration  12: 10.421 s/op
Iteration  13: 9.155 s/op
Iteration  14: 9.342 s/op
Iteration  15: 9.417 s/op
Iteration  16: 9.235 s/op
Iteration  17: 9.407 s/op
Iteration  18: 9.250 s/op
Iteration  19: 9.367 s/op
Iteration  20: 9.395 s/op
Iteration  21: 9.266 s/op
Iteration  22: 9.383 s/op
Iteration  23: 9.996 s/op
Iteration  24: 9.281 s/op
Iteration  25: 9.261 s/op
Iteration  26: 9.388 s/op
Iteration  27: 9.437 s/op
Iteration  28: 9.244 s/op
Iteration  29: 9.403 s/op
Iteration  30: 9.253 s/op
Iteration  31: 9.369 s/op
Iteration  32: 9.249 s/op
Iteration  33: 9.379 s/op
Iteration  34: 9.968 s/op
Iteration  35: 9.286 s/op
Iteration  36: 9.219 s/op
Iteration  37: 9.368 s/op
Iteration  38: 9.392 s/op
Iteration  39: 9.211 s/op
Iteration  40: 9.381 s/op
Iteration  41: 9.222 s/op
Iteration  42: 9.358 s/op
Iteration  43: 9.250 s/op
Iteration  44: 9.385 s/op
Iteration  45: 9.997 s/op
Iteration  46: 9.308 s/op
Iteration  47: 9.212 s/op
Iteration  48: 9.360 s/op
Iteration  49: 9.407 s/op
Iteration  50: 9.239 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      9.402 ?(99.9%) 0.119 s/op

  Histogram, s/op:
    [ 9.000,  9.125) = 0 
    [ 9.125,  9.250) = 12 
    [ 9.250,  9.375) = 18 
    [ 9.375,  9.500) = 14 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 1 
    [ 9.750,  9.875) = 1 
    [ 9.875, 10.000) = 3 
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 0 
    [10.375, 10.500) = 1 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.155 s/op
     p(50.0000) =      9.362 s/op
     p(90.0000) =      9.789 s/op
     p(95.0000) =      9.996 s/op
     p(99.0000) =     10.421 s/op
     p(99.9000) =     10.421 s/op
     p(99.9900) =     10.421 s/op
     p(99.9990) =     10.421 s/op
     p(99.9999) =     10.421 s/op
    p(100.0000) =     10.421 s/op


# Run complete. Total time: 00:07:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  9.402 ? 0.119   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_graalvm-ce-19.1.1_1564699087174.json
{"wallclock_times": [471.06350346899995], "core_cycle_counts": [[447741963143], [603704252057], [328173254410], [350202947429]], "aperf_counts": [[446568594103], [603599362473], [328125733306], [350155157324]], "mperf_counts": [[446583570776], [603603599496], [328131414376], [350158397464]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 00:45:58: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-08-02 00:45:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:45:59: INFO] 467 executions left in scheduler queue
[2019-08-02 00:45:59: INFO] Executions until ETA known: 3415
[2019-08-02 00:45:59: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 00:45:59: INFO] Estimated completion (next execution): 2019-08-02 00:56:20 (0:10:21 from now)
[2019-08-02 00:45:59: INFO] Reboot in preparation for next execution
[2019-08-02 00:54:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.025 s/op
Iteration   2: 5.836 s/op
Iteration   3: 5.588 s/op
Iteration   4: 5.572 s/op
Iteration   5: 5.605 s/op
Iteration   6: 5.584 s/op
Iteration   7: 5.615 s/op
Iteration   8: 5.603 s/op
Iteration   9: 5.612 s/op
Iteration  10: 5.587 s/op
Iteration  11: 5.585 s/op
Iteration  12: 5.577 s/op
Iteration  13: 5.593 s/op
Iteration  14: 5.562 s/op
Iteration  15: 5.597 s/op
Iteration  16: 5.597 s/op
Iteration  17: 5.593 s/op
Iteration  18: 5.567 s/op
Iteration  19: 5.583 s/op
Iteration  20: 5.569 s/op
Iteration  21: 5.574 s/op
Iteration  22: 5.579 s/op
Iteration  23: 5.566 s/op
Iteration  24: 5.574 s/op
Iteration  25: 5.583 s/op
Iteration  26: 5.592 s/op
Iteration  27: 5.587 s/op
Iteration  28: 5.587 s/op
Iteration  29: 5.568 s/op
Iteration  30: 5.586 s/op
Iteration  31: 5.579 s/op
Iteration  32: 5.572 s/op
Iteration  33: 5.566 s/op
Iteration  34: 5.598 s/op
Iteration  35: 5.580 s/op
Iteration  36: 5.557 s/op
Iteration  37: 5.599 s/op
Iteration  38: 5.569 s/op
Iteration  39: 5.579 s/op
Iteration  40: 5.588 s/op
Iteration  41: 5.587 s/op
Iteration  42: 5.586 s/op
Iteration  43: 5.595 s/op
Iteration  44: 5.586 s/op
Iteration  45: 5.578 s/op
Iteration  46: 5.565 s/op
Iteration  47: 5.570 s/op
Iteration  48: 5.573 s/op
Iteration  49: 5.571 s/op
Iteration  50: 5.557 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.596 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 44 
    [5.600, 5.650) = 4 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 0 
    [5.800, 5.850) = 1 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 1 
    [6.050, 6.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.557 s/op
     p(50.0000) =      5.584 s/op
     p(90.0000) =      5.604 s/op
     p(95.0000) =      5.714 s/op
     p(99.0000) =      6.025 s/op
     p(99.9000) =      6.025 s/op
     p(99.9900) =      6.025 s/op
     p(99.9990) =      6.025 s/op
     p(99.9999) =      6.025 s/op
    p(100.0000) =      6.025 s/op


# Run complete. Total time: 00:04:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.596 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot-8u222-b10_1564699811550.json
{"wallclock_times": [280.730036702], "core_cycle_counts": [[191884845809], [286792587172], [210678984438], [224674088651]], "aperf_counts": [[191224113557], [286731209905], [210640997602], [224645986497]], "mperf_counts": [[191229047458], [286734063292], [210641033870], [224646061932]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 00:54:52: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 00:54:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 00:54:53: INFO] 466 executions left in scheduler queue
[2019-08-02 00:54:53: INFO] Executions until ETA known: 3410
[2019-08-02 00:54:53: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 00:54:53: INFO] Estimated completion (next execution): 2019-08-02 01:02:04 (0:07:10 from now)
[2019-08-02 00:54:53: INFO] Reboot in preparation for next execution
[2019-08-02 01:07:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.928 s/op
Iteration   2: 10.384 s/op
Iteration   3: 9.944 s/op
Iteration   4: 9.971 s/op
Iteration   5: 9.955 s/op
Iteration   6: 9.938 s/op
Iteration   7: 9.988 s/op
Iteration   8: 9.954 s/op
Iteration   9: 9.959 s/op
Iteration  10: 9.946 s/op
Iteration  11: 9.951 s/op
Iteration  12: 9.931 s/op
Iteration  13: 9.952 s/op
Iteration  14: 9.966 s/op
Iteration  15: 9.944 s/op
Iteration  16: 9.949 s/op
Iteration  17: 9.960 s/op
Iteration  18: 9.979 s/op
Iteration  19: 9.952 s/op
Iteration  20: 9.964 s/op
Iteration  21: 10.009 s/op
Iteration  22: 9.961 s/op
Iteration  23: 9.970 s/op
Iteration  24: 9.946 s/op
Iteration  25: 9.970 s/op
Iteration  26: 9.962 s/op
Iteration  27: 9.941 s/op
Iteration  28: 9.952 s/op
Iteration  29: 9.980 s/op
Iteration  30: 9.965 s/op
Iteration  31: 9.968 s/op
Iteration  32: 9.964 s/op
Iteration  33: 9.933 s/op
Iteration  34: 9.961 s/op
Iteration  35: 9.981 s/op
Iteration  36: 9.988 s/op
Iteration  37: 9.957 s/op
Iteration  38: 9.969 s/op
Iteration  39: 9.982 s/op
Iteration  40: 9.971 s/op
Iteration  41: 9.953 s/op
Iteration  42: 9.988 s/op
Iteration  43: 9.936 s/op
Iteration  44: 9.970 s/op
Iteration  45: 9.949 s/op
Iteration  46: 9.937 s/op
Iteration  47: 9.976 s/op
Iteration  48: 9.933 s/op
Iteration  49: 9.980 s/op
Iteration  50: 9.961 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.969 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [ 9.900,  9.950) = 14 
    [ 9.950, 10.000) = 34 
    [10.000, 10.050) = 1 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 0 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 0 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.928 s/op
     p(50.0000) =      9.961 s/op
     p(90.0000) =      9.987 s/op
     p(95.0000) =      9.998 s/op
     p(99.0000) =     10.384 s/op
     p(99.9000) =     10.384 s/op
     p(99.9900) =     10.384 s/op
     p(99.9990) =     10.384 s/op
     p(99.9999) =     10.384 s/op
    p(100.0000) =     10.384 s/op


# Run complete. Total time: 00:08:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.969 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot-8u222-b10_1564700345738.json
{"wallclock_times": [499.28104179], "core_cycle_counts": [[476673390145], [485867707562], [241191282353], [407008624460]], "aperf_counts": [[475624724134], [485782456438], [241144233783], [406980505076]], "mperf_counts": [[475631136062], [485792220566], [241158091280], [406981166784]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:07:25: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:07:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:07:25: INFO] 465 executions left in scheduler queue
[2019-08-02 01:07:25: INFO] Executions until ETA known: 3408
[2019-08-02 01:07:25: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:07:25: INFO] Estimated completion (next execution): 2019-08-02 01:18:15 (0:10:49 from now)
[2019-08-02 01:07:25: INFO] Reboot in preparation for next execution
[2019-08-02 01:16:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.661 s/op
Iteration   2: 6.016 s/op
Iteration   3: 6.031 s/op
Iteration   4: 5.992 s/op
Iteration   5: 6.036 s/op
Iteration   6: 6.037 s/op
Iteration   7: 6.040 s/op
Iteration   8: 6.045 s/op
Iteration   9: 5.993 s/op
Iteration  10: 6.041 s/op
Iteration  11: 6.051 s/op
Iteration  12: 6.054 s/op
Iteration  13: 5.994 s/op
Iteration  14: 6.044 s/op
Iteration  15: 6.044 s/op
Iteration  16: 6.044 s/op
Iteration  17: 5.994 s/op
Iteration  18: 6.044 s/op
Iteration  19: 6.035 s/op
Iteration  20: 5.984 s/op
Iteration  21: 6.049 s/op
Iteration  22: 6.040 s/op
Iteration  23: 6.040 s/op
Iteration  24: 6.005 s/op
Iteration  25: 6.059 s/op
Iteration  26: 6.054 s/op
Iteration  27: 6.042 s/op
Iteration  28: 5.993 s/op
Iteration  29: 6.059 s/op
Iteration  30: 6.057 s/op
Iteration  31: 6.000 s/op
Iteration  32: 6.022 s/op
Iteration  33: 6.053 s/op
Iteration  34: 6.042 s/op
Iteration  35: 6.008 s/op
Iteration  36: 6.043 s/op
Iteration  37: 6.051 s/op
Iteration  38: 5.996 s/op
Iteration  39: 6.038 s/op
Iteration  40: 6.051 s/op
Iteration  41: 6.051 s/op
Iteration  42: 5.998 s/op
Iteration  43: 6.048 s/op
Iteration  44: 6.058 s/op
Iteration  45: 6.050 s/op
Iteration  46: 5.998 s/op
Iteration  47: 6.034 s/op
Iteration  48: 6.033 s/op
Iteration  49: 6.000 s/op
Iteration  50: 6.069 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.044 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 10 
    [6.000, 6.050) = 26 
    [6.050, 6.100) = 13 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.984 s/op
     p(50.0000) =      6.041 s/op
     p(90.0000) =      6.058 s/op
     p(95.0000) =      6.063 s/op
     p(99.0000) =      6.661 s/op
     p(99.9000) =      6.661 s/op
     p(99.9900) =      6.661 s/op
     p(99.9990) =      6.661 s/op
     p(99.9999) =      6.661 s/op
    p(100.0000) =      6.661 s/op


# Run complete. Total time: 00:05:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.044 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot-8u222-b10_1564701096559.json
{"wallclock_times": [303.23291556099997], "core_cycle_counts": [[195128666334], [298916438831], [304100644492], [250700124014]], "aperf_counts": [[194306059109], [298843581327], [304040740761], [250651763092]], "mperf_counts": [[194319945536], [298846089360], [304040794444], [250652409952]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:16:39: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:16:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:16:40: INFO] 464 executions left in scheduler queue
[2019-08-02 01:16:40: INFO] Executions until ETA known: 3398
[2019-08-02 01:16:40: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:16:40: INFO] Estimated completion (next execution): 2019-08-02 01:24:14 (0:07:33 from now)
[2019-08-02 01:16:40: INFO] Reboot in preparation for next execution
[2019-08-02 01:33:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.155 s/op
Iteration   2: 15.473 s/op
Iteration   3: 15.290 s/op
Iteration   4: 15.246 s/op
Iteration   5: 15.246 s/op
Iteration   6: 15.282 s/op
Iteration   7: 15.304 s/op
Iteration   8: 15.253 s/op
Iteration   9: 15.261 s/op
Iteration  10: 15.264 s/op
Iteration  11: 15.263 s/op
Iteration  12: 15.266 s/op
Iteration  13: 15.235 s/op
Iteration  14: 15.442 s/op
Iteration  15: 15.793 s/op
Iteration  16: 15.258 s/op
Iteration  17: 15.249 s/op
Iteration  18: 15.249 s/op
Iteration  19: 15.242 s/op
Iteration  20: 15.245 s/op
Iteration  21: 15.255 s/op
Iteration  22: 15.257 s/op
Iteration  23: 15.278 s/op
Iteration  24: 15.242 s/op
Iteration  25: 15.631 s/op
Iteration  26: 15.276 s/op
Iteration  27: 15.255 s/op
Iteration  28: 15.223 s/op
Iteration  29: 15.263 s/op
Iteration  30: 15.242 s/op
Iteration  31: 15.271 s/op
Iteration  32: 15.270 s/op
Iteration  33: 15.256 s/op
Iteration  34: 15.226 s/op
Iteration  35: 15.227 s/op
Iteration  36: 15.237 s/op
Iteration  37: 15.254 s/op
Iteration  38: 15.260 s/op
Iteration  39: 15.264 s/op
Iteration  40: 15.304 s/op
Iteration  41: 15.274 s/op
Iteration  42: 15.247 s/op
Iteration  43: 15.322 s/op
Iteration  44: 15.284 s/op
Iteration  45: 15.268 s/op
Iteration  46: 15.268 s/op
Iteration  47: 15.294 s/op
Iteration  48: 15.283 s/op
Iteration  49: 15.267 s/op
Iteration  50: 15.260 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.285 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [15.100, 15.150) = 0 
    [15.150, 15.200) = 1 
    [15.200, 15.250) = 14 
    [15.250, 15.300) = 28 
    [15.300, 15.350) = 3 
    [15.350, 15.400) = 0 
    [15.400, 15.450) = 1 
    [15.450, 15.500) = 1 
    [15.500, 15.550) = 0 
    [15.550, 15.600) = 0 
    [15.600, 15.650) = 1 
    [15.650, 15.700) = 0 
    [15.700, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.155 s/op
     p(50.0000) =     15.262 s/op
     p(90.0000) =     15.320 s/op
     p(95.0000) =     15.544 s/op
     p(99.0000) =     15.793 s/op
     p(99.9000) =     15.793 s/op
     p(99.9900) =     15.793 s/op
     p(99.9990) =     15.793 s/op
     p(99.9999) =     15.793 s/op
    p(100.0000) =     15.793 s/op


# Run complete. Total time: 00:12:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.285 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot-8u222-b10_1564701651510.json
{"wallclock_times": [765.139679732], "core_cycle_counts": [[645300235531], [717770926705], [564967835572], [536308740270]], "aperf_counts": [[643582634319], [717666954106], [564858697656], [536240905099]], "mperf_counts": [[643599558378], [717668174646], [564860141276], [536240963992]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:33:36: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-08-02 01:33:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:33:37: INFO] 463 executions left in scheduler queue
[2019-08-02 01:33:37: INFO] Executions until ETA known: 3358
[2019-08-02 01:33:37: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-08-02 01:33:37: INFO] Estimated completion (next execution): 2019-08-02 01:48:52 (0:15:15 from now)
[2019-08-02 01:33:37: INFO] Reboot in preparation for next execution
[2019-08-02 01:38:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 01:51:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.362 s/op
Iteration   2: 16.633 s/op
Iteration   3: 15.806 s/op
Iteration   4: 15.810 s/op
Iteration   5: 15.835 s/op
Iteration   6: 15.830 s/op
Iteration   7: 15.836 s/op
Iteration   8: 15.860 s/op
Iteration   9: 15.951 s/op
Iteration  10: 15.781 s/op
Iteration  11: 15.819 s/op
Iteration  12: 15.846 s/op
Iteration  13: 15.796 s/op
Iteration  14: 15.787 s/op
Iteration  15: 15.801 s/op
Iteration  16: 15.789 s/op
Iteration  17: 15.782 s/op
Iteration  18: 15.821 s/op
Iteration  19: 15.724 s/op
Iteration  20: 15.724 s/op
Iteration  21: 15.818 s/op
Iteration  22: 15.819 s/op
Iteration  23: 15.742 s/op
Iteration  24: 15.783 s/op
Iteration  25: 15.742 s/op
Iteration  26: 15.758 s/op
Iteration  27: 15.724 s/op
Iteration  28: 15.743 s/op
Iteration  29: 15.819 s/op
Iteration  30: 15.857 s/op
Iteration  31: 15.922 s/op
Iteration  32: 15.782 s/op
Iteration  33: 15.786 s/op
Iteration  34: 15.794 s/op
Iteration  35: 15.734 s/op
Iteration  36: 15.766 s/op
Iteration  37: 15.828 s/op
Iteration  38: 15.806 s/op
Iteration  39: 15.756 s/op
Iteration  40: 15.731 s/op
Iteration  41: 15.824 s/op
Iteration  42: 15.745 s/op
Iteration  43: 15.829 s/op
Iteration  44: 15.833 s/op
Iteration  45: 15.761 s/op
Iteration  46: 15.802 s/op
Iteration  47: 15.767 s/op
Iteration  48: 15.731 s/op
Iteration  49: 15.745 s/op
Iteration  50: 15.795 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     15.863 ?(99.9%) 0.189 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 11 
    [15.750, 16.000) = 37 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 1 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.724 s/op
     p(50.0000) =     15.795 s/op
     p(90.0000) =     15.860 s/op
     p(95.0000) =     16.258 s/op
     p(99.0000) =     18.362 s/op
     p(99.9000) =     18.362 s/op
     p(99.9900) =     18.362 s/op
     p(99.9990) =     18.362 s/op
     p(99.9999) =     18.362 s/op
    p(100.0000) =     18.362 s/op


# Run complete. Total time: 00:13:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  15.863 ? 0.189   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9-8u222-b10_1564702681812.json
{"wallclock_times": [794.276919383], "core_cycle_counts": [[618594706566], [662968351139], [603408948928], [680455025392]], "aperf_counts": [[616464848128], [662768088957], [603274640510], [680365781086]], "mperf_counts": [[616473585010], [662777830618], [603274885622], [680366675832]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 01:51:16: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-08-02 01:51:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:51:17: INFO] 462 executions left in scheduler queue
[2019-08-02 01:51:17: INFO] Executions until ETA known: 3322
[2019-08-02 01:51:17: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-08-02 01:51:17: INFO] Estimated completion (next execution): 2019-08-02 02:07:01 (0:15:44 from now)
[2019-08-02 01:51:17: INFO] Reboot in preparation for next execution
[2019-08-02 01:59:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.699 s/op
Iteration   2: 5.469 s/op
Iteration   3: 5.332 s/op
Iteration   4: 5.277 s/op
Iteration   5: 5.282 s/op
Iteration   6: 5.283 s/op
Iteration   7: 5.276 s/op
Iteration   8: 5.281 s/op
Iteration   9: 5.275 s/op
Iteration  10: 5.279 s/op
Iteration  11: 5.274 s/op
Iteration  12: 5.274 s/op
Iteration  13: 5.278 s/op
Iteration  14: 5.277 s/op
Iteration  15: 5.300 s/op
Iteration  16: 5.285 s/op
Iteration  17: 5.275 s/op
Iteration  18: 5.279 s/op
Iteration  19: 5.288 s/op
Iteration  20: 5.280 s/op
Iteration  21: 5.271 s/op
Iteration  22: 5.279 s/op
Iteration  23: 5.287 s/op
Iteration  24: 5.282 s/op
Iteration  25: 5.279 s/op
Iteration  26: 5.278 s/op
Iteration  27: 5.282 s/op
Iteration  28: 5.275 s/op
Iteration  29: 5.282 s/op
Iteration  30: 5.272 s/op
Iteration  31: 5.279 s/op
Iteration  32: 5.309 s/op
Iteration  33: 5.282 s/op
Iteration  34: 5.288 s/op
Iteration  35: 5.280 s/op
Iteration  36: 5.274 s/op
Iteration  37: 5.284 s/op
Iteration  38: 5.278 s/op
Iteration  39: 5.290 s/op
Iteration  40: 5.278 s/op
Iteration  41: 5.279 s/op
Iteration  42: 5.280 s/op
Iteration  43: 5.276 s/op
Iteration  44: 5.280 s/op
Iteration  45: 5.295 s/op
Iteration  46: 5.272 s/op
Iteration  47: 5.282 s/op
Iteration  48: 5.281 s/op
Iteration  49: 5.289 s/op
Iteration  50: 5.279 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.294 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 46 
    [5.300, 5.350) = 2 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 1 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.271 s/op
     p(50.0000) =      5.280 s/op
     p(90.0000) =      5.299 s/op
     p(95.0000) =      5.394 s/op
     p(99.0000) =      5.699 s/op
     p(99.9000) =      5.699 s/op
     p(99.9900) =      5.699 s/op
     p(99.9990) =      5.699 s/op
     p(99.9999) =      5.699 s/op
    p(100.0000) =      5.699 s/op


# Run complete. Total time: 00:04:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.294 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot-8u222-b10_1564703728531.json
{"wallclock_times": [265.53932235], "core_cycle_counts": [[192573130679], [224345809407], [268049064563], [171201420563]], "aperf_counts": [[191924102319], [224286433409], [268018686994], [171166673291]], "mperf_counts": [[191945850142], [224291441526], [268019151132], [171166861700]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 01:59:54: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-08-02 01:59:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 01:59:55: INFO] 461 executions left in scheduler queue
[2019-08-02 01:59:55: INFO] Executions until ETA known: 3296
[2019-08-02 01:59:55: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-08-02 01:59:55: INFO] Estimated completion (next execution): 2019-08-02 02:06:50 (0:06:55 from now)
[2019-08-02 01:59:55: INFO] Reboot in preparation for next execution
[2019-08-02 02:04:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 02:04:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 02:04:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 02:04:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 02:04:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 02:04:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 02:16:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.751 s/op
Iteration   2: 16.283 s/op
Iteration   3: 14.801 s/op
Iteration   4: 15.877 s/op
Iteration   5: 15.094 s/op
Iteration   6: 15.341 s/op
Iteration   7: 15.242 s/op
Iteration   8: 14.668 s/op
Iteration   9: 15.795 s/op
Iteration  10: 15.059 s/op
Iteration  11: 15.872 s/op
Iteration  12: 14.683 s/op
Iteration  13: 15.133 s/op
Iteration  14: 15.059 s/op
Iteration  15: 14.716 s/op
Iteration  16: 15.835 s/op
Iteration  17: 15.385 s/op
Iteration  18: 14.903 s/op
Iteration  19: 16.031 s/op
Iteration  20: 15.845 s/op
Iteration  21: 14.565 s/op
Iteration  22: 15.296 s/op
Iteration  23: 15.005 s/op
Iteration  24: 15.225 s/op
Iteration  25: 15.162 s/op
Iteration  26: 15.295 s/op
Iteration  27: 16.166 s/op
Iteration  28: 14.918 s/op
Iteration  29: 15.587 s/op
Iteration  30: 15.728 s/op
Iteration  31: 15.785 s/op
Iteration  32: 14.876 s/op
Iteration  33: 14.942 s/op
Iteration  34: 16.066 s/op
Iteration  35: 14.935 s/op
Iteration  36: 15.999 s/op
Iteration  37: 15.519 s/op
Iteration  38: 15.327 s/op
Iteration  39: 14.867 s/op
Iteration  40: 15.238 s/op
Iteration  41: 15.087 s/op
Iteration  42: 14.744 s/op
Iteration  43: 15.177 s/op
Iteration  44: 15.473 s/op
Iteration  45: 15.396 s/op
Iteration  46: 15.014 s/op
Iteration  47: 16.004 s/op
Iteration  48: 14.839 s/op
Iteration  49: 15.184 s/op
Iteration  50: 16.012 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.336 ?(99.9%) 0.228 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 5 
    [14.750, 15.000) = 8 
    [15.000, 15.250) = 13 
    [15.250, 15.500) = 7 
    [15.500, 15.750) = 3 
    [15.750, 16.000) = 8 
    [16.000, 16.250) = 5 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.565 s/op
     p(50.0000) =     15.240 s/op
     p(90.0000) =     16.011 s/op
     p(95.0000) =     16.111 s/op
     p(99.0000) =     16.283 s/op
     p(99.9000) =     16.283 s/op
     p(99.9900) =     16.283 s/op
     p(99.9990) =     16.283 s/op
     p(99.9999) =     16.283 s/op
    p(100.0000) =     16.283 s/op


# Run complete. Total time: 00:12:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  15.336 ? 0.228   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9_12.0.1_1564704247268.json
{"wallclock_times": [768.589444841], "core_cycle_counts": [[471974953150], [792206892376], [597560900890], [923601794754]], "aperf_counts": [[469771157752], [792080341741], [597394225005], [923484075259]], "mperf_counts": [[469781436718], [792086326546], [597394243824], [923484149790]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 02:16:55: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-08-02 02:16:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:16:56: INFO] 460 executions left in scheduler queue
[2019-08-02 02:16:56: INFO] Executions until ETA known: 3260
[2019-08-02 02:16:56: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-08-02 02:16:56: INFO] Estimated completion (next execution): 2019-08-02 02:32:15 (0:15:19 from now)
[2019-08-02 02:16:56: INFO] Reboot in preparation for next execution
[2019-08-02 02:21:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 02:36:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.332 s/op
Iteration   2: 18.254 s/op
Iteration   3: 18.506 s/op
Iteration   4: 17.169 s/op
Iteration   5: 18.418 s/op
Iteration   6: 18.477 s/op
Iteration   7: 17.570 s/op
Iteration   8: 17.759 s/op
Iteration   9: 18.144 s/op
Iteration  10: 18.129 s/op
Iteration  11: 18.582 s/op
Iteration  12: 18.388 s/op
Iteration  13: 18.351 s/op
Iteration  14: 17.950 s/op
Iteration  15: 17.785 s/op
Iteration  16: 17.988 s/op
Iteration  17: 17.913 s/op
Iteration  18: 17.436 s/op
Iteration  19: 18.025 s/op
Iteration  20: 17.892 s/op
Iteration  21: 17.843 s/op
Iteration  22: 18.060 s/op
Iteration  23: 17.836 s/op
Iteration  24: 17.797 s/op
Iteration  25: 18.088 s/op
Iteration  26: 17.110 s/op
Iteration  27: 17.892 s/op
Iteration  28: 16.986 s/op
Iteration  29: 17.953 s/op
Iteration  30: 18.065 s/op
Iteration  31: 17.804 s/op
Iteration  32: 17.236 s/op
Iteration  33: 17.924 s/op
Iteration  34: 17.868 s/op
Iteration  35: 17.574 s/op
Iteration  36: 17.796 s/op
Iteration  37: 18.094 s/op
Iteration  38: 17.107 s/op
Iteration  39: 18.034 s/op
Iteration  40: 17.326 s/op
Iteration  41: 17.775 s/op
Iteration  42: 17.820 s/op
Iteration  43: 18.093 s/op
Iteration  44: 17.975 s/op
Iteration  45: 17.726 s/op
Iteration  46: 18.022 s/op
Iteration  47: 18.109 s/op
Iteration  48: 17.427 s/op
Iteration  49: 18.101 s/op
Iteration  50: 17.751 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     17.885 ?(99.9%) 0.184 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 4 
    [17.250, 17.500) = 3 
    [17.500, 17.750) = 3 
    [17.750, 18.000) = 19 
    [18.000, 18.250) = 12 
    [18.250, 18.500) = 6 
    [18.500, 18.750) = 2 

  Percentiles, s/op:
      p(0.0000) =     16.986 s/op
     p(50.0000) =     17.919 s/op
     p(90.0000) =     18.385 s/op
     p(95.0000) =     18.490 s/op
     p(99.0000) =     18.582 s/op
     p(99.9000) =     18.582 s/op
     p(99.9900) =     18.582 s/op
     p(99.9990) =     18.582 s/op
     p(99.9999) =     18.582 s/op
    p(100.0000) =     18.582 s/op


# Run complete. Total time: 00:14:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.885 ? 0.184   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9-8u222-b10_1564705269603.json
{"wallclock_times": [895.619258759], "core_cycle_counts": [[811610489176], [592831654644], [675847720015], [1079911241558]], "aperf_counts": [[809326833640], [592634624803], [675591407030], [1079742445730]], "mperf_counts": [[809330066408], [592634663874], [675592255398], [1079742521304]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 02:36:05: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-08-02 02:36:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:36:06: INFO] 459 executions left in scheduler queue
[2019-08-02 02:36:06: INFO] Executions until ETA known: 3234
[2019-08-02 02:36:06: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:36:06: INFO] Estimated completion (next execution): 2019-08-02 02:53:32 (0:17:25 from now)
[2019-08-02 02:36:06: INFO] Reboot in preparation for next execution
[2019-08-02 02:41:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.813 s/op
Iteration   2: 1.597 s/op
Iteration   3: 1.581 s/op
Iteration   4: 1.667 s/op
Iteration   5: 1.577 s/op
Iteration   6: 1.576 s/op
Iteration   7: 1.576 s/op
Iteration   8: 1.576 s/op
Iteration   9: 1.586 s/op
Iteration  10: 1.580 s/op
Iteration  11: 1.580 s/op
Iteration  12: 1.578 s/op
Iteration  13: 1.578 s/op
Iteration  14: 1.589 s/op
Iteration  15: 1.584 s/op
Iteration  16: 1.576 s/op
Iteration  17: 1.574 s/op
Iteration  18: 1.577 s/op
Iteration  19: 1.581 s/op
Iteration  20: 1.582 s/op
Iteration  21: 1.588 s/op
Iteration  22: 1.584 s/op
Iteration  23: 1.583 s/op
Iteration  24: 1.585 s/op
Iteration  25: 1.584 s/op
Iteration  26: 1.582 s/op
Iteration  27: 1.581 s/op
Iteration  28: 1.578 s/op
Iteration  29: 1.582 s/op
Iteration  30: 1.582 s/op
Iteration  31: 1.583 s/op
Iteration  32: 1.582 s/op
Iteration  33: 1.584 s/op
Iteration  34: 1.578 s/op
Iteration  35: 1.572 s/op
Iteration  36: 1.580 s/op
Iteration  37: 1.576 s/op
Iteration  38: 1.573 s/op
Iteration  39: 1.575 s/op
Iteration  40: 1.578 s/op
Iteration  41: 1.573 s/op
Iteration  42: 1.578 s/op
Iteration  43: 1.583 s/op
Iteration  44: 1.581 s/op
Iteration  45: 1.582 s/op
Iteration  46: 1.571 s/op
Iteration  47: 1.576 s/op
Iteration  48: 1.584 s/op
Iteration  49: 1.574 s/op
Iteration  50: 1.577 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.586 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 6 
    [1.575, 1.600) = 42 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.571 s/op
     p(50.0000) =      1.581 s/op
     p(90.0000) =      1.587 s/op
     p(95.0000) =      1.629 s/op
     p(99.0000) =      1.813 s/op
     p(99.9000) =      1.813 s/op
     p(99.9900) =      1.813 s/op
     p(99.9990) =      1.813 s/op
     p(99.9999) =      1.813 s/op
    p(100.0000) =      1.813 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.586 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ce-19.1.1_1564706415417.json
{"wallclock_times": [80.22096943800003], "core_cycle_counts": [[63186258465], [52999803472], [102478278297], [49052564180]], "aperf_counts": [[62917910479], [52966050368], [102462613480], [49030444427]], "mperf_counts": [[62935479604], [52980136100], [102463034704], [49036428646]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:41:35: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:41:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:41:36: INFO] 458 executions left in scheduler queue
[2019-08-02 02:41:36: INFO] Executions until ETA known: 3224
[2019-08-02 02:41:36: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:41:36: INFO] Estimated completion (next execution): 2019-08-02 02:45:27 (0:03:50 from now)
[2019-08-02 02:41:36: INFO] Reboot in preparation for next execution
[2019-08-02 02:46:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.777 s/op
Iteration   2: 1.723 s/op
Iteration   3: 1.766 s/op
Iteration   4: 1.656 s/op
Iteration   5: 1.655 s/op
Iteration   6: 1.657 s/op
Iteration   7: 1.655 s/op
Iteration   8: 1.656 s/op
Iteration   9: 1.655 s/op
Iteration  10: 1.653 s/op
Iteration  11: 1.654 s/op
Iteration  12: 1.654 s/op
Iteration  13: 1.656 s/op
Iteration  14: 1.656 s/op
Iteration  15: 1.656 s/op
Iteration  16: 1.657 s/op
Iteration  17: 1.658 s/op
Iteration  18: 1.658 s/op
Iteration  19: 1.656 s/op
Iteration  20: 1.658 s/op
Iteration  21: 1.658 s/op
Iteration  22: 1.652 s/op
Iteration  23: 1.654 s/op
Iteration  24: 1.654 s/op
Iteration  25: 1.655 s/op
Iteration  26: 1.654 s/op
Iteration  27: 1.655 s/op
Iteration  28: 1.654 s/op
Iteration  29: 1.653 s/op
Iteration  30: 1.653 s/op
Iteration  31: 1.654 s/op
Iteration  32: 1.654 s/op
Iteration  33: 1.654 s/op
Iteration  34: 1.656 s/op
Iteration  35: 1.652 s/op
Iteration  36: 1.654 s/op
Iteration  37: 1.654 s/op
Iteration  38: 1.652 s/op
Iteration  39: 1.652 s/op
Iteration  40: 1.653 s/op
Iteration  41: 1.653 s/op
Iteration  42: 1.651 s/op
Iteration  43: 1.653 s/op
Iteration  44: 1.653 s/op
Iteration  45: 1.652 s/op
Iteration  46: 1.653 s/op
Iteration  47: 1.655 s/op
Iteration  48: 1.656 s/op
Iteration  49: 1.657 s/op
Iteration  50: 1.656 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.661 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 0 
    [1.650, 1.663) = 47 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 
    [1.700, 1.713) = 0 
    [1.713, 1.725) = 1 
    [1.725, 1.738) = 0 
    [1.738, 1.750) = 0 
    [1.750, 1.763) = 0 
    [1.763, 1.775) = 1 
    [1.775, 1.788) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.651 s/op
     p(50.0000) =      1.654 s/op
     p(90.0000) =      1.658 s/op
     p(95.0000) =      1.742 s/op
     p(99.0000) =      1.777 s/op
     p(99.9000) =      1.777 s/op
     p(99.9900) =      1.777 s/op
     p(99.9990) =      1.777 s/op
     p(99.9999) =      1.777 s/op
    p(100.0000) =      1.777 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.661 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ce-19.1.1_1564706704654.json
{"wallclock_times": [83.880430598], "core_cycle_counts": [[131890165732], [81011106987], [19298926415], [41738602514]], "aperf_counts": [[131752802328], [80981290707], [19279799351], [41721284196]], "mperf_counts": [[131770519430], [80984796246], [19292749062], [41737273388]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:46:28: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-08-02 02:46:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:46:29: INFO] 457 executions left in scheduler queue
[2019-08-02 02:46:29: INFO] Executions until ETA known: 3202
[2019-08-02 02:46:29: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:46:29: INFO] Estimated completion (next execution): 2019-08-02 02:50:23 (0:03:54 from now)
[2019-08-02 02:46:29: INFO] Reboot in preparation for next execution
[2019-08-02 02:52:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.038 s/op
Iteration   2: 1.539 s/op
Iteration   3: 1.858 s/op
Iteration   4: 1.928 s/op
Iteration   5: 1.862 s/op
Iteration   6: 1.856 s/op
Iteration   7: 1.852 s/op
Iteration   8: 1.855 s/op
Iteration   9: 1.864 s/op
Iteration  10: 1.855 s/op
Iteration  11: 1.856 s/op
Iteration  12: 1.852 s/op
Iteration  13: 1.857 s/op
Iteration  14: 1.852 s/op
Iteration  15: 1.858 s/op
Iteration  16: 1.855 s/op
Iteration  17: 1.868 s/op
Iteration  18: 1.852 s/op
Iteration  19: 1.853 s/op
Iteration  20: 1.857 s/op
Iteration  21: 1.855 s/op
Iteration  22: 1.854 s/op
Iteration  23: 1.853 s/op
Iteration  24: 1.855 s/op
Iteration  25: 1.856 s/op
Iteration  26: 1.861 s/op
Iteration  27: 1.857 s/op
Iteration  28: 1.857 s/op
Iteration  29: 1.857 s/op
Iteration  30: 1.852 s/op
Iteration  31: 1.857 s/op
Iteration  32: 1.857 s/op
Iteration  33: 1.856 s/op
Iteration  34: 1.861 s/op
Iteration  35: 1.862 s/op
Iteration  36: 1.859 s/op
Iteration  37: 1.859 s/op
Iteration  38: 1.861 s/op
Iteration  39: 1.861 s/op
Iteration  40: 1.855 s/op
Iteration  41: 1.853 s/op
Iteration  42: 1.853 s/op
Iteration  43: 1.848 s/op
Iteration  44: 1.857 s/op
Iteration  45: 1.853 s/op
Iteration  46: 1.860 s/op
Iteration  47: 1.864 s/op
Iteration  48: 1.852 s/op
Iteration  49: 1.855 s/op
Iteration  50: 1.859 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.855 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 46 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.539 s/op
     p(50.0000) =      1.856 s/op
     p(90.0000) =      1.864 s/op
     p(95.0000) =      1.895 s/op
     p(99.0000) =      2.038 s/op
     p(99.9000) =      2.038 s/op
     p(99.9900) =      2.038 s/op
     p(99.9990) =      2.038 s/op
     p(99.9999) =      2.038 s/op
    p(100.0000) =      2.038 s/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.855 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot-8u222-b10_1564707043207.json
{"wallclock_times": [93.63268721799997], "core_cycle_counts": [[77878225073], [50686113143], [63007659029], [123466223691]], "aperf_counts": [[77603188292], [50644329566], [62980678622], [123447220389]], "mperf_counts": [[77620681680], [50646638492], [62980765670], [123447322736]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:52:16: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:52:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:52:17: INFO] 456 executions left in scheduler queue
[2019-08-02 02:52:17: INFO] Executions until ETA known: 3192
[2019-08-02 02:52:17: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:52:17: INFO] Estimated completion (next execution): 2019-08-02 02:56:21 (0:04:03 from now)
[2019-08-02 02:52:17: INFO] Reboot in preparation for next execution
[2019-08-02 02:58:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.294 s/op
Iteration   2: 1.713 s/op
Iteration   3: 1.880 s/op
Iteration   4: 1.762 s/op
Iteration   5: 1.999 s/op
Iteration   6: 2.154 s/op
Iteration   7: 2.156 s/op
Iteration   8: 2.131 s/op
Iteration   9: 2.151 s/op
Iteration  10: 2.146 s/op
Iteration  11: 2.177 s/op
Iteration  12: 2.141 s/op
Iteration  13: 2.112 s/op
Iteration  14: 2.164 s/op
Iteration  15: 2.128 s/op
Iteration  16: 2.148 s/op
Iteration  17: 2.148 s/op
Iteration  18: 2.139 s/op
Iteration  19: 2.112 s/op
Iteration  20: 2.127 s/op
Iteration  21: 2.180 s/op
Iteration  22: 2.146 s/op
Iteration  23: 2.149 s/op
Iteration  24: 2.145 s/op
Iteration  25: 2.168 s/op
Iteration  26: 2.150 s/op
Iteration  27: 2.159 s/op
Iteration  28: 2.150 s/op
Iteration  29: 2.142 s/op
Iteration  30: 2.167 s/op
Iteration  31: 2.155 s/op
Iteration  32: 2.177 s/op
Iteration  33: 2.150 s/op
Iteration  34: 2.137 s/op
Iteration  35: 2.156 s/op
Iteration  36: 2.148 s/op
Iteration  37: 2.163 s/op
Iteration  38: 2.178 s/op
Iteration  39: 2.147 s/op
Iteration  40: 2.137 s/op
Iteration  41: 2.149 s/op
Iteration  42: 2.148 s/op
Iteration  43: 2.150 s/op
Iteration  44: 2.144 s/op
Iteration  45: 2.151 s/op
Iteration  46: 2.149 s/op
Iteration  47: 2.130 s/op
Iteration  48: 2.153 s/op
Iteration  49: 2.139 s/op
Iteration  50: 2.140 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.127 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [1.700, 1.750) = 1 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 28 
    [2.150, 2.200) = 17 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.713 s/op
     p(50.0000) =      2.148 s/op
     p(90.0000) =      2.176 s/op
     p(95.0000) =      2.179 s/op
     p(99.0000) =      2.294 s/op
     p(99.9000) =      2.294 s/op
     p(99.9900) =      2.294 s/op
     p(99.9990) =      2.294 s/op
     p(99.9999) =      2.294 s/op
    p(100.0000) =      2.294 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.127 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot-8u222-b10_1564707388404.json
{"wallclock_times": [107.15450159200003], "core_cycle_counts": [[105919983312], [77569069514], [50191846967], [119802662311]], "aperf_counts": [[105686461867], [77541077124], [50175123166], [119787483981]], "mperf_counts": [[105693519810], [77556602986], [50184511152], [119787727540]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 02:58:15: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-08-02 02:58:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 02:58:16: INFO] 455 executions left in scheduler queue
[2019-08-02 02:58:16: INFO] Executions until ETA known: 3185
[2019-08-02 02:58:16: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 02:58:16: INFO] Estimated completion (next execution): 2019-08-02 03:02:33 (0:04:17 from now)
[2019-08-02 02:58:16: INFO] Reboot in preparation for next execution
[2019-08-02 03:02:28: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 03:04:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.803 s/op
Iteration   2: 2.214 s/op
Iteration   3: 2.230 s/op
Iteration   4: 2.354 s/op
Iteration   5: 2.102 s/op
Iteration   6: 1.975 s/op
Iteration   7: 1.979 s/op
Iteration   8: 1.984 s/op
Iteration   9: 1.968 s/op
Iteration  10: 1.932 s/op
Iteration  11: 1.939 s/op
Iteration  12: 1.935 s/op
Iteration  13: 1.935 s/op
Iteration  14: 1.918 s/op
Iteration  15: 1.920 s/op
Iteration  16: 1.920 s/op
Iteration  17: 1.976 s/op
Iteration  18: 1.938 s/op
Iteration  19: 1.951 s/op
Iteration  20: 1.936 s/op
Iteration  21: 1.945 s/op
Iteration  22: 1.970 s/op
Iteration  23: 1.966 s/op
Iteration  24: 1.951 s/op
Iteration  25: 1.942 s/op
Iteration  26: 1.966 s/op
Iteration  27: 1.958 s/op
Iteration  28: 1.966 s/op
Iteration  29: 1.963 s/op
Iteration  30: 1.968 s/op
Iteration  31: 1.960 s/op
Iteration  32: 1.952 s/op
Iteration  33: 1.950 s/op
Iteration  34: 1.960 s/op
Iteration  35: 1.985 s/op
Iteration  36: 1.981 s/op
Iteration  37: 1.968 s/op
Iteration  38: 1.947 s/op
Iteration  39: 1.961 s/op
Iteration  40: 1.984 s/op
Iteration  41: 1.980 s/op
Iteration  42: 1.969 s/op
Iteration  43: 1.971 s/op
Iteration  44: 1.956 s/op
Iteration  45: 1.962 s/op
Iteration  46: 1.967 s/op
Iteration  47: 1.965 s/op
Iteration  48: 1.977 s/op
Iteration  49: 1.953 s/op
Iteration  50: 1.972 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.997 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [1.900, 2.000) = 45 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 2 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.918 s/op
     p(50.0000) =      1.965 s/op
     p(90.0000) =      2.091 s/op
     p(95.0000) =      2.286 s/op
     p(99.0000) =      2.803 s/op
     p(99.9000) =      2.803 s/op
     p(99.9900) =      2.803 s/op
     p(99.9990) =      2.803 s/op
     p(99.9999) =      2.803 s/op
    p(100.0000) =      2.803 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.997 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9-8u222-b10_1564707748609.json
{"wallclock_times": [101.07482129199997], "core_cycle_counts": [[132186592780], [64833277404], [77875728125], [75165160461]], "aperf_counts": [[131897372574], [64750728532], [77804370265], [75113835498]], "mperf_counts": [[131901023394], [64750822506], [77804386490], [75113926910]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:04:09: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 03:04:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:04:10: INFO] 454 executions left in scheduler queue
[2019-08-02 03:04:10: INFO] Executions until ETA known: 3165
[2019-08-02 03:04:10: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 03:04:10: INFO] Estimated completion (next execution): 2019-08-02 03:08:21 (0:04:11 from now)
[2019-08-02 03:04:10: INFO] Reboot in preparation for next execution
[2019-08-02 03:07:38: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 03:09:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.518 s/op
Iteration   2: 3.003 s/op
Iteration   3: 3.302 s/op
Iteration   4: 2.723 s/op
Iteration   5: 2.680 s/op
Iteration   6: 2.638 s/op
Iteration   7: 2.619 s/op
Iteration   8: 2.585 s/op
Iteration   9: 2.602 s/op
Iteration  10: 2.659 s/op
Iteration  11: 2.646 s/op
Iteration  12: 2.636 s/op
Iteration  13: 2.696 s/op
Iteration  14: 2.593 s/op
Iteration  15: 2.702 s/op
Iteration  16: 2.643 s/op
Iteration  17: 2.690 s/op
Iteration  18: 2.633 s/op
Iteration  19: 2.672 s/op
Iteration  20: 2.677 s/op
Iteration  21: 2.685 s/op
Iteration  22: 2.679 s/op
Iteration  23: 2.592 s/op
Iteration  24: 2.680 s/op
Iteration  25: 2.653 s/op
Iteration  26: 2.688 s/op
Iteration  27: 2.674 s/op
Iteration  28: 2.686 s/op
Iteration  29: 2.659 s/op
Iteration  30: 2.641 s/op
Iteration  31: 2.695 s/op
Iteration  32: 2.701 s/op
Iteration  33: 2.664 s/op
Iteration  34: 2.690 s/op
Iteration  35: 2.668 s/op
Iteration  36: 2.677 s/op
Iteration  37: 2.656 s/op
Iteration  38: 2.709 s/op
Iteration  39: 2.628 s/op
Iteration  40: 2.685 s/op
Iteration  41: 2.699 s/op
Iteration  42: 2.658 s/op
Iteration  43: 2.648 s/op
Iteration  44: 2.681 s/op
Iteration  45: 2.678 s/op
Iteration  46: 2.588 s/op
Iteration  47: 2.665 s/op
Iteration  48: 2.625 s/op
Iteration  49: 2.687 s/op
Iteration  50: 2.658 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.698 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [2.500, 2.600) = 4 
    [2.600, 2.700) = 39 
    [2.700, 2.800) = 4 
    [2.800, 2.900) = 0 
    [2.900, 3.000) = 0 
    [3.000, 3.100) = 1 
    [3.100, 3.200) = 0 
    [3.200, 3.300) = 0 
    [3.300, 3.400) = 1 
    [3.400, 3.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.585 s/op
     p(50.0000) =      2.673 s/op
     p(90.0000) =      2.708 s/op
     p(95.0000) =      3.137 s/op
     p(99.0000) =      3.518 s/op
     p(99.9000) =      3.518 s/op
     p(99.9900) =      3.518 s/op
     p(99.9990) =      3.518 s/op
     p(99.9999) =      3.518 s/op
    p(100.0000) =      3.518 s/op


# Run complete. Total time: 00:02:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.698 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9-8u222-b10_1564708058691.json
{"wallclock_times": [136.01195751000003], "core_cycle_counts": [[117559904740], [143085034295], [111316248775], [88069212746]], "aperf_counts": [[117185768631], [143028553800], [111267946371], [88035531592]], "mperf_counts": [[117190468842], [143032297290], [111268823154], [88035612056]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:09:54: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-08-02 03:09:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:09:55: INFO] 453 executions left in scheduler queue
[2019-08-02 03:09:55: INFO] Executions until ETA known: 3153
[2019-08-02 03:09:55: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:09:55: INFO] Estimated completion (next execution): 2019-08-02 03:14:41 (0:04:46 from now)
[2019-08-02 03:09:55: INFO] Reboot in preparation for next execution
[2019-08-02 03:14:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:14:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:14:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:14:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:14:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:14:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 03:15:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.867 s/op
Iteration   2: 2.490 s/op
Iteration   3: 2.484 s/op
Iteration   4: 2.257 s/op
Iteration   5: 2.245 s/op
Iteration   6: 2.060 s/op
Iteration   7: 2.056 s/op
Iteration   8: 2.026 s/op
Iteration   9: 2.034 s/op
Iteration  10: 2.018 s/op
Iteration  11: 2.019 s/op
Iteration  12: 2.025 s/op
Iteration  13: 2.015 s/op
Iteration  14: 2.010 s/op
Iteration  15: 2.030 s/op
Iteration  16: 1.987 s/op
Iteration  17: 2.008 s/op
Iteration  18: 2.019 s/op
Iteration  19: 2.047 s/op
Iteration  20: 2.027 s/op
Iteration  21: 2.000 s/op
Iteration  22: 2.032 s/op
Iteration  23: 2.018 s/op
Iteration  24: 2.032 s/op
Iteration  25: 2.032 s/op
Iteration  26: 1.997 s/op
Iteration  27: 2.044 s/op
Iteration  28: 2.047 s/op
Iteration  29: 2.022 s/op
Iteration  30: 2.063 s/op
Iteration  31: 2.058 s/op
Iteration  32: 2.078 s/op
Iteration  33: 2.069 s/op
Iteration  34: 2.082 s/op
Iteration  35: 2.079 s/op
Iteration  36: 2.047 s/op
Iteration  37: 2.036 s/op
Iteration  38: 2.097 s/op
Iteration  39: 2.078 s/op
Iteration  40: 2.058 s/op
Iteration  41: 2.049 s/op
Iteration  42: 2.064 s/op
Iteration  43: 2.064 s/op
Iteration  44: 2.058 s/op
Iteration  45: 2.070 s/op
Iteration  46: 2.048 s/op
Iteration  47: 2.076 s/op
Iteration  48: 2.078 s/op
Iteration  49: 2.036 s/op
Iteration  50: 2.089 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.086 ?(99.9%) 0.074 s/op

  Histogram, s/op:
    [1.900, 2.000) = 2 
    [2.000, 2.100) = 43 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 2 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 2 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.987 s/op
     p(50.0000) =      2.048 s/op
     p(90.0000) =      2.230 s/op
     p(95.0000) =      2.487 s/op
     p(99.0000) =      2.867 s/op
     p(99.9000) =      2.867 s/op
     p(99.9900) =      2.867 s/op
     p(99.9990) =      2.867 s/op
     p(99.9999) =      2.867 s/op
    p(100.0000) =      2.867 s/op


# Run complete. Total time: 00:01:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.086 ? 0.074   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_12.0.1_1564708446788.json
{"wallclock_times": [106.02849967099999], "core_cycle_counts": [[128069161138], [64625327142], [80013901015], [95401480321]], "aperf_counts": [[127739811238], [64547817923], [79940185842], [95326708093]], "mperf_counts": [[127748001316], [64547824066], [79940256548], [95326715550]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:15:52: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:15:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:15:53: INFO] 452 executions left in scheduler queue
[2019-08-02 03:15:53: INFO] Executions until ETA known: 3133
[2019-08-02 03:15:53: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:15:53: INFO] Estimated completion (next execution): 2019-08-02 03:20:10 (0:04:16 from now)
[2019-08-02 03:15:53: INFO] Reboot in preparation for next execution
[2019-08-02 03:20:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:20:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:20:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:20:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:20:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:20:18: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 03:22:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.297 s/op
Iteration   2: 3.126 s/op
Iteration   3: 2.921 s/op
Iteration   4: 2.816 s/op
Iteration   5: 2.871 s/op
Iteration   6: 2.894 s/op
Iteration   7: 2.893 s/op
Iteration   8: 2.908 s/op
Iteration   9: 2.945 s/op
Iteration  10: 3.008 s/op
Iteration  11: 2.951 s/op
Iteration  12: 2.938 s/op
Iteration  13: 2.890 s/op
Iteration  14: 2.861 s/op
Iteration  15: 2.886 s/op
Iteration  16: 2.867 s/op
Iteration  17: 2.864 s/op
Iteration  18: 2.861 s/op
Iteration  19: 2.899 s/op
Iteration  20: 2.870 s/op
Iteration  21: 2.925 s/op
Iteration  22: 2.832 s/op
Iteration  23: 2.920 s/op
Iteration  24: 2.897 s/op
Iteration  25: 2.795 s/op
Iteration  26: 2.920 s/op
Iteration  27: 2.809 s/op
Iteration  28: 2.877 s/op
Iteration  29: 2.862 s/op
Iteration  30: 2.858 s/op
Iteration  31: 2.915 s/op
Iteration  32: 2.840 s/op
Iteration  33: 2.863 s/op
Iteration  34: 2.870 s/op
Iteration  35: 2.916 s/op
Iteration  36: 2.868 s/op
Iteration  37: 2.888 s/op
Iteration  38: 2.888 s/op
Iteration  39: 2.868 s/op
Iteration  40: 2.915 s/op
Iteration  41: 2.871 s/op
Iteration  42: 2.898 s/op
Iteration  43: 2.852 s/op
Iteration  44: 2.874 s/op
Iteration  45: 2.856 s/op
Iteration  46: 2.865 s/op
Iteration  47: 2.884 s/op
Iteration  48: 2.840 s/op
Iteration  49: 2.889 s/op
Iteration  50: 2.855 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.896 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 1 
    [2.800, 2.850) = 5 
    [2.850, 2.900) = 30 
    [2.900, 2.950) = 10 
    [2.950, 3.000) = 1 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 1 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.795 s/op
     p(50.0000) =      2.881 s/op
     p(90.0000) =      2.945 s/op
     p(95.0000) =      3.061 s/op
     p(99.0000) =      3.297 s/op
     p(99.9000) =      3.297 s/op
     p(99.9900) =      3.297 s/op
     p(99.9990) =      3.297 s/op
     p(99.9999) =      3.297 s/op
    p(100.0000) =      3.297 s/op


# Run complete. Total time: 00:02:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.896 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_12.0.1_1564708817906.json
{"wallclock_times": [146.29668953399997], "core_cycle_counts": [[190230069081], [125659971350], [106958530861], [81321552528]], "aperf_counts": [[189900680984], [125591264188], [106887236165], [81257267419]], "mperf_counts": [[189909878696], [125594026896], [106887224856], [81257548268]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:22:44: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-08-02 03:22:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:22:45: INFO] 451 executions left in scheduler queue
[2019-08-02 03:22:45: INFO] Executions until ETA known: 3123
[2019-08-02 03:22:45: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-08-02 03:22:45: INFO] Estimated completion (next execution): 2019-08-02 03:27:41 (0:04:56 from now)
[2019-08-02 03:22:45: INFO] Reboot in preparation for next execution
[2019-08-02 03:26:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:26:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:26:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:26:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:26:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:31:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.617 s/op
Iteration   2: 6.260 s/op
Iteration   3: 5.355 s/op
Iteration   4: 5.359 s/op
Iteration   5: 5.355 s/op
Iteration   6: 5.361 s/op
Iteration   7: 5.353 s/op
Iteration   8: 5.369 s/op
Iteration   9: 5.354 s/op
Iteration  10: 5.354 s/op
Iteration  11: 5.381 s/op
Iteration  12: 5.354 s/op
Iteration  13: 5.361 s/op
Iteration  14: 5.354 s/op
Iteration  15: 5.368 s/op
Iteration  16: 5.355 s/op
Iteration  17: 5.352 s/op
Iteration  18: 5.356 s/op
Iteration  19: 5.357 s/op
Iteration  20: 5.354 s/op
Iteration  21: 5.355 s/op
Iteration  22: 5.355 s/op
Iteration  23: 5.354 s/op
Iteration  24: 5.357 s/op
Iteration  25: 5.354 s/op
Iteration  26: 5.358 s/op
Iteration  27: 5.353 s/op
Iteration  28: 5.356 s/op
Iteration  29: 5.349 s/op
Iteration  30: 5.358 s/op
Iteration  31: 5.352 s/op
Iteration  32: 5.353 s/op
Iteration  33: 5.362 s/op
Iteration  34: 5.349 s/op
Iteration  35: 5.365 s/op
Iteration  36: 5.356 s/op
Iteration  37: 5.354 s/op
Iteration  38: 5.353 s/op
Iteration  39: 5.351 s/op
Iteration  40: 5.354 s/op
Iteration  41: 5.383 s/op
Iteration  42: 5.354 s/op
Iteration  43: 5.361 s/op
Iteration  44: 5.360 s/op
Iteration  45: 5.351 s/op
Iteration  46: 5.360 s/op
Iteration  47: 5.357 s/op
Iteration  48: 5.349 s/op
Iteration  49: 5.355 s/op
Iteration  50: 5.362 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      5.380 ?(99.9%) 0.065 s/op

  Histogram, s/op:
    [5.300, 5.400) = 48 
    [5.400, 5.500) = 0 
    [5.500, 5.600) = 0 
    [5.600, 5.700) = 1 
    [5.700, 5.800) = 0 
    [5.800, 5.900) = 0 
    [5.900, 6.000) = 0 
    [6.000, 6.100) = 0 
    [6.100, 6.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.349 s/op
     p(50.0000) =      5.355 s/op
     p(90.0000) =      5.369 s/op
     p(95.0000) =      5.488 s/op
     p(99.0000) =      6.260 s/op
     p(99.9000) =      6.260 s/op
     p(99.9900) =      6.260 s/op
     p(99.9990) =      6.260 s/op
     p(99.9999) =      6.260 s/op
    p(100.0000) =      6.260 s/op


# Run complete. Total time: 00:04:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.380 ? 0.065   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot_11.0.4_1564709217955.json
{"wallclock_times": [270.04542022000004], "core_cycle_counts": [[93111558709], [217936540930], [496109155891], [64647614572]], "aperf_counts": [[92307266256], [217875148419], [496079827932], [64607942971]], "mperf_counts": [[93168206508], [218022036864], [496446959764], [64714261504]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 03:31:27: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-08-02 03:31:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:31:28: INFO] 450 executions left in scheduler queue
[2019-08-02 03:31:28: INFO] Executions until ETA known: 3084
[2019-08-02 03:31:28: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-08-02 03:31:28: INFO] Estimated completion (next execution): 2019-08-02 03:38:29 (0:07:00 from now)
[2019-08-02 03:31:28: INFO] Reboot in preparation for next execution
[2019-08-02 03:35:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 03:35:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 03:35:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 03:35:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 03:35:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 03:35:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 03:48:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.445 s/op
Iteration   2: 14.576 s/op
Iteration   3: 15.646 s/op
Iteration   4: 15.648 s/op
Iteration   5: 15.643 s/op
Iteration   6: 15.649 s/op
Iteration   7: 15.637 s/op
Iteration   8: 15.656 s/op
Iteration   9: 15.602 s/op
Iteration  10: 15.645 s/op
Iteration  11: 15.644 s/op
Iteration  12: 15.623 s/op
Iteration  13: 15.671 s/op
Iteration  14: 15.668 s/op
Iteration  15: 15.626 s/op
Iteration  16: 15.654 s/op
Iteration  17: 15.649 s/op
Iteration  18: 15.640 s/op
Iteration  19: 15.636 s/op
Iteration  20: 15.621 s/op
Iteration  21: 15.595 s/op
Iteration  22: 15.633 s/op
Iteration  23: 15.600 s/op
Iteration  24: 15.628 s/op
Iteration  25: 15.625 s/op
Iteration  26: 15.657 s/op
Iteration  27: 15.659 s/op
Iteration  28: 15.683 s/op
Iteration  29: 15.631 s/op
Iteration  30: 15.616 s/op
Iteration  31: 15.649 s/op
Iteration  32: 15.597 s/op
Iteration  33: 15.623 s/op
Iteration  34: 15.671 s/op
Iteration  35: 15.662 s/op
Iteration  36: 15.611 s/op
Iteration  37: 15.646 s/op
Iteration  38: 15.651 s/op
Iteration  39: 15.632 s/op
Iteration  40: 15.602 s/op
Iteration  41: 15.643 s/op
Iteration  42: 15.622 s/op
Iteration  43: 15.642 s/op
Iteration  44: 15.623 s/op
Iteration  45: 15.630 s/op
Iteration  46: 15.623 s/op
Iteration  47: 15.625 s/op
Iteration  48: 15.616 s/op
Iteration  49: 15.626 s/op
Iteration  50: 15.587 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     15.630 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 1 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 48 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.576 s/op
     p(50.0000) =     15.634 s/op
     p(90.0000) =     15.667 s/op
     p(95.0000) =     15.677 s/op
     p(99.0000) =     16.445 s/op
     p(99.9000) =     16.445 s/op
     p(99.9900) =     16.445 s/op
     p(99.9990) =     16.445 s/op
     p(99.9999) =     16.445 s/op
    p(100.0000) =     16.445 s/op


# Run complete. Total time: 00:13:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  15.630 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9_11.0.4_1564709739821.json
{"wallclock_times": [783.065571006], "core_cycle_counts": [[552401907923], [484081567479], [636636066141], [909291905485]], "aperf_counts": [[550187845042], [483936619532], [636397884928], [909186875700]], "mperf_counts": [[550191940358], [483936682740], [636397820742], [909186852524]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:48:42: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-08-02 03:48:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:48:43: INFO] 449 executions left in scheduler queue
[2019-08-02 03:48:43: INFO] Executions until ETA known: 3042
[2019-08-02 03:48:43: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 03:48:43: INFO] Estimated completion (next execution): 2019-08-02 04:04:17 (0:15:33 from now)
[2019-08-02 03:48:43: INFO] Reboot in preparation for next execution
[2019-08-02 03:52:54: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 03:54:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.032 s/op
Iteration   2: 2.483 s/op
Iteration   3: 2.017 s/op
Iteration   4: 2.236 s/op
Iteration   5: 1.927 s/op
Iteration   6: 1.859 s/op
Iteration   7: 1.836 s/op
Iteration   8: 1.856 s/op
Iteration   9: 1.833 s/op
Iteration  10: 1.815 s/op
Iteration  11: 1.858 s/op
Iteration  12: 1.835 s/op
Iteration  13: 1.863 s/op
Iteration  14: 1.823 s/op
Iteration  15: 1.829 s/op
Iteration  16: 1.844 s/op
Iteration  17: 1.863 s/op
Iteration  18: 1.886 s/op
Iteration  19: 1.878 s/op
Iteration  20: 1.874 s/op
Iteration  21: 1.848 s/op
Iteration  22: 1.882 s/op
Iteration  23: 1.863 s/op
Iteration  24: 1.897 s/op
Iteration  25: 1.892 s/op
Iteration  26: 1.871 s/op
Iteration  27: 1.848 s/op
Iteration  28: 1.870 s/op
Iteration  29: 1.878 s/op
Iteration  30: 1.893 s/op
Iteration  31: 1.872 s/op
Iteration  32: 1.874 s/op
Iteration  33: 1.873 s/op
Iteration  34: 1.882 s/op
Iteration  35: 1.881 s/op
Iteration  36: 1.844 s/op
Iteration  37: 1.901 s/op
Iteration  38: 1.864 s/op
Iteration  39: 1.853 s/op
Iteration  40: 1.891 s/op
Iteration  41: 1.894 s/op
Iteration  42: 1.881 s/op
Iteration  43: 1.841 s/op
Iteration  44: 1.870 s/op
Iteration  45: 1.847 s/op
Iteration  46: 1.873 s/op
Iteration  47: 1.882 s/op
Iteration  48: 1.889 s/op
Iteration  49: 1.870 s/op
Iteration  50: 1.874 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.913 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 46 
    [2.000, 2.250) = 2 
    [2.250, 2.500) = 1 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 0 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.815 s/op
     p(50.0000) =      1.873 s/op
     p(90.0000) =      1.924 s/op
     p(95.0000) =      2.347 s/op
     p(99.0000) =      3.032 s/op
     p(99.9000) =      3.032 s/op
     p(99.9900) =      3.032 s/op
     p(99.9990) =      3.032 s/op
     p(99.9999) =      3.032 s/op
    p(100.0000) =      3.032 s/op


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.913 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9-8u222-b10_1564710774597.json
{"wallclock_times": [96.91141437600001], "core_cycle_counts": [[79097301002], [62276045066], [95898025085], [97875965806]], "aperf_counts": [[78738740640], [62206379428], [95843158924], [97832461224]], "mperf_counts": [[78739696014], [62206391768], [95843153484], [97832464494]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 03:54:31: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 03:54:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 03:54:32: INFO] 448 executions left in scheduler queue
[2019-08-02 03:54:32: INFO] Executions until ETA known: 3032
[2019-08-02 03:54:32: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 03:54:32: INFO] Estimated completion (next execution): 2019-08-02 03:58:39 (0:04:07 from now)
[2019-08-02 03:54:32: INFO] Reboot in preparation for next execution
[2019-08-02 03:58:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 04:01:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.610 s/op
Iteration   2: 3.258 s/op
Iteration   3: 3.242 s/op
Iteration   4: 3.067 s/op
Iteration   5: 2.912 s/op
Iteration   6: 2.959 s/op
Iteration   7: 2.933 s/op
Iteration   8: 2.908 s/op
Iteration   9: 2.860 s/op
Iteration  10: 2.848 s/op
Iteration  11: 2.837 s/op
Iteration  12: 2.823 s/op
Iteration  13: 2.846 s/op
Iteration  14: 2.834 s/op
Iteration  15: 2.903 s/op
Iteration  16: 2.850 s/op
Iteration  17: 2.870 s/op
Iteration  18: 2.866 s/op
Iteration  19: 2.795 s/op
Iteration  20: 2.892 s/op
Iteration  21: 2.899 s/op
Iteration  22: 2.888 s/op
Iteration  23: 2.824 s/op
Iteration  24: 2.842 s/op
Iteration  25: 2.908 s/op
Iteration  26: 2.873 s/op
Iteration  27: 2.794 s/op
Iteration  28: 2.898 s/op
Iteration  29: 2.881 s/op
Iteration  30: 2.855 s/op
Iteration  31: 2.860 s/op
Iteration  32: 2.820 s/op
Iteration  33: 2.857 s/op
Iteration  34: 2.904 s/op
Iteration  35: 2.857 s/op
Iteration  36: 2.873 s/op
Iteration  37: 2.874 s/op
Iteration  38: 2.880 s/op
Iteration  39: 2.876 s/op
Iteration  40: 2.834 s/op
Iteration  41: 2.886 s/op
Iteration  42: 2.822 s/op
Iteration  43: 2.832 s/op
Iteration  44: 2.900 s/op
Iteration  45: 2.885 s/op
Iteration  46: 2.782 s/op
Iteration  47: 2.863 s/op
Iteration  48: 2.982 s/op
Iteration  49: 2.991 s/op
Iteration  50: 2.974 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.907 ?(99.9%) 0.067 s/op

  Histogram, s/op:
    [2.700, 2.800) = 3 
    [2.800, 2.900) = 33 
    [2.900, 3.000) = 10 
    [3.000, 3.100) = 1 
    [3.100, 3.200) = 0 
    [3.200, 3.300) = 2 
    [3.300, 3.400) = 0 
    [3.400, 3.500) = 0 
    [3.500, 3.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.782 s/op
     p(50.0000) =      2.874 s/op
     p(90.0000) =      2.990 s/op
     p(95.0000) =      3.250 s/op
     p(99.0000) =      3.610 s/op
     p(99.9000) =      3.610 s/op
     p(99.9900) =      3.610 s/op
     p(99.9990) =      3.610 s/op
     p(99.9999) =      3.610 s/op
    p(100.0000) =      3.610 s/op


# Run complete. Total time: 00:02:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.907 ? 0.067   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9-8u222-b10_1564711125242.json
{"wallclock_times": [146.44790680599996], "core_cycle_counts": [[161652469031], [91133674703], [134330922859], [106986961741]], "aperf_counts": [[161300623483], [91062105897], [134285403423], [106940306177]], "mperf_counts": [[161303928170], [91062128136], [134287792662], [106940299726]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:01:11: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-08-02 04:01:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:01:12: INFO] 447 executions left in scheduler queue
[2019-08-02 04:01:12: INFO] Executions until ETA known: 3029
[2019-08-02 04:01:12: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:01:12: INFO] Estimated completion (next execution): 2019-08-02 04:06:09 (0:04:56 from now)
[2019-08-02 04:01:12: INFO] Reboot in preparation for next execution
[2019-08-02 04:10:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.874 s/op
Iteration   2: 5.826 s/op
Iteration   3: 5.668 s/op
Iteration   4: 5.655 s/op
Iteration   5: 5.648 s/op
Iteration   6: 5.652 s/op
Iteration   7: 5.651 s/op
Iteration   8: 5.649 s/op
Iteration   9: 5.651 s/op
Iteration  10: 5.661 s/op
Iteration  11: 5.649 s/op
Iteration  12: 5.667 s/op
Iteration  13: 5.665 s/op
Iteration  14: 5.654 s/op
Iteration  15: 5.655 s/op
Iteration  16: 5.645 s/op
Iteration  17: 5.661 s/op
Iteration  18: 5.641 s/op
Iteration  19: 5.668 s/op
Iteration  20: 5.664 s/op
Iteration  21: 5.660 s/op
Iteration  22: 5.653 s/op
Iteration  23: 5.648 s/op
Iteration  24: 5.650 s/op
Iteration  25: 5.659 s/op
Iteration  26: 5.657 s/op
Iteration  27: 5.647 s/op
Iteration  28: 5.669 s/op
Iteration  29: 5.661 s/op
Iteration  30: 5.658 s/op
Iteration  31: 5.644 s/op
Iteration  32: 5.660 s/op
Iteration  33: 5.662 s/op
Iteration  34: 5.648 s/op
Iteration  35: 5.655 s/op
Iteration  36: 5.641 s/op
Iteration  37: 5.659 s/op
Iteration  38: 5.661 s/op
Iteration  39: 5.661 s/op
Iteration  40: 5.661 s/op
Iteration  41: 5.648 s/op
Iteration  42: 5.648 s/op
Iteration  43: 5.639 s/op
Iteration  44: 5.658 s/op
Iteration  45: 5.664 s/op
Iteration  46: 5.673 s/op
Iteration  47: 5.639 s/op
Iteration  48: 5.651 s/op
Iteration  49: 5.665 s/op
Iteration  50: 5.657 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.663 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [5.600, 5.625) = 0 
    [5.625, 5.650) = 14 
    [5.650, 5.675) = 34 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 0 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 1 
    [5.850, 5.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.639 s/op
     p(50.0000) =      5.657 s/op
     p(90.0000) =      5.668 s/op
     p(95.0000) =      5.742 s/op
     p(99.0000) =      5.874 s/op
     p(99.9000) =      5.874 s/op
     p(99.9900) =      5.874 s/op
     p(99.9990) =      5.874 s/op
     p(99.9999) =      5.874 s/op
    p(100.0000) =      5.874 s/op


# Run complete. Total time: 00:04:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.663 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ce-19.1.1_1564711524559.json
{"wallclock_times": [284.06100328499997], "core_cycle_counts": [[198152520580], [308397247041], [299806043119], [112476718274]], "aperf_counts": [[197466270740], [308345993903], [299782870412], [112453766389]], "mperf_counts": [[197492703338], [308348038936], [299785601840], [112461404448]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:10:08: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:10:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:10:09: INFO] 446 executions left in scheduler queue
[2019-08-02 04:10:09: INFO] Executions until ETA known: 3023
[2019-08-02 04:10:09: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:10:09: INFO] Estimated completion (next execution): 2019-08-02 04:17:23 (0:07:14 from now)
[2019-08-02 04:10:09: INFO] Reboot in preparation for next execution
[2019-08-02 04:17:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.914 s/op
Iteration   2: 3.535 s/op
Iteration   3: 3.434 s/op
Iteration   4: 3.449 s/op
Iteration   5: 3.434 s/op
Iteration   6: 3.449 s/op
Iteration   7: 3.415 s/op
Iteration   8: 3.437 s/op
Iteration   9: 3.435 s/op
Iteration  10: 3.417 s/op
Iteration  11: 3.446 s/op
Iteration  12: 3.417 s/op
Iteration  13: 3.450 s/op
Iteration  14: 3.439 s/op
Iteration  15: 3.430 s/op
Iteration  16: 3.411 s/op
Iteration  17: 3.414 s/op
Iteration  18: 3.417 s/op
Iteration  19: 3.427 s/op
Iteration  20: 3.432 s/op
Iteration  21: 3.439 s/op
Iteration  22: 3.434 s/op
Iteration  23: 3.406 s/op
Iteration  24: 3.447 s/op
Iteration  25: 3.397 s/op
Iteration  26: 3.415 s/op
Iteration  27: 3.417 s/op
Iteration  28: 3.406 s/op
Iteration  29: 3.417 s/op
Iteration  30: 3.466 s/op
Iteration  31: 3.437 s/op
Iteration  32: 3.400 s/op
Iteration  33: 3.441 s/op
Iteration  34: 3.448 s/op
Iteration  35: 3.415 s/op
Iteration  36: 3.408 s/op
Iteration  37: 3.423 s/op
Iteration  38: 3.407 s/op
Iteration  39: 3.401 s/op
Iteration  40: 3.457 s/op
Iteration  41: 3.425 s/op
Iteration  42: 3.438 s/op
Iteration  43: 3.455 s/op
Iteration  44: 3.443 s/op
Iteration  45: 3.453 s/op
Iteration  46: 3.439 s/op
Iteration  47: 3.446 s/op
Iteration  48: 3.454 s/op
Iteration  49: 3.409 s/op
Iteration  50: 3.439 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.442 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 41 
    [3.450, 3.500) = 6 
    [3.500, 3.550) = 1 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.397 s/op
     p(50.0000) =      3.434 s/op
     p(90.0000) =      3.455 s/op
     p(95.0000) =      3.497 s/op
     p(99.0000) =      3.914 s/op
     p(99.9000) =      3.914 s/op
     p(99.9900) =      3.914 s/op
     p(99.9990) =      3.914 s/op
     p(99.9999) =      3.914 s/op
    p(100.0000) =      3.914 s/op


# Run complete. Total time: 00:02:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.442 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ce-19.1.1_1564712061449.json
{"wallclock_times": [173.06652301600002], "core_cycle_counts": [[169362992968], [158613623569], [110258986808], [132992923863]], "aperf_counts": [[168980880592], [158563370599], [110237832276], [132975594518]], "mperf_counts": [[169001895610], [158579822428], [110238888648], [132979214186]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:17:14: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:17:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:17:15: INFO] 445 executions left in scheduler queue
[2019-08-02 04:17:15: INFO] Executions until ETA known: 3017
[2019-08-02 04:17:15: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:17:15: INFO] Estimated completion (next execution): 2019-08-02 04:22:38 (0:05:23 from now)
[2019-08-02 04:17:15: INFO] Reboot in preparation for next execution
[2019-08-02 04:24:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.158 s/op
Iteration   2: 3.661 s/op
Iteration   3: 3.639 s/op
Iteration   4: 3.637 s/op
Iteration   5: 3.621 s/op
Iteration   6: 3.685 s/op
Iteration   7: 3.624 s/op
Iteration   8: 3.638 s/op
Iteration   9: 3.683 s/op
Iteration  10: 3.645 s/op
Iteration  11: 3.687 s/op
Iteration  12: 3.633 s/op
Iteration  13: 3.629 s/op
Iteration  14: 3.677 s/op
Iteration  15: 3.650 s/op
Iteration  16: 3.627 s/op
Iteration  17: 3.713 s/op
Iteration  18: 3.635 s/op
Iteration  19: 3.646 s/op
Iteration  20: 3.689 s/op
Iteration  21: 3.629 s/op
Iteration  22: 3.628 s/op
Iteration  23: 3.685 s/op
Iteration  24: 3.635 s/op
Iteration  25: 3.627 s/op
Iteration  26: 3.689 s/op
Iteration  27: 3.625 s/op
Iteration  28: 3.636 s/op
Iteration  29: 3.700 s/op
Iteration  30: 3.642 s/op
Iteration  31: 3.620 s/op
Iteration  32: 3.686 s/op
Iteration  33: 3.636 s/op
Iteration  34: 3.637 s/op
Iteration  35: 3.688 s/op
Iteration  36: 3.625 s/op
Iteration  37: 3.632 s/op
Iteration  38: 3.710 s/op
Iteration  39: 3.644 s/op
Iteration  40: 3.642 s/op
Iteration  41: 3.643 s/op
Iteration  42: 3.693 s/op
Iteration  43: 3.638 s/op
Iteration  44: 3.633 s/op
Iteration  45: 3.703 s/op
Iteration  46: 3.635 s/op
Iteration  47: 3.644 s/op
Iteration  48: 3.709 s/op
Iteration  49: 3.645 s/op
Iteration  50: 3.726 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.665 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [3.600, 3.650) = 31 
    [3.650, 3.700) = 13 
    [3.700, 3.750) = 5 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.620 s/op
     p(50.0000) =      3.642 s/op
     p(90.0000) =      3.708 s/op
     p(95.0000) =      3.719 s/op
     p(99.0000) =      4.158 s/op
     p(99.9000) =      4.158 s/op
     p(99.9900) =      4.158 s/op
     p(99.9990) =      4.158 s/op
     p(99.9999) =      4.158 s/op
    p(100.0000) =      4.158 s/op


# Run complete. Total time: 00:03:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.665 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ce-19.1.1_1564712487675.json
{"wallclock_times": [184.31221474000003], "core_cycle_counts": [[170219864419], [178722740961], [127019097303], [188186552446]], "aperf_counts": [[169738079570], [178668896769], [126973931465], [188146757694]], "mperf_counts": [[169752700522], [178681365822], [126981113942], [188147076990]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:24:31: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:24:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:24:32: INFO] 444 executions left in scheduler queue
[2019-08-02 04:24:32: INFO] Executions until ETA known: 3012
[2019-08-02 04:24:32: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:24:32: INFO] Estimated completion (next execution): 2019-08-02 04:30:07 (0:05:34 from now)
[2019-08-02 04:24:32: INFO] Reboot in preparation for next execution
[2019-08-02 04:37:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.394 s/op
Iteration   2: 10.353 s/op
Iteration   3: 10.220 s/op
Iteration   4: 10.208 s/op
Iteration   5: 10.183 s/op
Iteration   6: 10.210 s/op
Iteration   7: 10.220 s/op
Iteration   8: 10.187 s/op
Iteration   9: 10.228 s/op
Iteration  10: 10.203 s/op
Iteration  11: 10.242 s/op
Iteration  12: 10.196 s/op
Iteration  13: 10.180 s/op
Iteration  14: 10.178 s/op
Iteration  15: 10.193 s/op
Iteration  16: 10.191 s/op
Iteration  17: 10.164 s/op
Iteration  18: 10.195 s/op
Iteration  19: 10.191 s/op
Iteration  20: 10.201 s/op
Iteration  21: 10.199 s/op
Iteration  22: 10.185 s/op
Iteration  23: 10.217 s/op
Iteration  24: 10.239 s/op
Iteration  25: 10.217 s/op
Iteration  26: 10.188 s/op
Iteration  27: 10.197 s/op
Iteration  28: 10.212 s/op
Iteration  29: 10.178 s/op
Iteration  30: 10.209 s/op
Iteration  31: 10.245 s/op
Iteration  32: 10.222 s/op
Iteration  33: 10.220 s/op
Iteration  34: 10.192 s/op
Iteration  35: 10.231 s/op
Iteration  36: 10.214 s/op
Iteration  37: 10.212 s/op
Iteration  38: 10.183 s/op
Iteration  39: 10.186 s/op
Iteration  40: 10.213 s/op
Iteration  41: 10.204 s/op
Iteration  42: 10.195 s/op
Iteration  43: 10.226 s/op
Iteration  44: 10.351 s/op
Iteration  45: 10.206 s/op
Iteration  46: 10.173 s/op
Iteration  47: 10.198 s/op
Iteration  48: 10.207 s/op
Iteration  49: 10.211 s/op
Iteration  50: 10.186 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.213 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [10.100, 10.125) = 0 
    [10.125, 10.150) = 0 
    [10.150, 10.175) = 2 
    [10.175, 10.200) = 20 
    [10.200, 10.225) = 19 
    [10.225, 10.250) = 6 
    [10.250, 10.275) = 0 
    [10.275, 10.300) = 0 
    [10.300, 10.325) = 0 
    [10.325, 10.350) = 0 
    [10.350, 10.375) = 2 

  Percentiles, s/op:
      p(0.0000) =     10.164 s/op
     p(50.0000) =     10.205 s/op
     p(90.0000) =     10.242 s/op
     p(95.0000) =     10.352 s/op
     p(99.0000) =     10.394 s/op
     p(99.9000) =     10.394 s/op
     p(99.9900) =     10.394 s/op
     p(99.9990) =     10.394 s/op
     p(99.9999) =     10.394 s/op
    p(100.0000) =     10.394 s/op


# Run complete. Total time: 00:08:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.213 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ce-19.1.1_1564712936565.json
{"wallclock_times": [511.54919598199996], "core_cycle_counts": [[510764580321], [528437148899], [276699060672], [331403791177]], "aperf_counts": [[509670846122], [528329330962], [276666811024], [331378221484]], "mperf_counts": [[509689416824], [528334861922], [276666908066], [331384281154]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 04:37:28: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-08-02 04:37:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:37:29: INFO] 443 executions left in scheduler queue
[2019-08-02 04:37:29: INFO] Executions until ETA known: 2978
[2019-08-02 04:37:29: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:37:29: INFO] Estimated completion (next execution): 2019-08-02 04:48:30 (0:11:01 from now)
[2019-08-02 04:37:29: INFO] Reboot in preparation for next execution
[2019-08-02 04:41:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 04:41:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 04:41:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 04:41:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 04:41:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 04:41:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 04:43:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.897 s/op
Iteration   2: 2.190 s/op
Iteration   3: 2.287 s/op
Iteration   4: 2.037 s/op
Iteration   5: 2.061 s/op
Iteration   6: 2.017 s/op
Iteration   7: 1.983 s/op
Iteration   8: 1.937 s/op
Iteration   9: 1.950 s/op
Iteration  10: 1.936 s/op
Iteration  11: 1.891 s/op
Iteration  12: 1.933 s/op
Iteration  13: 1.927 s/op
Iteration  14: 1.933 s/op
Iteration  15: 1.909 s/op
Iteration  16: 1.911 s/op
Iteration  17: 1.962 s/op
Iteration  18: 1.953 s/op
Iteration  19: 1.960 s/op
Iteration  20: 1.945 s/op
Iteration  21: 1.948 s/op
Iteration  22: 1.936 s/op
Iteration  23: 1.945 s/op
Iteration  24: 1.963 s/op
Iteration  25: 1.916 s/op
Iteration  26: 1.904 s/op
Iteration  27: 1.944 s/op
Iteration  28: 1.939 s/op
Iteration  29: 1.935 s/op
Iteration  30: 1.932 s/op
Iteration  31: 1.947 s/op
Iteration  32: 1.959 s/op
Iteration  33: 1.952 s/op
Iteration  34: 1.933 s/op
Iteration  35: 1.941 s/op
Iteration  36: 1.948 s/op
Iteration  37: 1.943 s/op
Iteration  38: 1.929 s/op
Iteration  39: 1.912 s/op
Iteration  40: 1.953 s/op
Iteration  41: 1.959 s/op
Iteration  42: 1.963 s/op
Iteration  43: 1.956 s/op
Iteration  44: 1.942 s/op
Iteration  45: 1.951 s/op
Iteration  46: 1.930 s/op
Iteration  47: 1.950 s/op
Iteration  48: 1.902 s/op
Iteration  49: 1.915 s/op
Iteration  50: 1.933 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.976 ?(99.9%) 0.073 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 0 
    [1.875, 2.000) = 44 
    [2.000, 2.125) = 3 
    [2.125, 2.250) = 1 
    [2.250, 2.375) = 1 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.891 s/op
     p(50.0000) =      1.944 s/op
     p(90.0000) =      2.035 s/op
     p(95.0000) =      2.233 s/op
     p(99.0000) =      2.897 s/op
     p(99.9000) =      2.897 s/op
     p(99.9900) =      2.897 s/op
     p(99.9990) =      2.897 s/op
     p(99.9999) =      2.897 s/op
    p(100.0000) =      2.897 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.976 ? 0.073   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_11.0.4_1564713701828.json
{"wallclock_times": [100.43186240199998], "core_cycle_counts": [[110881809262], [96189993255], [89891082211], [55431525682]], "aperf_counts": [[110554277703], [96102544371], [89833308749], [55375486603]], "mperf_counts": [[110563581294], [96102700028], [89834071886], [55375497460]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:43:22: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:43:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:43:23: INFO] 442 executions left in scheduler queue
[2019-08-02 04:43:23: INFO] Executions until ETA known: 2968
[2019-08-02 04:43:23: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:43:23: INFO] Estimated completion (next execution): 2019-08-02 04:47:34 (0:04:11 from now)
[2019-08-02 04:43:23: INFO] Reboot in preparation for next execution
[2019-08-02 04:47:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 04:47:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 04:47:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 04:47:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 04:47:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 04:47:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 04:50:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.164 s/op
Iteration   2: 3.215 s/op
Iteration   3: 3.175 s/op
Iteration   4: 2.880 s/op
Iteration   5: 2.913 s/op
Iteration   6: 2.910 s/op
Iteration   7: 2.896 s/op
Iteration   8: 2.866 s/op
Iteration   9: 2.830 s/op
Iteration  10: 2.789 s/op
Iteration  11: 2.896 s/op
Iteration  12: 2.840 s/op
Iteration  13: 2.843 s/op
Iteration  14: 2.822 s/op
Iteration  15: 2.819 s/op
Iteration  16: 2.894 s/op
Iteration  17: 2.897 s/op
Iteration  18: 2.824 s/op
Iteration  19: 2.857 s/op
Iteration  20: 2.933 s/op
Iteration  21: 2.910 s/op
Iteration  22: 2.868 s/op
Iteration  23: 2.867 s/op
Iteration  24: 2.929 s/op
Iteration  25: 2.933 s/op
Iteration  26: 2.839 s/op
Iteration  27: 2.867 s/op
Iteration  28: 2.855 s/op
Iteration  29: 2.842 s/op
Iteration  30: 2.901 s/op
Iteration  31: 2.835 s/op
Iteration  32: 2.926 s/op
Iteration  33: 2.870 s/op
Iteration  34: 2.881 s/op
Iteration  35: 2.889 s/op
Iteration  36: 2.904 s/op
Iteration  37: 2.890 s/op
Iteration  38: 2.922 s/op
Iteration  39: 2.904 s/op
Iteration  40: 2.916 s/op
Iteration  41: 2.871 s/op
Iteration  42: 2.882 s/op
Iteration  43: 2.922 s/op
Iteration  44: 2.960 s/op
Iteration  45: 3.013 s/op
Iteration  46: 2.928 s/op
Iteration  47: 2.980 s/op
Iteration  48: 2.960 s/op
Iteration  49: 2.987 s/op
Iteration  50: 2.968 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.930 ?(99.9%) 0.096 s/op

  Histogram, s/op:
    [2.000, 2.250) = 0 
    [2.250, 2.500) = 0 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 46 
    [3.000, 3.250) = 3 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 
    [3.750, 4.000) = 0 
    [4.000, 4.250) = 1 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.789 s/op
     p(50.0000) =      2.896 s/op
     p(90.0000) =      2.986 s/op
     p(95.0000) =      3.193 s/op
     p(99.0000) =      4.164 s/op
     p(99.9000) =      4.164 s/op
     p(99.9900) =      4.164 s/op
     p(99.9990) =      4.164 s/op
     p(99.9999) =      4.164 s/op
    p(100.0000) =      4.164 s/op


# Run complete. Total time: 00:02:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.930 ? 0.096   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_11.0.4_1564714069327.json
{"wallclock_times": [147.98792163099998], "core_cycle_counts": [[204404926802], [88850219899], [99021896501], [114357957093]], "aperf_counts": [[204092449343], [88774807150], [98941420173], [114285886693]], "mperf_counts": [[204096594336], [88775336254], [98941480448], [114286283474]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:50:17: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-08-02 04:50:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:50:18: INFO] 441 executions left in scheduler queue
[2019-08-02 04:50:18: INFO] Executions until ETA known: 2958
[2019-08-02 04:50:18: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 04:50:18: INFO] Estimated completion (next execution): 2019-08-02 04:55:16 (0:04:58 from now)
[2019-08-02 04:50:18: INFO] Reboot in preparation for next execution
[2019-08-02 04:54:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 04:54:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 04:54:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 04:54:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 04:54:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 04:54:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 04:56:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.801 s/op
Iteration   2: 2.358 s/op
Iteration   3: 2.318 s/op
Iteration   4: 2.311 s/op
Iteration   5: 2.358 s/op
Iteration   6: 1.934 s/op
Iteration   7: 1.931 s/op
Iteration   8: 1.928 s/op
Iteration   9: 1.954 s/op
Iteration  10: 1.946 s/op
Iteration  11: 1.936 s/op
Iteration  12: 1.936 s/op
Iteration  13: 1.969 s/op
Iteration  14: 1.939 s/op
Iteration  15: 1.945 s/op
Iteration  16: 1.913 s/op
Iteration  17: 1.936 s/op
Iteration  18: 1.967 s/op
Iteration  19: 1.942 s/op
Iteration  20: 1.923 s/op
Iteration  21: 1.935 s/op
Iteration  22: 1.957 s/op
Iteration  23: 1.959 s/op
Iteration  24: 1.942 s/op
Iteration  25: 1.928 s/op
Iteration  26: 1.908 s/op
Iteration  27: 1.950 s/op
Iteration  28: 1.954 s/op
Iteration  29: 1.958 s/op
Iteration  30: 1.951 s/op
Iteration  31: 1.938 s/op
Iteration  32: 1.944 s/op
Iteration  33: 1.959 s/op
Iteration  34: 1.953 s/op
Iteration  35: 1.956 s/op
Iteration  36: 1.907 s/op
Iteration  37: 1.950 s/op
Iteration  38: 1.948 s/op
Iteration  39: 1.959 s/op
Iteration  40: 1.948 s/op
Iteration  41: 1.967 s/op
Iteration  42: 1.937 s/op
Iteration  43: 1.930 s/op
Iteration  44: 1.955 s/op
Iteration  45: 1.944 s/op
Iteration  46: 1.941 s/op
Iteration  47: 1.970 s/op
Iteration  48: 1.930 s/op
Iteration  49: 1.910 s/op
Iteration  50: 1.950 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.992 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [1.900, 2.000) = 45 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 4 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.907 s/op
     p(50.0000) =      1.947 s/op
     p(90.0000) =      2.277 s/op
     p(95.0000) =      2.358 s/op
     p(99.0000) =      2.801 s/op
     p(99.9000) =      2.801 s/op
     p(99.9900) =      2.801 s/op
     p(99.9990) =      2.801 s/op
     p(99.9999) =      2.801 s/op
    p(100.0000) =      2.801 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.992 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9_12.0.1_1564714469266.json
{"wallclock_times": [101.263414447], "core_cycle_counts": [[100382861329], [62733727828], [77170878370], [111318153660]], "aperf_counts": [[100039742970], [62671577495], [77096802661], [111256062498]], "mperf_counts": [[100048057526], [62671675284], [77096907542], [111256065930]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 04:56:10: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 04:56:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 04:56:11: INFO] 440 executions left in scheduler queue
[2019-08-02 04:56:11: INFO] Executions until ETA known: 2955
[2019-08-02 04:56:11: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 04:56:11: INFO] Estimated completion (next execution): 2019-08-02 05:00:23 (0:04:11 from now)
[2019-08-02 04:56:11: INFO] Reboot in preparation for next execution
[2019-08-02 05:00:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:00:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:00:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:00:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:00:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:00:22: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 05:02:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.032 s/op
Iteration   2: 2.564 s/op
Iteration   3: 2.536 s/op
Iteration   4: 2.443 s/op
Iteration   5: 2.449 s/op
Iteration   6: 2.434 s/op
Iteration   7: 2.406 s/op
Iteration   8: 2.402 s/op
Iteration   9: 2.469 s/op
Iteration  10: 2.471 s/op
Iteration  11: 2.508 s/op
Iteration  12: 2.449 s/op
Iteration  13: 2.478 s/op
Iteration  14: 2.447 s/op
Iteration  15: 2.461 s/op
Iteration  16: 2.420 s/op
Iteration  17: 2.466 s/op
Iteration  18: 2.485 s/op
Iteration  19: 2.423 s/op
Iteration  20: 2.458 s/op
Iteration  21: 2.474 s/op
Iteration  22: 2.420 s/op
Iteration  23: 2.445 s/op
Iteration  24: 2.489 s/op
Iteration  25: 2.443 s/op
Iteration  26: 2.461 s/op
Iteration  27: 2.451 s/op
Iteration  28: 2.478 s/op
Iteration  29: 2.460 s/op
Iteration  30: 2.486 s/op
Iteration  31: 2.483 s/op
Iteration  32: 2.424 s/op
Iteration  33: 2.457 s/op
Iteration  34: 2.434 s/op
Iteration  35: 2.398 s/op
Iteration  36: 2.458 s/op
Iteration  37: 2.465 s/op
Iteration  38: 2.445 s/op
Iteration  39: 2.474 s/op
Iteration  40: 2.467 s/op
Iteration  41: 2.403 s/op
Iteration  42: 2.471 s/op
Iteration  43: 2.448 s/op
Iteration  44: 2.456 s/op
Iteration  45: 2.482 s/op
Iteration  46: 2.404 s/op
Iteration  47: 2.438 s/op
Iteration  48: 2.446 s/op
Iteration  49: 2.445 s/op
Iteration  50: 2.473 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.468 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 21 
    [2.450, 2.500) = 24 
    [2.500, 2.550) = 2 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.398 s/op
     p(50.0000) =      2.458 s/op
     p(90.0000) =      2.489 s/op
     p(95.0000) =      2.549 s/op
     p(99.0000) =      3.032 s/op
     p(99.9000) =      3.032 s/op
     p(99.9900) =      3.032 s/op
     p(99.9990) =      3.032 s/op
     p(99.9999) =      3.032 s/op
    p(100.0000) =      3.032 s/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.468 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9_12.0.1_1564714822313.json
{"wallclock_times": [124.92559773800002], "core_cycle_counts": [[120268069178], [127821296961], [83040007810], [95545578839]], "aperf_counts": [[119924569256], [127759203139], [82989465684], [95488325039]], "mperf_counts": [[119927885556], [127760976270], [82989473404], [95488403614]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 05:02:27: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-08-02 05:02:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:02:28: INFO] 439 executions left in scheduler queue
[2019-08-02 05:02:28: INFO] Executions until ETA known: 2929
[2019-08-02 05:02:28: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:02:28: INFO] Estimated completion (next execution): 2019-08-02 05:07:03 (0:04:35 from now)
[2019-08-02 05:02:28: INFO] Reboot in preparation for next execution
[2019-08-02 05:06:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:06:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:06:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:06:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:06:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:06:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 05:08:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.805 s/op
Iteration   2: 2.278 s/op
Iteration   3: 2.120 s/op
Iteration   4: 2.017 s/op
Iteration   5: 2.047 s/op
Iteration   6: 1.930 s/op
Iteration   7: 1.903 s/op
Iteration   8: 1.921 s/op
Iteration   9: 1.903 s/op
Iteration  10: 1.892 s/op
Iteration  11: 1.962 s/op
Iteration  12: 1.935 s/op
Iteration  13: 1.954 s/op
Iteration  14: 1.942 s/op
Iteration  15: 1.922 s/op
Iteration  16: 1.887 s/op
Iteration  17: 1.893 s/op
Iteration  18: 1.902 s/op
Iteration  19: 1.892 s/op
Iteration  20: 1.873 s/op
Iteration  21: 1.896 s/op
Iteration  22: 1.912 s/op
Iteration  23: 1.911 s/op
Iteration  24: 1.893 s/op
Iteration  25: 1.899 s/op
Iteration  26: 1.906 s/op
Iteration  27: 1.890 s/op
Iteration  28: 1.917 s/op
Iteration  29: 1.911 s/op
Iteration  30: 1.899 s/op
Iteration  31: 1.907 s/op
Iteration  32: 1.903 s/op
Iteration  33: 1.908 s/op
Iteration  34: 1.915 s/op
Iteration  35: 1.890 s/op
Iteration  36: 1.903 s/op
Iteration  37: 1.895 s/op
Iteration  38: 1.871 s/op
Iteration  39: 1.892 s/op
Iteration  40: 1.920 s/op
Iteration  41: 1.904 s/op
Iteration  42: 1.898 s/op
Iteration  43: 1.903 s/op
Iteration  44: 1.905 s/op
Iteration  45: 1.893 s/op
Iteration  46: 1.905 s/op
Iteration  47: 1.930 s/op
Iteration  48: 1.901 s/op
Iteration  49: 1.876 s/op
Iteration  50: 1.901 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.941 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [1.800, 1.900) = 17 
    [1.900, 2.000) = 28 
    [2.000, 2.100) = 2 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.871 s/op
     p(50.0000) =      1.903 s/op
     p(90.0000) =      2.011 s/op
     p(95.0000) =      2.191 s/op
     p(99.0000) =      2.805 s/op
     p(99.9000) =      2.805 s/op
     p(99.9900) =      2.805 s/op
     p(99.9990) =      2.805 s/op
     p(99.9999) =      2.805 s/op
    p(100.0000) =      2.805 s/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.941 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_11.0.4_1564715215811.json
{"wallclock_times": [98.69350151200001], "core_cycle_counts": [[137351166010], [69621871510], [54269483959], [87070129855]], "aperf_counts": [[137070492684], [69536392357], [54197707107], [87006525466]], "mperf_counts": [[137072129406], [69536766926], [54197703614], [87007213060]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 05:08:34: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:08:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:08:35: INFO] 438 executions left in scheduler queue
[2019-08-02 05:08:35: INFO] Executions until ETA known: 2909
[2019-08-02 05:08:35: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:08:35: INFO] Estimated completion (next execution): 2019-08-02 05:12:44 (0:04:09 from now)
[2019-08-02 05:08:35: INFO] Reboot in preparation for next execution
[2019-08-02 05:12:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:12:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:12:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:12:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:12:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:12:48: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 05:15:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.458 s/op
Iteration   2: 3.012 s/op
Iteration   3: 3.354 s/op
Iteration   4: 2.769 s/op
Iteration   5: 2.771 s/op
Iteration   6: 2.804 s/op
Iteration   7: 2.786 s/op
Iteration   8: 2.626 s/op
Iteration   9: 2.682 s/op
Iteration  10: 2.693 s/op
Iteration  11: 2.660 s/op
Iteration  12: 2.734 s/op
Iteration  13: 2.715 s/op
Iteration  14: 2.697 s/op
Iteration  15: 2.684 s/op
Iteration  16: 2.741 s/op
Iteration  17: 2.697 s/op
Iteration  18: 2.697 s/op
Iteration  19: 2.729 s/op
Iteration  20: 2.739 s/op
Iteration  21: 2.690 s/op
Iteration  22: 2.680 s/op
Iteration  23: 2.651 s/op
Iteration  24: 2.719 s/op
Iteration  25: 2.774 s/op
Iteration  26: 2.776 s/op
Iteration  27: 2.774 s/op
Iteration  28: 2.782 s/op
Iteration  29: 2.810 s/op
Iteration  30: 2.757 s/op
Iteration  31: 2.691 s/op
Iteration  32: 2.826 s/op
Iteration  33: 2.817 s/op
Iteration  34: 2.785 s/op
Iteration  35: 2.724 s/op
Iteration  36: 2.795 s/op
Iteration  37: 2.749 s/op
Iteration  38: 2.817 s/op
Iteration  39: 2.770 s/op
Iteration  40: 2.707 s/op
Iteration  41: 2.749 s/op
Iteration  42: 2.741 s/op
Iteration  43: 2.760 s/op
Iteration  44: 2.798 s/op
Iteration  45: 2.792 s/op
Iteration  46: 2.703 s/op
Iteration  47: 2.720 s/op
Iteration  48: 2.775 s/op
Iteration  49: 2.777 s/op
Iteration  50: 2.761 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.774 ?(99.9%) 0.071 s/op

  Histogram, s/op:
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 11 
    [2.700, 2.750) = 13 
    [2.750, 2.800) = 17 
    [2.800, 2.850) = 5 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.626 s/op
     p(50.0000) =      2.753 s/op
     p(90.0000) =      2.817 s/op
     p(95.0000) =      3.166 s/op
     p(99.0000) =      3.458 s/op
     p(99.9000) =      3.458 s/op
     p(99.9900) =      3.458 s/op
     p(99.9990) =      3.458 s/op
     p(99.9999) =      3.458 s/op
    p(100.0000) =      3.458 s/op


# Run complete. Total time: 00:02:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.774 ? 0.071   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_11.0.4_1564715568221.json
{"wallclock_times": [140.24956468099998], "core_cycle_counts": [[160308760779], [81482236704], [160356906589], [77205356962]], "aperf_counts": [[159966485323], [81411013035], [160301956843], [77142854451]], "mperf_counts": [[159972519590], [81412820710], [160301946392], [77142921896]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 05:15:08: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-08-02 05:15:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:15:09: INFO] 437 executions left in scheduler queue
[2019-08-02 05:15:09: INFO] Executions until ETA known: 2901
[2019-08-02 05:15:09: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:15:09: INFO] Estimated completion (next execution): 2019-08-02 05:20:00 (0:04:50 from now)
[2019-08-02 05:15:09: INFO] Reboot in preparation for next execution
[2019-08-02 05:19:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:19:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:19:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:19:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:19:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:28:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.663 s/op
Iteration   2: 10.995 s/op
Iteration   3: 10.889 s/op
Iteration   4: 10.633 s/op
Iteration   5: 10.691 s/op
Iteration   6: 10.590 s/op
Iteration   7: 10.653 s/op
Iteration   8: 10.634 s/op
Iteration   9: 10.621 s/op
Iteration  10: 10.669 s/op
Iteration  11: 10.624 s/op
Iteration  12: 10.647 s/op
Iteration  13: 10.625 s/op
Iteration  14: 10.638 s/op
Iteration  15: 10.676 s/op
Iteration  16: 10.650 s/op
Iteration  17: 10.672 s/op
Iteration  18: 10.586 s/op
Iteration  19: 10.603 s/op
Iteration  20: 10.602 s/op
Iteration  21: 10.606 s/op
Iteration  22: 10.609 s/op
Iteration  23: 10.599 s/op
Iteration  24: 10.612 s/op
Iteration  25: 10.608 s/op
Iteration  26: 10.657 s/op
Iteration  27: 10.660 s/op
Iteration  28: 10.611 s/op
Iteration  29: 10.596 s/op
Iteration  30: 10.588 s/op
Iteration  31: 10.585 s/op
Iteration  32: 10.641 s/op
Iteration  33: 10.595 s/op
Iteration  34: 10.615 s/op
Iteration  35: 10.665 s/op
Iteration  36: 10.633 s/op
Iteration  37: 10.611 s/op
Iteration  38: 10.611 s/op
Iteration  39: 10.648 s/op
Iteration  40: 10.594 s/op
Iteration  41: 10.609 s/op
Iteration  42: 10.597 s/op
Iteration  43: 10.615 s/op
Iteration  44: 10.601 s/op
Iteration  45: 10.616 s/op
Iteration  46: 10.658 s/op
Iteration  47: 10.619 s/op
Iteration  48: 10.685 s/op
Iteration  49: 10.630 s/op
Iteration  50: 10.617 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.639 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [10.500, 10.550) = 0 
    [10.550, 10.600) = 9 
    [10.600, 10.650) = 27 
    [10.650, 10.700) = 12 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 1 
    [10.900, 10.950) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.585 s/op
     p(50.0000) =     10.620 s/op
     p(90.0000) =     10.676 s/op
     p(95.0000) =     10.780 s/op
     p(99.0000) =     10.995 s/op
     p(99.9000) =     10.995 s/op
     p(99.9900) =     10.995 s/op
     p(99.9990) =     10.995 s/op
     p(99.9999) =     10.995 s/op
    p(100.0000) =     10.995 s/op


# Run complete. Total time: 00:08:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.639 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot_12.0.2_1564715977751.json
{"wallclock_times": [532.9170731309999], "core_cycle_counts": [[265339812677], [159479193556], [642496306480], [654315358051]], "aperf_counts": [[263871322719], [159373653591], [642464207102], [654261728773]], "mperf_counts": [[264146187730], [159416175586], [642510272978], [654344837074]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 05:28:30: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:28:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:28:31: INFO] 436 executions left in scheduler queue
[2019-08-02 05:28:31: INFO] Executions until ETA known: 2895
[2019-08-02 05:28:31: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:28:31: INFO] Estimated completion (next execution): 2019-08-02 05:39:54 (0:11:23 from now)
[2019-08-02 05:28:31: INFO] Reboot in preparation for next execution
[2019-08-02 05:32:44: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:32:44: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:32:44: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:32:44: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:32:44: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:38:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.556 s/op
Iteration   2: 7.300 s/op
Iteration   3: 7.548 s/op
Iteration   4: 7.235 s/op
Iteration   5: 7.470 s/op
Iteration   6: 7.424 s/op
Iteration   7: 7.202 s/op
Iteration   8: 7.521 s/op
Iteration   9: 7.301 s/op
Iteration  10: 7.501 s/op
Iteration  11: 7.503 s/op
Iteration  12: 7.357 s/op
Iteration  13: 7.497 s/op
Iteration  14: 6.551 s/op
Iteration  15: 6.591 s/op
Iteration  16: 7.506 s/op
Iteration  17: 7.549 s/op
Iteration  18: 7.511 s/op
Iteration  19: 7.521 s/op
Iteration  20: 7.477 s/op
Iteration  21: 7.508 s/op
Iteration  22: 7.503 s/op
Iteration  23: 7.531 s/op
Iteration  24: 7.501 s/op
Iteration  25: 7.478 s/op
Iteration  26: 6.735 s/op
Iteration  27: 7.496 s/op
Iteration  28: 7.491 s/op
Iteration  29: 7.476 s/op
Iteration  30: 7.498 s/op
Iteration  31: 7.491 s/op
Iteration  32: 7.383 s/op
Iteration  33: 7.424 s/op
Iteration  34: 7.322 s/op
Iteration  35: 7.477 s/op
Iteration  36: 7.080 s/op
Iteration  37: 7.466 s/op
Iteration  38: 7.476 s/op
Iteration  39: 7.500 s/op
Iteration  40: 7.464 s/op
Iteration  41: 7.543 s/op
Iteration  42: 7.487 s/op
Iteration  43: 6.600 s/op
Iteration  44: 6.617 s/op
Iteration  45: 7.498 s/op
Iteration  46: 6.901 s/op
Iteration  47: 7.562 s/op
Iteration  48: 7.227 s/op
Iteration  49: 7.535 s/op
Iteration  50: 7.510 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.358 ?(99.9%) 0.139 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 4 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 0 
    [6.875, 7.000) = 1 
    [7.000, 7.125) = 1 
    [7.125, 7.250) = 3 
    [7.250, 7.375) = 4 
    [7.375, 7.500) = 18 
    [7.500, 7.625) = 18 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.551 s/op
     p(50.0000) =      7.482 s/op
     p(90.0000) =      7.542 s/op
     p(95.0000) =      7.552 s/op
     p(99.0000) =      7.562 s/op
     p(99.9000) =      7.562 s/op
     p(99.9900) =      7.562 s/op
     p(99.9990) =      7.562 s/op
     p(99.9999) =      7.562 s/op
    p(100.0000) =      7.562 s/op


# Run complete. Total time: 00:06:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.358 ? 0.139   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot_12.0.2_1564716764130.json
{"wallclock_times": [369.011202185], "core_cycle_counts": [[135472397794], [443102285587], [359343452354], [139814517182]], "aperf_counts": [[134411623924], [443046862698], [359302566987], [139777393522]], "mperf_counts": [[148397314322], [497248021400], [402894994308], [152965256994]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 05:38:53: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:38:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:38:54: INFO] 435 executions left in scheduler queue
[2019-08-02 05:38:54: INFO] Executions until ETA known: 2889
[2019-08-02 05:38:54: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:38:54: INFO] Estimated completion (next execution): 2019-08-02 05:47:33 (0:08:39 from now)
[2019-08-02 05:38:54: INFO] Reboot in preparation for next execution
[2019-08-02 05:43:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:43:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:43:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:43:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:43:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 05:49:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.375 s/op
Iteration   2: 7.429 s/op
Iteration   3: 7.342 s/op
Iteration   4: 7.162 s/op
Iteration   5: 6.965 s/op
Iteration   6: 7.085 s/op
Iteration   7: 7.094 s/op
Iteration   8: 6.993 s/op
Iteration   9: 7.135 s/op
Iteration  10: 7.015 s/op
Iteration  11: 7.113 s/op
Iteration  12: 7.102 s/op
Iteration  13: 6.984 s/op
Iteration  14: 7.133 s/op
Iteration  15: 6.964 s/op
Iteration  16: 7.108 s/op
Iteration  17: 7.119 s/op
Iteration  18: 6.990 s/op
Iteration  19: 7.132 s/op
Iteration  20: 6.990 s/op
Iteration  21: 7.145 s/op
Iteration  22: 7.121 s/op
Iteration  23: 7.119 s/op
Iteration  24: 6.954 s/op
Iteration  25: 7.095 s/op
Iteration  26: 7.093 s/op
Iteration  27: 7.081 s/op
Iteration  28: 7.064 s/op
Iteration  29: 7.137 s/op
Iteration  30: 7.058 s/op
Iteration  31: 7.150 s/op
Iteration  32: 7.042 s/op
Iteration  33: 7.031 s/op
Iteration  34: 7.095 s/op
Iteration  35: 6.990 s/op
Iteration  36: 7.123 s/op
Iteration  37: 6.978 s/op
Iteration  38: 7.119 s/op
Iteration  39: 7.127 s/op
Iteration  40: 6.987 s/op
Iteration  41: 7.116 s/op
Iteration  42: 6.969 s/op
Iteration  43: 7.124 s/op
Iteration  44: 7.125 s/op
Iteration  45: 6.984 s/op
Iteration  46: 7.104 s/op
Iteration  47: 7.008 s/op
Iteration  48: 7.115 s/op
Iteration  49: 7.140 s/op
Iteration  50: 7.102 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.091 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 12 
    [7.000, 7.050) = 4 
    [7.050, 7.100) = 8 
    [7.100, 7.150) = 21 
    [7.150, 7.200) = 2 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 1 
    [7.350, 7.400) = 1 
    [7.400, 7.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.954 s/op
     p(50.0000) =      7.102 s/op
     p(90.0000) =      7.150 s/op
     p(95.0000) =      7.357 s/op
     p(99.0000) =      7.429 s/op
     p(99.9000) =      7.429 s/op
     p(99.9900) =      7.429 s/op
     p(99.9990) =      7.429 s/op
     p(99.9999) =      7.429 s/op
    p(100.0000) =      7.429 s/op


# Run complete. Total time: 00:05:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.091 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot_12.0.2_1564717390054.json
{"wallclock_times": [355.685864539], "core_cycle_counts": [[247673579795], [238529562165], [437774056150], [336803424109]], "aperf_counts": [[246730931780], [238449435667], [437721501888], [336763837066]], "mperf_counts": [[247828429168], [238897271884], [438292413102], [336874846044]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 05:49:05: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:49:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 05:49:06: INFO] 434 executions left in scheduler queue
[2019-08-02 05:49:06: INFO] Executions until ETA known: 2884
[2019-08-02 05:49:06: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 05:49:06: INFO] Estimated completion (next execution): 2019-08-02 05:57:32 (0:08:25 from now)
[2019-08-02 05:49:06: INFO] Reboot in preparation for next execution
[2019-08-02 05:52:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 05:52:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 05:52:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 05:52:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 05:52:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 06:06:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 22.136 s/op
Iteration   2: 17.181 s/op
Iteration   3: 16.938 s/op
Iteration   4: 17.506 s/op
Iteration   5: 16.812 s/op
Iteration   6: 16.850 s/op
Iteration   7: 16.809 s/op
Iteration   8: 16.833 s/op
Iteration   9: 16.843 s/op
Iteration  10: 16.754 s/op
Iteration  11: 16.866 s/op
Iteration  12: 16.817 s/op
Iteration  13: 16.887 s/op
Iteration  14: 16.811 s/op
Iteration  15: 16.838 s/op
Iteration  16: 16.943 s/op
Iteration  17: 16.851 s/op
Iteration  18: 16.807 s/op
Iteration  19: 16.822 s/op
Iteration  20: 16.856 s/op
Iteration  21: 16.827 s/op
Iteration  22: 16.871 s/op
Iteration  23: 16.836 s/op
Iteration  24: 16.798 s/op
Iteration  25: 16.823 s/op
Iteration  26: 16.860 s/op
Iteration  27: 16.855 s/op
Iteration  28: 16.850 s/op
Iteration  29: 16.896 s/op
Iteration  30: 16.778 s/op
Iteration  31: 16.817 s/op
Iteration  32: 16.800 s/op
Iteration  33: 16.844 s/op
Iteration  34: 16.825 s/op
Iteration  35: 16.944 s/op
Iteration  36: 16.861 s/op
Iteration  37: 16.792 s/op
Iteration  38: 16.870 s/op
Iteration  39: 16.817 s/op
Iteration  40: 16.793 s/op
Iteration  41: 16.796 s/op
Iteration  42: 16.863 s/op
Iteration  43: 16.821 s/op
Iteration  44: 16.810 s/op
Iteration  45: 16.886 s/op
Iteration  46: 16.875 s/op
Iteration  47: 16.837 s/op
Iteration  48: 16.883 s/op
Iteration  49: 16.901 s/op
Iteration  50: 16.827 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.968 ?(99.9%) 0.373 s/op

  Histogram, s/op:
    [16.000, 16.500) = 0 
    [16.500, 17.000) = 47 
    [17.000, 17.500) = 1 
    [17.500, 18.000) = 1 
    [18.000, 18.500) = 0 
    [18.500, 19.000) = 0 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 0 
    [20.500, 21.000) = 0 
    [21.000, 21.500) = 0 
    [21.500, 22.000) = 0 
    [22.000, 22.500) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.754 s/op
     p(50.0000) =     16.840 s/op
     p(90.0000) =     16.942 s/op
     p(95.0000) =     17.327 s/op
     p(99.0000) =     22.136 s/op
     p(99.9000) =     22.136 s/op
     p(99.9900) =     22.136 s/op
     p(99.9990) =     22.136 s/op
     p(99.9999) =     22.136 s/op
    p(100.0000) =     22.136 s/op


# Run complete. Total time: 00:14:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.968 ? 0.373   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot_12.0.2_1564717956567.json
{"wallclock_times": [849.4685127509999], "core_cycle_counts": [[584095294054], [453228491517], [738253215640], [960819877172]], "aperf_counts": [[581981262181], [453047385367], [738178692563], [960774367215]], "mperf_counts": [[582482187942], [453639165164], [739771696046], [961091843220]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 06:06:46: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-08-02 06:06:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:06:46: INFO] 433 executions left in scheduler queue
[2019-08-02 06:06:46: INFO] Executions until ETA known: 2865
[2019-08-02 06:06:46: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:06:46: INFO] Estimated completion (next execution): 2019-08-02 06:23:26 (0:16:39 from now)
[2019-08-02 06:06:46: INFO] Reboot in preparation for next execution
[2019-08-02 06:12:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.819 s/op
Iteration   2: 1.631 s/op
Iteration   3: 1.615 s/op
Iteration   4: 1.707 s/op
Iteration   5: 1.615 s/op
Iteration   6: 1.612 s/op
Iteration   7: 1.625 s/op
Iteration   8: 1.604 s/op
Iteration   9: 1.618 s/op
Iteration  10: 1.617 s/op
Iteration  11: 1.619 s/op
Iteration  12: 1.619 s/op
Iteration  13: 1.610 s/op
Iteration  14: 1.615 s/op
Iteration  15: 1.632 s/op
Iteration  16: 1.610 s/op
Iteration  17: 1.610 s/op
Iteration  18: 1.610 s/op
Iteration  19: 1.606 s/op
Iteration  20: 1.617 s/op
Iteration  21: 1.611 s/op
Iteration  22: 1.616 s/op
Iteration  23: 1.614 s/op
Iteration  24: 1.617 s/op
Iteration  25: 1.609 s/op
Iteration  26: 1.607 s/op
Iteration  27: 1.608 s/op
Iteration  28: 1.607 s/op
Iteration  29: 1.611 s/op
Iteration  30: 1.606 s/op
Iteration  31: 1.612 s/op
Iteration  32: 1.613 s/op
Iteration  33: 1.613 s/op
Iteration  34: 1.616 s/op
Iteration  35: 1.605 s/op
Iteration  36: 1.614 s/op
Iteration  37: 1.608 s/op
Iteration  38: 1.604 s/op
Iteration  39: 1.609 s/op
Iteration  40: 1.610 s/op
Iteration  41: 1.609 s/op
Iteration  42: 1.619 s/op
Iteration  43: 1.612 s/op
Iteration  44: 1.608 s/op
Iteration  45: 1.610 s/op
Iteration  46: 1.605 s/op
Iteration  47: 1.605 s/op
Iteration  48: 1.612 s/op
Iteration  49: 1.614 s/op
Iteration  50: 1.614 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.619 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [1.600, 1.625) = 46 
    [1.625, 1.650) = 2 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.604 s/op
     p(50.0000) =      1.612 s/op
     p(90.0000) =      1.624 s/op
     p(95.0000) =      1.666 s/op
     p(99.0000) =      1.819 s/op
     p(99.9000) =      1.819 s/op
     p(99.9900) =      1.819 s/op
     p(99.9990) =      1.819 s/op
     p(99.9999) =      1.819 s/op
    p(100.0000) =      1.819 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.619 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_graalvm-ce-19.1.1_1564719062201.json
{"wallclock_times": [81.85013434300001], "core_cycle_counts": [[80920069420], [80391672772], [63646301953], [47872633228]], "aperf_counts": [[80665654739], [80361834483], [63621210605], [47849700992]], "mperf_counts": [[80690156050], [80370662696], [63628681734], [47851186714]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:12:24: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:12:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:12:24: INFO] 432 executions left in scheduler queue
[2019-08-02 06:12:24: INFO] Executions until ETA known: 2845
[2019-08-02 06:12:24: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:12:24: INFO] Estimated completion (next execution): 2019-08-02 06:16:17 (0:03:52 from now)
[2019-08-02 06:12:24: INFO] Reboot in preparation for next execution
[2019-08-02 06:18:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.645 s/op
Iteration   2: 1.591 s/op
Iteration   3: 1.651 s/op
Iteration   4: 1.539 s/op
Iteration   5: 1.537 s/op
Iteration   6: 1.537 s/op
Iteration   7: 1.534 s/op
Iteration   8: 1.536 s/op
Iteration   9: 1.534 s/op
Iteration  10: 1.535 s/op
Iteration  11: 1.537 s/op
Iteration  12: 1.535 s/op
Iteration  13: 1.533 s/op
Iteration  14: 1.535 s/op
Iteration  15: 1.534 s/op
Iteration  16: 1.538 s/op
Iteration  17: 1.532 s/op
Iteration  18: 1.533 s/op
Iteration  19: 1.534 s/op
Iteration  20: 1.534 s/op
Iteration  21: 1.536 s/op
Iteration  22: 1.536 s/op
Iteration  23: 1.534 s/op
Iteration  24: 1.533 s/op
Iteration  25: 1.533 s/op
Iteration  26: 1.533 s/op
Iteration  27: 1.536 s/op
Iteration  28: 1.532 s/op
Iteration  29: 1.534 s/op
Iteration  30: 1.533 s/op
Iteration  31: 1.535 s/op
Iteration  32: 1.534 s/op
Iteration  33: 1.533 s/op
Iteration  34: 1.534 s/op
Iteration  35: 1.533 s/op
Iteration  36: 1.532 s/op
Iteration  37: 1.535 s/op
Iteration  38: 1.536 s/op
Iteration  39: 1.535 s/op
Iteration  40: 1.534 s/op
Iteration  41: 1.537 s/op
Iteration  42: 1.534 s/op
Iteration  43: 1.534 s/op
Iteration  44: 1.536 s/op
Iteration  45: 1.537 s/op
Iteration  46: 1.535 s/op
Iteration  47: 1.534 s/op
Iteration  48: 1.533 s/op
Iteration  49: 1.535 s/op
Iteration  50: 1.534 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.540 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 0 
    [1.525, 1.538) = 45 
    [1.538, 1.550) = 2 
    [1.550, 1.563) = 0 
    [1.563, 1.575) = 0 
    [1.575, 1.588) = 0 
    [1.588, 1.600) = 1 
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 1 
    [1.650, 1.663) = 1 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.532 s/op
     p(50.0000) =      1.534 s/op
     p(90.0000) =      1.538 s/op
     p(95.0000) =      1.616 s/op
     p(99.0000) =      1.651 s/op
     p(99.9000) =      1.651 s/op
     p(99.9900) =      1.651 s/op
     p(99.9990) =      1.651 s/op
     p(99.9999) =      1.651 s/op
    p(100.0000) =      1.651 s/op


# Run complete. Total time: 00:01:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.540 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_graalvm-ce-19.1.1_1564719422817.json
{"wallclock_times": [77.858481229], "core_cycle_counts": [[36178334503], [83470012741], [58904058900], [76301895273]], "aperf_counts": [[35964864860], [83453151295], [58892190868], [76287074203]], "mperf_counts": [[35981619626], [83471262844], [58896120928], [76292147646]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:18:20: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-08-02 06:18:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:18:21: INFO] 431 executions left in scheduler queue
[2019-08-02 06:18:21: INFO] Executions until ETA known: 2814
[2019-08-02 06:18:21: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-08-02 06:18:21: INFO] Estimated completion (next execution): 2019-08-02 06:22:09 (0:03:48 from now)
[2019-08-02 06:18:21: INFO] Reboot in preparation for next execution
[2019-08-02 06:22:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 06:22:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 06:22:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 06:22:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 06:22:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 06:31:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.616 s/op
Iteration   2: 11.282 s/op
Iteration   3: 10.804 s/op
Iteration   4: 10.799 s/op
Iteration   5: 10.804 s/op
Iteration   6: 10.796 s/op
Iteration   7: 10.792 s/op
Iteration   8: 10.790 s/op
Iteration   9: 10.800 s/op
Iteration  10: 10.794 s/op
Iteration  11: 10.796 s/op
Iteration  12: 10.798 s/op
Iteration  13: 10.792 s/op
Iteration  14: 10.795 s/op
Iteration  15: 10.798 s/op
Iteration  16: 10.798 s/op
Iteration  17: 10.803 s/op
Iteration  18: 10.809 s/op
Iteration  19: 10.795 s/op
Iteration  20: 10.800 s/op
Iteration  21: 10.807 s/op
Iteration  22: 10.796 s/op
Iteration  23: 10.799 s/op
Iteration  24: 10.801 s/op
Iteration  25: 10.797 s/op
Iteration  26: 10.800 s/op
Iteration  27: 10.797 s/op
Iteration  28: 10.805 s/op
Iteration  29: 10.799 s/op
Iteration  30: 10.802 s/op
Iteration  31: 10.806 s/op
Iteration  32: 10.795 s/op
Iteration  33: 10.805 s/op
Iteration  34: 10.800 s/op
Iteration  35: 10.807 s/op
Iteration  36: 10.794 s/op
Iteration  37: 10.800 s/op
Iteration  38: 10.801 s/op
Iteration  39: 10.797 s/op
Iteration  40: 10.798 s/op
Iteration  41: 10.797 s/op
Iteration  42: 10.800 s/op
Iteration  43: 10.796 s/op
Iteration  44: 10.801 s/op
Iteration  45: 10.795 s/op
Iteration  46: 10.802 s/op
Iteration  47: 10.803 s/op
Iteration  48: 10.801 s/op
Iteration  49: 10.805 s/op
Iteration  50: 10.804 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     10.825 ?(99.9%) 0.066 s/op

  Histogram, s/op:
    [10.700, 10.800) = 26 
    [10.800, 10.900) = 22 
    [10.900, 11.000) = 0 
    [11.000, 11.100) = 0 
    [11.100, 11.200) = 0 
    [11.200, 11.300) = 1 
    [11.300, 11.400) = 0 
    [11.400, 11.500) = 0 
    [11.500, 11.600) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.790 s/op
     p(50.0000) =     10.800 s/op
     p(90.0000) =     10.807 s/op
     p(95.0000) =     11.022 s/op
     p(99.0000) =     11.616 s/op
     p(99.9000) =     11.616 s/op
     p(99.9900) =     11.616 s/op
     p(99.9990) =     11.616 s/op
     p(99.9999) =     11.616 s/op
    p(100.0000) =     11.616 s/op


# Run complete. Total time: 00:09:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  10.825 ? 0.066   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot_11.0.4_1564719768154.json
{"wallclock_times": [542.295472319], "core_cycle_counts": [[121317508561], [692641578428], [125685521653], [808303237248]], "aperf_counts": [[119622057160], [692575724279], [125617967250], [808261803751]], "mperf_counts": [[119897678112], [692727876582], [125653198800], [808303556216]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 06:31:50: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-08-02 06:31:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:31:51: INFO] 430 executions left in scheduler queue
[2019-08-02 06:31:51: INFO] Executions until ETA known: 2794
[2019-08-02 06:31:51: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:31:51: INFO] Estimated completion (next execution): 2019-08-02 06:43:23 (0:11:32 from now)
[2019-08-02 06:31:51: INFO] Reboot in preparation for next execution
[2019-08-02 06:38:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.892 s/op
Iteration   2: 1.630 s/op
Iteration   3: 1.607 s/op
Iteration   4: 1.701 s/op
Iteration   5: 1.613 s/op
Iteration   6: 1.618 s/op
Iteration   7: 1.612 s/op
Iteration   8: 1.611 s/op
Iteration   9: 1.609 s/op
Iteration  10: 1.606 s/op
Iteration  11: 1.610 s/op
Iteration  12: 1.609 s/op
Iteration  13: 1.606 s/op
Iteration  14: 1.610 s/op
Iteration  15: 1.606 s/op
Iteration  16: 1.602 s/op
Iteration  17: 1.605 s/op
Iteration  18: 1.603 s/op
Iteration  19: 1.597 s/op
Iteration  20: 1.601 s/op
Iteration  21: 1.603 s/op
Iteration  22: 1.604 s/op
Iteration  23: 1.609 s/op
Iteration  24: 1.610 s/op
Iteration  25: 1.611 s/op
Iteration  26: 1.609 s/op
Iteration  27: 1.610 s/op
Iteration  28: 1.611 s/op
Iteration  29: 1.610 s/op
Iteration  30: 1.609 s/op
Iteration  31: 1.618 s/op
Iteration  32: 1.613 s/op
Iteration  33: 1.607 s/op
Iteration  34: 1.605 s/op
Iteration  35: 1.599 s/op
Iteration  36: 1.610 s/op
Iteration  37: 1.607 s/op
Iteration  38: 1.605 s/op
Iteration  39: 1.600 s/op
Iteration  40: 1.609 s/op
Iteration  41: 1.604 s/op
Iteration  42: 1.613 s/op
Iteration  43: 1.602 s/op
Iteration  44: 1.603 s/op
Iteration  45: 1.603 s/op
Iteration  46: 1.604 s/op
Iteration  47: 1.605 s/op
Iteration  48: 1.600 s/op
Iteration  49: 1.602 s/op
Iteration  50: 1.605 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.615 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 3 
    [1.600, 1.625) = 44 
    [1.625, 1.650) = 1 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.597 s/op
     p(50.0000) =      1.607 s/op
     p(90.0000) =      1.617 s/op
     p(95.0000) =      1.662 s/op
     p(99.0000) =      1.892 s/op
     p(99.9000) =      1.892 s/op
     p(99.9900) =      1.892 s/op
     p(99.9990) =      1.892 s/op
     p(99.9999) =      1.892 s/op
    p(100.0000) =      1.892 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.615 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ce-19.1.1_1564720607168.json
{"wallclock_times": [81.655023223], "core_cycle_counts": [[63120529915], [90405637443], [37562014748], [82175520962]], "aperf_counts": [[62847099032], [90370664197], [37539731000], [82157399676]], "mperf_counts": [[62866293840], [90378566190], [37542774752], [82159121030]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:38:08: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:38:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:38:09: INFO] 429 executions left in scheduler queue
[2019-08-02 06:38:09: INFO] Executions until ETA known: 2787
[2019-08-02 06:38:09: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:38:09: INFO] Estimated completion (next execution): 2019-08-02 06:42:01 (0:03:51 from now)
[2019-08-02 06:38:09: INFO] Reboot in preparation for next execution
[2019-08-02 06:43:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.924 s/op
Iteration   2: 1.709 s/op
Iteration   3: 1.763 s/op
Iteration   4: 1.649 s/op
Iteration   5: 1.652 s/op
Iteration   6: 1.652 s/op
Iteration   7: 1.651 s/op
Iteration   8: 1.653 s/op
Iteration   9: 1.649 s/op
Iteration  10: 1.649 s/op
Iteration  11: 1.650 s/op
Iteration  12: 1.652 s/op
Iteration  13: 1.651 s/op
Iteration  14: 1.651 s/op
Iteration  15: 1.650 s/op
Iteration  16: 1.650 s/op
Iteration  17: 1.651 s/op
Iteration  18: 1.650 s/op
Iteration  19: 1.653 s/op
Iteration  20: 1.653 s/op
Iteration  21: 1.652 s/op
Iteration  22: 1.651 s/op
Iteration  23: 1.650 s/op
Iteration  24: 1.651 s/op
Iteration  25: 1.651 s/op
Iteration  26: 1.651 s/op
Iteration  27: 1.653 s/op
Iteration  28: 1.652 s/op
Iteration  29: 1.651 s/op
Iteration  30: 1.652 s/op
Iteration  31: 1.654 s/op
Iteration  32: 1.652 s/op
Iteration  33: 1.653 s/op
Iteration  34: 1.652 s/op
Iteration  35: 1.654 s/op
Iteration  36: 1.653 s/op
Iteration  37: 1.653 s/op
Iteration  38: 1.653 s/op
Iteration  39: 1.651 s/op
Iteration  40: 1.651 s/op
Iteration  41: 1.652 s/op
Iteration  42: 1.651 s/op
Iteration  43: 1.651 s/op
Iteration  44: 1.652 s/op
Iteration  45: 1.651 s/op
Iteration  46: 1.652 s/op
Iteration  47: 1.653 s/op
Iteration  48: 1.652 s/op
Iteration  49: 1.651 s/op
Iteration  50: 1.650 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.660 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 6 
    [1.650, 1.675) = 41 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 1 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 1 
    [1.925, 1.950) = 0 
    [1.950, 1.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.649 s/op
     p(50.0000) =      1.652 s/op
     p(90.0000) =      1.654 s/op
     p(95.0000) =      1.733 s/op
     p(99.0000) =      1.924 s/op
     p(99.9000) =      1.924 s/op
     p(99.9900) =      1.924 s/op
     p(99.9990) =      1.924 s/op
     p(99.9999) =      1.924 s/op
    p(100.0000) =      1.924 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.660 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ce-19.1.1_1564720943177.json
{"wallclock_times": [83.85609743199998], "core_cycle_counts": [[43521137238], [54968602707], [104650005255], [71184317532]], "aperf_counts": [[43296012898], [54948950859], [104635391159], [71170633886]], "mperf_counts": [[43307862604], [54965752208], [104643958528], [71173690758]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:43:47: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-08-02 06:43:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:43:47: INFO] 428 executions left in scheduler queue
[2019-08-02 06:43:47: INFO] Executions until ETA known: 2765
[2019-08-02 06:43:47: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 06:43:47: INFO] Estimated completion (next execution): 2019-08-02 06:47:42 (0:03:54 from now)
[2019-08-02 06:43:47: INFO] Reboot in preparation for next execution
[2019-08-02 06:54:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.794 s/op
Iteration   2: 7.573 s/op
Iteration   3: 7.701 s/op
Iteration   4: 7.611 s/op
Iteration   5: 7.608 s/op
Iteration   6: 7.611 s/op
Iteration   7: 7.610 s/op
Iteration   8: 7.621 s/op
Iteration   9: 7.617 s/op
Iteration  10: 7.603 s/op
Iteration  11: 7.609 s/op
Iteration  12: 7.613 s/op
Iteration  13: 7.603 s/op
Iteration  14: 7.608 s/op
Iteration  15: 7.614 s/op
Iteration  16: 7.586 s/op
Iteration  17: 7.626 s/op
Iteration  18: 7.646 s/op
Iteration  19: 7.643 s/op
Iteration  20: 7.622 s/op
Iteration  21: 7.631 s/op
Iteration  22: 7.642 s/op
Iteration  23: 7.627 s/op
Iteration  24: 7.634 s/op
Iteration  25: 7.627 s/op
Iteration  26: 7.647 s/op
Iteration  27: 7.631 s/op
Iteration  28: 7.639 s/op
Iteration  29: 7.629 s/op
Iteration  30: 7.635 s/op
Iteration  31: 7.634 s/op
Iteration  32: 7.623 s/op
Iteration  33: 7.647 s/op
Iteration  34: 7.636 s/op
Iteration  35: 7.630 s/op
Iteration  36: 7.637 s/op
Iteration  37: 7.636 s/op
Iteration  38: 7.615 s/op
Iteration  39: 7.607 s/op
Iteration  40: 7.637 s/op
Iteration  41: 7.631 s/op
Iteration  42: 7.639 s/op
Iteration  43: 7.634 s/op
Iteration  44: 7.657 s/op
Iteration  45: 7.627 s/op
Iteration  46: 7.637 s/op
Iteration  47: 7.611 s/op
Iteration  48: 7.636 s/op
Iteration  49: 7.632 s/op
Iteration  50: 7.625 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.630 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [7.500, 7.525) = 0 
    [7.525, 7.550) = 0 
    [7.550, 7.575) = 1 
    [7.575, 7.600) = 1 
    [7.600, 7.625) = 17 
    [7.625, 7.650) = 28 
    [7.650, 7.675) = 1 
    [7.675, 7.700) = 0 
    [7.700, 7.725) = 1 
    [7.725, 7.750) = 0 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.573 s/op
     p(50.0000) =      7.629 s/op
     p(90.0000) =      7.646 s/op
     p(95.0000) =      7.677 s/op
     p(99.0000) =      7.794 s/op
     p(99.9000) =      7.794 s/op
     p(99.9900) =      7.794 s/op
     p(99.9990) =      7.794 s/op
     p(99.9999) =      7.794 s/op
    p(100.0000) =      7.794 s/op


# Run complete. Total time: 00:06:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.630 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ee-19.1.1_1564721279828.json
{"wallclock_times": [382.37638094], "core_cycle_counts": [[126182567162], [183164135967], [544204478216], [378879798764]], "aperf_counts": [[125140183997], [183125083664], [544184404939], [378860302436]], "mperf_counts": [[125153804454], [183128560952], [544199230944], [378861892066]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 06:54:22: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 06:54:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 06:54:23: INFO] 427 executions left in scheduler queue
[2019-08-02 06:54:23: INFO] Executions until ETA known: 2759
[2019-08-02 06:54:23: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 06:54:23: INFO] Estimated completion (next execution): 2019-08-02 07:03:15 (0:08:52 from now)
[2019-08-02 06:54:23: INFO] Reboot in preparation for next execution
[2019-08-02 07:04:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.810 s/op
Iteration   2: 6.592 s/op
Iteration   3: 6.647 s/op
Iteration   4: 6.687 s/op
Iteration   5: 6.611 s/op
Iteration   6: 6.638 s/op
Iteration   7: 6.613 s/op
Iteration   8: 6.630 s/op
Iteration   9: 6.631 s/op
Iteration  10: 6.621 s/op
Iteration  11: 6.630 s/op
Iteration  12: 6.624 s/op
Iteration  13: 6.600 s/op
Iteration  14: 6.593 s/op
Iteration  15: 6.625 s/op
Iteration  16: 6.644 s/op
Iteration  17: 6.598 s/op
Iteration  18: 6.621 s/op
Iteration  19: 6.658 s/op
Iteration  20: 6.585 s/op
Iteration  21: 6.605 s/op
Iteration  22: 6.635 s/op
Iteration  23: 6.613 s/op
Iteration  24: 6.590 s/op
Iteration  25: 6.600 s/op
Iteration  26: 6.652 s/op
Iteration  27: 6.599 s/op
Iteration  28: 6.617 s/op
Iteration  29: 6.634 s/op
Iteration  30: 6.614 s/op
Iteration  31: 6.589 s/op
Iteration  32: 6.615 s/op
Iteration  33: 6.630 s/op
Iteration  34: 6.646 s/op
Iteration  35: 6.599 s/op
Iteration  36: 6.609 s/op
Iteration  37: 6.624 s/op
Iteration  38: 6.632 s/op
Iteration  39: 6.614 s/op
Iteration  40: 6.610 s/op
Iteration  41: 6.622 s/op
Iteration  42: 6.592 s/op
Iteration  43: 6.609 s/op
Iteration  44: 6.611 s/op
Iteration  45: 6.607 s/op
Iteration  46: 6.591 s/op
Iteration  47: 6.618 s/op
Iteration  48: 6.610 s/op
Iteration  49: 6.609 s/op
Iteration  50: 6.609 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.621 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [6.500, 6.525) = 0 
    [6.525, 6.550) = 0 
    [6.550, 6.575) = 0 
    [6.575, 6.600) = 10 
    [6.600, 6.625) = 25 
    [6.625, 6.650) = 11 
    [6.650, 6.675) = 2 
    [6.675, 6.700) = 1 
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 0 
    [6.775, 6.800) = 0 
    [6.800, 6.825) = 1 
    [6.825, 6.850) = 0 
    [6.850, 6.875) = 0 
    [6.875, 6.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.585 s/op
     p(50.0000) =      6.614 s/op
     p(90.0000) =      6.647 s/op
     p(95.0000) =      6.671 s/op
     p(99.0000) =      6.810 s/op
     p(99.9000) =      6.810 s/op
     p(99.9900) =      6.810 s/op
     p(99.9990) =      6.810 s/op
     p(99.9999) =      6.810 s/op
    p(100.0000) =      6.810 s/op


# Run complete. Total time: 00:05:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.621 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ee-19.1.1_1564721915627.json
{"wallclock_times": [332.005534009], "core_cycle_counts": [[385172694814], [215116438101], [290768141184], [183865461827]], "aperf_counts": [[384491607590], [215022199030], [290741263663], [183845389371]], "mperf_counts": [[384515314508], [215023057314], [290741759186], [183852961810]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 07:04:07: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:04:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:04:08: INFO] 426 executions left in scheduler queue
[2019-08-02 07:04:08: INFO] Executions until ETA known: 2757
[2019-08-02 07:04:08: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:04:08: INFO] Estimated completion (next execution): 2019-08-02 07:12:10 (0:08:02 from now)
[2019-08-02 07:04:08: INFO] Reboot in preparation for next execution
[2019-08-02 07:11:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.061 s/op
Iteration   2: 3.543 s/op
Iteration   3: 3.540 s/op
Iteration   4: 3.626 s/op
Iteration   5: 3.556 s/op
Iteration   6: 3.594 s/op
Iteration   7: 3.638 s/op
Iteration   8: 3.616 s/op
Iteration   9: 3.555 s/op
Iteration  10: 3.546 s/op
Iteration  11: 3.553 s/op
Iteration  12: 3.523 s/op
Iteration  13: 3.627 s/op
Iteration  14: 3.522 s/op
Iteration  15: 3.520 s/op
Iteration  16: 3.546 s/op
Iteration  17: 3.518 s/op
Iteration  18: 3.538 s/op
Iteration  19: 3.507 s/op
Iteration  20: 3.519 s/op
Iteration  21: 3.523 s/op
Iteration  22: 3.511 s/op
Iteration  23: 3.515 s/op
Iteration  24: 3.520 s/op
Iteration  25: 3.605 s/op
Iteration  26: 3.522 s/op
Iteration  27: 3.526 s/op
Iteration  28: 3.521 s/op
Iteration  29: 3.517 s/op
Iteration  30: 3.633 s/op
Iteration  31: 3.522 s/op
Iteration  32: 3.525 s/op
Iteration  33: 3.536 s/op
Iteration  34: 3.509 s/op
Iteration  35: 3.546 s/op
Iteration  36: 3.516 s/op
Iteration  37: 3.621 s/op
Iteration  38: 3.539 s/op
Iteration  39: 3.510 s/op
Iteration  40: 3.609 s/op
Iteration  41: 3.518 s/op
Iteration  42: 3.520 s/op
Iteration  43: 3.527 s/op
Iteration  44: 3.507 s/op
Iteration  45: 3.552 s/op
Iteration  46: 3.521 s/op
Iteration  47: 3.600 s/op
Iteration  48: 3.536 s/op
Iteration  49: 3.506 s/op
Iteration  50: 3.524 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.556 ?(99.9%) 0.041 s/op

  Histogram, s/op:
    [3.500, 3.550) = 35 
    [3.550, 3.600) = 5 
    [3.600, 3.650) = 9 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.506 s/op
     p(50.0000) =      3.527 s/op
     p(90.0000) =      3.625 s/op
     p(95.0000) =      3.635 s/op
     p(99.0000) =      4.061 s/op
     p(99.9000) =      4.061 s/op
     p(99.9900) =      4.061 s/op
     p(99.9990) =      4.061 s/op
     p(99.9999) =      4.061 s/op
    p(100.0000) =      4.061 s/op


# Run complete. Total time: 00:02:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.556 ? 0.041   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ee-19.1.1_1564722537532.json
{"wallclock_times": [178.870631435], "core_cycle_counts": [[106240729961], [240871195120], [158085229353], [120299297367]], "aperf_counts": [[105745611832], [240832620460], [158050995032], [120263823152]], "mperf_counts": [[105770764278], [240832836246], [158051409460], [120270492848]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 07:11:56: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:11:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:11:57: INFO] 425 executions left in scheduler queue
[2019-08-02 07:11:57: INFO] Executions until ETA known: 2751
[2019-08-02 07:11:57: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:11:57: INFO] Estimated completion (next execution): 2019-08-02 07:17:26 (0:05:29 from now)
[2019-08-02 07:11:57: INFO] Reboot in preparation for next execution
[2019-08-02 07:18:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.273 s/op
Iteration   2: 2.976 s/op
Iteration   3: 2.996 s/op
Iteration   4: 3.086 s/op
Iteration   5: 3.032 s/op
Iteration   6: 3.005 s/op
Iteration   7: 2.981 s/op
Iteration   8: 2.969 s/op
Iteration   9: 2.978 s/op
Iteration  10: 2.979 s/op
Iteration  11: 2.987 s/op
Iteration  12: 2.978 s/op
Iteration  13: 2.976 s/op
Iteration  14: 2.984 s/op
Iteration  15: 2.991 s/op
Iteration  16: 2.992 s/op
Iteration  17: 2.989 s/op
Iteration  18: 2.979 s/op
Iteration  19: 2.978 s/op
Iteration  20: 2.983 s/op
Iteration  21: 2.996 s/op
Iteration  22: 2.976 s/op
Iteration  23: 2.993 s/op
Iteration  24: 2.994 s/op
Iteration  25: 3.007 s/op
Iteration  26: 3.002 s/op
Iteration  27: 2.982 s/op
Iteration  28: 2.997 s/op
Iteration  29: 2.968 s/op
Iteration  30: 3.004 s/op
Iteration  31: 2.975 s/op
Iteration  32: 2.998 s/op
Iteration  33: 2.986 s/op
Iteration  34: 2.980 s/op
Iteration  35: 2.993 s/op
Iteration  36: 2.986 s/op
Iteration  37: 2.983 s/op
Iteration  38: 2.977 s/op
Iteration  39: 2.998 s/op
Iteration  40: 2.975 s/op
Iteration  41: 2.971 s/op
Iteration  42: 2.976 s/op
Iteration  43: 2.968 s/op
Iteration  44: 2.982 s/op
Iteration  45: 2.985 s/op
Iteration  46: 2.987 s/op
Iteration  47: 2.976 s/op
Iteration  48: 2.983 s/op
Iteration  49: 2.995 s/op
Iteration  50: 2.980 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      2.994 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 0 
    [2.950, 2.975) = 6 
    [2.975, 3.000) = 37 
    [3.000, 3.025) = 4 
    [3.025, 3.050) = 1 
    [3.050, 3.075) = 0 
    [3.075, 3.100) = 1 
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 0 
    [3.150, 3.175) = 0 
    [3.175, 3.200) = 0 
    [3.200, 3.225) = 0 
    [3.225, 3.250) = 0 
    [3.250, 3.275) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.968 s/op
     p(50.0000) =      2.984 s/op
     p(90.0000) =      3.005 s/op
     p(95.0000) =      3.056 s/op
     p(99.0000) =      3.273 s/op
     p(99.9000) =      3.273 s/op
     p(99.9900) =      3.273 s/op
     p(99.9990) =      3.273 s/op
     p(99.9999) =      3.273 s/op
    p(100.0000) =      3.273 s/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  2.994 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ee-19.1.1_1564722971153.json
{"wallclock_times": [150.654066509], "core_cycle_counts": [[156155779071], [101969975471], [106181273138], [128064296285]], "aperf_counts": [[155828985927], [101929654311], [106163110964], [128046373991]], "mperf_counts": [[155841783044], [101931419654], [106178799210], [128047799808]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 07:18:41: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-08-02 07:18:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:18:42: INFO] 424 executions left in scheduler queue
[2019-08-02 07:18:42: INFO] Executions until ETA known: 2740
[2019-08-02 07:18:42: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:18:42: INFO] Estimated completion (next execution): 2019-08-02 07:23:43 (0:05:00 from now)
[2019-08-02 07:18:42: INFO] Reboot in preparation for next execution
[2019-08-02 07:23:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 07:23:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 07:23:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 07:23:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 07:23:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 07:23:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 07:30:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.231 s/op
Iteration   2: 8.267 s/op
Iteration   3: 8.123 s/op
Iteration   4: 8.192 s/op
Iteration   5: 8.030 s/op
Iteration   6: 7.996 s/op
Iteration   7: 8.013 s/op
Iteration   8: 8.001 s/op
Iteration   9: 7.960 s/op
Iteration  10: 8.001 s/op
Iteration  11: 8.010 s/op
Iteration  12: 7.990 s/op
Iteration  13: 8.002 s/op
Iteration  14: 7.905 s/op
Iteration  15: 7.855 s/op
Iteration  16: 7.942 s/op
Iteration  17: 8.021 s/op
Iteration  18: 8.012 s/op
Iteration  19: 7.992 s/op
Iteration  20: 8.044 s/op
Iteration  21: 8.069 s/op
Iteration  22: 8.045 s/op
Iteration  23: 8.040 s/op
Iteration  24: 8.087 s/op
Iteration  25: 7.948 s/op
Iteration  26: 7.910 s/op
Iteration  27: 7.980 s/op
Iteration  28: 8.080 s/op
Iteration  29: 8.082 s/op
Iteration  30: 8.052 s/op
Iteration  31: 8.015 s/op
Iteration  32: 8.057 s/op
Iteration  33: 7.973 s/op
Iteration  34: 8.023 s/op
Iteration  35: 8.008 s/op
Iteration  36: 8.006 s/op
Iteration  37: 7.988 s/op
Iteration  38: 8.007 s/op
Iteration  39: 8.000 s/op
Iteration  40: 8.019 s/op
Iteration  41: 8.004 s/op
Iteration  42: 8.026 s/op
Iteration  43: 7.985 s/op
Iteration  44: 8.040 s/op
Iteration  45: 8.023 s/op
Iteration  46: 8.008 s/op
Iteration  47: 7.963 s/op
Iteration  48: 8.041 s/op
Iteration  49: 7.977 s/op
Iteration  50: 8.011 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.041 ?(99.9%) 0.091 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 16 
    [ 8.000,  8.250) = 32 
    [ 8.250,  8.500) = 1 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.855 s/op
     p(50.0000) =      8.011 s/op
     p(90.0000) =      8.087 s/op
     p(95.0000) =      8.226 s/op
     p(99.0000) =      9.231 s/op
     p(99.9000) =      9.231 s/op
     p(99.9900) =      9.231 s/op
     p(99.9990) =      9.231 s/op
     p(99.9999) =      9.231 s/op
    p(100.0000) =      9.231 s/op


# Run complete. Total time: 00:06:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  8.041 ? 0.091   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_11.0.4_1564723422688.json
{"wallclock_times": [403.88759690399996], "core_cycle_counts": [[321216222146], [444544227858], [317631576993], [375318482605]], "aperf_counts": [[320050821918], [444412473472], [317489980929], [375188221499]], "mperf_counts": [[320056846560], [444412454144], [317489953246], [375188565018]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 07:30:26: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:30:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:30:27: INFO] 423 executions left in scheduler queue
[2019-08-02 07:30:27: INFO] Executions until ETA known: 2721
[2019-08-02 07:30:27: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:30:27: INFO] Estimated completion (next execution): 2019-08-02 07:39:41 (0:09:14 from now)
[2019-08-02 07:30:27: INFO] Reboot in preparation for next execution
[2019-08-02 07:34:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 07:34:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 07:34:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 07:34:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 07:34:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 07:34:41: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 07:44:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.506 s/op
Iteration   2: 12.176 s/op
Iteration   3: 12.329 s/op
Iteration   4: 12.317 s/op
Iteration   5: 12.239 s/op
Iteration   6: 12.229 s/op
Iteration   7: 12.278 s/op
Iteration   8: 12.170 s/op
Iteration   9: 12.182 s/op
Iteration  10: 12.195 s/op
Iteration  11: 12.182 s/op
Iteration  12: 12.212 s/op
Iteration  13: 12.205 s/op
Iteration  14: 12.208 s/op
Iteration  15: 12.218 s/op
Iteration  16: 12.154 s/op
Iteration  17: 12.187 s/op
Iteration  18: 12.178 s/op
Iteration  19: 12.161 s/op
Iteration  20: 12.171 s/op
Iteration  21: 12.162 s/op
Iteration  22: 12.195 s/op
Iteration  23: 12.175 s/op
Iteration  24: 12.131 s/op
Iteration  25: 12.188 s/op
Iteration  26: 12.155 s/op
Iteration  27: 12.147 s/op
Iteration  28: 12.115 s/op
Iteration  29: 12.183 s/op
Iteration  30: 12.137 s/op
Iteration  31: 12.138 s/op
Iteration  32: 12.184 s/op
Iteration  33: 12.111 s/op
Iteration  34: 12.180 s/op
Iteration  35: 12.106 s/op
Iteration  36: 12.170 s/op
Iteration  37: 12.170 s/op
Iteration  38: 12.183 s/op
Iteration  39: 12.190 s/op
Iteration  40: 12.186 s/op
Iteration  41: 12.207 s/op
Iteration  42: 12.220 s/op
Iteration  43: 12.227 s/op
Iteration  44: 12.140 s/op
Iteration  45: 12.172 s/op
Iteration  46: 12.159 s/op
Iteration  47: 12.198 s/op
Iteration  48: 12.193 s/op
Iteration  49: 12.172 s/op
Iteration  50: 12.190 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.212 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [12.000, 12.125) = 3 
    [12.125, 12.250) = 43 
    [12.250, 12.375) = 3 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 
    [12.875, 13.000) = 0 
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 0 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 1 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.106 s/op
     p(50.0000) =     12.182 s/op
     p(90.0000) =     12.238 s/op
     p(95.0000) =     12.322 s/op
     p(99.0000) =     13.506 s/op
     p(99.9000) =     13.506 s/op
     p(99.9900) =     13.506 s/op
     p(99.9990) =     13.506 s/op
     p(99.9999) =     13.506 s/op
    p(100.0000) =     13.506 s/op


# Run complete. Total time: 00:10:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.212 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_11.0.4_1564724081325.json
{"wallclock_times": [612.161882551], "core_cycle_counts": [[689790158598], [341034647671], [459918768393], [569880009534]], "aperf_counts": [[688364246278], [340834816562], [459733434565], [569772181993]], "mperf_counts": [[688371352704], [340835747416], [459733381040], [569772162688]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 07:44:53: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:44:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:44:54: INFO] 422 executions left in scheduler queue
[2019-08-02 07:44:54: INFO] Executions until ETA known: 2715
[2019-08-02 07:44:54: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:44:54: INFO] Estimated completion (next execution): 2019-08-02 07:57:37 (0:12:42 from now)
[2019-08-02 07:44:54: INFO] Reboot in preparation for next execution
[2019-08-02 07:50:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 07:50:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 07:50:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 07:50:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 07:50:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 07:50:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 07:57:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.579 s/op
Iteration   2: 8.528 s/op
Iteration   3: 8.304 s/op
Iteration   4: 8.017 s/op
Iteration   5: 8.068 s/op
Iteration   6: 8.034 s/op
Iteration   7: 7.965 s/op
Iteration   8: 7.979 s/op
Iteration   9: 7.849 s/op
Iteration  10: 7.914 s/op
Iteration  11: 8.041 s/op
Iteration  12: 7.973 s/op
Iteration  13: 7.962 s/op
Iteration  14: 7.895 s/op
Iteration  15: 7.987 s/op
Iteration  16: 8.028 s/op
Iteration  17: 7.868 s/op
Iteration  18: 8.044 s/op
Iteration  19: 7.960 s/op
Iteration  20: 7.918 s/op
Iteration  21: 7.889 s/op
Iteration  22: 7.942 s/op
Iteration  23: 8.063 s/op
Iteration  24: 8.088 s/op
Iteration  25: 8.077 s/op
Iteration  26: 8.062 s/op
Iteration  27: 7.993 s/op
Iteration  28: 7.903 s/op
Iteration  29: 7.998 s/op
Iteration  30: 7.970 s/op
Iteration  31: 7.946 s/op
Iteration  32: 8.010 s/op
Iteration  33: 7.905 s/op
Iteration  34: 7.902 s/op
Iteration  35: 7.986 s/op
Iteration  36: 8.080 s/op
Iteration  37: 7.999 s/op
Iteration  38: 7.950 s/op
Iteration  39: 7.995 s/op
Iteration  40: 7.873 s/op
Iteration  41: 7.961 s/op
Iteration  42: 8.139 s/op
Iteration  43: 7.923 s/op
Iteration  44: 8.002 s/op
Iteration  45: 7.963 s/op
Iteration  46: 7.938 s/op
Iteration  47: 7.928 s/op
Iteration  48: 7.924 s/op
Iteration  49: 7.919 s/op
Iteration  50: 7.844 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.022 ?(99.9%) 0.124 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 33 
    [ 8.000,  8.250) = 14 
    [ 8.250,  8.500) = 1 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.844 s/op
     p(50.0000) =      7.972 s/op
     p(90.0000) =      8.087 s/op
     p(95.0000) =      8.405 s/op
     p(99.0000) =      9.579 s/op
     p(99.9000) =      9.579 s/op
     p(99.9900) =      9.579 s/op
     p(99.9990) =      9.579 s/op
     p(99.9999) =      9.579 s/op
    p(100.0000) =      9.579 s/op


# Run complete. Total time: 00:06:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.022 ? 0.124   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_11.0.4_1564725051135.json
{"wallclock_times": [402.843902875], "core_cycle_counts": [[398534707558], [132240476136], [507714944003], [327051664496]], "aperf_counts": [[397533234340], [132085200685], [507591066083], [326954205418]], "mperf_counts": [[397539432090], [132085216680], [507594171026], [326955089918]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 07:57:34: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:57:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 07:57:34: INFO] 421 executions left in scheduler queue
[2019-08-02 07:57:34: INFO] Executions until ETA known: 2713
[2019-08-02 07:57:34: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 07:57:34: INFO] Estimated completion (next execution): 2019-08-02 08:06:48 (0:09:13 from now)
[2019-08-02 07:57:34: INFO] Reboot in preparation for next execution
[2019-08-02 08:02:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 08:02:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 08:02:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 08:02:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 08:02:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 08:02:13: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 08:14:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.696 s/op
Iteration   2: 15.645 s/op
Iteration   3: 14.798 s/op
Iteration   4: 15.212 s/op
Iteration   5: 14.765 s/op
Iteration   6: 14.633 s/op
Iteration   7: 14.649 s/op
Iteration   8: 14.694 s/op
Iteration   9: 15.267 s/op
Iteration  10: 14.760 s/op
Iteration  11: 14.852 s/op
Iteration  12: 14.864 s/op
Iteration  13: 14.712 s/op
Iteration  14: 15.290 s/op
Iteration  15: 14.827 s/op
Iteration  16: 14.913 s/op
Iteration  17: 15.325 s/op
Iteration  18: 15.283 s/op
Iteration  19: 14.840 s/op
Iteration  20: 15.365 s/op
Iteration  21: 15.190 s/op
Iteration  22: 14.798 s/op
Iteration  23: 15.314 s/op
Iteration  24: 14.797 s/op
Iteration  25: 15.274 s/op
Iteration  26: 14.709 s/op
Iteration  27: 14.768 s/op
Iteration  28: 14.770 s/op
Iteration  29: 14.853 s/op
Iteration  30: 15.227 s/op
Iteration  31: 14.746 s/op
Iteration  32: 14.775 s/op
Iteration  33: 14.819 s/op
Iteration  34: 14.793 s/op
Iteration  35: 14.755 s/op
Iteration  36: 14.793 s/op
Iteration  37: 14.838 s/op
Iteration  38: 14.846 s/op
Iteration  39: 15.363 s/op
Iteration  40: 14.774 s/op
Iteration  41: 14.857 s/op
Iteration  42: 15.229 s/op
Iteration  43: 14.815 s/op
Iteration  44: 14.859 s/op
Iteration  45: 15.232 s/op
Iteration  46: 14.759 s/op
Iteration  47: 14.789 s/op
Iteration  48: 14.774 s/op
Iteration  49: 15.296 s/op
Iteration  50: 14.680 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.978 ?(99.9%) 0.174 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 7 
    [14.750, 15.000) = 27 
    [15.000, 15.250) = 5 
    [15.250, 15.500) = 9 
    [15.500, 15.750) = 1 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.633 s/op
     p(50.0000) =     14.833 s/op
     p(90.0000) =     15.324 s/op
     p(95.0000) =     15.491 s/op
     p(99.0000) =     16.696 s/op
     p(99.9000) =     16.696 s/op
     p(99.9900) =     16.696 s/op
     p(99.9990) =     16.696 s/op
     p(99.9999) =     16.696 s/op
    p(100.0000) =     16.696 s/op


# Run complete. Total time: 00:12:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.978 ? 0.174   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_11.0.4_1564725733046.json
{"wallclock_times": [750.634702005], "core_cycle_counts": [[1022003134575], [561544129614], [449945370154], [460967831996]], "aperf_counts": [[1020476366699], [561272059091], [449700769368], [460774870011]], "mperf_counts": [[1020476722168], [561273904394], [449700683656], [460774808316]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 08:14:43: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-08-02 08:14:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:14:44: INFO] 420 executions left in scheduler queue
[2019-08-02 08:14:44: INFO] Executions until ETA known: 2682
[2019-08-02 08:14:44: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:14:44: INFO] Estimated completion (next execution): 2019-08-02 08:29:45 (0:15:01 from now)
[2019-08-02 08:14:44: INFO] Reboot in preparation for next execution
[2019-08-02 08:21:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.253 s/op
Iteration   2: 2.950 s/op
Iteration   3: 2.721 s/op
Iteration   4: 2.703 s/op
Iteration   5: 2.729 s/op
Iteration   6: 2.693 s/op
Iteration   7: 2.715 s/op
Iteration   8: 2.697 s/op
Iteration   9: 2.700 s/op
Iteration  10: 2.711 s/op
Iteration  11: 2.693 s/op
Iteration  12: 2.707 s/op
Iteration  13: 2.708 s/op
Iteration  14: 2.698 s/op
Iteration  15: 2.701 s/op
Iteration  16: 2.703 s/op
Iteration  17: 2.702 s/op
Iteration  18: 2.701 s/op
Iteration  19: 2.702 s/op
Iteration  20: 2.697 s/op
Iteration  21: 2.723 s/op
Iteration  22: 2.699 s/op
Iteration  23: 2.698 s/op
Iteration  24: 2.697 s/op
Iteration  25: 2.720 s/op
Iteration  26: 2.697 s/op
Iteration  27: 2.703 s/op
Iteration  28: 2.698 s/op
Iteration  29: 2.698 s/op
Iteration  30: 2.703 s/op
Iteration  31: 2.699 s/op
Iteration  32: 2.709 s/op
Iteration  33: 2.700 s/op
Iteration  34: 2.714 s/op
Iteration  35: 2.697 s/op
Iteration  36: 2.707 s/op
Iteration  37: 2.695 s/op
Iteration  38: 2.697 s/op
Iteration  39: 2.702 s/op
Iteration  40: 2.696 s/op
Iteration  41: 2.709 s/op
Iteration  42: 2.698 s/op
Iteration  43: 2.734 s/op
Iteration  44: 2.696 s/op
Iteration  45: 2.707 s/op
Iteration  46: 2.699 s/op
Iteration  47: 2.701 s/op
Iteration  48: 2.705 s/op
Iteration  49: 2.694 s/op
Iteration  50: 2.711 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      2.720 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 21 
    [2.700, 2.750) = 27 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 1 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.693 s/op
     p(50.0000) =      2.702 s/op
     p(90.0000) =      2.723 s/op
     p(95.0000) =      2.831 s/op
     p(99.0000) =      3.253 s/op
     p(99.9000) =      3.253 s/op
     p(99.9900) =      3.253 s/op
     p(99.9990) =      3.253 s/op
     p(99.9999) =      3.253 s/op
    p(100.0000) =      3.253 s/op


# Run complete. Total time: 00:02:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.720 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_graalvm-ee-19.1.1_1564726738608.json
{"wallclock_times": [136.869659129], "core_cycle_counts": [[110438219300], [84580921658], [125756798491], [123893838317]], "aperf_counts": [[110096259234], [84533160750], [125726856695], [123863553433]], "mperf_counts": [[110126306206], [84534305032], [125738866552], [123866010960]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 08:21:15: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:21:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:21:16: INFO] 419 executions left in scheduler queue
[2019-08-02 08:21:16: INFO] Executions until ETA known: 2656
[2019-08-02 08:21:16: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-08-02 08:21:16: INFO] Estimated completion (next execution): 2019-08-02 08:26:03 (0:04:47 from now)
[2019-08-02 08:21:16: INFO] Reboot in preparation for next execution
[2019-08-02 08:25:30: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 08:25:30: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 08:25:30: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 08:25:30: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 08:25:30: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 08:37:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.058 s/op
Iteration   2: 13.679 s/op
Iteration   3: 13.809 s/op
Iteration   4: 13.989 s/op
Iteration   5: 13.798 s/op
Iteration   6: 13.863 s/op
Iteration   7: 13.811 s/op
Iteration   8: 13.831 s/op
Iteration   9: 13.645 s/op
Iteration  10: 13.771 s/op
Iteration  11: 13.721 s/op
Iteration  12: 13.715 s/op
Iteration  13: 13.819 s/op
Iteration  14: 13.815 s/op
Iteration  15: 13.845 s/op
Iteration  16: 13.671 s/op
Iteration  17: 13.733 s/op
Iteration  18: 13.843 s/op
Iteration  19: 13.830 s/op
Iteration  20: 13.928 s/op
Iteration  21: 13.891 s/op
Iteration  22: 13.981 s/op
Iteration  23: 13.855 s/op
Iteration  24: 13.861 s/op
Iteration  25: 13.930 s/op
Iteration  26: 13.985 s/op
Iteration  27: 13.876 s/op
Iteration  28: 13.929 s/op
Iteration  29: 13.865 s/op
Iteration  30: 13.833 s/op
Iteration  31: 13.940 s/op
Iteration  32: 13.956 s/op
Iteration  33: 13.849 s/op
Iteration  34: 14.007 s/op
Iteration  35: 13.783 s/op
Iteration  36: 13.947 s/op
Iteration  37: 13.623 s/op
Iteration  38: 13.896 s/op
Iteration  39: 13.977 s/op
Iteration  40: 13.782 s/op
Iteration  41: 13.920 s/op
Iteration  42: 13.919 s/op
Iteration  43: 13.894 s/op
Iteration  44: 13.820 s/op
Iteration  45: 13.957 s/op
Iteration  46: 13.976 s/op
Iteration  47: 13.872 s/op
Iteration  48: 13.846 s/op
Iteration  49: 14.007 s/op
Iteration  50: 13.821 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     13.839 ?(99.9%) 0.073 s/op

  Histogram, s/op:
    [13.000, 13.100) = 1 
    [13.100, 13.200) = 0 
    [13.200, 13.300) = 0 
    [13.300, 13.400) = 0 
    [13.400, 13.500) = 0 
    [13.500, 13.600) = 0 
    [13.600, 13.700) = 4 
    [13.700, 13.800) = 7 
    [13.800, 13.900) = 22 
    [13.900, 14.000) = 14 
    [14.000, 14.100) = 2 

  Percentiles, s/op:
      p(0.0000) =     13.058 s/op
     p(50.0000) =     13.852 s/op
     p(90.0000) =     13.981 s/op
     p(95.0000) =     13.997 s/op
     p(99.0000) =     14.007 s/op
     p(99.9000) =     14.007 s/op
     p(99.9900) =     14.007 s/op
     p(99.9990) =     14.007 s/op
     p(99.9999) =     14.007 s/op
    p(100.0000) =     14.007 s/op


# Run complete. Total time: 00:11:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.839 ? 0.073   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_12.0.2_1564727130060.json
{"wallclock_times": [693.026812089], "core_cycle_counts": [[417685142918], [375647756031], [721421709290], [756509321968]], "aperf_counts": [[415447036897], [375319286045], [720925696339], [755959359279]], "mperf_counts": [[450696220104], [405345168228], [787703451620], [826338580156]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 08:37:03: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-08-02 08:37:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:37:04: INFO] 418 executions left in scheduler queue
[2019-08-02 08:37:04: INFO] Executions until ETA known: 2626
[2019-08-02 08:37:04: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:37:04: INFO] Estimated completion (next execution): 2019-08-02 08:51:07 (0:14:03 from now)
[2019-08-02 08:37:04: INFO] Reboot in preparation for next execution
[2019-08-02 08:56:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.354 s/op
Iteration   2: 0.850 s/op
Iteration   3: 0.832 s/op
Iteration   4: 0.918 s/op
Iteration   5: 0.829 s/op
Iteration   6: 0.838 s/op
Iteration   7: 0.828 s/op
Iteration   8: 0.830 s/op
Iteration   9: 0.833 s/op
Iteration  10: 0.831 s/op
Iteration  11: 0.826 s/op
Iteration  12: 0.834 s/op
Iteration  13: 0.828 s/op
Iteration  14: 0.831 s/op
Iteration  15: 0.829 s/op
Iteration  16: 0.830 s/op
Iteration  17: 0.828 s/op
Iteration  18: 0.835 s/op
Iteration  19: 0.825 s/op
Iteration  20: 0.829 s/op
Iteration  21: 0.829 s/op
Iteration  22: 0.831 s/op
Iteration  23: 0.832 s/op
Iteration  24: 0.830 s/op
Iteration  25: 0.827 s/op
Iteration  26: 0.831 s/op
Iteration  27: 0.824 s/op
Iteration  28: 0.827 s/op
Iteration  29: 0.829 s/op
Iteration  30: 0.835 s/op
Iteration  31: 0.831 s/op
Iteration  32: 0.833 s/op
Iteration  33: 0.826 s/op
Iteration  34: 0.827 s/op
Iteration  35: 0.832 s/op
Iteration  36: 0.826 s/op
Iteration  37: 0.828 s/op
Iteration  38: 0.831 s/op
Iteration  39: 0.826 s/op
Iteration  40: 0.833 s/op
Iteration  41: 0.829 s/op
Iteration  42: 0.831 s/op
Iteration  43: 0.830 s/op
Iteration  44: 0.820 s/op
Iteration  45: 0.828 s/op
Iteration  46: 0.825 s/op
Iteration  47: 0.822 s/op
Iteration  48: 0.825 s/op
Iteration  49: 0.827 s/op
Iteration  50: 0.826 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      0.842 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [0.800, 0.850) = 48 
    [0.850, 0.900) = 0 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      0.820 s/op
     p(50.0000) =      0.829 s/op
     p(90.0000) =      0.835 s/op
     p(95.0000) =      0.880 s/op
     p(99.0000) =      1.354 s/op
     p(99.9000) =      1.354 s/op
     p(99.9900) =      1.354 s/op
     p(99.9990) =      1.354 s/op
     p(99.9999) =      1.354 s/op
    p(100.0000) =      1.354 s/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.842 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ee-19.1.1_1564728947098.json
{"wallclock_times": [43.02063011899986], "core_cycle_counts": [[42266037010], [16621180697], [35836672505], [54845483679]], "aperf_counts": [[42118688941], [16590657375], [35815888923], [54826660918]], "mperf_counts": [[42144104246], [16594191908], [35816720718], [54838669372]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 08:56:30: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:56:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 08:56:31: INFO] 417 executions left in scheduler queue
[2019-08-02 08:56:31: INFO] Executions until ETA known: 2616
[2019-08-02 08:56:31: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 08:56:31: INFO] Estimated completion (next execution): 2019-08-02 08:59:44 (0:03:13 from now)
[2019-08-02 08:56:31: INFO] Reboot in preparation for next execution
[2019-08-02 09:07:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.743 s/op
Iteration   2: 1.456 s/op
Iteration   3: 1.535 s/op
Iteration   4: 1.419 s/op
Iteration   5: 1.368 s/op
Iteration   6: 1.401 s/op
Iteration   7: 1.377 s/op
Iteration   8: 1.403 s/op
Iteration   9: 1.433 s/op
Iteration  10: 1.377 s/op
Iteration  11: 1.365 s/op
Iteration  12: 1.400 s/op
Iteration  13: 1.430 s/op
Iteration  14: 1.449 s/op
Iteration  15: 1.432 s/op
Iteration  16: 1.401 s/op
Iteration  17: 1.368 s/op
Iteration  18: 1.405 s/op
Iteration  19: 1.395 s/op
Iteration  20: 1.391 s/op
Iteration  21: 1.446 s/op
Iteration  22: 1.401 s/op
Iteration  23: 1.405 s/op
Iteration  24: 1.398 s/op
Iteration  25: 1.400 s/op
Iteration  26: 1.424 s/op
Iteration  27: 1.381 s/op
Iteration  28: 1.379 s/op
Iteration  29: 1.366 s/op
Iteration  30: 1.398 s/op
Iteration  31: 1.374 s/op
Iteration  32: 1.393 s/op
Iteration  33: 1.401 s/op
Iteration  34: 1.383 s/op
Iteration  35: 1.378 s/op
Iteration  36: 1.411 s/op
Iteration  37: 1.376 s/op
Iteration  38: 1.408 s/op
Iteration  39: 1.369 s/op
Iteration  40: 1.441 s/op
Iteration  41: 1.454 s/op
Iteration  42: 1.385 s/op
Iteration  43: 1.410 s/op
Iteration  44: 1.406 s/op
Iteration  45: 1.413 s/op
Iteration  46: 1.404 s/op
Iteration  47: 1.432 s/op
Iteration  48: 1.379 s/op
Iteration  49: 1.377 s/op
Iteration  50: 1.407 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.411 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 22 
    [1.400, 1.450) = 24 
    [1.450, 1.500) = 2 
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.365 s/op
     p(50.0000) =      1.401 s/op
     p(90.0000) =      1.449 s/op
     p(95.0000) =      1.491 s/op
     p(99.0000) =      1.743 s/op
     p(99.9000) =      1.743 s/op
     p(99.9900) =      1.743 s/op
     p(99.9990) =      1.743 s/op
     p(99.9999) =      1.743 s/op
    p(100.0000) =      1.743 s/op


# Run complete. Total time: 00:01:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.411 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ee-19.1.1_1564729606894.json
{"wallclock_times": [71.4162069360001], "core_cycle_counts": [[57403372198], [68719577072], [74461816035], [33770879623]], "aperf_counts": [[57228400920], [68698347487], [74446058042], [33756702744]], "mperf_counts": [[57259073772], [68713564730], [74447145536], [33757959408]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 09:07:58: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-08-02 09:07:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 09:07:59: INFO] 416 executions left in scheduler queue
[2019-08-02 09:07:59: INFO] Executions until ETA known: 2604
[2019-08-02 09:07:59: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-08-02 09:07:59: INFO] Estimated completion (next execution): 2019-08-02 09:11:40 (0:03:41 from now)
[2019-08-02 09:07:59: INFO] Reboot in preparation for next execution
[2019-08-02 09:23:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.287 s/op
Iteration   2: 2.370 s/op
Iteration   3: 2.861 s/op
Iteration   4: 2.986 s/op
Iteration   5: 3.012 s/op
Iteration   6: 3.009 s/op
Iteration   7: 3.013 s/op
Iteration   8: 3.020 s/op
Iteration   9: 3.014 s/op
Iteration  10: 3.014 s/op
Iteration  11: 3.018 s/op
Iteration  12: 3.003 s/op
Iteration  13: 3.019 s/op
Iteration  14: 3.021 s/op
Iteration  15: 3.010 s/op
Iteration  16: 3.012 s/op
Iteration  17: 3.036 s/op
Iteration  18: 2.999 s/op
Iteration  19: 3.033 s/op
Iteration  20: 3.017 s/op
Iteration  21: 3.010 s/op
Iteration  22: 3.014 s/op
Iteration  23: 3.012 s/op
Iteration  24: 2.974 s/op
Iteration  25: 2.991 s/op
Iteration  26: 3.005 s/op
Iteration  27: 3.016 s/op
Iteration  28: 3.019 s/op
Iteration  29: 3.012 s/op
Iteration  30: 3.014 s/op
Iteration  31: 3.012 s/op
Iteration  32: 3.013 s/op
Iteration  33: 3.017 s/op
Iteration  34: 3.013 s/op
Iteration  35: 2.996 s/op
Iteration  36: 3.015 s/op
Iteration  37: 3.010 s/op
Iteration  38: 3.016 s/op
Iteration  39: 3.021 s/op
Iteration  40: 3.015 s/op
Iteration  41: 3.020 s/op
Iteration  42: 3.012 s/op
Iteration  43: 3.020 s/op
Iteration  44: 3.005 s/op
Iteration  45: 3.018 s/op
Iteration  46: 3.027 s/op
Iteration  47: 3.008 s/op
Iteration  48: 3.016 s/op
Iteration  49: 3.001 s/op
Iteration  50: 3.012 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      3.002 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 
    [2.900, 3.000) = 5 
    [3.000, 3.100) = 42 
    [3.100, 3.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.370 s/op
     p(50.0000) =      3.013 s/op
     p(90.0000) =      3.021 s/op
     p(95.0000) =      3.034 s/op
     p(99.0000) =      3.287 s/op
     p(99.9000) =      3.287 s/op
     p(99.9900) =      3.287 s/op
     p(99.9990) =      3.287 s/op
     p(99.9999) =      3.287 s/op
    p(100.0000) =      3.287 s/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  3.002 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_graalvm-ee-19.1.1_1564730442682.json
{"wallclock_times": [150.95487441600005], "core_cycle_counts": [[113114476036], [106853185929], [132963868924], [137803467906]], "aperf_counts": [[112732598215], [106805878724], [132934093216], [137777683353]], "mperf_counts": [[112750471626], [106806963140], [132934613212], [137783716026]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 09:23:13: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-08-02 09:23:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 09:23:14: INFO] 415 executions left in scheduler queue
[2019-08-02 09:23:14: INFO] Executions until ETA known: 2568
[2019-08-02 09:23:14: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-08-02 09:23:14: INFO] Estimated completion (next execution): 2019-08-02 09:28:15 (0:05:01 from now)
[2019-08-02 09:23:14: INFO] Reboot in preparation for next execution
[2019-08-02 09:49:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.062 s/op
Iteration   2: 11.874 s/op
Iteration   3: 11.921 s/op
Iteration   4: 11.610 s/op
Iteration   5: 11.813 s/op
Iteration   6: 11.743 s/op
Iteration   7: 11.871 s/op
Iteration   8: 11.725 s/op
Iteration   9: 11.770 s/op
Iteration  10: 11.901 s/op
Iteration  11: 11.700 s/op
Iteration  12: 12.372 s/op
Iteration  13: 11.750 s/op
Iteration  14: 11.827 s/op
Iteration  15: 11.697 s/op
Iteration  16: 11.721 s/op
Iteration  17: 11.806 s/op
Iteration  18: 11.661 s/op
Iteration  19: 11.777 s/op
Iteration  20: 11.743 s/op
Iteration  21: 11.839 s/op
Iteration  22: 11.714 s/op
Iteration  23: 12.302 s/op
Iteration  24: 11.977 s/op
Iteration  25: 11.601 s/op
Iteration  26: 11.684 s/op
Iteration  27: 11.749 s/op
Iteration  28: 11.811 s/op
Iteration  29: 11.677 s/op
Iteration  30: 11.731 s/op
Iteration  31: 11.758 s/op
Iteration  32: 11.880 s/op
Iteration  33: 11.663 s/op
Iteration  34: 12.285 s/op
Iteration  35: 11.969 s/op
Iteration  36: 11.632 s/op
Iteration  37: 11.721 s/op
Iteration  38: 11.740 s/op
Iteration  39: 11.808 s/op
Iteration  40: 11.657 s/op
Iteration  41: 11.734 s/op
Iteration  42: 11.783 s/op
Iteration  43: 11.880 s/op
Iteration  44: 11.695 s/op
Iteration  45: 12.335 s/op
Iteration  46: 11.833 s/op
Iteration  47: 11.640 s/op
Iteration  48: 11.676 s/op
Iteration  49: 11.693 s/op
Iteration  50: 11.837 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.813 ?(99.9%) 0.090 s/op

  Histogram, s/op:
    [11.600, 11.650) = 4 
    [11.650, 11.700) = 10 
    [11.700, 11.750) = 10 
    [11.750, 11.800) = 5 
    [11.800, 11.850) = 8 
    [11.850, 11.900) = 4 
    [11.900, 11.950) = 2 
    [11.950, 12.000) = 2 
    [12.000, 12.050) = 0 
    [12.050, 12.100) = 1 
    [12.100, 12.150) = 0 
    [12.150, 12.200) = 0 
    [12.200, 12.250) = 0 
    [12.250, 12.300) = 1 
    [12.300, 12.350) = 2 

  Percentiles, s/op:
      p(0.0000) =     11.601 s/op
     p(50.0000) =     11.754 s/op
     p(90.0000) =     12.054 s/op
     p(95.0000) =     12.317 s/op
     p(99.0000) =     12.372 s/op
     p(99.9000) =     12.372 s/op
     p(99.9900) =     12.372 s/op
     p(99.9990) =     12.372 s/op
     p(99.9999) =     12.372 s/op
    p(100.0000) =     12.372 s/op


# Run complete. Total time: 00:09:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.813 ? 0.090   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot-8u222-b10_1564731585976.json
{"wallclock_times": [591.604944922], "core_cycle_counts": [[703918824096], [506191009817], [531711364830], [452432715493]], "aperf_counts": [[702487450407], [505989824986], [531620131524], [452348003227]], "mperf_counts": [[702493232526], [505999891824], [531632940392], [452348107176]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 09:49:37: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-08-02 09:49:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 09:49:38: INFO] 414 executions left in scheduler queue
[2019-08-02 09:49:38: INFO] Executions until ETA known: 2549
[2019-08-02 09:49:38: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 09:49:38: INFO] Estimated completion (next execution): 2019-08-02 10:02:00 (0:12:21 from now)
[2019-08-02 09:49:38: INFO] Reboot in preparation for next execution
[2019-08-02 09:56:46: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 09:56:46: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 09:56:46: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 09:56:46: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 09:56:46: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 09:56:46: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:03:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.199 s/op
Iteration   2: 7.927 s/op
Iteration   3: 7.923 s/op
Iteration   4: 7.627 s/op
Iteration   5: 7.675 s/op
Iteration   6: 7.533 s/op
Iteration   7: 7.600 s/op
Iteration   8: 7.620 s/op
Iteration   9: 7.598 s/op
Iteration  10: 7.637 s/op
Iteration  11: 7.554 s/op
Iteration  12: 7.578 s/op
Iteration  13: 7.657 s/op
Iteration  14: 7.598 s/op
Iteration  15: 7.602 s/op
Iteration  16: 7.594 s/op
Iteration  17: 7.633 s/op
Iteration  18: 7.520 s/op
Iteration  19: 7.574 s/op
Iteration  20: 7.629 s/op
Iteration  21: 7.502 s/op
Iteration  22: 7.583 s/op
Iteration  23: 7.501 s/op
Iteration  24: 7.605 s/op
Iteration  25: 7.557 s/op
Iteration  26: 7.533 s/op
Iteration  27: 7.542 s/op
Iteration  28: 7.550 s/op
Iteration  29: 7.531 s/op
Iteration  30: 7.552 s/op
Iteration  31: 7.500 s/op
Iteration  32: 7.537 s/op
Iteration  33: 7.569 s/op
Iteration  34: 7.553 s/op
Iteration  35: 7.555 s/op
Iteration  36: 7.547 s/op
Iteration  37: 7.502 s/op
Iteration  38: 7.504 s/op
Iteration  39: 7.586 s/op
Iteration  40: 7.578 s/op
Iteration  41: 7.548 s/op
Iteration  42: 7.632 s/op
Iteration  43: 7.525 s/op
Iteration  44: 7.507 s/op
Iteration  45: 7.524 s/op
Iteration  46: 7.539 s/op
Iteration  47: 7.502 s/op
Iteration  48: 7.525 s/op
Iteration  49: 7.561 s/op
Iteration  50: 7.637 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.613 ?(99.9%) 0.121 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 47 
    [ 7.750,  8.000) = 2 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.500 s/op
     p(50.0000) =      7.559 s/op
     p(90.0000) =      7.655 s/op
     p(95.0000) =      7.925 s/op
     p(99.0000) =      9.199 s/op
     p(99.9000) =      9.199 s/op
     p(99.9900) =      9.199 s/op
     p(99.9990) =      9.199 s/op
     p(99.9999) =      9.199 s/op
    p(100.0000) =      9.199 s/op


# Run complete. Total time: 00:06:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.613 ? 0.121   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_11.0.4_1564732606552.json
{"wallclock_times": [382.296164844], "core_cycle_counts": [[301716924956], [336924815105], [308018056761], [325266108031]], "aperf_counts": [[300655263683], [336829307239], [307898104475], [325191386194]], "mperf_counts": [[300657315172], [336829286776], [307898088360], [325197306192]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:03:08: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:03:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:03:09: INFO] 413 executions left in scheduler queue
[2019-08-02 10:03:09: INFO] Executions until ETA known: 2543
[2019-08-02 10:03:09: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:03:09: INFO] Estimated completion (next execution): 2019-08-02 10:12:02 (0:08:52 from now)
[2019-08-02 10:03:09: INFO] Reboot in preparation for next execution
[2019-08-02 10:08:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 10:08:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 10:08:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 10:08:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 10:08:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 10:08:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:13:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.634 s/op
Iteration   2: 6.932 s/op
Iteration   3: 6.730 s/op
Iteration   4: 6.366 s/op
Iteration   5: 5.827 s/op
Iteration   6: 5.956 s/op
Iteration   7: 6.309 s/op
Iteration   8: 5.915 s/op
Iteration   9: 5.756 s/op
Iteration  10: 5.766 s/op
Iteration  11: 6.118 s/op
Iteration  12: 6.194 s/op
Iteration  13: 6.349 s/op
Iteration  14: 5.780 s/op
Iteration  15: 6.282 s/op
Iteration  16: 6.216 s/op
Iteration  17: 5.766 s/op
Iteration  18: 5.848 s/op
Iteration  19: 6.361 s/op
Iteration  20: 5.807 s/op
Iteration  21: 5.758 s/op
Iteration  22: 5.807 s/op
Iteration  23: 6.271 s/op
Iteration  24: 5.858 s/op
Iteration  25: 5.807 s/op
Iteration  26: 5.984 s/op
Iteration  27: 6.136 s/op
Iteration  28: 5.812 s/op
Iteration  29: 6.030 s/op
Iteration  30: 6.202 s/op
Iteration  31: 5.750 s/op
Iteration  32: 5.812 s/op
Iteration  33: 6.132 s/op
Iteration  34: 5.854 s/op
Iteration  35: 5.791 s/op
Iteration  36: 5.713 s/op
Iteration  37: 5.872 s/op
Iteration  38: 5.824 s/op
Iteration  39: 5.865 s/op
Iteration  40: 6.172 s/op
Iteration  41: 5.750 s/op
Iteration  42: 5.949 s/op
Iteration  43: 6.311 s/op
Iteration  44: 6.286 s/op
Iteration  45: 6.125 s/op
Iteration  46: 6.115 s/op
Iteration  47: 6.151 s/op
Iteration  48: 5.803 s/op
Iteration  49: 5.785 s/op
Iteration  50: 6.146 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.056 ?(99.9%) 0.173 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 2 
    [5.750, 6.000) = 25 
    [6.000, 6.250) = 12 
    [6.250, 6.500) = 8 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.713 s/op
     p(50.0000) =      5.953 s/op
     p(90.0000) =      6.360 s/op
     p(95.0000) =      6.821 s/op
     p(99.0000) =      7.634 s/op
     p(99.9000) =      7.634 s/op
     p(99.9900) =      7.634 s/op
     p(99.9990) =      7.634 s/op
     p(99.9999) =      7.634 s/op
    p(100.0000) =      7.634 s/op


# Run complete. Total time: 00:05:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.056 ? 0.173   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_11.0.4_1564733290974.json
{"wallclock_times": [304.688879307], "core_cycle_counts": [[342938543398], [193031985074], [275499869318], [250525411954]], "aperf_counts": [[342224020615], [192877513597], [275389483928], [250418568791]], "mperf_counts": [[342230472044], [192877497160], [275389957480], [250418969238]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:13:15: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:13:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:13:16: INFO] 412 executions left in scheduler queue
[2019-08-02 10:13:16: INFO] Executions until ETA known: 2537
[2019-08-02 10:13:16: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:13:16: INFO] Estimated completion (next execution): 2019-08-02 10:20:51 (0:07:35 from now)
[2019-08-02 10:13:16: INFO] Reboot in preparation for next execution
[2019-08-02 10:18:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 10:18:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 10:18:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 10:18:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 10:18:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 10:18:22: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:22:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.224 s/op
Iteration   2: 5.934 s/op
Iteration   3: 5.375 s/op
Iteration   4: 5.445 s/op
Iteration   5: 5.473 s/op
Iteration   6: 5.440 s/op
Iteration   7: 5.319 s/op
Iteration   8: 5.317 s/op
Iteration   9: 5.279 s/op
Iteration  10: 5.324 s/op
Iteration  11: 5.301 s/op
Iteration  12: 5.282 s/op
Iteration  13: 5.245 s/op
Iteration  14: 5.279 s/op
Iteration  15: 5.292 s/op
Iteration  16: 5.286 s/op
Iteration  17: 5.298 s/op
Iteration  18: 5.296 s/op
Iteration  19: 5.270 s/op
Iteration  20: 5.260 s/op
Iteration  21: 5.198 s/op
Iteration  22: 5.241 s/op
Iteration  23: 5.247 s/op
Iteration  24: 5.232 s/op
Iteration  25: 5.236 s/op
Iteration  26: 5.232 s/op
Iteration  27: 5.233 s/op
Iteration  28: 5.212 s/op
Iteration  29: 5.212 s/op
Iteration  30: 5.267 s/op
Iteration  31: 5.268 s/op
Iteration  32: 5.235 s/op
Iteration  33: 5.254 s/op
Iteration  34: 5.236 s/op
Iteration  35: 5.188 s/op
Iteration  36: 5.223 s/op
Iteration  37: 5.195 s/op
Iteration  38: 5.230 s/op
Iteration  39: 5.227 s/op
Iteration  40: 5.236 s/op
Iteration  41: 5.211 s/op
Iteration  42: 5.224 s/op
Iteration  43: 5.228 s/op
Iteration  44: 5.181 s/op
Iteration  45: 5.207 s/op
Iteration  46: 5.220 s/op
Iteration  47: 5.249 s/op
Iteration  48: 5.251 s/op
Iteration  49: 5.190 s/op
Iteration  50: 5.211 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.314 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [5.000, 5.250) = 27 
    [5.250, 5.500) = 21 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 1 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.181 s/op
     p(50.0000) =      5.246 s/op
     p(90.0000) =      5.434 s/op
     p(95.0000) =      5.680 s/op
     p(99.0000) =      7.224 s/op
     p(99.9000) =      7.224 s/op
     p(99.9900) =      7.224 s/op
     p(99.9990) =      7.224 s/op
     p(99.9999) =      7.224 s/op
    p(100.0000) =      7.224 s/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.314 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_11.0.4_1564733902521.json
{"wallclock_times": [267.630191953], "core_cycle_counts": [[288884076362], [269632970818], [190977562243], [284369613272]], "aperf_counts": [[288138869306], [269524112531], [190831598927], [284234849824]], "mperf_counts": [[288145785104], [269524258510], [190831632246], [284234823052]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:22:50: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:22:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:22:51: INFO] 411 executions left in scheduler queue
[2019-08-02 10:22:51: INFO] Executions until ETA known: 2532
[2019-08-02 10:22:51: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:22:51: INFO] Estimated completion (next execution): 2019-08-02 10:29:49 (0:06:58 from now)
[2019-08-02 10:22:51: INFO] Reboot in preparation for next execution
[2019-08-02 10:27:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 10:27:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 10:27:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 10:27:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 10:27:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 10:27:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-02 10:38:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.569 s/op
Iteration   2: 14.153 s/op
Iteration   3: 13.234 s/op
Iteration   4: 13.394 s/op
Iteration   5: 13.285 s/op
Iteration   6: 13.757 s/op
Iteration   7: 13.428 s/op
Iteration   8: 13.258 s/op
Iteration   9: 13.502 s/op
Iteration  10: 13.227 s/op
Iteration  11: 13.362 s/op
Iteration  12: 13.684 s/op
Iteration  13: 13.313 s/op
Iteration  14: 14.014 s/op
Iteration  15: 13.154 s/op
Iteration  16: 13.242 s/op
Iteration  17: 13.317 s/op
Iteration  18: 13.744 s/op
Iteration  19: 13.301 s/op
Iteration  20: 13.267 s/op
Iteration  21: 13.252 s/op
Iteration  22: 13.722 s/op
Iteration  23: 13.175 s/op
Iteration  24: 13.190 s/op
Iteration  25: 13.252 s/op
Iteration  26: 13.180 s/op
Iteration  27: 13.226 s/op
Iteration  28: 13.233 s/op
Iteration  29: 13.726 s/op
Iteration  30: 13.210 s/op
Iteration  31: 13.273 s/op
Iteration  32: 13.222 s/op
Iteration  33: 13.776 s/op
Iteration  34: 13.261 s/op
Iteration  35: 13.240 s/op
Iteration  36: 13.216 s/op
Iteration  37: 13.256 s/op
Iteration  38: 13.222 s/op
Iteration  39: 13.155 s/op
Iteration  40: 13.221 s/op
Iteration  41: 13.189 s/op
Iteration  42: 13.222 s/op
Iteration  43: 13.256 s/op
Iteration  44: 13.232 s/op
Iteration  45: 13.239 s/op
Iteration  46: 13.289 s/op
Iteration  47: 13.121 s/op
Iteration  48: 13.244 s/op
Iteration  49: 13.262 s/op
Iteration  50: 13.248 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     13.390 ?(99.9%) 0.193 s/op

  Histogram, s/op:
    [13.000, 13.250) = 23 
    [13.250, 13.500) = 17 
    [13.500, 13.750) = 5 
    [13.750, 14.000) = 2 
    [14.000, 14.250) = 2 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.121 s/op
     p(50.0000) =     13.254 s/op
     p(90.0000) =     13.755 s/op
     p(95.0000) =     14.076 s/op
     p(99.0000) =     15.569 s/op
     p(99.9000) =     15.569 s/op
     p(99.9900) =     15.569 s/op
     p(99.9990) =     15.569 s/op
     p(99.9999) =     15.569 s/op
    p(100.0000) =     15.569 s/op


# Run complete. Total time: 00:11:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  13.390 ? 0.193   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_11.0.4_1564734452206.json
{"wallclock_times": [671.1586773299999], "core_cycle_counts": [[723671278223], [399904161271], [698057451888], [397149761231]], "aperf_counts": [[722135193951], [399696974362], [697835389696], [396966272404]], "mperf_counts": [[722147056620], [399696956026], [697835394536], [396966517832]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:38:43: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-08-02 10:38:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:38:44: INFO] 410 executions left in scheduler queue
[2019-08-02 10:38:44: INFO] Executions until ETA known: 2509
[2019-08-02 10:38:44: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 10:38:44: INFO] Estimated completion (next execution): 2019-08-02 10:52:26 (0:13:41 from now)
[2019-08-02 10:38:44: INFO] Reboot in preparation for next execution
[2019-08-02 10:42:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 10:47:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.349 s/op
Iteration   2: 6.738 s/op
Iteration   3: 6.277 s/op
Iteration   4: 5.870 s/op
Iteration   5: 5.796 s/op
Iteration   6: 5.753 s/op
Iteration   7: 5.741 s/op
Iteration   8: 5.705 s/op
Iteration   9: 5.678 s/op
Iteration  10: 5.628 s/op
Iteration  11: 5.624 s/op
Iteration  12: 5.605 s/op
Iteration  13: 5.667 s/op
Iteration  14: 5.651 s/op
Iteration  15: 5.676 s/op
Iteration  16: 5.607 s/op
Iteration  17: 5.652 s/op
Iteration  18: 5.640 s/op
Iteration  19: 5.667 s/op
Iteration  20: 5.605 s/op
Iteration  21: 5.637 s/op
Iteration  22: 5.593 s/op
Iteration  23: 5.611 s/op
Iteration  24: 5.556 s/op
Iteration  25: 5.618 s/op
Iteration  26: 5.601 s/op
Iteration  27: 5.637 s/op
Iteration  28: 5.591 s/op
Iteration  29: 5.600 s/op
Iteration  30: 5.611 s/op
Iteration  31: 5.605 s/op
Iteration  32: 5.560 s/op
Iteration  33: 5.663 s/op
Iteration  34: 5.585 s/op
Iteration  35: 5.613 s/op
Iteration  36: 5.601 s/op
Iteration  37: 5.562 s/op
Iteration  38: 5.574 s/op
Iteration  39: 5.589 s/op
Iteration  40: 5.591 s/op
Iteration  41: 5.593 s/op
Iteration  42: 5.580 s/op
Iteration  43: 5.651 s/op
Iteration  44: 5.575 s/op
Iteration  45: 5.600 s/op
Iteration  46: 5.584 s/op
Iteration  47: 5.615 s/op
Iteration  48: 5.614 s/op
Iteration  49: 5.524 s/op
Iteration  50: 5.627 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.698 ?(99.9%) 0.151 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 44 
    [5.750, 6.000) = 3 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.524 s/op
     p(50.0000) =      5.614 s/op
     p(90.0000) =      5.791 s/op
     p(95.0000) =      6.484 s/op
     p(99.0000) =      7.349 s/op
     p(99.9000) =      7.349 s/op
     p(99.9900) =      7.349 s/op
     p(99.9990) =      7.349 s/op
     p(99.9999) =      7.349 s/op
    p(100.0000) =      7.349 s/op


# Run complete. Total time: 00:04:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.698 ? 0.151   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9-8u222-b10_1564735377596.json
{"wallclock_times": [286.12258539000004], "core_cycle_counts": [[255423412620], [263746855114], [243297723526], [225304994236]], "aperf_counts": [[254698985356], [263632768036], [243216284158], [225261300341]], "mperf_counts": [[254700684712], [263632741036], [243217137208], [225261294616]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 10:47:43: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 10:47:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 10:47:44: INFO] 409 executions left in scheduler queue
[2019-08-02 10:47:44: INFO] Executions until ETA known: 2503
[2019-08-02 10:47:44: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 10:47:44: INFO] Estimated completion (next execution): 2019-08-02 10:55:01 (0:07:16 from now)
[2019-08-02 10:47:44: INFO] Reboot in preparation for next execution
[2019-08-02 10:51:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 11:00:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.287 s/op
Iteration   2: 10.596 s/op
Iteration   3: 10.736 s/op
Iteration   4: 10.573 s/op
Iteration   5: 10.659 s/op
Iteration   6: 10.542 s/op
Iteration   7: 10.453 s/op
Iteration   8: 10.579 s/op
Iteration   9: 10.475 s/op
Iteration  10: 10.572 s/op
Iteration  11: 10.457 s/op
Iteration  12: 10.605 s/op
Iteration  13: 10.493 s/op
Iteration  14: 10.608 s/op
Iteration  15: 10.498 s/op
Iteration  16: 10.482 s/op
Iteration  17: 10.530 s/op
Iteration  18: 10.449 s/op
Iteration  19: 10.541 s/op
Iteration  20: 10.457 s/op
Iteration  21: 10.542 s/op
Iteration  22: 10.418 s/op
Iteration  23: 10.528 s/op
Iteration  24: 10.409 s/op
Iteration  25: 10.489 s/op
Iteration  26: 10.358 s/op
Iteration  27: 10.499 s/op
Iteration  28: 10.400 s/op
Iteration  29: 10.332 s/op
Iteration  30: 10.441 s/op
Iteration  31: 10.401 s/op
Iteration  32: 10.432 s/op
Iteration  33: 10.263 s/op
Iteration  34: 10.379 s/op
Iteration  35: 10.359 s/op
Iteration  36: 10.406 s/op
Iteration  37: 10.331 s/op
Iteration  38: 10.267 s/op
Iteration  39: 10.345 s/op
Iteration  40: 10.371 s/op
Iteration  41: 10.411 s/op
Iteration  42: 10.345 s/op
Iteration  43: 10.259 s/op
Iteration  44: 10.385 s/op
Iteration  45: 10.282 s/op
Iteration  46: 10.348 s/op
Iteration  47: 10.265 s/op
Iteration  48: 10.445 s/op
Iteration  49: 10.348 s/op
Iteration  50: 10.401 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.481 ?(99.9%) 0.140 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 36 
    [10.500, 10.750) = 13 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 1 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.259 s/op
     p(50.0000) =     10.443 s/op
     p(90.0000) =     10.604 s/op
     p(95.0000) =     10.693 s/op
     p(99.0000) =     12.287 s/op
     p(99.9000) =     12.287 s/op
     p(99.9900) =     12.287 s/op
     p(99.9990) =     12.287 s/op
     p(99.9999) =     12.287 s/op
    p(100.0000) =     12.287 s/op


# Run complete. Total time: 00:08:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.481 ? 0.140   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9-8u222-b10_1564735918595.json
{"wallclock_times": [525.327982903], "core_cycle_counts": [[739848265419], [367361221617], [218082013098], [460982624392]], "aperf_counts": [[738824723497], [367242231879], [217852915983], [460872059358]], "mperf_counts": [[738825550668], [367242195032], [217852831492], [460872198762]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 11:00:43: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:00:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:00:44: INFO] 408 executions left in scheduler queue
[2019-08-02 11:00:44: INFO] Executions until ETA known: 2501
[2019-08-02 11:00:44: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:00:44: INFO] Estimated completion (next execution): 2019-08-02 11:12:00 (0:11:15 from now)
[2019-08-02 11:00:44: INFO] Reboot in preparation for next execution
[2019-08-02 11:05:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 11:08:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.962 s/op
Iteration   2: 5.161 s/op
Iteration   3: 4.731 s/op
Iteration   4: 4.704 s/op
Iteration   5: 4.690 s/op
Iteration   6: 4.748 s/op
Iteration   7: 4.513 s/op
Iteration   8: 4.427 s/op
Iteration   9: 4.289 s/op
Iteration  10: 4.350 s/op
Iteration  11: 4.307 s/op
Iteration  12: 4.342 s/op
Iteration  13: 4.349 s/op
Iteration  14: 4.356 s/op
Iteration  15: 4.362 s/op
Iteration  16: 4.386 s/op
Iteration  17: 4.385 s/op
Iteration  18: 4.359 s/op
Iteration  19: 4.341 s/op
Iteration  20: 4.326 s/op
Iteration  21: 4.336 s/op
Iteration  22: 4.359 s/op
Iteration  23: 4.386 s/op
Iteration  24: 4.350 s/op
Iteration  25: 4.378 s/op
Iteration  26: 4.402 s/op
Iteration  27: 4.341 s/op
Iteration  28: 4.351 s/op
Iteration  29: 4.325 s/op
Iteration  30: 4.308 s/op
Iteration  31: 4.337 s/op
Iteration  32: 4.385 s/op
Iteration  33: 4.374 s/op
Iteration  34: 4.356 s/op
Iteration  35: 4.360 s/op
Iteration  36: 4.366 s/op
Iteration  37: 4.385 s/op
Iteration  38: 4.312 s/op
Iteration  39: 4.361 s/op
Iteration  40: 4.326 s/op
Iteration  41: 4.346 s/op
Iteration  42: 4.347 s/op
Iteration  43: 4.367 s/op
Iteration  44: 4.346 s/op
Iteration  45: 4.341 s/op
Iteration  46: 4.364 s/op
Iteration  47: 4.372 s/op
Iteration  48: 4.385 s/op
Iteration  49: 4.272 s/op
Iteration  50: 4.340 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.433 ?(99.9%) 0.133 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 0 
    [4.250, 4.375) = 34 
    [4.375, 4.500) = 9 
    [4.500, 4.625) = 1 
    [4.625, 4.750) = 4 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 0 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 1 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.272 s/op
     p(50.0000) =      4.359 s/op
     p(90.0000) =      4.702 s/op
     p(95.0000) =      4.934 s/op
     p(99.0000) =      5.962 s/op
     p(99.9000) =      5.962 s/op
     p(99.9900) =      5.962 s/op
     p(99.9990) =      5.962 s/op
     p(99.9999) =      5.962 s/op
    p(100.0000) =      5.962 s/op


# Run complete. Total time: 00:03:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.433 ? 0.133   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9-8u222-b10_1564736701046.json
{"wallclock_times": [223.16339774], "core_cycle_counts": [[200303424398], [217138189210], [219597629190], [212369577215]], "aperf_counts": [[199671108969], [217063927269], [219481399185], [212285105793]], "mperf_counts": [[199677392866], [217063915352], [219483491920], [212285145652]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 11:08:44: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:08:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:08:45: INFO] 407 executions left in scheduler queue
[2019-08-02 11:08:45: INFO] Executions until ETA known: 2495
[2019-08-02 11:08:45: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:08:45: INFO] Estimated completion (next execution): 2019-08-02 11:14:58 (0:06:13 from now)
[2019-08-02 11:08:45: INFO] Reboot in preparation for next execution
[2019-08-02 11:13:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 11:17:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.557 s/op
Iteration   2: 5.699 s/op
Iteration   3: 5.167 s/op
Iteration   4: 5.033 s/op
Iteration   5: 4.918 s/op
Iteration   6: 4.766 s/op
Iteration   7: 4.893 s/op
Iteration   8: 4.913 s/op
Iteration   9: 4.901 s/op
Iteration  10: 4.743 s/op
Iteration  11: 4.688 s/op
Iteration  12: 4.831 s/op
Iteration  13: 4.754 s/op
Iteration  14: 4.899 s/op
Iteration  15: 4.825 s/op
Iteration  16: 4.766 s/op
Iteration  17: 4.880 s/op
Iteration  18: 4.789 s/op
Iteration  19: 4.747 s/op
Iteration  20: 4.841 s/op
Iteration  21: 4.779 s/op
Iteration  22: 4.933 s/op
Iteration  23: 4.845 s/op
Iteration  24: 4.746 s/op
Iteration  25: 4.874 s/op
Iteration  26: 4.764 s/op
Iteration  27: 4.694 s/op
Iteration  28: 4.871 s/op
Iteration  29: 4.826 s/op
Iteration  30: 4.929 s/op
Iteration  31: 4.859 s/op
Iteration  32: 4.765 s/op
Iteration  33: 4.884 s/op
Iteration  34: 4.797 s/op
Iteration  35: 4.728 s/op
Iteration  36: 4.915 s/op
Iteration  37: 4.793 s/op
Iteration  38: 4.701 s/op
Iteration  39: 4.850 s/op
Iteration  40: 4.740 s/op
Iteration  41: 4.907 s/op
Iteration  42: 4.835 s/op
Iteration  43: 4.746 s/op
Iteration  44: 4.856 s/op
Iteration  45: 4.803 s/op
Iteration  46: 4.716 s/op
Iteration  47: 4.865 s/op
Iteration  48: 4.814 s/op
Iteration  49: 4.697 s/op
Iteration  50: 4.829 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.879 ?(99.9%) 0.142 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 11 
    [4.750, 5.000) = 35 
    [5.000, 5.250) = 2 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.688 s/op
     p(50.0000) =      4.830 s/op
     p(90.0000) =      4.933 s/op
     p(95.0000) =      5.406 s/op
     p(99.0000) =      6.557 s/op
     p(99.9000) =      6.557 s/op
     p(99.9900) =      6.557 s/op
     p(99.9990) =      6.557 s/op
     p(99.9999) =      6.557 s/op
    p(100.0000) =      6.557 s/op


# Run complete. Total time: 00:04:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.879 ? 0.142   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9-8u222-b10_1564737180003.json
{"wallclock_times": [245.410923824], "core_cycle_counts": [[278275185047], [217222353484], [191194721377], [216588220629]], "aperf_counts": [[277707852890], [217054473927], [191105041931], [216542285781]], "mperf_counts": [[277710087450], [217055423486], [191105270256], [216542292086]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 11:17:05: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-08-02 11:17:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:17:06: INFO] 406 executions left in scheduler queue
[2019-08-02 11:17:06: INFO] Executions until ETA known: 2485
[2019-08-02 11:17:06: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:17:06: INFO] Estimated completion (next execution): 2019-08-02 11:23:42 (0:06:35 from now)
[2019-08-02 11:17:06: INFO] Reboot in preparation for next execution
[2019-08-02 11:27:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.901 s/op
Iteration   2: 7.873 s/op
Iteration   3: 7.742 s/op
Iteration   4: 7.759 s/op
Iteration   5: 7.753 s/op
Iteration   6: 7.766 s/op
Iteration   7: 7.753 s/op
Iteration   8: 7.734 s/op
Iteration   9: 7.744 s/op
Iteration  10: 7.757 s/op
Iteration  11: 7.749 s/op
Iteration  12: 7.754 s/op
Iteration  13: 7.762 s/op
Iteration  14: 7.754 s/op
Iteration  15: 7.763 s/op
Iteration  16: 7.718 s/op
Iteration  17: 7.745 s/op
Iteration  18: 7.733 s/op
Iteration  19: 7.762 s/op
Iteration  20: 7.748 s/op
Iteration  21: 7.745 s/op
Iteration  22: 7.745 s/op
Iteration  23: 7.756 s/op
Iteration  24: 7.767 s/op
Iteration  25: 7.769 s/op
Iteration  26: 7.745 s/op
Iteration  27: 7.738 s/op
Iteration  28: 7.768 s/op
Iteration  29: 7.737 s/op
Iteration  30: 7.742 s/op
Iteration  31: 7.749 s/op
Iteration  32: 7.766 s/op
Iteration  33: 7.725 s/op
Iteration  34: 7.731 s/op
Iteration  35: 7.771 s/op
Iteration  36: 7.750 s/op
Iteration  37: 7.755 s/op
Iteration  38: 7.735 s/op
Iteration  39: 7.730 s/op
Iteration  40: 7.748 s/op
Iteration  41: 7.732 s/op
Iteration  42: 7.738 s/op
Iteration  43: 7.747 s/op
Iteration  44: 7.746 s/op
Iteration  45: 7.750 s/op
Iteration  46: 7.758 s/op
Iteration  47: 7.752 s/op
Iteration  48: 7.755 s/op
Iteration  49: 7.746 s/op
Iteration  50: 7.736 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.754 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [7.700, 7.725) = 1 
    [7.725, 7.750) = 27 
    [7.750, 7.775) = 20 
    [7.775, 7.800) = 0 
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 1 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 1 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.718 s/op
     p(50.0000) =      7.749 s/op
     p(90.0000) =      7.768 s/op
     p(95.0000) =      7.817 s/op
     p(99.0000) =      7.901 s/op
     p(99.9000) =      7.901 s/op
     p(99.9900) =      7.901 s/op
     p(99.9990) =      7.901 s/op
     p(99.9999) =      7.901 s/op
    p(100.0000) =      7.901 s/op


# Run complete. Total time: 00:06:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.754 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ee-19.1.1_1564737683383.json
{"wallclock_times": [388.61041973500005], "core_cycle_counts": [[304456278560], [422859643055], [313459343380], [219203948521]], "aperf_counts": [[303561652759], [422807345761], [313430795764], [219169797860]], "mperf_counts": [[303586669138], [422820299860], [313434215294], [219169960546]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:27:51: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:27:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:27:52: INFO] 405 executions left in scheduler queue
[2019-08-02 11:27:52: INFO] Executions until ETA known: 2479
[2019-08-02 11:27:52: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:27:52: INFO] Estimated completion (next execution): 2019-08-02 11:36:51 (0:08:58 from now)
[2019-08-02 11:27:52: INFO] Reboot in preparation for next execution
[2019-08-02 11:34:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.541 s/op
Iteration   2: 3.328 s/op
Iteration   3: 3.259 s/op
Iteration   4: 3.221 s/op
Iteration   5: 3.265 s/op
Iteration   6: 3.239 s/op
Iteration   7: 3.242 s/op
Iteration   8: 3.219 s/op
Iteration   9: 3.233 s/op
Iteration  10: 3.231 s/op
Iteration  11: 3.217 s/op
Iteration  12: 3.238 s/op
Iteration  13: 3.223 s/op
Iteration  14: 3.243 s/op
Iteration  15: 3.270 s/op
Iteration  16: 3.222 s/op
Iteration  17: 3.253 s/op
Iteration  18: 3.219 s/op
Iteration  19: 3.235 s/op
Iteration  20: 3.224 s/op
Iteration  21: 3.234 s/op
Iteration  22: 3.226 s/op
Iteration  23: 3.228 s/op
Iteration  24: 3.246 s/op
Iteration  25: 3.228 s/op
Iteration  26: 3.220 s/op
Iteration  27: 3.227 s/op
Iteration  28: 3.237 s/op
Iteration  29: 3.221 s/op
Iteration  30: 3.234 s/op
Iteration  31: 3.247 s/op
Iteration  32: 3.254 s/op
Iteration  33: 3.234 s/op
Iteration  34: 3.239 s/op
Iteration  35: 3.230 s/op
Iteration  36: 3.241 s/op
Iteration  37: 3.234 s/op
Iteration  38: 3.213 s/op
Iteration  39: 3.243 s/op
Iteration  40: 3.252 s/op
Iteration  41: 3.227 s/op
Iteration  42: 3.218 s/op
Iteration  43: 3.241 s/op
Iteration  44: 3.227 s/op
Iteration  45: 3.213 s/op
Iteration  46: 3.219 s/op
Iteration  47: 3.232 s/op
Iteration  48: 3.235 s/op
Iteration  49: 3.242 s/op
Iteration  50: 3.237 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.242 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [3.200, 3.225) = 13 
    [3.225, 3.250) = 29 
    [3.250, 3.275) = 6 
    [3.275, 3.300) = 0 
    [3.300, 3.325) = 0 
    [3.325, 3.350) = 1 
    [3.350, 3.375) = 0 
    [3.375, 3.400) = 0 
    [3.400, 3.425) = 0 
    [3.425, 3.450) = 0 
    [3.450, 3.475) = 0 
    [3.475, 3.500) = 0 
    [3.500, 3.525) = 0 
    [3.525, 3.550) = 1 
    [3.550, 3.575) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.213 s/op
     p(50.0000) =      3.234 s/op
     p(90.0000) =      3.259 s/op
     p(95.0000) =      3.296 s/op
     p(99.0000) =      3.541 s/op
     p(99.9000) =      3.541 s/op
     p(99.9900) =      3.541 s/op
     p(99.9990) =      3.541 s/op
     p(99.9999) =      3.541 s/op
    p(100.0000) =      3.541 s/op


# Run complete. Total time: 00:02:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.242 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ee-19.1.1_1564738329600.json
{"wallclock_times": [163.094304082], "core_cycle_counts": [[174817162602], [125223059372], [119094100012], [114587919927]], "aperf_counts": [[174465511600], [125179292183], [119070014398], [114567093514]], "mperf_counts": [[174493437138], [125184368236], [119070279128], [114568598820]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:34:52: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:34:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:34:53: INFO] 404 executions left in scheduler queue
[2019-08-02 11:34:53: INFO] Executions until ETA known: 2473
[2019-08-02 11:34:53: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:34:53: INFO] Estimated completion (next execution): 2019-08-02 11:40:06 (0:05:13 from now)
[2019-08-02 11:34:53: INFO] Reboot in preparation for next execution
[2019-08-02 11:42:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.149 s/op
Iteration   2: 3.621 s/op
Iteration   3: 3.700 s/op
Iteration   4: 3.616 s/op
Iteration   5: 3.594 s/op
Iteration   6: 3.697 s/op
Iteration   7: 3.663 s/op
Iteration   8: 3.693 s/op
Iteration   9: 3.644 s/op
Iteration  10: 3.649 s/op
Iteration  11: 3.655 s/op
Iteration  12: 3.706 s/op
Iteration  13: 3.662 s/op
Iteration  14: 3.661 s/op
Iteration  15: 3.661 s/op
Iteration  16: 3.709 s/op
Iteration  17: 3.675 s/op
Iteration  18: 3.653 s/op
Iteration  19: 3.644 s/op
Iteration  20: 3.716 s/op
Iteration  21: 3.646 s/op
Iteration  22: 3.657 s/op
Iteration  23: 3.658 s/op
Iteration  24: 3.651 s/op
Iteration  25: 3.710 s/op
Iteration  26: 3.641 s/op
Iteration  27: 3.658 s/op
Iteration  28: 3.654 s/op
Iteration  29: 3.718 s/op
Iteration  30: 3.669 s/op
Iteration  31: 3.654 s/op
Iteration  32: 3.651 s/op
Iteration  33: 3.717 s/op
Iteration  34: 3.663 s/op
Iteration  35: 3.663 s/op
Iteration  36: 3.665 s/op
Iteration  37: 3.730 s/op
Iteration  38: 3.653 s/op
Iteration  39: 3.644 s/op
Iteration  40: 3.674 s/op
Iteration  41: 3.654 s/op
Iteration  42: 3.743 s/op
Iteration  43: 3.676 s/op
Iteration  44: 3.658 s/op
Iteration  45: 3.679 s/op
Iteration  46: 3.723 s/op
Iteration  47: 3.674 s/op
Iteration  48: 3.658 s/op
Iteration  49: 3.671 s/op
Iteration  50: 4.053 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.687 ?(99.9%) 0.045 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 8 
    [3.650, 3.700) = 29 
    [3.700, 3.750) = 10 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 1 
    [4.100, 4.150) = 1 
    [4.150, 4.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.594 s/op
     p(50.0000) =      3.662 s/op
     p(90.0000) =      3.722 s/op
     p(95.0000) =      3.883 s/op
     p(99.0000) =      4.149 s/op
     p(99.9000) =      4.149 s/op
     p(99.9900) =      4.149 s/op
     p(99.9990) =      4.149 s/op
     p(99.9999) =      4.149 s/op
    p(100.0000) =      4.149 s/op


# Run complete. Total time: 00:03:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.687 ? 0.045   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ee-19.1.1_1564738748567.json
{"wallclock_times": [185.412628282], "core_cycle_counts": [[141524492010], [186939324132], [200964864212], [138605332857]], "aperf_counts": [[141026036287], [186882809108], [200917302901], [138568272866]], "mperf_counts": [[141053501898], [186888760160], [200920488186], [138574035644]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:42:13: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:42:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:42:14: INFO] 403 executions left in scheduler queue
[2019-08-02 11:42:14: INFO] Executions until ETA known: 2468
[2019-08-02 11:42:14: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:42:14: INFO] Estimated completion (next execution): 2019-08-02 11:47:50 (0:05:35 from now)
[2019-08-02 11:42:14: INFO] Reboot in preparation for next execution
[2019-08-02 11:52:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.947 s/op
Iteration   2: 6.829 s/op
Iteration   3: 6.817 s/op
Iteration   4: 6.769 s/op
Iteration   5: 6.782 s/op
Iteration   6: 6.812 s/op
Iteration   7: 6.831 s/op
Iteration   8: 6.820 s/op
Iteration   9: 6.812 s/op
Iteration  10: 6.779 s/op
Iteration  11: 6.776 s/op
Iteration  12: 6.812 s/op
Iteration  13: 6.797 s/op
Iteration  14: 6.802 s/op
Iteration  15: 6.789 s/op
Iteration  16: 6.810 s/op
Iteration  17: 6.759 s/op
Iteration  18: 6.775 s/op
Iteration  19: 6.828 s/op
Iteration  20: 6.814 s/op
Iteration  21: 6.808 s/op
Iteration  22: 6.800 s/op
Iteration  23: 6.755 s/op
Iteration  24: 6.819 s/op
Iteration  25: 6.769 s/op
Iteration  26: 6.759 s/op
Iteration  27: 6.787 s/op
Iteration  28: 6.782 s/op
Iteration  29: 6.771 s/op
Iteration  30: 6.790 s/op
Iteration  31: 6.790 s/op
Iteration  32: 6.848 s/op
Iteration  33: 6.809 s/op
Iteration  34: 6.791 s/op
Iteration  35: 6.755 s/op
Iteration  36: 6.762 s/op
Iteration  37: 6.771 s/op
Iteration  38: 6.847 s/op
Iteration  39: 6.785 s/op
Iteration  40: 6.860 s/op
Iteration  41: 6.794 s/op
Iteration  42: 6.752 s/op
Iteration  43: 6.782 s/op
Iteration  44: 6.811 s/op
Iteration  45: 6.780 s/op
Iteration  46: 6.762 s/op
Iteration  47: 6.778 s/op
Iteration  48: 6.833 s/op
Iteration  49: 6.769 s/op
Iteration  50: 6.780 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.797 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 13 
    [6.775, 6.800) = 16 
    [6.800, 6.825) = 13 
    [6.825, 6.850) = 6 
    [6.850, 6.875) = 1 
    [6.875, 6.900) = 0 
    [6.900, 6.925) = 0 
    [6.925, 6.950) = 1 
    [6.950, 6.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.752 s/op
     p(50.0000) =      6.790 s/op
     p(90.0000) =      6.832 s/op
     p(95.0000) =      6.853 s/op
     p(99.0000) =      6.947 s/op
     p(99.9000) =      6.947 s/op
     p(99.9900) =      6.947 s/op
     p(99.9990) =      6.947 s/op
     p(99.9999) =      6.947 s/op
    p(100.0000) =      6.947 s/op


# Run complete. Total time: 00:05:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.797 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ee-19.1.1_1564739203657.json
{"wallclock_times": [340.809437375], "core_cycle_counts": [[267296135386], [176454721970], [232739814860], [425177776716]], "aperf_counts": [[266485535780], [176388849731], [232710089558], [425157929489]], "mperf_counts": [[266511326872], [176391169448], [232716779700], [425160987320]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 11:52:24: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-08-02 11:52:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 11:52:25: INFO] 402 executions left in scheduler queue
[2019-08-02 11:52:25: INFO] Executions until ETA known: 2432
[2019-08-02 11:52:25: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-08-02 11:52:25: INFO] Estimated completion (next execution): 2019-08-02 12:00:36 (0:08:11 from now)
[2019-08-02 11:52:25: INFO] Reboot in preparation for next execution
[2019-08-02 12:03:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.285 s/op
Iteration   2: 8.095 s/op
Iteration   3: 8.065 s/op
Iteration   4: 8.048 s/op
Iteration   5: 8.044 s/op
Iteration   6: 8.285 s/op
Iteration   7: 8.068 s/op
Iteration   8: 7.921 s/op
Iteration   9: 8.135 s/op
Iteration  10: 7.982 s/op
Iteration  11: 7.982 s/op
Iteration  12: 8.138 s/op
Iteration  13: 8.351 s/op
Iteration  14: 7.977 s/op
Iteration  15: 8.067 s/op
Iteration  16: 7.877 s/op
Iteration  17: 7.890 s/op
Iteration  18: 7.886 s/op
Iteration  19: 7.748 s/op
Iteration  20: 7.803 s/op
Iteration  21: 7.934 s/op
Iteration  22: 7.747 s/op
Iteration  23: 7.761 s/op
Iteration  24: 7.967 s/op
Iteration  25: 7.930 s/op
Iteration  26: 7.921 s/op
Iteration  27: 7.755 s/op
Iteration  28: 7.789 s/op
Iteration  29: 7.927 s/op
Iteration  30: 7.725 s/op
Iteration  31: 7.762 s/op
Iteration  32: 7.963 s/op
Iteration  33: 7.911 s/op
Iteration  34: 7.893 s/op
Iteration  35: 7.747 s/op
Iteration  36: 7.838 s/op
Iteration  37: 8.592 s/op
Iteration  38: 7.783 s/op
Iteration  39: 7.887 s/op
Iteration  40: 7.926 s/op
Iteration  41: 7.897 s/op
Iteration  42: 7.935 s/op
Iteration  43: 7.742 s/op
Iteration  44: 7.796 s/op
Iteration  45: 7.916 s/op
Iteration  46: 7.742 s/op
Iteration  47: 7.755 s/op
Iteration  48: 7.946 s/op
Iteration  49: 7.907 s/op
Iteration  50: 7.886 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      7.939 ?(99.9%) 0.087 s/op

  Histogram, s/op:
    [7.700, 7.750) = 6 
    [7.750, 7.800) = 7 
    [7.800, 7.850) = 2 
    [7.850, 7.900) = 7 
    [7.900, 7.950) = 11 
    [7.950, 8.000) = 5 
    [8.000, 8.050) = 2 
    [8.050, 8.100) = 4 
    [8.100, 8.150) = 2 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 2 
    [8.300, 8.350) = 0 
    [8.350, 8.400) = 1 
    [8.400, 8.450) = 0 
    [8.450, 8.500) = 0 
    [8.500, 8.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.725 s/op
     p(50.0000) =      7.918 s/op
     p(90.0000) =      8.138 s/op
     p(95.0000) =      8.315 s/op
     p(99.0000) =      8.592 s/op
     p(99.9000) =      8.592 s/op
     p(99.9900) =      8.592 s/op
     p(99.9990) =      8.592 s/op
     p(99.9999) =      8.592 s/op
    p(100.0000) =      8.592 s/op


# Run complete. Total time: 00:06:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  7.939 ? 0.087   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ce-19.1.1_1564739798445.json
{"wallclock_times": [397.8990906949999], "core_cycle_counts": [[440163524621], [367226827466], [329476532445], [268638393960]], "aperf_counts": [[439307932137], [367142419515], [329412136296], [268594780217]], "mperf_counts": [[439319822028], [367143200822], [329413615940], [268603257748]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 12:03:16: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-08-02 12:03:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:03:17: INFO] 401 executions left in scheduler queue
[2019-08-02 12:03:17: INFO] Executions until ETA known: 2402
[2019-08-02 12:03:17: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:03:17: INFO] Estimated completion (next execution): 2019-08-02 12:12:25 (0:09:08 from now)
[2019-08-02 12:03:17: INFO] Reboot in preparation for next execution
[2019-08-02 12:07:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 12:07:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 12:07:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 12:07:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 12:07:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 12:07:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 12:09:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.873 s/op
Iteration   2: 2.568 s/op
Iteration   3: 2.427 s/op
Iteration   4: 2.074 s/op
Iteration   5: 2.222 s/op
Iteration   6: 2.078 s/op
Iteration   7: 1.970 s/op
Iteration   8: 1.960 s/op
Iteration   9: 1.936 s/op
Iteration  10: 1.922 s/op
Iteration  11: 1.988 s/op
Iteration  12: 2.019 s/op
Iteration  13: 2.001 s/op
Iteration  14: 1.987 s/op
Iteration  15: 2.009 s/op
Iteration  16: 1.997 s/op
Iteration  17: 2.000 s/op
Iteration  18: 1.982 s/op
Iteration  19: 1.994 s/op
Iteration  20: 1.989 s/op
Iteration  21: 2.014 s/op
Iteration  22: 1.997 s/op
Iteration  23: 2.009 s/op
Iteration  24: 1.988 s/op
Iteration  25: 2.002 s/op
Iteration  26: 1.987 s/op
Iteration  27: 1.989 s/op
Iteration  28: 1.998 s/op
Iteration  29: 1.986 s/op
Iteration  30: 1.997 s/op
Iteration  31: 1.959 s/op
Iteration  32: 2.001 s/op
Iteration  33: 1.960 s/op
Iteration  34: 1.959 s/op
Iteration  35: 1.971 s/op
Iteration  36: 2.008 s/op
Iteration  37: 1.959 s/op
Iteration  38: 2.002 s/op
Iteration  39: 2.017 s/op
Iteration  40: 1.991 s/op
Iteration  41: 1.979 s/op
Iteration  42: 1.986 s/op
Iteration  43: 1.987 s/op
Iteration  44: 1.993 s/op
Iteration  45: 1.971 s/op
Iteration  46: 1.954 s/op
Iteration  47: 1.983 s/op
Iteration  48: 1.989 s/op
Iteration  49: 1.987 s/op
Iteration  50: 1.991 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.032 ?(99.9%) 0.081 s/op

  Histogram, s/op:
    [1.900, 2.000) = 33 
    [2.000, 2.100) = 13 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 1 
    [2.500, 2.600) = 1 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.922 s/op
     p(50.0000) =      1.990 s/op
     p(90.0000) =      2.078 s/op
     p(95.0000) =      2.490 s/op
     p(99.0000) =      2.873 s/op
     p(99.9000) =      2.873 s/op
     p(99.9900) =      2.873 s/op
     p(99.9990) =      2.873 s/op
     p(99.9999) =      2.873 s/op
    p(100.0000) =      2.873 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.032 ? 0.081   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_12.0.1_1564740452296.json
{"wallclock_times": [103.30771599599998], "core_cycle_counts": [[155599059817], [60529630416], [57080654891], [87535210243]], "aperf_counts": [[155340957392], [60442441070], [56998699305], [87463305639]], "mperf_counts": [[155344692324], [60442432528], [56998693066], [87463336042]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:09:15: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:09:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:09:16: INFO] 400 executions left in scheduler queue
[2019-08-02 12:09:16: INFO] Executions until ETA known: 2392
[2019-08-02 12:09:16: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:09:16: INFO] Estimated completion (next execution): 2019-08-02 12:13:30 (0:04:13 from now)
[2019-08-02 12:09:16: INFO] Reboot in preparation for next execution
[2019-08-02 12:13:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 12:13:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 12:13:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 12:13:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 12:13:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 12:13:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 12:16:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.636 s/op
Iteration   2: 3.096 s/op
Iteration   3: 3.189 s/op
Iteration   4: 3.111 s/op
Iteration   5: 3.040 s/op
Iteration   6: 3.032 s/op
Iteration   7: 3.054 s/op
Iteration   8: 3.120 s/op
Iteration   9: 3.060 s/op
Iteration  10: 3.071 s/op
Iteration  11: 3.078 s/op
Iteration  12: 3.096 s/op
Iteration  13: 3.060 s/op
Iteration  14: 3.032 s/op
Iteration  15: 3.010 s/op
Iteration  16: 3.094 s/op
Iteration  17: 3.092 s/op
Iteration  18: 3.023 s/op
Iteration  19: 2.994 s/op
Iteration  20: 2.950 s/op
Iteration  21: 3.051 s/op
Iteration  22: 3.076 s/op
Iteration  23: 3.032 s/op
Iteration  24: 3.014 s/op
Iteration  25: 3.041 s/op
Iteration  26: 3.025 s/op
Iteration  27: 2.999 s/op
Iteration  28: 3.006 s/op
Iteration  29: 3.027 s/op
Iteration  30: 3.078 s/op
Iteration  31: 2.985 s/op
Iteration  32: 3.052 s/op
Iteration  33: 3.122 s/op
Iteration  34: 3.142 s/op
Iteration  35: 3.159 s/op
Iteration  36: 3.151 s/op
Iteration  37: 3.108 s/op
Iteration  38: 3.176 s/op
Iteration  39: 3.181 s/op
Iteration  40: 3.163 s/op
Iteration  41: 3.166 s/op
Iteration  42: 3.129 s/op
Iteration  43: 3.134 s/op
Iteration  44: 3.133 s/op
Iteration  45: 3.114 s/op
Iteration  46: 3.079 s/op
Iteration  47: 3.138 s/op
Iteration  48: 3.130 s/op
Iteration  49: 3.181 s/op
Iteration  50: 3.193 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      3.096 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 4 
    [3.000, 3.050) = 11 
    [3.050, 3.100) = 14 
    [3.100, 3.150) = 11 
    [3.150, 3.200) = 9 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.950 s/op
     p(50.0000) =      3.085 s/op
     p(90.0000) =      3.180 s/op
     p(95.0000) =      3.191 s/op
     p(99.0000) =      3.636 s/op
     p(99.9000) =      3.636 s/op
     p(99.9900) =      3.636 s/op
     p(99.9990) =      3.636 s/op
     p(99.9999) =      3.636 s/op
    p(100.0000) =      3.636 s/op


# Run complete. Total time: 00:02:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.096 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_12.0.1_1564740811404.json
{"wallclock_times": [156.348431751], "core_cycle_counts": [[164095870761], [120794320363], [121556781565], [121769744614]], "aperf_counts": [[163711600027], [120739860091], [121472347639], [121713813781]], "mperf_counts": [[163726101070], [120739985650], [121472335088], [121713889736]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:16:07: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-08-02 12:16:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:16:08: INFO] 399 executions left in scheduler queue
[2019-08-02 12:16:08: INFO] Executions until ETA known: 2378
[2019-08-02 12:16:08: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:16:08: INFO] Estimated completion (next execution): 2019-08-02 12:21:15 (0:05:06 from now)
[2019-08-02 12:16:08: INFO] Reboot in preparation for next execution
[2019-08-02 12:20:23: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 12:22:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.964 s/op
Iteration   2: 2.410 s/op
Iteration   3: 2.093 s/op
Iteration   4: 1.936 s/op
Iteration   5: 1.945 s/op
Iteration   6: 1.933 s/op
Iteration   7: 1.874 s/op
Iteration   8: 1.905 s/op
Iteration   9: 1.885 s/op
Iteration  10: 1.892 s/op
Iteration  11: 1.890 s/op
Iteration  12: 1.920 s/op
Iteration  13: 1.905 s/op
Iteration  14: 1.899 s/op
Iteration  15: 1.883 s/op
Iteration  16: 1.924 s/op
Iteration  17: 1.902 s/op
Iteration  18: 1.852 s/op
Iteration  19: 1.881 s/op
Iteration  20: 1.852 s/op
Iteration  21: 1.884 s/op
Iteration  22: 1.885 s/op
Iteration  23: 1.869 s/op
Iteration  24: 1.881 s/op
Iteration  25: 1.881 s/op
Iteration  26: 1.880 s/op
Iteration  27: 1.854 s/op
Iteration  28: 1.864 s/op
Iteration  29: 1.889 s/op
Iteration  30: 1.879 s/op
Iteration  31: 1.894 s/op
Iteration  32: 1.868 s/op
Iteration  33: 1.876 s/op
Iteration  34: 1.861 s/op
Iteration  35: 1.904 s/op
Iteration  36: 1.908 s/op
Iteration  37: 1.859 s/op
Iteration  38: 1.900 s/op
Iteration  39: 1.885 s/op
Iteration  40: 1.899 s/op
Iteration  41: 1.880 s/op
Iteration  42: 1.879 s/op
Iteration  43: 1.873 s/op
Iteration  44: 1.857 s/op
Iteration  45: 1.860 s/op
Iteration  46: 1.879 s/op
Iteration  47: 1.883 s/op
Iteration  48: 1.902 s/op
Iteration  49: 1.858 s/op
Iteration  50: 1.892 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.923 ?(99.9%) 0.085 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 13 
    [1.875, 2.000) = 34 
    [2.000, 2.125) = 1 
    [2.125, 2.250) = 0 
    [2.250, 2.375) = 0 
    [2.375, 2.500) = 1 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.852 s/op
     p(50.0000) =      1.885 s/op
     p(90.0000) =      1.936 s/op
     p(95.0000) =      2.236 s/op
     p(99.0000) =      2.964 s/op
     p(99.9000) =      2.964 s/op
     p(99.9900) =      2.964 s/op
     p(99.9990) =      2.964 s/op
     p(99.9999) =      2.964 s/op
    p(100.0000) =      2.964 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.923 ? 0.085   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9-8u222-b10_1564741223625.json
{"wallclock_times": [97.36585095699999], "core_cycle_counts": [[86174525986], [89845152953], [94399621060], [67320256756]], "aperf_counts": [[85831026774], [89790947942], [94341580552], [67262653545]], "mperf_counts": [[85833491002], [89791110892], [94341580788], [67262828356]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:22:00: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:22:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:22:01: INFO] 398 executions left in scheduler queue
[2019-08-02 12:22:01: INFO] Executions until ETA known: 2371
[2019-08-02 12:22:01: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:22:01: INFO] Estimated completion (next execution): 2019-08-02 12:26:09 (0:04:07 from now)
[2019-08-02 12:22:01: INFO] Reboot in preparation for next execution
[2019-08-02 12:26:16: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 12:29:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.668 s/op
Iteration   2: 3.606 s/op
Iteration   3: 3.576 s/op
Iteration   4: 3.375 s/op
Iteration   5: 3.310 s/op
Iteration   6: 3.294 s/op
Iteration   7: 3.271 s/op
Iteration   8: 3.171 s/op
Iteration   9: 3.225 s/op
Iteration  10: 3.231 s/op
Iteration  11: 3.232 s/op
Iteration  12: 3.186 s/op
Iteration  13: 3.160 s/op
Iteration  14: 3.227 s/op
Iteration  15: 3.230 s/op
Iteration  16: 3.169 s/op
Iteration  17: 3.196 s/op
Iteration  18: 3.172 s/op
Iteration  19: 3.214 s/op
Iteration  20: 3.227 s/op
Iteration  21: 3.215 s/op
Iteration  22: 3.200 s/op
Iteration  23: 3.204 s/op
Iteration  24: 3.146 s/op
Iteration  25: 3.234 s/op
Iteration  26: 3.216 s/op
Iteration  27: 3.209 s/op
Iteration  28: 3.237 s/op
Iteration  29: 3.209 s/op
Iteration  30: 3.199 s/op
Iteration  31: 3.242 s/op
Iteration  32: 3.207 s/op
Iteration  33: 3.236 s/op
Iteration  34: 3.199 s/op
Iteration  35: 3.210 s/op
Iteration  36: 3.250 s/op
Iteration  37: 3.213 s/op
Iteration  38: 3.184 s/op
Iteration  39: 3.213 s/op
Iteration  40: 3.236 s/op
Iteration  41: 3.221 s/op
Iteration  42: 3.195 s/op
Iteration  43: 3.240 s/op
Iteration  44: 3.230 s/op
Iteration  45: 3.210 s/op
Iteration  46: 3.200 s/op
Iteration  47: 3.240 s/op
Iteration  48: 3.222 s/op
Iteration  49: 3.214 s/op
Iteration  50: 3.206 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.244 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [3.100, 3.150) = 1 
    [3.150, 3.200) = 10 
    [3.200, 3.250) = 31 
    [3.250, 3.300) = 3 
    [3.300, 3.350) = 1 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.146 s/op
     p(50.0000) =      3.215 s/op
     p(90.0000) =      3.308 s/op
     p(95.0000) =      3.589 s/op
     p(99.0000) =      3.668 s/op
     p(99.9000) =      3.668 s/op
     p(99.9900) =      3.668 s/op
     p(99.9990) =      3.668 s/op
     p(99.9999) =      3.668 s/op
    p(100.0000) =      3.668 s/op


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.244 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9-8u222-b10_1564741576711.json
{"wallclock_times": [163.30076224400003], "core_cycle_counts": [[151302080134], [125858316934], [127543634477], [141793252029]], "aperf_counts": [[150875594767], [125795872859], [127485791389], [141755502857]], "mperf_counts": [[150877952384], [125795857560], [127485809806], [141755587174]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 12:29:00: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-08-02 12:29:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:29:00: INFO] 397 executions left in scheduler queue
[2019-08-02 12:29:00: INFO] Executions until ETA known: 2344
[2019-08-02 12:29:00: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-08-02 12:29:00: INFO] Estimated completion (next execution): 2019-08-02 12:34:14 (0:05:13 from now)
[2019-08-02 12:29:00: INFO] Reboot in preparation for next execution
[2019-08-02 12:33:16: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 12:33:16: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 12:33:16: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 12:33:16: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 12:33:16: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 12:44:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.518 s/op
Iteration   2: 13.007 s/op
Iteration   3: 12.973 s/op
Iteration   4: 13.205 s/op
Iteration   5: 12.993 s/op
Iteration   6: 12.986 s/op
Iteration   7: 13.024 s/op
Iteration   8: 13.072 s/op
Iteration   9: 12.984 s/op
Iteration  10: 12.988 s/op
Iteration  11: 12.994 s/op
Iteration  12: 13.005 s/op
Iteration  13: 13.081 s/op
Iteration  14: 13.020 s/op
Iteration  15: 12.942 s/op
Iteration  16: 13.001 s/op
Iteration  17: 12.978 s/op
Iteration  18: 12.978 s/op
Iteration  19: 12.960 s/op
Iteration  20: 13.020 s/op
Iteration  21: 13.003 s/op
Iteration  22: 12.941 s/op
Iteration  23: 12.977 s/op
Iteration  24: 12.950 s/op
Iteration  25: 12.983 s/op
Iteration  26: 13.055 s/op
Iteration  27: 12.977 s/op
Iteration  28: 13.059 s/op
Iteration  29: 12.982 s/op
Iteration  30: 13.006 s/op
Iteration  31: 12.998 s/op
Iteration  32: 13.061 s/op
Iteration  33: 12.981 s/op
Iteration  34: 12.799 s/op
Iteration  35: 12.957 s/op
Iteration  36: 12.980 s/op
Iteration  37: 13.155 s/op
Iteration  38: 12.919 s/op
Iteration  39: 13.050 s/op
Iteration  40: 12.840 s/op
Iteration  41: 13.003 s/op
Iteration  42: 13.029 s/op
Iteration  43: 12.959 s/op
Iteration  44: 13.063 s/op
Iteration  45: 12.978 s/op
Iteration  46: 12.985 s/op
Iteration  47: 13.095 s/op
Iteration  48: 12.985 s/op
Iteration  49: 13.003 s/op
Iteration  50: 12.930 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.009 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 1 
    [12.800, 12.850) = 1 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 4 
    [12.950, 13.000) = 22 
    [13.000, 13.050) = 12 
    [13.050, 13.100) = 7 
    [13.100, 13.150) = 0 
    [13.150, 13.200) = 1 
    [13.200, 13.250) = 1 
    [13.250, 13.300) = 0 
    [13.300, 13.350) = 0 
    [13.350, 13.400) = 0 
    [13.400, 13.450) = 0 
    [13.450, 13.500) = 0 
    [13.500, 13.550) = 1 
    [13.550, 13.600) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.799 s/op
     p(50.0000) =     12.991 s/op
     p(90.0000) =     13.080 s/op
     p(95.0000) =     13.178 s/op
     p(99.0000) =     13.518 s/op
     p(99.9000) =     13.518 s/op
     p(99.9900) =     13.518 s/op
     p(99.9990) =     13.518 s/op
     p(99.9999) =     13.518 s/op
    p(100.0000) =     13.518 s/op


# Run complete. Total time: 00:10:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.009 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot_11.0.4_1564741996557.json
{"wallclock_times": [651.536652692], "core_cycle_counts": [[815662890754], [542829222684], [607279935792], [420394930186]], "aperf_counts": [[814226870122], [542607115364], [607172374406], [420295470667]], "mperf_counts": [[814760747562], [542725594184], [607308830364], [420416920626]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 12:44:08: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-08-02 12:44:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 12:44:09: INFO] 396 executions left in scheduler queue
[2019-08-02 12:44:09: INFO] Executions until ETA known: 2312
[2019-08-02 12:44:09: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-08-02 12:44:09: INFO] Estimated completion (next execution): 2019-08-02 12:57:30 (0:13:21 from now)
[2019-08-02 12:44:09: INFO] Reboot in preparation for next execution
[2019-08-02 12:48:25: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 13:02:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.154 s/op
Iteration   2: 16.775 s/op
Iteration   3: 16.902 s/op
Iteration   4: 16.987 s/op
Iteration   5: 16.982 s/op
Iteration   6: 16.530 s/op
Iteration   7: 17.090 s/op
Iteration   8: 16.852 s/op
Iteration   9: 17.079 s/op
Iteration  10: 17.043 s/op
Iteration  11: 16.936 s/op
Iteration  12: 16.984 s/op
Iteration  13: 17.273 s/op
Iteration  14: 17.032 s/op
Iteration  15: 16.900 s/op
Iteration  16: 16.475 s/op
Iteration  17: 17.039 s/op
Iteration  18: 17.197 s/op
Iteration  19: 16.824 s/op
Iteration  20: 16.779 s/op
Iteration  21: 17.122 s/op
Iteration  22: 17.010 s/op
Iteration  23: 17.145 s/op
Iteration  24: 17.087 s/op
Iteration  25: 17.146 s/op
Iteration  26: 16.883 s/op
Iteration  27: 16.294 s/op
Iteration  28: 17.033 s/op
Iteration  29: 16.632 s/op
Iteration  30: 16.605 s/op
Iteration  31: 17.090 s/op
Iteration  32: 16.935 s/op
Iteration  33: 16.939 s/op
Iteration  34: 16.771 s/op
Iteration  35: 16.829 s/op
Iteration  36: 15.976 s/op
Iteration  37: 16.855 s/op
Iteration  38: 16.848 s/op
Iteration  39: 17.001 s/op
Iteration  40: 16.584 s/op
Iteration  41: 17.115 s/op
Iteration  42: 16.619 s/op
Iteration  43: 17.084 s/op
Iteration  44: 17.000 s/op
Iteration  45: 17.070 s/op
Iteration  46: 17.061 s/op
Iteration  47: 16.398 s/op
Iteration  48: 16.892 s/op
Iteration  49: 16.348 s/op
Iteration  50: 17.074 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.886 ?(99.9%) 0.130 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 4 
    [16.500, 16.750) = 5 
    [16.750, 17.000) = 19 
    [17.000, 17.250) = 20 
    [17.250, 17.500) = 1 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.976 s/op
     p(50.0000) =     16.960 s/op
     p(90.0000) =     17.143 s/op
     p(95.0000) =     17.173 s/op
     p(99.0000) =     17.273 s/op
     p(99.9000) =     17.273 s/op
     p(99.9900) =     17.273 s/op
     p(99.9990) =     17.273 s/op
     p(99.9999) =     17.273 s/op
    p(100.0000) =     17.273 s/op


# Run complete. Total time: 00:14:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.886 ? 0.130   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9-8u222-b10_1564742905584.json
{"wallclock_times": [845.660794051], "core_cycle_counts": [[598301344258], [713125891993], [960297244307], [731365290143]], "aperf_counts": [[595981793460], [712942433040], [960102656088], [731215367415]], "mperf_counts": [[595982279378], [712942401732], [960102612308], [731215354842]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:02:31: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-08-02 13:02:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:02:32: INFO] 395 executions left in scheduler queue
[2019-08-02 13:02:32: INFO] Executions until ETA known: 2293
[2019-08-02 13:02:32: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:02:32: INFO] Estimated completion (next execution): 2019-08-02 13:19:08 (0:16:35 from now)
[2019-08-02 13:02:32: INFO] Reboot in preparation for next execution
[2019-08-02 13:06:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:06:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:06:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:06:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:06:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:06:48: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:13:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.325 s/op
Iteration   2: 8.171 s/op
Iteration   3: 8.020 s/op
Iteration   4: 7.956 s/op
Iteration   5: 7.991 s/op
Iteration   6: 7.937 s/op
Iteration   7: 7.910 s/op
Iteration   8: 8.032 s/op
Iteration   9: 8.034 s/op
Iteration  10: 8.050 s/op
Iteration  11: 7.993 s/op
Iteration  12: 8.004 s/op
Iteration  13: 7.969 s/op
Iteration  14: 8.025 s/op
Iteration  15: 8.014 s/op
Iteration  16: 7.988 s/op
Iteration  17: 7.881 s/op
Iteration  18: 7.895 s/op
Iteration  19: 8.007 s/op
Iteration  20: 7.937 s/op
Iteration  21: 7.932 s/op
Iteration  22: 7.968 s/op
Iteration  23: 7.868 s/op
Iteration  24: 7.890 s/op
Iteration  25: 7.927 s/op
Iteration  26: 7.902 s/op
Iteration  27: 7.898 s/op
Iteration  28: 7.914 s/op
Iteration  29: 7.910 s/op
Iteration  30: 7.978 s/op
Iteration  31: 7.913 s/op
Iteration  32: 7.926 s/op
Iteration  33: 7.993 s/op
Iteration  34: 7.953 s/op
Iteration  35: 7.914 s/op
Iteration  36: 7.981 s/op
Iteration  37: 7.810 s/op
Iteration  38: 7.937 s/op
Iteration  39: 7.889 s/op
Iteration  40: 7.934 s/op
Iteration  41: 7.978 s/op
Iteration  42: 7.895 s/op
Iteration  43: 7.971 s/op
Iteration  44: 7.921 s/op
Iteration  45: 7.943 s/op
Iteration  46: 7.961 s/op
Iteration  47: 7.939 s/op
Iteration  48: 7.882 s/op
Iteration  49: 7.958 s/op
Iteration  50: 7.937 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.979 ?(99.9%) 0.100 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 40 
    [ 8.000,  8.250) = 9 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.810 s/op
     p(50.0000) =      7.941 s/op
     p(90.0000) =      8.031 s/op
     p(95.0000) =      8.104 s/op
     p(99.0000) =      9.325 s/op
     p(99.9000) =      9.325 s/op
     p(99.9900) =      9.325 s/op
     p(99.9990) =      9.325 s/op
     p(99.9999) =      9.325 s/op
    p(100.0000) =      9.325 s/op


# Run complete. Total time: 00:06:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.979 ? 0.100   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_12.0.1_1564744008656.json
{"wallclock_times": [400.632336336], "core_cycle_counts": [[340487847986], [322362024766], [373548013794], [315326513305]], "aperf_counts": [[339421582554], [322255883854], [373424993351], [315228782057]], "mperf_counts": [[339425088910], [322255858692], [373424971396], [315228768834]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:13:29: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:13:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:13:30: INFO] 394 executions left in scheduler queue
[2019-08-02 13:13:30: INFO] Executions until ETA known: 2287
[2019-08-02 13:13:30: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:13:30: INFO] Estimated completion (next execution): 2019-08-02 13:22:41 (0:09:11 from now)
[2019-08-02 13:13:30: INFO] Reboot in preparation for next execution
[2019-08-02 13:17:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:17:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:17:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:17:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:17:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:17:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:23:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.848 s/op
Iteration   2: 7.008 s/op
Iteration   3: 6.838 s/op
Iteration   4: 8.390 s/op
Iteration   5: 8.151 s/op
Iteration   6: 6.526 s/op
Iteration   7: 6.660 s/op
Iteration   8: 6.663 s/op
Iteration   9: 6.805 s/op
Iteration  10: 6.590 s/op
Iteration  11: 6.563 s/op
Iteration  12: 6.564 s/op
Iteration  13: 6.465 s/op
Iteration  14: 6.552 s/op
Iteration  15: 6.582 s/op
Iteration  16: 6.621 s/op
Iteration  17: 6.498 s/op
Iteration  18: 6.722 s/op
Iteration  19: 6.516 s/op
Iteration  20: 6.456 s/op
Iteration  21: 6.393 s/op
Iteration  22: 6.564 s/op
Iteration  23: 6.506 s/op
Iteration  24: 6.605 s/op
Iteration  25: 6.473 s/op
Iteration  26: 6.382 s/op
Iteration  27: 6.520 s/op
Iteration  28: 6.582 s/op
Iteration  29: 6.601 s/op
Iteration  30: 6.515 s/op
Iteration  31: 6.689 s/op
Iteration  32: 6.581 s/op
Iteration  33: 6.499 s/op
Iteration  34: 6.492 s/op
Iteration  35: 6.511 s/op
Iteration  36: 6.545 s/op
Iteration  37: 6.614 s/op
Iteration  38: 6.501 s/op
Iteration  39: 6.393 s/op
Iteration  40: 6.494 s/op
Iteration  41: 6.480 s/op
Iteration  42: 6.468 s/op
Iteration  43: 6.494 s/op
Iteration  44: 6.476 s/op
Iteration  45: 6.543 s/op
Iteration  46: 6.600 s/op
Iteration  47: 6.512 s/op
Iteration  48: 6.493 s/op
Iteration  49: 6.481 s/op
Iteration  50: 6.537 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.651 ?(99.9%) 0.197 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 16 
    [6.500, 6.750) = 28 
    [6.750, 7.000) = 2 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 1 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.382 s/op
     p(50.0000) =      6.540 s/op
     p(90.0000) =      6.835 s/op
     p(95.0000) =      7.984 s/op
     p(99.0000) =      8.390 s/op
     p(99.9000) =      8.390 s/op
     p(99.9900) =      8.390 s/op
     p(99.9990) =      8.390 s/op
     p(99.9999) =      8.390 s/op
    p(100.0000) =      8.390 s/op


# Run complete. Total time: 00:05:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.651 ? 0.197   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_12.0.1_1564744660343.json
{"wallclock_times": [334.47722134], "core_cycle_counts": [[360111528988], [240022069290], [334997456929], [263735124167]], "aperf_counts": [[359328342196], [239881699978], [334831455506], [263639759996]], "mperf_counts": [[359338830496], [239881661864], [334833315134], [263639743864]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:23:14: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:23:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:23:15: INFO] 393 executions left in scheduler queue
[2019-08-02 13:23:15: INFO] Executions until ETA known: 2281
[2019-08-02 13:23:15: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:23:15: INFO] Estimated completion (next execution): 2019-08-02 13:31:20 (0:08:04 from now)
[2019-08-02 13:23:15: INFO] Reboot in preparation for next execution
[2019-08-02 13:27:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:27:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:27:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:27:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:27:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:27:38: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:32:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.184 s/op
Iteration   2: 6.166 s/op
Iteration   3: 5.452 s/op
Iteration   4: 5.463 s/op
Iteration   5: 5.473 s/op
Iteration   6: 5.499 s/op
Iteration   7: 5.449 s/op
Iteration   8: 5.351 s/op
Iteration   9: 5.299 s/op
Iteration  10: 5.278 s/op
Iteration  11: 5.286 s/op
Iteration  12: 5.325 s/op
Iteration  13: 5.220 s/op
Iteration  14: 5.339 s/op
Iteration  15: 5.305 s/op
Iteration  16: 5.289 s/op
Iteration  17: 5.327 s/op
Iteration  18: 5.293 s/op
Iteration  19: 5.259 s/op
Iteration  20: 5.328 s/op
Iteration  21: 5.325 s/op
Iteration  22: 5.312 s/op
Iteration  23: 5.330 s/op
Iteration  24: 5.305 s/op
Iteration  25: 5.362 s/op
Iteration  26: 5.293 s/op
Iteration  27: 5.341 s/op
Iteration  28: 5.290 s/op
Iteration  29: 5.309 s/op
Iteration  30: 5.296 s/op
Iteration  31: 5.320 s/op
Iteration  32: 5.331 s/op
Iteration  33: 5.306 s/op
Iteration  34: 5.310 s/op
Iteration  35: 5.309 s/op
Iteration  36: 5.327 s/op
Iteration  37: 5.292 s/op
Iteration  38: 5.327 s/op
Iteration  39: 5.299 s/op
Iteration  40: 5.309 s/op
Iteration  41: 5.282 s/op
Iteration  42: 5.230 s/op
Iteration  43: 5.283 s/op
Iteration  44: 5.289 s/op
Iteration  45: 5.275 s/op
Iteration  46: 5.277 s/op
Iteration  47: 5.265 s/op
Iteration  48: 5.248 s/op
Iteration  49: 5.250 s/op
Iteration  50: 5.286 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.371 ?(99.9%) 0.145 s/op

  Histogram, s/op:
    [5.000, 5.250) = 3 
    [5.250, 5.500) = 45 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.220 s/op
     p(50.0000) =      5.307 s/op
     p(90.0000) =      5.462 s/op
     p(95.0000) =      5.799 s/op
     p(99.0000) =      7.184 s/op
     p(99.9000) =      7.184 s/op
     p(99.9900) =      7.184 s/op
     p(99.9990) =      7.184 s/op
     p(99.9999) =      7.184 s/op
    p(100.0000) =      7.184 s/op


# Run complete. Total time: 00:04:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.371 ? 0.145   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_12.0.1_1564745257858.json
{"wallclock_times": [270.510470952], "core_cycle_counts": [[251416220855], [245312329769], [319322337610], [246457448190]], "aperf_counts": [[250586470891], [245171988917], [319178023907], [246345156147]], "mperf_counts": [[250592954346], [245173677984], [319178772464], [246345264404]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:32:08: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:32:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:32:09: INFO] 392 executions left in scheduler queue
[2019-08-02 13:32:09: INFO] Executions until ETA known: 2276
[2019-08-02 13:32:09: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:32:09: INFO] Estimated completion (next execution): 2019-08-02 13:39:10 (0:07:01 from now)
[2019-08-02 13:32:09: INFO] Reboot in preparation for next execution
[2019-08-02 13:36:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 13:36:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 13:36:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 13:36:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 13:36:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 13:36:19: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 13:53:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 21.906 s/op
Iteration   2: 21.098 s/op
Iteration   3: 21.081 s/op
Iteration   4: 21.047 s/op
Iteration   5: 21.049 s/op
Iteration   6: 20.963 s/op
Iteration   7: 20.990 s/op
Iteration   8: 21.116 s/op
Iteration   9: 21.118 s/op
Iteration  10: 21.032 s/op
Iteration  11: 21.048 s/op
Iteration  12: 21.668 s/op
Iteration  13: 21.001 s/op
Iteration  14: 20.981 s/op
Iteration  15: 21.115 s/op
Iteration  16: 20.999 s/op
Iteration  17: 21.063 s/op
Iteration  18: 20.987 s/op
Iteration  19: 21.068 s/op
Iteration  20: 20.983 s/op
Iteration  21: 21.029 s/op
Iteration  22: 20.967 s/op
Iteration  23: 21.027 s/op
Iteration  24: 20.984 s/op
Iteration  25: 21.047 s/op
Iteration  26: 21.027 s/op
Iteration  27: 21.024 s/op
Iteration  28: 21.041 s/op
Iteration  29: 21.104 s/op
Iteration  30: 21.075 s/op
Iteration  31: 21.045 s/op
Iteration  32: 21.003 s/op
Iteration  33: 21.078 s/op
Iteration  34: 21.043 s/op
Iteration  35: 20.938 s/op
Iteration  36: 21.083 s/op
Iteration  37: 20.928 s/op
Iteration  38: 20.983 s/op
Iteration  39: 20.965 s/op
Iteration  40: 21.004 s/op
Iteration  41: 21.149 s/op
Iteration  42: 21.101 s/op
Iteration  43: 20.949 s/op
Iteration  44: 21.062 s/op
Iteration  45: 21.018 s/op
Iteration  46: 21.097 s/op
Iteration  47: 20.996 s/op
Iteration  48: 21.038 s/op
Iteration  49: 20.930 s/op
Iteration  50: 21.034 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     21.062 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [20.900, 21.000) = 15 
    [21.000, 21.100) = 27 
    [21.100, 21.200) = 6 
    [21.200, 21.300) = 0 
    [21.300, 21.400) = 0 
    [21.400, 21.500) = 0 
    [21.500, 21.600) = 0 
    [21.600, 21.700) = 1 
    [21.700, 21.800) = 0 
    [21.800, 21.900) = 0 

  Percentiles, s/op:
      p(0.0000) =     20.928 s/op
     p(50.0000) =     21.036 s/op
     p(90.0000) =     21.116 s/op
     p(95.0000) =     21.383 s/op
     p(99.0000) =     21.906 s/op
     p(99.9000) =     21.906 s/op
     p(99.9900) =     21.906 s/op
     p(99.9990) =     21.906 s/op
     p(99.9999) =     21.906 s/op
    p(100.0000) =     21.906 s/op


# Run complete. Total time: 00:17:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  21.062 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_12.0.1_1564745778851.json
{"wallclock_times": [1054.755555649], "core_cycle_counts": [[907884003357], [934367504059], [663916224716], [900672033232]], "aperf_counts": [[905268040592], [934091193777], [663695387271], [900589274447]], "mperf_counts": [[905273421010], [934093078490], [663695435948], [900589412668]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 13:53:53: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-08-02 13:53:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 13:53:54: INFO] 391 executions left in scheduler queue
[2019-08-02 13:53:54: INFO] Executions until ETA known: 2263
[2019-08-02 13:53:54: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 13:53:54: INFO] Estimated completion (next execution): 2019-08-02 14:13:59 (0:20:05 from now)
[2019-08-02 13:53:54: INFO] Reboot in preparation for next execution
[2019-08-02 13:58:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:03:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.778 s/op
Iteration   2: 7.553 s/op
Iteration   3: 6.743 s/op
Iteration   4: 6.901 s/op
Iteration   5: 6.773 s/op
Iteration   6: 6.720 s/op
Iteration   7: 6.658 s/op
Iteration   8: 6.719 s/op
Iteration   9: 6.731 s/op
Iteration  10: 6.770 s/op
Iteration  11: 6.737 s/op
Iteration  12: 6.717 s/op
Iteration  13: 6.743 s/op
Iteration  14: 6.736 s/op
Iteration  15: 6.581 s/op
Iteration  16: 6.705 s/op
Iteration  17: 6.609 s/op
Iteration  18: 6.751 s/op
Iteration  19: 6.691 s/op
Iteration  20: 6.593 s/op
Iteration  21: 6.694 s/op
Iteration  22: 6.651 s/op
Iteration  23: 6.777 s/op
Iteration  24: 6.649 s/op
Iteration  25: 6.763 s/op
Iteration  26: 6.666 s/op
Iteration  27: 6.645 s/op
Iteration  28: 6.768 s/op
Iteration  29: 6.588 s/op
Iteration  30: 6.777 s/op
Iteration  31: 6.671 s/op
Iteration  32: 6.586 s/op
Iteration  33: 6.746 s/op
Iteration  34: 6.681 s/op
Iteration  35: 6.761 s/op
Iteration  36: 6.658 s/op
Iteration  37: 6.683 s/op
Iteration  38: 6.687 s/op
Iteration  39: 6.613 s/op
Iteration  40: 6.701 s/op
Iteration  41: 6.624 s/op
Iteration  42: 6.722 s/op
Iteration  43: 6.709 s/op
Iteration  44: 6.662 s/op
Iteration  45: 6.738 s/op
Iteration  46: 6.638 s/op
Iteration  47: 6.711 s/op
Iteration  48: 6.671 s/op
Iteration  49: 6.772 s/op
Iteration  50: 6.628 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.757 ?(99.9%) 0.159 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 38 
    [6.750, 7.000) = 10 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 1 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.581 s/op
     p(50.0000) =      6.707 s/op
     p(90.0000) =      6.777 s/op
     p(95.0000) =      7.194 s/op
     p(99.0000) =      8.778 s/op
     p(99.9000) =      8.778 s/op
     p(99.9900) =      8.778 s/op
     p(99.9990) =      8.778 s/op
     p(99.9999) =      8.778 s/op
    p(100.0000) =      8.778 s/op


# Run complete. Total time: 00:05:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.757 ? 0.159   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9-8u222-b10_1564747083589.json
{"wallclock_times": [339.30640214199997], "core_cycle_counts": [[302572897368], [377272616113], [362447626993], [147809696355]], "aperf_counts": [[301673848135], [377130024292], [362380656050], [147733286301]], "mperf_counts": [[301676033798], [377133570690], [362381284820], [147733314726]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:03:42: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:03:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:03:43: INFO] 390 executions left in scheduler queue
[2019-08-02 14:03:43: INFO] Executions until ETA known: 2258
[2019-08-02 14:03:43: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:03:43: INFO] Estimated completion (next execution): 2019-08-02 14:11:53 (0:08:09 from now)
[2019-08-02 14:03:43: INFO] Reboot in preparation for next execution
[2019-08-02 14:07:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:15:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.882 s/op
Iteration   2: 10.322 s/op
Iteration   3: 10.381 s/op
Iteration   4: 10.419 s/op
Iteration   5: 10.330 s/op
Iteration   6: 10.330 s/op
Iteration   7: 10.377 s/op
Iteration   8: 10.248 s/op
Iteration   9: 10.295 s/op
Iteration  10: 10.299 s/op
Iteration  11: 10.383 s/op
Iteration  12: 10.313 s/op
Iteration  13: 10.265 s/op
Iteration  14: 10.349 s/op
Iteration  15: 10.307 s/op
Iteration  16: 10.398 s/op
Iteration  17: 10.364 s/op
Iteration  18: 10.328 s/op
Iteration  19: 10.340 s/op
Iteration  20: 10.284 s/op
Iteration  21: 10.300 s/op
Iteration  22: 10.283 s/op
Iteration  23: 10.283 s/op
Iteration  24: 10.288 s/op
Iteration  25: 10.304 s/op
Iteration  26: 10.298 s/op
Iteration  27: 10.359 s/op
Iteration  28: 10.267 s/op
Iteration  29: 10.292 s/op
Iteration  30: 10.260 s/op
Iteration  31: 10.328 s/op
Iteration  32: 10.375 s/op
Iteration  33: 10.397 s/op
Iteration  34: 10.366 s/op
Iteration  35: 10.384 s/op
Iteration  36: 10.319 s/op
Iteration  37: 10.301 s/op
Iteration  38: 10.370 s/op
Iteration  39: 10.296 s/op
Iteration  40: 10.333 s/op
Iteration  41: 10.204 s/op
Iteration  42: 10.357 s/op
Iteration  43: 10.297 s/op
Iteration  44: 10.369 s/op
Iteration  45: 10.325 s/op
Iteration  46: 10.293 s/op
Iteration  47: 10.347 s/op
Iteration  48: 10.372 s/op
Iteration  49: 10.291 s/op
Iteration  50: 10.325 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.356 ?(99.9%) 0.111 s/op

  Histogram, s/op:
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 2 
    [10.250, 10.375) = 40 
    [10.375, 10.500) = 7 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 
    [10.875, 11.000) = 0 
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.204 s/op
     p(50.0000) =     10.325 s/op
     p(90.0000) =     10.384 s/op
     p(95.0000) =     10.407 s/op
     p(99.0000) =     11.882 s/op
     p(99.9000) =     11.882 s/op
     p(99.9900) =     11.882 s/op
     p(99.9990) =     11.882 s/op
     p(99.9999) =     11.882 s/op
    p(100.0000) =     11.882 s/op


# Run complete. Total time: 00:08:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.356 ? 0.111   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9-8u222-b10_1564747631321.json
{"wallclock_times": [518.959020035], "core_cycle_counts": [[625684700058], [224917930691], [434763896883], [452850072011]], "aperf_counts": [[624567554368], [224753092328], [434619123160], [452767647600]], "mperf_counts": [[624568384866], [224757042690], [434620016068], [452768508078]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:15:50: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:15:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:15:51: INFO] 389 executions left in scheduler queue
[2019-08-02 14:15:51: INFO] Executions until ETA known: 2256
[2019-08-02 14:15:51: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:15:51: INFO] Estimated completion (next execution): 2019-08-02 14:27:00 (0:11:09 from now)
[2019-08-02 14:15:51: INFO] Reboot in preparation for next execution
[2019-08-02 14:20:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:25:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.363 s/op
Iteration   2: 6.410 s/op
Iteration   3: 6.203 s/op
Iteration   4: 6.204 s/op
Iteration   5: 6.332 s/op
Iteration   6: 6.080 s/op
Iteration   7: 6.101 s/op
Iteration   8: 6.035 s/op
Iteration   9: 6.004 s/op
Iteration  10: 5.943 s/op
Iteration  11: 5.981 s/op
Iteration  12: 5.956 s/op
Iteration  13: 5.970 s/op
Iteration  14: 5.995 s/op
Iteration  15: 5.967 s/op
Iteration  16: 5.968 s/op
Iteration  17: 5.970 s/op
Iteration  18: 5.970 s/op
Iteration  19: 5.937 s/op
Iteration  20: 5.969 s/op
Iteration  21: 5.961 s/op
Iteration  22: 5.958 s/op
Iteration  23: 5.951 s/op
Iteration  24: 5.940 s/op
Iteration  25: 5.947 s/op
Iteration  26: 5.952 s/op
Iteration  27: 5.940 s/op
Iteration  28: 5.962 s/op
Iteration  29: 6.021 s/op
Iteration  30: 6.001 s/op
Iteration  31: 5.999 s/op
Iteration  32: 5.893 s/op
Iteration  33: 5.905 s/op
Iteration  34: 5.852 s/op
Iteration  35: 5.952 s/op
Iteration  36: 6.031 s/op
Iteration  37: 5.979 s/op
Iteration  38: 5.992 s/op
Iteration  39: 5.968 s/op
Iteration  40: 5.957 s/op
Iteration  41: 5.948 s/op
Iteration  42: 5.985 s/op
Iteration  43: 5.967 s/op
Iteration  44: 5.985 s/op
Iteration  45: 5.942 s/op
Iteration  46: 5.975 s/op
Iteration  47: 5.959 s/op
Iteration  48: 5.945 s/op
Iteration  49: 5.947 s/op
Iteration  50: 5.990 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.023 ?(99.9%) 0.107 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 38 
    [6.000, 6.250) = 9 
    [6.250, 6.500) = 2 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.852 s/op
     p(50.0000) =      5.969 s/op
     p(90.0000) =      6.193 s/op
     p(95.0000) =      6.367 s/op
     p(99.0000) =      7.363 s/op
     p(99.9000) =      7.363 s/op
     p(99.9900) =      7.363 s/op
     p(99.9990) =      7.363 s/op
     p(99.9999) =      7.363 s/op
    p(100.0000) =      7.363 s/op


# Run complete. Total time: 00:05:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.023 ? 0.107   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9-8u222-b10_1564748400385.json
{"wallclock_times": [302.703238158], "core_cycle_counts": [[237928288141], [352512402579], [194667881727], [333363473942]], "aperf_counts": [[237018371523], [352413205153], [194526212790], [333258028302]], "mperf_counts": [[237020990724], [352415543322], [194526876706], [333258709602]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:25:03: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:25:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:25:04: INFO] 388 executions left in scheduler queue
[2019-08-02 14:25:04: INFO] Executions until ETA known: 2246
[2019-08-02 14:25:04: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:25:04: INFO] Estimated completion (next execution): 2019-08-02 14:32:37 (0:07:32 from now)
[2019-08-02 14:25:04: INFO] Reboot in preparation for next execution
[2019-08-02 14:29:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-02 14:38:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.671 s/op
Iteration   2: 11.199 s/op
Iteration   3: 10.877 s/op
Iteration   4: 11.049 s/op
Iteration   5: 10.919 s/op
Iteration   6: 11.430 s/op
Iteration   7: 11.421 s/op
Iteration   8: 10.750 s/op
Iteration   9: 10.977 s/op
Iteration  10: 10.876 s/op
Iteration  11: 11.506 s/op
Iteration  12: 11.502 s/op
Iteration  13: 10.702 s/op
Iteration  14: 11.501 s/op
Iteration  15: 10.678 s/op
Iteration  16: 11.636 s/op
Iteration  17: 11.445 s/op
Iteration  18: 10.667 s/op
Iteration  19: 10.562 s/op
Iteration  20: 11.348 s/op
Iteration  21: 11.400 s/op
Iteration  22: 10.590 s/op
Iteration  23: 10.605 s/op
Iteration  24: 10.560 s/op
Iteration  25: 10.542 s/op
Iteration  26: 11.451 s/op
Iteration  27: 10.517 s/op
Iteration  28: 10.558 s/op
Iteration  29: 11.289 s/op
Iteration  30: 10.687 s/op
Iteration  31: 10.503 s/op
Iteration  32: 10.697 s/op
Iteration  33: 10.610 s/op
Iteration  34: 10.635 s/op
Iteration  35: 10.696 s/op
Iteration  36: 10.635 s/op
Iteration  37: 10.603 s/op
Iteration  38: 10.703 s/op
Iteration  39: 10.699 s/op
Iteration  40: 10.639 s/op
Iteration  41: 10.619 s/op
Iteration  42: 10.680 s/op
Iteration  43: 10.713 s/op
Iteration  44: 11.327 s/op
Iteration  45: 10.746 s/op
Iteration  46: 11.372 s/op
Iteration  47: 10.466 s/op
Iteration  48: 11.371 s/op
Iteration  49: 10.548 s/op
Iteration  50: 11.225 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.948 ?(99.9%) 0.218 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 1 
    [10.500, 10.750) = 27 
    [10.750, 11.000) = 4 
    [11.000, 11.250) = 3 
    [11.250, 11.500) = 10 
    [11.500, 11.750) = 4 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.466 s/op
     p(50.0000) =     10.708 s/op
     p(90.0000) =     11.496 s/op
     p(95.0000) =     11.565 s/op
     p(99.0000) =     12.671 s/op
     p(99.9000) =     12.671 s/op
     p(99.9900) =     12.671 s/op
     p(99.9990) =     12.671 s/op
     p(99.9999) =     12.671 s/op
    p(100.0000) =     12.671 s/op


# Run complete. Total time: 00:09:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.948 ? 0.218   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9-8u222-b10_1564748951832.json
{"wallclock_times": [548.711534719], "core_cycle_counts": [[554310252447], [386334244357], [428562850554], [424656143047]], "aperf_counts": [[552996558419], [386216628902], [428393610989], [424543441518]], "mperf_counts": [[552999232778], [386216592492], [428393916596], [424546687924]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 14:38:20: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-08-02 14:38:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:38:21: INFO] 387 executions left in scheduler queue
[2019-08-02 14:38:21: INFO] Executions until ETA known: 2206
[2019-08-02 14:38:21: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-08-02 14:38:21: INFO] Estimated completion (next execution): 2019-08-02 14:50:00 (0:11:39 from now)
[2019-08-02 14:38:21: INFO] Reboot in preparation for next execution
[2019-08-02 14:49:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.934 s/op
Iteration   2: 7.805 s/op
Iteration   3: 7.838 s/op
Iteration   4: 7.805 s/op
Iteration   5: 7.801 s/op
Iteration   6: 7.800 s/op
Iteration   7: 7.790 s/op
Iteration   8: 7.802 s/op
Iteration   9: 7.790 s/op
Iteration  10: 7.794 s/op
Iteration  11: 7.789 s/op
Iteration  12: 7.801 s/op
Iteration  13: 7.804 s/op
Iteration  14: 7.796 s/op
Iteration  15: 7.806 s/op
Iteration  16: 7.795 s/op
Iteration  17: 7.790 s/op
Iteration  18: 7.790 s/op
Iteration  19: 7.793 s/op
Iteration  20: 7.791 s/op
Iteration  21: 7.794 s/op
Iteration  22: 7.809 s/op
Iteration  23: 7.808 s/op
Iteration  24: 7.792 s/op
Iteration  25: 7.793 s/op
Iteration  26: 7.793 s/op
Iteration  27: 7.785 s/op
Iteration  28: 7.800 s/op
Iteration  29: 7.809 s/op
Iteration  30: 7.791 s/op
Iteration  31: 7.797 s/op
Iteration  32: 7.798 s/op
Iteration  33: 7.788 s/op
Iteration  34: 7.798 s/op
Iteration  35: 7.790 s/op
Iteration  36: 7.789 s/op
Iteration  37: 7.783 s/op
Iteration  38: 7.789 s/op
Iteration  39: 7.798 s/op
Iteration  40: 7.795 s/op
Iteration  41: 7.788 s/op
Iteration  42: 7.799 s/op
Iteration  43: 7.794 s/op
Iteration  44: 7.802 s/op
Iteration  45: 7.792 s/op
Iteration  46: 7.799 s/op
Iteration  47: 7.783 s/op
Iteration  48: 7.794 s/op
Iteration  49: 7.794 s/op
Iteration  50: 7.789 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      7.799 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [7.700, 7.725) = 0 
    [7.725, 7.750) = 0 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 36 
    [7.800, 7.825) = 12 
    [7.825, 7.850) = 1 
    [7.850, 7.875) = 0 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 1 
    [7.950, 7.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.783 s/op
     p(50.0000) =      7.794 s/op
     p(90.0000) =      7.808 s/op
     p(95.0000) =      7.822 s/op
     p(99.0000) =      7.934 s/op
     p(99.9000) =      7.934 s/op
     p(99.9900) =      7.934 s/op
     p(99.9990) =      7.934 s/op
     p(99.9999) =      7.934 s/op
    p(100.0000) =      7.934 s/op


# Run complete. Total time: 00:06:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  7.799 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_graalvm-ce-19.1.1_1564749752081.json
{"wallclock_times": [390.823583525], "core_cycle_counts": [[318412670468], [282750225822], [399581674121], [258552642584]], "aperf_counts": [[317495069136], [282657524869], [399539041558], [258509434485]], "mperf_counts": [[317512929334], [282658453012], [399547169072], [258528154708]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 14:49:02: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-08-02 14:49:03: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:49:03: INFO] 386 executions left in scheduler queue
[2019-08-02 14:49:03: INFO] Executions until ETA known: 2186
[2019-08-02 14:49:03: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:49:03: INFO] Estimated completion (next execution): 2019-08-02 14:58:04 (0:09:01 from now)
[2019-08-02 14:49:03: INFO] Reboot in preparation for next execution
[2019-08-02 14:53:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.319 s/op
Iteration   2: 0.857 s/op
Iteration   3: 0.834 s/op
Iteration   4: 0.921 s/op
Iteration   5: 0.832 s/op
Iteration   6: 0.833 s/op
Iteration   7: 0.832 s/op
Iteration   8: 0.834 s/op
Iteration   9: 0.835 s/op
Iteration  10: 0.835 s/op
Iteration  11: 0.832 s/op
Iteration  12: 0.838 s/op
Iteration  13: 0.833 s/op
Iteration  14: 0.836 s/op
Iteration  15: 0.830 s/op
Iteration  16: 0.837 s/op
Iteration  17: 0.834 s/op
Iteration  18: 0.835 s/op
Iteration  19: 0.829 s/op
Iteration  20: 0.833 s/op
Iteration  21: 0.834 s/op
Iteration  22: 0.834 s/op
Iteration  23: 0.831 s/op
Iteration  24: 0.833 s/op
Iteration  25: 0.832 s/op
Iteration  26: 0.834 s/op
Iteration  27: 0.833 s/op
Iteration  28: 0.833 s/op
Iteration  29: 0.831 s/op
Iteration  30: 0.832 s/op
Iteration  31: 0.832 s/op
Iteration  32: 0.838 s/op
Iteration  33: 0.831 s/op
Iteration  34: 0.833 s/op
Iteration  35: 0.834 s/op
Iteration  36: 0.830 s/op
Iteration  37: 0.835 s/op
Iteration  38: 0.831 s/op
Iteration  39: 0.827 s/op
Iteration  40: 0.836 s/op
Iteration  41: 0.845 s/op
Iteration  42: 0.842 s/op
Iteration  43: 0.835 s/op
Iteration  44: 0.837 s/op
Iteration  45: 0.834 s/op
Iteration  46: 0.831 s/op
Iteration  47: 0.826 s/op
Iteration  48: 0.830 s/op
Iteration  49: 0.832 s/op
Iteration  50: 0.829 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      0.845 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [0.800, 0.850) = 47 
    [0.850, 0.900) = 1 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.826 s/op
     p(50.0000) =      0.833 s/op
     p(90.0000) =      0.841 s/op
     p(95.0000) =      0.886 s/op
     p(99.0000) =      1.319 s/op
     p(99.9000) =      1.319 s/op
     p(99.9900) =      1.319 s/op
     p(99.9990) =      1.319 s/op
     p(99.9999) =      1.319 s/op
    p(100.0000) =      1.319 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.845 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ee-19.1.1_1564750394130.json
{"wallclock_times": [43.18219185500001], "core_cycle_counts": [[34811879426], [43661498676], [23199214818], [47569060478]], "aperf_counts": [[34644939681], [43638434931], [23172992497], [47552696596]], "mperf_counts": [[34668171322], [43644004046], [23173815644], [47559256364]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 14:53:57: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:53:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:53:58: INFO] 385 executions left in scheduler queue
[2019-08-02 14:53:58: INFO] Executions until ETA known: 2179
[2019-08-02 14:53:58: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:53:58: INFO] Estimated completion (next execution): 2019-08-02 14:57:11 (0:03:13 from now)
[2019-08-02 14:53:58: INFO] Reboot in preparation for next execution
[2019-08-02 14:59:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.773 s/op
Iteration   2: 1.462 s/op
Iteration   3: 1.529 s/op
Iteration   4: 1.419 s/op
Iteration   5: 1.418 s/op
Iteration   6: 1.417 s/op
Iteration   7: 1.418 s/op
Iteration   8: 1.417 s/op
Iteration   9: 1.419 s/op
Iteration  10: 1.416 s/op
Iteration  11: 1.417 s/op
Iteration  12: 1.419 s/op
Iteration  13: 1.417 s/op
Iteration  14: 1.418 s/op
Iteration  15: 1.418 s/op
Iteration  16: 1.419 s/op
Iteration  17: 1.417 s/op
Iteration  18: 1.420 s/op
Iteration  19: 1.420 s/op
Iteration  20: 1.418 s/op
Iteration  21: 1.417 s/op
Iteration  22: 1.417 s/op
Iteration  23: 1.415 s/op
Iteration  24: 1.415 s/op
Iteration  25: 1.416 s/op
Iteration  26: 1.414 s/op
Iteration  27: 1.417 s/op
Iteration  28: 1.416 s/op
Iteration  29: 1.413 s/op
Iteration  30: 1.417 s/op
Iteration  31: 1.416 s/op
Iteration  32: 1.417 s/op
Iteration  33: 1.416 s/op
Iteration  34: 1.416 s/op
Iteration  35: 1.417 s/op
Iteration  36: 1.416 s/op
Iteration  37: 1.417 s/op
Iteration  38: 1.418 s/op
Iteration  39: 1.420 s/op
Iteration  40: 1.419 s/op
Iteration  41: 1.421 s/op
Iteration  42: 1.420 s/op
Iteration  43: 1.418 s/op
Iteration  44: 1.419 s/op
Iteration  45: 1.414 s/op
Iteration  46: 1.414 s/op
Iteration  47: 1.413 s/op
Iteration  48: 1.414 s/op
Iteration  49: 1.416 s/op
Iteration  50: 1.415 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.427 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.400, 1.425) = 47 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 1 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 1 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.413 s/op
     p(50.0000) =      1.417 s/op
     p(90.0000) =      1.420 s/op
     p(95.0000) =      1.492 s/op
     p(99.0000) =      1.773 s/op
     p(99.9000) =      1.773 s/op
     p(99.9900) =      1.773 s/op
     p(99.9990) =      1.773 s/op
     p(99.9999) =      1.773 s/op
    p(100.0000) =      1.773 s/op


# Run complete. Total time: 00:01:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.427 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ee-19.1.1_1564750686319.json
{"wallclock_times": [72.211745949], "core_cycle_counts": [[63898373652], [37519264965], [44586475040], [91237875921]], "aperf_counts": [[63725032531], [37491109275], [44571886198], [91225964859]], "mperf_counts": [[63750507664], [37494146568], [44572212002], [91229759212]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 14:59:18: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-08-02 14:59:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 14:59:19: INFO] 384 executions left in scheduler queue
[2019-08-02 14:59:19: INFO] Executions until ETA known: 2140
[2019-08-02 14:59:19: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-08-02 14:59:19: INFO] Estimated completion (next execution): 2019-08-02 15:03:01 (0:03:42 from now)
[2019-08-02 14:59:19: INFO] Reboot in preparation for next execution
[2019-08-02 15:03:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 15:03:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 15:03:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 15:03:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 15:03:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 15:15:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.641 s/op
Iteration   2: 14.654 s/op
Iteration   3: 14.821 s/op
Iteration   4: 14.500 s/op
Iteration   5: 14.521 s/op
Iteration   6: 14.578 s/op
Iteration   7: 14.523 s/op
Iteration   8: 14.416 s/op
Iteration   9: 14.452 s/op
Iteration  10: 14.421 s/op
Iteration  11: 14.595 s/op
Iteration  12: 14.374 s/op
Iteration  13: 14.495 s/op
Iteration  14: 14.518 s/op
Iteration  15: 14.433 s/op
Iteration  16: 14.440 s/op
Iteration  17: 14.457 s/op
Iteration  18: 14.602 s/op
Iteration  19: 14.454 s/op
Iteration  20: 14.571 s/op
Iteration  21: 14.394 s/op
Iteration  22: 14.512 s/op
Iteration  23: 14.551 s/op
Iteration  24: 14.512 s/op
Iteration  25: 14.416 s/op
Iteration  26: 14.516 s/op
Iteration  27: 14.429 s/op
Iteration  28: 14.621 s/op
Iteration  29: 14.508 s/op
Iteration  30: 14.420 s/op
Iteration  31: 14.512 s/op
Iteration  32: 14.450 s/op
Iteration  33: 14.449 s/op
Iteration  34: 14.617 s/op
Iteration  35: 14.454 s/op
Iteration  36: 14.419 s/op
Iteration  37: 14.519 s/op
Iteration  38: 14.467 s/op
Iteration  39: 14.560 s/op
Iteration  40: 14.452 s/op
Iteration  41: 14.452 s/op
Iteration  42: 14.507 s/op
Iteration  43: 14.591 s/op
Iteration  44: 14.454 s/op
Iteration  45: 14.525 s/op
Iteration  46: 14.496 s/op
Iteration  47: 14.429 s/op
Iteration  48: 14.576 s/op
Iteration  49: 14.446 s/op
Iteration  50: 14.524 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     14.505 ?(99.9%) 0.041 s/op

  Histogram, s/op:
    [14.300, 14.350) = 0 
    [14.350, 14.400) = 2 
    [14.400, 14.450) = 12 
    [14.450, 14.500) = 11 
    [14.500, 14.550) = 12 
    [14.550, 14.600) = 7 
    [14.600, 14.650) = 4 
    [14.650, 14.700) = 1 
    [14.700, 14.750) = 0 
    [14.750, 14.800) = 0 
    [14.800, 14.850) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.374 s/op
     p(50.0000) =     14.503 s/op
     p(90.0000) =     14.616 s/op
     p(95.0000) =     14.647 s/op
     p(99.0000) =     14.821 s/op
     p(99.9000) =     14.821 s/op
     p(99.9900) =     14.821 s/op
     p(99.9990) =     14.821 s/op
     p(99.9999) =     14.821 s/op
    p(100.0000) =     14.821 s/op


# Run complete. Total time: 00:12:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.505 ? 0.041   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot_12.0.2_1564751011141.json
{"wallclock_times": [726.293911302], "core_cycle_counts": [[546298895597], [429682064027], [796464953958], [769691641082]], "aperf_counts": [[544134539996], [429431675235], [796148431405], [769385036265]], "mperf_counts": [[554765039482], [437169679430], [812779923858], [785486567574]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 15:15:37: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-08-02 15:15:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:15:38: INFO] 383 executions left in scheduler queue
[2019-08-02 15:15:38: INFO] Executions until ETA known: 2134
[2019-08-02 15:15:38: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-08-02 15:15:38: INFO] Estimated completion (next execution): 2019-08-02 15:30:14 (0:14:36 from now)
[2019-08-02 15:15:38: INFO] Reboot in preparation for next execution
[2019-08-02 15:20:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 15:20:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 15:20:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 15:20:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 15:20:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 15:30:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.513 s/op
Iteration   2: 13.059 s/op
Iteration   3: 13.325 s/op
Iteration   4: 13.109 s/op
Iteration   5: 13.140 s/op
Iteration   6: 13.105 s/op
Iteration   7: 13.108 s/op
Iteration   8: 13.162 s/op
Iteration   9: 13.014 s/op
Iteration  10: 13.076 s/op
Iteration  11: 13.053 s/op
Iteration  12: 13.069 s/op
Iteration  13: 13.193 s/op
Iteration  14: 12.970 s/op
Iteration  15: 13.154 s/op
Iteration  16: 13.057 s/op
Iteration  17: 13.085 s/op
Iteration  18: 13.056 s/op
Iteration  19: 13.088 s/op
Iteration  20: 13.167 s/op
Iteration  21: 13.095 s/op
Iteration  22: 12.990 s/op
Iteration  23: 13.023 s/op
Iteration  24: 13.039 s/op
Iteration  25: 13.079 s/op
Iteration  26: 13.190 s/op
Iteration  27: 13.083 s/op
Iteration  28: 13.107 s/op
Iteration  29: 13.112 s/op
Iteration  30: 13.080 s/op
Iteration  31: 13.098 s/op
Iteration  32: 13.036 s/op
Iteration  33: 13.188 s/op
Iteration  34: 13.021 s/op
Iteration  35: 13.249 s/op
Iteration  36: 12.960 s/op
Iteration  37: 13.235 s/op
Iteration  38: 13.027 s/op
Iteration  39: 13.052 s/op
Iteration  40: 13.179 s/op
Iteration  41: 13.057 s/op
Iteration  42: 13.099 s/op
Iteration  43: 13.091 s/op
Iteration  44: 13.042 s/op
Iteration  45: 13.093 s/op
Iteration  46: 13.191 s/op
Iteration  47: 13.111 s/op
Iteration  48: 13.075 s/op
Iteration  49: 13.082 s/op
Iteration  50: 13.162 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.107 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [12.900, 12.950) = 0 
    [12.950, 13.000) = 3 
    [13.000, 13.050) = 7 
    [13.050, 13.100) = 20 
    [13.100, 13.150) = 7 
    [13.150, 13.200) = 9 
    [13.200, 13.250) = 2 
    [13.250, 13.300) = 0 
    [13.300, 13.350) = 1 
    [13.350, 13.400) = 0 
    [13.400, 13.450) = 0 
    [13.450, 13.500) = 0 
    [13.500, 13.550) = 1 
    [13.550, 13.600) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.960 s/op
     p(50.0000) =     13.089 s/op
     p(90.0000) =     13.193 s/op
     p(95.0000) =     13.283 s/op
     p(99.0000) =     13.513 s/op
     p(99.9000) =     13.513 s/op
     p(99.9900) =     13.513 s/op
     p(99.9990) =     13.513 s/op
     p(99.9999) =     13.513 s/op
    p(100.0000) =     13.513 s/op


# Run complete. Total time: 00:10:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.107 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_11.0.4_1564752002842.json
{"wallclock_times": [656.415556071], "core_cycle_counts": [[739118412568], [733986090454], [508353592234], [418189071873]], "aperf_counts": [[737595025249], [733779138904], [508235651040], [418093404216]], "mperf_counts": [[738280845312], [734213456592], [508486978168], [418262246140]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 15:30:59: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-08-02 15:31:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:31:00: INFO] 382 executions left in scheduler queue
[2019-08-02 15:31:00: INFO] Executions until ETA known: 2100
[2019-08-02 15:31:00: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:31:00: INFO] Estimated completion (next execution): 2019-08-02 15:44:26 (0:13:26 from now)
[2019-08-02 15:31:00: INFO] Reboot in preparation for next execution
[2019-08-02 15:39:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.635 s/op
Iteration   2: 5.310 s/op
Iteration   3: 5.356 s/op
Iteration   4: 5.350 s/op
Iteration   5: 5.325 s/op
Iteration   6: 5.347 s/op
Iteration   7: 5.335 s/op
Iteration   8: 5.330 s/op
Iteration   9: 5.279 s/op
Iteration  10: 5.313 s/op
Iteration  11: 5.329 s/op
Iteration  12: 5.317 s/op
Iteration  13: 5.327 s/op
Iteration  14: 5.323 s/op
Iteration  15: 5.332 s/op
Iteration  16: 5.293 s/op
Iteration  17: 5.346 s/op
Iteration  18: 5.328 s/op
Iteration  19: 5.338 s/op
Iteration  20: 5.328 s/op
Iteration  21: 5.261 s/op
Iteration  22: 5.338 s/op
Iteration  23: 5.324 s/op
Iteration  24: 5.339 s/op
Iteration  25: 5.333 s/op
Iteration  26: 5.285 s/op
Iteration  27: 5.305 s/op
Iteration  28: 5.327 s/op
Iteration  29: 5.343 s/op
Iteration  30: 5.341 s/op
Iteration  31: 5.340 s/op
Iteration  32: 5.286 s/op
Iteration  33: 5.324 s/op
Iteration  34: 5.337 s/op
Iteration  35: 5.342 s/op
Iteration  36: 5.338 s/op
Iteration  37: 5.355 s/op
Iteration  38: 5.292 s/op
Iteration  39: 5.329 s/op
Iteration  40: 5.338 s/op
Iteration  41: 5.334 s/op
Iteration  42: 5.332 s/op
Iteration  43: 5.291 s/op
Iteration  44: 5.353 s/op
Iteration  45: 5.347 s/op
Iteration  46: 5.347 s/op
Iteration  47: 5.360 s/op
Iteration  48: 5.292 s/op
Iteration  49: 5.359 s/op
Iteration  50: 5.346 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.334 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 8 
    [5.300, 5.350) = 35 
    [5.350, 5.400) = 6 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.261 s/op
     p(50.0000) =      5.333 s/op
     p(90.0000) =      5.355 s/op
     p(95.0000) =      5.359 s/op
     p(99.0000) =      5.635 s/op
     p(99.9000) =      5.635 s/op
     p(99.9900) =      5.635 s/op
     p(99.9990) =      5.635 s/op
     p(99.9999) =      5.635 s/op
    p(100.0000) =      5.635 s/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.334 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_graalvm-ee-19.1.1_1564752927951.json
{"wallclock_times": [267.79903196099997], "core_cycle_counts": [[292968965563], [251140159995], [148451825622], [242645711535]], "aperf_counts": [[292326477688], [251057308803], [148391811351], [242603011899]], "mperf_counts": [[292345892366], [251060537810], [148397568356], [242604947928]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 15:39:55: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:39:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:39:56: INFO] 381 executions left in scheduler queue
[2019-08-02 15:39:56: INFO] Executions until ETA known: 2081
[2019-08-02 15:39:56: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:39:56: INFO] Estimated completion (next execution): 2019-08-02 15:46:54 (0:06:58 from now)
[2019-08-02 15:39:56: INFO] Reboot in preparation for next execution
[2019-08-02 15:51:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.442 s/op
Iteration   2: 9.376 s/op
Iteration   3: 9.352 s/op
Iteration   4: 9.349 s/op
Iteration   5: 9.287 s/op
Iteration   6: 9.312 s/op
Iteration   7: 9.248 s/op
Iteration   8: 9.213 s/op
Iteration   9: 9.313 s/op
Iteration  10: 9.324 s/op
Iteration  11: 9.304 s/op
Iteration  12: 9.313 s/op
Iteration  13: 9.293 s/op
Iteration  14: 9.322 s/op
Iteration  15: 9.327 s/op
Iteration  16: 9.300 s/op
Iteration  17: 9.377 s/op
Iteration  18: 9.281 s/op
Iteration  19: 9.318 s/op
Iteration  20: 9.326 s/op
Iteration  21: 9.369 s/op
Iteration  22: 9.322 s/op
Iteration  23: 9.264 s/op
Iteration  24: 9.334 s/op
Iteration  25: 9.292 s/op
Iteration  26: 9.318 s/op
Iteration  27: 9.282 s/op
Iteration  28: 9.380 s/op
Iteration  29: 9.343 s/op
Iteration  30: 9.293 s/op
Iteration  31: 9.246 s/op
Iteration  32: 9.375 s/op
Iteration  33: 9.261 s/op
Iteration  34: 9.259 s/op
Iteration  35: 9.351 s/op
Iteration  36: 9.266 s/op
Iteration  37: 9.265 s/op
Iteration  38: 9.297 s/op
Iteration  39: 9.297 s/op
Iteration  40: 9.268 s/op
Iteration  41: 9.245 s/op
Iteration  42: 9.343 s/op
Iteration  43: 9.279 s/op
Iteration  44: 9.301 s/op
Iteration  45: 9.300 s/op
Iteration  46: 9.280 s/op
Iteration  47: 9.280 s/op
Iteration  48: 9.294 s/op
Iteration  49: 9.308 s/op
Iteration  50: 9.299 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.308 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [9.200, 9.225) = 1 
    [9.225, 9.250) = 3 
    [9.250, 9.275) = 6 
    [9.275, 9.300) = 13 
    [9.300, 9.325) = 13 
    [9.325, 9.350) = 6 
    [9.350, 9.375) = 3 
    [9.375, 9.400) = 4 
    [9.400, 9.425) = 0 
    [9.425, 9.450) = 1 
    [9.450, 9.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.213 s/op
     p(50.0000) =      9.301 s/op
     p(90.0000) =      9.375 s/op
     p(95.0000) =      9.378 s/op
     p(99.0000) =      9.442 s/op
     p(99.9000) =      9.442 s/op
     p(99.9900) =      9.442 s/op
     p(99.9990) =      9.442 s/op
     p(99.9999) =      9.442 s/op
    p(100.0000) =      9.442 s/op


# Run complete. Total time: 00:07:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.308 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_graalvm-ee-19.1.1_1564753409936.json
{"wallclock_times": [466.2894694270001], "core_cycle_counts": [[218393248196], [389818367820], [495845282335], [398153043127]], "aperf_counts": [[217184769041], [389748561570], [495815849626], [398128475913]], "mperf_counts": [[217195334420], [389749263760], [495817713096], [398132027422]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 15:51:16: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:51:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:51:17: INFO] 380 executions left in scheduler queue
[2019-08-02 15:51:17: INFO] Executions until ETA known: 2075
[2019-08-02 15:51:17: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:51:17: INFO] Estimated completion (next execution): 2019-08-02 16:01:33 (0:10:16 from now)
[2019-08-02 15:51:17: INFO] Reboot in preparation for next execution
[2019-08-02 15:59:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.053 s/op
Iteration   2: 4.952 s/op
Iteration   3: 4.798 s/op
Iteration   4: 4.775 s/op
Iteration   5: 4.792 s/op
Iteration   6: 4.773 s/op
Iteration   7: 4.789 s/op
Iteration   8: 4.784 s/op
Iteration   9: 4.761 s/op
Iteration  10: 4.765 s/op
Iteration  11: 4.763 s/op
Iteration  12: 4.774 s/op
Iteration  13: 4.777 s/op
Iteration  14: 4.774 s/op
Iteration  15: 4.784 s/op
Iteration  16: 4.775 s/op
Iteration  17: 4.773 s/op
Iteration  18: 4.788 s/op
Iteration  19: 4.775 s/op
Iteration  20: 4.796 s/op
Iteration  21: 4.809 s/op
Iteration  22: 4.827 s/op
Iteration  23: 4.783 s/op
Iteration  24: 4.781 s/op
Iteration  25: 4.777 s/op
Iteration  26: 4.795 s/op
Iteration  27: 4.805 s/op
Iteration  28: 4.765 s/op
Iteration  29: 4.787 s/op
Iteration  30: 4.779 s/op
Iteration  31: 4.797 s/op
Iteration  32: 4.770 s/op
Iteration  33: 4.798 s/op
Iteration  34: 4.792 s/op
Iteration  35: 4.774 s/op
Iteration  36: 4.795 s/op
Iteration  37: 4.803 s/op
Iteration  38: 4.838 s/op
Iteration  39: 4.802 s/op
Iteration  40: 4.778 s/op
Iteration  41: 4.807 s/op
Iteration  42: 4.798 s/op
Iteration  43: 4.779 s/op
Iteration  44: 4.832 s/op
Iteration  45: 4.809 s/op
Iteration  46: 4.807 s/op
Iteration  47: 4.800 s/op
Iteration  48: 4.780 s/op
Iteration  49: 4.788 s/op
Iteration  50: 4.787 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.797 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [4.700, 4.725) = 0 
    [4.725, 4.750) = 0 
    [4.750, 4.775) = 12 
    [4.775, 4.800) = 25 
    [4.800, 4.825) = 8 
    [4.825, 4.850) = 3 
    [4.850, 4.875) = 0 
    [4.875, 4.900) = 0 
    [4.900, 4.925) = 0 
    [4.925, 4.950) = 0 
    [4.950, 4.975) = 1 
    [4.975, 5.000) = 0 
    [5.000, 5.025) = 0 
    [5.025, 5.050) = 0 
    [5.050, 5.075) = 1 
    [5.075, 5.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.761 s/op
     p(50.0000) =      4.787 s/op
     p(90.0000) =      4.825 s/op
     p(95.0000) =      4.889 s/op
     p(99.0000) =      5.053 s/op
     p(99.9000) =      5.053 s/op
     p(99.9900) =      5.053 s/op
     p(99.9990) =      5.053 s/op
     p(99.9999) =      5.053 s/op
    p(100.0000) =      5.053 s/op


# Run complete. Total time: 00:04:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.797 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_graalvm-ee-19.1.1_1564754150206.json
{"wallclock_times": [240.833959109], "core_cycle_counts": [[198529394074], [244690814468], [213461337755], [126113182400]], "aperf_counts": [[197962944756], [244642261301], [213434530535], [126090493362]], "mperf_counts": [[197980343908], [244647108766], [213434767930], [126095470128]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 15:59:51: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:59:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 15:59:51: INFO] 379 executions left in scheduler queue
[2019-08-02 15:59:51: INFO] Executions until ETA known: 2073
[2019-08-02 15:59:51: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 15:59:51: INFO] Estimated completion (next execution): 2019-08-02 16:06:23 (0:06:31 from now)
[2019-08-02 15:59:51: INFO] Reboot in preparation for next execution
[2019-08-02 16:10:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.811 s/op
Iteration   2: 7.637 s/op
Iteration   3: 7.615 s/op
Iteration   4: 7.533 s/op
Iteration   5: 7.553 s/op
Iteration   6: 7.564 s/op
Iteration   7: 7.583 s/op
Iteration   8: 7.553 s/op
Iteration   9: 7.552 s/op
Iteration  10: 7.565 s/op
Iteration  11: 7.542 s/op
Iteration  12: 7.575 s/op
Iteration  13: 7.585 s/op
Iteration  14: 7.548 s/op
Iteration  15: 7.545 s/op
Iteration  16: 7.625 s/op
Iteration  17: 7.542 s/op
Iteration  18: 7.527 s/op
Iteration  19: 7.521 s/op
Iteration  20: 7.527 s/op
Iteration  21: 7.545 s/op
Iteration  22: 7.528 s/op
Iteration  23: 7.528 s/op
Iteration  24: 7.482 s/op
Iteration  25: 7.525 s/op
Iteration  26: 7.532 s/op
Iteration  27: 7.533 s/op
Iteration  28: 7.540 s/op
Iteration  29: 7.534 s/op
Iteration  30: 7.543 s/op
Iteration  31: 7.513 s/op
Iteration  32: 7.523 s/op
Iteration  33: 7.520 s/op
Iteration  34: 7.520 s/op
Iteration  35: 7.531 s/op
Iteration  36: 7.524 s/op
Iteration  37: 7.526 s/op
Iteration  38: 7.517 s/op
Iteration  39: 7.515 s/op
Iteration  40: 7.526 s/op
Iteration  41: 7.524 s/op
Iteration  42: 7.524 s/op
Iteration  43: 7.526 s/op
Iteration  44: 7.530 s/op
Iteration  45: 7.547 s/op
Iteration  46: 7.553 s/op
Iteration  47: 7.450 s/op
Iteration  48: 7.598 s/op
Iteration  49: 7.525 s/op
Iteration  50: 7.522 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.546 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [7.400, 7.450) = 0 
    [7.450, 7.500) = 2 
    [7.500, 7.550) = 34 
    [7.550, 7.600) = 10 
    [7.600, 7.650) = 3 
    [7.650, 7.700) = 0 
    [7.700, 7.750) = 0 
    [7.750, 7.800) = 0 
    [7.800, 7.850) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.450 s/op
     p(50.0000) =      7.532 s/op
     p(90.0000) =      7.597 s/op
     p(95.0000) =      7.630 s/op
     p(99.0000) =      7.811 s/op
     p(99.9000) =      7.811 s/op
     p(99.9900) =      7.811 s/op
     p(99.9990) =      7.811 s/op
     p(99.9999) =      7.811 s/op
    p(100.0000) =      7.811 s/op


# Run complete. Total time: 00:06:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  7.546 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_graalvm-ee-19.1.1_1564754642591.json
{"wallclock_times": [378.239116754], "core_cycle_counts": [[340997255936], [259894193284], [330106658878], [299864341652]], "aperf_counts": [[340144199434], [259821645599], [330079967490], [299831766310]], "mperf_counts": [[340170322940], [259821824408], [330082743184], [299833587436]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 16:10:20: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-08-02 16:10:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:10:21: INFO] 378 executions left in scheduler queue
[2019-08-02 16:10:21: INFO] Executions until ETA known: 2042
[2019-08-02 16:10:21: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-08-02 16:10:21: INFO] Estimated completion (next execution): 2019-08-02 16:19:10 (0:08:48 from now)
[2019-08-02 16:10:21: INFO] Reboot in preparation for next execution
[2019-08-02 16:15:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:15:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:15:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:15:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:15:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:15:12: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 16:31:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.235 s/op
Iteration   2: 17.462 s/op
Iteration   3: 19.077 s/op
Iteration   4: 18.190 s/op
Iteration   5: 18.122 s/op
Iteration   6: 18.170 s/op
Iteration   7: 19.826 s/op
Iteration   8: 19.799 s/op
Iteration   9: 19.838 s/op
Iteration  10: 19.790 s/op
Iteration  11: 19.799 s/op
Iteration  12: 19.853 s/op
Iteration  13: 19.780 s/op
Iteration  14: 19.810 s/op
Iteration  15: 19.808 s/op
Iteration  16: 19.795 s/op
Iteration  17: 19.809 s/op
Iteration  18: 19.842 s/op
Iteration  19: 19.794 s/op
Iteration  20: 19.788 s/op
Iteration  21: 19.812 s/op
Iteration  22: 19.852 s/op
Iteration  23: 19.789 s/op
Iteration  24: 19.813 s/op
Iteration  25: 19.837 s/op
Iteration  26: 19.860 s/op
Iteration  27: 19.847 s/op
Iteration  28: 19.794 s/op
Iteration  29: 19.818 s/op
Iteration  30: 19.786 s/op
Iteration  31: 19.821 s/op
Iteration  32: 19.786 s/op
Iteration  33: 19.820 s/op
Iteration  34: 19.809 s/op
Iteration  35: 19.775 s/op
Iteration  36: 19.821 s/op
Iteration  37: 19.862 s/op
Iteration  38: 19.837 s/op
Iteration  39: 19.822 s/op
Iteration  40: 19.856 s/op
Iteration  41: 19.777 s/op
Iteration  42: 19.844 s/op
Iteration  43: 19.824 s/op
Iteration  44: 19.866 s/op
Iteration  45: 19.812 s/op
Iteration  46: 19.873 s/op
Iteration  47: 19.812 s/op
Iteration  48: 19.823 s/op
Iteration  49: 19.809 s/op
Iteration  50: 19.793 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     19.645 ?(99.9%) 0.257 s/op

  Histogram, s/op:
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 1 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 3 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 
    [18.750, 19.000) = 0 
    [19.000, 19.250) = 2 
    [19.250, 19.500) = 0 
    [19.500, 19.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     17.462 s/op
     p(50.0000) =     19.811 s/op
     p(90.0000) =     19.856 s/op
     p(95.0000) =     19.863 s/op
     p(99.0000) =     19.873 s/op
     p(99.9000) =     19.873 s/op
     p(99.9900) =     19.873 s/op
     p(99.9990) =     19.873 s/op
     p(99.9999) =     19.873 s/op
    p(100.0000) =     19.873 s/op


# Run complete. Total time: 00:16:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  19.645 ? 0.257   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_12.0.1_1564755312347.json
{"wallclock_times": [983.8342024929999], "core_cycle_counts": [[486088133435], [660635814863], [698412398901], [1338167007701]], "aperf_counts": [[483174497534], [660500855628], [698225759042], [1338041970914]], "mperf_counts": [[483182167978], [660501799686], [698228282988], [1338042029002]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 16:31:36: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-08-02 16:31:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:31:37: INFO] 377 executions left in scheduler queue
[2019-08-02 16:31:37: INFO] Executions until ETA known: 2026
[2019-08-02 16:31:37: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:31:37: INFO] Estimated completion (next execution): 2019-08-02 16:50:31 (0:18:54 from now)
[2019-08-02 16:31:37: INFO] Reboot in preparation for next execution
[2019-08-02 16:37:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:37:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:37:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:37:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:37:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:38:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.467 s/op
Iteration   2: 2.355 s/op
Iteration   3: 1.957 s/op
Iteration   4: 1.926 s/op
Iteration   5: 2.062 s/op
Iteration   6: 2.054 s/op
Iteration   7: 2.058 s/op
Iteration   8: 2.064 s/op
Iteration   9: 2.055 s/op
Iteration  10: 2.015 s/op
Iteration  11: 2.070 s/op
Iteration  12: 2.053 s/op
Iteration  13: 2.046 s/op
Iteration  14: 2.053 s/op
Iteration  15: 2.060 s/op
Iteration  16: 2.054 s/op
Iteration  17: 2.050 s/op
Iteration  18: 2.054 s/op
Iteration  19: 1.983 s/op
Iteration  20: 2.067 s/op
Iteration  21: 2.049 s/op
Iteration  22: 1.936 s/op
Iteration  23: 2.054 s/op
Iteration  24: 2.052 s/op
Iteration  25: 2.048 s/op
Iteration  26: 1.902 s/op
Iteration  27: 1.958 s/op
Iteration  28: 2.050 s/op
Iteration  29: 2.046 s/op
Iteration  30: 2.047 s/op
Iteration  31: 2.054 s/op
Iteration  32: 2.051 s/op
Iteration  33: 2.053 s/op
Iteration  34: 2.007 s/op
Iteration  35: 2.052 s/op
Iteration  36: 2.037 s/op
Iteration  37: 2.053 s/op
Iteration  38: 2.045 s/op
Iteration  39: 2.052 s/op
Iteration  40: 2.055 s/op
Iteration  41: 2.052 s/op
Iteration  42: 2.043 s/op
Iteration  43: 2.054 s/op
Iteration  44: 2.012 s/op
Iteration  45: 2.055 s/op
Iteration  46: 2.043 s/op
Iteration  47: 2.017 s/op
Iteration  48: 2.026 s/op
Iteration  49: 2.055 s/op
Iteration  50: 2.045 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.050 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [1.900, 1.950) = 3 
    [1.950, 2.000) = 3 
    [2.000, 2.050) = 15 
    [2.050, 2.100) = 27 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.902 s/op
     p(50.0000) =      2.052 s/op
     p(90.0000) =      2.064 s/op
     p(95.0000) =      2.198 s/op
     p(99.0000) =      2.467 s/op
     p(99.9000) =      2.467 s/op
     p(99.9900) =      2.467 s/op
     p(99.9990) =      2.467 s/op
     p(99.9999) =      2.467 s/op
    p(100.0000) =      2.467 s/op


# Run complete. Total time: 00:01:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.050 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_12.0.2_1564756631817.json
{"wallclock_times": [103.510301865], "core_cycle_counts": [[94992570849], [50964191469], [70950301513], [91468230749]], "aperf_counts": [[94696420537], [50913763580], [70933270218], [91451770196]], "mperf_counts": [[107342281092], [57176195100], [79660123938], [103081927598]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 16:38:55: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:38:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:38:56: INFO] 376 executions left in scheduler queue
[2019-08-02 16:38:56: INFO] Executions until ETA known: 2019
[2019-08-02 16:38:56: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:38:56: INFO] Estimated completion (next execution): 2019-08-02 16:43:10 (0:04:13 from now)
[2019-08-02 16:38:56: INFO] Reboot in preparation for next execution
[2019-08-02 16:44:38: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:44:38: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:44:38: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:44:38: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:44:38: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:46:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.447 s/op
Iteration   2: 2.236 s/op
Iteration   3: 2.342 s/op
Iteration   4: 2.362 s/op
Iteration   5: 2.325 s/op
Iteration   6: 2.184 s/op
Iteration   7: 2.169 s/op
Iteration   8: 2.165 s/op
Iteration   9: 2.168 s/op
Iteration  10: 2.166 s/op
Iteration  11: 2.169 s/op
Iteration  12: 2.167 s/op
Iteration  13: 2.167 s/op
Iteration  14: 2.169 s/op
Iteration  15: 2.168 s/op
Iteration  16: 2.166 s/op
Iteration  17: 2.161 s/op
Iteration  18: 2.163 s/op
Iteration  19: 2.164 s/op
Iteration  20: 2.163 s/op
Iteration  21: 2.162 s/op
Iteration  22: 2.162 s/op
Iteration  23: 2.163 s/op
Iteration  24: 2.162 s/op
Iteration  25: 2.163 s/op
Iteration  26: 2.164 s/op
Iteration  27: 2.164 s/op
Iteration  28: 2.164 s/op
Iteration  29: 2.163 s/op
Iteration  30: 2.162 s/op
Iteration  31: 2.162 s/op
Iteration  32: 2.164 s/op
Iteration  33: 2.162 s/op
Iteration  34: 2.161 s/op
Iteration  35: 2.167 s/op
Iteration  36: 2.167 s/op
Iteration  37: 2.163 s/op
Iteration  38: 2.162 s/op
Iteration  39: 2.163 s/op
Iteration  40: 2.161 s/op
Iteration  41: 2.163 s/op
Iteration  42: 2.165 s/op
Iteration  43: 2.165 s/op
Iteration  44: 2.163 s/op
Iteration  45: 2.163 s/op
Iteration  46: 2.164 s/op
Iteration  47: 2.168 s/op
Iteration  48: 2.163 s/op
Iteration  49: 2.165 s/op
Iteration  50: 2.161 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.182 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [2.100, 2.125) = 0 
    [2.125, 2.150) = 0 
    [2.150, 2.175) = 44 
    [2.175, 2.200) = 1 
    [2.200, 2.225) = 0 
    [2.225, 2.250) = 1 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 0 
    [2.300, 2.325) = 1 
    [2.325, 2.350) = 1 
    [2.350, 2.375) = 1 
    [2.375, 2.400) = 0 
    [2.400, 2.425) = 0 
    [2.425, 2.450) = 1 
    [2.450, 2.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.161 s/op
     p(50.0000) =      2.164 s/op
     p(90.0000) =      2.231 s/op
     p(95.0000) =      2.351 s/op
     p(99.0000) =      2.447 s/op
     p(99.9000) =      2.447 s/op
     p(99.9900) =      2.447 s/op
     p(99.9990) =      2.447 s/op
     p(99.9999) =      2.447 s/op
    p(100.0000) =      2.447 s/op


# Run complete. Total time: 00:01:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.182 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_12.0.2_1564757078863.json
{"wallclock_times": [110.06992964200003], "core_cycle_counts": [[93905397324], [49046526889], [143611693046], [74085526585]], "aperf_counts": [[93625247538], [49012240337], [143587014500], [74065818455]], "mperf_counts": [[94138789160], [49185416524], [143747025484], [74163480260]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-02 16:46:28: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-08-02 16:46:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 16:46:29: INFO] 375 executions left in scheduler queue
[2019-08-02 16:46:29: INFO] Executions until ETA known: 2003
[2019-08-02 16:46:29: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-08-02 16:46:29: INFO] Estimated completion (next execution): 2019-08-02 16:50:50 (0:04:20 from now)
[2019-08-02 16:46:29: INFO] Reboot in preparation for next execution
[2019-08-02 16:51:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-02 16:51:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-02 16:51:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-02 16:51:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-02 16:51:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-02 16:51:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-02 17:03:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.434 s/op
Iteration   2: 13.541 s/op
Iteration   3: 13.780 s/op
Iteration   4: 13.815 s/op
Iteration   5: 13.801 s/op
Iteration   6: 13.821 s/op
Iteration   7: 13.866 s/op
Iteration   8: 13.931 s/op
Iteration   9: 13.917 s/op
Iteration  10: 13.861 s/op
Iteration  11: 13.873 s/op
Iteration  12: 13.828 s/op
Iteration  13: 13.856 s/op
Iteration  14: 13.826 s/op
Iteration  15: 13.874 s/op
Iteration  16: 13.848 s/op
Iteration  17: 13.831 s/op
Iteration  18: 13.852 s/op
Iteration  19: 13.854 s/op
Iteration  20: 13.837 s/op
Iteration  21: 13.836 s/op
Iteration  22: 13.818 s/op
Iteration  23: 13.817 s/op
Iteration  24: 13.810 s/op
Iteration  25: 13.863 s/op
Iteration  26: 13.861 s/op
Iteration  27: 13.837 s/op
Iteration  28: 13.830 s/op
Iteration  29: 13.855 s/op
Iteration  30: 13.847 s/op
Iteration  31: 13.845 s/op
Iteration  32: 13.819 s/op
Iteration  33: 13.825 s/op
Iteration  34: 13.866 s/op
Iteration  35: 13.847 s/op
Iteration  36: 13.846 s/op
Iteration  37: 13.867 s/op
Iteration  38: 13.854 s/op
Iteration  39: 13.844 s/op
Iteration  40: 13.882 s/op
Iteration  41: 13.921 s/op
Iteration  42: 13.913 s/op
Iteration  43: 13.841 s/op
Iteration  44: 13.874 s/op
Iteration  45: 13.843 s/op
Iteration  46: 13.876 s/op
Iteration  47: 13.860 s/op
Iteration  48: 13.836 s/op
Iteration  49: 13.851 s/op
Iteration  50: 13.929 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.857 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [13.500, 13.600) = 1 
    [13.600, 13.700) = 0 
    [13.700, 13.800) = 1 
    [13.800, 13.900) = 42 
    [13.900, 14.000) = 5 
    [14.000, 14.100) = 0 
    [14.100, 14.200) = 0 
    [14.200, 14.300) = 0 
    [14.300, 14.400) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.541 s/op
     p(50.0000) =     13.848 s/op
     p(90.0000) =     13.917 s/op
     p(95.0000) =     13.930 s/op
     p(99.0000) =     14.434 s/op
     p(99.9000) =     14.434 s/op
     p(99.9900) =     14.434 s/op
     p(99.9990) =     14.434 s/op
     p(99.9999) =     14.434 s/op
    p(100.0000) =     14.434 s/op


# Run complete. Total time: 00:11:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.857 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_12.0.1_1564757518670.json
{"wallclock_times": [694.4322593190001], "core_cycle_counts": [[600347444109], [393027860797], [387505115546], [868638245244]], "aperf_counts": [[598548762034], [392837143945], [387348217382], [868539289294]], "mperf_counts": [[598554238772], [392837374652], [387348407242], [868539839204]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-02 17:03:33: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-08-02 17:03:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 17:03:34: INFO] 374 executions left in scheduler queue
[2019-08-02 17:03:34: INFO] Executions until ETA known: 1974
[2019-08-02 17:03:34: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-08-02 17:03:34: INFO] Estimated completion (next execution): 2019-08-02 17:17:39 (0:14:04 from now)
[2019-08-02 17:03:34: INFO] Reboot in preparation for next execution
[2019-08-02 17:18:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.287 s/op
Iteration   2: 12.011 s/op
Iteration   3: 11.847 s/op
Iteration   4: 11.881 s/op
Iteration   5: 12.194 s/op
Iteration   6: 11.827 s/op
Iteration   7: 11.890 s/op
Iteration   8: 11.927 s/op
Iteration   9: 11.944 s/op
Iteration  10: 12.021 s/op
Iteration  11: 11.843 s/op
Iteration  12: 12.601 s/op
Iteration  13: 11.881 s/op
Iteration  14: 11.902 s/op
Iteration  15: 11.916 s/op
Iteration  16: 11.955 s/op
Iteration  17: 11.819 s/op
Iteration  18: 11.848 s/op
Iteration  19: 11.927 s/op
Iteration  20: 11.949 s/op
Iteration  21: 11.922 s/op
Iteration  22: 12.012 s/op
Iteration  23: 12.732 s/op
Iteration  24: 11.842 s/op
Iteration  25: 11.908 s/op
Iteration  26: 11.934 s/op
Iteration  27: 11.892 s/op
Iteration  28: 11.949 s/op
Iteration  29: 12.019 s/op
Iteration  30: 11.820 s/op
Iteration  31: 11.886 s/op
Iteration  32: 11.879 s/op
Iteration  33: 11.949 s/op
Iteration  34: 12.429 s/op
Iteration  35: 11.932 s/op
Iteration  36: 11.777 s/op
Iteration  37: 11.833 s/op
Iteration  38: 11.904 s/op
Iteration  39: 11.898 s/op
Iteration  40: 11.939 s/op
Iteration  41: 11.995 s/op
Iteration  42: 12.033 s/op
Iteration  43: 11.825 s/op
Iteration  44: 11.922 s/op
Iteration  45: 12.497 s/op
Iteration  46: 11.894 s/op
Iteration  47: 11.904 s/op
Iteration  48: 11.996 s/op
Iteration  49: 11.807 s/op
Iteration  50: 11.839 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.973 ?(99.9%) 0.099 s/op

  Histogram, s/op:
    [11.700, 11.800) = 1 
    [11.800, 11.900) = 19 
    [11.900, 12.000) = 19 
    [12.000, 12.100) = 5 
    [12.100, 12.200) = 1 
    [12.200, 12.300) = 1 
    [12.300, 12.400) = 0 
    [12.400, 12.500) = 2 
    [12.500, 12.600) = 0 
    [12.600, 12.700) = 1 

  Percentiles, s/op:
      p(0.0000) =     11.777 s/op
     p(50.0000) =     11.919 s/op
     p(90.0000) =     12.278 s/op
     p(95.0000) =     12.544 s/op
     p(99.0000) =     12.732 s/op
     p(99.9000) =     12.732 s/op
     p(99.9900) =     12.732 s/op
     p(99.9990) =     12.732 s/op
     p(99.9999) =     12.732 s/op
    p(100.0000) =     12.732 s/op


# Run complete. Total time: 00:09:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.973 ? 0.099   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot-8u222-b10_1564758498599.json
{"wallclock_times": [599.8193089050001], "core_cycle_counts": [[605045163697], [597028188304], [508134788229], [516539222008]], "aperf_counts": [[603479900178], [596859526569], [508037469516], [516452998233]], "mperf_counts": [[603483451838], [596865792464], [508041700314], [516453093318]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-02 17:18:18: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-08-02 17:18:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-02 17:18:19: INFO] 373 executions left in scheduler queue
[2019-08-02 17:18:19: INFO] Executions until ETA known: 1918
[2019-08-02 17:18:19: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-08-02 17:18:19: INFO] Estimated completion (next execution): 2019-08-02 17:30:49 (0:12:30 from now)
[2019-08-02 17:18:19: INFO] Reboot in preparation for next execution
