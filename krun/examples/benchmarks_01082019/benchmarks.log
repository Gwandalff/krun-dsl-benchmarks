[2019-07-30 17:39:24: INFO] Wait 1 secs to allow system to cool prior to collecting initial temperature readings
[2019-07-30 17:43:44: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 17:43:44: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 17:43:44: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 17:43:44: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 17:43:44: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 17:53:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.891 s/op
Iteration   2: 12.311 s/op
Iteration   3: 12.373 s/op
Iteration   4: 12.260 s/op
Iteration   5: 12.228 s/op
Iteration   6: 12.140 s/op
Iteration   7: 12.204 s/op
Iteration   8: 12.286 s/op
Iteration   9: 12.065 s/op
Iteration  10: 12.235 s/op
Iteration  11: 12.088 s/op
Iteration  12: 12.089 s/op
Iteration  13: 12.249 s/op
Iteration  14: 12.127 s/op
Iteration  15: 12.353 s/op
Iteration  16: 11.996 s/op
Iteration  17: 12.155 s/op
Iteration  18: 12.208 s/op
Iteration  19: 12.098 s/op
Iteration  20: 12.207 s/op
Iteration  21: 12.156 s/op
Iteration  22: 12.285 s/op
Iteration  23: 12.100 s/op
Iteration  24: 12.093 s/op
Iteration  25: 12.276 s/op
Iteration  26: 12.133 s/op
Iteration  27: 12.242 s/op
Iteration  28: 12.142 s/op
Iteration  29: 12.151 s/op
Iteration  30: 12.208 s/op
Iteration  31: 12.138 s/op
Iteration  32: 12.259 s/op
Iteration  33: 12.073 s/op
Iteration  34: 12.298 s/op
Iteration  35: 12.177 s/op
Iteration  36: 12.112 s/op
Iteration  37: 12.252 s/op
Iteration  38: 12.086 s/op
Iteration  39: 12.229 s/op
Iteration  40: 12.167 s/op
Iteration  41: 12.183 s/op
Iteration  42: 12.141 s/op
Iteration  43: 12.117 s/op
Iteration  44: 12.266 s/op
Iteration  45: 12.249 s/op
Iteration  46: 12.171 s/op
Iteration  47: 12.203 s/op
Iteration  48: 12.201 s/op
Iteration  49: 12.082 s/op
Iteration  50: 12.128 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.198 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [11.900, 12.000) = 1 
    [12.000, 12.100) = 8 
    [12.100, 12.200) = 17 
    [12.200, 12.300) = 20 
    [12.300, 12.400) = 3 
    [12.400, 12.500) = 0 
    [12.500, 12.600) = 0 
    [12.600, 12.700) = 0 
    [12.700, 12.800) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.996 s/op
     p(50.0000) =     12.180 s/op
     p(90.0000) =     12.297 s/op
     p(95.0000) =     12.362 s/op
     p(99.0000) =     12.891 s/op
     p(99.9000) =     12.891 s/op
     p(99.9900) =     12.891 s/op
     p(99.9990) =     12.891 s/op
     p(99.9999) =     12.891 s/op
    p(100.0000) =     12.891 s/op


# Run complete. Total time: 00:10:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.198 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_11.0.4_1564501424004.json
{"wallclock_times": [610.961762594], "core_cycle_counts": [[729164351204], [528492486929], [565917096535], [374358099156]], "aperf_counts": [[727645200851], [528175126261], [565713469329], [374218374581]], "mperf_counts": [[738328534488], [536267516344], [573497874926], [378917625116]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 17:53:54: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_11.0.4'
[2019-07-30 17:53:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 17:53:56: INFO] 255 executions left in scheduler queue
[2019-07-30 17:53:56: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-07-30 17:53:56: INFO] Estimated completion (next execution): 2019-07-30 18:06:37 (0:12:41 from now)
[2019-07-30 17:53:56: INFO] Reboot in preparation for next execution
[2019-07-30 18:02:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.552 s/op
Iteration   2: 5.447 s/op
Iteration   3: 5.314 s/op
Iteration   4: 5.449 s/op
Iteration   5: 5.213 s/op
Iteration   6: 5.256 s/op
Iteration   7: 5.146 s/op
Iteration   8: 5.185 s/op
Iteration   9: 5.203 s/op
Iteration  10: 5.272 s/op
Iteration  11: 5.109 s/op
Iteration  12: 6.279 s/op
Iteration  13: 5.035 s/op
Iteration  14: 5.286 s/op
Iteration  15: 5.115 s/op
Iteration  16: 5.140 s/op
Iteration  17: 5.269 s/op
Iteration  18: 5.132 s/op
Iteration  19: 5.138 s/op
Iteration  20: 5.284 s/op
Iteration  21: 5.145 s/op
Iteration  22: 5.127 s/op
Iteration  23: 6.347 s/op
Iteration  24: 5.071 s/op
Iteration  25: 5.144 s/op
Iteration  26: 5.327 s/op
Iteration  27: 5.136 s/op
Iteration  28: 5.148 s/op
Iteration  29: 5.129 s/op
Iteration  30: 5.329 s/op
Iteration  31: 5.126 s/op
Iteration  32: 5.165 s/op
Iteration  33: 5.305 s/op
Iteration  34: 6.114 s/op
Iteration  35: 5.080 s/op
Iteration  36: 5.134 s/op
Iteration  37: 5.283 s/op
Iteration  38: 5.143 s/op
Iteration  39: 5.152 s/op
Iteration  40: 5.319 s/op
Iteration  41: 5.139 s/op
Iteration  42: 5.181 s/op
Iteration  43: 5.130 s/op
Iteration  44: 5.315 s/op
Iteration  45: 6.042 s/op
Iteration  46: 5.113 s/op
Iteration  47: 5.316 s/op
Iteration  48: 5.137 s/op
Iteration  49: 5.139 s/op
Iteration  50: 5.149 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.284 ?(99.9%) 0.145 s/op

  Histogram, s/op:
    [5.000, 5.125) = 6 
    [5.125, 5.250) = 24 
    [5.250, 5.375) = 13 
    [5.375, 5.500) = 2 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 2 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.035 s/op
     p(50.0000) =      5.159 s/op
     p(90.0000) =      5.542 s/op
     p(95.0000) =      6.188 s/op
     p(99.0000) =      6.347 s/op
     p(99.9000) =      6.347 s/op
     p(99.9900) =      6.347 s/op
     p(99.9990) =      6.347 s/op
     p(99.9999) =      6.347 s/op
    p(100.0000) =      6.347 s/op


# Run complete. Total time: 00:04:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.284 ? 0.145   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_graalvm-ee-19.1.1_1564502307046.json
{"wallclock_times": [265.205958948], "core_cycle_counts": [[317674953414], [245268069632], [185203458997], [321971999946]], "aperf_counts": [[317043166108], [245185460281], [185161713837], [321938413826]], "mperf_counts": [[317058056732], [245203822896], [185161870606], [321942574494]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 18:02:52: WARNING] Mail quota reached.
[2019-07-30 18:02:52: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-07-30 18:02:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 18:02:53: INFO] 254 executions left in scheduler queue
[2019-07-30 18:02:53: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-07-30 18:02:53: INFO] Estimated completion (next execution): 2019-07-30 18:09:48 (0:06:55 from now)
[2019-07-30 18:02:53: INFO] Reboot in preparation for next execution
[2019-07-30 18:06:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 18:06:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 18:06:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 18:06:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 18:06:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 18:17:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.024 s/op
Iteration   2: 13.595 s/op
Iteration   3: 13.666 s/op
Iteration   4: 13.477 s/op
Iteration   5: 13.485 s/op
Iteration   6: 13.447 s/op
Iteration   7: 13.481 s/op
Iteration   8: 13.424 s/op
Iteration   9: 13.419 s/op
Iteration  10: 13.430 s/op
Iteration  11: 13.423 s/op
Iteration  12: 13.440 s/op
Iteration  13: 13.417 s/op
Iteration  14: 13.448 s/op
Iteration  15: 13.515 s/op
Iteration  16: 13.564 s/op
Iteration  17: 13.326 s/op
Iteration  18: 13.440 s/op
Iteration  19: 13.540 s/op
Iteration  20: 13.467 s/op
Iteration  21: 13.504 s/op
Iteration  22: 13.370 s/op
Iteration  23: 13.496 s/op
Iteration  24: 13.440 s/op
Iteration  25: 13.538 s/op
Iteration  26: 13.472 s/op
Iteration  27: 13.542 s/op
Iteration  28: 13.521 s/op
Iteration  29: 13.332 s/op
Iteration  30: 13.583 s/op
Iteration  31: 13.386 s/op
Iteration  32: 13.460 s/op
Iteration  33: 13.424 s/op
Iteration  34: 13.450 s/op
Iteration  35: 13.438 s/op
Iteration  36: 13.452 s/op
Iteration  37: 13.522 s/op
Iteration  38: 13.438 s/op
Iteration  39: 13.369 s/op
Iteration  40: 13.468 s/op
Iteration  41: 13.440 s/op
Iteration  42: 13.438 s/op
Iteration  43: 13.515 s/op
Iteration  44: 13.527 s/op
Iteration  45: 13.479 s/op
Iteration  46: 13.501 s/op
Iteration  47: 13.462 s/op
Iteration  48: 13.455 s/op
Iteration  49: 13.523 s/op
Iteration  50: 13.512 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.482 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [13.300, 13.350) = 2 
    [13.350, 13.400) = 3 
    [13.400, 13.450) = 15 
    [13.450, 13.500) = 13 
    [13.500, 13.550) = 12 
    [13.550, 13.600) = 3 
    [13.600, 13.650) = 0 
    [13.650, 13.700) = 1 
    [13.700, 13.750) = 0 
    [13.750, 13.800) = 0 
    [13.800, 13.850) = 0 
    [13.850, 13.900) = 0 
    [13.900, 13.950) = 0 
    [13.950, 14.000) = 0 
    [14.000, 14.050) = 1 
    [14.050, 14.100) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.326 s/op
     p(50.0000) =     13.465 s/op
     p(90.0000) =     13.562 s/op
     p(95.0000) =     13.627 s/op
     p(99.0000) =     14.024 s/op
     p(99.9000) =     14.024 s/op
     p(99.9900) =     14.024 s/op
     p(99.9990) =     14.024 s/op
     p(99.9999) =     14.024 s/op
    p(100.0000) =     14.024 s/op


# Run complete. Total time: 00:11:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.482 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_12.0.2_1564502794539.json
{"wallclock_times": [675.137872487], "core_cycle_counts": [[464288342316], [463130539235], [864422433520], [636944555308]], "aperf_counts": [[462340069169], [462962886922], [864316065102], [636853777340]], "mperf_counts": [[464209896434], [464273891994], [866762854796], [638630508552]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 18:17:49: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-07-30 18:17:50: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 18:17:50: INFO] 253 executions left in scheduler queue
[2019-07-30 18:17:50: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:17:50: INFO] Estimated completion (next execution): 2019-07-30 18:31:36 (0:13:45 from now)
[2019-07-30 18:17:50: INFO] Reboot in preparation for next execution
[2019-07-30 18:26:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.463 s/op
Iteration   2: 5.319 s/op
Iteration   3: 5.366 s/op
Iteration   4: 5.260 s/op
Iteration   5: 5.251 s/op
Iteration   6: 5.247 s/op
Iteration   7: 5.263 s/op
Iteration   8: 5.259 s/op
Iteration   9: 5.261 s/op
Iteration  10: 5.264 s/op
Iteration  11: 5.262 s/op
Iteration  12: 5.241 s/op
Iteration  13: 5.263 s/op
Iteration  14: 5.266 s/op
Iteration  15: 5.262 s/op
Iteration  16: 5.257 s/op
Iteration  17: 5.260 s/op
Iteration  18: 5.246 s/op
Iteration  19: 5.263 s/op
Iteration  20: 5.264 s/op
Iteration  21: 5.269 s/op
Iteration  22: 5.270 s/op
Iteration  23: 5.273 s/op
Iteration  24: 5.268 s/op
Iteration  25: 5.269 s/op
Iteration  26: 5.257 s/op
Iteration  27: 5.270 s/op
Iteration  28: 5.246 s/op
Iteration  29: 5.268 s/op
Iteration  30: 5.270 s/op
Iteration  31: 5.263 s/op
Iteration  32: 5.261 s/op
Iteration  33: 5.247 s/op
Iteration  34: 5.248 s/op
Iteration  35: 5.264 s/op
Iteration  36: 5.247 s/op
Iteration  37: 5.260 s/op
Iteration  38: 5.260 s/op
Iteration  39: 5.272 s/op
Iteration  40: 5.242 s/op
Iteration  41: 5.262 s/op
Iteration  42: 5.260 s/op
Iteration  43: 5.260 s/op
Iteration  44: 5.274 s/op
Iteration  45: 5.252 s/op
Iteration  46: 5.267 s/op
Iteration  47: 5.274 s/op
Iteration  48: 5.247 s/op
Iteration  49: 5.266 s/op
Iteration  50: 5.265 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.268 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [5.200, 5.225) = 0 
    [5.225, 5.250) = 9 
    [5.250, 5.275) = 38 
    [5.275, 5.300) = 0 
    [5.300, 5.325) = 1 
    [5.325, 5.350) = 0 
    [5.350, 5.375) = 1 
    [5.375, 5.400) = 0 
    [5.400, 5.425) = 0 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.241 s/op
     p(50.0000) =      5.263 s/op
     p(90.0000) =      5.274 s/op
     p(95.0000) =      5.340 s/op
     p(99.0000) =      5.463 s/op
     p(99.9000) =      5.463 s/op
     p(99.9900) =      5.463 s/op
     p(99.9990) =      5.463 s/op
     p(99.9999) =      5.463 s/op
    p(100.0000) =      5.463 s/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.268 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ce-19.1.1_1564503724522.json
{"wallclock_times": [264.22813279700006], "core_cycle_counts": [[250823377352], [108447981021], [277654609338], [217585030815]], "aperf_counts": [[250255057072], [108394510186], [277633671711], [217564986516]], "mperf_counts": [[250262880034], [108396789176], [277644910378], [217566626274]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 18:26:28: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:26:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 18:26:29: INFO] 252 executions left in scheduler queue
[2019-07-30 18:26:29: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:26:29: INFO] Estimated completion (next execution): 2019-07-30 18:33:24 (0:06:54 from now)
[2019-07-30 18:26:29: INFO] Reboot in preparation for next execution
[2019-07-30 18:39:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.048 s/op
Iteration   2: 9.913 s/op
Iteration   3: 10.032 s/op
Iteration   4: 9.919 s/op
Iteration   5: 9.892 s/op
Iteration   6: 10.541 s/op
Iteration   7: 9.897 s/op
Iteration   8: 9.899 s/op
Iteration   9: 9.900 s/op
Iteration  10: 9.885 s/op
Iteration  11: 9.897 s/op
Iteration  12: 9.893 s/op
Iteration  13: 9.878 s/op
Iteration  14: 9.952 s/op
Iteration  15: 9.900 s/op
Iteration  16: 9.922 s/op
Iteration  17: 9.908 s/op
Iteration  18: 9.893 s/op
Iteration  19: 9.888 s/op
Iteration  20: 9.911 s/op
Iteration  21: 9.891 s/op
Iteration  22: 9.894 s/op
Iteration  23: 9.929 s/op
Iteration  24: 9.892 s/op
Iteration  25: 9.887 s/op
Iteration  26: 9.841 s/op
Iteration  27: 9.893 s/op
Iteration  28: 9.892 s/op
Iteration  29: 9.906 s/op
Iteration  30: 9.922 s/op
Iteration  31: 9.881 s/op
Iteration  32: 9.903 s/op
Iteration  33: 9.895 s/op
Iteration  34: 9.893 s/op
Iteration  35: 9.897 s/op
Iteration  36: 9.915 s/op
Iteration  37: 9.879 s/op
Iteration  38: 9.981 s/op
Iteration  39: 9.837 s/op
Iteration  40: 9.897 s/op
Iteration  41: 9.891 s/op
Iteration  42: 9.902 s/op
Iteration  43: 9.912 s/op
Iteration  44: 9.892 s/op
Iteration  45: 9.886 s/op
Iteration  46: 9.900 s/op
Iteration  47: 9.886 s/op
Iteration  48: 9.902 s/op
Iteration  49: 9.858 s/op
Iteration  50: 9.938 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.917 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [ 9.800,  9.850) = 2 
    [ 9.850,  9.900) = 27 
    [ 9.900,  9.950) = 16 
    [ 9.950, 10.000) = 2 
    [10.000, 10.050) = 2 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 0 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 0 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 0 
    [10.350, 10.400) = 0 
    [10.400, 10.450) = 0 
    [10.450, 10.500) = 0 
    [10.500, 10.550) = 1 
    [10.550, 10.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.837 s/op
     p(50.0000) =      9.897 s/op
     p(90.0000) =      9.951 s/op
     p(95.0000) =     10.039 s/op
     p(99.0000) =     10.541 s/op
     p(99.9000) =     10.541 s/op
     p(99.9900) =     10.541 s/op
     p(99.9990) =     10.541 s/op
     p(99.9999) =     10.541 s/op
    p(100.0000) =     10.541 s/op


# Run complete. Total time: 00:08:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  9.917 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ce-19.1.1_1564504245330.json
{"wallclock_times": [496.75297654300005], "core_cycle_counts": [[420199786286], [355837326202], [280344423764], [561800216151]], "aperf_counts": [[419055562159], [355749680436], [280312595391], [561770604861]], "mperf_counts": [[419064026106], [355751623318], [280313150794], [561770940314]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 18:39:02: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:39:03: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 18:39:03: INFO] 251 executions left in scheduler queue
[2019-07-30 18:39:03: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:39:03: INFO] Estimated completion (next execution): 2019-07-30 18:49:50 (0:10:46 from now)
[2019-07-30 18:39:03: INFO] Reboot in preparation for next execution
[2019-07-30 18:46:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.830 s/op
Iteration   2: 3.314 s/op
Iteration   3: 3.294 s/op
Iteration   4: 3.385 s/op
Iteration   5: 3.266 s/op
Iteration   6: 3.304 s/op
Iteration   7: 3.277 s/op
Iteration   8: 3.319 s/op
Iteration   9: 3.339 s/op
Iteration  10: 3.302 s/op
Iteration  11: 3.337 s/op
Iteration  12: 3.302 s/op
Iteration  13: 3.328 s/op
Iteration  14: 3.319 s/op
Iteration  15: 3.324 s/op
Iteration  16: 3.313 s/op
Iteration  17: 3.346 s/op
Iteration  18: 3.297 s/op
Iteration  19: 3.410 s/op
Iteration  20: 3.313 s/op
Iteration  21: 3.331 s/op
Iteration  22: 3.324 s/op
Iteration  23: 3.309 s/op
Iteration  24: 3.323 s/op
Iteration  25: 3.312 s/op
Iteration  26: 3.321 s/op
Iteration  27: 3.308 s/op
Iteration  28: 3.324 s/op
Iteration  29: 3.310 s/op
Iteration  30: 3.338 s/op
Iteration  31: 3.322 s/op
Iteration  32: 3.337 s/op
Iteration  33: 3.300 s/op
Iteration  34: 3.337 s/op
Iteration  35: 3.313 s/op
Iteration  36: 3.332 s/op
Iteration  37: 3.313 s/op
Iteration  38: 3.410 s/op
Iteration  39: 3.321 s/op
Iteration  40: 3.326 s/op
Iteration  41: 3.312 s/op
Iteration  42: 3.327 s/op
Iteration  43: 3.336 s/op
Iteration  44: 3.320 s/op
Iteration  45: 3.323 s/op
Iteration  46: 3.302 s/op
Iteration  47: 3.326 s/op
Iteration  48: 3.311 s/op
Iteration  49: 3.328 s/op
Iteration  50: 3.316 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.333 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 4 
    [3.300, 3.350) = 42 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 2 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 1 
    [3.850, 3.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.266 s/op
     p(50.0000) =      3.321 s/op
     p(90.0000) =      3.345 s/op
     p(95.0000) =      3.410 s/op
     p(99.0000) =      3.830 s/op
     p(99.9000) =      3.830 s/op
     p(99.9900) =      3.830 s/op
     p(99.9990) =      3.830 s/op
     p(99.9999) =      3.830 s/op
    p(100.0000) =      3.830 s/op


# Run complete. Total time: 00:02:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.333 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ce-19.1.1_1564504996573.json
{"wallclock_times": [167.600893982], "core_cycle_counts": [[170035157207], [197282507767], [121413615719], [96269978227]], "aperf_counts": [[169654442682], [197236509118], [121380822212], [96236390252]], "mperf_counts": [[169662566428], [197237367230], [121381510934], [96241359834]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 18:46:04: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:46:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 18:46:05: INFO] 250 executions left in scheduler queue
[2019-07-30 18:46:05: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:46:05: INFO] Estimated completion (next execution): 2019-07-30 18:51:23 (0:05:17 from now)
[2019-07-30 18:46:05: INFO] Reboot in preparation for next execution
[2019-07-30 18:53:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.636 s/op
Iteration   2: 3.295 s/op
Iteration   3: 3.246 s/op
Iteration   4: 3.356 s/op
Iteration   5: 3.236 s/op
Iteration   6: 3.290 s/op
Iteration   7: 3.229 s/op
Iteration   8: 3.235 s/op
Iteration   9: 3.247 s/op
Iteration  10: 3.255 s/op
Iteration  11: 3.252 s/op
Iteration  12: 3.249 s/op
Iteration  13: 3.228 s/op
Iteration  14: 3.242 s/op
Iteration  15: 3.243 s/op
Iteration  16: 3.254 s/op
Iteration  17: 3.215 s/op
Iteration  18: 3.222 s/op
Iteration  19: 3.236 s/op
Iteration  20: 3.233 s/op
Iteration  21: 3.239 s/op
Iteration  22: 3.235 s/op
Iteration  23: 3.208 s/op
Iteration  24: 3.211 s/op
Iteration  25: 3.246 s/op
Iteration  26: 3.257 s/op
Iteration  27: 3.221 s/op
Iteration  28: 3.376 s/op
Iteration  29: 3.223 s/op
Iteration  30: 3.220 s/op
Iteration  31: 3.228 s/op
Iteration  32: 3.227 s/op
Iteration  33: 3.237 s/op
Iteration  34: 3.247 s/op
Iteration  35: 3.244 s/op
Iteration  36: 3.248 s/op
Iteration  37: 3.216 s/op
Iteration  38: 3.257 s/op
Iteration  39: 3.204 s/op
Iteration  40: 3.239 s/op
Iteration  41: 3.238 s/op
Iteration  42: 3.241 s/op
Iteration  43: 3.252 s/op
Iteration  44: 3.254 s/op
Iteration  45: 3.224 s/op
Iteration  46: 3.226 s/op
Iteration  47: 3.219 s/op
Iteration  48: 3.253 s/op
Iteration  49: 3.218 s/op
Iteration  50: 3.261 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.251 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [3.200, 3.250) = 36 
    [3.250, 3.300) = 11 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 2 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.204 s/op
     p(50.0000) =      3.239 s/op
     p(90.0000) =      3.287 s/op
     p(95.0000) =      3.365 s/op
     p(99.0000) =      3.636 s/op
     p(99.9000) =      3.636 s/op
     p(99.9900) =      3.636 s/op
     p(99.9990) =      3.636 s/op
     p(99.9999) =      3.636 s/op
    p(100.0000) =      3.636 s/op


# Run complete. Total time: 00:02:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.251 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ce-19.1.1_1564505419606.json
{"wallclock_times": [163.50146451600003], "core_cycle_counts": [[144968966112], [178595274696], [105451698413], [106426063881]], "aperf_counts": [[144590706402], [178560161985], [105428791486], [106398551984]], "mperf_counts": [[144605191732], [178564732680], [105429775898], [106399509650]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 18:53:03: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-30 18:53:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 18:53:04: INFO] 249 executions left in scheduler queue
[2019-07-30 18:53:04: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-07-30 18:53:04: INFO] Estimated completion (next execution): 2019-07-30 18:58:17 (0:05:13 from now)
[2019-07-30 18:53:04: INFO] Reboot in preparation for next execution
[2019-07-30 18:57:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 18:57:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 18:57:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 18:57:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 18:57:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 18:57:20: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-30 19:08:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.494 s/op
Iteration   2: 12.352 s/op
Iteration   3: 11.986 s/op
Iteration   4: 13.052 s/op
Iteration   5: 13.057 s/op
Iteration   6: 13.077 s/op
Iteration   7: 13.065 s/op
Iteration   8: 13.058 s/op
Iteration   9: 13.063 s/op
Iteration  10: 13.119 s/op
Iteration  11: 13.082 s/op
Iteration  12: 13.082 s/op
Iteration  13: 13.091 s/op
Iteration  14: 13.080 s/op
Iteration  15: 13.052 s/op
Iteration  16: 13.054 s/op
Iteration  17: 13.015 s/op
Iteration  18: 13.018 s/op
Iteration  19: 13.044 s/op
Iteration  20: 13.010 s/op
Iteration  21: 13.021 s/op
Iteration  22: 13.020 s/op
Iteration  23: 13.092 s/op
Iteration  24: 12.996 s/op
Iteration  25: 13.039 s/op
Iteration  26: 13.014 s/op
Iteration  27: 13.013 s/op
Iteration  28: 13.007 s/op
Iteration  29: 13.017 s/op
Iteration  30: 13.008 s/op
Iteration  31: 13.020 s/op
Iteration  32: 13.002 s/op
Iteration  33: 13.010 s/op
Iteration  34: 13.055 s/op
Iteration  35: 13.049 s/op
Iteration  36: 13.031 s/op
Iteration  37: 13.073 s/op
Iteration  38: 13.035 s/op
Iteration  39: 13.017 s/op
Iteration  40: 13.036 s/op
Iteration  41: 12.998 s/op
Iteration  42: 13.042 s/op
Iteration  43: 13.014 s/op
Iteration  44: 13.055 s/op
Iteration  45: 13.012 s/op
Iteration  46: 13.019 s/op
Iteration  47: 13.052 s/op
Iteration  48: 13.012 s/op
Iteration  49: 13.027 s/op
Iteration  50: 13.017 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.013 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 1 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 1 
    [12.500, 12.750) = 0 
    [12.750, 13.000) = 2 
    [13.000, 13.250) = 45 
    [13.250, 13.500) = 1 
    [13.500, 13.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.986 s/op
     p(50.0000) =     13.033 s/op
     p(90.0000) =     13.082 s/op
     p(95.0000) =     13.104 s/op
     p(99.0000) =     13.494 s/op
     p(99.9000) =     13.494 s/op
     p(99.9900) =     13.494 s/op
     p(99.9990) =     13.494 s/op
     p(99.9999) =     13.494 s/op
    p(100.0000) =     13.494 s/op


# Run complete. Total time: 00:10:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.013 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_11.0.4_1564505840196.json
{"wallclock_times": [652.17645206], "core_cycle_counts": [[317987782671], [401997473379], [784222793524], [613485085503]], "aperf_counts": [[315976429899], [401859362499], [784103304493], [613386517250]], "mperf_counts": [[315982540804], [401859434404], [784104255164], [613386506294]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-30 19:08:12: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-07-30 19:08:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 19:08:13: INFO] 248 executions left in scheduler queue
[2019-07-30 19:08:13: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-30 19:08:13: INFO] Estimated completion (next execution): 2019-07-30 19:21:36 (0:13:22 from now)
[2019-07-30 19:08:13: INFO] Reboot in preparation for next execution
[2019-07-30 19:12:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 19:12:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 19:12:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 19:12:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 19:12:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 19:14:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.498 s/op
Iteration   2: 2.244 s/op
Iteration   3: 2.442 s/op
Iteration   4: 2.321 s/op
Iteration   5: 2.458 s/op
Iteration   6: 2.363 s/op
Iteration   7: 2.334 s/op
Iteration   8: 2.390 s/op
Iteration   9: 2.371 s/op
Iteration  10: 2.359 s/op
Iteration  11: 2.227 s/op
Iteration  12: 2.371 s/op
Iteration  13: 2.365 s/op
Iteration  14: 2.360 s/op
Iteration  15: 2.172 s/op
Iteration  16: 2.374 s/op
Iteration  17: 2.365 s/op
Iteration  18: 2.363 s/op
Iteration  19: 2.357 s/op
Iteration  20: 2.373 s/op
Iteration  21: 2.378 s/op
Iteration  22: 2.370 s/op
Iteration  23: 2.099 s/op
Iteration  24: 2.214 s/op
Iteration  25: 2.369 s/op
Iteration  26: 2.369 s/op
Iteration  27: 2.365 s/op
Iteration  28: 2.306 s/op
Iteration  29: 2.371 s/op
Iteration  30: 2.368 s/op
Iteration  31: 2.361 s/op
Iteration  32: 2.353 s/op
Iteration  33: 2.369 s/op
Iteration  34: 2.372 s/op
Iteration  35: 2.368 s/op
Iteration  36: 2.178 s/op
Iteration  37: 2.208 s/op
Iteration  38: 2.371 s/op
Iteration  39: 2.366 s/op
Iteration  40: 2.364 s/op
Iteration  41: 2.369 s/op
Iteration  42: 2.283 s/op
Iteration  43: 2.368 s/op
Iteration  44: 2.365 s/op
Iteration  45: 2.352 s/op
Iteration  46: 2.336 s/op
Iteration  47: 2.360 s/op
Iteration  48: 2.369 s/op
Iteration  49: 2.338 s/op
Iteration  50: 2.372 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.343 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 2 
    [2.200, 2.250) = 4 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 5 
    [2.350, 2.400) = 34 
    [2.400, 2.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.099 s/op
     p(50.0000) =      2.365 s/op
     p(90.0000) =      2.378 s/op
     p(95.0000) =      2.449 s/op
     p(99.0000) =      2.498 s/op
     p(99.9000) =      2.498 s/op
     p(99.9900) =      2.498 s/op
     p(99.9990) =      2.498 s/op
     p(99.9999) =      2.498 s/op
    p(100.0000) =      2.498 s/op


# Run complete. Total time: 00:01:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.343 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_11.0.4_1564506747457.json
{"wallclock_times": [118.182276086], "core_cycle_counts": [[112100613916], [86701512421], [79491690720], [75448181531]], "aperf_counts": [[111780316305], [86655740181], [79464422320], [75429537569]], "mperf_counts": [[125456030686], [98111027578], [89407281614], [82948698328]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 19:14:25: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-30 19:14:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 19:14:26: INFO] 247 executions left in scheduler queue
[2019-07-30 19:14:26: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-30 19:14:26: INFO] Estimated completion (next execution): 2019-07-30 19:18:55 (0:04:28 from now)
[2019-07-30 19:14:26: INFO] Reboot in preparation for next execution
[2019-07-30 19:18:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 19:18:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 19:18:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 19:18:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 19:18:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 19:20:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.472 s/op
Iteration   2: 2.427 s/op
Iteration   3: 2.435 s/op
Iteration   4: 2.597 s/op
Iteration   5: 2.259 s/op
Iteration   6: 2.267 s/op
Iteration   7: 2.251 s/op
Iteration   8: 2.249 s/op
Iteration   9: 2.254 s/op
Iteration  10: 2.252 s/op
Iteration  11: 2.253 s/op
Iteration  12: 2.244 s/op
Iteration  13: 2.248 s/op
Iteration  14: 2.247 s/op
Iteration  15: 2.250 s/op
Iteration  16: 2.247 s/op
Iteration  17: 2.247 s/op
Iteration  18: 2.249 s/op
Iteration  19: 2.248 s/op
Iteration  20: 2.252 s/op
Iteration  21: 2.250 s/op
Iteration  22: 2.247 s/op
Iteration  23: 2.249 s/op
Iteration  24: 2.247 s/op
Iteration  25: 2.244 s/op
Iteration  26: 2.245 s/op
Iteration  27: 2.249 s/op
Iteration  28: 2.252 s/op
Iteration  29: 2.250 s/op
Iteration  30: 2.248 s/op
Iteration  31: 2.247 s/op
Iteration  32: 2.247 s/op
Iteration  33: 2.246 s/op
Iteration  34: 2.246 s/op
Iteration  35: 2.245 s/op
Iteration  36: 2.250 s/op
Iteration  37: 2.251 s/op
Iteration  38: 2.254 s/op
Iteration  39: 2.251 s/op
Iteration  40: 2.250 s/op
Iteration  41: 2.249 s/op
Iteration  42: 2.248 s/op
Iteration  43: 2.247 s/op
Iteration  44: 2.250 s/op
Iteration  45: 2.243 s/op
Iteration  46: 2.244 s/op
Iteration  47: 2.245 s/op
Iteration  48: 2.248 s/op
Iteration  49: 2.246 s/op
Iteration  50: 2.247 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.268 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [2.200, 2.225) = 0 
    [2.225, 2.250) = 31 
    [2.250, 2.275) = 15 
    [2.275, 2.300) = 0 
    [2.300, 2.325) = 0 
    [2.325, 2.350) = 0 
    [2.350, 2.375) = 0 
    [2.375, 2.400) = 0 
    [2.400, 2.425) = 0 
    [2.425, 2.450) = 2 
    [2.450, 2.475) = 1 
    [2.475, 2.500) = 0 
    [2.500, 2.525) = 0 
    [2.525, 2.550) = 0 
    [2.550, 2.575) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.243 s/op
     p(50.0000) =      2.249 s/op
     p(90.0000) =      2.266 s/op
     p(95.0000) =      2.452 s/op
     p(99.0000) =      2.597 s/op
     p(99.9000) =      2.597 s/op
     p(99.9900) =      2.597 s/op
     p(99.9990) =      2.597 s/op
     p(99.9999) =      2.597 s/op
    p(100.0000) =      2.597 s/op


# Run complete. Total time: 00:01:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.268 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_11.0.4_1564507121538.json
{"wallclock_times": [114.357602423], "core_cycle_counts": [[56884092881], [183796539539], [109528442995], [23650969036]], "aperf_counts": [[56552016237], [183769276227], [109509809970], [23627918879]], "mperf_counts": [[56881808436], [183812790190], [109547633838], [23664614604]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 19:20:35: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-30 19:20:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 19:20:36: INFO] 246 executions left in scheduler queue
[2019-07-30 19:20:36: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 19:20:36: INFO] Estimated completion (next execution): 2019-07-30 19:25:01 (0:04:24 from now)
[2019-07-30 19:20:36: INFO] Reboot in preparation for next execution
[2019-07-30 19:30:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.466 s/op
Iteration   2: 6.990 s/op
Iteration   3: 6.937 s/op
Iteration   4: 6.959 s/op
Iteration   5: 6.975 s/op
Iteration   6: 6.944 s/op
Iteration   7: 6.996 s/op
Iteration   8: 6.944 s/op
Iteration   9: 6.937 s/op
Iteration  10: 6.974 s/op
Iteration  11: 6.944 s/op
Iteration  12: 6.982 s/op
Iteration  13: 6.946 s/op
Iteration  14: 6.946 s/op
Iteration  15: 6.985 s/op
Iteration  16: 6.945 s/op
Iteration  17: 6.945 s/op
Iteration  18: 6.989 s/op
Iteration  19: 6.937 s/op
Iteration  20: 6.967 s/op
Iteration  21: 6.993 s/op
Iteration  22: 6.962 s/op
Iteration  23: 6.948 s/op
Iteration  24: 6.988 s/op
Iteration  25: 6.963 s/op
Iteration  26: 6.965 s/op
Iteration  27: 7.005 s/op
Iteration  28: 6.958 s/op
Iteration  29: 6.959 s/op
Iteration  30: 6.994 s/op
Iteration  31: 6.949 s/op
Iteration  32: 7.002 s/op
Iteration  33: 6.928 s/op
Iteration  34: 6.941 s/op
Iteration  35: 6.989 s/op
Iteration  36: 6.950 s/op
Iteration  37: 6.937 s/op
Iteration  38: 6.994 s/op
Iteration  39: 6.961 s/op
Iteration  40: 6.954 s/op
Iteration  41: 6.985 s/op
Iteration  42: 6.947 s/op
Iteration  43: 6.950 s/op
Iteration  44: 6.982 s/op
Iteration  45: 6.957 s/op
Iteration  46: 6.963 s/op
Iteration  47: 7.003 s/op
Iteration  48: 6.951 s/op
Iteration  49: 7.016 s/op
Iteration  50: 6.980 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.976 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [6.900, 6.950) = 17 
    [6.950, 7.000) = 28 
    [7.000, 7.050) = 4 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 0 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.928 s/op
     p(50.0000) =      6.961 s/op
     p(90.0000) =      7.001 s/op
     p(95.0000) =      7.010 s/op
     p(99.0000) =      7.466 s/op
     p(99.9000) =      7.466 s/op
     p(99.9900) =      7.466 s/op
     p(99.9990) =      7.466 s/op
     p(99.9999) =      7.466 s/op
    p(100.0000) =      7.466 s/op


# Run complete. Total time: 00:05:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.976 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot-8u222-b10_1564507492554.json
{"wallclock_times": [349.778584357], "core_cycle_counts": [[236571252244], [363789453950], [284183722373], [322656356625]], "aperf_counts": [[235632826644], [363705018484], [284111740488], [322602954264]], "mperf_counts": [[235642705836], [363705133340], [284114055216], [322605781476]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 19:30:42: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 19:30:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 19:30:43: INFO] 245 executions left in scheduler queue
[2019-07-30 19:30:43: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 19:30:43: INFO] Estimated completion (next execution): 2019-07-30 19:39:03 (0:08:20 from now)
[2019-07-30 19:30:43: INFO] Reboot in preparation for next execution
[2019-07-30 19:44:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.722 s/op
Iteration   2: 12.073 s/op
Iteration   3: 11.865 s/op
Iteration   4: 11.891 s/op
Iteration   5: 11.875 s/op
Iteration   6: 11.849 s/op
Iteration   7: 11.882 s/op
Iteration   8: 11.868 s/op
Iteration   9: 11.885 s/op
Iteration  10: 11.888 s/op
Iteration  11: 11.940 s/op
Iteration  12: 11.855 s/op
Iteration  13: 11.906 s/op
Iteration  14: 11.894 s/op
Iteration  15: 11.867 s/op
Iteration  16: 11.863 s/op
Iteration  17: 11.897 s/op
Iteration  18: 11.900 s/op
Iteration  19: 11.891 s/op
Iteration  20: 11.905 s/op
Iteration  21: 11.876 s/op
Iteration  22: 11.896 s/op
Iteration  23: 11.884 s/op
Iteration  24: 11.873 s/op
Iteration  25: 11.855 s/op
Iteration  26: 11.908 s/op
Iteration  27: 11.896 s/op
Iteration  28: 11.900 s/op
Iteration  29: 11.912 s/op
Iteration  30: 11.910 s/op
Iteration  31: 11.943 s/op
Iteration  32: 11.887 s/op
Iteration  33: 11.902 s/op
Iteration  34: 11.880 s/op
Iteration  35: 11.866 s/op
Iteration  36: 11.891 s/op
Iteration  37: 11.886 s/op
Iteration  38: 11.872 s/op
Iteration  39: 11.931 s/op
Iteration  40: 11.885 s/op
Iteration  41: 11.877 s/op
Iteration  42: 11.919 s/op
Iteration  43: 11.881 s/op
Iteration  44: 11.871 s/op
Iteration  45: 11.861 s/op
Iteration  46: 11.874 s/op
Iteration  47: 11.909 s/op
Iteration  48: 11.900 s/op
Iteration  49: 11.889 s/op
Iteration  50: 11.905 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.889 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [11.700, 11.725) = 1 
    [11.725, 11.750) = 0 
    [11.750, 11.775) = 0 
    [11.775, 11.800) = 0 
    [11.800, 11.825) = 0 
    [11.825, 11.850) = 1 
    [11.850, 11.875) = 12 
    [11.875, 11.900) = 21 
    [11.900, 11.925) = 11 
    [11.925, 11.950) = 3 
    [11.950, 11.975) = 0 
    [11.975, 12.000) = 0 
    [12.000, 12.025) = 0 
    [12.025, 12.050) = 0 
    [12.050, 12.075) = 1 
    [12.075, 12.100) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.722 s/op
     p(50.0000) =     11.887 s/op
     p(90.0000) =     11.918 s/op
     p(95.0000) =     11.941 s/op
     p(99.0000) =     12.073 s/op
     p(99.9000) =     12.073 s/op
     p(99.9900) =     12.073 s/op
     p(99.9990) =     12.073 s/op
     p(99.9999) =     12.073 s/op
    p(100.0000) =     12.073 s/op


# Run complete. Total time: 00:09:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.889 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot-8u222-b10_1564508097963.json
{"wallclock_times": [595.289201144], "core_cycle_counts": [[691845556357], [339318157373], [271397854473], [615272002054]], "aperf_counts": [[690705956666], [339195939352], [271313299839], [615234933184]], "mperf_counts": [[690710009360], [339197220396], [271313347554], [615244381184]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 19:44:53: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 19:44:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 19:44:54: INFO] 244 executions left in scheduler queue
[2019-07-30 19:44:54: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 19:44:54: INFO] Estimated completion (next execution): 2019-07-30 19:57:19 (0:12:25 from now)
[2019-07-30 19:44:54: INFO] Reboot in preparation for next execution
[2019-07-30 19:54:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.103 s/op
Iteration   2: 6.875 s/op
Iteration   3: 6.690 s/op
Iteration   4: 6.673 s/op
Iteration   5: 6.717 s/op
Iteration   6: 6.767 s/op
Iteration   7: 6.728 s/op
Iteration   8: 6.701 s/op
Iteration   9: 6.770 s/op
Iteration  10: 6.749 s/op
Iteration  11: 6.720 s/op
Iteration  12: 6.722 s/op
Iteration  13: 6.779 s/op
Iteration  14: 6.724 s/op
Iteration  15: 6.712 s/op
Iteration  16: 6.709 s/op
Iteration  17: 6.754 s/op
Iteration  18: 6.702 s/op
Iteration  19: 6.735 s/op
Iteration  20: 6.750 s/op
Iteration  21: 6.770 s/op
Iteration  22: 6.771 s/op
Iteration  23: 6.749 s/op
Iteration  24: 6.736 s/op
Iteration  25: 6.740 s/op
Iteration  26: 6.754 s/op
Iteration  27: 6.737 s/op
Iteration  28: 6.713 s/op
Iteration  29: 6.724 s/op
Iteration  30: 6.761 s/op
Iteration  31: 6.759 s/op
Iteration  32: 6.738 s/op
Iteration  33: 6.779 s/op
Iteration  34: 6.747 s/op
Iteration  35: 6.750 s/op
Iteration  36: 6.744 s/op
Iteration  37: 6.728 s/op
Iteration  38: 6.755 s/op
Iteration  39: 6.725 s/op
Iteration  40: 6.750 s/op
Iteration  41: 6.690 s/op
Iteration  42: 6.730 s/op
Iteration  43: 6.763 s/op
Iteration  44: 6.679 s/op
Iteration  45: 6.754 s/op
Iteration  46: 6.743 s/op
Iteration  47: 6.733 s/op
Iteration  48: 6.777 s/op
Iteration  49: 6.728 s/op
Iteration  50: 6.760 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.747 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 4 
    [6.700, 6.750) = 29 
    [6.750, 6.800) = 15 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 1 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.673 s/op
     p(50.0000) =      6.741 s/op
     p(90.0000) =      6.776 s/op
     p(95.0000) =      6.822 s/op
     p(99.0000) =      7.103 s/op
     p(99.9000) =      7.103 s/op
     p(99.9900) =      7.103 s/op
     p(99.9990) =      7.103 s/op
     p(99.9999) =      7.103 s/op
    p(100.0000) =      7.103 s/op


# Run complete. Total time: 00:05:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.747 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot-8u222-b10_1564508949933.json
{"wallclock_times": [338.2842923], "core_cycle_counts": [[252742803626], [254167406927], [335595564475], [255555809198]], "aperf_counts": [[251947521536], [254106266053], [335569694210], [255532508644]], "mperf_counts": [[251955813878], [254107203820], [335571819546], [255546820338]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 19:54:48: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 19:54:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 19:54:49: INFO] 243 executions left in scheduler queue
[2019-07-30 19:54:49: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 19:54:49: INFO] Estimated completion (next execution): 2019-07-30 20:02:57 (0:08:08 from now)
[2019-07-30 19:54:49: INFO] Reboot in preparation for next execution
[2019-07-30 20:12:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.347 s/op
Iteration   2: 16.597 s/op
Iteration   3: 16.345 s/op
Iteration   4: 16.310 s/op
Iteration   5: 16.407 s/op
Iteration   6: 16.371 s/op
Iteration   7: 16.287 s/op
Iteration   8: 16.337 s/op
Iteration   9: 16.285 s/op
Iteration  10: 16.355 s/op
Iteration  11: 16.374 s/op
Iteration  12: 16.361 s/op
Iteration  13: 16.365 s/op
Iteration  14: 16.301 s/op
Iteration  15: 16.267 s/op
Iteration  16: 16.360 s/op
Iteration  17: 16.366 s/op
Iteration  18: 16.278 s/op
Iteration  19: 16.320 s/op
Iteration  20: 16.327 s/op
Iteration  21: 16.291 s/op
Iteration  22: 16.289 s/op
Iteration  23: 16.277 s/op
Iteration  24: 16.364 s/op
Iteration  25: 16.340 s/op
Iteration  26: 16.306 s/op
Iteration  27: 16.334 s/op
Iteration  28: 16.315 s/op
Iteration  29: 16.270 s/op
Iteration  30: 16.326 s/op
Iteration  31: 16.315 s/op
Iteration  32: 16.249 s/op
Iteration  33: 16.292 s/op
Iteration  34: 16.337 s/op
Iteration  35: 16.283 s/op
Iteration  36: 16.289 s/op
Iteration  37: 16.255 s/op
Iteration  38: 16.291 s/op
Iteration  39: 16.317 s/op
Iteration  40: 16.345 s/op
Iteration  41: 16.312 s/op
Iteration  42: 16.360 s/op
Iteration  43: 16.279 s/op
Iteration  44: 16.325 s/op
Iteration  45: 16.376 s/op
Iteration  46: 16.359 s/op
Iteration  47: 16.326 s/op
Iteration  48: 16.264 s/op
Iteration  49: 16.272 s/op
Iteration  50: 16.368 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.326 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [16.200, 16.225) = 0 
    [16.225, 16.250) = 1 
    [16.250, 16.275) = 5 
    [16.275, 16.300) = 11 
    [16.300, 16.325) = 8 
    [16.325, 16.350) = 11 
    [16.350, 16.375) = 11 
    [16.375, 16.400) = 1 
    [16.400, 16.425) = 1 
    [16.425, 16.450) = 0 
    [16.450, 16.475) = 0 
    [16.475, 16.500) = 0 
    [16.500, 16.525) = 0 
    [16.525, 16.550) = 0 
    [16.550, 16.575) = 0 
    [16.575, 16.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.249 s/op
     p(50.0000) =     16.323 s/op
     p(90.0000) =     16.371 s/op
     p(95.0000) =     16.390 s/op
     p(99.0000) =     16.597 s/op
     p(99.9000) =     16.597 s/op
     p(99.9900) =     16.597 s/op
     p(99.9990) =     16.597 s/op
     p(99.9999) =     16.597 s/op
    p(100.0000) =     16.597 s/op


# Run complete. Total time: 00:13:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.326 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot-8u222-b10_1564509544422.json
{"wallclock_times": [817.174680877], "core_cycle_counts": [[415930235846], [365177462356], [526642496402], [1324590064241]], "aperf_counts": [[413869229670], [365055767015], [526524372168], [1324539723720]], "mperf_counts": [[413875241248], [365064007482], [526524942968], [1324553995996]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 20:12:41: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-30 20:12:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 20:12:42: INFO] 242 executions left in scheduler queue
[2019-07-30 20:12:42: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:12:42: INFO] Estimated completion (next execution): 2019-07-30 20:28:50 (0:16:07 from now)
[2019-07-30 20:12:42: INFO] Reboot in preparation for next execution
[2019-07-30 20:20:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.858 s/op
Iteration   2: 3.524 s/op
Iteration   3: 3.399 s/op
Iteration   4: 3.376 s/op
Iteration   5: 3.376 s/op
Iteration   6: 3.417 s/op
Iteration   7: 3.382 s/op
Iteration   8: 3.405 s/op
Iteration   9: 3.376 s/op
Iteration  10: 3.417 s/op
Iteration  11: 3.429 s/op
Iteration  12: 3.387 s/op
Iteration  13: 3.384 s/op
Iteration  14: 3.372 s/op
Iteration  15: 3.421 s/op
Iteration  16: 3.377 s/op
Iteration  17: 3.373 s/op
Iteration  18: 3.385 s/op
Iteration  19: 3.364 s/op
Iteration  20: 3.410 s/op
Iteration  21: 3.368 s/op
Iteration  22: 3.370 s/op
Iteration  23: 3.424 s/op
Iteration  24: 3.401 s/op
Iteration  25: 3.365 s/op
Iteration  26: 3.402 s/op
Iteration  27: 3.412 s/op
Iteration  28: 3.377 s/op
Iteration  29: 3.390 s/op
Iteration  30: 3.369 s/op
Iteration  31: 3.370 s/op
Iteration  32: 3.374 s/op
Iteration  33: 3.421 s/op
Iteration  34: 3.400 s/op
Iteration  35: 3.411 s/op
Iteration  36: 3.367 s/op
Iteration  37: 3.381 s/op
Iteration  38: 3.414 s/op
Iteration  39: 3.410 s/op
Iteration  40: 3.378 s/op
Iteration  41: 3.388 s/op
Iteration  42: 3.366 s/op
Iteration  43: 3.391 s/op
Iteration  44: 3.368 s/op
Iteration  45: 3.389 s/op
Iteration  46: 3.414 s/op
Iteration  47: 3.398 s/op
Iteration  48: 3.385 s/op
Iteration  49: 3.392 s/op
Iteration  50: 3.429 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.403 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 32 
    [3.400, 3.450) = 16 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 1 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.364 s/op
     p(50.0000) =      3.389 s/op
     p(90.0000) =      3.424 s/op
     p(95.0000) =      3.472 s/op
     p(99.0000) =      3.858 s/op
     p(99.9000) =      3.858 s/op
     p(99.9900) =      3.858 s/op
     p(99.9990) =      3.858 s/op
     p(99.9999) =      3.858 s/op
    p(100.0000) =      3.858 s/op


# Run complete. Total time: 00:02:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.403 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_graalvm-ce-19.1.1_1564510631479.json
{"wallclock_times": [171.096773849], "core_cycle_counts": [[171901045408], [146768954570], [138358630784], [102553341718]], "aperf_counts": [[171525713722], [146728154616], [138332743498], [102531650206]], "mperf_counts": [[171532144716], [146739923646], [138333716960], [102532819960]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 20:20:02: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:20:03: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 20:20:03: INFO] 241 executions left in scheduler queue
[2019-07-30 20:20:03: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:20:03: INFO] Estimated completion (next execution): 2019-07-30 20:25:24 (0:05:21 from now)
[2019-07-30 20:20:03: INFO] Reboot in preparation for next execution
[2019-07-30 20:28:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.880 s/op
Iteration   2: 5.818 s/op
Iteration   3: 5.649 s/op
Iteration   4: 5.657 s/op
Iteration   5: 5.656 s/op
Iteration   6: 5.666 s/op
Iteration   7: 5.677 s/op
Iteration   8: 5.660 s/op
Iteration   9: 5.656 s/op
Iteration  10: 5.685 s/op
Iteration  11: 5.651 s/op
Iteration  12: 5.658 s/op
Iteration  13: 5.644 s/op
Iteration  14: 5.653 s/op
Iteration  15: 5.680 s/op
Iteration  16: 5.650 s/op
Iteration  17: 5.639 s/op
Iteration  18: 5.632 s/op
Iteration  19: 5.645 s/op
Iteration  20: 5.650 s/op
Iteration  21: 5.654 s/op
Iteration  22: 5.668 s/op
Iteration  23: 5.644 s/op
Iteration  24: 5.666 s/op
Iteration  25: 5.670 s/op
Iteration  26: 5.660 s/op
Iteration  27: 5.655 s/op
Iteration  28: 5.645 s/op
Iteration  29: 5.648 s/op
Iteration  30: 5.668 s/op
Iteration  31: 5.664 s/op
Iteration  32: 5.666 s/op
Iteration  33: 5.642 s/op
Iteration  34: 5.649 s/op
Iteration  35: 5.659 s/op
Iteration  36: 5.654 s/op
Iteration  37: 5.652 s/op
Iteration  38: 5.659 s/op
Iteration  39: 5.651 s/op
Iteration  40: 5.645 s/op
Iteration  41: 5.652 s/op
Iteration  42: 5.632 s/op
Iteration  43: 5.644 s/op
Iteration  44: 5.647 s/op
Iteration  45: 5.649 s/op
Iteration  46: 5.650 s/op
Iteration  47: 5.659 s/op
Iteration  48: 5.650 s/op
Iteration  49: 5.666 s/op
Iteration  50: 5.659 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.663 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [5.600, 5.625) = 0 
    [5.625, 5.650) = 17 
    [5.650, 5.675) = 28 
    [5.675, 5.700) = 3 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 0 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 1 
    [5.825, 5.850) = 0 
    [5.850, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.632 s/op
     p(50.0000) =      5.654 s/op
     p(90.0000) =      5.676 s/op
     p(95.0000) =      5.745 s/op
     p(99.0000) =      5.880 s/op
     p(99.9000) =      5.880 s/op
     p(99.9900) =      5.880 s/op
     p(99.9990) =      5.880 s/op
     p(99.9999) =      5.880 s/op
    p(100.0000) =      5.880 s/op


# Run complete. Total time: 00:04:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.663 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_graalvm-ce-19.1.1_1564511013799.json
{"wallclock_times": [284.00905048999994], "core_cycle_counts": [[329573116370], [225883354414], [273621227345], [89067042043]], "aperf_counts": [[329010359805], [225823228185], [273601203525], [89026561074]], "mperf_counts": [[329016593810], [225823630284], [273612836618], [89032490444]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 20:28:17: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:28:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 20:28:18: INFO] 240 executions left in scheduler queue
[2019-07-30 20:28:18: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:28:18: INFO] Estimated completion (next execution): 2019-07-30 20:35:33 (0:07:14 from now)
[2019-07-30 20:28:18: INFO] Reboot in preparation for next execution
[2019-07-30 20:35:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.172 s/op
Iteration   2: 3.676 s/op
Iteration   3: 3.650 s/op
Iteration   4: 3.565 s/op
Iteration   5: 3.607 s/op
Iteration   6: 3.624 s/op
Iteration   7: 3.688 s/op
Iteration   8: 3.643 s/op
Iteration   9: 3.701 s/op
Iteration  10: 3.640 s/op
Iteration  11: 3.626 s/op
Iteration  12: 3.699 s/op
Iteration  13: 3.629 s/op
Iteration  14: 3.641 s/op
Iteration  15: 3.706 s/op
Iteration  16: 3.641 s/op
Iteration  17: 3.644 s/op
Iteration  18: 3.634 s/op
Iteration  19: 3.698 s/op
Iteration  20: 3.637 s/op
Iteration  21: 3.646 s/op
Iteration  22: 3.690 s/op
Iteration  23: 3.643 s/op
Iteration  24: 3.633 s/op
Iteration  25: 3.639 s/op
Iteration  26: 3.696 s/op
Iteration  27: 3.644 s/op
Iteration  28: 3.642 s/op
Iteration  29: 3.707 s/op
Iteration  30: 3.641 s/op
Iteration  31: 3.630 s/op
Iteration  32: 3.699 s/op
Iteration  33: 3.629 s/op
Iteration  34: 3.632 s/op
Iteration  35: 3.643 s/op
Iteration  36: 3.720 s/op
Iteration  37: 3.639 s/op
Iteration  38: 3.631 s/op
Iteration  39: 3.640 s/op
Iteration  40: 3.688 s/op
Iteration  41: 3.655 s/op
Iteration  42: 3.635 s/op
Iteration  43: 3.711 s/op
Iteration  44: 3.628 s/op
Iteration  45: 3.641 s/op
Iteration  46: 3.640 s/op
Iteration  47: 3.707 s/op
Iteration  48: 3.637 s/op
Iteration  49: 3.640 s/op
Iteration  50: 4.048 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.672 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 32 
    [3.650, 3.700) = 9 
    [3.700, 3.750) = 6 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 1 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.565 s/op
     p(50.0000) =      3.642 s/op
     p(90.0000) =      3.707 s/op
     p(95.0000) =      3.868 s/op
     p(99.0000) =      4.172 s/op
     p(99.9000) =      4.172 s/op
     p(99.9900) =      4.172 s/op
     p(99.9990) =      4.172 s/op
     p(99.9999) =      4.172 s/op
    p(100.0000) =      4.172 s/op


# Run complete. Total time: 00:03:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.672 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_graalvm-ce-19.1.1_1564511553404.json
{"wallclock_times": [184.62045281399998], "core_cycle_counts": [[184209650471], [269593092202], [127112601004], [86222685209]], "aperf_counts": [[183741927129], [269536811509], [127069008974], [86180016983]], "mperf_counts": [[183746705812], [269548722202], [127072786612], [86181090872]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 20:35:38: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:35:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 20:35:38: INFO] 239 executions left in scheduler queue
[2019-07-30 20:35:38: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:35:38: INFO] Estimated completion (next execution): 2019-07-30 20:41:13 (0:05:34 from now)
[2019-07-30 20:35:38: INFO] Reboot in preparation for next execution
[2019-07-30 20:48:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.429 s/op
Iteration   2: 10.342 s/op
Iteration   3: 10.164 s/op
Iteration   4: 10.229 s/op
Iteration   5: 10.170 s/op
Iteration   6: 10.163 s/op
Iteration   7: 10.142 s/op
Iteration   8: 10.149 s/op
Iteration   9: 10.130 s/op
Iteration  10: 10.134 s/op
Iteration  11: 10.199 s/op
Iteration  12: 10.160 s/op
Iteration  13: 10.159 s/op
Iteration  14: 10.140 s/op
Iteration  15: 10.163 s/op
Iteration  16: 10.204 s/op
Iteration  17: 10.168 s/op
Iteration  18: 10.205 s/op
Iteration  19: 10.216 s/op
Iteration  20: 10.151 s/op
Iteration  21: 10.174 s/op
Iteration  22: 10.146 s/op
Iteration  23: 10.895 s/op
Iteration  24: 10.137 s/op
Iteration  25: 10.168 s/op
Iteration  26: 10.195 s/op
Iteration  27: 10.167 s/op
Iteration  28: 10.149 s/op
Iteration  29: 10.143 s/op
Iteration  30: 10.138 s/op
Iteration  31: 10.143 s/op
Iteration  32: 10.193 s/op
Iteration  33: 10.144 s/op
Iteration  34: 10.179 s/op
Iteration  35: 10.195 s/op
Iteration  36: 10.178 s/op
Iteration  37: 10.194 s/op
Iteration  38: 10.142 s/op
Iteration  39: 10.167 s/op
Iteration  40: 10.146 s/op
Iteration  41: 10.148 s/op
Iteration  42: 10.135 s/op
Iteration  43: 10.154 s/op
Iteration  44: 10.153 s/op
Iteration  45: 10.188 s/op
Iteration  46: 10.139 s/op
Iteration  47: 10.171 s/op
Iteration  48: 10.139 s/op
Iteration  49: 10.162 s/op
Iteration  50: 10.157 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.187 ?(99.9%) 0.056 s/op

  Histogram, s/op:
    [10.100, 10.150) = 18 
    [10.150, 10.200) = 25 
    [10.200, 10.250) = 4 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 1 
    [10.350, 10.400) = 0 
    [10.400, 10.450) = 1 
    [10.450, 10.500) = 0 
    [10.500, 10.550) = 0 
    [10.550, 10.600) = 0 
    [10.600, 10.650) = 0 
    [10.650, 10.700) = 0 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.130 s/op
     p(50.0000) =     10.162 s/op
     p(90.0000) =     10.214 s/op
     p(95.0000) =     10.382 s/op
     p(99.0000) =     10.895 s/op
     p(99.9000) =     10.895 s/op
     p(99.9900) =     10.895 s/op
     p(99.9990) =     10.895 s/op
     p(99.9999) =     10.895 s/op
    p(100.0000) =     10.895 s/op


# Run complete. Total time: 00:08:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.187 ? 0.056   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_graalvm-ce-19.1.1_1564511994068.json
{"wallclock_times": [510.262932722], "core_cycle_counts": [[478708876668], [244014478957], [566773864921], [354647930792]], "aperf_counts": [[477583980715], [243916069694], [566739168665], [354622791484]], "mperf_counts": [[477592615242], [243918714108], [566739901738], [354636800522]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 20:48:24: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-30 20:48:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 20:48:25: INFO] 238 executions left in scheduler queue
[2019-07-30 20:48:25: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-30 20:48:25: INFO] Estimated completion (next execution): 2019-07-30 20:59:25 (0:11:00 from now)
[2019-07-30 20:48:25: INFO] Reboot in preparation for next execution
[2019-07-30 20:53:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.795 s/op
Iteration   2: 1.591 s/op
Iteration   3: 1.564 s/op
Iteration   4: 1.653 s/op
Iteration   5: 1.570 s/op
Iteration   6: 1.575 s/op
Iteration   7: 1.566 s/op
Iteration   8: 1.568 s/op
Iteration   9: 1.568 s/op
Iteration  10: 1.565 s/op
Iteration  11: 1.573 s/op
Iteration  12: 1.559 s/op
Iteration  13: 1.564 s/op
Iteration  14: 1.560 s/op
Iteration  15: 1.568 s/op
Iteration  16: 1.558 s/op
Iteration  17: 1.568 s/op
Iteration  18: 1.561 s/op
Iteration  19: 1.558 s/op
Iteration  20: 1.560 s/op
Iteration  21: 1.567 s/op
Iteration  22: 1.565 s/op
Iteration  23: 1.565 s/op
Iteration  24: 1.562 s/op
Iteration  25: 1.570 s/op
Iteration  26: 1.567 s/op
Iteration  27: 1.568 s/op
Iteration  28: 1.569 s/op
Iteration  29: 1.564 s/op
Iteration  30: 1.568 s/op
Iteration  31: 1.571 s/op
Iteration  32: 1.572 s/op
Iteration  33: 1.572 s/op
Iteration  34: 1.556 s/op
Iteration  35: 1.572 s/op
Iteration  36: 1.568 s/op
Iteration  37: 1.570 s/op
Iteration  38: 1.570 s/op
Iteration  39: 1.573 s/op
Iteration  40: 1.559 s/op
Iteration  41: 1.559 s/op
Iteration  42: 1.564 s/op
Iteration  43: 1.563 s/op
Iteration  44: 1.571 s/op
Iteration  45: 1.573 s/op
Iteration  46: 1.567 s/op
Iteration  47: 1.568 s/op
Iteration  48: 1.572 s/op
Iteration  49: 1.569 s/op
Iteration  50: 1.572 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.573 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 46 
    [1.575, 1.600) = 2 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.556 s/op
     p(50.0000) =      1.568 s/op
     p(90.0000) =      1.573 s/op
     p(95.0000) =      1.619 s/op
     p(99.0000) =      1.795 s/op
     p(99.9000) =      1.795 s/op
     p(99.9900) =      1.795 s/op
     p(99.9990) =      1.795 s/op
     p(99.9999) =      1.795 s/op
    p(100.0000) =      1.795 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.573 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_graalvm-ce-19.1.1_1564512760162.json
{"wallclock_times": [79.57175408699999], "core_cycle_counts": [[147131917999], [34952111979], [55800801782], [27138593114]], "aperf_counts": [[146986516506], [34908141888], [55776964950], [27111513669]], "mperf_counts": [[147003260302], [34909957046], [55782599064], [27125069812]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 20:53:59: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-30 20:54:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 20:54:00: INFO] 237 executions left in scheduler queue
[2019-07-30 20:54:00: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-30 20:54:00: INFO] Estimated completion (next execution): 2019-07-30 20:57:50 (0:03:49 from now)
[2019-07-30 20:54:00: INFO] Reboot in preparation for next execution
[2019-07-30 20:59:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.622 s/op
Iteration   2: 1.362 s/op
Iteration   3: 1.330 s/op
Iteration   4: 1.439 s/op
Iteration   5: 1.328 s/op
Iteration   6: 1.325 s/op
Iteration   7: 1.326 s/op
Iteration   8: 1.327 s/op
Iteration   9: 1.326 s/op
Iteration  10: 1.329 s/op
Iteration  11: 1.326 s/op
Iteration  12: 1.326 s/op
Iteration  13: 1.327 s/op
Iteration  14: 1.325 s/op
Iteration  15: 1.326 s/op
Iteration  16: 1.325 s/op
Iteration  17: 1.327 s/op
Iteration  18: 1.327 s/op
Iteration  19: 1.327 s/op
Iteration  20: 1.323 s/op
Iteration  21: 1.330 s/op
Iteration  22: 1.328 s/op
Iteration  23: 1.323 s/op
Iteration  24: 1.329 s/op
Iteration  25: 1.326 s/op
Iteration  26: 1.326 s/op
Iteration  27: 1.325 s/op
Iteration  28: 1.324 s/op
Iteration  29: 1.322 s/op
Iteration  30: 1.328 s/op
Iteration  31: 1.327 s/op
Iteration  32: 1.326 s/op
Iteration  33: 1.330 s/op
Iteration  34: 1.324 s/op
Iteration  35: 1.324 s/op
Iteration  36: 1.330 s/op
Iteration  37: 1.327 s/op
Iteration  38: 1.325 s/op
Iteration  39: 1.326 s/op
Iteration  40: 1.325 s/op
Iteration  41: 1.326 s/op
Iteration  42: 1.330 s/op
Iteration  43: 1.325 s/op
Iteration  44: 1.327 s/op
Iteration  45: 1.328 s/op
Iteration  46: 1.328 s/op
Iteration  47: 1.328 s/op
Iteration  48: 1.328 s/op
Iteration  49: 1.324 s/op
Iteration  50: 1.325 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.335 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [1.300, 1.325) = 10 
    [1.325, 1.350) = 37 
    [1.350, 1.375) = 1 
    [1.375, 1.400) = 0 
    [1.400, 1.425) = 0 
    [1.425, 1.450) = 1 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.322 s/op
     p(50.0000) =      1.327 s/op
     p(90.0000) =      1.330 s/op
     p(95.0000) =      1.397 s/op
     p(99.0000) =      1.622 s/op
     p(99.9000) =      1.622 s/op
     p(99.9900) =      1.622 s/op
     p(99.9990) =      1.622 s/op
     p(99.9999) =      1.622 s/op
    p(100.0000) =      1.622 s/op


# Run complete. Total time: 00:01:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.335 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_graalvm-ce-19.1.1_1564513095597.json
{"wallclock_times": [67.593138318], "core_cycle_counts": [[61493116947], [45547718953], [44373190056], [70362532549]], "aperf_counts": [[61337471720], [45525985215], [44360965899], [70350742191]], "mperf_counts": [[61353735056], [45528369020], [44379000362], [70356693284]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 20:59:23: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-30 20:59:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 20:59:24: INFO] 236 executions left in scheduler queue
[2019-07-30 20:59:24: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-07-30 20:59:24: INFO] Estimated completion (next execution): 2019-07-30 21:03:01 (0:03:37 from now)
[2019-07-30 20:59:24: INFO] Reboot in preparation for next execution
[2019-07-30 21:12:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.318 s/op
Iteration   2: 11.408 s/op
Iteration   3: 10.934 s/op
Iteration   4: 11.053 s/op
Iteration   5: 11.147 s/op
Iteration   6: 11.028 s/op
Iteration   7: 11.129 s/op
Iteration   8: 11.053 s/op
Iteration   9: 10.972 s/op
Iteration  10: 11.064 s/op
Iteration  11: 11.084 s/op
Iteration  12: 11.730 s/op
Iteration  13: 11.064 s/op
Iteration  14: 11.078 s/op
Iteration  15: 11.102 s/op
Iteration  16: 10.934 s/op
Iteration  17: 11.040 s/op
Iteration  18: 11.038 s/op
Iteration  19: 11.055 s/op
Iteration  20: 11.170 s/op
Iteration  21: 11.086 s/op
Iteration  22: 11.118 s/op
Iteration  23: 11.720 s/op
Iteration  24: 11.118 s/op
Iteration  25: 11.214 s/op
Iteration  26: 11.152 s/op
Iteration  27: 10.993 s/op
Iteration  28: 10.995 s/op
Iteration  29: 11.039 s/op
Iteration  30: 10.994 s/op
Iteration  31: 11.034 s/op
Iteration  32: 11.116 s/op
Iteration  33: 11.116 s/op
Iteration  34: 11.756 s/op
Iteration  35: 11.086 s/op
Iteration  36: 11.154 s/op
Iteration  37: 11.104 s/op
Iteration  38: 10.963 s/op
Iteration  39: 10.968 s/op
Iteration  40: 11.037 s/op
Iteration  41: 11.010 s/op
Iteration  42: 11.005 s/op
Iteration  43: 11.022 s/op
Iteration  44: 11.120 s/op
Iteration  45: 11.695 s/op
Iteration  46: 11.104 s/op
Iteration  47: 11.121 s/op
Iteration  48: 11.200 s/op
Iteration  49: 10.947 s/op
Iteration  50: 10.950 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     11.127 ?(99.9%) 0.099 s/op

  Histogram, s/op:
    [10.900, 10.950) = 4 
    [10.950, 11.000) = 6 
    [11.000, 11.050) = 9 
    [11.050, 11.100) = 9 
    [11.100, 11.150) = 11 
    [11.150, 11.200) = 4 
    [11.200, 11.250) = 1 
    [11.250, 11.300) = 0 
    [11.300, 11.350) = 1 
    [11.350, 11.400) = 0 
    [11.400, 11.450) = 1 
    [11.450, 11.500) = 0 
    [11.500, 11.550) = 0 
    [11.550, 11.600) = 0 
    [11.600, 11.650) = 0 
    [11.650, 11.700) = 1 
    [11.700, 11.750) = 2 
    [11.750, 11.800) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.934 s/op
     p(50.0000) =     11.081 s/op
     p(90.0000) =     11.399 s/op
     p(95.0000) =     11.725 s/op
     p(99.0000) =     11.756 s/op
     p(99.9000) =     11.756 s/op
     p(99.9900) =     11.756 s/op
     p(99.9990) =     11.756 s/op
     p(99.9999) =     11.756 s/op
    p(100.0000) =     11.756 s/op


# Run complete. Total time: 00:09:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.127 ? 0.099   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot-8u222-b10_1564513420514.json
{"wallclock_times": [557.264470803], "core_cycle_counts": [[391542423010], [565698468993], [544347707630], [566999818249]], "aperf_counts": [[389881278939], [565572099298], [544275110128], [566931886747]], "mperf_counts": [[389885530946], [565574240820], [544278092612], [566943301178]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 21:12:57: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-07-30 21:12:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 21:12:58: INFO] 235 executions left in scheduler queue
[2019-07-30 21:12:58: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-30 21:12:58: INFO] Estimated completion (next execution): 2019-07-30 21:24:46 (0:11:47 from now)
[2019-07-30 21:12:58: INFO] Reboot in preparation for next execution
[2019-07-30 21:17:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 21:17:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 21:17:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 21:17:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 21:17:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 21:19:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.497 s/op
Iteration   2: 2.541 s/op
Iteration   3: 2.116 s/op
Iteration   4: 2.071 s/op
Iteration   5: 2.221 s/op
Iteration   6: 2.211 s/op
Iteration   7: 2.226 s/op
Iteration   8: 2.200 s/op
Iteration   9: 2.224 s/op
Iteration  10: 2.224 s/op
Iteration  11: 2.228 s/op
Iteration  12: 2.194 s/op
Iteration  13: 2.192 s/op
Iteration  14: 2.197 s/op
Iteration  15: 2.200 s/op
Iteration  16: 2.203 s/op
Iteration  17: 2.218 s/op
Iteration  18: 2.212 s/op
Iteration  19: 2.199 s/op
Iteration  20: 2.205 s/op
Iteration  21: 2.183 s/op
Iteration  22: 2.199 s/op
Iteration  23: 2.197 s/op
Iteration  24: 2.195 s/op
Iteration  25: 2.214 s/op
Iteration  26: 2.213 s/op
Iteration  27: 2.207 s/op
Iteration  28: 2.121 s/op
Iteration  29: 2.198 s/op
Iteration  30: 2.196 s/op
Iteration  31: 2.199 s/op
Iteration  32: 2.158 s/op
Iteration  33: 2.207 s/op
Iteration  34: 2.197 s/op
Iteration  35: 2.202 s/op
Iteration  36: 2.201 s/op
Iteration  37: 2.211 s/op
Iteration  38: 2.199 s/op
Iteration  39: 2.095 s/op
Iteration  40: 2.198 s/op
Iteration  41: 2.207 s/op
Iteration  42: 2.200 s/op
Iteration  43: 2.210 s/op
Iteration  44: 2.217 s/op
Iteration  45: 2.207 s/op
Iteration  46: 2.079 s/op
Iteration  47: 2.172 s/op
Iteration  48: 2.214 s/op
Iteration  49: 2.167 s/op
Iteration  50: 2.125 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.203 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 3 
    [2.100, 2.150) = 3 
    [2.150, 2.200) = 18 
    [2.200, 2.250) = 24 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.071 s/op
     p(50.0000) =      2.200 s/op
     p(90.0000) =      2.224 s/op
     p(95.0000) =      2.349 s/op
     p(99.0000) =      2.541 s/op
     p(99.9000) =      2.541 s/op
     p(99.9900) =      2.541 s/op
     p(99.9990) =      2.541 s/op
     p(99.9999) =      2.541 s/op
    p(100.0000) =      2.541 s/op


# Run complete. Total time: 00:01:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.203 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot_12.0.2_1564514234402.json
{"wallclock_times": [111.17640220099997], "core_cycle_counts": [[109616206117], [70536825087], [67880658230], [81706701123]], "aperf_counts": [[109345762162], [70491570330], [67851668797], [81683229831]], "mperf_counts": [[123651410378], [80076556932], [76609779510], [91582728208]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 21:19:05: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-30 21:19:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 21:19:06: INFO] 234 executions left in scheduler queue
[2019-07-30 21:19:06: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-30 21:19:06: INFO] Estimated completion (next execution): 2019-07-30 21:23:27 (0:04:21 from now)
[2019-07-30 21:19:06: INFO] Reboot in preparation for next execution
[2019-07-30 21:23:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 21:23:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 21:23:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 21:23:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 21:23:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 21:24:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.960 s/op
Iteration   2: 1.843 s/op
Iteration   3: 1.856 s/op
Iteration   4: 1.873 s/op
Iteration   5: 1.883 s/op
Iteration   6: 1.942 s/op
Iteration   7: 1.885 s/op
Iteration   8: 1.752 s/op
Iteration   9: 1.742 s/op
Iteration  10: 1.745 s/op
Iteration  11: 1.743 s/op
Iteration  12: 1.746 s/op
Iteration  13: 1.742 s/op
Iteration  14: 1.743 s/op
Iteration  15: 1.745 s/op
Iteration  16: 1.744 s/op
Iteration  17: 1.745 s/op
Iteration  18: 1.743 s/op
Iteration  19: 1.744 s/op
Iteration  20: 1.744 s/op
Iteration  21: 1.744 s/op
Iteration  22: 1.746 s/op
Iteration  23: 1.744 s/op
Iteration  24: 1.743 s/op
Iteration  25: 1.749 s/op
Iteration  26: 1.745 s/op
Iteration  27: 1.746 s/op
Iteration  28: 1.746 s/op
Iteration  29: 1.741 s/op
Iteration  30: 1.741 s/op
Iteration  31: 1.742 s/op
Iteration  32: 1.745 s/op
Iteration  33: 1.744 s/op
Iteration  34: 1.744 s/op
Iteration  35: 1.749 s/op
Iteration  36: 1.744 s/op
Iteration  37: 1.747 s/op
Iteration  38: 1.743 s/op
Iteration  39: 1.743 s/op
Iteration  40: 1.747 s/op
Iteration  41: 1.746 s/op
Iteration  42: 1.745 s/op
Iteration  43: 1.745 s/op
Iteration  44: 1.746 s/op
Iteration  45: 1.744 s/op
Iteration  46: 1.747 s/op
Iteration  47: 1.743 s/op
Iteration  48: 1.747 s/op
Iteration  49: 1.745 s/op
Iteration  50: 1.740 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.765 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 42 
    [1.750, 1.775) = 1 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 1 
    [1.850, 1.875) = 2 
    [1.875, 1.900) = 2 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 1 
    [1.950, 1.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.740 s/op
     p(50.0000) =      1.745 s/op
     p(90.0000) =      1.871 s/op
     p(95.0000) =      1.911 s/op
     p(99.0000) =      1.960 s/op
     p(99.9000) =      1.960 s/op
     p(99.9900) =      1.960 s/op
     p(99.9990) =      1.960 s/op
     p(99.9999) =      1.960 s/op
    p(100.0000) =      1.960 s/op


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.765 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot_12.0.2_1564514602595.json
{"wallclock_times": [89.20902125100002], "core_cycle_counts": [[80057019429], [90403421244], [59420750181], [61978691251]], "aperf_counts": [[79837638968], [90368956452], [59391091687], [61960993421]], "mperf_counts": [[80292225710], [90758239924], [59580447992], [62440936716]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 21:24:51: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-30 21:24:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 21:24:52: INFO] 233 executions left in scheduler queue
[2019-07-30 21:24:52: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-07-30 21:24:52: INFO] Estimated completion (next execution): 2019-07-30 21:28:52 (0:03:59 from now)
[2019-07-30 21:24:52: INFO] Reboot in preparation for next execution
[2019-07-30 21:39:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.569 s/op
Iteration   2: 12.192 s/op
Iteration   3: 12.302 s/op
Iteration   4: 12.198 s/op
Iteration   5: 12.250 s/op
Iteration   6: 12.431 s/op
Iteration   7: 12.129 s/op
Iteration   8: 12.261 s/op
Iteration   9: 12.160 s/op
Iteration  10: 12.264 s/op
Iteration  11: 12.163 s/op
Iteration  12: 12.739 s/op
Iteration  13: 12.091 s/op
Iteration  14: 12.245 s/op
Iteration  15: 12.120 s/op
Iteration  16: 12.227 s/op
Iteration  17: 12.140 s/op
Iteration  18: 12.486 s/op
Iteration  19: 12.137 s/op
Iteration  20: 12.491 s/op
Iteration  21: 12.134 s/op
Iteration  22: 12.505 s/op
Iteration  23: 12.744 s/op
Iteration  24: 12.518 s/op
Iteration  25: 12.105 s/op
Iteration  26: 12.382 s/op
Iteration  27: 12.122 s/op
Iteration  28: 12.180 s/op
Iteration  29: 12.108 s/op
Iteration  30: 12.189 s/op
Iteration  31: 12.323 s/op
Iteration  32: 12.228 s/op
Iteration  33: 12.328 s/op
Iteration  34: 12.726 s/op
Iteration  35: 12.282 s/op
Iteration  36: 12.160 s/op
Iteration  37: 12.352 s/op
Iteration  38: 12.187 s/op
Iteration  39: 12.351 s/op
Iteration  40: 12.193 s/op
Iteration  41: 12.314 s/op
Iteration  42: 12.189 s/op
Iteration  43: 12.318 s/op
Iteration  44: 12.205 s/op
Iteration  45: 12.796 s/op
Iteration  46: 12.200 s/op
Iteration  47: 12.293 s/op
Iteration  48: 12.177 s/op
Iteration  49: 12.275 s/op
Iteration  50: 12.192 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     12.293 ?(99.9%) 0.089 s/op

  Histogram, s/op:
    [12.000, 12.050) = 0 
    [12.050, 12.100) = 1 
    [12.100, 12.150) = 8 
    [12.150, 12.200) = 12 
    [12.200, 12.250) = 6 
    [12.250, 12.300) = 5 
    [12.300, 12.350) = 5 
    [12.350, 12.400) = 3 
    [12.400, 12.450) = 1 
    [12.450, 12.500) = 2 
    [12.500, 12.550) = 2 
    [12.550, 12.600) = 1 
    [12.600, 12.650) = 0 
    [12.650, 12.700) = 0 
    [12.700, 12.750) = 3 
    [12.750, 12.800) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.091 s/op
     p(50.0000) =     12.237 s/op
     p(90.0000) =     12.564 s/op
     p(95.0000) =     12.741 s/op
     p(99.0000) =     12.796 s/op
     p(99.9000) =     12.796 s/op
     p(99.9900) =     12.796 s/op
     p(99.9990) =     12.796 s/op
     p(99.9999) =     12.796 s/op
    p(100.0000) =     12.796 s/op


# Run complete. Total time: 00:10:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.293 ? 0.089   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot-8u222-b10_1564514948455.json
{"wallclock_times": [615.830670475], "core_cycle_counts": [[653734878143], [480239831855], [443004201721], [695034827856]], "aperf_counts": [[652172346978], [480037929427], [442910164812], [694951111807]], "mperf_counts": [[652181988066], [480045034652], [442911917514], [694951554186]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 21:39:24: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-07-30 21:39:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 21:39:25: INFO] 232 executions left in scheduler queue
[2019-07-30 21:39:25: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-30 21:39:25: INFO] Estimated completion (next execution): 2019-07-30 21:52:11 (0:12:46 from now)
[2019-07-30 21:39:25: INFO] Reboot in preparation for next execution
[2019-07-30 21:43:41: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-30 21:45:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.883 s/op
Iteration   2: 2.320 s/op
Iteration   3: 2.249 s/op
Iteration   4: 1.934 s/op
Iteration   5: 1.915 s/op
Iteration   6: 1.851 s/op
Iteration   7: 1.883 s/op
Iteration   8: 1.867 s/op
Iteration   9: 1.869 s/op
Iteration  10: 1.848 s/op
Iteration  11: 1.817 s/op
Iteration  12: 1.848 s/op
Iteration  13: 1.839 s/op
Iteration  14: 1.847 s/op
Iteration  15: 1.849 s/op
Iteration  16: 1.842 s/op
Iteration  17: 1.853 s/op
Iteration  18: 1.902 s/op
Iteration  19: 1.895 s/op
Iteration  20: 1.865 s/op
Iteration  21: 1.878 s/op
Iteration  22: 1.858 s/op
Iteration  23: 1.886 s/op
Iteration  24: 1.889 s/op
Iteration  25: 1.853 s/op
Iteration  26: 1.903 s/op
Iteration  27: 1.900 s/op
Iteration  28: 1.882 s/op
Iteration  29: 1.869 s/op
Iteration  30: 1.896 s/op
Iteration  31: 1.906 s/op
Iteration  32: 1.872 s/op
Iteration  33: 1.899 s/op
Iteration  34: 1.865 s/op
Iteration  35: 1.865 s/op
Iteration  36: 1.849 s/op
Iteration  37: 1.900 s/op
Iteration  38: 1.906 s/op
Iteration  39: 1.856 s/op
Iteration  40: 1.846 s/op
Iteration  41: 1.880 s/op
Iteration  42: 1.895 s/op
Iteration  43: 1.872 s/op
Iteration  44: 1.872 s/op
Iteration  45: 1.878 s/op
Iteration  46: 1.878 s/op
Iteration  47: 1.894 s/op
Iteration  48: 1.885 s/op
Iteration  49: 1.881 s/op
Iteration  50: 1.899 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.912 ?(99.9%) 0.081 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 23 
    [1.875, 2.000) = 24 
    [2.000, 2.125) = 0 
    [2.125, 2.250) = 1 
    [2.250, 2.375) = 1 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.817 s/op
     p(50.0000) =      1.878 s/op
     p(90.0000) =      1.914 s/op
     p(95.0000) =      2.281 s/op
     p(99.0000) =      2.883 s/op
     p(99.9000) =      2.883 s/op
     p(99.9900) =      2.883 s/op
     p(99.9990) =      2.883 s/op
     p(99.9999) =      2.883 s/op
    p(100.0000) =      2.883 s/op


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.912 ? 0.081   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9-8u222-b10_1564515821437.json
{"wallclock_times": [96.84150712600004], "core_cycle_counts": [[99542986448], [55598639805], [107248718711], [73469699919]], "aperf_counts": [[99214733311], [55528829652], [107198470507], [73416807217]], "mperf_counts": [[99216434692], [55534866098], [107198465084], [73418587862]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-30 21:45:18: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-30 21:45:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 21:45:19: INFO] 231 executions left in scheduler queue
[2019-07-30 21:45:19: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-30 21:45:19: INFO] Estimated completion (next execution): 2019-07-30 21:49:26 (0:04:07 from now)
[2019-07-30 21:45:19: INFO] Reboot in preparation for next execution
[2019-07-30 21:49:36: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-30 21:51:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.989 s/op
Iteration   2: 2.706 s/op
Iteration   3: 2.903 s/op
Iteration   4: 2.485 s/op
Iteration   5: 2.255 s/op
Iteration   6: 2.303 s/op
Iteration   7: 2.338 s/op
Iteration   8: 2.325 s/op
Iteration   9: 2.313 s/op
Iteration  10: 2.327 s/op
Iteration  11: 2.334 s/op
Iteration  12: 2.327 s/op
Iteration  13: 2.343 s/op
Iteration  14: 2.349 s/op
Iteration  15: 2.312 s/op
Iteration  16: 2.325 s/op
Iteration  17: 2.331 s/op
Iteration  18: 2.346 s/op
Iteration  19: 2.359 s/op
Iteration  20: 2.360 s/op
Iteration  21: 2.326 s/op
Iteration  22: 2.352 s/op
Iteration  23: 2.328 s/op
Iteration  24: 2.322 s/op
Iteration  25: 2.338 s/op
Iteration  26: 2.317 s/op
Iteration  27: 2.334 s/op
Iteration  28: 2.294 s/op
Iteration  29: 2.328 s/op
Iteration  30: 2.332 s/op
Iteration  31: 2.347 s/op
Iteration  32: 2.347 s/op
Iteration  33: 2.357 s/op
Iteration  34: 2.334 s/op
Iteration  35: 2.349 s/op
Iteration  36: 2.319 s/op
Iteration  37: 2.317 s/op
Iteration  38: 2.338 s/op
Iteration  39: 2.324 s/op
Iteration  40: 2.318 s/op
Iteration  41: 2.335 s/op
Iteration  42: 2.357 s/op
Iteration  43: 2.326 s/op
Iteration  44: 2.349 s/op
Iteration  45: 2.353 s/op
Iteration  46: 2.310 s/op
Iteration  47: 2.332 s/op
Iteration  48: 2.317 s/op
Iteration  49: 2.332 s/op
Iteration  50: 2.347 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.366 ?(99.9%) 0.066 s/op

  Histogram, s/op:
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 2 
    [2.300, 2.350) = 38 
    [2.350, 2.400) = 6 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.255 s/op
     p(50.0000) =      2.333 s/op
     p(90.0000) =      2.360 s/op
     p(95.0000) =      2.795 s/op
     p(99.0000) =      2.989 s/op
     p(99.9000) =      2.989 s/op
     p(99.9900) =      2.989 s/op
     p(99.9990) =      2.989 s/op
     p(99.9999) =      2.989 s/op
    p(100.0000) =      2.989 s/op


# Run complete. Total time: 00:01:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.366 ? 0.066   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9-8u222-b10_1564516175949.json
{"wallclock_times": [119.428618105], "core_cycle_counts": [[112765580891], [80654405728], [105330424009], [108154627399]], "aperf_counts": [[112447019251], [80579505154], [105295118054], [108124944906]], "mperf_counts": [[112446899456], [80579487688], [105295112716], [108124944464]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-30 21:51:35: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-30 21:51:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 21:51:36: INFO] 230 executions left in scheduler queue
[2019-07-30 21:51:36: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 21:51:36: INFO] Estimated completion (next execution): 2019-07-30 21:56:06 (0:04:29 from now)
[2019-07-30 21:51:36: INFO] Reboot in preparation for next execution
[2019-07-30 21:56:08: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 21:56:08: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 21:56:08: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 21:56:08: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 21:56:08: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 22:01:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.069 s/op
Iteration   2: 6.532 s/op
Iteration   3: 7.014 s/op
Iteration   4: 7.150 s/op
Iteration   5: 6.854 s/op
Iteration   6: 6.836 s/op
Iteration   7: 6.855 s/op
Iteration   8: 6.587 s/op
Iteration   9: 6.856 s/op
Iteration  10: 6.847 s/op
Iteration  11: 6.849 s/op
Iteration  12: 6.862 s/op
Iteration  13: 6.858 s/op
Iteration  14: 6.831 s/op
Iteration  15: 6.856 s/op
Iteration  16: 6.057 s/op
Iteration  17: 6.876 s/op
Iteration  18: 6.887 s/op
Iteration  19: 6.915 s/op
Iteration  20: 6.892 s/op
Iteration  21: 6.866 s/op
Iteration  22: 6.867 s/op
Iteration  23: 6.841 s/op
Iteration  24: 6.899 s/op
Iteration  25: 6.891 s/op
Iteration  26: 6.875 s/op
Iteration  27: 6.866 s/op
Iteration  28: 6.852 s/op
Iteration  29: 6.862 s/op
Iteration  30: 6.852 s/op
Iteration  31: 6.847 s/op
Iteration  32: 6.864 s/op
Iteration  33: 6.837 s/op
Iteration  34: 6.876 s/op
Iteration  35: 6.848 s/op
Iteration  36: 6.879 s/op
Iteration  37: 6.831 s/op
Iteration  38: 6.832 s/op
Iteration  39: 6.846 s/op
Iteration  40: 6.825 s/op
Iteration  41: 6.830 s/op
Iteration  42: 6.844 s/op
Iteration  43: 6.828 s/op
Iteration  44: 6.819 s/op
Iteration  45: 6.845 s/op
Iteration  46: 6.871 s/op
Iteration  47: 6.809 s/op
Iteration  48: 6.863 s/op
Iteration  49: 6.877 s/op
Iteration  50: 6.899 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.843 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [6.000, 6.125) = 1 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 2 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 34 
    [6.875, 7.000) = 10 
    [7.000, 7.125) = 2 
    [7.125, 7.250) = 1 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.057 s/op
     p(50.0000) =      6.855 s/op
     p(90.0000) =      6.899 s/op
     p(95.0000) =      7.039 s/op
     p(99.0000) =      7.150 s/op
     p(99.9000) =      7.150 s/op
     p(99.9900) =      7.150 s/op
     p(99.9990) =      7.150 s/op
     p(99.9999) =      7.150 s/op
    p(100.0000) =      7.150 s/op


# Run complete. Total time: 00:05:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.843 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot_12.0.2_1564516568667.json
{"wallclock_times": [343.21921269999996], "core_cycle_counts": [[24836744263], [255953276637], [371154918540], [334861209511]], "aperf_counts": [[23754892438], [255885267417], [371103059841], [334824646147]], "mperf_counts": [[25485093176], [288569274116], [421017022422], [381757440918]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 22:01:51: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 22:01:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 22:01:52: INFO] 229 executions left in scheduler queue
[2019-07-30 22:01:52: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 22:01:52: INFO] Estimated completion (next execution): 2019-07-30 22:10:06 (0:08:13 from now)
[2019-07-30 22:01:52: INFO] Reboot in preparation for next execution
[2019-07-30 22:06:08: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 22:06:08: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 22:06:08: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 22:06:08: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 22:06:08: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 22:14:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.572 s/op
Iteration   2: 10.948 s/op
Iteration   3: 10.786 s/op
Iteration   4: 10.546 s/op
Iteration   5: 10.580 s/op
Iteration   6: 10.539 s/op
Iteration   7: 10.602 s/op
Iteration   8: 10.567 s/op
Iteration   9: 10.583 s/op
Iteration  10: 10.576 s/op
Iteration  11: 10.580 s/op
Iteration  12: 10.566 s/op
Iteration  13: 10.574 s/op
Iteration  14: 10.574 s/op
Iteration  15: 10.554 s/op
Iteration  16: 10.553 s/op
Iteration  17: 10.563 s/op
Iteration  18: 10.551 s/op
Iteration  19: 10.555 s/op
Iteration  20: 10.561 s/op
Iteration  21: 10.564 s/op
Iteration  22: 10.570 s/op
Iteration  23: 10.563 s/op
Iteration  24: 10.608 s/op
Iteration  25: 10.600 s/op
Iteration  26: 10.571 s/op
Iteration  27: 10.567 s/op
Iteration  28: 10.565 s/op
Iteration  29: 10.583 s/op
Iteration  30: 10.550 s/op
Iteration  31: 10.548 s/op
Iteration  32: 10.547 s/op
Iteration  33: 10.553 s/op
Iteration  34: 10.543 s/op
Iteration  35: 10.578 s/op
Iteration  36: 10.566 s/op
Iteration  37: 10.579 s/op
Iteration  38: 10.550 s/op
Iteration  39: 10.597 s/op
Iteration  40: 10.572 s/op
Iteration  41: 10.592 s/op
Iteration  42: 10.565 s/op
Iteration  43: 10.571 s/op
Iteration  44: 10.588 s/op
Iteration  45: 10.566 s/op
Iteration  46: 10.582 s/op
Iteration  47: 10.582 s/op
Iteration  48: 10.568 s/op
Iteration  49: 10.556 s/op
Iteration  50: 10.555 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.581 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [10.500, 10.550) = 5 
    [10.550, 10.600) = 41 
    [10.600, 10.650) = 2 
    [10.650, 10.700) = 0 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 1 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.539 s/op
     p(50.0000) =     10.567 s/op
     p(90.0000) =     10.600 s/op
     p(95.0000) =     10.688 s/op
     p(99.0000) =     10.948 s/op
     p(99.9000) =     10.948 s/op
     p(99.9900) =     10.948 s/op
     p(99.9990) =     10.948 s/op
     p(99.9999) =     10.948 s/op
    p(100.0000) =     10.948 s/op


# Run complete. Total time: 00:08:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.581 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot_12.0.2_1564517168607.json
{"wallclock_times": [529.972921981], "core_cycle_counts": [[379401031127], [242562888138], [696495738561], [393078374907]], "aperf_counts": [[378090975515], [242420302195], [696413099264], [393017360040]], "mperf_counts": [[378336393036], [242472131042], [696475208884], [393079664130]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 22:14:58: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 22:14:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 22:14:59: INFO] 228 executions left in scheduler queue
[2019-07-30 22:14:59: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 22:14:59: INFO] Estimated completion (next execution): 2019-07-30 22:26:19 (0:11:20 from now)
[2019-07-30 22:14:59: INFO] Reboot in preparation for next execution
[2019-07-30 22:19:15: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 22:19:15: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 22:19:15: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 22:19:15: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 22:19:15: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 22:24:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.197 s/op
Iteration   2: 7.552 s/op
Iteration   3: 6.743 s/op
Iteration   4: 6.648 s/op
Iteration   5: 6.712 s/op
Iteration   6: 6.665 s/op
Iteration   7: 6.693 s/op
Iteration   8: 6.729 s/op
Iteration   9: 6.740 s/op
Iteration  10: 6.615 s/op
Iteration  11: 6.753 s/op
Iteration  12: 6.636 s/op
Iteration  13: 6.765 s/op
Iteration  14: 6.768 s/op
Iteration  15: 6.622 s/op
Iteration  16: 6.763 s/op
Iteration  17: 6.649 s/op
Iteration  18: 6.777 s/op
Iteration  19: 6.758 s/op
Iteration  20: 6.660 s/op
Iteration  21: 6.760 s/op
Iteration  22: 6.748 s/op
Iteration  23: 6.623 s/op
Iteration  24: 6.767 s/op
Iteration  25: 6.757 s/op
Iteration  26: 6.730 s/op
Iteration  27: 6.716 s/op
Iteration  28: 6.713 s/op
Iteration  29: 6.691 s/op
Iteration  30: 6.714 s/op
Iteration  31: 6.701 s/op
Iteration  32: 6.812 s/op
Iteration  33: 6.741 s/op
Iteration  34: 6.606 s/op
Iteration  35: 6.794 s/op
Iteration  36: 6.756 s/op
Iteration  37: 6.642 s/op
Iteration  38: 6.755 s/op
Iteration  39: 6.756 s/op
Iteration  40: 6.657 s/op
Iteration  41: 6.757 s/op
Iteration  42: 6.616 s/op
Iteration  43: 6.758 s/op
Iteration  44: 6.748 s/op
Iteration  45: 6.613 s/op
Iteration  46: 6.754 s/op
Iteration  47: 6.670 s/op
Iteration  48: 6.753 s/op
Iteration  49: 6.751 s/op
Iteration  50: 6.759 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.741 ?(99.9%) 0.072 s/op

  Histogram, s/op:
    [6.600, 6.700) = 16 
    [6.700, 6.800) = 31 
    [6.800, 6.900) = 1 
    [6.900, 7.000) = 0 
    [7.000, 7.100) = 0 
    [7.100, 7.200) = 1 
    [7.200, 7.300) = 0 
    [7.300, 7.400) = 0 
    [7.400, 7.500) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.606 s/op
     p(50.0000) =      6.742 s/op
     p(90.0000) =      6.776 s/op
     p(95.0000) =      6.985 s/op
     p(99.0000) =      7.552 s/op
     p(99.9000) =      7.552 s/op
     p(99.9900) =      7.552 s/op
     p(99.9990) =      7.552 s/op
     p(99.9999) =      7.552 s/op
    p(100.0000) =      7.552 s/op


# Run complete. Total time: 00:05:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.741 ? 0.072   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot_12.0.2_1564517955563.json
{"wallclock_times": [338.17779898], "core_cycle_counts": [[265507463384], [269895042045], [377850825847], [289234726149]], "aperf_counts": [[264636677560], [269808591130], [377808379682], [289196562684]], "mperf_counts": [[266545823412], [269978838196], [377947572832], [289373356838]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 22:24:53: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 22:24:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 22:24:54: INFO] 227 executions left in scheduler queue
[2019-07-30 22:24:54: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 22:24:54: INFO] Estimated completion (next execution): 2019-07-30 22:33:03 (0:08:08 from now)
[2019-07-30 22:24:54: INFO] Reboot in preparation for next execution
[2019-07-30 22:29:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 22:29:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 22:29:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 22:29:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 22:29:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 22:42:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.229 s/op
Iteration   2: 16.520 s/op
Iteration   3: 16.887 s/op
Iteration   4: 16.202 s/op
Iteration   5: 16.120 s/op
Iteration   6: 16.109 s/op
Iteration   7: 16.165 s/op
Iteration   8: 16.138 s/op
Iteration   9: 16.140 s/op
Iteration  10: 16.152 s/op
Iteration  11: 16.121 s/op
Iteration  12: 16.158 s/op
Iteration  13: 16.132 s/op
Iteration  14: 16.164 s/op
Iteration  15: 16.116 s/op
Iteration  16: 16.167 s/op
Iteration  17: 16.143 s/op
Iteration  18: 16.081 s/op
Iteration  19: 16.085 s/op
Iteration  20: 16.158 s/op
Iteration  21: 16.095 s/op
Iteration  22: 16.111 s/op
Iteration  23: 16.098 s/op
Iteration  24: 16.116 s/op
Iteration  25: 16.126 s/op
Iteration  26: 16.077 s/op
Iteration  27: 16.082 s/op
Iteration  28: 16.116 s/op
Iteration  29: 16.132 s/op
Iteration  30: 16.092 s/op
Iteration  31: 16.091 s/op
Iteration  32: 16.160 s/op
Iteration  33: 16.178 s/op
Iteration  34: 16.104 s/op
Iteration  35: 16.118 s/op
Iteration  36: 16.121 s/op
Iteration  37: 16.156 s/op
Iteration  38: 16.101 s/op
Iteration  39: 16.110 s/op
Iteration  40: 16.123 s/op
Iteration  41: 16.159 s/op
Iteration  42: 16.110 s/op
Iteration  43: 16.114 s/op
Iteration  44: 16.096 s/op
Iteration  45: 16.131 s/op
Iteration  46: 16.207 s/op
Iteration  47: 16.096 s/op
Iteration  48: 16.223 s/op
Iteration  49: 16.155 s/op
Iteration  50: 16.093 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.154 ?(99.9%) 0.062 s/op

  Histogram, s/op:
    [16.000, 16.050) = 0 
    [16.050, 16.100) = 11 
    [16.100, 16.150) = 22 
    [16.150, 16.200) = 11 
    [16.200, 16.250) = 4 
    [16.250, 16.300) = 0 
    [16.300, 16.350) = 0 
    [16.350, 16.400) = 0 
    [16.400, 16.450) = 0 
    [16.450, 16.500) = 0 
    [16.500, 16.550) = 1 
    [16.550, 16.600) = 0 
    [16.600, 16.650) = 0 
    [16.650, 16.700) = 0 
    [16.700, 16.750) = 0 
    [16.750, 16.800) = 0 
    [16.800, 16.850) = 0 
    [16.850, 16.900) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.077 s/op
     p(50.0000) =     16.122 s/op
     p(90.0000) =     16.206 s/op
     p(95.0000) =     16.360 s/op
     p(99.0000) =     16.887 s/op
     p(99.9000) =     16.887 s/op
     p(99.9900) =     16.887 s/op
     p(99.9990) =     16.887 s/op
     p(99.9999) =     16.887 s/op
    p(100.0000) =     16.887 s/op


# Run complete. Total time: 00:13:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.154 ? 0.062   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot_12.0.2_1564518550485.json
{"wallclock_times": [808.709352503], "core_cycle_counts": [[462138545744], [335529013701], [1231643026224], [576873160170]], "aperf_counts": [[460093597378], [335337383120], [1231548865049], [576753698208]], "mperf_counts": [[460567674662], [335433202336], [1233487033312], [577024571508]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 22:42:39: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-30 22:42:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 22:42:40: INFO] 226 executions left in scheduler queue
[2019-07-30 22:42:40: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-07-30 22:42:40: INFO] Estimated completion (next execution): 2019-07-30 22:58:39 (0:15:58 from now)
[2019-07-30 22:42:40: INFO] Reboot in preparation for next execution
[2019-07-30 22:51:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.596 s/op
Iteration   2: 5.274 s/op
Iteration   3: 5.396 s/op
Iteration   4: 5.497 s/op
Iteration   5: 5.177 s/op
Iteration   6: 5.267 s/op
Iteration   7: 5.193 s/op
Iteration   8: 5.192 s/op
Iteration   9: 5.269 s/op
Iteration  10: 5.287 s/op
Iteration  11: 5.120 s/op
Iteration  12: 5.953 s/op
Iteration  13: 5.209 s/op
Iteration  14: 5.163 s/op
Iteration  15: 5.167 s/op
Iteration  16: 5.192 s/op
Iteration  17: 5.147 s/op
Iteration  18: 5.144 s/op
Iteration  19: 5.312 s/op
Iteration  20: 5.175 s/op
Iteration  21: 5.197 s/op
Iteration  22: 5.175 s/op
Iteration  23: 6.022 s/op
Iteration  24: 5.055 s/op
Iteration  25: 5.160 s/op
Iteration  26: 5.179 s/op
Iteration  27: 5.328 s/op
Iteration  28: 5.178 s/op
Iteration  29: 5.198 s/op
Iteration  30: 5.185 s/op
Iteration  31: 5.190 s/op
Iteration  32: 5.181 s/op
Iteration  33: 5.158 s/op
Iteration  34: 5.964 s/op
Iteration  35: 5.052 s/op
Iteration  36: 5.180 s/op
Iteration  37: 5.127 s/op
Iteration  38: 5.128 s/op
Iteration  39: 5.182 s/op
Iteration  40: 5.191 s/op
Iteration  41: 5.182 s/op
Iteration  42: 5.189 s/op
Iteration  43: 5.186 s/op
Iteration  44: 5.191 s/op
Iteration  45: 6.010 s/op
Iteration  46: 5.065 s/op
Iteration  47: 5.182 s/op
Iteration  48: 5.164 s/op
Iteration  49: 5.141 s/op
Iteration  50: 5.319 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.268 ?(99.9%) 0.116 s/op

  Histogram, s/op:
    [5.000, 5.100) = 3 
    [5.100, 5.200) = 32 
    [5.200, 5.300) = 5 
    [5.300, 5.400) = 4 
    [5.400, 5.500) = 1 
    [5.500, 5.600) = 1 
    [5.600, 5.700) = 0 
    [5.700, 5.800) = 0 
    [5.800, 5.900) = 0 
    [5.900, 6.000) = 2 
    [6.000, 6.100) = 2 

  Percentiles, s/op:
      p(0.0000) =      5.052 s/op
     p(50.0000) =      5.186 s/op
     p(90.0000) =      5.586 s/op
     p(95.0000) =      5.985 s/op
     p(99.0000) =      6.022 s/op
     p(99.9000) =      6.022 s/op
     p(99.9900) =      6.022 s/op
     p(99.9990) =      6.022 s/op
     p(99.9999) =      6.022 s/op
    p(100.0000) =      6.022 s/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.268 ? 0.116   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_graalvm-ee-19.1.1_1564519617011.json
{"wallclock_times": [264.55881412099995], "core_cycle_counts": [[316521715338], [308185544646], [232052290662], [201434309467]], "aperf_counts": [[315906939997], [308103454659], [232013948355], [201398267526]], "mperf_counts": [[315933881340], [308107028052], [232020498000], [201399231440]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-30 22:51:21: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-07-30 22:51:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 22:51:22: INFO] 225 executions left in scheduler queue
[2019-07-30 22:51:22: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 22:51:22: INFO] Estimated completion (next execution): 2019-07-30 22:58:17 (0:06:54 from now)
[2019-07-30 22:51:22: INFO] Reboot in preparation for next execution
[2019-07-30 22:55:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 22:55:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 22:55:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 22:55:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 22:55:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 23:03:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.599 s/op
Iteration   2: 9.610 s/op
Iteration   3: 9.409 s/op
Iteration   4: 9.645 s/op
Iteration   5: 9.340 s/op
Iteration   6: 9.366 s/op
Iteration   7: 9.351 s/op
Iteration   8: 9.358 s/op
Iteration   9: 9.335 s/op
Iteration  10: 9.366 s/op
Iteration  11: 9.352 s/op
Iteration  12: 9.343 s/op
Iteration  13: 9.362 s/op
Iteration  14: 9.366 s/op
Iteration  15: 9.359 s/op
Iteration  16: 9.360 s/op
Iteration  17: 9.406 s/op
Iteration  18: 9.419 s/op
Iteration  19: 9.373 s/op
Iteration  20: 9.396 s/op
Iteration  21: 9.397 s/op
Iteration  22: 9.413 s/op
Iteration  23: 9.387 s/op
Iteration  24: 9.373 s/op
Iteration  25: 9.389 s/op
Iteration  26: 9.373 s/op
Iteration  27: 9.394 s/op
Iteration  28: 9.383 s/op
Iteration  29: 9.390 s/op
Iteration  30: 9.386 s/op
Iteration  31: 9.390 s/op
Iteration  32: 9.380 s/op
Iteration  33: 9.395 s/op
Iteration  34: 9.379 s/op
Iteration  35: 9.380 s/op
Iteration  36: 9.371 s/op
Iteration  37: 9.414 s/op
Iteration  38: 9.366 s/op
Iteration  39: 9.383 s/op
Iteration  40: 9.365 s/op
Iteration  41: 9.371 s/op
Iteration  42: 9.383 s/op
Iteration  43: 9.387 s/op
Iteration  44: 9.382 s/op
Iteration  45: 9.385 s/op
Iteration  46: 9.398 s/op
Iteration  47: 9.385 s/op
Iteration  48: 9.401 s/op
Iteration  49: 9.392 s/op
Iteration  50: 9.399 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.394 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [9.300, 9.325) = 0 
    [9.325, 9.350) = 3 
    [9.350, 9.375) = 16 
    [9.375, 9.400) = 22 
    [9.400, 9.425) = 6 
    [9.425, 9.450) = 0 
    [9.450, 9.475) = 0 
    [9.475, 9.500) = 0 
    [9.500, 9.525) = 0 
    [9.525, 9.550) = 0 
    [9.550, 9.575) = 0 
    [9.575, 9.600) = 1 
    [9.600, 9.625) = 1 
    [9.625, 9.650) = 1 
    [9.650, 9.675) = 0 
    [9.675, 9.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.335 s/op
     p(50.0000) =      9.383 s/op
     p(90.0000) =      9.414 s/op
     p(95.0000) =      9.604 s/op
     p(99.0000) =      9.645 s/op
     p(99.9000) =      9.645 s/op
     p(99.9900) =      9.645 s/op
     p(99.9990) =      9.645 s/op
     p(99.9999) =      9.645 s/op
    p(100.0000) =      9.645 s/op


# Run complete. Total time: 00:07:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.394 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot_11.0.4_1564520137792.json
{"wallclock_times": [470.74876369899994], "core_cycle_counts": [[675193127947], [166960426814], [498346612565], [179050160698]], "aperf_counts": [[674372652357], [166814899667], [498249782617], [178965705196]], "mperf_counts": [[675130123192], [166891898532], [498278795846], [178996050000]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 23:03:28: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 23:03:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 23:03:29: INFO] 224 executions left in scheduler queue
[2019-07-30 23:03:29: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 23:03:29: INFO] Estimated completion (next execution): 2019-07-30 23:13:50 (0:10:21 from now)
[2019-07-30 23:03:29: INFO] Reboot in preparation for next execution
[2019-07-30 23:07:46: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 23:07:46: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 23:07:46: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 23:07:46: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 23:07:46: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 23:21:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.110 s/op
Iteration   2: 16.063 s/op
Iteration   3: 15.866 s/op
Iteration   4: 15.924 s/op
Iteration   5: 16.876 s/op
Iteration   6: 15.789 s/op
Iteration   7: 15.795 s/op
Iteration   8: 15.815 s/op
Iteration   9: 15.820 s/op
Iteration  10: 15.840 s/op
Iteration  11: 15.898 s/op
Iteration  12: 15.897 s/op
Iteration  13: 15.929 s/op
Iteration  14: 15.914 s/op
Iteration  15: 15.939 s/op
Iteration  16: 15.830 s/op
Iteration  17: 15.857 s/op
Iteration  18: 15.835 s/op
Iteration  19: 15.773 s/op
Iteration  20: 15.786 s/op
Iteration  21: 15.744 s/op
Iteration  22: 15.801 s/op
Iteration  23: 15.789 s/op
Iteration  24: 15.803 s/op
Iteration  25: 15.924 s/op
Iteration  26: 15.864 s/op
Iteration  27: 15.905 s/op
Iteration  28: 15.899 s/op
Iteration  29: 15.824 s/op
Iteration  30: 15.805 s/op
Iteration  31: 15.779 s/op
Iteration  32: 15.752 s/op
Iteration  33: 15.795 s/op
Iteration  34: 15.796 s/op
Iteration  35: 15.844 s/op
Iteration  36: 17.543 s/op
Iteration  37: 15.874 s/op
Iteration  38: 15.979 s/op
Iteration  39: 15.887 s/op
Iteration  40: 15.803 s/op
Iteration  41: 15.756 s/op
Iteration  42: 15.805 s/op
Iteration  43: 15.807 s/op
Iteration  44: 15.800 s/op
Iteration  45: 15.744 s/op
Iteration  46: 15.909 s/op
Iteration  47: 15.856 s/op
Iteration  48: 15.872 s/op
Iteration  49: 15.892 s/op
Iteration  50: 15.896 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.886 ?(99.9%) 0.152 s/op

  Histogram, s/op:
    [15.000, 15.250) = 1 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 2 
    [15.750, 16.000) = 44 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.110 s/op
     p(50.0000) =     15.837 s/op
     p(90.0000) =     15.938 s/op
     p(95.0000) =     16.429 s/op
     p(99.0000) =     17.543 s/op
     p(99.9000) =     17.543 s/op
     p(99.9900) =     17.543 s/op
     p(99.9990) =     17.543 s/op
     p(99.9999) =     17.543 s/op
    p(100.0000) =     17.543 s/op


# Run complete. Total time: 00:13:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.886 ? 0.152   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot_11.0.4_1564520866547.json
{"wallclock_times": [795.355193252], "core_cycle_counts": [[479919522840], [947558058408], [289471088251], [843986556138]], "aperf_counts": [[477815648933], [947421582818], [289413654608], [843903625121]], "mperf_counts": [[480116514720], [947680909796], [290288464140], [843956022826]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 23:21:01: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 23:21:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 23:21:02: INFO] 223 executions left in scheduler queue
[2019-07-30 23:21:02: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 23:21:02: INFO] Estimated completion (next execution): 2019-07-30 23:36:48 (0:15:45 from now)
[2019-07-30 23:21:02: INFO] Reboot in preparation for next execution
[2019-07-30 23:25:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 23:25:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 23:25:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 23:25:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 23:25:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 23:30:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.681 s/op
Iteration   2: 6.606 s/op
Iteration   3: 6.396 s/op
Iteration   4: 6.344 s/op
Iteration   5: 6.312 s/op
Iteration   6: 6.357 s/op
Iteration   7: 6.256 s/op
Iteration   8: 6.405 s/op
Iteration   9: 6.266 s/op
Iteration  10: 6.270 s/op
Iteration  11: 6.433 s/op
Iteration  12: 6.318 s/op
Iteration  13: 6.307 s/op
Iteration  14: 6.290 s/op
Iteration  15: 6.339 s/op
Iteration  16: 6.312 s/op
Iteration  17: 6.272 s/op
Iteration  18: 6.271 s/op
Iteration  19: 6.278 s/op
Iteration  20: 6.429 s/op
Iteration  21: 6.283 s/op
Iteration  22: 6.272 s/op
Iteration  23: 6.285 s/op
Iteration  24: 6.284 s/op
Iteration  25: 6.269 s/op
Iteration  26: 6.395 s/op
Iteration  27: 6.272 s/op
Iteration  28: 6.251 s/op
Iteration  29: 6.368 s/op
Iteration  30: 6.277 s/op
Iteration  31: 6.364 s/op
Iteration  32: 6.346 s/op
Iteration  33: 6.212 s/op
Iteration  34: 6.379 s/op
Iteration  35: 6.290 s/op
Iteration  36: 6.289 s/op
Iteration  37: 6.278 s/op
Iteration  38: 6.269 s/op
Iteration  39: 6.447 s/op
Iteration  40: 6.304 s/op
Iteration  41: 6.310 s/op
Iteration  42: 6.313 s/op
Iteration  43: 6.282 s/op
Iteration  44: 6.276 s/op
Iteration  45: 6.293 s/op
Iteration  46: 6.275 s/op
Iteration  47: 6.270 s/op
Iteration  48: 6.271 s/op
Iteration  49: 6.419 s/op
Iteration  50: 6.271 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.325 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [6.200, 6.250) = 1 
    [6.250, 6.300) = 26 
    [6.300, 6.350) = 10 
    [6.350, 6.400) = 6 
    [6.400, 6.450) = 5 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.212 s/op
     p(50.0000) =      6.290 s/op
     p(90.0000) =      6.428 s/op
     p(95.0000) =      6.519 s/op
     p(99.0000) =      6.681 s/op
     p(99.9000) =      6.681 s/op
     p(99.9900) =      6.681 s/op
     p(99.9990) =      6.681 s/op
     p(99.9999) =      6.681 s/op
    p(100.0000) =      6.681 s/op


# Run complete. Total time: 00:05:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.325 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot_11.0.4_1564521920146.json
{"wallclock_times": [317.435373757], "core_cycle_counts": [[313241927625], [236711216085], [316213755127], [248846561609]], "aperf_counts": [[312484497070], [236626674538], [316171405647], [248803095793]], "mperf_counts": [[312983214726], [236764401566], [316460794126], [248865616624]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 23:30:37: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 23:30:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 23:30:38: INFO] 222 executions left in scheduler queue
[2019-07-30 23:30:38: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 23:30:38: INFO] Estimated completion (next execution): 2019-07-30 23:38:26 (0:07:47 from now)
[2019-07-30 23:30:38: INFO] Reboot in preparation for next execution
[2019-07-30 23:34:53: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 23:34:53: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 23:34:53: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 23:34:53: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 23:34:53: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 23:40:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.616 s/op
Iteration   2: 6.571 s/op
Iteration   3: 6.730 s/op
Iteration   4: 6.648 s/op
Iteration   5: 7.075 s/op
Iteration   6: 6.662 s/op
Iteration   7: 6.574 s/op
Iteration   8: 6.657 s/op
Iteration   9: 6.608 s/op
Iteration  10: 6.616 s/op
Iteration  11: 6.553 s/op
Iteration  12: 6.518 s/op
Iteration  13: 6.593 s/op
Iteration  14: 6.413 s/op
Iteration  15: 6.604 s/op
Iteration  16: 6.563 s/op
Iteration  17: 6.597 s/op
Iteration  18: 6.576 s/op
Iteration  19: 6.582 s/op
Iteration  20: 6.575 s/op
Iteration  21: 6.576 s/op
Iteration  22: 6.571 s/op
Iteration  23: 6.597 s/op
Iteration  24: 6.563 s/op
Iteration  25: 6.554 s/op
Iteration  26: 6.582 s/op
Iteration  27: 6.376 s/op
Iteration  28: 6.573 s/op
Iteration  29: 6.560 s/op
Iteration  30: 6.564 s/op
Iteration  31: 6.547 s/op
Iteration  32: 6.571 s/op
Iteration  33: 6.547 s/op
Iteration  34: 6.535 s/op
Iteration  35: 6.432 s/op
Iteration  36: 6.585 s/op
Iteration  37: 6.579 s/op
Iteration  38: 6.588 s/op
Iteration  39: 6.411 s/op
Iteration  40: 6.580 s/op
Iteration  41: 6.568 s/op
Iteration  42: 6.457 s/op
Iteration  43: 6.569 s/op
Iteration  44: 6.580 s/op
Iteration  45: 6.590 s/op
Iteration  46: 6.567 s/op
Iteration  47: 6.569 s/op
Iteration  48: 6.590 s/op
Iteration  49: 6.583 s/op
Iteration  50: 6.561 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.577 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 1 
    [6.400, 6.450) = 3 
    [6.450, 6.500) = 1 
    [6.500, 6.550) = 4 
    [6.550, 6.600) = 32 
    [6.600, 6.650) = 5 
    [6.650, 6.700) = 2 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.376 s/op
     p(50.0000) =      6.574 s/op
     p(90.0000) =      6.645 s/op
     p(95.0000) =      6.693 s/op
     p(99.0000) =      7.075 s/op
     p(99.9000) =      7.075 s/op
     p(99.9900) =      7.075 s/op
     p(99.9990) =      7.075 s/op
     p(99.9999) =      7.075 s/op
    p(100.0000) =      7.075 s/op


# Run complete. Total time: 00:05:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.577 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot_11.0.4_1564522493393.json
{"wallclock_times": [329.979587829], "core_cycle_counts": [[234914421787], [335473654945], [256626656814], [118281717553]], "aperf_counts": [[234087911271], [335398820291], [256591490006], [118216583431]], "mperf_counts": [[263031222286], [382917312316], [292152538962], [134000548226]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-30 23:40:23: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-30 23:40:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 23:40:24: INFO] 221 executions left in scheduler queue
[2019-07-30 23:40:24: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-30 23:40:24: INFO] Estimated completion (next execution): 2019-07-30 23:48:24 (0:08:00 from now)
[2019-07-30 23:40:24: INFO] Reboot in preparation for next execution
[2019-07-30 23:44:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 23:44:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 23:44:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 23:44:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 23:44:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 23:44:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-30 23:50:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.997 s/op
Iteration   2: 7.682 s/op
Iteration   3: 7.329 s/op
Iteration   4: 7.424 s/op
Iteration   5: 7.303 s/op
Iteration   6: 7.259 s/op
Iteration   7: 7.321 s/op
Iteration   8: 7.288 s/op
Iteration   9: 7.292 s/op
Iteration  10: 7.337 s/op
Iteration  11: 7.316 s/op
Iteration  12: 7.320 s/op
Iteration  13: 7.302 s/op
Iteration  14: 7.321 s/op
Iteration  15: 7.357 s/op
Iteration  16: 7.392 s/op
Iteration  17: 7.378 s/op
Iteration  18: 7.363 s/op
Iteration  19: 7.370 s/op
Iteration  20: 7.365 s/op
Iteration  21: 7.356 s/op
Iteration  22: 7.375 s/op
Iteration  23: 7.353 s/op
Iteration  24: 7.379 s/op
Iteration  25: 7.344 s/op
Iteration  26: 7.392 s/op
Iteration  27: 7.403 s/op
Iteration  28: 7.402 s/op
Iteration  29: 7.387 s/op
Iteration  30: 7.354 s/op
Iteration  31: 7.371 s/op
Iteration  32: 7.345 s/op
Iteration  33: 7.382 s/op
Iteration  34: 7.428 s/op
Iteration  35: 7.403 s/op
Iteration  36: 7.374 s/op
Iteration  37: 7.403 s/op
Iteration  38: 7.370 s/op
Iteration  39: 7.381 s/op
Iteration  40: 7.386 s/op
Iteration  41: 7.383 s/op
Iteration  42: 7.371 s/op
Iteration  43: 7.369 s/op
Iteration  44: 7.394 s/op
Iteration  45: 7.360 s/op
Iteration  46: 7.386 s/op
Iteration  47: 7.380 s/op
Iteration  48: 7.399 s/op
Iteration  49: 7.365 s/op
Iteration  50: 7.354 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.401 ?(99.9%) 0.117 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 29 
    [7.375, 7.500) = 19 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 1 
    [7.750, 7.875) = 0 
    [7.875, 8.000) = 0 
    [8.000, 8.125) = 0 
    [8.125, 8.250) = 0 
    [8.250, 8.375) = 0 
    [8.375, 8.500) = 0 
    [8.500, 8.625) = 0 
    [8.625, 8.750) = 0 
    [8.750, 8.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.259 s/op
     p(50.0000) =      7.371 s/op
     p(90.0000) =      7.403 s/op
     p(95.0000) =      7.542 s/op
     p(99.0000) =      8.997 s/op
     p(99.9000) =      8.997 s/op
     p(99.9900) =      8.997 s/op
     p(99.9990) =      8.997 s/op
     p(99.9999) =      8.997 s/op
    p(100.0000) =      8.997 s/op


# Run complete. Total time: 00:06:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.401 ? 0.117   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_12.0.1_1564523082494.json
{"wallclock_times": [372.003350942], "core_cycle_counts": [[403064025982], [320331490071], [281291236323], [308142461165]], "aperf_counts": [[402097138057], [320204832664], [281175406583], [307965637867]], "mperf_counts": [[402102391750], [320204813986], [281175394484], [307965617286]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-30 23:50:54: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-30 23:50:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-30 23:50:55: INFO] 220 executions left in scheduler queue
[2019-07-30 23:50:55: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-30 23:50:55: INFO] Estimated completion (next execution): 2019-07-30 23:59:37 (0:08:42 from now)
[2019-07-30 23:50:55: INFO] Reboot in preparation for next execution
[2019-07-30 23:55:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-30 23:55:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-30 23:55:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-30 23:55:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-30 23:55:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-30 23:55:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 00:05:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.389 s/op
Iteration   2: 12.254 s/op
Iteration   3: 12.077 s/op
Iteration   4: 12.072 s/op
Iteration   5: 12.073 s/op
Iteration   6: 12.054 s/op
Iteration   7: 12.059 s/op
Iteration   8: 12.039 s/op
Iteration   9: 12.036 s/op
Iteration  10: 12.084 s/op
Iteration  11: 12.027 s/op
Iteration  12: 12.128 s/op
Iteration  13: 12.047 s/op
Iteration  14: 12.060 s/op
Iteration  15: 12.062 s/op
Iteration  16: 12.054 s/op
Iteration  17: 12.022 s/op
Iteration  18: 12.068 s/op
Iteration  19: 12.037 s/op
Iteration  20: 12.078 s/op
Iteration  21: 12.108 s/op
Iteration  22: 12.075 s/op
Iteration  23: 12.071 s/op
Iteration  24: 12.009 s/op
Iteration  25: 12.038 s/op
Iteration  26: 12.043 s/op
Iteration  27: 12.077 s/op
Iteration  28: 12.079 s/op
Iteration  29: 12.077 s/op
Iteration  30: 12.103 s/op
Iteration  31: 12.062 s/op
Iteration  32: 12.049 s/op
Iteration  33: 12.034 s/op
Iteration  34: 12.054 s/op
Iteration  35: 12.077 s/op
Iteration  36: 12.117 s/op
Iteration  37: 12.067 s/op
Iteration  38: 12.086 s/op
Iteration  39: 12.022 s/op
Iteration  40: 12.039 s/op
Iteration  41: 12.056 s/op
Iteration  42: 12.070 s/op
Iteration  43: 12.145 s/op
Iteration  44: 12.026 s/op
Iteration  45: 12.038 s/op
Iteration  46: 12.028 s/op
Iteration  47: 12.062 s/op
Iteration  48: 12.100 s/op
Iteration  49: 12.059 s/op
Iteration  50: 12.069 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.093 ?(99.9%) 0.095 s/op

  Histogram, s/op:
    [12.000, 12.125) = 46 
    [12.125, 12.250) = 2 
    [12.250, 12.375) = 1 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 
    [12.875, 13.000) = 0 
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 0 
    [13.375, 13.500) = 1 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.009 s/op
     p(50.0000) =     12.062 s/op
     p(90.0000) =     12.116 s/op
     p(95.0000) =     12.194 s/op
     p(99.0000) =     13.389 s/op
     p(99.9000) =     13.389 s/op
     p(99.9900) =     13.389 s/op
     p(99.9990) =     13.389 s/op
     p(99.9999) =     13.389 s/op
    p(100.0000) =     13.389 s/op


# Run complete. Total time: 00:10:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.093 ? 0.095   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_12.0.1_1564523711631.json
{"wallclock_times": [606.243753386], "core_cycle_counts": [[590349147177], [629887320974], [326535387878], [423181125955]], "aperf_counts": [[588847377373], [629740935622], [326386150946], [423065109775]], "mperf_counts": [[588852996452], [629740956962], [326391053926], [423065192708]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 00:05:17: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-31 00:05:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 00:05:18: INFO] 219 executions left in scheduler queue
[2019-07-31 00:05:18: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-31 00:05:18: INFO] Estimated completion (next execution): 2019-07-31 00:17:55 (0:12:36 from now)
[2019-07-31 00:05:18: INFO] Reboot in preparation for next execution
[2019-07-31 00:09:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 00:09:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 00:09:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 00:09:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 00:09:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 00:09:34: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 00:16:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.518 s/op
Iteration   2: 8.573 s/op
Iteration   3: 7.793 s/op
Iteration   4: 7.786 s/op
Iteration   5: 7.748 s/op
Iteration   6: 7.798 s/op
Iteration   7: 7.847 s/op
Iteration   8: 7.955 s/op
Iteration   9: 7.805 s/op
Iteration  10: 7.844 s/op
Iteration  11: 7.795 s/op
Iteration  12: 7.756 s/op
Iteration  13: 7.747 s/op
Iteration  14: 7.795 s/op
Iteration  15: 7.732 s/op
Iteration  16: 7.828 s/op
Iteration  17: 7.721 s/op
Iteration  18: 7.750 s/op
Iteration  19: 7.764 s/op
Iteration  20: 7.782 s/op
Iteration  21: 7.742 s/op
Iteration  22: 7.737 s/op
Iteration  23: 7.785 s/op
Iteration  24: 7.749 s/op
Iteration  25: 7.779 s/op
Iteration  26: 7.803 s/op
Iteration  27: 7.708 s/op
Iteration  28: 7.758 s/op
Iteration  29: 7.739 s/op
Iteration  30: 7.762 s/op
Iteration  31: 7.808 s/op
Iteration  32: 7.808 s/op
Iteration  33: 7.776 s/op
Iteration  34: 7.739 s/op
Iteration  35: 7.771 s/op
Iteration  36: 7.750 s/op
Iteration  37: 7.811 s/op
Iteration  38: 7.800 s/op
Iteration  39: 7.776 s/op
Iteration  40: 7.817 s/op
Iteration  41: 7.771 s/op
Iteration  42: 7.778 s/op
Iteration  43: 7.720 s/op
Iteration  44: 7.744 s/op
Iteration  45: 7.789 s/op
Iteration  46: 7.706 s/op
Iteration  47: 7.818 s/op
Iteration  48: 7.729 s/op
Iteration  49: 7.815 s/op
Iteration  50: 7.771 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.828 ?(99.9%) 0.135 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 16 
    [ 7.750,  8.000) = 32 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.706 s/op
     p(50.0000) =      7.777 s/op
     p(90.0000) =      7.843 s/op
     p(95.0000) =      8.233 s/op
     p(99.0000) =      9.518 s/op
     p(99.9000) =      9.518 s/op
     p(99.9900) =      9.518 s/op
     p(99.9990) =      9.518 s/op
     p(99.9999) =      9.518 s/op
    p(100.0000) =      9.518 s/op


# Run complete. Total time: 00:06:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.828 ? 0.135   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_12.0.1_1564524573823.json
{"wallclock_times": [393.23211571999997], "core_cycle_counts": [[501736229746], [223361630468], [324237638491], [253166557773]], "aperf_counts": [[500880879875], [223202060249], [324082550465], [253061957460]], "mperf_counts": [[500884693654], [223205852770], [324082528126], [253061945236]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 00:16:07: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-31 00:16:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 00:16:08: INFO] 218 executions left in scheduler queue
[2019-07-31 00:16:08: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-31 00:16:08: INFO] Estimated completion (next execution): 2019-07-31 00:25:11 (0:09:03 from now)
[2019-07-31 00:16:08: INFO] Reboot in preparation for next execution
[2019-07-31 00:20:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 00:20:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 00:20:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 00:20:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 00:20:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 00:20:37: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 00:33:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.100 s/op
Iteration   2: 14.905 s/op
Iteration   3: 14.822 s/op
Iteration   4: 14.890 s/op
Iteration   5: 14.850 s/op
Iteration   6: 14.914 s/op
Iteration   7: 14.851 s/op
Iteration   8: 14.855 s/op
Iteration   9: 14.849 s/op
Iteration  10: 14.909 s/op
Iteration  11: 14.833 s/op
Iteration  12: 14.873 s/op
Iteration  13: 14.877 s/op
Iteration  14: 14.807 s/op
Iteration  15: 14.870 s/op
Iteration  16: 14.847 s/op
Iteration  17: 14.993 s/op
Iteration  18: 14.858 s/op
Iteration  19: 14.876 s/op
Iteration  20: 14.840 s/op
Iteration  21: 14.871 s/op
Iteration  22: 14.832 s/op
Iteration  23: 14.907 s/op
Iteration  24: 14.920 s/op
Iteration  25: 14.913 s/op
Iteration  26: 14.810 s/op
Iteration  27: 14.880 s/op
Iteration  28: 14.920 s/op
Iteration  29: 14.893 s/op
Iteration  30: 14.892 s/op
Iteration  31: 14.873 s/op
Iteration  32: 14.893 s/op
Iteration  33: 14.920 s/op
Iteration  34: 14.904 s/op
Iteration  35: 14.822 s/op
Iteration  36: 14.917 s/op
Iteration  37: 14.857 s/op
Iteration  38: 14.920 s/op
Iteration  39: 14.798 s/op
Iteration  40: 15.247 s/op
Iteration  41: 14.820 s/op
Iteration  42: 14.876 s/op
Iteration  43: 14.916 s/op
Iteration  44: 14.846 s/op
Iteration  45: 14.883 s/op
Iteration  46: 14.850 s/op
Iteration  47: 14.874 s/op
Iteration  48: 14.924 s/op
Iteration  49: 14.811 s/op
Iteration  50: 14.892 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.906 ?(99.9%) 0.091 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 48 
    [15.000, 15.250) = 1 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.798 s/op
     p(50.0000) =     14.876 s/op
     p(90.0000) =     14.920 s/op
     p(95.0000) =     15.107 s/op
     p(99.0000) =     16.100 s/op
     p(99.9000) =     16.100 s/op
     p(99.9900) =     16.100 s/op
     p(99.9990) =     16.100 s/op
     p(99.9999) =     16.100 s/op
    p(100.0000) =     16.100 s/op


# Run complete. Total time: 00:12:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.906 ? 0.091   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_12.0.1_1564525237770.json
{"wallclock_times": [746.975365447], "core_cycle_counts": [[755943442321], [497815661453], [567312692237], [615616700924]], "aperf_counts": [[754167796885], [497613052942], [567123524954], [615462268302]], "mperf_counts": [[754173271652], [497612987176], [567129619440], [615462266340]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 00:33:04: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-31 00:33:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 00:33:05: INFO] 217 executions left in scheduler queue
[2019-07-31 00:33:05: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-07-31 00:33:05: INFO] Estimated completion (next execution): 2019-07-31 00:48:03 (0:14:57 from now)
[2019-07-31 00:33:05: INFO] Reboot in preparation for next execution
[2019-07-31 00:41:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.487 s/op
Iteration   2: 5.368 s/op
Iteration   3: 5.342 s/op
Iteration   4: 5.331 s/op
Iteration   5: 5.330 s/op
Iteration   6: 5.352 s/op
Iteration   7: 5.338 s/op
Iteration   8: 5.334 s/op
Iteration   9: 5.337 s/op
Iteration  10: 5.341 s/op
Iteration  11: 5.333 s/op
Iteration  12: 5.336 s/op
Iteration  13: 5.331 s/op
Iteration  14: 5.329 s/op
Iteration  15: 5.334 s/op
Iteration  16: 5.333 s/op
Iteration  17: 5.337 s/op
Iteration  18: 5.333 s/op
Iteration  19: 5.343 s/op
Iteration  20: 5.335 s/op
Iteration  21: 5.343 s/op
Iteration  22: 5.335 s/op
Iteration  23: 5.329 s/op
Iteration  24: 5.337 s/op
Iteration  25: 5.340 s/op
Iteration  26: 5.336 s/op
Iteration  27: 5.335 s/op
Iteration  28: 5.339 s/op
Iteration  29: 5.330 s/op
Iteration  30: 5.331 s/op
Iteration  31: 5.333 s/op
Iteration  32: 5.329 s/op
Iteration  33: 5.334 s/op
Iteration  34: 5.339 s/op
Iteration  35: 5.334 s/op
Iteration  36: 5.367 s/op
Iteration  37: 5.334 s/op
Iteration  38: 5.358 s/op
Iteration  39: 5.330 s/op
Iteration  40: 5.332 s/op
Iteration  41: 5.350 s/op
Iteration  42: 5.330 s/op
Iteration  43: 5.338 s/op
Iteration  44: 5.335 s/op
Iteration  45: 5.347 s/op
Iteration  46: 5.335 s/op
Iteration  47: 5.339 s/op
Iteration  48: 5.348 s/op
Iteration  49: 5.344 s/op
Iteration  50: 5.335 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.341 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [5.300, 5.313) = 0 
    [5.313, 5.325) = 0 
    [5.325, 5.338) = 31 
    [5.338, 5.350) = 13 
    [5.350, 5.363) = 3 
    [5.363, 5.375) = 2 
    [5.375, 5.388) = 0 
    [5.388, 5.400) = 0 
    [5.400, 5.413) = 0 
    [5.413, 5.425) = 0 
    [5.425, 5.438) = 0 
    [5.438, 5.450) = 0 
    [5.450, 5.463) = 0 
    [5.463, 5.475) = 0 
    [5.475, 5.488) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.329 s/op
     p(50.0000) =      5.335 s/op
     p(90.0000) =      5.351 s/op
     p(95.0000) =      5.367 s/op
     p(99.0000) =      5.487 s/op
     p(99.9000) =      5.487 s/op
     p(99.9900) =      5.487 s/op
     p(99.9990) =      5.487 s/op
     p(99.9999) =      5.487 s/op
    p(100.0000) =      5.487 s/op


# Run complete. Total time: 00:04:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.341 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot-8u222-b10_1564526234418.json
{"wallclock_times": [267.855383223], "core_cycle_counts": [[289156812261], [257501731500], [146134865339], [180186042658]], "aperf_counts": [[288586490615], [257434047979], [146096768491], [180150547821]], "mperf_counts": [[288593296650], [257435499126], [146097663618], [180162966922]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 00:41:42: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-07-31 00:41:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 00:41:43: INFO] 216 executions left in scheduler queue
[2019-07-31 00:41:43: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-07-31 00:41:43: INFO] Estimated completion (next execution): 2019-07-31 00:48:41 (0:06:58 from now)
[2019-07-31 00:41:43: INFO] Reboot in preparation for next execution
[2019-07-31 00:45:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 00:45:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 00:45:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 00:45:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 00:45:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 00:45:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 01:00:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.210 s/op
Iteration   2: 16.696 s/op
Iteration   3: 17.863 s/op
Iteration   4: 17.795 s/op
Iteration   5: 17.758 s/op
Iteration   6: 17.757 s/op
Iteration   7: 17.776 s/op
Iteration   8: 17.823 s/op
Iteration   9: 17.814 s/op
Iteration  10: 17.814 s/op
Iteration  11: 17.774 s/op
Iteration  12: 17.747 s/op
Iteration  13: 17.834 s/op
Iteration  14: 17.779 s/op
Iteration  15: 17.791 s/op
Iteration  16: 17.798 s/op
Iteration  17: 17.737 s/op
Iteration  18: 17.745 s/op
Iteration  19: 17.766 s/op
Iteration  20: 17.778 s/op
Iteration  21: 17.773 s/op
Iteration  22: 17.733 s/op
Iteration  23: 17.796 s/op
Iteration  24: 17.747 s/op
Iteration  25: 17.737 s/op
Iteration  26: 17.802 s/op
Iteration  27: 17.797 s/op
Iteration  28: 17.751 s/op
Iteration  29: 17.797 s/op
Iteration  30: 17.880 s/op
Iteration  31: 17.673 s/op
Iteration  32: 17.737 s/op
Iteration  33: 17.749 s/op
Iteration  34: 17.812 s/op
Iteration  35: 17.745 s/op
Iteration  36: 17.777 s/op
Iteration  37: 17.858 s/op
Iteration  38: 17.782 s/op
Iteration  39: 17.778 s/op
Iteration  40: 17.738 s/op
Iteration  41: 17.767 s/op
Iteration  42: 17.825 s/op
Iteration  43: 17.787 s/op
Iteration  44: 17.759 s/op
Iteration  45: 17.793 s/op
Iteration  46: 17.745 s/op
Iteration  47: 17.748 s/op
Iteration  48: 17.710 s/op
Iteration  49: 17.727 s/op
Iteration  50: 17.790 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     17.763 ?(99.9%) 0.084 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 15 
    [17.750, 18.000) = 33 
    [18.000, 18.250) = 1 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.696 s/op
     p(50.0000) =     17.777 s/op
     p(90.0000) =     17.833 s/op
     p(95.0000) =     17.871 s/op
     p(99.0000) =     18.210 s/op
     p(99.9000) =     18.210 s/op
     p(99.9900) =     18.210 s/op
     p(99.9990) =     18.210 s/op
     p(99.9999) =     18.210 s/op
    p(100.0000) =     18.210 s/op


# Run complete. Total time: 00:14:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  17.763 ? 0.084   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_11.0.4_1564526749872.json
{"wallclock_times": [889.6656733530001], "core_cycle_counts": [[928597668831], [460247056584], [844461634261], [648038425221]], "aperf_counts": [[926467395236], [460027749299], [844218017656], [647841396507]], "mperf_counts": [[926467571090], [460031924112], [844217935984], [647841336948]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 01:00:39: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-07-31 01:00:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 01:00:40: INFO] 215 executions left in scheduler queue
[2019-07-31 01:00:40: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-31 01:00:40: INFO] Estimated completion (next execution): 2019-07-31 01:18:00 (0:17:20 from now)
[2019-07-31 01:00:40: INFO] Reboot in preparation for next execution
[2019-07-31 01:04:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 01:04:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 01:04:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 01:04:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 01:04:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 01:04:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 01:06:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.854 s/op
Iteration   2: 2.487 s/op
Iteration   3: 2.312 s/op
Iteration   4: 2.406 s/op
Iteration   5: 2.014 s/op
Iteration   6: 2.004 s/op
Iteration   7: 1.936 s/op
Iteration   8: 1.972 s/op
Iteration   9: 1.979 s/op
Iteration  10: 1.932 s/op
Iteration  11: 1.972 s/op
Iteration  12: 1.929 s/op
Iteration  13: 1.905 s/op
Iteration  14: 1.953 s/op
Iteration  15: 1.910 s/op
Iteration  16: 1.885 s/op
Iteration  17: 1.915 s/op
Iteration  18: 1.930 s/op
Iteration  19: 1.896 s/op
Iteration  20: 1.882 s/op
Iteration  21: 1.889 s/op
Iteration  22: 1.922 s/op
Iteration  23: 1.904 s/op
Iteration  24: 1.915 s/op
Iteration  25: 1.912 s/op
Iteration  26: 1.925 s/op
Iteration  27: 1.924 s/op
Iteration  28: 1.909 s/op
Iteration  29: 1.901 s/op
Iteration  30: 1.880 s/op
Iteration  31: 1.910 s/op
Iteration  32: 1.882 s/op
Iteration  33: 1.930 s/op
Iteration  34: 1.927 s/op
Iteration  35: 1.890 s/op
Iteration  36: 1.898 s/op
Iteration  37: 1.898 s/op
Iteration  38: 1.929 s/op
Iteration  39: 1.950 s/op
Iteration  40: 1.914 s/op
Iteration  41: 1.953 s/op
Iteration  42: 1.954 s/op
Iteration  43: 1.948 s/op
Iteration  44: 1.953 s/op
Iteration  45: 1.951 s/op
Iteration  46: 1.943 s/op
Iteration  47: 1.947 s/op
Iteration  48: 1.939 s/op
Iteration  49: 1.970 s/op
Iteration  50: 1.933 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.975 ?(99.9%) 0.086 s/op

  Histogram, s/op:
    [1.800, 1.900) = 9 
    [1.900, 2.000) = 35 
    [2.000, 2.100) = 2 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 2 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.880 s/op
     p(50.0000) =      1.930 s/op
     p(90.0000) =      2.013 s/op
     p(95.0000) =      2.442 s/op
     p(99.0000) =      2.854 s/op
     p(99.9000) =      2.854 s/op
     p(99.9900) =      2.854 s/op
     p(99.9990) =      2.854 s/op
     p(99.9999) =      2.854 s/op
    p(100.0000) =      2.854 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.975 ? 0.086   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9_12.0.1_1564527891139.json
{"wallclock_times": [100.397658412], "core_cycle_counts": [[82455609540], [76916575622], [111142362858], [83356207938]], "aperf_counts": [[82083821863], [76864924373], [111066917616], [83308024755]], "mperf_counts": [[82084384844], [76871486976], [111067070684], [83308023320]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 01:06:31: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-31 01:06:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 01:06:32: INFO] 214 executions left in scheduler queue
[2019-07-31 01:06:32: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-31 01:06:32: INFO] Estimated completion (next execution): 2019-07-31 01:10:43 (0:04:10 from now)
[2019-07-31 01:06:32: INFO] Reboot in preparation for next execution
[2019-07-31 01:10:40: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 01:10:40: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 01:10:40: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 01:10:40: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 01:10:40: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 01:10:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 01:13:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.703 s/op
Iteration   2: 3.388 s/op
Iteration   3: 3.536 s/op
Iteration   4: 3.985 s/op
Iteration   5: 3.375 s/op
Iteration   6: 3.507 s/op
Iteration   7: 3.441 s/op
Iteration   8: 3.401 s/op
Iteration   9: 3.394 s/op
Iteration  10: 3.374 s/op
Iteration  11: 3.369 s/op
Iteration  12: 3.368 s/op
Iteration  13: 3.389 s/op
Iteration  14: 3.342 s/op
Iteration  15: 3.365 s/op
Iteration  16: 3.340 s/op
Iteration  17: 3.326 s/op
Iteration  18: 3.351 s/op
Iteration  19: 3.338 s/op
Iteration  20: 3.348 s/op
Iteration  21: 3.343 s/op
Iteration  22: 3.351 s/op
Iteration  23: 3.339 s/op
Iteration  24: 3.377 s/op
Iteration  25: 3.345 s/op
Iteration  26: 3.335 s/op
Iteration  27: 3.334 s/op
Iteration  28: 3.327 s/op
Iteration  29: 3.382 s/op
Iteration  30: 3.322 s/op
Iteration  31: 3.364 s/op
Iteration  32: 3.382 s/op
Iteration  33: 3.364 s/op
Iteration  34: 3.357 s/op
Iteration  35: 3.381 s/op
Iteration  36: 3.358 s/op
Iteration  37: 3.339 s/op
Iteration  38: 3.334 s/op
Iteration  39: 3.365 s/op
Iteration  40: 3.326 s/op
Iteration  41: 3.366 s/op
Iteration  42: 3.382 s/op
Iteration  43: 3.350 s/op
Iteration  44: 3.354 s/op
Iteration  45: 3.372 s/op
Iteration  46: 3.288 s/op
Iteration  47: 3.368 s/op
Iteration  48: 3.361 s/op
Iteration  49: 3.343 s/op
Iteration  50: 3.315 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.383 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 
    [3.300, 3.350) = 18 
    [3.350, 3.400) = 25 
    [3.400, 3.450) = 2 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 2 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 1 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.288 s/op
     p(50.0000) =      3.363 s/op
     p(90.0000) =      3.437 s/op
     p(95.0000) =      3.611 s/op
     p(99.0000) =      3.985 s/op
     p(99.9000) =      3.985 s/op
     p(99.9900) =      3.985 s/op
     p(99.9990) =      3.985 s/op
     p(99.9999) =      3.985 s/op
    p(100.0000) =      3.985 s/op


# Run complete. Total time: 00:02:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.383 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9_12.0.1_1564528240598.json
{"wallclock_times": [170.67267178299997], "core_cycle_counts": [[217549003930], [133472798309], [170121540940], [57483790948]], "aperf_counts": [[217154297085], [133384857955], [170061304819], [57407533229]], "mperf_counts": [[217156364514], [133385371552], [170061290544], [57407528240]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 01:13:31: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-31 01:13:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 01:13:32: INFO] 213 executions left in scheduler queue
[2019-07-31 01:13:32: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-07-31 01:13:32: INFO] Estimated completion (next execution): 2019-07-31 01:18:53 (0:05:21 from now)
[2019-07-31 01:13:32: INFO] Reboot in preparation for next execution
[2019-07-31 01:20:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.951 s/op
Iteration   2: 4.626 s/op
Iteration   3: 4.255 s/op
Iteration   4: 4.300 s/op
Iteration   5: 4.328 s/op
Iteration   6: 4.353 s/op
Iteration   7: 4.511 s/op
Iteration   8: 4.608 s/op
Iteration   9: 4.622 s/op
Iteration  10: 4.523 s/op
Iteration  11: 4.554 s/op
Iteration  12: 4.537 s/op
Iteration  13: 4.394 s/op
Iteration  14: 4.312 s/op
Iteration  15: 4.641 s/op
Iteration  16: 4.410 s/op
Iteration  17: 4.271 s/op
Iteration  18: 4.338 s/op
Iteration  19: 4.451 s/op
Iteration  20: 4.276 s/op
Iteration  21: 4.334 s/op
Iteration  22: 5.267 s/op
Iteration  23: 4.301 s/op
Iteration  24: 4.461 s/op
Iteration  25: 4.419 s/op
Iteration  26: 4.274 s/op
Iteration  27: 4.268 s/op
Iteration  28: 4.364 s/op
Iteration  29: 4.453 s/op
Iteration  30: 4.274 s/op
Iteration  31: 4.247 s/op
Iteration  32: 4.344 s/op
Iteration  33: 4.429 s/op
Iteration  34: 4.286 s/op
Iteration  35: 4.262 s/op
Iteration  36: 4.227 s/op
Iteration  37: 4.314 s/op
Iteration  38: 4.461 s/op
Iteration  39: 4.272 s/op
Iteration  40: 4.260 s/op
Iteration  41: 4.383 s/op
Iteration  42: 4.435 s/op
Iteration  43: 4.291 s/op
Iteration  44: 4.269 s/op
Iteration  45: 4.262 s/op
Iteration  46: 4.323 s/op
Iteration  47: 4.464 s/op
Iteration  48: 4.277 s/op
Iteration  49: 4.250 s/op
Iteration  50: 4.358 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.402 ?(99.9%) 0.093 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 3 
    [4.250, 4.375) = 26 
    [4.375, 4.500) = 11 
    [4.500, 4.625) = 6 
    [4.625, 4.750) = 2 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 1 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 1 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.227 s/op
     p(50.0000) =      4.341 s/op
     p(90.0000) =      4.620 s/op
     p(95.0000) =      4.780 s/op
     p(99.0000) =      5.267 s/op
     p(99.9000) =      5.267 s/op
     p(99.9900) =      5.267 s/op
     p(99.9990) =      5.267 s/op
     p(99.9999) =      5.267 s/op
    p(100.0000) =      5.267 s/op


# Run complete. Total time: 00:03:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  4.402 ? 0.093   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ee-19.1.1_1564528619019.json
{"wallclock_times": [221.071008453], "core_cycle_counts": [[167511248505], [113931718362], [274058763585], [248365915970]], "aperf_counts": [[166921832224], [113885659250], [274037484784], [248341552071]], "mperf_counts": [[166936367814], [113885914008], [274037555344], [248345688894]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 01:20:40: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-07-31 01:20:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 01:20:41: INFO] 212 executions left in scheduler queue
[2019-07-31 01:20:41: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-07-31 01:20:41: INFO] Estimated completion (next execution): 2019-07-31 01:26:52 (0:06:11 from now)
[2019-07-31 01:20:41: INFO] Reboot in preparation for next execution
[2019-07-31 01:32:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.731 s/op
Iteration   2: 9.260 s/op
Iteration   3: 9.612 s/op
Iteration   4: 9.329 s/op
Iteration   5: 9.235 s/op
Iteration   6: 9.278 s/op
Iteration   7: 9.196 s/op
Iteration   8: 9.381 s/op
Iteration   9: 9.270 s/op
Iteration  10: 9.163 s/op
Iteration  11: 9.260 s/op
Iteration  12: 10.326 s/op
Iteration  13: 9.067 s/op
Iteration  14: 9.287 s/op
Iteration  15: 9.283 s/op
Iteration  16: 9.158 s/op
Iteration  17: 9.306 s/op
Iteration  18: 9.188 s/op
Iteration  19: 9.275 s/op
Iteration  20: 9.334 s/op
Iteration  21: 9.172 s/op
Iteration  22: 9.336 s/op
Iteration  23: 9.931 s/op
Iteration  24: 9.220 s/op
Iteration  25: 9.166 s/op
Iteration  26: 9.287 s/op
Iteration  27: 9.363 s/op
Iteration  28: 9.174 s/op
Iteration  29: 9.337 s/op
Iteration  30: 9.166 s/op
Iteration  31: 9.331 s/op
Iteration  32: 9.156 s/op
Iteration  33: 9.336 s/op
Iteration  34: 9.909 s/op
Iteration  35: 9.219 s/op
Iteration  36: 9.179 s/op
Iteration  37: 9.301 s/op
Iteration  38: 9.343 s/op
Iteration  39: 9.156 s/op
Iteration  40: 9.341 s/op
Iteration  41: 9.148 s/op
Iteration  42: 9.309 s/op
Iteration  43: 9.171 s/op
Iteration  44: 9.338 s/op
Iteration  45: 9.945 s/op
Iteration  46: 9.223 s/op
Iteration  47: 9.206 s/op
Iteration  48: 9.293 s/op
Iteration  49: 9.328 s/op
Iteration  50: 9.166 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      9.330 ?(99.9%) 0.119 s/op

  Histogram, s/op:
    [ 9.000,  9.125) = 1 
    [ 9.125,  9.250) = 19 
    [ 9.250,  9.375) = 23 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 1 
    [ 9.625,  9.750) = 1 
    [ 9.750,  9.875) = 0 
    [ 9.875, 10.000) = 3 
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 1 
    [10.375, 10.500) = 0 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.067 s/op
     p(50.0000) =      9.281 s/op
     p(90.0000) =      9.719 s/op
     p(95.0000) =      9.938 s/op
     p(99.0000) =     10.326 s/op
     p(99.9000) =     10.326 s/op
     p(99.9900) =     10.326 s/op
     p(99.9990) =     10.326 s/op
     p(99.9999) =     10.326 s/op
    p(100.0000) =     10.326 s/op


# Run complete. Total time: 00:07:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  9.330 ? 0.119   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_graalvm-ce-19.1.1_1564529092387.json
{"wallclock_times": [467.467504125], "core_cycle_counts": [[306857865454], [435987769415], [534755756800], [455616567542]], "aperf_counts": [[305557696410], [435892776730], [534715356876], [455576998804]], "mperf_counts": [[305567355100], [435897403638], [534715848382], [455580016346]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 01:32:39: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-07-31 01:32:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 01:32:40: INFO] 211 executions left in scheduler queue
[2019-07-31 01:32:40: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 01:32:40: INFO] Estimated completion (next execution): 2019-07-31 01:42:58 (0:10:17 from now)
[2019-07-31 01:32:40: INFO] Reboot in preparation for next execution
[2019-07-31 01:41:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.012 s/op
Iteration   2: 4.882 s/op
Iteration   3: 5.369 s/op
Iteration   4: 5.370 s/op
Iteration   5: 5.356 s/op
Iteration   6: 5.379 s/op
Iteration   7: 5.376 s/op
Iteration   8: 5.353 s/op
Iteration   9: 5.377 s/op
Iteration  10: 5.378 s/op
Iteration  11: 5.354 s/op
Iteration  12: 5.365 s/op
Iteration  13: 5.354 s/op
Iteration  14: 5.362 s/op
Iteration  15: 5.396 s/op
Iteration  16: 5.361 s/op
Iteration  17: 5.378 s/op
Iteration  18: 5.353 s/op
Iteration  19: 5.355 s/op
Iteration  20: 5.373 s/op
Iteration  21: 5.347 s/op
Iteration  22: 5.357 s/op
Iteration  23: 5.361 s/op
Iteration  24: 5.362 s/op
Iteration  25: 5.371 s/op
Iteration  26: 5.377 s/op
Iteration  27: 5.372 s/op
Iteration  28: 5.362 s/op
Iteration  29: 5.348 s/op
Iteration  30: 5.359 s/op
Iteration  31: 5.358 s/op
Iteration  32: 5.367 s/op
Iteration  33: 5.358 s/op
Iteration  34: 5.367 s/op
Iteration  35: 5.371 s/op
Iteration  36: 5.341 s/op
Iteration  37: 5.391 s/op
Iteration  38: 5.364 s/op
Iteration  39: 5.360 s/op
Iteration  40: 5.377 s/op
Iteration  41: 5.358 s/op
Iteration  42: 5.371 s/op
Iteration  43: 5.357 s/op
Iteration  44: 5.359 s/op
Iteration  45: 5.356 s/op
Iteration  46: 5.349 s/op
Iteration  47: 5.368 s/op
Iteration  48: 5.355 s/op
Iteration  49: 5.359 s/op
Iteration  50: 5.344 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.367 ?(99.9%) 0.057 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 
    [4.750, 5.000) = 1 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 48 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.882 s/op
     p(50.0000) =      5.362 s/op
     p(90.0000) =      5.378 s/op
     p(95.0000) =      5.393 s/op
     p(99.0000) =      6.012 s/op
     p(99.9000) =      6.012 s/op
     p(99.9900) =      6.012 s/op
     p(99.9990) =      6.012 s/op
     p(99.9999) =      6.012 s/op
    p(100.0000) =      6.012 s/op


# Run complete. Total time: 00:04:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.367 ? 0.057   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot-8u222-b10_1564529811937.json
{"wallclock_times": [269.27758294299997], "core_cycle_counts": [[269884766600], [153299038122], [219525582588], [234482247317]], "aperf_counts": [[269308548116], [153235926128], [219506385076], [234460869759]], "mperf_counts": [[269317656360], [153239023188], [219516082420], [234460977122]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 01:41:21: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 01:41:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 01:41:22: INFO] 210 executions left in scheduler queue
[2019-07-31 01:41:22: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 01:41:22: INFO] Estimated completion (next execution): 2019-07-31 01:48:21 (0:06:59 from now)
[2019-07-31 01:41:22: INFO] Reboot in preparation for next execution
[2019-07-31 01:53:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.043 s/op
Iteration   2: 10.324 s/op
Iteration   3: 9.892 s/op
Iteration   4: 9.908 s/op
Iteration   5: 9.876 s/op
Iteration   6: 9.898 s/op
Iteration   7: 9.917 s/op
Iteration   8: 9.917 s/op
Iteration   9: 9.867 s/op
Iteration  10: 9.894 s/op
Iteration  11: 9.885 s/op
Iteration  12: 9.903 s/op
Iteration  13: 9.857 s/op
Iteration  14: 9.897 s/op
Iteration  15: 9.893 s/op
Iteration  16: 9.896 s/op
Iteration  17: 9.872 s/op
Iteration  18: 9.875 s/op
Iteration  19: 9.894 s/op
Iteration  20: 9.906 s/op
Iteration  21: 9.899 s/op
Iteration  22: 9.886 s/op
Iteration  23: 9.888 s/op
Iteration  24: 9.870 s/op
Iteration  25: 9.965 s/op
Iteration  26: 9.883 s/op
Iteration  27: 9.954 s/op
Iteration  28: 9.923 s/op
Iteration  29: 9.883 s/op
Iteration  30: 9.908 s/op
Iteration  31: 9.906 s/op
Iteration  32: 9.900 s/op
Iteration  33: 9.903 s/op
Iteration  34: 9.889 s/op
Iteration  35: 9.893 s/op
Iteration  36: 9.915 s/op
Iteration  37: 9.881 s/op
Iteration  38: 9.912 s/op
Iteration  39: 9.909 s/op
Iteration  40: 9.910 s/op
Iteration  41: 9.944 s/op
Iteration  42: 9.911 s/op
Iteration  43: 9.934 s/op
Iteration  44: 9.924 s/op
Iteration  45: 9.915 s/op
Iteration  46: 9.907 s/op
Iteration  47: 9.910 s/op
Iteration  48: 9.918 s/op
Iteration  49: 9.928 s/op
Iteration  50: 9.941 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.914 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [ 9.800,  9.850) = 0 
    [ 9.850,  9.900) = 23 
    [ 9.900,  9.950) = 23 
    [ 9.950, 10.000) = 2 
    [10.000, 10.050) = 1 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 0 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 0 
    [10.250, 10.300) = 0 
    [10.300, 10.350) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.857 s/op
     p(50.0000) =      9.905 s/op
     p(90.0000) =      9.944 s/op
     p(95.0000) =     10.000 s/op
     p(99.0000) =     10.324 s/op
     p(99.9000) =     10.324 s/op
     p(99.9900) =     10.324 s/op
     p(99.9990) =     10.324 s/op
     p(99.9999) =     10.324 s/op
    p(100.0000) =     10.324 s/op


# Run complete. Total time: 00:08:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.914 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot-8u222-b10_1564530332537.json
{"wallclock_times": [496.55510920899997], "core_cycle_counts": [[266131577553], [362778163544], [606401232791], [367531453213]], "aperf_counts": [[264889040094], [362716435444], [606372455147], [367503862323]], "mperf_counts": [[264896202214], [362719567340], [606373864792], [367504602206]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 01:53:49: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 01:53:50: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 01:53:50: INFO] 209 executions left in scheduler queue
[2019-07-31 01:53:50: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 01:53:50: INFO] Estimated completion (next execution): 2019-07-31 02:04:36 (0:10:46 from now)
[2019-07-31 01:53:50: INFO] Reboot in preparation for next execution
[2019-07-31 02:03:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.606 s/op
Iteration   2: 6.140 s/op
Iteration   3: 6.054 s/op
Iteration   4: 6.032 s/op
Iteration   5: 6.128 s/op
Iteration   6: 6.092 s/op
Iteration   7: 6.114 s/op
Iteration   8: 6.103 s/op
Iteration   9: 6.062 s/op
Iteration  10: 6.104 s/op
Iteration  11: 6.102 s/op
Iteration  12: 6.100 s/op
Iteration  13: 6.035 s/op
Iteration  14: 6.090 s/op
Iteration  15: 6.093 s/op
Iteration  16: 6.111 s/op
Iteration  17: 6.051 s/op
Iteration  18: 6.099 s/op
Iteration  19: 6.095 s/op
Iteration  20: 6.105 s/op
Iteration  21: 6.046 s/op
Iteration  22: 6.087 s/op
Iteration  23: 6.103 s/op
Iteration  24: 6.101 s/op
Iteration  25: 6.046 s/op
Iteration  26: 6.098 s/op
Iteration  27: 6.106 s/op
Iteration  28: 6.112 s/op
Iteration  29: 6.060 s/op
Iteration  30: 6.105 s/op
Iteration  31: 6.107 s/op
Iteration  32: 6.053 s/op
Iteration  33: 6.092 s/op
Iteration  34: 6.112 s/op
Iteration  35: 6.104 s/op
Iteration  36: 6.039 s/op
Iteration  37: 6.108 s/op
Iteration  38: 6.102 s/op
Iteration  39: 6.114 s/op
Iteration  40: 6.054 s/op
Iteration  41: 6.107 s/op
Iteration  42: 6.113 s/op
Iteration  43: 6.116 s/op
Iteration  44: 6.057 s/op
Iteration  45: 6.110 s/op
Iteration  46: 6.110 s/op
Iteration  47: 6.057 s/op
Iteration  48: 6.101 s/op
Iteration  49: 6.109 s/op
Iteration  50: 6.192 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.103 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [6.000, 6.050) = 5 
    [6.050, 6.100) = 17 
    [6.100, 6.150) = 26 
    [6.150, 6.200) = 1 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 
    [6.650, 6.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.032 s/op
     p(50.0000) =      6.102 s/op
     p(90.0000) =      6.116 s/op
     p(95.0000) =      6.163 s/op
     p(99.0000) =      6.606 s/op
     p(99.9000) =      6.606 s/op
     p(99.9900) =      6.606 s/op
     p(99.9990) =      6.606 s/op
     p(99.9999) =      6.606 s/op
    p(100.0000) =      6.606 s/op


# Run complete. Total time: 00:05:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.103 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot-8u222-b10_1564531079412.json
{"wallclock_times": [306.14892383], "core_cycle_counts": [[171465138831], [327673542475], [343693291432], [226728557360]], "aperf_counts": [[170592606681], [327599158971], [343645317109], [226679756198]], "mperf_counts": [[170596328688], [327600109676], [343654132950], [226679770142]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 02:03:05: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 02:03:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 02:03:06: INFO] 208 executions left in scheduler queue
[2019-07-31 02:03:06: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 02:03:06: INFO] Estimated completion (next execution): 2019-07-31 02:10:42 (0:07:36 from now)
[2019-07-31 02:03:06: INFO] Reboot in preparation for next execution
[2019-07-31 02:19:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.857 s/op
Iteration   2: 15.417 s/op
Iteration   3: 15.136 s/op
Iteration   4: 15.156 s/op
Iteration   5: 15.206 s/op
Iteration   6: 15.202 s/op
Iteration   7: 15.190 s/op
Iteration   8: 15.238 s/op
Iteration   9: 15.160 s/op
Iteration  10: 15.215 s/op
Iteration  11: 15.226 s/op
Iteration  12: 15.159 s/op
Iteration  13: 15.194 s/op
Iteration  14: 15.162 s/op
Iteration  15: 15.218 s/op
Iteration  16: 15.164 s/op
Iteration  17: 15.203 s/op
Iteration  18: 15.205 s/op
Iteration  19: 15.134 s/op
Iteration  20: 15.117 s/op
Iteration  21: 15.171 s/op
Iteration  22: 15.183 s/op
Iteration  23: 15.195 s/op
Iteration  24: 15.164 s/op
Iteration  25: 15.191 s/op
Iteration  26: 15.308 s/op
Iteration  27: 15.186 s/op
Iteration  28: 15.185 s/op
Iteration  29: 15.208 s/op
Iteration  30: 15.176 s/op
Iteration  31: 15.189 s/op
Iteration  32: 15.209 s/op
Iteration  33: 15.111 s/op
Iteration  34: 15.112 s/op
Iteration  35: 15.294 s/op
Iteration  36: 15.172 s/op
Iteration  37: 15.320 s/op
Iteration  38: 15.157 s/op
Iteration  39: 15.160 s/op
Iteration  40: 15.184 s/op
Iteration  41: 15.171 s/op
Iteration  42: 15.156 s/op
Iteration  43: 15.273 s/op
Iteration  44: 15.182 s/op
Iteration  45: 15.168 s/op
Iteration  46: 15.212 s/op
Iteration  47: 15.155 s/op
Iteration  48: 15.165 s/op
Iteration  49: 15.153 s/op
Iteration  50: 15.214 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.186 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [14.800, 14.850) = 0 
    [14.850, 14.900) = 1 
    [14.900, 14.950) = 0 
    [14.950, 15.000) = 0 
    [15.000, 15.050) = 0 
    [15.050, 15.100) = 0 
    [15.100, 15.150) = 5 
    [15.150, 15.200) = 27 
    [15.200, 15.250) = 12 
    [15.250, 15.300) = 2 
    [15.300, 15.350) = 2 
    [15.350, 15.400) = 0 
    [15.400, 15.450) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.857 s/op
     p(50.0000) =     15.184 s/op
     p(90.0000) =     15.269 s/op
     p(95.0000) =     15.313 s/op
     p(99.0000) =     15.417 s/op
     p(99.9000) =     15.417 s/op
     p(99.9900) =     15.417 s/op
     p(99.9990) =     15.417 s/op
     p(99.9999) =     15.417 s/op
    p(100.0000) =     15.417 s/op


# Run complete. Total time: 00:12:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.186 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot-8u222-b10_1564531638048.json
{"wallclock_times": [760.157378114], "core_cycle_counts": [[571067308903], [522863390777], [663561810607], [688730942279]], "aperf_counts": [[569312051433], [522741278125], [663523317131], [688701281588]], "mperf_counts": [[569317053408], [522741338200], [663524872896], [688714118408]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 02:19:58: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-31 02:19:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 02:19:59: INFO] 207 executions left in scheduler queue
[2019-07-31 02:19:59: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-07-31 02:19:59: INFO] Estimated completion (next execution): 2019-07-31 02:35:09 (0:15:10 from now)
[2019-07-31 02:19:59: INFO] Reboot in preparation for next execution
[2019-07-31 02:24:10: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 02:38:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.620 s/op
Iteration   2: 16.910 s/op
Iteration   3: 16.549 s/op
Iteration   4: 16.537 s/op
Iteration   5: 16.533 s/op
Iteration   6: 16.521 s/op
Iteration   7: 16.550 s/op
Iteration   8: 16.522 s/op
Iteration   9: 16.518 s/op
Iteration  10: 16.522 s/op
Iteration  11: 16.544 s/op
Iteration  12: 16.563 s/op
Iteration  13: 16.538 s/op
Iteration  14: 16.512 s/op
Iteration  15: 16.535 s/op
Iteration  16: 16.636 s/op
Iteration  17: 16.526 s/op
Iteration  18: 16.528 s/op
Iteration  19: 16.537 s/op
Iteration  20: 16.526 s/op
Iteration  21: 16.548 s/op
Iteration  22: 16.553 s/op
Iteration  23: 16.497 s/op
Iteration  24: 16.531 s/op
Iteration  25: 16.540 s/op
Iteration  26: 16.497 s/op
Iteration  27: 16.549 s/op
Iteration  28: 16.533 s/op
Iteration  29: 16.505 s/op
Iteration  30: 16.559 s/op
Iteration  31: 16.517 s/op
Iteration  32: 16.569 s/op
Iteration  33: 16.573 s/op
Iteration  34: 16.541 s/op
Iteration  35: 16.523 s/op
Iteration  36: 16.536 s/op
Iteration  37: 16.609 s/op
Iteration  38: 16.533 s/op
Iteration  39: 16.553 s/op
Iteration  40: 16.545 s/op
Iteration  41: 16.544 s/op
Iteration  42: 16.551 s/op
Iteration  43: 16.517 s/op
Iteration  44: 16.522 s/op
Iteration  45: 16.530 s/op
Iteration  46: 16.523 s/op
Iteration  47: 16.531 s/op
Iteration  48: 16.528 s/op
Iteration  49: 16.585 s/op
Iteration  50: 16.586 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     16.589 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 2 
    [16.500, 16.750) = 46 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.497 s/op
     p(50.0000) =     16.536 s/op
     p(90.0000) =     16.586 s/op
     p(95.0000) =     16.759 s/op
     p(99.0000) =     18.620 s/op
     p(99.9000) =     18.620 s/op
     p(99.9900) =     18.620 s/op
     p(99.9990) =     18.620 s/op
     p(99.9999) =     18.620 s/op
    p(100.0000) =     18.620 s/op


# Run complete. Total time: 00:13:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  16.589 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9-8u222-b10_1564532650044.json
{"wallclock_times": [830.575234757], "core_cycle_counts": [[1378123691346], [320922482828], [653534664206], [330126494221]], "aperf_counts": [[1376738734668], [320655619781], [653229490657], [329925938302]], "mperf_counts": [[1376740556380], [320656176372], [653229449492], [329925901158]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 02:38:00: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-07-31 02:38:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 02:38:01: INFO] 206 executions left in scheduler queue
[2019-07-31 02:38:01: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-07-31 02:38:01: INFO] Estimated completion (next execution): 2019-07-31 02:54:22 (0:16:20 from now)
[2019-07-31 02:38:01: INFO] Reboot in preparation for next execution
[2019-07-31 02:46:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.710 s/op
Iteration   2: 5.357 s/op
Iteration   3: 5.401 s/op
Iteration   4: 5.409 s/op
Iteration   5: 5.405 s/op
Iteration   6: 5.400 s/op
Iteration   7: 5.404 s/op
Iteration   8: 5.399 s/op
Iteration   9: 5.403 s/op
Iteration  10: 5.400 s/op
Iteration  11: 5.403 s/op
Iteration  12: 5.405 s/op
Iteration  13: 5.402 s/op
Iteration  14: 5.402 s/op
Iteration  15: 5.407 s/op
Iteration  16: 5.400 s/op
Iteration  17: 5.399 s/op
Iteration  18: 5.404 s/op
Iteration  19: 5.402 s/op
Iteration  20: 5.406 s/op
Iteration  21: 5.406 s/op
Iteration  22: 5.411 s/op
Iteration  23: 5.402 s/op
Iteration  24: 5.397 s/op
Iteration  25: 5.408 s/op
Iteration  26: 5.403 s/op
Iteration  27: 5.400 s/op
Iteration  28: 5.406 s/op
Iteration  29: 5.407 s/op
Iteration  30: 5.402 s/op
Iteration  31: 5.401 s/op
Iteration  32: 5.400 s/op
Iteration  33: 5.401 s/op
Iteration  34: 5.413 s/op
Iteration  35: 5.402 s/op
Iteration  36: 5.407 s/op
Iteration  37: 5.411 s/op
Iteration  38: 5.397 s/op
Iteration  39: 5.399 s/op
Iteration  40: 5.409 s/op
Iteration  41: 5.402 s/op
Iteration  42: 5.400 s/op
Iteration  43: 5.407 s/op
Iteration  44: 5.400 s/op
Iteration  45: 5.413 s/op
Iteration  46: 5.404 s/op
Iteration  47: 5.404 s/op
Iteration  48: 5.409 s/op
Iteration  49: 5.407 s/op
Iteration  50: 5.408 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.409 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 10 
    [5.400, 5.450) = 39 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.357 s/op
     p(50.0000) =      5.403 s/op
     p(90.0000) =      5.410 s/op
     p(95.0000) =      5.413 s/op
     p(99.0000) =      5.710 s/op
     p(99.9000) =      5.710 s/op
     p(99.9900) =      5.710 s/op
     p(99.9990) =      5.710 s/op
     p(99.9999) =      5.710 s/op
    p(100.0000) =      5.710 s/op


# Run complete. Total time: 00:04:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.409 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot-8u222-b10_1564533743587.json
{"wallclock_times": [271.245527788], "core_cycle_counts": [[268189097278], [308669846725], [189830783672], [107622329697]], "aperf_counts": [[267596747517], [308603232514], [189798416889], [107586191845]], "mperf_counts": [[267607051720], [308604959282], [189798771450], [107586224690]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 02:46:54: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-07-31 02:46:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 02:46:55: INFO] 205 executions left in scheduler queue
[2019-07-31 02:46:55: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-07-31 02:46:55: INFO] Estimated completion (next execution): 2019-07-31 02:53:57 (0:07:01 from now)
[2019-07-31 02:46:55: INFO] Reboot in preparation for next execution
[2019-07-31 02:51:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 02:51:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 02:51:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 02:51:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 02:51:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 02:51:05: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 03:03:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.550 s/op
Iteration   2: 15.141 s/op
Iteration   3: 15.141 s/op
Iteration   4: 14.500 s/op
Iteration   5: 15.273 s/op
Iteration   6: 15.480 s/op
Iteration   7: 14.837 s/op
Iteration   8: 15.095 s/op
Iteration   9: 14.256 s/op
Iteration  10: 15.262 s/op
Iteration  11: 14.752 s/op
Iteration  12: 14.668 s/op
Iteration  13: 14.563 s/op
Iteration  14: 15.225 s/op
Iteration  15: 15.052 s/op
Iteration  16: 14.618 s/op
Iteration  17: 14.876 s/op
Iteration  18: 14.667 s/op
Iteration  19: 15.776 s/op
Iteration  20: 15.668 s/op
Iteration  21: 15.591 s/op
Iteration  22: 15.078 s/op
Iteration  23: 15.759 s/op
Iteration  24: 15.134 s/op
Iteration  25: 15.104 s/op
Iteration  26: 14.994 s/op
Iteration  27: 14.400 s/op
Iteration  28: 15.780 s/op
Iteration  29: 14.652 s/op
Iteration  30: 15.433 s/op
Iteration  31: 14.573 s/op
Iteration  32: 14.654 s/op
Iteration  33: 14.890 s/op
Iteration  34: 15.283 s/op
Iteration  35: 14.926 s/op
Iteration  36: 14.624 s/op
Iteration  37: 15.779 s/op
Iteration  38: 15.575 s/op
Iteration  39: 14.975 s/op
Iteration  40: 15.862 s/op
Iteration  41: 15.166 s/op
Iteration  42: 15.892 s/op
Iteration  43: 15.292 s/op
Iteration  44: 14.968 s/op
Iteration  45: 15.656 s/op
Iteration  46: 15.910 s/op
Iteration  47: 15.022 s/op
Iteration  48: 15.545 s/op
Iteration  49: 15.306 s/op
Iteration  50: 15.019 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.145 ?(99.9%) 0.215 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 1 
    [14.375, 14.500) = 1 
    [14.500, 14.625) = 5 
    [14.625, 14.750) = 4 
    [14.750, 14.875) = 2 
    [14.875, 15.000) = 6 
    [15.000, 15.125) = 6 
    [15.125, 15.250) = 5 
    [15.250, 15.375) = 5 
    [15.375, 15.500) = 2 
    [15.500, 15.625) = 4 
    [15.625, 15.750) = 2 
    [15.750, 15.875) = 5 

  Percentiles, s/op:
      p(0.0000) =     14.256 s/op
     p(50.0000) =     15.119 s/op
     p(90.0000) =     15.779 s/op
     p(95.0000) =     15.875 s/op
     p(99.0000) =     15.910 s/op
     p(99.9000) =     15.910 s/op
     p(99.9900) =     15.910 s/op
     p(99.9990) =     15.910 s/op
     p(99.9999) =     15.910 s/op
    p(100.0000) =     15.910 s/op


# Run complete. Total time: 00:12:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  15.145 ? 0.215   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9_12.0.1_1564534265733.json
{"wallclock_times": [759.111739803], "core_cycle_counts": [[576393039648], [774570370623], [590869032513], [815301458122]], "aperf_counts": [[574328073878], [774419451245], [590711980709], [815146737172]], "mperf_counts": [[574329226416], [774424038132], [590712058870], [815146706180]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 03:03:44: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-07-31 03:03:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:03:45: INFO] 204 executions left in scheduler queue
[2019-07-31 03:03:45: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-07-31 03:03:45: INFO] Estimated completion (next execution): 2019-07-31 03:18:55 (0:15:09 from now)
[2019-07-31 03:03:45: INFO] Reboot in preparation for next execution
[2019-07-31 03:07:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 03:22:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.025 s/op
Iteration   2: 16.215 s/op
Iteration   3: 17.454 s/op
Iteration   4: 17.583 s/op
Iteration   5: 17.364 s/op
Iteration   6: 17.488 s/op
Iteration   7: 17.495 s/op
Iteration   8: 17.357 s/op
Iteration   9: 17.560 s/op
Iteration  10: 17.576 s/op
Iteration  11: 17.269 s/op
Iteration  12: 17.498 s/op
Iteration  13: 17.694 s/op
Iteration  14: 17.496 s/op
Iteration  15: 17.401 s/op
Iteration  16: 17.067 s/op
Iteration  17: 17.650 s/op
Iteration  18: 17.311 s/op
Iteration  19: 17.593 s/op
Iteration  20: 17.422 s/op
Iteration  21: 17.706 s/op
Iteration  22: 17.439 s/op
Iteration  23: 17.563 s/op
Iteration  24: 17.549 s/op
Iteration  25: 17.311 s/op
Iteration  26: 17.627 s/op
Iteration  27: 16.996 s/op
Iteration  28: 17.115 s/op
Iteration  29: 17.538 s/op
Iteration  30: 17.671 s/op
Iteration  31: 17.774 s/op
Iteration  32: 17.396 s/op
Iteration  33: 17.390 s/op
Iteration  34: 17.451 s/op
Iteration  35: 17.633 s/op
Iteration  36: 17.002 s/op
Iteration  37: 17.530 s/op
Iteration  38: 17.615 s/op
Iteration  39: 17.628 s/op
Iteration  40: 17.213 s/op
Iteration  41: 17.642 s/op
Iteration  42: 17.574 s/op
Iteration  43: 17.462 s/op
Iteration  44: 17.621 s/op
Iteration  45: 17.441 s/op
Iteration  46: 17.334 s/op
Iteration  47: 16.732 s/op
Iteration  48: 17.413 s/op
Iteration  49: 16.324 s/op
Iteration  50: 17.090 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     17.386 ?(99.9%) 0.156 s/op

  Histogram, s/op:
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 1 
    [16.250, 16.375) = 1 
    [16.375, 16.500) = 0 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 1 
    [16.750, 16.875) = 0 
    [16.875, 17.000) = 1 
    [17.000, 17.125) = 5 
    [17.125, 17.250) = 1 
    [17.250, 17.375) = 6 
    [17.375, 17.500) = 14 
    [17.500, 17.625) = 11 
    [17.625, 17.750) = 8 
    [17.750, 17.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.215 s/op
     p(50.0000) =     17.458 s/op
     p(90.0000) =     17.649 s/op
     p(95.0000) =     17.699 s/op
     p(99.0000) =     17.774 s/op
     p(99.9000) =     17.774 s/op
     p(99.9900) =     17.774 s/op
     p(99.9990) =     17.774 s/op
     p(99.9999) =     17.774 s/op
    p(100.0000) =     17.774 s/op


# Run complete. Total time: 00:14:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.386 ? 0.156   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9-8u222-b10_1564535275598.json
{"wallclock_times": [870.6322759330001], "core_cycle_counts": [[519591960749], [1347226031567], [682661131366], [537399800256]], "aperf_counts": [[517059891100], [1347057857307], [682490860279], [537258404109]], "mperf_counts": [[517062802204], [1347057840220], [682490913646], [537258502918]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 03:22:26: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-07-31 03:22:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:22:27: INFO] 203 executions left in scheduler queue
[2019-07-31 03:22:27: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-31 03:22:27: INFO] Estimated completion (next execution): 2019-07-31 03:39:28 (0:17:00 from now)
[2019-07-31 03:22:27: INFO] Reboot in preparation for next execution
[2019-07-31 03:27:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.821 s/op
Iteration   2: 1.593 s/op
Iteration   3: 1.575 s/op
Iteration   4: 1.668 s/op
Iteration   5: 1.576 s/op
Iteration   6: 1.581 s/op
Iteration   7: 1.588 s/op
Iteration   8: 1.574 s/op
Iteration   9: 1.576 s/op
Iteration  10: 1.576 s/op
Iteration  11: 1.583 s/op
Iteration  12: 1.581 s/op
Iteration  13: 1.576 s/op
Iteration  14: 1.583 s/op
Iteration  15: 1.579 s/op
Iteration  16: 1.578 s/op
Iteration  17: 1.572 s/op
Iteration  18: 1.579 s/op
Iteration  19: 1.570 s/op
Iteration  20: 1.576 s/op
Iteration  21: 1.575 s/op
Iteration  22: 1.573 s/op
Iteration  23: 1.571 s/op
Iteration  24: 1.574 s/op
Iteration  25: 1.570 s/op
Iteration  26: 1.576 s/op
Iteration  27: 1.577 s/op
Iteration  28: 1.571 s/op
Iteration  29: 1.571 s/op
Iteration  30: 1.577 s/op
Iteration  31: 1.571 s/op
Iteration  32: 1.570 s/op
Iteration  33: 1.574 s/op
Iteration  34: 1.572 s/op
Iteration  35: 1.569 s/op
Iteration  36: 1.579 s/op
Iteration  37: 1.580 s/op
Iteration  38: 1.567 s/op
Iteration  39: 1.571 s/op
Iteration  40: 1.576 s/op
Iteration  41: 1.574 s/op
Iteration  42: 1.582 s/op
Iteration  43: 1.577 s/op
Iteration  44: 1.578 s/op
Iteration  45: 1.579 s/op
Iteration  46: 1.568 s/op
Iteration  47: 1.570 s/op
Iteration  48: 1.572 s/op
Iteration  49: 1.569 s/op
Iteration  50: 1.574 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.582 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 22 
    [1.575, 1.600) = 26 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.567 s/op
     p(50.0000) =      1.576 s/op
     p(90.0000) =      1.583 s/op
     p(95.0000) =      1.627 s/op
     p(99.0000) =      1.821 s/op
     p(99.9000) =      1.821 s/op
     p(99.9900) =      1.821 s/op
     p(99.9990) =      1.821 s/op
     p(99.9999) =      1.821 s/op
    p(100.0000) =      1.821 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.582 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ce-19.1.1_1564536397894.json
{"wallclock_times": [80.025742694], "core_cycle_counts": [[34328468142], [80602027805], [82478609806], [69808776138]], "aperf_counts": [[34020165412], [80577450678], [82458399710], [69792651746]], "mperf_counts": [[34028139938], [80598265694], [82459988746], [69803393600]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 03:27:57: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-31 03:27:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:27:58: INFO] 202 executions left in scheduler queue
[2019-07-31 03:27:58: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-31 03:27:58: INFO] Estimated completion (next execution): 2019-07-31 03:31:49 (0:03:50 from now)
[2019-07-31 03:27:58: INFO] Reboot in preparation for next execution
[2019-07-31 03:33:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.770 s/op
Iteration   2: 1.712 s/op
Iteration   3: 1.772 s/op
Iteration   4: 1.659 s/op
Iteration   5: 1.662 s/op
Iteration   6: 1.662 s/op
Iteration   7: 1.664 s/op
Iteration   8: 1.661 s/op
Iteration   9: 1.660 s/op
Iteration  10: 1.661 s/op
Iteration  11: 1.661 s/op
Iteration  12: 1.663 s/op
Iteration  13: 1.661 s/op
Iteration  14: 1.661 s/op
Iteration  15: 1.662 s/op
Iteration  16: 1.659 s/op
Iteration  17: 1.663 s/op
Iteration  18: 1.663 s/op
Iteration  19: 1.665 s/op
Iteration  20: 1.665 s/op
Iteration  21: 1.664 s/op
Iteration  22: 1.661 s/op
Iteration  23: 1.661 s/op
Iteration  24: 1.664 s/op
Iteration  25: 1.662 s/op
Iteration  26: 1.664 s/op
Iteration  27: 1.666 s/op
Iteration  28: 1.663 s/op
Iteration  29: 1.661 s/op
Iteration  30: 1.663 s/op
Iteration  31: 1.662 s/op
Iteration  32: 1.662 s/op
Iteration  33: 1.661 s/op
Iteration  34: 1.661 s/op
Iteration  35: 1.663 s/op
Iteration  36: 1.664 s/op
Iteration  37: 1.663 s/op
Iteration  38: 1.663 s/op
Iteration  39: 1.663 s/op
Iteration  40: 1.662 s/op
Iteration  41: 1.662 s/op
Iteration  42: 1.662 s/op
Iteration  43: 1.662 s/op
Iteration  44: 1.661 s/op
Iteration  45: 1.666 s/op
Iteration  46: 1.664 s/op
Iteration  47: 1.663 s/op
Iteration  48: 1.665 s/op
Iteration  49: 1.661 s/op
Iteration  50: 1.661 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.668 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 0 
    [1.650, 1.663) = 26 
    [1.663, 1.675) = 21 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 
    [1.700, 1.713) = 1 
    [1.713, 1.725) = 0 
    [1.725, 1.738) = 0 
    [1.738, 1.750) = 0 
    [1.750, 1.763) = 0 
    [1.763, 1.775) = 2 
    [1.775, 1.788) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.659 s/op
     p(50.0000) =      1.662 s/op
     p(90.0000) =      1.666 s/op
     p(95.0000) =      1.738 s/op
     p(99.0000) =      1.772 s/op
     p(99.9000) =      1.772 s/op
     p(99.9900) =      1.772 s/op
     p(99.9990) =      1.772 s/op
     p(99.9999) =      1.772 s/op
    p(100.0000) =      1.772 s/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.668 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ce-19.1.1_1564536726392.json
{"wallclock_times": [84.216344048], "core_cycle_counts": [[35550223517], [100140376909], [58462189840], [81280388169]], "aperf_counts": [[35319275741], [100120181586], [58446646863], [81269356274]], "mperf_counts": [[35332697466], [100124134484], [58447174810], [81269546156]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 03:33:30: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-31 03:33:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:33:31: INFO] 201 executions left in scheduler queue
[2019-07-31 03:33:31: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-31 03:33:31: INFO] Estimated completion (next execution): 2019-07-31 03:37:26 (0:03:54 from now)
[2019-07-31 03:33:31: INFO] Reboot in preparation for next execution
[2019-07-31 03:39:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.040 s/op
Iteration   2: 1.541 s/op
Iteration   3: 1.847 s/op
Iteration   4: 1.916 s/op
Iteration   5: 1.856 s/op
Iteration   6: 1.841 s/op
Iteration   7: 1.843 s/op
Iteration   8: 1.843 s/op
Iteration   9: 1.848 s/op
Iteration  10: 1.840 s/op
Iteration  11: 1.839 s/op
Iteration  12: 1.835 s/op
Iteration  13: 1.837 s/op
Iteration  14: 1.838 s/op
Iteration  15: 1.842 s/op
Iteration  16: 1.844 s/op
Iteration  17: 1.854 s/op
Iteration  18: 1.844 s/op
Iteration  19: 1.841 s/op
Iteration  20: 1.842 s/op
Iteration  21: 1.838 s/op
Iteration  22: 1.842 s/op
Iteration  23: 1.846 s/op
Iteration  24: 1.842 s/op
Iteration  25: 1.838 s/op
Iteration  26: 1.842 s/op
Iteration  27: 1.841 s/op
Iteration  28: 1.846 s/op
Iteration  29: 1.845 s/op
Iteration  30: 1.840 s/op
Iteration  31: 1.839 s/op
Iteration  32: 1.840 s/op
Iteration  33: 1.836 s/op
Iteration  34: 1.841 s/op
Iteration  35: 1.842 s/op
Iteration  36: 1.836 s/op
Iteration  37: 1.840 s/op
Iteration  38: 1.845 s/op
Iteration  39: 1.837 s/op
Iteration  40: 1.841 s/op
Iteration  41: 1.846 s/op
Iteration  42: 1.850 s/op
Iteration  43: 1.838 s/op
Iteration  44: 1.839 s/op
Iteration  45: 1.839 s/op
Iteration  46: 1.841 s/op
Iteration  47: 1.845 s/op
Iteration  48: 1.844 s/op
Iteration  49: 1.839 s/op
Iteration  50: 1.843 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.841 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 45 
    [1.850, 1.900) = 2 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.541 s/op
     p(50.0000) =      1.842 s/op
     p(90.0000) =      1.850 s/op
     p(95.0000) =      1.883 s/op
     p(99.0000) =      2.040 s/op
     p(99.9000) =      2.040 s/op
     p(99.9900) =      2.040 s/op
     p(99.9990) =      2.040 s/op
     p(99.9999) =      2.040 s/op
    p(100.0000) =      2.040 s/op


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.841 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot-8u222-b10_1564537062143.json
{"wallclock_times": [92.932951083], "core_cycle_counts": [[66268965637], [77196699370], [84437276013], [85066770290]], "aperf_counts": [[65997282725], [77162953780], [84408220161], [85047046640]], "mperf_counts": [[66003330720], [77163086956], [84409156798], [85055784296]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 03:39:15: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-31 03:39:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:39:15: INFO] 200 executions left in scheduler queue
[2019-07-31 03:39:15: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-31 03:39:15: INFO] Estimated completion (next execution): 2019-07-31 03:43:19 (0:04:03 from now)
[2019-07-31 03:39:15: INFO] Reboot in preparation for next execution
[2019-07-31 03:45:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.245 s/op
Iteration   2: 1.706 s/op
Iteration   3: 2.063 s/op
Iteration   4: 1.925 s/op
Iteration   5: 2.151 s/op
Iteration   6: 2.266 s/op
Iteration   7: 2.263 s/op
Iteration   8: 2.267 s/op
Iteration   9: 2.270 s/op
Iteration  10: 2.270 s/op
Iteration  11: 2.269 s/op
Iteration  12: 2.267 s/op
Iteration  13: 2.268 s/op
Iteration  14: 2.266 s/op
Iteration  15: 2.266 s/op
Iteration  16: 2.265 s/op
Iteration  17: 2.263 s/op
Iteration  18: 2.266 s/op
Iteration  19: 2.269 s/op
Iteration  20: 2.264 s/op
Iteration  21: 2.267 s/op
Iteration  22: 2.263 s/op
Iteration  23: 2.266 s/op
Iteration  24: 2.264 s/op
Iteration  25: 2.265 s/op
Iteration  26: 2.264 s/op
Iteration  27: 2.267 s/op
Iteration  28: 2.263 s/op
Iteration  29: 2.271 s/op
Iteration  30: 2.266 s/op
Iteration  31: 2.265 s/op
Iteration  32: 2.264 s/op
Iteration  33: 2.268 s/op
Iteration  34: 2.268 s/op
Iteration  35: 2.264 s/op
Iteration  36: 2.268 s/op
Iteration  37: 2.268 s/op
Iteration  38: 2.264 s/op
Iteration  39: 2.265 s/op
Iteration  40: 2.265 s/op
Iteration  41: 2.267 s/op
Iteration  42: 2.267 s/op
Iteration  43: 2.266 s/op
Iteration  44: 2.268 s/op
Iteration  45: 2.271 s/op
Iteration  46: 2.270 s/op
Iteration  47: 2.272 s/op
Iteration  48: 2.272 s/op
Iteration  49: 2.267 s/op
Iteration  50: 2.271 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.242 ?(99.9%) 0.048 s/op

  Histogram, s/op:
    [1.700, 1.750) = 1 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 45 

  Percentiles, s/op:
      p(0.0000) =      1.706 s/op
     p(50.0000) =      2.266 s/op
     p(90.0000) =      2.271 s/op
     p(95.0000) =      2.271 s/op
     p(99.0000) =      2.272 s/op
     p(99.9000) =      2.272 s/op
     p(99.9900) =      2.272 s/op
     p(99.9990) =      2.272 s/op
     p(99.9999) =      2.272 s/op
    p(100.0000) =      2.272 s/op


# Run complete. Total time: 00:01:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.242 ? 0.048   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot-8u222-b10_1564537408369.json
{"wallclock_times": [112.89585623799996], "core_cycle_counts": [[83603704757], [101665902843], [97933433840], [86434537991]], "aperf_counts": [[83334758357], [101636959777], [97920062277], [86419270234]], "mperf_counts": [[83342538190], [101641243154], [97920420266], [86433176776]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 03:45:21: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-31 03:45:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:45:22: INFO] 199 executions left in scheduler queue
[2019-07-31 03:45:22: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-31 03:45:22: INFO] Estimated completion (next execution): 2019-07-31 03:49:45 (0:04:23 from now)
[2019-07-31 03:45:22: INFO] Reboot in preparation for next execution
[2019-07-31 03:49:33: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 03:51:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.768 s/op
Iteration   2: 2.310 s/op
Iteration   3: 2.188 s/op
Iteration   4: 2.018 s/op
Iteration   5: 2.032 s/op
Iteration   6: 2.013 s/op
Iteration   7: 1.954 s/op
Iteration   8: 2.011 s/op
Iteration   9: 1.909 s/op
Iteration  10: 1.880 s/op
Iteration  11: 1.857 s/op
Iteration  12: 1.866 s/op
Iteration  13: 1.883 s/op
Iteration  14: 1.846 s/op
Iteration  15: 1.871 s/op
Iteration  16: 1.885 s/op
Iteration  17: 1.862 s/op
Iteration  18: 1.905 s/op
Iteration  19: 1.911 s/op
Iteration  20: 1.885 s/op
Iteration  21: 1.892 s/op
Iteration  22: 1.893 s/op
Iteration  23: 1.909 s/op
Iteration  24: 1.914 s/op
Iteration  25: 1.890 s/op
Iteration  26: 1.884 s/op
Iteration  27: 1.899 s/op
Iteration  28: 1.916 s/op
Iteration  29: 1.886 s/op
Iteration  30: 1.913 s/op
Iteration  31: 1.885 s/op
Iteration  32: 1.904 s/op
Iteration  33: 1.885 s/op
Iteration  34: 1.905 s/op
Iteration  35: 1.876 s/op
Iteration  36: 1.900 s/op
Iteration  37: 1.897 s/op
Iteration  38: 1.899 s/op
Iteration  39: 1.893 s/op
Iteration  40: 1.906 s/op
Iteration  41: 1.867 s/op
Iteration  42: 1.866 s/op
Iteration  43: 1.893 s/op
Iteration  44: 1.899 s/op
Iteration  45: 1.890 s/op
Iteration  46: 1.914 s/op
Iteration  47: 1.897 s/op
Iteration  48: 1.855 s/op
Iteration  49: 1.887 s/op
Iteration  50: 1.917 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.934 ?(99.9%) 0.072 s/op

  Histogram, s/op:
    [1.800, 1.900) = 30 
    [1.900, 2.000) = 13 
    [2.000, 2.100) = 4 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.846 s/op
     p(50.0000) =      1.897 s/op
     p(90.0000) =      2.017 s/op
     p(95.0000) =      2.243 s/op
     p(99.0000) =      2.768 s/op
     p(99.9000) =      2.768 s/op
     p(99.9900) =      2.768 s/op
     p(99.9990) =      2.768 s/op
     p(99.9999) =      2.768 s/op
    p(100.0000) =      2.768 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.934 ? 0.072   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9-8u222-b10_1564537773610.json
{"wallclock_times": [97.94457078000002], "core_cycle_counts": [[91209831173], [71644622182], [86908055286], [90569880010]], "aperf_counts": [[90861456345], [71579685519], [86852283580], [90518202174]], "mperf_counts": [[90864778952], [71579683412], [86852286174], [90518203846]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 03:51:11: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-31 03:51:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:51:12: INFO] 198 executions left in scheduler queue
[2019-07-31 03:51:12: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-31 03:51:12: INFO] Estimated completion (next execution): 2019-07-31 03:55:20 (0:04:08 from now)
[2019-07-31 03:51:12: INFO] Reboot in preparation for next execution
[2019-07-31 03:55:22: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 03:57:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.262 s/op
Iteration   2: 3.021 s/op
Iteration   3: 2.846 s/op
Iteration   4: 2.760 s/op
Iteration   5: 2.675 s/op
Iteration   6: 2.693 s/op
Iteration   7: 2.707 s/op
Iteration   8: 2.679 s/op
Iteration   9: 2.665 s/op
Iteration  10: 2.688 s/op
Iteration  11: 2.629 s/op
Iteration  12: 2.672 s/op
Iteration  13: 2.638 s/op
Iteration  14: 2.626 s/op
Iteration  15: 2.680 s/op
Iteration  16: 2.654 s/op
Iteration  17: 2.610 s/op
Iteration  18: 2.648 s/op
Iteration  19: 2.679 s/op
Iteration  20: 2.607 s/op
Iteration  21: 2.683 s/op
Iteration  22: 2.680 s/op
Iteration  23: 2.647 s/op
Iteration  24: 2.677 s/op
Iteration  25: 2.684 s/op
Iteration  26: 2.620 s/op
Iteration  27: 2.623 s/op
Iteration  28: 2.639 s/op
Iteration  29: 2.587 s/op
Iteration  30: 2.668 s/op
Iteration  31: 2.667 s/op
Iteration  32: 2.608 s/op
Iteration  33: 2.682 s/op
Iteration  34: 2.570 s/op
Iteration  35: 2.678 s/op
Iteration  36: 2.635 s/op
Iteration  37: 2.684 s/op
Iteration  38: 2.673 s/op
Iteration  39: 2.673 s/op
Iteration  40: 2.619 s/op
Iteration  41: 2.679 s/op
Iteration  42: 2.687 s/op
Iteration  43: 2.678 s/op
Iteration  44: 2.644 s/op
Iteration  45: 2.682 s/op
Iteration  46: 2.638 s/op
Iteration  47: 2.685 s/op
Iteration  48: 2.632 s/op
Iteration  49: 2.666 s/op
Iteration  50: 2.683 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.682 ?(99.9%) 0.053 s/op

  Histogram, s/op:
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 2 
    [2.600, 2.650) = 16 
    [2.650, 2.700) = 27 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 1 
    [2.800, 2.850) = 1 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.570 s/op
     p(50.0000) =      2.673 s/op
     p(90.0000) =      2.705 s/op
     p(95.0000) =      2.925 s/op
     p(99.0000) =      3.262 s/op
     p(99.9000) =      3.262 s/op
     p(99.9900) =      3.262 s/op
     p(99.9990) =      3.262 s/op
     p(99.9999) =      3.262 s/op
    p(100.0000) =      3.262 s/op


# Run complete. Total time: 00:02:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.682 ? 0.053   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9-8u222-b10_1564538122521.json
{"wallclock_times": [135.239139725], "core_cycle_counts": [[119130921531], [79653709926], [108596081336], [151083178122]], "aperf_counts": [[118761562244], [79600666754], [108549241556], [151052571549]], "mperf_counts": [[118763236288], [79600656128], [108549233004], [151052568966]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 03:57:37: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-31 03:57:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 03:57:38: INFO] 197 executions left in scheduler queue
[2019-07-31 03:57:38: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-31 03:57:38: INFO] Estimated completion (next execution): 2019-07-31 04:02:24 (0:04:45 from now)
[2019-07-31 03:57:38: INFO] Reboot in preparation for next execution
[2019-07-31 04:01:50: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 04:01:50: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 04:01:50: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 04:01:50: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 04:01:50: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 04:01:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 04:03:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.810 s/op
Iteration   2: 2.242 s/op
Iteration   3: 2.323 s/op
Iteration   4: 2.162 s/op
Iteration   5: 2.157 s/op
Iteration   6: 2.072 s/op
Iteration   7: 2.091 s/op
Iteration   8: 2.055 s/op
Iteration   9: 1.941 s/op
Iteration  10: 1.974 s/op
Iteration  11: 1.996 s/op
Iteration  12: 1.982 s/op
Iteration  13: 1.962 s/op
Iteration  14: 1.981 s/op
Iteration  15: 1.976 s/op
Iteration  16: 1.972 s/op
Iteration  17: 1.936 s/op
Iteration  18: 1.952 s/op
Iteration  19: 1.958 s/op
Iteration  20: 1.917 s/op
Iteration  21: 1.928 s/op
Iteration  22: 1.910 s/op
Iteration  23: 1.925 s/op
Iteration  24: 1.931 s/op
Iteration  25: 1.923 s/op
Iteration  26: 1.917 s/op
Iteration  27: 1.924 s/op
Iteration  28: 1.929 s/op
Iteration  29: 1.960 s/op
Iteration  30: 1.946 s/op
Iteration  31: 1.938 s/op
Iteration  32: 1.933 s/op
Iteration  33: 1.928 s/op
Iteration  34: 1.910 s/op
Iteration  35: 1.901 s/op
Iteration  36: 1.932 s/op
Iteration  37: 1.911 s/op
Iteration  38: 1.944 s/op
Iteration  39: 1.944 s/op
Iteration  40: 1.950 s/op
Iteration  41: 1.920 s/op
Iteration  42: 1.948 s/op
Iteration  43: 1.921 s/op
Iteration  44: 1.939 s/op
Iteration  45: 1.945 s/op
Iteration  46: 1.957 s/op
Iteration  47: 1.949 s/op
Iteration  48: 1.953 s/op
Iteration  49: 1.907 s/op
Iteration  50: 1.933 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.988 ?(99.9%) 0.072 s/op

  Histogram, s/op:
    [1.900, 2.000) = 42 
    [2.000, 2.100) = 3 
    [2.100, 2.200) = 2 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.901 s/op
     p(50.0000) =      1.945 s/op
     p(90.0000) =      2.151 s/op
     p(95.0000) =      2.278 s/op
     p(99.0000) =      2.810 s/op
     p(99.9000) =      2.810 s/op
     p(99.9900) =      2.810 s/op
     p(99.9990) =      2.810 s/op
     p(99.9999) =      2.810 s/op
    p(100.0000) =      2.810 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.988 ? 0.072   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_12.0.1_1564538510877.json
{"wallclock_times": [101.06490336400003], "core_cycle_counts": [[105240382879], [94721511603], [74678375298], [79420329980]], "aperf_counts": [[104917543403], [94648186811], [74609896460], [79348589481]], "mperf_counts": [[104928070424], [94648193522], [74609905030], [79348590676]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 04:03:31: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-31 04:03:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 04:03:32: INFO] 196 executions left in scheduler queue
[2019-07-31 04:03:32: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-31 04:03:32: INFO] Estimated completion (next execution): 2019-07-31 04:07:44 (0:04:11 from now)
[2019-07-31 04:03:32: INFO] Reboot in preparation for next execution
[2019-07-31 04:07:44: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 04:07:44: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 04:07:44: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 04:07:44: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 04:07:44: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 04:07:44: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 04:10:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.292 s/op
Iteration   2: 3.065 s/op
Iteration   3: 2.964 s/op
Iteration   4: 2.870 s/op
Iteration   5: 2.823 s/op
Iteration   6: 2.875 s/op
Iteration   7: 2.858 s/op
Iteration   8: 2.796 s/op
Iteration   9: 2.779 s/op
Iteration  10: 2.805 s/op
Iteration  11: 2.848 s/op
Iteration  12: 2.767 s/op
Iteration  13: 2.785 s/op
Iteration  14: 2.804 s/op
Iteration  15: 2.843 s/op
Iteration  16: 2.783 s/op
Iteration  17: 2.777 s/op
Iteration  18: 2.852 s/op
Iteration  19: 2.805 s/op
Iteration  20: 2.806 s/op
Iteration  21: 2.778 s/op
Iteration  22: 2.773 s/op
Iteration  23: 2.842 s/op
Iteration  24: 2.898 s/op
Iteration  25: 2.877 s/op
Iteration  26: 2.860 s/op
Iteration  27: 2.891 s/op
Iteration  28: 2.834 s/op
Iteration  29: 2.820 s/op
Iteration  30: 2.822 s/op
Iteration  31: 2.917 s/op
Iteration  32: 2.845 s/op
Iteration  33: 2.872 s/op
Iteration  34: 2.853 s/op
Iteration  35: 2.853 s/op
Iteration  36: 2.919 s/op
Iteration  37: 2.913 s/op
Iteration  38: 2.890 s/op
Iteration  39: 2.866 s/op
Iteration  40: 2.906 s/op
Iteration  41: 2.878 s/op
Iteration  42: 2.791 s/op
Iteration  43: 2.927 s/op
Iteration  44: 2.874 s/op
Iteration  45: 2.875 s/op
Iteration  46: 2.923 s/op
Iteration  47: 2.895 s/op
Iteration  48: 2.893 s/op
Iteration  49: 2.844 s/op
Iteration  50: 2.911 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.865 ?(99.9%) 0.041 s/op

  Histogram, s/op:
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 9 
    [2.800, 2.850) = 13 
    [2.850, 2.900) = 18 
    [2.900, 2.950) = 7 
    [2.950, 3.000) = 1 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 1 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.767 s/op
     p(50.0000) =      2.856 s/op
     p(90.0000) =      2.923 s/op
     p(95.0000) =      3.009 s/op
     p(99.0000) =      3.292 s/op
     p(99.9000) =      3.292 s/op
     p(99.9900) =      3.292 s/op
     p(99.9990) =      3.292 s/op
     p(99.9999) =      3.292 s/op
    p(100.0000) =      3.292 s/op


# Run complete. Total time: 00:02:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.865 ? 0.041   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_12.0.1_1564538864660.json
{"wallclock_times": [144.752763204], "core_cycle_counts": [[161974918410], [104467893071], [85813141728], [140668604125]], "aperf_counts": [[161623168768], [104402149938], [85727079377], [140620503613]], "mperf_counts": [[161629176560], [104408827074], [85727293074], [140620504474]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 04:10:09: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-31 04:10:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 04:10:10: INFO] 195 executions left in scheduler queue
[2019-07-31 04:10:10: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-07-31 04:10:10: INFO] Estimated completion (next execution): 2019-07-31 04:15:05 (0:04:55 from now)
[2019-07-31 04:10:10: INFO] Reboot in preparation for next execution
[2019-07-31 04:14:35: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 04:14:35: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 04:14:35: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 04:14:35: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 04:14:35: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 04:19:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.655 s/op
Iteration   2: 6.023 s/op
Iteration   3: 5.279 s/op
Iteration   4: 5.285 s/op
Iteration   5: 5.285 s/op
Iteration   6: 5.281 s/op
Iteration   7: 5.285 s/op
Iteration   8: 5.285 s/op
Iteration   9: 5.290 s/op
Iteration  10: 5.290 s/op
Iteration  11: 5.288 s/op
Iteration  12: 5.289 s/op
Iteration  13: 5.288 s/op
Iteration  14: 5.290 s/op
Iteration  15: 5.284 s/op
Iteration  16: 5.283 s/op
Iteration  17: 5.280 s/op
Iteration  18: 5.281 s/op
Iteration  19: 5.290 s/op
Iteration  20: 5.280 s/op
Iteration  21: 5.280 s/op
Iteration  22: 5.275 s/op
Iteration  23: 5.281 s/op
Iteration  24: 5.277 s/op
Iteration  25: 5.289 s/op
Iteration  26: 5.280 s/op
Iteration  27: 5.278 s/op
Iteration  28: 5.278 s/op
Iteration  29: 5.288 s/op
Iteration  30: 5.281 s/op
Iteration  31: 5.283 s/op
Iteration  32: 5.279 s/op
Iteration  33: 5.282 s/op
Iteration  34: 5.282 s/op
Iteration  35: 5.284 s/op
Iteration  36: 5.283 s/op
Iteration  37: 5.281 s/op
Iteration  38: 5.274 s/op
Iteration  39: 5.288 s/op
Iteration  40: 5.280 s/op
Iteration  41: 5.293 s/op
Iteration  42: 5.280 s/op
Iteration  43: 5.282 s/op
Iteration  44: 5.280 s/op
Iteration  45: 5.279 s/op
Iteration  46: 5.279 s/op
Iteration  47: 5.288 s/op
Iteration  48: 5.279 s/op
Iteration  49: 5.281 s/op
Iteration  50: 5.287 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      5.305 ?(99.9%) 0.058 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 48 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 1 
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 0 
    [5.800, 5.850) = 0 
    [5.850, 5.900) = 0 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 1 
    [6.050, 6.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.274 s/op
     p(50.0000) =      5.282 s/op
     p(90.0000) =      5.290 s/op
     p(95.0000) =      5.456 s/op
     p(99.0000) =      6.023 s/op
     p(99.9000) =      6.023 s/op
     p(99.9900) =      6.023 s/op
     p(99.9990) =      6.023 s/op
     p(99.9999) =      6.023 s/op
    p(100.0000) =      6.023 s/op


# Run complete. Total time: 00:04:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.305 ? 0.058   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot_11.0.4_1564539275350.json
{"wallclock_times": [266.264801032], "core_cycle_counts": [[162525740364], [236127717380], [205265821201], [256914680242]], "aperf_counts": [[161793661166], [236072756432], [205227233690], [256877545659]], "mperf_counts": [[162031604316], [236172249228], [205477909230], [257021759624]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 04:19:01: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-07-31 04:19:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 04:19:02: INFO] 194 executions left in scheduler queue
[2019-07-31 04:19:02: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-07-31 04:19:02: INFO] Estimated completion (next execution): 2019-07-31 04:25:59 (0:06:56 from now)
[2019-07-31 04:19:02: INFO] Reboot in preparation for next execution
[2019-07-31 04:23:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 04:23:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 04:23:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 04:23:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 04:23:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 04:23:12: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 04:35:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.854 s/op
Iteration   2: 14.327 s/op
Iteration   3: 14.970 s/op
Iteration   4: 14.961 s/op
Iteration   5: 14.958 s/op
Iteration   6: 14.950 s/op
Iteration   7: 14.923 s/op
Iteration   8: 14.886 s/op
Iteration   9: 14.929 s/op
Iteration  10: 14.915 s/op
Iteration  11: 14.912 s/op
Iteration  12: 14.923 s/op
Iteration  13: 14.939 s/op
Iteration  14: 14.942 s/op
Iteration  15: 14.925 s/op
Iteration  16: 14.926 s/op
Iteration  17: 14.949 s/op
Iteration  18: 14.935 s/op
Iteration  19: 14.931 s/op
Iteration  20: 14.960 s/op
Iteration  21: 14.931 s/op
Iteration  22: 14.927 s/op
Iteration  23: 14.920 s/op
Iteration  24: 14.926 s/op
Iteration  25: 14.979 s/op
Iteration  26: 14.941 s/op
Iteration  27: 14.950 s/op
Iteration  28: 14.929 s/op
Iteration  29: 14.972 s/op
Iteration  30: 14.928 s/op
Iteration  31: 14.930 s/op
Iteration  32: 14.933 s/op
Iteration  33: 14.956 s/op
Iteration  34: 14.960 s/op
Iteration  35: 14.945 s/op
Iteration  36: 14.955 s/op
Iteration  37: 14.946 s/op
Iteration  38: 14.912 s/op
Iteration  39: 14.953 s/op
Iteration  40: 14.960 s/op
Iteration  41: 14.947 s/op
Iteration  42: 15.111 s/op
Iteration  43: 14.962 s/op
Iteration  44: 14.901 s/op
Iteration  45: 15.006 s/op
Iteration  46: 14.912 s/op
Iteration  47: 14.888 s/op
Iteration  48: 14.966 s/op
Iteration  49: 14.935 s/op
Iteration  50: 14.934 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     14.949 ?(99.9%) 0.079 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 1 
    [14.375, 14.500) = 0 
    [14.500, 14.625) = 0 
    [14.625, 14.750) = 0 
    [14.750, 14.875) = 0 
    [14.875, 15.000) = 46 
    [15.000, 15.125) = 2 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.327 s/op
     p(50.0000) =     14.937 s/op
     p(90.0000) =     14.972 s/op
     p(95.0000) =     15.053 s/op
     p(99.0000) =     15.854 s/op
     p(99.9000) =     15.854 s/op
     p(99.9900) =     15.854 s/op
     p(99.9990) =     15.854 s/op
     p(99.9999) =     15.854 s/op
    p(100.0000) =     15.854 s/op


# Run complete. Total time: 00:12:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  14.949 ? 0.079   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9_11.0.4_1564539792699.json
{"wallclock_times": [748.9860144889999], "core_cycle_counts": [[200151516601], [533627950130], [724546707881], [982739071843]], "aperf_counts": [[197642915635], [533502755968], [724421606770], [982651946009]], "mperf_counts": [[197642892266], [533502741032], [724422373764], [982651945362]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 04:35:41: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-07-31 04:35:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 04:35:42: INFO] 193 executions left in scheduler queue
[2019-07-31 04:35:42: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-31 04:35:42: INFO] Estimated completion (next execution): 2019-07-31 04:50:42 (0:14:59 from now)
[2019-07-31 04:35:42: INFO] Reboot in preparation for next execution
[2019-07-31 04:39:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 04:40:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.838 s/op
Iteration   2: 2.309 s/op
Iteration   3: 2.235 s/op
Iteration   4: 2.112 s/op
Iteration   5: 2.353 s/op
Iteration   6: 2.178 s/op
Iteration   7: 2.119 s/op
Iteration   8: 2.099 s/op
Iteration   9: 2.131 s/op
Iteration  10: 2.114 s/op
Iteration  11: 2.111 s/op
Iteration  12: 2.118 s/op
Iteration  13: 2.106 s/op
Iteration  14: 2.094 s/op
Iteration  15: 2.098 s/op
Iteration  16: 2.129 s/op
Iteration  17: 2.107 s/op
Iteration  18: 2.131 s/op
Iteration  19: 2.110 s/op
Iteration  20: 2.121 s/op
Iteration  21: 2.137 s/op
Iteration  22: 2.103 s/op
Iteration  23: 2.136 s/op
Iteration  24: 2.090 s/op
Iteration  25: 2.108 s/op
Iteration  26: 2.122 s/op
Iteration  27: 2.123 s/op
Iteration  28: 2.137 s/op
Iteration  29: 2.111 s/op
Iteration  30: 2.126 s/op
Iteration  31: 2.128 s/op
Iteration  32: 2.116 s/op
Iteration  33: 2.112 s/op
Iteration  34: 2.105 s/op
Iteration  35: 2.121 s/op
Iteration  36: 2.126 s/op
Iteration  37: 2.113 s/op
Iteration  38: 2.141 s/op
Iteration  39: 2.109 s/op
Iteration  40: 2.133 s/op
Iteration  41: 2.133 s/op
Iteration  42: 2.121 s/op
Iteration  43: 2.122 s/op
Iteration  44: 2.113 s/op
Iteration  45: 2.114 s/op
Iteration  46: 2.129 s/op
Iteration  47: 2.121 s/op
Iteration  48: 2.107 s/op
Iteration  49: 2.121 s/op
Iteration  50: 2.126 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.144 ?(99.9%) 0.055 s/op

  Histogram, s/op:
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 4 
    [2.100, 2.150) = 41 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 1 
    [2.850, 2.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.090 s/op
     p(50.0000) =      2.121 s/op
     p(90.0000) =      2.174 s/op
     p(95.0000) =      2.328 s/op
     p(99.0000) =      2.838 s/op
     p(99.9000) =      2.838 s/op
     p(99.9900) =      2.838 s/op
     p(99.9990) =      2.838 s/op
     p(99.9999) =      2.838 s/op
    p(100.0000) =      2.838 s/op


# Run complete. Total time: 00:01:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.144 ? 0.055   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9-8u222-b10_1564540749573.json
{"wallclock_times": [108.44686800200003], "core_cycle_counts": [[126484282596], [82936825668], [95007712708], [67043572175]], "aperf_counts": [[126162211264], [82854066242], [94957541969], [66980035030]], "mperf_counts": [[126163467806], [82855015122], [94958085152], [66980985846]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 04:40:58: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-31 04:40:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 04:40:58: INFO] 192 executions left in scheduler queue
[2019-07-31 04:40:58: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-31 04:40:58: INFO] Estimated completion (next execution): 2019-07-31 04:45:17 (0:04:18 from now)
[2019-07-31 04:40:58: INFO] Reboot in preparation for next execution
[2019-07-31 04:45:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 04:47:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.673 s/op
Iteration   2: 3.378 s/op
Iteration   3: 3.309 s/op
Iteration   4: 3.028 s/op
Iteration   5: 3.063 s/op
Iteration   6: 3.062 s/op
Iteration   7: 3.082 s/op
Iteration   8: 3.064 s/op
Iteration   9: 2.931 s/op
Iteration  10: 2.930 s/op
Iteration  11: 2.900 s/op
Iteration  12: 2.896 s/op
Iteration  13: 2.941 s/op
Iteration  14: 2.963 s/op
Iteration  15: 2.958 s/op
Iteration  16: 2.941 s/op
Iteration  17: 2.954 s/op
Iteration  18: 2.936 s/op
Iteration  19: 2.902 s/op
Iteration  20: 2.997 s/op
Iteration  21: 2.927 s/op
Iteration  22: 2.967 s/op
Iteration  23: 2.965 s/op
Iteration  24: 2.948 s/op
Iteration  25: 2.954 s/op
Iteration  26: 2.930 s/op
Iteration  27: 2.946 s/op
Iteration  28: 2.990 s/op
Iteration  29: 2.986 s/op
Iteration  30: 2.948 s/op
Iteration  31: 2.956 s/op
Iteration  32: 2.961 s/op
Iteration  33: 2.911 s/op
Iteration  34: 2.918 s/op
Iteration  35: 2.955 s/op
Iteration  36: 2.929 s/op
Iteration  37: 2.973 s/op
Iteration  38: 3.014 s/op
Iteration  39: 2.940 s/op
Iteration  40: 2.983 s/op
Iteration  41: 3.004 s/op
Iteration  42: 2.947 s/op
Iteration  43: 2.970 s/op
Iteration  44: 2.993 s/op
Iteration  45: 2.964 s/op
Iteration  46: 3.013 s/op
Iteration  47: 2.940 s/op
Iteration  48: 3.014 s/op
Iteration  49: 2.988 s/op
Iteration  50: 2.998 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.997 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 2 
    [2.900, 2.950) = 17 
    [2.950, 3.000) = 19 
    [3.000, 3.050) = 5 
    [3.050, 3.100) = 4 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 1 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.896 s/op
     p(50.0000) =      2.962 s/op
     p(90.0000) =      3.063 s/op
     p(95.0000) =      3.340 s/op
     p(99.0000) =      3.673 s/op
     p(99.9000) =      3.673 s/op
     p(99.9900) =      3.673 s/op
     p(99.9990) =      3.673 s/op
     p(99.9999) =      3.673 s/op
    p(100.0000) =      3.673 s/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.997 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9-8u222-b10_1564541107586.json
{"wallclock_times": [150.966850539], "core_cycle_counts": [[162547595913], [105817356855], [104339155054], [136091939713]], "aperf_counts": [[162175731102], [105747431533], [104286034761], [136057791082]], "mperf_counts": [[162179325182], [105748323898], [104286305194], [136057783332]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 04:47:38: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-31 04:47:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 04:47:39: INFO] 191 executions left in scheduler queue
[2019-07-31 04:47:39: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 04:47:39: INFO] Estimated completion (next execution): 2019-07-31 04:52:40 (0:05:01 from now)
[2019-07-31 04:47:39: INFO] Reboot in preparation for next execution
[2019-07-31 04:56:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.897 s/op
Iteration   2: 5.757 s/op
Iteration   3: 5.599 s/op
Iteration   4: 5.603 s/op
Iteration   5: 5.569 s/op
Iteration   6: 5.589 s/op
Iteration   7: 5.597 s/op
Iteration   8: 5.589 s/op
Iteration   9: 5.591 s/op
Iteration  10: 5.581 s/op
Iteration  11: 5.588 s/op
Iteration  12: 5.578 s/op
Iteration  13: 5.593 s/op
Iteration  14: 5.591 s/op
Iteration  15: 5.587 s/op
Iteration  16: 5.587 s/op
Iteration  17: 5.580 s/op
Iteration  18: 5.569 s/op
Iteration  19: 5.593 s/op
Iteration  20: 5.592 s/op
Iteration  21: 5.575 s/op
Iteration  22: 5.588 s/op
Iteration  23: 5.578 s/op
Iteration  24: 5.579 s/op
Iteration  25: 5.588 s/op
Iteration  26: 5.581 s/op
Iteration  27: 5.588 s/op
Iteration  28: 5.598 s/op
Iteration  29: 5.596 s/op
Iteration  30: 5.593 s/op
Iteration  31: 5.562 s/op
Iteration  32: 5.577 s/op
Iteration  33: 5.589 s/op
Iteration  34: 5.603 s/op
Iteration  35: 5.583 s/op
Iteration  36: 5.573 s/op
Iteration  37: 5.593 s/op
Iteration  38: 5.581 s/op
Iteration  39: 5.600 s/op
Iteration  40: 5.581 s/op
Iteration  41: 5.593 s/op
Iteration  42: 5.585 s/op
Iteration  43: 5.571 s/op
Iteration  44: 5.576 s/op
Iteration  45: 5.580 s/op
Iteration  46: 5.583 s/op
Iteration  47: 5.566 s/op
Iteration  48: 5.584 s/op
Iteration  49: 5.591 s/op
Iteration  50: 5.583 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.595 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [5.500, 5.525) = 0 
    [5.525, 5.550) = 0 
    [5.550, 5.575) = 6 
    [5.575, 5.600) = 39 
    [5.600, 5.625) = 3 
    [5.625, 5.650) = 0 
    [5.650, 5.675) = 0 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 1 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 0 
    [5.850, 5.875) = 0 
    [5.875, 5.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.562 s/op
     p(50.0000) =      5.587 s/op
     p(90.0000) =      5.600 s/op
     p(95.0000) =      5.673 s/op
     p(99.0000) =      5.897 s/op
     p(99.9000) =      5.897 s/op
     p(99.9900) =      5.897 s/op
     p(99.9990) =      5.897 s/op
     p(99.9999) =      5.897 s/op
    p(100.0000) =      5.897 s/op


# Run complete. Total time: 00:04:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.595 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ce-19.1.1_1564541508519.json
{"wallclock_times": [280.63000588399996], "core_cycle_counts": [[207299876379], [361500753909], [196453563156], [142391671031]], "aperf_counts": [[206640223529], [361453748427], [196423406839], [142371099515]], "mperf_counts": [[206653386778], [361455208884], [196423849168], [142375424176]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 04:56:29: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 04:56:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 04:56:30: INFO] 190 executions left in scheduler queue
[2019-07-31 04:56:30: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 04:56:30: INFO] Estimated completion (next execution): 2019-07-31 05:03:40 (0:07:10 from now)
[2019-07-31 04:56:30: INFO] Reboot in preparation for next execution
[2019-07-31 05:03:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.890 s/op
Iteration   2: 3.674 s/op
Iteration   3: 3.495 s/op
Iteration   4: 3.526 s/op
Iteration   5: 3.556 s/op
Iteration   6: 3.488 s/op
Iteration   7: 3.494 s/op
Iteration   8: 3.487 s/op
Iteration   9: 3.501 s/op
Iteration  10: 3.487 s/op
Iteration  11: 3.513 s/op
Iteration  12: 3.506 s/op
Iteration  13: 3.493 s/op
Iteration  14: 3.484 s/op
Iteration  15: 3.531 s/op
Iteration  16: 3.492 s/op
Iteration  17: 3.515 s/op
Iteration  18: 3.500 s/op
Iteration  19: 3.556 s/op
Iteration  20: 3.548 s/op
Iteration  21: 3.520 s/op
Iteration  22: 3.485 s/op
Iteration  23: 3.530 s/op
Iteration  24: 3.528 s/op
Iteration  25: 3.522 s/op
Iteration  26: 3.486 s/op
Iteration  27: 3.534 s/op
Iteration  28: 3.549 s/op
Iteration  29: 3.503 s/op
Iteration  30: 3.494 s/op
Iteration  31: 3.511 s/op
Iteration  32: 3.525 s/op
Iteration  33: 3.524 s/op
Iteration  34: 3.497 s/op
Iteration  35: 3.514 s/op
Iteration  36: 3.536 s/op
Iteration  37: 3.516 s/op
Iteration  38: 3.483 s/op
Iteration  39: 3.531 s/op
Iteration  40: 3.490 s/op
Iteration  41: 3.483 s/op
Iteration  42: 3.480 s/op
Iteration  43: 3.530 s/op
Iteration  44: 3.511 s/op
Iteration  45: 3.512 s/op
Iteration  46: 3.488 s/op
Iteration  47: 3.501 s/op
Iteration  48: 3.504 s/op
Iteration  49: 3.471 s/op
Iteration  50: 3.529 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.520 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 18 
    [3.500, 3.550) = 28 
    [3.550, 3.600) = 2 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 1 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.471 s/op
     p(50.0000) =      3.511 s/op
     p(90.0000) =      3.549 s/op
     p(95.0000) =      3.609 s/op
     p(99.0000) =      3.890 s/op
     p(99.9000) =      3.890 s/op
     p(99.9900) =      3.890 s/op
     p(99.9990) =      3.890 s/op
     p(99.9999) =      3.890 s/op
    p(100.0000) =      3.890 s/op


# Run complete. Total time: 00:02:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.520 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ce-19.1.1_1564542038568.json
{"wallclock_times": [176.975992346], "core_cycle_counts": [[193044479014], [156697054506], [109809555124], [118550956823]], "aperf_counts": [[192671306206], [156649278165], [109784717826], [118529476750]], "mperf_counts": [[192691156810], [156651103752], [109792210944], [118538100932]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 05:03:35: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 05:03:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:03:36: INFO] 189 executions left in scheduler queue
[2019-07-31 05:03:36: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 05:03:36: INFO] Estimated completion (next execution): 2019-07-31 05:09:03 (0:05:27 from now)
[2019-07-31 05:03:36: INFO] Reboot in preparation for next execution
[2019-07-31 05:10:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.109 s/op
Iteration   2: 3.667 s/op
Iteration   3: 3.633 s/op
Iteration   4: 3.625 s/op
Iteration   5: 3.629 s/op
Iteration   6: 3.675 s/op
Iteration   7: 3.607 s/op
Iteration   8: 3.642 s/op
Iteration   9: 3.679 s/op
Iteration  10: 3.628 s/op
Iteration  11: 3.685 s/op
Iteration  12: 3.621 s/op
Iteration  13: 3.607 s/op
Iteration  14: 3.664 s/op
Iteration  15: 3.644 s/op
Iteration  16: 3.612 s/op
Iteration  17: 3.686 s/op
Iteration  18: 3.615 s/op
Iteration  19: 3.633 s/op
Iteration  20: 3.682 s/op
Iteration  21: 3.617 s/op
Iteration  22: 3.611 s/op
Iteration  23: 3.671 s/op
Iteration  24: 3.619 s/op
Iteration  25: 3.619 s/op
Iteration  26: 3.672 s/op
Iteration  27: 3.614 s/op
Iteration  28: 3.619 s/op
Iteration  29: 3.695 s/op
Iteration  30: 3.635 s/op
Iteration  31: 3.612 s/op
Iteration  32: 3.678 s/op
Iteration  33: 3.630 s/op
Iteration  34: 3.614 s/op
Iteration  35: 3.687 s/op
Iteration  36: 3.603 s/op
Iteration  37: 3.621 s/op
Iteration  38: 3.690 s/op
Iteration  39: 3.639 s/op
Iteration  40: 3.633 s/op
Iteration  41: 3.625 s/op
Iteration  42: 3.682 s/op
Iteration  43: 3.604 s/op
Iteration  44: 3.635 s/op
Iteration  45: 3.691 s/op
Iteration  46: 3.637 s/op
Iteration  47: 3.627 s/op
Iteration  48: 3.689 s/op
Iteration  49: 3.619 s/op
Iteration  50: 3.701 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.653 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [3.600, 3.650) = 32 
    [3.650, 3.700) = 16 
    [3.700, 3.750) = 1 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 1 
    [4.150, 4.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.603 s/op
     p(50.0000) =      3.633 s/op
     p(90.0000) =      3.690 s/op
     p(95.0000) =      3.698 s/op
     p(99.0000) =      4.109 s/op
     p(99.9000) =      4.109 s/op
     p(99.9900) =      4.109 s/op
     p(99.9990) =      4.109 s/op
     p(99.9999) =      4.109 s/op
    p(100.0000) =      4.109 s/op


# Run complete. Total time: 00:03:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.653 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ce-19.1.1_1564542466512.json
{"wallclock_times": [183.65953814500003], "core_cycle_counts": [[156109414060], [142383235292], [234646241096], [129600148985]], "aperf_counts": [[155609286746], [142319538786], [234609046501], [129562612711]], "mperf_counts": [[155617557668], [142340010184], [234610388560], [129574517300]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 05:10:50: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 05:10:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:10:51: INFO] 188 executions left in scheduler queue
[2019-07-31 05:10:51: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 05:10:51: INFO] Estimated completion (next execution): 2019-07-31 05:16:25 (0:05:33 from now)
[2019-07-31 05:10:51: INFO] Reboot in preparation for next execution
[2019-07-31 05:22:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.334 s/op
Iteration   2: 10.291 s/op
Iteration   3: 10.149 s/op
Iteration   4: 10.102 s/op
Iteration   5: 10.112 s/op
Iteration   6: 10.132 s/op
Iteration   7: 10.133 s/op
Iteration   8: 10.117 s/op
Iteration   9: 10.106 s/op
Iteration  10: 10.157 s/op
Iteration  11: 10.152 s/op
Iteration  12: 10.147 s/op
Iteration  13: 10.142 s/op
Iteration  14: 10.137 s/op
Iteration  15: 10.130 s/op
Iteration  16: 10.115 s/op
Iteration  17: 10.097 s/op
Iteration  18: 10.072 s/op
Iteration  19: 10.122 s/op
Iteration  20: 10.089 s/op
Iteration  21: 10.113 s/op
Iteration  22: 10.098 s/op
Iteration  23: 10.123 s/op
Iteration  24: 10.115 s/op
Iteration  25: 10.075 s/op
Iteration  26: 10.110 s/op
Iteration  27: 10.137 s/op
Iteration  28: 10.142 s/op
Iteration  29: 10.148 s/op
Iteration  30: 10.129 s/op
Iteration  31: 10.102 s/op
Iteration  32: 10.111 s/op
Iteration  33: 10.098 s/op
Iteration  34: 10.131 s/op
Iteration  35: 10.101 s/op
Iteration  36: 10.102 s/op
Iteration  37: 10.113 s/op
Iteration  38: 10.099 s/op
Iteration  39: 10.116 s/op
Iteration  40: 10.105 s/op
Iteration  41: 10.106 s/op
Iteration  42: 10.101 s/op
Iteration  43: 10.120 s/op
Iteration  44: 10.107 s/op
Iteration  45: 10.130 s/op
Iteration  46: 10.109 s/op
Iteration  47: 10.115 s/op
Iteration  48: 10.122 s/op
Iteration  49: 10.125 s/op
Iteration  50: 10.065 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.124 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [10.000, 10.025) = 0 
    [10.025, 10.050) = 0 
    [10.050, 10.075) = 3 
    [10.075, 10.100) = 5 
    [10.100, 10.125) = 25 
    [10.125, 10.150) = 13 
    [10.150, 10.175) = 2 
    [10.175, 10.200) = 0 
    [10.200, 10.225) = 0 
    [10.225, 10.250) = 0 
    [10.250, 10.275) = 0 
    [10.275, 10.300) = 1 
    [10.300, 10.325) = 0 
    [10.325, 10.350) = 1 
    [10.350, 10.375) = 0 
    [10.375, 10.400) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.065 s/op
     p(50.0000) =     10.115 s/op
     p(90.0000) =     10.149 s/op
     p(95.0000) =     10.217 s/op
     p(99.0000) =     10.334 s/op
     p(99.9000) =     10.334 s/op
     p(99.9900) =     10.334 s/op
     p(99.9990) =     10.334 s/op
     p(99.9999) =     10.334 s/op
    p(100.0000) =     10.334 s/op


# Run complete. Total time: 00:08:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.124 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ce-19.1.1_1564542861376.json
{"wallclock_times": [507.12088624499995], "core_cycle_counts": [[529570176065], [352705525119], [347311337827], [403565684095]], "aperf_counts": [[528501408794], [352618214297], [347255112549], [403536101943]], "mperf_counts": [[528512321502], [352622893634], [347256417192], [403539682312]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 05:22:48: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-31 05:22:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:22:49: INFO] 187 executions left in scheduler queue
[2019-07-31 05:22:49: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-31 05:22:49: INFO] Estimated completion (next execution): 2019-07-31 05:33:46 (0:10:57 from now)
[2019-07-31 05:22:49: INFO] Reboot in preparation for next execution
[2019-07-31 05:27:01: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 05:27:01: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 05:27:01: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 05:27:01: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 05:27:01: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 05:27:02: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 05:28:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.938 s/op
Iteration   2: 2.334 s/op
Iteration   3: 2.223 s/op
Iteration   4: 2.258 s/op
Iteration   5: 2.291 s/op
Iteration   6: 2.060 s/op
Iteration   7: 2.027 s/op
Iteration   8: 2.011 s/op
Iteration   9: 1.998 s/op
Iteration  10: 2.014 s/op
Iteration  11: 2.020 s/op
Iteration  12: 2.020 s/op
Iteration  13: 1.969 s/op
Iteration  14: 1.939 s/op
Iteration  15: 1.960 s/op
Iteration  16: 1.930 s/op
Iteration  17: 1.972 s/op
Iteration  18: 1.967 s/op
Iteration  19: 1.962 s/op
Iteration  20: 1.978 s/op
Iteration  21: 1.980 s/op
Iteration  22: 1.974 s/op
Iteration  23: 1.962 s/op
Iteration  24: 1.991 s/op
Iteration  25: 1.978 s/op
Iteration  26: 1.968 s/op
Iteration  27: 1.971 s/op
Iteration  28: 1.970 s/op
Iteration  29: 1.988 s/op
Iteration  30: 1.978 s/op
Iteration  31: 1.955 s/op
Iteration  32: 1.974 s/op
Iteration  33: 1.994 s/op
Iteration  34: 1.973 s/op
Iteration  35: 1.979 s/op
Iteration  36: 1.991 s/op
Iteration  37: 1.995 s/op
Iteration  38: 1.941 s/op
Iteration  39: 1.997 s/op
Iteration  40: 1.980 s/op
Iteration  41: 2.001 s/op
Iteration  42: 1.941 s/op
Iteration  43: 1.987 s/op
Iteration  44: 1.946 s/op
Iteration  45: 1.964 s/op
Iteration  46: 1.967 s/op
Iteration  47: 1.977 s/op
Iteration  48: 1.963 s/op
Iteration  49: 1.966 s/op
Iteration  50: 1.980 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.022 ?(99.9%) 0.078 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 0 
    [1.875, 2.000) = 38 
    [2.000, 2.125) = 7 
    [2.125, 2.250) = 1 
    [2.250, 2.375) = 3 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.930 s/op
     p(50.0000) =      1.978 s/op
     p(90.0000) =      2.206 s/op
     p(95.0000) =      2.310 s/op
     p(99.0000) =      2.938 s/op
     p(99.9000) =      2.938 s/op
     p(99.9900) =      2.938 s/op
     p(99.9990) =      2.938 s/op
     p(99.9999) =      2.938 s/op
    p(100.0000) =      2.938 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.022 ? 0.078   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_11.0.4_1564543621799.json
{"wallclock_times": [102.797781077], "core_cycle_counts": [[151476869543], [74978301265], [69791296372], [63534306486]], "aperf_counts": [[151198120673], [74897774036], [69713159243], [63459008637]], "mperf_counts": [[151199893574], [74900946378], [69713177344], [63461400228]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 05:28:44: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-31 05:28:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:28:45: INFO] 186 executions left in scheduler queue
[2019-07-31 05:28:45: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-31 05:28:45: INFO] Estimated completion (next execution): 2019-07-31 05:32:58 (0:04:13 from now)
[2019-07-31 05:28:45: INFO] Reboot in preparation for next execution
[2019-07-31 05:32:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 05:32:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 05:32:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 05:32:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 05:32:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 05:32:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 05:35:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.604 s/op
Iteration   2: 3.650 s/op
Iteration   3: 3.420 s/op
Iteration   4: 3.355 s/op
Iteration   5: 3.059 s/op
Iteration   6: 2.953 s/op
Iteration   7: 3.001 s/op
Iteration   8: 2.994 s/op
Iteration   9: 2.985 s/op
Iteration  10: 2.971 s/op
Iteration  11: 2.976 s/op
Iteration  12: 2.977 s/op
Iteration  13: 2.986 s/op
Iteration  14: 2.983 s/op
Iteration  15: 2.984 s/op
Iteration  16: 2.980 s/op
Iteration  17: 2.994 s/op
Iteration  18: 2.965 s/op
Iteration  19: 2.993 s/op
Iteration  20: 2.978 s/op
Iteration  21: 2.994 s/op
Iteration  22: 2.978 s/op
Iteration  23: 2.963 s/op
Iteration  24: 2.976 s/op
Iteration  25: 2.972 s/op
Iteration  26: 2.978 s/op
Iteration  27: 2.968 s/op
Iteration  28: 2.985 s/op
Iteration  29: 2.981 s/op
Iteration  30: 2.986 s/op
Iteration  31: 2.991 s/op
Iteration  32: 3.002 s/op
Iteration  33: 2.971 s/op
Iteration  34: 2.984 s/op
Iteration  35: 2.993 s/op
Iteration  36: 2.973 s/op
Iteration  37: 2.984 s/op
Iteration  38: 2.985 s/op
Iteration  39: 2.981 s/op
Iteration  40: 2.960 s/op
Iteration  41: 2.987 s/op
Iteration  42: 2.993 s/op
Iteration  43: 2.979 s/op
Iteration  44: 2.966 s/op
Iteration  45: 2.980 s/op
Iteration  46: 2.973 s/op
Iteration  47: 2.971 s/op
Iteration  48: 3.000 s/op
Iteration  49: 2.978 s/op
Iteration  50: 2.974 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      3.024 ?(99.9%) 0.074 s/op

  Histogram, s/op:
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 42 
    [3.000, 3.050) = 3 
    [3.050, 3.100) = 1 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 1 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.953 s/op
     p(50.0000) =      2.982 s/op
     p(90.0000) =      3.054 s/op
     p(95.0000) =      3.503 s/op
     p(99.0000) =      3.650 s/op
     p(99.9000) =      3.650 s/op
     p(99.9900) =      3.650 s/op
     p(99.9990) =      3.650 s/op
     p(99.9999) =      3.650 s/op
    p(100.0000) =      3.650 s/op


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.024 ? 0.074   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_11.0.4_1564543975956.json
{"wallclock_times": [152.709018582], "core_cycle_counts": [[166785658532], [166824203423], [151029529479], [47677851560]], "aperf_counts": [[166388143526], [166740829426], [150952456616], [47622270390]], "mperf_counts": [[166391271726], [166740823760], [150953052588], [47622353342]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 05:35:28: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-31 05:35:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:35:29: INFO] 185 executions left in scheduler queue
[2019-07-31 05:35:29: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-31 05:35:29: INFO] Estimated completion (next execution): 2019-07-31 05:40:32 (0:05:03 from now)
[2019-07-31 05:35:29: INFO] Reboot in preparation for next execution
[2019-07-31 05:39:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 05:39:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 05:39:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 05:39:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 05:39:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 05:39:39: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 05:41:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.786 s/op
Iteration   2: 2.336 s/op
Iteration   3: 2.291 s/op
Iteration   4: 2.302 s/op
Iteration   5: 2.123 s/op
Iteration   6: 1.959 s/op
Iteration   7: 1.917 s/op
Iteration   8: 1.935 s/op
Iteration   9: 1.940 s/op
Iteration  10: 1.914 s/op
Iteration  11: 1.917 s/op
Iteration  12: 1.974 s/op
Iteration  13: 1.954 s/op
Iteration  14: 1.961 s/op
Iteration  15: 1.930 s/op
Iteration  16: 1.967 s/op
Iteration  17: 1.910 s/op
Iteration  18: 1.931 s/op
Iteration  19: 1.922 s/op
Iteration  20: 1.916 s/op
Iteration  21: 1.919 s/op
Iteration  22: 1.925 s/op
Iteration  23: 1.933 s/op
Iteration  24: 1.927 s/op
Iteration  25: 1.927 s/op
Iteration  26: 1.906 s/op
Iteration  27: 1.920 s/op
Iteration  28: 1.920 s/op
Iteration  29: 1.944 s/op
Iteration  30: 1.908 s/op
Iteration  31: 1.886 s/op
Iteration  32: 1.916 s/op
Iteration  33: 1.927 s/op
Iteration  34: 1.936 s/op
Iteration  35: 1.898 s/op
Iteration  36: 1.931 s/op
Iteration  37: 1.934 s/op
Iteration  38: 1.893 s/op
Iteration  39: 1.912 s/op
Iteration  40: 1.933 s/op
Iteration  41: 1.931 s/op
Iteration  42: 1.935 s/op
Iteration  43: 1.932 s/op
Iteration  44: 1.916 s/op
Iteration  45: 1.929 s/op
Iteration  46: 1.916 s/op
Iteration  47: 1.905 s/op
Iteration  48: 1.902 s/op
Iteration  49: 1.929 s/op
Iteration  50: 1.916 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.970 ?(99.9%) 0.075 s/op

  Histogram, s/op:
    [1.800, 1.900) = 3 
    [1.900, 2.000) = 42 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 2 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.886 s/op
     p(50.0000) =      1.928 s/op
     p(90.0000) =      2.108 s/op
     p(95.0000) =      2.317 s/op
     p(99.0000) =      2.786 s/op
     p(99.9000) =      2.786 s/op
     p(99.9900) =      2.786 s/op
     p(99.9990) =      2.786 s/op
     p(99.9999) =      2.786 s/op
    p(100.0000) =      2.786 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.970 ? 0.075   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9_12.0.1_1564544379702.json
{"wallclock_times": [100.125890172], "core_cycle_counts": [[94130823146], [93478083143], [69167741019], [91686547220]], "aperf_counts": [[93782654914], [93418890122], [69096524026], [91618743739]], "mperf_counts": [[93788059450], [93419640042], [69096521976], [91618942508]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 05:41:19: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-31 05:41:20: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:41:20: INFO] 184 executions left in scheduler queue
[2019-07-31 05:41:20: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-31 05:41:20: INFO] Estimated completion (next execution): 2019-07-31 05:45:31 (0:04:10 from now)
[2019-07-31 05:41:20: INFO] Reboot in preparation for next execution
[2019-07-31 05:45:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 05:45:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 05:45:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 05:45:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 05:45:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 05:45:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 05:47:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.139 s/op
Iteration   2: 2.825 s/op
Iteration   3: 2.620 s/op
Iteration   4: 2.665 s/op
Iteration   5: 2.694 s/op
Iteration   6: 2.487 s/op
Iteration   7: 2.526 s/op
Iteration   8: 2.580 s/op
Iteration   9: 2.620 s/op
Iteration  10: 2.625 s/op
Iteration  11: 2.499 s/op
Iteration  12: 2.522 s/op
Iteration  13: 2.490 s/op
Iteration  14: 2.473 s/op
Iteration  15: 2.472 s/op
Iteration  16: 2.511 s/op
Iteration  17: 2.469 s/op
Iteration  18: 2.468 s/op
Iteration  19: 2.471 s/op
Iteration  20: 2.509 s/op
Iteration  21: 2.483 s/op
Iteration  22: 2.468 s/op
Iteration  23: 2.490 s/op
Iteration  24: 2.471 s/op
Iteration  25: 2.511 s/op
Iteration  26: 2.505 s/op
Iteration  27: 2.455 s/op
Iteration  28: 2.454 s/op
Iteration  29: 2.504 s/op
Iteration  30: 2.485 s/op
Iteration  31: 2.478 s/op
Iteration  32: 2.482 s/op
Iteration  33: 2.478 s/op
Iteration  34: 2.500 s/op
Iteration  35: 2.477 s/op
Iteration  36: 2.487 s/op
Iteration  37: 2.467 s/op
Iteration  38: 2.470 s/op
Iteration  39: 2.467 s/op
Iteration  40: 2.486 s/op
Iteration  41: 2.505 s/op
Iteration  42: 2.506 s/op
Iteration  43: 2.462 s/op
Iteration  44: 2.501 s/op
Iteration  45: 2.506 s/op
Iteration  46: 2.485 s/op
Iteration  47: 2.481 s/op
Iteration  48: 2.489 s/op
Iteration  49: 2.491 s/op
Iteration  50: 2.479 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.524 ?(99.9%) 0.056 s/op

  Histogram, s/op:
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 31 
    [2.500, 2.550) = 11 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 3 
    [2.650, 2.700) = 2 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 1 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.454 s/op
     p(50.0000) =      2.488 s/op
     p(90.0000) =      2.625 s/op
     p(95.0000) =      2.753 s/op
     p(99.0000) =      3.139 s/op
     p(99.9000) =      3.139 s/op
     p(99.9900) =      3.139 s/op
     p(99.9990) =      3.139 s/op
     p(99.9999) =      3.139 s/op
    p(100.0000) =      3.139 s/op


# Run complete. Total time: 00:02:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.524 ? 0.056   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9_12.0.1_1564544732651.json
{"wallclock_times": [127.711137168], "core_cycle_counts": [[157602739322], [134398858258], [84330940582], [60234771596]], "aperf_counts": [[157297840507], [134340257207], [84247587809], [60182220255]], "mperf_counts": [[157307836030], [134342740592], [84247580334], [60182218424]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 05:47:40: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-31 05:47:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:47:41: INFO] 183 executions left in scheduler queue
[2019-07-31 05:47:41: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-31 05:47:41: INFO] Estimated completion (next execution): 2019-07-31 05:52:19 (0:04:38 from now)
[2019-07-31 05:47:41: INFO] Reboot in preparation for next execution
[2019-07-31 05:51:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 05:51:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 05:51:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 05:51:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 05:51:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 05:51:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 05:53:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.757 s/op
Iteration   2: 2.128 s/op
Iteration   3: 2.262 s/op
Iteration   4: 2.041 s/op
Iteration   5: 2.097 s/op
Iteration   6: 2.029 s/op
Iteration   7: 2.007 s/op
Iteration   8: 2.031 s/op
Iteration   9: 1.941 s/op
Iteration  10: 1.905 s/op
Iteration  11: 1.925 s/op
Iteration  12: 1.920 s/op
Iteration  13: 1.931 s/op
Iteration  14: 1.945 s/op
Iteration  15: 1.947 s/op
Iteration  16: 1.933 s/op
Iteration  17: 1.960 s/op
Iteration  18: 1.949 s/op
Iteration  19: 1.920 s/op
Iteration  20: 1.960 s/op
Iteration  21: 1.936 s/op
Iteration  22: 1.949 s/op
Iteration  23: 1.920 s/op
Iteration  24: 1.900 s/op
Iteration  25: 1.957 s/op
Iteration  26: 1.932 s/op
Iteration  27: 1.956 s/op
Iteration  28: 1.948 s/op
Iteration  29: 1.923 s/op
Iteration  30: 1.929 s/op
Iteration  31: 1.913 s/op
Iteration  32: 1.936 s/op
Iteration  33: 1.942 s/op
Iteration  34: 1.944 s/op
Iteration  35: 1.953 s/op
Iteration  36: 1.917 s/op
Iteration  37: 1.928 s/op
Iteration  38: 1.937 s/op
Iteration  39: 1.958 s/op
Iteration  40: 1.940 s/op
Iteration  41: 1.946 s/op
Iteration  42: 1.953 s/op
Iteration  43: 1.955 s/op
Iteration  44: 1.948 s/op
Iteration  45: 1.939 s/op
Iteration  46: 1.905 s/op
Iteration  47: 1.942 s/op
Iteration  48: 1.930 s/op
Iteration  49: 1.933 s/op
Iteration  50: 1.946 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.974 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [1.800, 1.900) = 1 
    [1.900, 2.000) = 41 
    [2.000, 2.100) = 5 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.900 s/op
     p(50.0000) =      1.943 s/op
     p(90.0000) =      2.040 s/op
     p(95.0000) =      2.188 s/op
     p(99.0000) =      2.757 s/op
     p(99.9000) =      2.757 s/op
     p(99.9900) =      2.757 s/op
     p(99.9990) =      2.757 s/op
     p(99.9999) =      2.757 s/op
    p(100.0000) =      2.757 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.974 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_openj9_11.0.4_1564545111784.json
{"wallclock_times": [100.36580743900001], "core_cycle_counts": [[118930675179], [79855095045], [66337828323], [88030586334]], "aperf_counts": [[118622250273], [79779464860], [66264117591], [87957484461]], "mperf_counts": [[118622596160], [79782344616], [66264394166], [87957482908]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 05:53:32: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-31 05:53:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 05:53:33: INFO] 182 executions left in scheduler queue
[2019-07-31 05:53:33: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-31 05:53:33: INFO] Estimated completion (next execution): 2019-07-31 05:57:43 (0:04:10 from now)
[2019-07-31 05:53:33: INFO] Reboot in preparation for next execution
[2019-07-31 05:57:56: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 05:57:56: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 05:57:56: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 05:57:56: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 05:57:56: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 05:57:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 06:00:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.294 s/op
Iteration   2: 3.159 s/op
Iteration   3: 2.744 s/op
Iteration   4: 2.679 s/op
Iteration   5: 2.633 s/op
Iteration   6: 2.672 s/op
Iteration   7: 2.615 s/op
Iteration   8: 2.656 s/op
Iteration   9: 2.576 s/op
Iteration  10: 2.539 s/op
Iteration  11: 2.545 s/op
Iteration  12: 2.588 s/op
Iteration  13: 2.588 s/op
Iteration  14: 2.589 s/op
Iteration  15: 2.675 s/op
Iteration  16: 2.579 s/op
Iteration  17: 2.622 s/op
Iteration  18: 2.588 s/op
Iteration  19: 2.605 s/op
Iteration  20: 2.596 s/op
Iteration  21: 2.672 s/op
Iteration  22: 2.675 s/op
Iteration  23: 2.688 s/op
Iteration  24: 2.614 s/op
Iteration  25: 2.664 s/op
Iteration  26: 2.680 s/op
Iteration  27: 2.638 s/op
Iteration  28: 2.619 s/op
Iteration  29: 2.578 s/op
Iteration  30: 2.646 s/op
Iteration  31: 2.676 s/op
Iteration  32: 2.622 s/op
Iteration  33: 2.632 s/op
Iteration  34: 2.673 s/op
Iteration  35: 2.580 s/op
Iteration  36: 2.618 s/op
Iteration  37: 2.615 s/op
Iteration  38: 2.604 s/op
Iteration  39: 2.598 s/op
Iteration  40: 2.673 s/op
Iteration  41: 2.623 s/op
Iteration  42: 2.674 s/op
Iteration  43: 2.600 s/op
Iteration  44: 2.645 s/op
Iteration  45: 2.601 s/op
Iteration  46: 2.607 s/op
Iteration  47: 2.678 s/op
Iteration  48: 2.679 s/op
Iteration  49: 2.562 s/op
Iteration  50: 2.578 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.651 ?(99.9%) 0.063 s/op

  Histogram, s/op:
    [2.500, 2.550) = 2 
    [2.550, 2.600) = 12 
    [2.600, 2.650) = 18 
    [2.650, 2.700) = 15 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 1 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.539 s/op
     p(50.0000) =      2.622 s/op
     p(90.0000) =      2.680 s/op
     p(95.0000) =      2.931 s/op
     p(99.0000) =      3.294 s/op
     p(99.9000) =      3.294 s/op
     p(99.9900) =      3.294 s/op
     p(99.9990) =      3.294 s/op
     p(99.9999) =      3.294 s/op
    p(100.0000) =      3.294 s/op


# Run complete. Total time: 00:02:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.651 ? 0.063   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_openj9_11.0.4_1564545476873.json
{"wallclock_times": [134.04169339600003], "core_cycle_counts": [[120042257983], [109340427600], [102222078327], [130674334763]], "aperf_counts": [[119672074187], [109272535628], [102169025808], [130619338575]], "mperf_counts": [[119673935166], [109272527438], [102169020716], [130619339464]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 06:00:10: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-31 06:00:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 06:00:11: INFO] 181 executions left in scheduler queue
[2019-07-31 06:00:11: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:00:11: INFO] Estimated completion (next execution): 2019-07-31 06:04:56 (0:04:44 from now)
[2019-07-31 06:00:11: INFO] Reboot in preparation for next execution
[2019-07-31 06:04:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 06:04:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 06:04:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 06:04:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 06:04:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 06:13:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.650 s/op
Iteration   2: 11.329 s/op
Iteration   3: 11.019 s/op
Iteration   4: 10.770 s/op
Iteration   5: 10.799 s/op
Iteration   6: 10.781 s/op
Iteration   7: 10.820 s/op
Iteration   8: 10.771 s/op
Iteration   9: 10.769 s/op
Iteration  10: 10.798 s/op
Iteration  11: 10.771 s/op
Iteration  12: 10.775 s/op
Iteration  13: 10.766 s/op
Iteration  14: 10.784 s/op
Iteration  15: 10.804 s/op
Iteration  16: 10.798 s/op
Iteration  17: 10.814 s/op
Iteration  18: 10.784 s/op
Iteration  19: 10.778 s/op
Iteration  20: 10.754 s/op
Iteration  21: 10.769 s/op
Iteration  22: 10.774 s/op
Iteration  23: 10.777 s/op
Iteration  24: 10.787 s/op
Iteration  25: 10.785 s/op
Iteration  26: 10.806 s/op
Iteration  27: 10.825 s/op
Iteration  28: 10.789 s/op
Iteration  29: 10.787 s/op
Iteration  30: 10.793 s/op
Iteration  31: 10.799 s/op
Iteration  32: 10.808 s/op
Iteration  33: 10.773 s/op
Iteration  34: 10.779 s/op
Iteration  35: 10.798 s/op
Iteration  36: 10.793 s/op
Iteration  37: 10.805 s/op
Iteration  38: 10.792 s/op
Iteration  39: 10.821 s/op
Iteration  40: 10.797 s/op
Iteration  41: 10.777 s/op
Iteration  42: 10.771 s/op
Iteration  43: 10.778 s/op
Iteration  44: 10.779 s/op
Iteration  45: 10.772 s/op
Iteration  46: 10.795 s/op
Iteration  47: 10.794 s/op
Iteration  48: 10.811 s/op
Iteration  49: 10.821 s/op
Iteration  50: 10.785 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.801 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [10.600, 10.650) = 0 
    [10.650, 10.700) = 1 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 37 
    [10.800, 10.850) = 10 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 1 
    [11.050, 11.100) = 0 
    [11.100, 11.150) = 0 
    [11.150, 11.200) = 0 
    [11.200, 11.250) = 0 
    [11.250, 11.300) = 0 
    [11.300, 11.350) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.650 s/op
     p(50.0000) =     10.787 s/op
     p(90.0000) =     10.821 s/op
     p(95.0000) =     10.912 s/op
     p(99.0000) =     11.329 s/op
     p(99.9000) =     11.329 s/op
     p(99.9900) =     11.329 s/op
     p(99.9990) =     11.329 s/op
     p(99.9999) =     11.329 s/op
    p(100.0000) =     11.329 s/op


# Run complete. Total time: 00:09:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.801 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot_12.0.2_1564545860576.json
{"wallclock_times": [541.043399825], "core_cycle_counts": [[125912748778], [431495216508], [853464019137], [338375229505]], "aperf_counts": [[124277110139], [431407118022], [853438839465], [338341328101]], "mperf_counts": [[124742684462], [431439013564], [853506569956], [338425273270]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 06:13:21: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:13:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 06:13:22: INFO] 180 executions left in scheduler queue
[2019-07-31 06:13:22: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:13:22: INFO] Estimated completion (next execution): 2019-07-31 06:24:53 (0:11:31 from now)
[2019-07-31 06:13:22: INFO] Reboot in preparation for next execution
[2019-07-31 06:17:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 06:17:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 06:17:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 06:17:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 06:17:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 06:23:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.567 s/op
Iteration   2: 7.076 s/op
Iteration   3: 6.805 s/op
Iteration   4: 7.645 s/op
Iteration   5: 7.358 s/op
Iteration   6: 7.334 s/op
Iteration   7: 7.362 s/op
Iteration   8: 7.374 s/op
Iteration   9: 7.377 s/op
Iteration  10: 7.353 s/op
Iteration  11: 7.398 s/op
Iteration  12: 7.352 s/op
Iteration  13: 7.385 s/op
Iteration  14: 7.349 s/op
Iteration  15: 7.394 s/op
Iteration  16: 7.346 s/op
Iteration  17: 7.344 s/op
Iteration  18: 7.355 s/op
Iteration  19: 7.352 s/op
Iteration  20: 7.359 s/op
Iteration  21: 7.341 s/op
Iteration  22: 7.391 s/op
Iteration  23: 7.361 s/op
Iteration  24: 7.373 s/op
Iteration  25: 7.350 s/op
Iteration  26: 7.364 s/op
Iteration  27: 7.353 s/op
Iteration  28: 7.346 s/op
Iteration  29: 7.374 s/op
Iteration  30: 7.391 s/op
Iteration  31: 7.356 s/op
Iteration  32: 7.375 s/op
Iteration  33: 7.359 s/op
Iteration  34: 7.352 s/op
Iteration  35: 7.388 s/op
Iteration  36: 7.343 s/op
Iteration  37: 7.363 s/op
Iteration  38: 7.381 s/op
Iteration  39: 7.373 s/op
Iteration  40: 7.367 s/op
Iteration  41: 7.386 s/op
Iteration  42: 7.354 s/op
Iteration  43: 7.389 s/op
Iteration  44: 7.344 s/op
Iteration  45: 7.358 s/op
Iteration  46: 7.407 s/op
Iteration  47: 7.354 s/op
Iteration  48: 7.383 s/op
Iteration  49: 7.369 s/op
Iteration  50: 7.361 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.358 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [6.800, 6.850) = 1 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 1 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 9 
    [7.350, 7.400) = 36 
    [7.400, 7.450) = 1 
    [7.450, 7.500) = 0 
    [7.500, 7.550) = 0 
    [7.550, 7.600) = 1 
    [7.600, 7.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.805 s/op
     p(50.0000) =      7.361 s/op
     p(90.0000) =      7.393 s/op
     p(95.0000) =      7.479 s/op
     p(99.0000) =      7.645 s/op
     p(99.9000) =      7.645 s/op
     p(99.9900) =      7.645 s/op
     p(99.9990) =      7.645 s/op
     p(99.9999) =      7.645 s/op
    p(100.0000) =      7.645 s/op


# Run complete. Total time: 00:06:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.358 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot_12.0.2_1564546653201.json
{"wallclock_times": [368.990764605], "core_cycle_counts": [[256567764963], [244554303149], [382200894121], [175661014436]], "aperf_counts": [[255659339551], [244454829647], [382135324878], [175617623807]], "mperf_counts": [[290767003036], [276494495514], [434252223608], [199083432898]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 06:23:42: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:23:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 06:23:43: INFO] 179 executions left in scheduler queue
[2019-07-31 06:23:43: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:23:43: INFO] Estimated completion (next execution): 2019-07-31 06:32:22 (0:08:39 from now)
[2019-07-31 06:23:43: INFO] Reboot in preparation for next execution
[2019-07-31 06:27:53: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 06:27:53: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 06:27:53: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 06:27:53: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 06:27:53: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 06:33:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.442 s/op
Iteration   2: 7.160 s/op
Iteration   3: 6.930 s/op
Iteration   4: 6.868 s/op
Iteration   5: 7.104 s/op
Iteration   6: 7.086 s/op
Iteration   7: 6.886 s/op
Iteration   8: 7.067 s/op
Iteration   9: 6.899 s/op
Iteration  10: 7.043 s/op
Iteration  11: 7.016 s/op
Iteration  12: 6.902 s/op
Iteration  13: 7.023 s/op
Iteration  14: 6.885 s/op
Iteration  15: 7.031 s/op
Iteration  16: 7.034 s/op
Iteration  17: 6.896 s/op
Iteration  18: 7.020 s/op
Iteration  19: 6.888 s/op
Iteration  20: 7.031 s/op
Iteration  21: 7.041 s/op
Iteration  22: 6.888 s/op
Iteration  23: 7.048 s/op
Iteration  24: 7.026 s/op
Iteration  25: 7.006 s/op
Iteration  26: 6.885 s/op
Iteration  27: 6.989 s/op
Iteration  28: 6.964 s/op
Iteration  29: 7.072 s/op
Iteration  30: 6.962 s/op
Iteration  31: 6.964 s/op
Iteration  32: 6.970 s/op
Iteration  33: 6.958 s/op
Iteration  34: 6.849 s/op
Iteration  35: 7.012 s/op
Iteration  36: 7.027 s/op
Iteration  37: 6.900 s/op
Iteration  38: 7.055 s/op
Iteration  39: 6.902 s/op
Iteration  40: 7.036 s/op
Iteration  41: 7.030 s/op
Iteration  42: 6.871 s/op
Iteration  43: 7.010 s/op
Iteration  44: 6.869 s/op
Iteration  45: 7.025 s/op
Iteration  46: 7.009 s/op
Iteration  47: 6.886 s/op
Iteration  48: 7.004 s/op
Iteration  49: 7.036 s/op
Iteration  50: 6.873 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.988 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [6.800, 6.850) = 1 
    [6.850, 6.900) = 13 
    [6.900, 6.950) = 3 
    [6.950, 7.000) = 6 
    [7.000, 7.050) = 20 
    [7.050, 7.100) = 4 
    [7.100, 7.150) = 1 
    [7.150, 7.200) = 1 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 0 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.849 s/op
     p(50.0000) =      7.008 s/op
     p(90.0000) =      7.072 s/op
     p(95.0000) =      7.129 s/op
     p(99.0000) =      7.442 s/op
     p(99.9000) =      7.442 s/op
     p(99.9900) =      7.442 s/op
     p(99.9990) =      7.442 s/op
     p(99.9999) =      7.442 s/op
    p(100.0000) =      7.442 s/op


# Run complete. Total time: 00:05:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.988 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot_12.0.2_1564547273628.json
{"wallclock_times": [350.512020189], "core_cycle_counts": [[240642642173], [184368266628], [417557435848], [402665674501]], "aperf_counts": [[239694933346], [184294816140], [417508779485], [402630947799]], "mperf_counts": [[240150578342], [184679929178], [417688239112], [402983546468]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 06:33:44: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:33:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 06:33:45: INFO] 178 executions left in scheduler queue
[2019-07-31 06:33:45: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:33:45: INFO] Estimated completion (next execution): 2019-07-31 06:42:05 (0:08:20 from now)
[2019-07-31 06:33:45: INFO] Reboot in preparation for next execution
[2019-07-31 06:37:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 06:37:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 06:37:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 06:37:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 06:37:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 06:52:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.030 s/op
Iteration   2: 17.219 s/op
Iteration   3: 17.053 s/op
Iteration   4: 17.610 s/op
Iteration   5: 16.863 s/op
Iteration   6: 16.956 s/op
Iteration   7: 16.832 s/op
Iteration   8: 16.895 s/op
Iteration   9: 16.925 s/op
Iteration  10: 16.964 s/op
Iteration  11: 16.876 s/op
Iteration  12: 16.863 s/op
Iteration  13: 16.964 s/op
Iteration  14: 17.364 s/op
Iteration  15: 16.941 s/op
Iteration  16: 16.957 s/op
Iteration  17: 16.872 s/op
Iteration  18: 16.883 s/op
Iteration  19: 16.925 s/op
Iteration  20: 16.875 s/op
Iteration  21: 16.908 s/op
Iteration  22: 16.958 s/op
Iteration  23: 16.908 s/op
Iteration  24: 16.856 s/op
Iteration  25: 16.961 s/op
Iteration  26: 16.959 s/op
Iteration  27: 16.931 s/op
Iteration  28: 16.895 s/op
Iteration  29: 16.866 s/op
Iteration  30: 16.898 s/op
Iteration  31: 16.869 s/op
Iteration  32: 16.945 s/op
Iteration  33: 16.946 s/op
Iteration  34: 16.943 s/op
Iteration  35: 16.988 s/op
Iteration  36: 16.963 s/op
Iteration  37: 16.926 s/op
Iteration  38: 16.915 s/op
Iteration  39: 16.862 s/op
Iteration  40: 16.908 s/op
Iteration  41: 16.950 s/op
Iteration  42: 16.949 s/op
Iteration  43: 16.861 s/op
Iteration  44: 16.930 s/op
Iteration  45: 16.901 s/op
Iteration  46: 17.021 s/op
Iteration  47: 16.964 s/op
Iteration  48: 16.977 s/op
Iteration  49: 17.005 s/op
Iteration  50: 16.912 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.955 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [16.800, 16.850) = 1 
    [16.850, 16.900) = 14 
    [16.900, 16.950) = 17 
    [16.950, 17.000) = 11 
    [17.000, 17.050) = 3 
    [17.050, 17.100) = 1 
    [17.100, 17.150) = 0 
    [17.150, 17.200) = 0 
    [17.200, 17.250) = 1 
    [17.250, 17.300) = 0 
    [17.300, 17.350) = 0 
    [17.350, 17.400) = 1 
    [17.400, 17.450) = 0 
    [17.450, 17.500) = 0 
    [17.500, 17.550) = 0 
    [17.550, 17.600) = 0 
    [17.600, 17.650) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.832 s/op
     p(50.0000) =     16.931 s/op
     p(90.0000) =     17.029 s/op
     p(95.0000) =     17.284 s/op
     p(99.0000) =     17.610 s/op
     p(99.9000) =     17.610 s/op
     p(99.9900) =     17.610 s/op
     p(99.9990) =     17.610 s/op
     p(99.9999) =     17.610 s/op
    p(100.0000) =     17.610 s/op


# Run complete. Total time: 00:14:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.955 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot_12.0.2_1564547875526.json
{"wallclock_times": [848.777802546], "core_cycle_counts": [[420544403427], [990726308337], [490211018664], [834795776167]], "aperf_counts": [[418288487610], [990560750244], [490063778947], [834740380128]], "mperf_counts": [[420021765378], [990699837612], [490180842764], [835281981062]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 06:52:04: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-31 06:52:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 06:52:05: INFO] 177 executions left in scheduler queue
[2019-07-31 06:52:05: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-31 06:52:05: INFO] Estimated completion (next execution): 2019-07-31 07:08:44 (0:16:39 from now)
[2019-07-31 06:52:05: INFO] Reboot in preparation for next execution
[2019-07-31 06:57:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.830 s/op
Iteration   2: 1.636 s/op
Iteration   3: 1.609 s/op
Iteration   4: 1.711 s/op
Iteration   5: 1.615 s/op
Iteration   6: 1.609 s/op
Iteration   7: 1.613 s/op
Iteration   8: 1.612 s/op
Iteration   9: 1.620 s/op
Iteration  10: 1.607 s/op
Iteration  11: 1.602 s/op
Iteration  12: 1.604 s/op
Iteration  13: 1.601 s/op
Iteration  14: 1.605 s/op
Iteration  15: 1.610 s/op
Iteration  16: 1.606 s/op
Iteration  17: 1.612 s/op
Iteration  18: 1.614 s/op
Iteration  19: 1.611 s/op
Iteration  20: 1.614 s/op
Iteration  21: 1.611 s/op
Iteration  22: 1.610 s/op
Iteration  23: 1.608 s/op
Iteration  24: 1.608 s/op
Iteration  25: 1.607 s/op
Iteration  26: 1.609 s/op
Iteration  27: 1.614 s/op
Iteration  28: 1.608 s/op
Iteration  29: 1.607 s/op
Iteration  30: 1.612 s/op
Iteration  31: 1.611 s/op
Iteration  32: 1.604 s/op
Iteration  33: 1.609 s/op
Iteration  34: 1.612 s/op
Iteration  35: 1.603 s/op
Iteration  36: 1.613 s/op
Iteration  37: 1.613 s/op
Iteration  38: 1.604 s/op
Iteration  39: 1.607 s/op
Iteration  40: 1.613 s/op
Iteration  41: 1.601 s/op
Iteration  42: 1.614 s/op
Iteration  43: 1.614 s/op
Iteration  44: 1.609 s/op
Iteration  45: 1.611 s/op
Iteration  46: 1.610 s/op
Iteration  47: 1.612 s/op
Iteration  48: 1.613 s/op
Iteration  49: 1.601 s/op
Iteration  50: 1.605 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.616 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [1.600, 1.625) = 47 
    [1.625, 1.650) = 1 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 1 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.601 s/op
     p(50.0000) =      1.610 s/op
     p(90.0000) =      1.615 s/op
     p(95.0000) =      1.670 s/op
     p(99.0000) =      1.830 s/op
     p(99.9000) =      1.830 s/op
     p(99.9900) =      1.830 s/op
     p(99.9990) =      1.830 s/op
     p(99.9999) =      1.830 s/op
    p(100.0000) =      1.830 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.616 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_graalvm-ce-19.1.1_1564548976160.json
{"wallclock_times": [81.71763348000002], "core_cycle_counts": [[43897363459], [73915984832], [53045212397], [101905563725]], "aperf_counts": [[43628718215], [73885992738], [53014918465], [101888968583]], "mperf_counts": [[43645127944], [73903311644], [53020356138], [101894916662]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 06:57:37: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-31 06:57:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 06:57:38: INFO] 176 executions left in scheduler queue
[2019-07-31 06:57:38: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-31 06:57:38: INFO] Estimated completion (next execution): 2019-07-31 07:01:30 (0:03:51 from now)
[2019-07-31 06:57:38: INFO] Reboot in preparation for next execution
[2019-07-31 07:03:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.665 s/op
Iteration   2: 1.630 s/op
Iteration   3: 1.690 s/op
Iteration   4: 1.574 s/op
Iteration   5: 1.572 s/op
Iteration   6: 1.575 s/op
Iteration   7: 1.579 s/op
Iteration   8: 1.577 s/op
Iteration   9: 1.576 s/op
Iteration  10: 1.572 s/op
Iteration  11: 1.571 s/op
Iteration  12: 1.571 s/op
Iteration  13: 1.575 s/op
Iteration  14: 1.572 s/op
Iteration  15: 1.572 s/op
Iteration  16: 1.572 s/op
Iteration  17: 1.567 s/op
Iteration  18: 1.568 s/op
Iteration  19: 1.566 s/op
Iteration  20: 1.568 s/op
Iteration  21: 1.567 s/op
Iteration  22: 1.567 s/op
Iteration  23: 1.564 s/op
Iteration  24: 1.569 s/op
Iteration  25: 1.568 s/op
Iteration  26: 1.567 s/op
Iteration  27: 1.568 s/op
Iteration  28: 1.569 s/op
Iteration  29: 1.567 s/op
Iteration  30: 1.566 s/op
Iteration  31: 1.569 s/op
Iteration  32: 1.570 s/op
Iteration  33: 1.566 s/op
Iteration  34: 1.567 s/op
Iteration  35: 1.568 s/op
Iteration  36: 1.565 s/op
Iteration  37: 1.565 s/op
Iteration  38: 1.568 s/op
Iteration  39: 1.566 s/op
Iteration  40: 1.565 s/op
Iteration  41: 1.565 s/op
Iteration  42: 1.569 s/op
Iteration  43: 1.568 s/op
Iteration  44: 1.567 s/op
Iteration  45: 1.566 s/op
Iteration  46: 1.569 s/op
Iteration  47: 1.567 s/op
Iteration  48: 1.568 s/op
Iteration  49: 1.569 s/op
Iteration  50: 1.567 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.575 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 0 
    [1.525, 1.538) = 0 
    [1.538, 1.550) = 0 
    [1.550, 1.563) = 0 
    [1.563, 1.575) = 44 
    [1.575, 1.588) = 3 
    [1.588, 1.600) = 0 
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 1 
    [1.638, 1.650) = 0 
    [1.650, 1.663) = 0 
    [1.663, 1.675) = 1 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.564 s/op
     p(50.0000) =      1.568 s/op
     p(90.0000) =      1.576 s/op
     p(95.0000) =      1.646 s/op
     p(99.0000) =      1.690 s/op
     p(99.9000) =      1.690 s/op
     p(99.9900) =      1.690 s/op
     p(99.9990) =      1.690 s/op
     p(99.9999) =      1.690 s/op
    p(100.0000) =      1.690 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.575 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_graalvm-ce-19.1.1_1564549309587.json
{"wallclock_times": [79.56630894400001], "core_cycle_counts": [[44453452320], [61194289060], [114636634275], [39974256315]], "aperf_counts": [[44245568515], [61176741416], [114625173795], [39957959953]], "mperf_counts": [[44259882154], [61190348624], [114626475062], [39959207810]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 07:03:09: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-31 07:03:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 07:03:10: INFO] 175 executions left in scheduler queue
[2019-07-31 07:03:10: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-07-31 07:03:10: INFO] Estimated completion (next execution): 2019-07-31 07:06:59 (0:03:49 from now)
[2019-07-31 07:03:10: INFO] Reboot in preparation for next execution
[2019-07-31 07:07:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 07:07:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 07:07:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 07:07:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 07:07:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 07:16:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.520 s/op
Iteration   2: 11.060 s/op
Iteration   3: 11.013 s/op
Iteration   4: 10.721 s/op
Iteration   5: 10.724 s/op
Iteration   6: 10.723 s/op
Iteration   7: 10.724 s/op
Iteration   8: 10.730 s/op
Iteration   9: 10.739 s/op
Iteration  10: 10.730 s/op
Iteration  11: 10.746 s/op
Iteration  12: 10.725 s/op
Iteration  13: 10.731 s/op
Iteration  14: 10.724 s/op
Iteration  15: 10.730 s/op
Iteration  16: 10.731 s/op
Iteration  17: 10.793 s/op
Iteration  18: 10.795 s/op
Iteration  19: 10.794 s/op
Iteration  20: 10.795 s/op
Iteration  21: 10.790 s/op
Iteration  22: 10.810 s/op
Iteration  23: 10.801 s/op
Iteration  24: 10.806 s/op
Iteration  25: 10.831 s/op
Iteration  26: 10.792 s/op
Iteration  27: 10.794 s/op
Iteration  28: 10.802 s/op
Iteration  29: 10.811 s/op
Iteration  30: 10.802 s/op
Iteration  31: 10.799 s/op
Iteration  32: 10.802 s/op
Iteration  33: 10.796 s/op
Iteration  34: 10.792 s/op
Iteration  35: 10.791 s/op
Iteration  36: 10.799 s/op
Iteration  37: 10.805 s/op
Iteration  38: 10.805 s/op
Iteration  39: 10.808 s/op
Iteration  40: 10.802 s/op
Iteration  41: 10.804 s/op
Iteration  42: 10.793 s/op
Iteration  43: 10.804 s/op
Iteration  44: 10.810 s/op
Iteration  45: 10.809 s/op
Iteration  46: 10.811 s/op
Iteration  47: 10.803 s/op
Iteration  48: 10.791 s/op
Iteration  49: 10.791 s/op
Iteration  50: 10.789 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     10.806 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [10.700, 10.750) = 13 
    [10.750, 10.800) = 16 
    [10.800, 10.850) = 18 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 1 
    [11.050, 11.100) = 1 
    [11.100, 11.150) = 0 
    [11.150, 11.200) = 0 
    [11.200, 11.250) = 0 
    [11.250, 11.300) = 0 
    [11.300, 11.350) = 0 
    [11.350, 11.400) = 0 
    [11.400, 11.450) = 0 
    [11.450, 11.500) = 0 
    [11.500, 11.550) = 1 
    [11.550, 11.600) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.721 s/op
     p(50.0000) =     10.795 s/op
     p(90.0000) =     10.811 s/op
     p(95.0000) =     11.034 s/op
     p(99.0000) =     11.520 s/op
     p(99.9000) =     11.520 s/op
     p(99.9900) =     11.520 s/op
     p(99.9990) =     11.520 s/op
     p(99.9999) =     11.520 s/op
    p(100.0000) =     11.520 s/op


# Run complete. Total time: 00:09:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  10.806 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot_11.0.4_1564549640495.json
{"wallclock_times": [541.293802016], "core_cycle_counts": [[752040053604], [377959062455], [322200641659], [290538781855]], "aperf_counts": [[751019889518], [377798543808], [322077831233], [290453636774]], "mperf_counts": [[751375311750], [377908551596], [322157493604], [290572615776]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 07:16:21: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-07-31 07:16:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 07:16:22: INFO] 174 executions left in scheduler queue
[2019-07-31 07:16:22: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-31 07:16:22: INFO] Estimated completion (next execution): 2019-07-31 07:27:54 (0:11:31 from now)
[2019-07-31 07:16:22: INFO] Reboot in preparation for next execution
[2019-07-31 07:21:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.901 s/op
Iteration   2: 1.615 s/op
Iteration   3: 1.607 s/op
Iteration   4: 1.684 s/op
Iteration   5: 1.590 s/op
Iteration   6: 1.591 s/op
Iteration   7: 1.603 s/op
Iteration   8: 1.601 s/op
Iteration   9: 1.596 s/op
Iteration  10: 1.590 s/op
Iteration  11: 1.590 s/op
Iteration  12: 1.595 s/op
Iteration  13: 1.603 s/op
Iteration  14: 1.600 s/op
Iteration  15: 1.597 s/op
Iteration  16: 1.601 s/op
Iteration  17: 1.594 s/op
Iteration  18: 1.599 s/op
Iteration  19: 1.585 s/op
Iteration  20: 1.599 s/op
Iteration  21: 1.590 s/op
Iteration  22: 1.587 s/op
Iteration  23: 1.592 s/op
Iteration  24: 1.588 s/op
Iteration  25: 1.592 s/op
Iteration  26: 1.591 s/op
Iteration  27: 1.599 s/op
Iteration  28: 1.600 s/op
Iteration  29: 1.601 s/op
Iteration  30: 1.594 s/op
Iteration  31: 1.593 s/op
Iteration  32: 1.595 s/op
Iteration  33: 1.589 s/op
Iteration  34: 1.598 s/op
Iteration  35: 1.594 s/op
Iteration  36: 1.595 s/op
Iteration  37: 1.591 s/op
Iteration  38: 1.591 s/op
Iteration  39: 1.588 s/op
Iteration  40: 1.593 s/op
Iteration  41: 1.590 s/op
Iteration  42: 1.596 s/op
Iteration  43: 1.599 s/op
Iteration  44: 1.596 s/op
Iteration  45: 1.598 s/op
Iteration  46: 1.590 s/op
Iteration  47: 1.593 s/op
Iteration  48: 1.597 s/op
Iteration  49: 1.591 s/op
Iteration  50: 1.591 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.603 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 41 
    [1.600, 1.650) = 7 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.585 s/op
     p(50.0000) =      1.595 s/op
     p(90.0000) =      1.603 s/op
     p(95.0000) =      1.646 s/op
     p(99.0000) =      1.901 s/op
     p(99.9000) =      1.901 s/op
     p(99.9900) =      1.901 s/op
     p(99.9990) =      1.901 s/op
     p(99.9999) =      1.901 s/op
    p(100.0000) =      1.901 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.603 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ce-19.1.1_1564550434964.json
{"wallclock_times": [81.03598450200002], "core_cycle_counts": [[48473939074], [126681581668], [60412288032], [35802915366]], "aperf_counts": [[48181896350], [126656922163], [60390508260], [35779229869]], "mperf_counts": [[48191637858], [126659420200], [60399681730], [35797454302]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 07:21:55: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-31 07:21:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 07:21:56: INFO] 173 executions left in scheduler queue
[2019-07-31 07:21:56: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-31 07:21:56: INFO] Estimated completion (next execution): 2019-07-31 07:25:48 (0:03:51 from now)
[2019-07-31 07:21:56: INFO] Reboot in preparation for next execution
[2019-07-31 07:27:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.946 s/op
Iteration   2: 1.898 s/op
Iteration   3: 1.956 s/op
Iteration   4: 1.842 s/op
Iteration   5: 1.843 s/op
Iteration   6: 1.841 s/op
Iteration   7: 1.843 s/op
Iteration   8: 1.841 s/op
Iteration   9: 1.846 s/op
Iteration  10: 1.841 s/op
Iteration  11: 1.845 s/op
Iteration  12: 1.843 s/op
Iteration  13: 1.844 s/op
Iteration  14: 1.845 s/op
Iteration  15: 1.843 s/op
Iteration  16: 1.843 s/op
Iteration  17: 1.846 s/op
Iteration  18: 1.848 s/op
Iteration  19: 1.844 s/op
Iteration  20: 1.850 s/op
Iteration  21: 1.847 s/op
Iteration  22: 1.847 s/op
Iteration  23: 1.846 s/op
Iteration  24: 1.845 s/op
Iteration  25: 1.847 s/op
Iteration  26: 1.846 s/op
Iteration  27: 1.846 s/op
Iteration  28: 1.847 s/op
Iteration  29: 1.845 s/op
Iteration  30: 1.847 s/op
Iteration  31: 1.845 s/op
Iteration  32: 1.846 s/op
Iteration  33: 1.851 s/op
Iteration  34: 1.846 s/op
Iteration  35: 1.845 s/op
Iteration  36: 1.843 s/op
Iteration  37: 1.847 s/op
Iteration  38: 1.846 s/op
Iteration  39: 1.847 s/op
Iteration  40: 1.847 s/op
Iteration  41: 1.845 s/op
Iteration  42: 1.847 s/op
Iteration  43: 1.846 s/op
Iteration  44: 1.845 s/op
Iteration  45: 1.844 s/op
Iteration  46: 1.847 s/op
Iteration  47: 1.844 s/op
Iteration  48: 1.846 s/op
Iteration  49: 1.848 s/op
Iteration  50: 1.846 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.851 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [1.800, 1.813) = 0 
    [1.813, 1.825) = 0 
    [1.825, 1.838) = 0 
    [1.838, 1.850) = 46 
    [1.850, 1.863) = 1 
    [1.863, 1.875) = 0 
    [1.875, 1.888) = 0 
    [1.888, 1.900) = 1 
    [1.900, 1.913) = 0 
    [1.913, 1.925) = 0 
    [1.925, 1.938) = 0 
    [1.938, 1.950) = 1 
    [1.950, 1.963) = 1 
    [1.963, 1.975) = 0 
    [1.975, 1.988) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.841 s/op
     p(50.0000) =      1.846 s/op
     p(90.0000) =      1.850 s/op
     p(95.0000) =      1.920 s/op
     p(99.0000) =      1.956 s/op
     p(99.9000) =      1.956 s/op
     p(99.9900) =      1.956 s/op
     p(99.9990) =      1.956 s/op
     p(99.9999) =      1.956 s/op
    p(100.0000) =      1.956 s/op


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.851 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ce-19.1.1_1564550767126.json
{"wallclock_times": [93.380836467], "core_cycle_counts": [[62114531070], [104982877400], [82587302354], [55247757825]], "aperf_counts": [[61879512931], [104957626806], [82572482084], [55235247386]], "mperf_counts": [[61894212498], [104961418170], [82572639782], [55237246066]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 07:27:40: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-31 07:27:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 07:27:41: INFO] 172 executions left in scheduler queue
[2019-07-31 07:27:41: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 07:27:41: INFO] Estimated completion (next execution): 2019-07-31 07:31:45 (0:04:03 from now)
[2019-07-31 07:27:41: INFO] Reboot in preparation for next execution
[2019-07-31 07:38:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.786 s/op
Iteration   2: 7.627 s/op
Iteration   3: 7.757 s/op
Iteration   4: 7.664 s/op
Iteration   5: 7.664 s/op
Iteration   6: 7.663 s/op
Iteration   7: 7.661 s/op
Iteration   8: 7.666 s/op
Iteration   9: 7.675 s/op
Iteration  10: 7.662 s/op
Iteration  11: 7.678 s/op
Iteration  12: 7.669 s/op
Iteration  13: 7.642 s/op
Iteration  14: 7.662 s/op
Iteration  15: 7.648 s/op
Iteration  16: 7.658 s/op
Iteration  17: 7.654 s/op
Iteration  18: 7.657 s/op
Iteration  19: 7.656 s/op
Iteration  20: 7.655 s/op
Iteration  21: 7.660 s/op
Iteration  22: 7.652 s/op
Iteration  23: 7.661 s/op
Iteration  24: 7.655 s/op
Iteration  25: 7.652 s/op
Iteration  26: 7.659 s/op
Iteration  27: 7.667 s/op
Iteration  28: 7.651 s/op
Iteration  29: 7.642 s/op
Iteration  30: 7.658 s/op
Iteration  31: 7.655 s/op
Iteration  32: 7.654 s/op
Iteration  33: 7.646 s/op
Iteration  34: 7.656 s/op
Iteration  35: 7.636 s/op
Iteration  36: 7.636 s/op
Iteration  37: 7.658 s/op
Iteration  38: 7.656 s/op
Iteration  39: 7.666 s/op
Iteration  40: 7.651 s/op
Iteration  41: 7.664 s/op
Iteration  42: 7.641 s/op
Iteration  43: 7.641 s/op
Iteration  44: 7.635 s/op
Iteration  45: 7.657 s/op
Iteration  46: 7.640 s/op
Iteration  47: 7.634 s/op
Iteration  48: 7.649 s/op
Iteration  49: 7.650 s/op
Iteration  50: 7.659 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.659 ?(99.9%) 0.013 s/op

  Histogram, s/op:
    [7.600, 7.613) = 0 
    [7.613, 7.625) = 0 
    [7.625, 7.638) = 5 
    [7.638, 7.650) = 8 
    [7.650, 7.663) = 25 
    [7.663, 7.675) = 9 
    [7.675, 7.688) = 1 
    [7.688, 7.700) = 0 
    [7.700, 7.713) = 0 
    [7.713, 7.725) = 0 
    [7.725, 7.738) = 0 
    [7.738, 7.750) = 0 
    [7.750, 7.763) = 1 
    [7.763, 7.775) = 0 
    [7.775, 7.788) = 1 
    [7.788, 7.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.627 s/op
     p(50.0000) =      7.656 s/op
     p(90.0000) =      7.668 s/op
     p(95.0000) =      7.714 s/op
     p(99.0000) =      7.786 s/op
     p(99.9000) =      7.786 s/op
     p(99.9900) =      7.786 s/op
     p(99.9990) =      7.786 s/op
     p(99.9999) =      7.786 s/op
    p(100.0000) =      7.786 s/op


# Run complete. Total time: 00:06:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.659 ? 0.013   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_graalvm-ee-19.1.1_1564551112654.json
{"wallclock_times": [383.832748131], "core_cycle_counts": [[50914631065], [415562361791], [464523798995], [306212170395]], "aperf_counts": [[49801578051], [415539203864], [464506455676], [306184705283]], "mperf_counts": [[49811019626], [415554602480], [464513152480], [306186556312]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 07:38:16: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 07:38:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 07:38:17: INFO] 171 executions left in scheduler queue
[2019-07-31 07:38:17: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 07:38:17: INFO] Estimated completion (next execution): 2019-07-31 07:47:11 (0:08:54 from now)
[2019-07-31 07:38:17: INFO] Reboot in preparation for next execution
[2019-07-31 07:48:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.844 s/op
Iteration   2: 6.609 s/op
Iteration   3: 6.688 s/op
Iteration   4: 6.683 s/op
Iteration   5: 6.632 s/op
Iteration   6: 6.716 s/op
Iteration   7: 6.622 s/op
Iteration   8: 6.666 s/op
Iteration   9: 6.690 s/op
Iteration  10: 6.627 s/op
Iteration  11: 6.666 s/op
Iteration  12: 6.663 s/op
Iteration  13: 6.613 s/op
Iteration  14: 6.647 s/op
Iteration  15: 6.654 s/op
Iteration  16: 6.665 s/op
Iteration  17: 6.642 s/op
Iteration  18: 6.649 s/op
Iteration  19: 6.702 s/op
Iteration  20: 6.616 s/op
Iteration  21: 6.679 s/op
Iteration  22: 6.673 s/op
Iteration  23: 6.635 s/op
Iteration  24: 6.641 s/op
Iteration  25: 6.636 s/op
Iteration  26: 6.665 s/op
Iteration  27: 6.641 s/op
Iteration  28: 6.681 s/op
Iteration  29: 6.664 s/op
Iteration  30: 6.651 s/op
Iteration  31: 6.635 s/op
Iteration  32: 6.634 s/op
Iteration  33: 6.643 s/op
Iteration  34: 6.679 s/op
Iteration  35: 6.650 s/op
Iteration  36: 6.630 s/op
Iteration  37: 6.618 s/op
Iteration  38: 6.648 s/op
Iteration  39: 6.670 s/op
Iteration  40: 6.673 s/op
Iteration  41: 6.635 s/op
Iteration  42: 6.672 s/op
Iteration  43: 6.605 s/op
Iteration  44: 6.643 s/op
Iteration  45: 6.629 s/op
Iteration  46: 6.655 s/op
Iteration  47: 6.680 s/op
Iteration  48: 6.674 s/op
Iteration  49: 6.659 s/op
Iteration  50: 6.635 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.657 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [6.600, 6.625) = 6 
    [6.625, 6.650) = 18 
    [6.650, 6.675) = 16 
    [6.675, 6.700) = 7 
    [6.700, 6.725) = 2 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 0 
    [6.775, 6.800) = 0 
    [6.800, 6.825) = 0 
    [6.825, 6.850) = 1 
    [6.850, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.605 s/op
     p(50.0000) =      6.650 s/op
     p(90.0000) =      6.687 s/op
     p(95.0000) =      6.708 s/op
     p(99.0000) =      6.844 s/op
     p(99.9000) =      6.844 s/op
     p(99.9900) =      6.844 s/op
     p(99.9990) =      6.844 s/op
     p(99.9999) =      6.844 s/op
    p(100.0000) =      6.844 s/op


# Run complete. Total time: 00:05:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.657 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_graalvm-ee-19.1.1_1564551763532.json
{"wallclock_times": [333.751968801], "core_cycle_counts": [[298086975915], [148567932510], [329009738945], [302439214440]], "aperf_counts": [[297378633946], [148494016861], [328953571556], [302402491659]], "mperf_counts": [[297385219906], [148496234026], [328953683066], [302402943196]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 07:48:17: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 07:48:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 07:48:18: INFO] 170 executions left in scheduler queue
[2019-07-31 07:48:18: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 07:48:18: INFO] Estimated completion (next execution): 2019-07-31 07:56:22 (0:08:04 from now)
[2019-07-31 07:48:18: INFO] Reboot in preparation for next execution
[2019-07-31 07:55:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.862 s/op
Iteration   2: 3.380 s/op
Iteration   3: 3.508 s/op
Iteration   4: 3.526 s/op
Iteration   5: 3.586 s/op
Iteration   6: 3.494 s/op
Iteration   7: 3.551 s/op
Iteration   8: 3.528 s/op
Iteration   9: 3.482 s/op
Iteration  10: 3.505 s/op
Iteration  11: 3.556 s/op
Iteration  12: 3.539 s/op
Iteration  13: 3.537 s/op
Iteration  14: 3.542 s/op
Iteration  15: 3.534 s/op
Iteration  16: 3.490 s/op
Iteration  17: 3.510 s/op
Iteration  18: 3.538 s/op
Iteration  19: 3.526 s/op
Iteration  20: 3.536 s/op
Iteration  21: 3.543 s/op
Iteration  22: 3.540 s/op
Iteration  23: 3.487 s/op
Iteration  24: 3.530 s/op
Iteration  25: 3.554 s/op
Iteration  26: 3.543 s/op
Iteration  27: 3.532 s/op
Iteration  28: 3.545 s/op
Iteration  29: 3.534 s/op
Iteration  30: 3.482 s/op
Iteration  31: 3.516 s/op
Iteration  32: 3.552 s/op
Iteration  33: 3.534 s/op
Iteration  34: 3.536 s/op
Iteration  35: 3.477 s/op
Iteration  36: 3.504 s/op
Iteration  37: 3.562 s/op
Iteration  38: 3.532 s/op
Iteration  39: 3.542 s/op
Iteration  40: 3.537 s/op
Iteration  41: 3.544 s/op
Iteration  42: 3.477 s/op
Iteration  43: 3.506 s/op
Iteration  44: 3.551 s/op
Iteration  45: 3.541 s/op
Iteration  46: 3.544 s/op
Iteration  47: 3.549 s/op
Iteration  48: 3.530 s/op
Iteration  49: 3.486 s/op
Iteration  50: 3.530 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.531 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 8 
    [3.500, 3.550) = 33 
    [3.550, 3.600) = 7 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.380 s/op
     p(50.0000) =      3.534 s/op
     p(90.0000) =      3.554 s/op
     p(95.0000) =      3.573 s/op
     p(99.0000) =      3.862 s/op
     p(99.9000) =      3.862 s/op
     p(99.9900) =      3.862 s/op
     p(99.9990) =      3.862 s/op
     p(99.9999) =      3.862 s/op
    p(100.0000) =      3.862 s/op


# Run complete. Total time: 00:02:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.531 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_graalvm-ee-19.1.1_1564552348588.json
{"wallclock_times": [177.56958062700002], "core_cycle_counts": [[191836692437], [197570830886], [71546435540], [150550667217]], "aperf_counts": [[191452803761], [197529722021], [71491660827], [150525089110]], "mperf_counts": [[191467442924], [197549908634], [71497989894], [150529306498]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 07:55:26: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 07:55:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 07:55:27: INFO] 169 executions left in scheduler queue
[2019-07-31 07:55:27: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 07:55:27: INFO] Estimated completion (next execution): 2019-07-31 08:00:54 (0:05:27 from now)
[2019-07-31 07:55:27: INFO] Reboot in preparation for next execution
[2019-07-31 08:02:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.300 s/op
Iteration   2: 2.981 s/op
Iteration   3: 2.990 s/op
Iteration   4: 3.085 s/op
Iteration   5: 3.041 s/op
Iteration   6: 3.018 s/op
Iteration   7: 2.986 s/op
Iteration   8: 2.977 s/op
Iteration   9: 2.984 s/op
Iteration  10: 2.990 s/op
Iteration  11: 2.998 s/op
Iteration  12: 2.995 s/op
Iteration  13: 2.988 s/op
Iteration  14: 2.996 s/op
Iteration  15: 2.984 s/op
Iteration  16: 2.987 s/op
Iteration  17: 2.997 s/op
Iteration  18: 2.988 s/op
Iteration  19: 2.983 s/op
Iteration  20: 2.987 s/op
Iteration  21: 2.995 s/op
Iteration  22: 2.981 s/op
Iteration  23: 3.000 s/op
Iteration  24: 2.998 s/op
Iteration  25: 3.032 s/op
Iteration  26: 2.994 s/op
Iteration  27: 2.986 s/op
Iteration  28: 3.001 s/op
Iteration  29: 2.973 s/op
Iteration  30: 3.016 s/op
Iteration  31: 2.985 s/op
Iteration  32: 3.001 s/op
Iteration  33: 2.988 s/op
Iteration  34: 2.977 s/op
Iteration  35: 2.999 s/op
Iteration  36: 2.992 s/op
Iteration  37: 2.980 s/op
Iteration  38: 2.987 s/op
Iteration  39: 3.016 s/op
Iteration  40: 2.976 s/op
Iteration  41: 2.981 s/op
Iteration  42: 2.986 s/op
Iteration  43: 2.964 s/op
Iteration  44: 2.983 s/op
Iteration  45: 2.983 s/op
Iteration  46: 2.990 s/op
Iteration  47: 2.984 s/op
Iteration  48: 2.991 s/op
Iteration  49: 3.007 s/op
Iteration  50: 3.002 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.000 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 0 
    [2.950, 2.975) = 2 
    [2.975, 3.000) = 37 
    [3.000, 3.025) = 7 
    [3.025, 3.050) = 2 
    [3.050, 3.075) = 0 
    [3.075, 3.100) = 1 
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 0 
    [3.150, 3.175) = 0 
    [3.175, 3.200) = 0 
    [3.200, 3.225) = 0 
    [3.225, 3.250) = 0 
    [3.250, 3.275) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.964 s/op
     p(50.0000) =      2.989 s/op
     p(90.0000) =      3.018 s/op
     p(95.0000) =      3.061 s/op
     p(99.0000) =      3.300 s/op
     p(99.9000) =      3.300 s/op
     p(99.9900) =      3.300 s/op
     p(99.9990) =      3.300 s/op
     p(99.9999) =      3.300 s/op
    p(100.0000) =      3.300 s/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.000 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_graalvm-ee-19.1.1_1564552780653.json
{"wallclock_times": [150.97258136000002], "core_cycle_counts": [[164355064182], [113437889593], [79373675692], [136124608888]], "aperf_counts": [[164035818358], [113399453880], [79351628213], [136104308739]], "mperf_counts": [[164057806402], [113407745992], [79356079676], [136104769560]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 08:02:11: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-31 08:02:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 08:02:12: INFO] 168 executions left in scheduler queue
[2019-07-31 08:02:12: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:02:12: INFO] Estimated completion (next execution): 2019-07-31 08:07:13 (0:05:01 from now)
[2019-07-31 08:02:12: INFO] Reboot in preparation for next execution
[2019-07-31 08:06:23: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 08:06:23: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 08:06:23: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 08:06:23: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 08:06:23: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 08:06:23: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 08:12:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.584 s/op
Iteration   2: 7.410 s/op
Iteration   3: 7.316 s/op
Iteration   4: 7.406 s/op
Iteration   5: 7.279 s/op
Iteration   6: 7.165 s/op
Iteration   7: 7.172 s/op
Iteration   8: 7.075 s/op
Iteration   9: 7.086 s/op
Iteration  10: 7.105 s/op
Iteration  11: 7.235 s/op
Iteration  12: 7.147 s/op
Iteration  13: 7.189 s/op
Iteration  14: 7.134 s/op
Iteration  15: 7.147 s/op
Iteration  16: 7.115 s/op
Iteration  17: 7.033 s/op
Iteration  18: 6.990 s/op
Iteration  19: 7.004 s/op
Iteration  20: 6.999 s/op
Iteration  21: 7.039 s/op
Iteration  22: 7.062 s/op
Iteration  23: 7.003 s/op
Iteration  24: 7.007 s/op
Iteration  25: 6.989 s/op
Iteration  26: 6.976 s/op
Iteration  27: 7.011 s/op
Iteration  28: 7.017 s/op
Iteration  29: 6.980 s/op
Iteration  30: 6.985 s/op
Iteration  31: 6.981 s/op
Iteration  32: 6.992 s/op
Iteration  33: 6.982 s/op
Iteration  34: 7.013 s/op
Iteration  35: 7.023 s/op
Iteration  36: 7.028 s/op
Iteration  37: 6.958 s/op
Iteration  38: 7.043 s/op
Iteration  39: 6.991 s/op
Iteration  40: 7.039 s/op
Iteration  41: 7.036 s/op
Iteration  42: 6.936 s/op
Iteration  43: 6.942 s/op
Iteration  44: 6.940 s/op
Iteration  45: 7.039 s/op
Iteration  46: 7.040 s/op
Iteration  47: 6.997 s/op
Iteration  48: 6.974 s/op
Iteration  49: 6.967 s/op
Iteration  50: 6.980 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.091 ?(99.9%) 0.120 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 18 
    [7.000, 7.250) = 27 
    [7.250, 7.500) = 4 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.936 s/op
     p(50.0000) =      7.025 s/op
     p(90.0000) =      7.274 s/op
     p(95.0000) =      7.408 s/op
     p(99.0000) =      8.584 s/op
     p(99.9000) =      8.584 s/op
     p(99.9900) =      8.584 s/op
     p(99.9990) =      8.584 s/op
     p(99.9999) =      8.584 s/op
    p(100.0000) =      8.584 s/op


# Run complete. Total time: 00:05:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.091 ? 0.120   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9_11.0.4_1564553183714.json
{"wallclock_times": [356.42305880000004], "core_cycle_counts": [[385500949799], [376148858321], [225018987509], [328180124782]], "aperf_counts": [[384532194790], [376043525148], [224840640826], [328015920883]], "mperf_counts": [[384537299346], [376046494926], [224840609226], [328016008560]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 08:12:20: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:12:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 08:12:21: INFO] 167 executions left in scheduler queue
[2019-07-31 08:12:21: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:12:21: INFO] Estimated completion (next execution): 2019-07-31 08:20:48 (0:08:26 from now)
[2019-07-31 08:12:21: INFO] Reboot in preparation for next execution
[2019-07-31 08:16:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 08:16:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 08:16:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 08:16:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 08:16:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 08:16:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 08:26:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.492 s/op
Iteration   2: 11.489 s/op
Iteration   3: 11.444 s/op
Iteration   4: 11.470 s/op
Iteration   5: 11.472 s/op
Iteration   6: 11.398 s/op
Iteration   7: 11.447 s/op
Iteration   8: 11.464 s/op
Iteration   9: 11.386 s/op
Iteration  10: 11.426 s/op
Iteration  11: 11.387 s/op
Iteration  12: 11.379 s/op
Iteration  13: 11.314 s/op
Iteration  14: 11.435 s/op
Iteration  15: 11.450 s/op
Iteration  16: 11.423 s/op
Iteration  17: 11.360 s/op
Iteration  18: 11.305 s/op
Iteration  19: 11.326 s/op
Iteration  20: 11.296 s/op
Iteration  21: 11.300 s/op
Iteration  22: 11.318 s/op
Iteration  23: 11.183 s/op
Iteration  24: 11.351 s/op
Iteration  25: 11.303 s/op
Iteration  26: 11.304 s/op
Iteration  27: 11.331 s/op
Iteration  28: 11.363 s/op
Iteration  29: 11.243 s/op
Iteration  30: 11.253 s/op
Iteration  31: 11.316 s/op
Iteration  32: 11.267 s/op
Iteration  33: 11.278 s/op
Iteration  34: 11.301 s/op
Iteration  35: 11.352 s/op
Iteration  36: 11.317 s/op
Iteration  37: 11.324 s/op
Iteration  38: 11.341 s/op
Iteration  39: 11.329 s/op
Iteration  40: 11.277 s/op
Iteration  41: 11.318 s/op
Iteration  42: 11.256 s/op
Iteration  43: 11.242 s/op
Iteration  44: 11.294 s/op
Iteration  45: 11.291 s/op
Iteration  46: 11.343 s/op
Iteration  47: 11.333 s/op
Iteration  48: 11.197 s/op
Iteration  49: 11.234 s/op
Iteration  50: 11.340 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.361 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 5 
    [11.250, 11.375) = 30 
    [11.375, 11.500) = 14 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 
    [11.875, 12.000) = 0 
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 1 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.183 s/op
     p(50.0000) =     11.328 s/op
     p(90.0000) =     11.462 s/op
     p(95.0000) =     11.479 s/op
     p(99.0000) =     12.492 s/op
     p(99.9000) =     12.492 s/op
     p(99.9900) =     12.492 s/op
     p(99.9990) =     12.492 s/op
     p(99.9999) =     12.492 s/op
    p(100.0000) =     12.492 s/op


# Run complete. Total time: 00:09:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.361 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9_11.0.4_1564553791677.json
{"wallclock_times": [569.581580932], "core_cycle_counts": [[492692360442], [402404081475], [502136589129], [513297176216]], "aperf_counts": [[491196543669], [402245727178], [502023134841], [513188685577]], "mperf_counts": [[491208451870], [402245732824], [502024051304], [513188976766]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 08:26:01: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:26:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 08:26:02: INFO] 166 executions left in scheduler queue
[2019-07-31 08:26:02: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:26:02: INFO] Estimated completion (next execution): 2019-07-31 08:38:02 (0:12:00 from now)
[2019-07-31 08:26:02: INFO] Reboot in preparation for next execution
[2019-07-31 08:30:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 08:30:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 08:30:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 08:30:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 08:30:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 08:30:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 08:36:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.639 s/op
Iteration   2: 8.600 s/op
Iteration   3: 8.098 s/op
Iteration   4: 8.162 s/op
Iteration   5: 7.976 s/op
Iteration   6: 7.820 s/op
Iteration   7: 7.886 s/op
Iteration   8: 7.823 s/op
Iteration   9: 7.814 s/op
Iteration  10: 7.847 s/op
Iteration  11: 7.823 s/op
Iteration  12: 7.857 s/op
Iteration  13: 7.801 s/op
Iteration  14: 7.720 s/op
Iteration  15: 7.817 s/op
Iteration  16: 7.812 s/op
Iteration  17: 7.761 s/op
Iteration  18: 7.837 s/op
Iteration  19: 7.761 s/op
Iteration  20: 7.854 s/op
Iteration  21: 7.778 s/op
Iteration  22: 7.688 s/op
Iteration  23: 7.758 s/op
Iteration  24: 7.761 s/op
Iteration  25: 7.769 s/op
Iteration  26: 7.744 s/op
Iteration  27: 7.725 s/op
Iteration  28: 7.833 s/op
Iteration  29: 7.776 s/op
Iteration  30: 7.658 s/op
Iteration  31: 7.763 s/op
Iteration  32: 7.706 s/op
Iteration  33: 7.775 s/op
Iteration  34: 7.734 s/op
Iteration  35: 7.690 s/op
Iteration  36: 7.732 s/op
Iteration  37: 7.719 s/op
Iteration  38: 7.780 s/op
Iteration  39: 7.748 s/op
Iteration  40: 7.685 s/op
Iteration  41: 7.742 s/op
Iteration  42: 7.749 s/op
Iteration  43: 7.724 s/op
Iteration  44: 7.748 s/op
Iteration  45: 7.802 s/op
Iteration  46: 7.704 s/op
Iteration  47: 7.732 s/op
Iteration  48: 7.767 s/op
Iteration  49: 7.741 s/op
Iteration  50: 7.688 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.839 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 20 
    [ 7.750,  8.000) = 26 
    [ 8.000,  8.250) = 2 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.658 s/op
     p(50.0000) =      7.765 s/op
     p(90.0000) =      7.967 s/op
     p(95.0000) =      8.359 s/op
     p(99.0000) =      9.639 s/op
     p(99.9000) =      9.639 s/op
     p(99.9900) =      9.639 s/op
     p(99.9990) =      9.639 s/op
     p(99.9999) =      9.639 s/op
    p(100.0000) =      9.639 s/op


# Run complete. Total time: 00:06:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.839 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9_11.0.4_1564554614745.json
{"wallclock_times": [393.7414490599999], "core_cycle_counts": [[469329146568], [292038479248], [325854828004], [242291090886]], "aperf_counts": [[468433145815], [291886487549], [325703524262], [242190161812]], "mperf_counts": [[468437190598], [291887348396], [325703703592], [242191116084]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 08:36:48: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:36:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 08:36:49: INFO] 165 executions left in scheduler queue
[2019-07-31 08:36:49: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:36:49: INFO] Estimated completion (next execution): 2019-07-31 08:45:53 (0:09:04 from now)
[2019-07-31 08:36:49: INFO] Reboot in preparation for next execution
[2019-07-31 08:41:03: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 08:41:03: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 08:41:03: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 08:41:03: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 08:41:03: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 08:41:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 08:53:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.212 s/op
Iteration   2: 14.394 s/op
Iteration   3: 14.337 s/op
Iteration   4: 14.295 s/op
Iteration   5: 14.344 s/op
Iteration   6: 14.332 s/op
Iteration   7: 14.315 s/op
Iteration   8: 14.309 s/op
Iteration   9: 14.318 s/op
Iteration  10: 14.415 s/op
Iteration  11: 14.343 s/op
Iteration  12: 14.861 s/op
Iteration  13: 14.367 s/op
Iteration  14: 14.238 s/op
Iteration  15: 14.219 s/op
Iteration  16: 14.280 s/op
Iteration  17: 14.370 s/op
Iteration  18: 14.354 s/op
Iteration  19: 14.338 s/op
Iteration  20: 14.302 s/op
Iteration  21: 14.254 s/op
Iteration  22: 14.184 s/op
Iteration  23: 14.292 s/op
Iteration  24: 14.387 s/op
Iteration  25: 14.407 s/op
Iteration  26: 14.208 s/op
Iteration  27: 14.276 s/op
Iteration  28: 14.370 s/op
Iteration  29: 14.228 s/op
Iteration  30: 14.385 s/op
Iteration  31: 14.735 s/op
Iteration  32: 14.236 s/op
Iteration  33: 14.341 s/op
Iteration  34: 14.371 s/op
Iteration  35: 14.307 s/op
Iteration  36: 14.310 s/op
Iteration  37: 14.261 s/op
Iteration  38: 14.425 s/op
Iteration  39: 14.233 s/op
Iteration  40: 14.350 s/op
Iteration  41: 14.240 s/op
Iteration  42: 14.310 s/op
Iteration  43: 14.331 s/op
Iteration  44: 14.207 s/op
Iteration  45: 14.296 s/op
Iteration  46: 14.213 s/op
Iteration  47: 14.329 s/op
Iteration  48: 14.321 s/op
Iteration  49: 14.244 s/op
Iteration  50: 14.261 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.365 ?(99.9%) 0.144 s/op

  Histogram, s/op:
    [14.000, 14.250) = 11 
    [14.250, 14.500) = 36 
    [14.500, 14.750) = 1 
    [14.750, 15.000) = 1 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.184 s/op
     p(50.0000) =     14.316 s/op
     p(90.0000) =     14.415 s/op
     p(95.0000) =     14.792 s/op
     p(99.0000) =     16.212 s/op
     p(99.9000) =     16.212 s/op
     p(99.9900) =     16.212 s/op
     p(99.9990) =     16.212 s/op
     p(99.9999) =     16.212 s/op
    p(100.0000) =     16.212 s/op


# Run complete. Total time: 00:11:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.365 ? 0.144   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9_11.0.4_1564555263623.json
{"wallclock_times": [719.9194534400001], "core_cycle_counts": [[704400388359], [631368676314], [564392325766], [484524389891]], "aperf_counts": [[702668333286], [631157707786], [564165955375], [484375895073]], "mperf_counts": [[702671570404], [631158569696], [564166197470], [484375909714]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 08:53:03: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-31 08:53:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 08:53:04: INFO] 164 executions left in scheduler queue
[2019-07-31 08:53:04: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-07-31 08:53:04: INFO] Estimated completion (next execution): 2019-07-31 09:07:34 (0:14:30 from now)
[2019-07-31 08:53:04: INFO] Reboot in preparation for next execution
[2019-07-31 09:00:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.215 s/op
Iteration   2: 2.348 s/op
Iteration   3: 3.083 s/op
Iteration   4: 2.457 s/op
Iteration   5: 2.465 s/op
Iteration   6: 2.455 s/op
Iteration   7: 2.439 s/op
Iteration   8: 2.461 s/op
Iteration   9: 2.463 s/op
Iteration  10: 2.460 s/op
Iteration  11: 2.469 s/op
Iteration  12: 2.462 s/op
Iteration  13: 2.463 s/op
Iteration  14: 2.457 s/op
Iteration  15: 2.458 s/op
Iteration  16: 2.465 s/op
Iteration  17: 2.465 s/op
Iteration  18: 2.465 s/op
Iteration  19: 2.454 s/op
Iteration  20: 2.467 s/op
Iteration  21: 2.460 s/op
Iteration  22: 2.462 s/op
Iteration  23: 2.461 s/op
Iteration  24: 2.453 s/op
Iteration  25: 2.436 s/op
Iteration  26: 2.456 s/op
Iteration  27: 2.460 s/op
Iteration  28: 2.461 s/op
Iteration  29: 2.462 s/op
Iteration  30: 2.463 s/op
Iteration  31: 2.452 s/op
Iteration  32: 2.460 s/op
Iteration  33: 2.457 s/op
Iteration  34: 2.461 s/op
Iteration  35: 2.461 s/op
Iteration  36: 2.451 s/op
Iteration  37: 2.470 s/op
Iteration  38: 2.462 s/op
Iteration  39: 2.462 s/op
Iteration  40: 2.463 s/op
Iteration  41: 2.456 s/op
Iteration  42: 2.440 s/op
Iteration  43: 2.462 s/op
Iteration  44: 2.459 s/op
Iteration  45: 2.444 s/op
Iteration  46: 2.457 s/op
Iteration  47: 2.463 s/op
Iteration  48: 2.459 s/op
Iteration  49: 2.464 s/op
Iteration  50: 2.463 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      2.484 ?(99.9%) 0.069 s/op

  Histogram, s/op:
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 47 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 0 
    [2.900, 3.000) = 0 
    [3.000, 3.100) = 1 
    [3.100, 3.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.348 s/op
     p(50.0000) =      2.461 s/op
     p(90.0000) =      2.467 s/op
     p(95.0000) =      2.746 s/op
     p(99.0000) =      3.215 s/op
     p(99.9000) =      3.215 s/op
     p(99.9900) =      3.215 s/op
     p(99.9990) =      3.215 s/op
     p(99.9999) =      3.215 s/op
    p(100.0000) =      3.215 s/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.484 ? 0.069   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_graalvm-ee-19.1.1_1564556275444.json
{"wallclock_times": [125.05220409800003], "core_cycle_counts": [[93470406696], [97678457702], [122941833823], [93300270078]], "aperf_counts": [[93150653072], [97640635837], [122918399098], [93275142977]], "mperf_counts": [[93159036662], [97642086014], [122920444210], [93291795230]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 09:00:00: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-07-31 09:00:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 09:00:01: INFO] 163 executions left in scheduler queue
[2019-07-31 09:00:01: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-07-31 09:00:01: INFO] Estimated completion (next execution): 2019-07-31 09:04:36 (0:04:35 from now)
[2019-07-31 09:00:01: INFO] Reboot in preparation for next execution
[2019-07-31 09:05:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 09:05:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 09:05:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 09:05:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 09:05:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 09:15:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.067 s/op
Iteration   2: 12.817 s/op
Iteration   3: 12.792 s/op
Iteration   4: 12.981 s/op
Iteration   5: 12.718 s/op
Iteration   6: 12.891 s/op
Iteration   7: 12.784 s/op
Iteration   8: 12.861 s/op
Iteration   9: 12.596 s/op
Iteration  10: 12.869 s/op
Iteration  11: 12.689 s/op
Iteration  12: 12.682 s/op
Iteration  13: 12.812 s/op
Iteration  14: 12.733 s/op
Iteration  15: 12.795 s/op
Iteration  16: 12.633 s/op
Iteration  17: 13.139 s/op
Iteration  18: 12.957 s/op
Iteration  19: 13.119 s/op
Iteration  20: 13.047 s/op
Iteration  21: 13.051 s/op
Iteration  22: 12.929 s/op
Iteration  23: 12.965 s/op
Iteration  24: 13.072 s/op
Iteration  25: 13.089 s/op
Iteration  26: 13.026 s/op
Iteration  27: 13.031 s/op
Iteration  28: 12.919 s/op
Iteration  29: 13.128 s/op
Iteration  30: 12.967 s/op
Iteration  31: 13.115 s/op
Iteration  32: 13.165 s/op
Iteration  33: 12.930 s/op
Iteration  34: 13.162 s/op
Iteration  35: 12.970 s/op
Iteration  36: 13.115 s/op
Iteration  37: 13.074 s/op
Iteration  38: 12.995 s/op
Iteration  39: 13.022 s/op
Iteration  40: 12.987 s/op
Iteration  41: 12.978 s/op
Iteration  42: 13.140 s/op
Iteration  43: 13.144 s/op
Iteration  44: 13.030 s/op
Iteration  45: 13.025 s/op
Iteration  46: 12.970 s/op
Iteration  47: 13.004 s/op
Iteration  48: 13.121 s/op
Iteration  49: 13.102 s/op
Iteration  50: 13.027 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.965 ?(99.9%) 0.074 s/op

  Histogram, s/op:
    [12.500, 12.550) = 0 
    [12.550, 12.600) = 1 
    [12.600, 12.650) = 1 
    [12.650, 12.700) = 2 
    [12.700, 12.750) = 2 
    [12.750, 12.800) = 3 
    [12.800, 12.850) = 2 
    [12.850, 12.900) = 3 
    [12.900, 12.950) = 3 
    [12.950, 13.000) = 9 
    [13.000, 13.050) = 8 
    [13.050, 13.100) = 5 
    [13.100, 13.150) = 9 
    [13.150, 13.200) = 2 

  Percentiles, s/op:
      p(0.0000) =     12.596 s/op
     p(50.0000) =     12.991 s/op
     p(90.0000) =     13.138 s/op
     p(95.0000) =     13.152 s/op
     p(99.0000) =     13.165 s/op
     p(99.9000) =     13.165 s/op
     p(99.9900) =     13.165 s/op
     p(99.9990) =     13.165 s/op
     p(99.9999) =     13.165 s/op
    p(100.0000) =     13.165 s/op


# Run complete. Total time: 00:10:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.965 ? 0.074   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_hotspot_12.0.2_1564556710411.json
{"wallclock_times": [649.304181832], "core_cycle_counts": [[399706777257], [522191811467], [670180126073], [688584751908]], "aperf_counts": [[397693214257], [521844929936], [669839740647], [688223530748]], "mperf_counts": [[408929073580], [538143126732], [690892288554], [711972630502]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 09:15:59: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-07-31 09:16:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 09:16:00: INFO] 162 executions left in scheduler queue
[2019-07-31 09:16:00: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-31 09:16:00: INFO] Estimated completion (next execution): 2019-07-31 09:29:20 (0:13:19 from now)
[2019-07-31 09:16:00: INFO] Reboot in preparation for next execution
[2019-07-31 09:22:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.313 s/op
Iteration   2: 0.917 s/op
Iteration   3: 0.827 s/op
Iteration   4: 0.911 s/op
Iteration   5: 0.820 s/op
Iteration   6: 0.823 s/op
Iteration   7: 0.822 s/op
Iteration   8: 0.822 s/op
Iteration   9: 0.822 s/op
Iteration  10: 0.818 s/op
Iteration  11: 0.820 s/op
Iteration  12: 0.827 s/op
Iteration  13: 0.822 s/op
Iteration  14: 0.821 s/op
Iteration  15: 0.827 s/op
Iteration  16: 0.818 s/op
Iteration  17: 0.823 s/op
Iteration  18: 0.824 s/op
Iteration  19: 0.818 s/op
Iteration  20: 0.827 s/op
Iteration  21: 0.824 s/op
Iteration  22: 0.820 s/op
Iteration  23: 0.836 s/op
Iteration  24: 0.822 s/op
Iteration  25: 0.827 s/op
Iteration  26: 0.828 s/op
Iteration  27: 0.824 s/op
Iteration  28: 0.822 s/op
Iteration  29: 0.821 s/op
Iteration  30: 0.823 s/op
Iteration  31: 0.820 s/op
Iteration  32: 0.824 s/op
Iteration  33: 0.819 s/op
Iteration  34: 0.819 s/op
Iteration  35: 0.824 s/op
Iteration  36: 0.823 s/op
Iteration  37: 0.825 s/op
Iteration  38: 0.821 s/op
Iteration  39: 0.818 s/op
Iteration  40: 0.825 s/op
Iteration  41: 0.820 s/op
Iteration  42: 0.823 s/op
Iteration  43: 0.825 s/op
Iteration  44: 0.821 s/op
Iteration  45: 0.831 s/op
Iteration  46: 0.825 s/op
Iteration  47: 0.822 s/op
Iteration  48: 0.821 s/op
Iteration  49: 0.818 s/op
Iteration  50: 0.821 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      0.836 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [0.800, 0.850) = 47 
    [0.850, 0.900) = 0 
    [0.900, 0.950) = 2 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.818 s/op
     p(50.0000) =      0.822 s/op
     p(90.0000) =      0.831 s/op
     p(95.0000) =      0.914 s/op
     p(99.0000) =      1.313 s/op
     p(99.9000) =      1.313 s/op
     p(99.9900) =      1.313 s/op
     p(99.9990) =      1.313 s/op
     p(99.9999) =      1.313 s/op
    p(100.0000) =      1.313 s/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.836 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_graalvm-ee-19.1.1_1564557715780.json
{"wallclock_times": [42.72355589299997], "core_cycle_counts": [[33311071323], [42203599064], [43301884432], [29784931766]], "aperf_counts": [[33145015408], [42180366492], [43277958438], [29766056907]], "mperf_counts": [[33166816592], [42180886490], [43278340128], [29770740830]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 09:22:38: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-31 09:22:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 09:22:39: INFO] 161 executions left in scheduler queue
[2019-07-31 09:22:39: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-31 09:22:39: INFO] Estimated completion (next execution): 2019-07-31 09:25:52 (0:03:12 from now)
[2019-07-31 09:22:39: INFO] Reboot in preparation for next execution
[2019-07-31 09:29:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.769 s/op
Iteration   2: 1.431 s/op
Iteration   3: 1.486 s/op
Iteration   4: 1.377 s/op
Iteration   5: 1.378 s/op
Iteration   6: 1.378 s/op
Iteration   7: 1.377 s/op
Iteration   8: 1.378 s/op
Iteration   9: 1.378 s/op
Iteration  10: 1.376 s/op
Iteration  11: 1.379 s/op
Iteration  12: 1.377 s/op
Iteration  13: 1.378 s/op
Iteration  14: 1.378 s/op
Iteration  15: 1.377 s/op
Iteration  16: 1.379 s/op
Iteration  17: 1.379 s/op
Iteration  18: 1.377 s/op
Iteration  19: 1.378 s/op
Iteration  20: 1.378 s/op
Iteration  21: 1.378 s/op
Iteration  22: 1.377 s/op
Iteration  23: 1.378 s/op
Iteration  24: 1.377 s/op
Iteration  25: 1.377 s/op
Iteration  26: 1.381 s/op
Iteration  27: 1.380 s/op
Iteration  28: 1.380 s/op
Iteration  29: 1.380 s/op
Iteration  30: 1.378 s/op
Iteration  31: 1.377 s/op
Iteration  32: 1.376 s/op
Iteration  33: 1.377 s/op
Iteration  34: 1.376 s/op
Iteration  35: 1.376 s/op
Iteration  36: 1.376 s/op
Iteration  37: 1.377 s/op
Iteration  38: 1.378 s/op
Iteration  39: 1.375 s/op
Iteration  40: 1.378 s/op
Iteration  41: 1.378 s/op
Iteration  42: 1.378 s/op
Iteration  43: 1.378 s/op
Iteration  44: 1.378 s/op
Iteration  45: 1.378 s/op
Iteration  46: 1.378 s/op
Iteration  47: 1.379 s/op
Iteration  48: 1.378 s/op
Iteration  49: 1.378 s/op
Iteration  50: 1.376 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.389 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 47 
    [1.400, 1.450) = 1 
    [1.450, 1.500) = 1 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.375 s/op
     p(50.0000) =      1.378 s/op
     p(90.0000) =      1.380 s/op
     p(95.0000) =      1.455 s/op
     p(99.0000) =      1.769 s/op
     p(99.9000) =      1.769 s/op
     p(99.9900) =      1.769 s/op
     p(99.9990) =      1.769 s/op
     p(99.9999) =      1.769 s/op
    p(100.0000) =      1.769 s/op


# Run complete. Total time: 00:01:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.389 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_graalvm-ee-19.1.1_1564558115646.json
{"wallclock_times": [70.29718229299999], "core_cycle_counts": [[69961215546], [81208131320], [38683161423], [40503318101]], "aperf_counts": [[69801191518], [81183994920], [38668657430], [40486039440]], "mperf_counts": [[69825595802], [81186389916], [38670687214], [40486740894]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 09:29:45: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-31 09:29:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 09:29:46: INFO] 160 executions left in scheduler queue
[2019-07-31 09:29:46: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-07-31 09:29:46: INFO] Estimated completion (next execution): 2019-07-31 09:33:27 (0:03:40 from now)
[2019-07-31 09:29:46: INFO] Reboot in preparation for next execution
[2019-07-31 09:38:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.877 s/op
Iteration   2: 2.903 s/op
Iteration   3: 2.575 s/op
Iteration   4: 2.849 s/op
Iteration   5: 2.846 s/op
Iteration   6: 2.842 s/op
Iteration   7: 2.849 s/op
Iteration   8: 2.850 s/op
Iteration   9: 2.843 s/op
Iteration  10: 2.851 s/op
Iteration  11: 2.846 s/op
Iteration  12: 2.843 s/op
Iteration  13: 2.840 s/op
Iteration  14: 2.843 s/op
Iteration  15: 2.848 s/op
Iteration  16: 2.843 s/op
Iteration  17: 2.855 s/op
Iteration  18: 2.841 s/op
Iteration  19: 2.845 s/op
Iteration  20: 2.870 s/op
Iteration  21: 2.870 s/op
Iteration  22: 2.849 s/op
Iteration  23: 2.876 s/op
Iteration  24: 2.843 s/op
Iteration  25: 2.846 s/op
Iteration  26: 2.845 s/op
Iteration  27: 2.849 s/op
Iteration  28: 2.843 s/op
Iteration  29: 2.845 s/op
Iteration  30: 2.843 s/op
Iteration  31: 2.847 s/op
Iteration  32: 2.840 s/op
Iteration  33: 2.857 s/op
Iteration  34: 2.882 s/op
Iteration  35: 2.848 s/op
Iteration  36: 2.841 s/op
Iteration  37: 2.843 s/op
Iteration  38: 2.845 s/op
Iteration  39: 2.844 s/op
Iteration  40: 2.841 s/op
Iteration  41: 2.849 s/op
Iteration  42: 2.840 s/op
Iteration  43: 2.846 s/op
Iteration  44: 2.852 s/op
Iteration  45: 2.841 s/op
Iteration  46: 2.846 s/op
Iteration  47: 2.853 s/op
Iteration  48: 2.844 s/op
Iteration  49: 2.841 s/op
Iteration  50: 2.869 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      2.845 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 36 
    [2.850, 2.900) = 12 
    [2.900, 2.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.575 s/op
     p(50.0000) =      2.846 s/op
     p(90.0000) =      2.870 s/op
     p(95.0000) =      2.880 s/op
     p(99.0000) =      2.903 s/op
     p(99.9000) =      2.903 s/op
     p(99.9900) =      2.903 s/op
     p(99.9990) =      2.903 s/op
     p(99.9999) =      2.903 s/op
    p(100.0000) =      2.903 s/op


# Run complete. Total time: 00:02:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.845 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_graalvm-ee-19.1.1_1564558558878.json
{"wallclock_times": [143.09345374000003], "core_cycle_counts": [[151140022035], [112877984268], [86418019928], [114863032948]], "aperf_counts": [[150817060822], [112823164330], [86389413700], [114834461489]], "mperf_counts": [[150827087582], [112840407426], [86390121222], [114836186068]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 09:38:21: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-07-31 09:38:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 09:38:22: INFO] 159 executions left in scheduler queue
[2019-07-31 09:38:22: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-07-31 09:38:22: INFO] Estimated completion (next execution): 2019-07-31 09:43:16 (0:04:53 from now)
[2019-07-31 09:38:22: INFO] Reboot in preparation for next execution
[2019-07-31 09:57:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.025 s/op
Iteration   2: 11.783 s/op
Iteration   3: 11.875 s/op
Iteration   4: 11.566 s/op
Iteration   5: 11.573 s/op
Iteration   6: 11.697 s/op
Iteration   7: 11.811 s/op
Iteration   8: 11.674 s/op
Iteration   9: 11.700 s/op
Iteration  10: 11.845 s/op
Iteration  11: 11.664 s/op
Iteration  12: 12.300 s/op
Iteration  13: 11.946 s/op
Iteration  14: 11.585 s/op
Iteration  15: 11.666 s/op
Iteration  16: 11.697 s/op
Iteration  17: 11.749 s/op
Iteration  18: 11.572 s/op
Iteration  19: 11.688 s/op
Iteration  20: 11.735 s/op
Iteration  21: 11.808 s/op
Iteration  22: 11.683 s/op
Iteration  23: 12.256 s/op
Iteration  24: 11.744 s/op
Iteration  25: 11.574 s/op
Iteration  26: 11.608 s/op
Iteration  27: 11.666 s/op
Iteration  28: 11.738 s/op
Iteration  29: 11.585 s/op
Iteration  30: 11.681 s/op
Iteration  31: 11.717 s/op
Iteration  32: 11.776 s/op
Iteration  33: 11.668 s/op
Iteration  34: 12.176 s/op
Iteration  35: 11.724 s/op
Iteration  36: 11.543 s/op
Iteration  37: 11.632 s/op
Iteration  38: 11.677 s/op
Iteration  39: 11.788 s/op
Iteration  40: 11.590 s/op
Iteration  41: 11.677 s/op
Iteration  42: 11.783 s/op
Iteration  43: 11.580 s/op
Iteration  44: 11.655 s/op
Iteration  45: 12.202 s/op
Iteration  46: 11.725 s/op
Iteration  47: 11.594 s/op
Iteration  48: 11.667 s/op
Iteration  49: 11.701 s/op
Iteration  50: 11.782 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.743 ?(99.9%) 0.087 s/op

  Histogram, s/op:
    [11.500, 11.550) = 1 
    [11.550, 11.600) = 9 
    [11.600, 11.650) = 2 
    [11.650, 11.700) = 15 
    [11.700, 11.750) = 8 
    [11.750, 11.800) = 5 
    [11.800, 11.850) = 3 
    [11.850, 11.900) = 1 
    [11.900, 11.950) = 1 
    [11.950, 12.000) = 0 
    [12.000, 12.050) = 1 
    [12.050, 12.100) = 0 
    [12.100, 12.150) = 0 
    [12.150, 12.200) = 1 
    [12.200, 12.250) = 1 
    [12.250, 12.300) = 2 

  Percentiles, s/op:
      p(0.0000) =     11.543 s/op
     p(50.0000) =     11.697 s/op
     p(90.0000) =     12.017 s/op
     p(95.0000) =     12.226 s/op
     p(99.0000) =     12.300 s/op
     p(99.9000) =     12.300 s/op
     p(99.9900) =     12.300 s/op
     p(99.9990) =     12.300 s/op
     p(99.9999) =     12.300 s/op
    p(100.0000) =     12.300 s/op


# Run complete. Total time: 00:09:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.743 ? 0.087   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot-8u222-b10_1564559252944.json
{"wallclock_times": [588.5360915939999], "core_cycle_counts": [[516445179581], [558813156381], [527873632468], [580641821945]], "aperf_counts": [[514855743182], [558640236985], [527765842017], [580560942893]], "mperf_counts": [[514858020296], [558640372878], [527779640044], [580569033140]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 09:57:21: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-07-31 09:57:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 09:57:22: INFO] 158 executions left in scheduler queue
[2019-07-31 09:57:22: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 09:57:22: INFO] Estimated completion (next execution): 2019-07-31 10:09:41 (0:12:18 from now)
[2019-07-31 09:57:22: INFO] Reboot in preparation for next execution
[2019-07-31 10:01:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 10:01:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 10:01:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 10:01:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 10:01:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 10:01:34: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 10:09:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.303 s/op
Iteration   2: 9.300 s/op
Iteration   3: 9.358 s/op
Iteration   4: 9.086 s/op
Iteration   5: 9.104 s/op
Iteration   6: 9.193 s/op
Iteration   7: 9.091 s/op
Iteration   8: 9.174 s/op
Iteration   9: 9.129 s/op
Iteration  10: 9.059 s/op
Iteration  11: 9.087 s/op
Iteration  12: 9.091 s/op
Iteration  13: 9.086 s/op
Iteration  14: 9.079 s/op
Iteration  15: 9.076 s/op
Iteration  16: 9.074 s/op
Iteration  17: 9.126 s/op
Iteration  18: 9.105 s/op
Iteration  19: 9.065 s/op
Iteration  20: 9.079 s/op
Iteration  21: 9.092 s/op
Iteration  22: 9.100 s/op
Iteration  23: 9.082 s/op
Iteration  24: 9.151 s/op
Iteration  25: 9.090 s/op
Iteration  26: 9.057 s/op
Iteration  27: 9.125 s/op
Iteration  28: 9.096 s/op
Iteration  29: 9.086 s/op
Iteration  30: 9.052 s/op
Iteration  31: 9.089 s/op
Iteration  32: 9.029 s/op
Iteration  33: 9.103 s/op
Iteration  34: 9.108 s/op
Iteration  35: 9.075 s/op
Iteration  36: 9.066 s/op
Iteration  37: 9.128 s/op
Iteration  38: 9.103 s/op
Iteration  39: 9.129 s/op
Iteration  40: 9.102 s/op
Iteration  41: 9.087 s/op
Iteration  42: 9.093 s/op
Iteration  43: 9.096 s/op
Iteration  44: 9.154 s/op
Iteration  45: 9.117 s/op
Iteration  46: 9.112 s/op
Iteration  47: 9.122 s/op
Iteration  48: 9.107 s/op
Iteration  49: 9.054 s/op
Iteration  50: 9.102 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.151 ?(99.9%) 0.156 s/op

  Histogram, s/op:
    [ 9.000,  9.250) = 47 
    [ 9.250,  9.500) = 2 
    [ 9.500,  9.750) = 0 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 1 
    [11.500, 11.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.029 s/op
     p(50.0000) =      9.096 s/op
     p(90.0000) =      9.172 s/op
     p(95.0000) =      9.326 s/op
     p(99.0000) =     11.303 s/op
     p(99.9000) =     11.303 s/op
     p(99.9900) =     11.303 s/op
     p(99.9990) =     11.303 s/op
     p(99.9999) =     11.303 s/op
    p(100.0000) =     11.303 s/op


# Run complete. Total time: 00:07:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.151 ? 0.156   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_11.0.4_1564560093937.json
{"wallclock_times": [459.1773035240001], "core_cycle_counts": [[344657359296], [344450574628], [525891274366], [423640164171]], "aperf_counts": [[343426939917], [344311421429], [525770314910], [423552461499]], "mperf_counts": [[343439778644], [344311465112], [525770335480], [423552482672]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 10:09:13: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 10:09:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 10:09:14: INFO] 157 executions left in scheduler queue
[2019-07-31 10:09:14: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 10:09:14: INFO] Estimated completion (next execution): 2019-07-31 10:19:23 (0:10:09 from now)
[2019-07-31 10:09:14: INFO] Reboot in preparation for next execution
[2019-07-31 10:13:50: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 10:13:50: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 10:13:50: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 10:13:50: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 10:13:50: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 10:13:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 10:19:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.912 s/op
Iteration   2: 6.847 s/op
Iteration   3: 6.490 s/op
Iteration   4: 7.513 s/op
Iteration   5: 7.651 s/op
Iteration   6: 6.179 s/op
Iteration   7: 6.147 s/op
Iteration   8: 6.096 s/op
Iteration   9: 6.023 s/op
Iteration  10: 6.060 s/op
Iteration  11: 6.105 s/op
Iteration  12: 6.005 s/op
Iteration  13: 6.014 s/op
Iteration  14: 6.138 s/op
Iteration  15: 6.057 s/op
Iteration  16: 6.060 s/op
Iteration  17: 6.035 s/op
Iteration  18: 6.028 s/op
Iteration  19: 6.048 s/op
Iteration  20: 6.131 s/op
Iteration  21: 6.067 s/op
Iteration  22: 6.051 s/op
Iteration  23: 6.015 s/op
Iteration  24: 6.117 s/op
Iteration  25: 6.188 s/op
Iteration  26: 6.025 s/op
Iteration  27: 6.067 s/op
Iteration  28: 6.050 s/op
Iteration  29: 6.096 s/op
Iteration  30: 6.066 s/op
Iteration  31: 6.096 s/op
Iteration  32: 6.044 s/op
Iteration  33: 6.090 s/op
Iteration  34: 6.046 s/op
Iteration  35: 6.020 s/op
Iteration  36: 6.070 s/op
Iteration  37: 6.035 s/op
Iteration  38: 6.239 s/op
Iteration  39: 6.123 s/op
Iteration  40: 6.058 s/op
Iteration  41: 6.035 s/op
Iteration  42: 6.092 s/op
Iteration  43: 6.138 s/op
Iteration  44: 6.084 s/op
Iteration  45: 6.167 s/op
Iteration  46: 5.994 s/op
Iteration  47: 6.047 s/op
Iteration  48: 6.132 s/op
Iteration  49: 6.051 s/op
Iteration  50: 6.046 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.198 ?(99.9%) 0.201 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 1 
    [6.000, 6.250) = 44 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 1 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 2 

  Percentiles, s/op:
      p(0.0000) =      5.994 s/op
     p(50.0000) =      6.067 s/op
     p(90.0000) =      6.465 s/op
     p(95.0000) =      7.575 s/op
     p(99.0000) =      7.912 s/op
     p(99.9000) =      7.912 s/op
     p(99.9900) =      7.912 s/op
     p(99.9990) =      7.912 s/op
     p(99.9999) =      7.912 s/op
    p(100.0000) =      7.912 s/op


# Run complete. Total time: 00:05:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.198 ? 0.201   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_11.0.4_1564560829971.json
{"wallclock_times": [311.73156144300003], "core_cycle_counts": [[205356669408], [242556637530], [292942220424], [384238615055]], "aperf_counts": [[204435030624], [242434514115], [292862289552], [384144253658]], "mperf_counts": [[204440020732], [242434552532], [292862714254], [384144245672]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 10:19:01: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 10:19:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 10:19:02: INFO] 156 executions left in scheduler queue
[2019-07-31 10:19:02: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 10:19:02: INFO] Estimated completion (next execution): 2019-07-31 10:26:44 (0:07:42 from now)
[2019-07-31 10:19:02: INFO] Reboot in preparation for next execution
[2019-07-31 10:23:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 10:23:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 10:23:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 10:23:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 10:23:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 10:23:33: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 10:28:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.338 s/op
Iteration   2: 6.120 s/op
Iteration   3: 5.481 s/op
Iteration   4: 5.410 s/op
Iteration   5: 5.498 s/op
Iteration   6: 5.463 s/op
Iteration   7: 5.485 s/op
Iteration   8: 5.512 s/op
Iteration   9: 5.439 s/op
Iteration  10: 5.442 s/op
Iteration  11: 5.429 s/op
Iteration  12: 5.418 s/op
Iteration  13: 5.428 s/op
Iteration  14: 5.491 s/op
Iteration  15: 5.479 s/op
Iteration  16: 5.479 s/op
Iteration  17: 5.452 s/op
Iteration  18: 5.467 s/op
Iteration  19: 5.458 s/op
Iteration  20: 5.428 s/op
Iteration  21: 5.453 s/op
Iteration  22: 5.426 s/op
Iteration  23: 5.468 s/op
Iteration  24: 5.445 s/op
Iteration  25: 5.451 s/op
Iteration  26: 5.454 s/op
Iteration  27: 5.355 s/op
Iteration  28: 5.325 s/op
Iteration  29: 5.400 s/op
Iteration  30: 5.382 s/op
Iteration  31: 5.345 s/op
Iteration  32: 5.350 s/op
Iteration  33: 5.361 s/op
Iteration  34: 5.365 s/op
Iteration  35: 5.350 s/op
Iteration  36: 5.352 s/op
Iteration  37: 5.396 s/op
Iteration  38: 5.380 s/op
Iteration  39: 5.382 s/op
Iteration  40: 5.392 s/op
Iteration  41: 5.377 s/op
Iteration  42: 5.391 s/op
Iteration  43: 5.344 s/op
Iteration  44: 5.381 s/op
Iteration  45: 5.419 s/op
Iteration  46: 5.391 s/op
Iteration  47: 5.402 s/op
Iteration  48: 5.349 s/op
Iteration  49: 5.356 s/op
Iteration  50: 5.395 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.467 ?(99.9%) 0.144 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 47 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.325 s/op
     p(50.0000) =      5.418 s/op
     p(90.0000) =      5.490 s/op
     p(95.0000) =      5.786 s/op
     p(99.0000) =      7.338 s/op
     p(99.9000) =      7.338 s/op
     p(99.9900) =      7.338 s/op
     p(99.9990) =      7.338 s/op
     p(99.9999) =      7.338 s/op
    p(100.0000) =      7.338 s/op


# Run complete. Total time: 00:04:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.467 ? 0.144   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_11.0.4_1564561413145.json
{"wallclock_times": [275.254265533], "core_cycle_counts": [[300614997949], [172089725967], [463597510234], [164733293843]], "aperf_counts": [[299853515981], [171894771397], [463522133964], [164597756680]], "mperf_counts": [[299859139750], [171894750628], [463522126926], [164597737188]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 10:28:08: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 10:28:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 10:28:09: INFO] 155 executions left in scheduler queue
[2019-07-31 10:28:09: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 10:28:09: INFO] Estimated completion (next execution): 2019-07-31 10:35:15 (0:07:05 from now)
[2019-07-31 10:28:09: INFO] Reboot in preparation for next execution
[2019-07-31 10:32:56: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 10:32:56: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 10:32:56: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 10:32:56: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 10:32:56: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 10:32:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 10:44:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.346 s/op
Iteration   2: 14.723 s/op
Iteration   3: 14.522 s/op
Iteration   4: 14.347 s/op
Iteration   5: 14.327 s/op
Iteration   6: 14.257 s/op
Iteration   7: 14.265 s/op
Iteration   8: 14.348 s/op
Iteration   9: 14.213 s/op
Iteration  10: 14.313 s/op
Iteration  11: 14.405 s/op
Iteration  12: 14.281 s/op
Iteration  13: 14.751 s/op
Iteration  14: 14.341 s/op
Iteration  15: 14.274 s/op
Iteration  16: 14.320 s/op
Iteration  17: 14.354 s/op
Iteration  18: 14.386 s/op
Iteration  19: 14.260 s/op
Iteration  20: 14.370 s/op
Iteration  21: 14.358 s/op
Iteration  22: 14.436 s/op
Iteration  23: 14.315 s/op
Iteration  24: 14.345 s/op
Iteration  25: 14.354 s/op
Iteration  26: 14.276 s/op
Iteration  27: 14.312 s/op
Iteration  28: 14.348 s/op
Iteration  29: 14.627 s/op
Iteration  30: 14.345 s/op
Iteration  31: 14.359 s/op
Iteration  32: 14.392 s/op
Iteration  33: 14.255 s/op
Iteration  34: 14.395 s/op
Iteration  35: 14.350 s/op
Iteration  36: 14.260 s/op
Iteration  37: 14.321 s/op
Iteration  38: 14.502 s/op
Iteration  39: 14.478 s/op
Iteration  40: 14.316 s/op
Iteration  41: 14.340 s/op
Iteration  42: 14.310 s/op
Iteration  43: 14.407 s/op
Iteration  44: 14.423 s/op
Iteration  45: 14.430 s/op
Iteration  46: 14.347 s/op
Iteration  47: 14.285 s/op
Iteration  48: 14.337 s/op
Iteration  49: 14.385 s/op
Iteration  50: 14.343 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.407 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [14.000, 14.250) = 1 
    [14.250, 14.500) = 43 
    [14.500, 14.750) = 4 
    [14.750, 15.000) = 1 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.213 s/op
     p(50.0000) =     14.347 s/op
     p(90.0000) =     14.520 s/op
     p(95.0000) =     14.735 s/op
     p(99.0000) =     16.346 s/op
     p(99.9000) =     16.346 s/op
     p(99.9900) =     16.346 s/op
     p(99.9990) =     16.346 s/op
     p(99.9999) =     16.346 s/op
    p(100.0000) =     16.346 s/op


# Run complete. Total time: 00:12:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.407 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_11.0.4_1564561976571.json
{"wallclock_times": [722.067278665], "core_cycle_counts": [[678111500981], [518258207848], [627026222193], [672031936748]], "aperf_counts": [[676342159565], [518100742446], [626838116416], [671872266690]], "mperf_counts": [[676350425580], [518101475738], [626838075252], [671872790876]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 10:44:58: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-31 10:44:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 10:44:59: INFO] 154 executions left in scheduler queue
[2019-07-31 10:44:59: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 10:44:59: INFO] Estimated completion (next execution): 2019-07-31 10:59:32 (0:14:32 from now)
[2019-07-31 10:44:59: INFO] Reboot in preparation for next execution
[2019-07-31 10:49:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 10:54:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.620 s/op
Iteration   2: 6.613 s/op
Iteration   3: 6.383 s/op
Iteration   4: 6.497 s/op
Iteration   5: 6.302 s/op
Iteration   6: 6.240 s/op
Iteration   7: 6.171 s/op
Iteration   8: 6.164 s/op
Iteration   9: 6.200 s/op
Iteration  10: 6.100 s/op
Iteration  11: 6.261 s/op
Iteration  12: 6.250 s/op
Iteration  13: 6.262 s/op
Iteration  14: 6.088 s/op
Iteration  15: 6.121 s/op
Iteration  16: 6.152 s/op
Iteration  17: 6.256 s/op
Iteration  18: 6.119 s/op
Iteration  19: 6.228 s/op
Iteration  20: 6.225 s/op
Iteration  21: 6.246 s/op
Iteration  22: 6.210 s/op
Iteration  23: 6.272 s/op
Iteration  24: 6.282 s/op
Iteration  25: 6.258 s/op
Iteration  26: 6.223 s/op
Iteration  27: 6.294 s/op
Iteration  28: 6.216 s/op
Iteration  29: 6.231 s/op
Iteration  30: 6.137 s/op
Iteration  31: 6.264 s/op
Iteration  32: 6.226 s/op
Iteration  33: 6.264 s/op
Iteration  34: 6.213 s/op
Iteration  35: 6.253 s/op
Iteration  36: 6.218 s/op
Iteration  37: 6.252 s/op
Iteration  38: 6.187 s/op
Iteration  39: 6.196 s/op
Iteration  40: 6.189 s/op
Iteration  41: 6.128 s/op
Iteration  42: 6.258 s/op
Iteration  43: 6.244 s/op
Iteration  44: 6.268 s/op
Iteration  45: 6.251 s/op
Iteration  46: 6.218 s/op
Iteration  47: 6.098 s/op
Iteration  48: 6.230 s/op
Iteration  49: 6.215 s/op
Iteration  50: 6.147 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.259 ?(99.9%) 0.107 s/op

  Histogram, s/op:
    [6.000, 6.125) = 5 
    [6.125, 6.250) = 26 
    [6.250, 6.375) = 15 
    [6.375, 6.500) = 2 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 1 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.088 s/op
     p(50.0000) =      6.229 s/op
     p(90.0000) =      6.302 s/op
     p(95.0000) =      6.549 s/op
     p(99.0000) =      7.620 s/op
     p(99.9000) =      7.620 s/op
     p(99.9900) =      7.620 s/op
     p(99.9990) =      7.620 s/op
     p(99.9999) =      7.620 s/op
    p(100.0000) =      7.620 s/op


# Run complete. Total time: 00:05:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  6.259 ? 0.107   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9-8u222-b10_1564562951524.json
{"wallclock_times": [314.148504559], "core_cycle_counts": [[250075659397], [317336511582], [315632634742], [186470439622]], "aperf_counts": [[249257764956], [317244362679], [315551036401], [186414095512]], "mperf_counts": [[249265326388], [317244622406], [315552195860], [186414431558]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 10:54:25: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 10:54:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 10:54:26: INFO] 153 executions left in scheduler queue
[2019-07-31 10:54:26: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 10:54:26: INFO] Estimated completion (next execution): 2019-07-31 11:02:11 (0:07:44 from now)
[2019-07-31 10:54:26: INFO] Reboot in preparation for next execution
[2019-07-31 11:00:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 11:07:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.837 s/op
Iteration   2: 8.803 s/op
Iteration   3: 9.049 s/op
Iteration   4: 8.845 s/op
Iteration   5: 8.962 s/op
Iteration   6: 8.898 s/op
Iteration   7: 8.958 s/op
Iteration   8: 8.877 s/op
Iteration   9: 8.975 s/op
Iteration  10: 8.791 s/op
Iteration  11: 8.721 s/op
Iteration  12: 8.844 s/op
Iteration  13: 8.735 s/op
Iteration  14: 8.832 s/op
Iteration  15: 8.850 s/op
Iteration  16: 8.907 s/op
Iteration  17: 8.786 s/op
Iteration  18: 8.917 s/op
Iteration  19: 8.806 s/op
Iteration  20: 8.738 s/op
Iteration  21: 8.870 s/op
Iteration  22: 8.832 s/op
Iteration  23: 8.897 s/op
Iteration  24: 8.800 s/op
Iteration  25: 8.736 s/op
Iteration  26: 8.813 s/op
Iteration  27: 8.697 s/op
Iteration  28: 8.902 s/op
Iteration  29: 8.773 s/op
Iteration  30: 8.887 s/op
Iteration  31: 8.801 s/op
Iteration  32: 8.682 s/op
Iteration  33: 8.781 s/op
Iteration  34: 8.701 s/op
Iteration  35: 8.805 s/op
Iteration  36: 8.703 s/op
Iteration  37: 8.863 s/op
Iteration  38: 8.734 s/op
Iteration  39: 8.884 s/op
Iteration  40: 8.743 s/op
Iteration  41: 8.867 s/op
Iteration  42: 8.734 s/op
Iteration  43: 8.877 s/op
Iteration  44: 8.751 s/op
Iteration  45: 8.926 s/op
Iteration  46: 8.793 s/op
Iteration  47: 8.775 s/op
Iteration  48: 8.838 s/op
Iteration  49: 8.750 s/op
Iteration  50: 8.887 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.865 ?(99.9%) 0.147 s/op

  Histogram, s/op:
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 12 
    [ 8.750,  9.000) = 36 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.682 s/op
     p(50.0000) =      8.822 s/op
     p(90.0000) =      8.955 s/op
     p(95.0000) =      9.009 s/op
     p(99.0000) =     10.837 s/op
     p(99.9000) =     10.837 s/op
     p(99.9900) =     10.837 s/op
     p(99.9990) =     10.837 s/op
     p(99.9999) =     10.837 s/op
    p(100.0000) =     10.837 s/op


# Run complete. Total time: 00:07:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  8.865 ? 0.147   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9-8u222-b10_1564563606050.json
{"wallclock_times": [444.501184901], "core_cycle_counts": [[509703561232], [222924886292], [393797335172], [347559417513]], "aperf_counts": [[508719634675], [222796036120], [393666513645], [347450767552]], "mperf_counts": [[508722016414], [222795999864], [393666558660], [347450786724]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 11:07:30: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 11:07:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 11:07:31: INFO] 152 executions left in scheduler queue
[2019-07-31 11:07:31: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 11:07:31: INFO] Estimated completion (next execution): 2019-07-31 11:17:26 (0:09:54 from now)
[2019-07-31 11:07:31: INFO] Reboot in preparation for next execution
[2019-07-31 11:11:53: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 11:17:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.290 s/op
Iteration   2: 6.836 s/op
Iteration   3: 6.529 s/op
Iteration   4: 6.512 s/op
Iteration   5: 6.511 s/op
Iteration   6: 6.448 s/op
Iteration   7: 6.367 s/op
Iteration   8: 6.417 s/op
Iteration   9: 6.422 s/op
Iteration  10: 6.422 s/op
Iteration  11: 6.422 s/op
Iteration  12: 6.476 s/op
Iteration  13: 6.442 s/op
Iteration  14: 6.426 s/op
Iteration  15: 6.375 s/op
Iteration  16: 6.347 s/op
Iteration  17: 6.395 s/op
Iteration  18: 6.366 s/op
Iteration  19: 6.356 s/op
Iteration  20: 6.388 s/op
Iteration  21: 6.394 s/op
Iteration  22: 6.336 s/op
Iteration  23: 6.348 s/op
Iteration  24: 6.372 s/op
Iteration  25: 6.344 s/op
Iteration  26: 6.365 s/op
Iteration  27: 6.399 s/op
Iteration  28: 6.389 s/op
Iteration  29: 6.326 s/op
Iteration  30: 6.333 s/op
Iteration  31: 6.338 s/op
Iteration  32: 6.366 s/op
Iteration  33: 6.383 s/op
Iteration  34: 6.373 s/op
Iteration  35: 6.371 s/op
Iteration  36: 6.380 s/op
Iteration  37: 6.388 s/op
Iteration  38: 6.291 s/op
Iteration  39: 6.320 s/op
Iteration  40: 6.353 s/op
Iteration  41: 6.369 s/op
Iteration  42: 6.373 s/op
Iteration  43: 6.412 s/op
Iteration  44: 6.408 s/op
Iteration  45: 6.343 s/op
Iteration  46: 6.332 s/op
Iteration  47: 6.333 s/op
Iteration  48: 6.354 s/op
Iteration  49: 6.360 s/op
Iteration  50: 6.383 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.412 ?(99.9%) 0.074 s/op

  Histogram, s/op:
    [6.200, 6.300) = 1 
    [6.300, 6.400) = 34 
    [6.400, 6.500) = 10 
    [6.500, 6.600) = 3 
    [6.600, 6.700) = 0 
    [6.700, 6.800) = 0 
    [6.800, 6.900) = 1 
    [6.900, 7.000) = 0 
    [7.000, 7.100) = 0 
    [7.100, 7.200) = 0 
    [7.200, 7.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.291 s/op
     p(50.0000) =      6.374 s/op
     p(90.0000) =      6.507 s/op
     p(95.0000) =      6.667 s/op
     p(99.0000) =      7.290 s/op
     p(99.9000) =      7.290 s/op
     p(99.9900) =      7.290 s/op
     p(99.9990) =      7.290 s/op
     p(99.9999) =      7.290 s/op
    p(100.0000) =      7.290 s/op


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.412 ? 0.074   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9-8u222-b10_1564564313608.json
{"wallclock_times": [321.97988382899996], "core_cycle_counts": [[270074552338], [254117980775], [459457288547], [179065880797]], "aperf_counts": [[269204618516], [253970356884], [459353033839], [178973579427]], "mperf_counts": [[269205230930], [253971053792], [459353663648], [178973563926]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 11:17:15: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 11:17:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 11:17:16: INFO] 151 executions left in scheduler queue
[2019-07-31 11:17:16: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 11:17:16: INFO] Estimated completion (next execution): 2019-07-31 11:25:08 (0:07:52 from now)
[2019-07-31 11:17:16: INFO] Reboot in preparation for next execution
[2019-07-31 11:21:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 11:25:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.068 s/op
Iteration   2: 5.443 s/op
Iteration   3: 4.904 s/op
Iteration   4: 4.904 s/op
Iteration   5: 5.013 s/op
Iteration   6: 5.029 s/op
Iteration   7: 4.888 s/op
Iteration   8: 4.892 s/op
Iteration   9: 4.897 s/op
Iteration  10: 4.904 s/op
Iteration  11: 4.921 s/op
Iteration  12: 4.849 s/op
Iteration  13: 4.723 s/op
Iteration  14: 4.972 s/op
Iteration  15: 4.880 s/op
Iteration  16: 4.856 s/op
Iteration  17: 4.881 s/op
Iteration  18: 4.803 s/op
Iteration  19: 4.840 s/op
Iteration  20: 4.842 s/op
Iteration  21: 4.785 s/op
Iteration  22: 4.945 s/op
Iteration  23: 4.973 s/op
Iteration  24: 4.917 s/op
Iteration  25: 4.908 s/op
Iteration  26: 4.842 s/op
Iteration  27: 4.844 s/op
Iteration  28: 4.748 s/op
Iteration  29: 4.886 s/op
Iteration  30: 4.880 s/op
Iteration  31: 4.883 s/op
Iteration  32: 4.861 s/op
Iteration  33: 4.833 s/op
Iteration  34: 4.860 s/op
Iteration  35: 4.806 s/op
Iteration  36: 4.702 s/op
Iteration  37: 4.935 s/op
Iteration  38: 4.943 s/op
Iteration  39: 4.903 s/op
Iteration  40: 4.883 s/op
Iteration  41: 4.824 s/op
Iteration  42: 4.877 s/op
Iteration  43: 4.773 s/op
Iteration  44: 4.774 s/op
Iteration  45: 4.961 s/op
Iteration  46: 4.917 s/op
Iteration  47: 4.885 s/op
Iteration  48: 4.851 s/op
Iteration  49: 4.852 s/op
Iteration  50: 4.807 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.927 ?(99.9%) 0.161 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 3 
    [4.750, 5.000) = 43 
    [5.000, 5.250) = 2 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.702 s/op
     p(50.0000) =      4.882 s/op
     p(90.0000) =      4.973 s/op
     p(95.0000) =      5.215 s/op
     p(99.0000) =      7.068 s/op
     p(99.9000) =      7.068 s/op
     p(99.9900) =      7.068 s/op
     p(99.9990) =      7.068 s/op
     p(99.9999) =      7.068 s/op
    p(100.0000) =      7.068 s/op


# Run complete. Total time: 00:04:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.927 ? 0.161   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9-8u222-b10_1564564889444.json
{"wallclock_times": [247.81407529300003], "core_cycle_counts": [[240695862194], [169804577424], [249452310474], [195363273689]], "aperf_counts": [[240073255748], [169708115285], [249369866277], [195308070518]], "mperf_counts": [[240077101440], [169708295444], [249371934822], [195308768798]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 11:25:37: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-31 11:25:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 11:25:38: INFO] 150 executions left in scheduler queue
[2019-07-31 11:25:38: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 11:25:38: INFO] Estimated completion (next execution): 2019-07-31 11:32:16 (0:06:38 from now)
[2019-07-31 11:25:38: INFO] Reboot in preparation for next execution
[2019-07-31 11:36:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.118 s/op
Iteration   2: 7.923 s/op
Iteration   3: 8.027 s/op
Iteration   4: 8.023 s/op
Iteration   5: 8.009 s/op
Iteration   6: 8.025 s/op
Iteration   7: 8.017 s/op
Iteration   8: 8.019 s/op
Iteration   9: 8.027 s/op
Iteration  10: 8.023 s/op
Iteration  11: 8.026 s/op
Iteration  12: 8.027 s/op
Iteration  13: 8.025 s/op
Iteration  14: 8.025 s/op
Iteration  15: 8.027 s/op
Iteration  16: 8.031 s/op
Iteration  17: 7.893 s/op
Iteration  18: 7.891 s/op
Iteration  19: 7.907 s/op
Iteration  20: 7.865 s/op
Iteration  21: 7.903 s/op
Iteration  22: 7.882 s/op
Iteration  23: 7.893 s/op
Iteration  24: 7.894 s/op
Iteration  25: 7.889 s/op
Iteration  26: 7.888 s/op
Iteration  27: 7.884 s/op
Iteration  28: 7.905 s/op
Iteration  29: 7.888 s/op
Iteration  30: 7.890 s/op
Iteration  31: 7.894 s/op
Iteration  32: 7.881 s/op
Iteration  33: 7.870 s/op
Iteration  34: 7.875 s/op
Iteration  35: 7.880 s/op
Iteration  36: 7.889 s/op
Iteration  37: 7.885 s/op
Iteration  38: 7.881 s/op
Iteration  39: 7.880 s/op
Iteration  40: 7.870 s/op
Iteration  41: 7.872 s/op
Iteration  42: 7.911 s/op
Iteration  43: 7.871 s/op
Iteration  44: 7.889 s/op
Iteration  45: 7.886 s/op
Iteration  46: 7.885 s/op
Iteration  47: 7.886 s/op
Iteration  48: 7.852 s/op
Iteration  49: 7.896 s/op
Iteration  50: 7.881 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.930 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 7 
    [7.875, 7.900) = 23 
    [7.900, 7.925) = 5 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 
    [7.975, 8.000) = 0 
    [8.000, 8.025) = 7 
    [8.025, 8.050) = 7 
    [8.050, 8.075) = 0 
    [8.075, 8.100) = 0 
    [8.100, 8.125) = 1 
    [8.125, 8.150) = 0 
    [8.150, 8.175) = 0 
    [8.175, 8.200) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.852 s/op
     p(50.0000) =      7.892 s/op
     p(90.0000) =      8.027 s/op
     p(95.0000) =      8.029 s/op
     p(99.0000) =      8.118 s/op
     p(99.9000) =      8.118 s/op
     p(99.9900) =      8.118 s/op
     p(99.9990) =      8.118 s/op
     p(99.9999) =      8.118 s/op
    p(100.0000) =      8.118 s/op


# Run complete. Total time: 00:06:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.930 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_graalvm-ee-19.1.1_1564565390497.json
{"wallclock_times": [397.409449871], "core_cycle_counts": [[155576376677], [296488443236], [368966446853], [459806486123]], "aperf_counts": [[154513088033], [296441087881], [368940342287], [459787890795]], "mperf_counts": [[154529860336], [296443026876], [368944990980], [459806410486]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 11:36:27: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 11:36:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 11:36:28: INFO] 149 executions left in scheduler queue
[2019-07-31 11:36:28: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 11:36:28: INFO] Estimated completion (next execution): 2019-07-31 11:45:36 (0:09:07 from now)
[2019-07-31 11:36:28: INFO] Reboot in preparation for next execution
[2019-07-31 11:43:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.568 s/op
Iteration   2: 3.413 s/op
Iteration   3: 3.289 s/op
Iteration   4: 3.266 s/op
Iteration   5: 3.299 s/op
Iteration   6: 3.283 s/op
Iteration   7: 3.278 s/op
Iteration   8: 3.273 s/op
Iteration   9: 3.269 s/op
Iteration  10: 3.269 s/op
Iteration  11: 3.265 s/op
Iteration  12: 3.268 s/op
Iteration  13: 3.268 s/op
Iteration  14: 3.292 s/op
Iteration  15: 3.312 s/op
Iteration  16: 3.258 s/op
Iteration  17: 3.296 s/op
Iteration  18: 3.272 s/op
Iteration  19: 3.274 s/op
Iteration  20: 3.265 s/op
Iteration  21: 3.279 s/op
Iteration  22: 3.276 s/op
Iteration  23: 3.270 s/op
Iteration  24: 3.291 s/op
Iteration  25: 3.279 s/op
Iteration  26: 3.271 s/op
Iteration  27: 3.262 s/op
Iteration  28: 3.289 s/op
Iteration  29: 3.265 s/op
Iteration  30: 3.283 s/op
Iteration  31: 3.282 s/op
Iteration  32: 3.298 s/op
Iteration  33: 3.279 s/op
Iteration  34: 3.281 s/op
Iteration  35: 3.270 s/op
Iteration  36: 3.286 s/op
Iteration  37: 3.288 s/op
Iteration  38: 3.262 s/op
Iteration  39: 3.289 s/op
Iteration  40: 3.292 s/op
Iteration  41: 3.270 s/op
Iteration  42: 3.261 s/op
Iteration  43: 3.286 s/op
Iteration  44: 3.271 s/op
Iteration  45: 3.265 s/op
Iteration  46: 3.265 s/op
Iteration  47: 3.277 s/op
Iteration  48: 3.284 s/op
Iteration  49: 3.285 s/op
Iteration  50: 3.286 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.286 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [3.200, 3.225) = 0 
    [3.225, 3.250) = 0 
    [3.250, 3.275) = 22 
    [3.275, 3.300) = 25 
    [3.300, 3.325) = 1 
    [3.325, 3.350) = 0 
    [3.350, 3.375) = 0 
    [3.375, 3.400) = 0 
    [3.400, 3.425) = 1 
    [3.425, 3.450) = 0 
    [3.450, 3.475) = 0 
    [3.475, 3.500) = 0 
    [3.500, 3.525) = 0 
    [3.525, 3.550) = 0 
    [3.550, 3.575) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.258 s/op
     p(50.0000) =      3.278 s/op
     p(90.0000) =      3.298 s/op
     p(95.0000) =      3.358 s/op
     p(99.0000) =      3.568 s/op
     p(99.9000) =      3.568 s/op
     p(99.9900) =      3.568 s/op
     p(99.9990) =      3.568 s/op
     p(99.9999) =      3.568 s/op
    p(100.0000) =      3.568 s/op


# Run complete. Total time: 00:02:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.286 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_graalvm-ee-19.1.1_1564566061548.json
{"wallclock_times": [165.29330034299997], "core_cycle_counts": [[138491949102], [143783230449], [130459107189], [128052494276]], "aperf_counts": [[138096576591], [143741877826], [130434535879], [128027891123]], "mperf_counts": [[138112789870], [143749374660], [130434866270], [128028109104]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 11:43:46: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 11:43:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 11:43:47: INFO] 148 executions left in scheduler queue
[2019-07-31 11:43:47: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 11:43:47: INFO] Estimated completion (next execution): 2019-07-31 11:49:03 (0:05:15 from now)
[2019-07-31 11:43:47: INFO] Reboot in preparation for next execution
[2019-07-31 11:51:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.232 s/op
Iteration   2: 3.564 s/op
Iteration   3: 3.649 s/op
Iteration   4: 3.555 s/op
Iteration   5: 3.603 s/op
Iteration   6: 3.629 s/op
Iteration   7: 3.663 s/op
Iteration   8: 3.623 s/op
Iteration   9: 3.610 s/op
Iteration  10: 3.669 s/op
Iteration  11: 3.609 s/op
Iteration  12: 3.672 s/op
Iteration  13: 3.614 s/op
Iteration  14: 3.615 s/op
Iteration  15: 3.675 s/op
Iteration  16: 3.617 s/op
Iteration  17: 3.630 s/op
Iteration  18: 3.618 s/op
Iteration  19: 3.671 s/op
Iteration  20: 3.623 s/op
Iteration  21: 3.623 s/op
Iteration  22: 3.614 s/op
Iteration  23: 3.681 s/op
Iteration  24: 3.619 s/op
Iteration  25: 3.622 s/op
Iteration  26: 3.687 s/op
Iteration  27: 3.618 s/op
Iteration  28: 3.631 s/op
Iteration  29: 3.624 s/op
Iteration  30: 3.677 s/op
Iteration  31: 3.625 s/op
Iteration  32: 3.617 s/op
Iteration  33: 3.678 s/op
Iteration  34: 3.617 s/op
Iteration  35: 3.639 s/op
Iteration  36: 3.634 s/op
Iteration  37: 3.677 s/op
Iteration  38: 3.628 s/op
Iteration  39: 3.622 s/op
Iteration  40: 3.680 s/op
Iteration  41: 3.629 s/op
Iteration  42: 3.627 s/op
Iteration  43: 3.631 s/op
Iteration  44: 3.691 s/op
Iteration  45: 3.625 s/op
Iteration  46: 3.634 s/op
Iteration  47: 3.688 s/op
Iteration  48: 3.627 s/op
Iteration  49: 3.626 s/op
Iteration  50: 3.632 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.647 ?(99.9%) 0.044 s/op

  Histogram, s/op:
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 2 
    [3.600, 3.650) = 34 
    [3.650, 3.700) = 13 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 0 
    [4.200, 4.250) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.555 s/op
     p(50.0000) =      3.627 s/op
     p(90.0000) =      3.681 s/op
     p(95.0000) =      3.690 s/op
     p(99.0000) =      4.232 s/op
     p(99.9000) =      4.232 s/op
     p(99.9900) =      4.232 s/op
     p(99.9990) =      4.232 s/op
     p(99.9999) =      4.232 s/op
    p(100.0000) =      4.232 s/op


# Run complete. Total time: 00:03:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.647 ? 0.044   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_graalvm-ee-19.1.1_1564566478399.json
{"wallclock_times": [183.47461102000003], "core_cycle_counts": [[146156360635], [191102591807], [188786830226], [134503060711]], "aperf_counts": [[145646961468], [191051877294], [188749069548], [134465287625]], "mperf_counts": [[145669392130], [191058686340], [188755712210], [134465459426]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 11:51:01: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 11:51:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 11:51:02: INFO] 147 executions left in scheduler queue
[2019-07-31 11:51:02: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 11:51:02: INFO] Estimated completion (next execution): 2019-07-31 11:56:36 (0:05:33 from now)
[2019-07-31 11:51:02: INFO] Reboot in preparation for next execution
[2019-07-31 12:00:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.024 s/op
Iteration   2: 6.684 s/op
Iteration   3: 6.814 s/op
Iteration   4: 6.701 s/op
Iteration   5: 6.710 s/op
Iteration   6: 6.703 s/op
Iteration   7: 6.701 s/op
Iteration   8: 6.741 s/op
Iteration   9: 6.694 s/op
Iteration  10: 6.681 s/op
Iteration  11: 6.701 s/op
Iteration  12: 6.717 s/op
Iteration  13: 6.726 s/op
Iteration  14: 6.720 s/op
Iteration  15: 6.704 s/op
Iteration  16: 6.720 s/op
Iteration  17: 6.717 s/op
Iteration  18: 6.687 s/op
Iteration  19: 6.718 s/op
Iteration  20: 6.705 s/op
Iteration  21: 6.714 s/op
Iteration  22: 6.698 s/op
Iteration  23: 6.672 s/op
Iteration  24: 6.719 s/op
Iteration  25: 6.699 s/op
Iteration  26: 6.660 s/op
Iteration  27: 6.738 s/op
Iteration  28: 6.708 s/op
Iteration  29: 6.669 s/op
Iteration  30: 6.716 s/op
Iteration  31: 6.737 s/op
Iteration  32: 6.725 s/op
Iteration  33: 6.726 s/op
Iteration  34: 6.724 s/op
Iteration  35: 6.728 s/op
Iteration  36: 6.705 s/op
Iteration  37: 6.703 s/op
Iteration  38: 6.751 s/op
Iteration  39: 6.728 s/op
Iteration  40: 6.704 s/op
Iteration  41: 6.732 s/op
Iteration  42: 6.701 s/op
Iteration  43: 6.673 s/op
Iteration  44: 6.707 s/op
Iteration  45: 6.661 s/op
Iteration  46: 6.672 s/op
Iteration  47: 6.691 s/op
Iteration  48: 6.713 s/op
Iteration  49: 6.726 s/op
Iteration  50: 6.696 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.715 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 14 
    [6.700, 6.750) = 33 
    [6.750, 6.800) = 1 
    [6.800, 6.850) = 1 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.660 s/op
     p(50.0000) =      6.708 s/op
     p(90.0000) =      6.738 s/op
     p(95.0000) =      6.779 s/op
     p(99.0000) =      7.024 s/op
     p(99.9000) =      7.024 s/op
     p(99.9900) =      7.024 s/op
     p(99.9990) =      7.024 s/op
     p(99.9999) =      7.024 s/op
    p(100.0000) =      7.024 s/op


# Run complete. Total time: 00:05:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.715 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_graalvm-ee-19.1.1_1564566914517.json
{"wallclock_times": [336.69808291100003], "core_cycle_counts": [[280812831469], [170625240943], [309943534387], [326919929461]], "aperf_counts": [[280042360030], [170561743326], [309914093215], [326892057518]], "mperf_counts": [[280066966038], [170564041328], [309916402160], [326898680736]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 12:00:51: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-31 12:00:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 12:00:52: INFO] 146 executions left in scheduler queue
[2019-07-31 12:00:52: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-07-31 12:00:52: INFO] Estimated completion (next execution): 2019-07-31 12:08:59 (0:08:06 from now)
[2019-07-31 12:00:52: INFO] Reboot in preparation for next execution
[2019-07-31 12:11:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.276 s/op
Iteration   2: 8.048 s/op
Iteration   3: 8.043 s/op
Iteration   4: 8.029 s/op
Iteration   5: 8.102 s/op
Iteration   6: 8.242 s/op
Iteration   7: 7.977 s/op
Iteration   8: 7.867 s/op
Iteration   9: 8.107 s/op
Iteration  10: 7.955 s/op
Iteration  11: 7.958 s/op
Iteration  12: 8.106 s/op
Iteration  13: 8.278 s/op
Iteration  14: 7.964 s/op
Iteration  15: 8.009 s/op
Iteration  16: 7.832 s/op
Iteration  17: 7.830 s/op
Iteration  18: 7.854 s/op
Iteration  19: 7.733 s/op
Iteration  20: 7.748 s/op
Iteration  21: 7.864 s/op
Iteration  22: 7.687 s/op
Iteration  23: 7.730 s/op
Iteration  24: 7.931 s/op
Iteration  25: 7.890 s/op
Iteration  26: 7.872 s/op
Iteration  27: 7.721 s/op
Iteration  28: 7.740 s/op
Iteration  29: 7.898 s/op
Iteration  30: 7.693 s/op
Iteration  31: 7.738 s/op
Iteration  32: 7.911 s/op
Iteration  33: 7.877 s/op
Iteration  34: 7.887 s/op
Iteration  35: 7.699 s/op
Iteration  36: 7.750 s/op
Iteration  37: 8.498 s/op
Iteration  38: 7.978 s/op
Iteration  39: 7.863 s/op
Iteration  40: 7.694 s/op
Iteration  41: 7.767 s/op
Iteration  42: 7.875 s/op
Iteration  43: 7.701 s/op
Iteration  44: 7.743 s/op
Iteration  45: 7.929 s/op
Iteration  46: 7.687 s/op
Iteration  47: 7.729 s/op
Iteration  48: 7.901 s/op
Iteration  49: 7.878 s/op
Iteration  50: 7.877 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      7.899 ?(99.9%) 0.087 s/op

  Histogram, s/op:
    [7.600, 7.650) = 0 
    [7.650, 7.700) = 5 
    [7.700, 7.750) = 9 
    [7.750, 7.800) = 2 
    [7.800, 7.850) = 2 
    [7.850, 7.900) = 12 
    [7.900, 7.950) = 4 
    [7.950, 8.000) = 5 
    [8.000, 8.050) = 4 
    [8.050, 8.100) = 0 
    [8.100, 8.150) = 3 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 1 
    [8.250, 8.300) = 2 
    [8.300, 8.350) = 0 
    [8.350, 8.400) = 0 
    [8.400, 8.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.687 s/op
     p(50.0000) =      7.877 s/op
     p(90.0000) =      8.107 s/op
     p(95.0000) =      8.277 s/op
     p(99.0000) =      8.498 s/op
     p(99.9000) =      8.498 s/op
     p(99.9900) =      8.498 s/op
     p(99.9990) =      8.498 s/op
     p(99.9999) =      8.498 s/op
    p(100.0000) =      8.498 s/op


# Run complete. Total time: 00:06:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  7.899 ? 0.087   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_graalvm-ce-19.1.1_1564567504939.json
{"wallclock_times": [395.92910243899996], "core_cycle_counts": [[200226182261], [730557443629], [261854067745], [200381091921]], "aperf_counts": [[199093098314], [730521147469], [261818903903], [200344877346]], "mperf_counts": [[199105236330], [730522013626], [261821208230], [200352290626]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 12:11:40: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-07-31 12:11:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 12:11:41: INFO] 145 executions left in scheduler queue
[2019-07-31 12:11:41: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-31 12:11:41: INFO] Estimated completion (next execution): 2019-07-31 12:20:47 (0:09:06 from now)
[2019-07-31 12:11:41: INFO] Reboot in preparation for next execution
[2019-07-31 12:16:01: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 12:16:01: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 12:16:01: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 12:16:01: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 12:16:01: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 12:16:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 12:17:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.030 s/op
Iteration   2: 2.429 s/op
Iteration   3: 2.394 s/op
Iteration   4: 2.014 s/op
Iteration   5: 2.049 s/op
Iteration   6: 1.943 s/op
Iteration   7: 1.968 s/op
Iteration   8: 1.922 s/op
Iteration   9: 1.943 s/op
Iteration  10: 1.941 s/op
Iteration  11: 1.936 s/op
Iteration  12: 1.951 s/op
Iteration  13: 1.940 s/op
Iteration  14: 1.913 s/op
Iteration  15: 1.929 s/op
Iteration  16: 1.966 s/op
Iteration  17: 1.983 s/op
Iteration  18: 1.966 s/op
Iteration  19: 1.988 s/op
Iteration  20: 1.973 s/op
Iteration  21: 1.968 s/op
Iteration  22: 2.003 s/op
Iteration  23: 1.968 s/op
Iteration  24: 1.993 s/op
Iteration  25: 1.986 s/op
Iteration  26: 1.976 s/op
Iteration  27: 1.982 s/op
Iteration  28: 1.978 s/op
Iteration  29: 1.988 s/op
Iteration  30: 1.983 s/op
Iteration  31: 1.996 s/op
Iteration  32: 1.991 s/op
Iteration  33: 1.985 s/op
Iteration  34: 1.972 s/op
Iteration  35: 1.973 s/op
Iteration  36: 1.974 s/op
Iteration  37: 1.974 s/op
Iteration  38: 1.968 s/op
Iteration  39: 1.974 s/op
Iteration  40: 1.986 s/op
Iteration  41: 1.975 s/op
Iteration  42: 1.979 s/op
Iteration  43: 1.952 s/op
Iteration  44: 1.991 s/op
Iteration  45: 1.977 s/op
Iteration  46: 1.980 s/op
Iteration  47: 2.006 s/op
Iteration  48: 1.969 s/op
Iteration  49: 1.994 s/op
Iteration  50: 1.976 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.012 ?(99.9%) 0.085 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 43 
    [2.000, 2.250) = 4 
    [2.250, 2.500) = 2 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 0 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.913 s/op
     p(50.0000) =      1.976 s/op
     p(90.0000) =      2.013 s/op
     p(95.0000) =      2.410 s/op
     p(99.0000) =      3.030 s/op
     p(99.9000) =      3.030 s/op
     p(99.9900) =      3.030 s/op
     p(99.9990) =      3.030 s/op
     p(99.9999) =      3.030 s/op
    p(100.0000) =      3.030 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.012 ? 0.085   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_openj9_12.0.1_1564568161339.json
{"wallclock_times": [102.264657908], "core_cycle_counts": [[157797907131], [36406059257], [75061795218], [86866481127]], "aperf_counts": [[157536246399], [36327535811], [74990044825], [86779381818]], "mperf_counts": [[157544450174], [36327528056], [74990291574], [86779379712]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 12:17:43: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-31 12:17:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 12:17:44: INFO] 144 executions left in scheduler queue
[2019-07-31 12:17:44: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-31 12:17:44: INFO] Estimated completion (next execution): 2019-07-31 12:21:57 (0:04:12 from now)
[2019-07-31 12:17:44: INFO] Reboot in preparation for next execution
[2019-07-31 12:21:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 12:21:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 12:21:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 12:21:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 12:21:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 12:21:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 12:24:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.578 s/op
Iteration   2: 3.251 s/op
Iteration   3: 3.925 s/op
Iteration   4: 3.111 s/op
Iteration   5: 3.162 s/op
Iteration   6: 3.209 s/op
Iteration   7: 3.235 s/op
Iteration   8: 3.155 s/op
Iteration   9: 3.127 s/op
Iteration  10: 3.123 s/op
Iteration  11: 3.211 s/op
Iteration  12: 3.148 s/op
Iteration  13: 3.171 s/op
Iteration  14: 3.240 s/op
Iteration  15: 3.193 s/op
Iteration  16: 3.187 s/op
Iteration  17: 3.174 s/op
Iteration  18: 3.227 s/op
Iteration  19: 3.155 s/op
Iteration  20: 3.227 s/op
Iteration  21: 3.183 s/op
Iteration  22: 3.175 s/op
Iteration  23: 3.149 s/op
Iteration  24: 3.186 s/op
Iteration  25: 3.185 s/op
Iteration  26: 3.222 s/op
Iteration  27: 3.073 s/op
Iteration  28: 3.162 s/op
Iteration  29: 3.119 s/op
Iteration  30: 3.170 s/op
Iteration  31: 3.113 s/op
Iteration  32: 3.138 s/op
Iteration  33: 3.098 s/op
Iteration  34: 3.131 s/op
Iteration  35: 3.052 s/op
Iteration  36: 3.138 s/op
Iteration  37: 3.070 s/op
Iteration  38: 3.207 s/op
Iteration  39: 3.127 s/op
Iteration  40: 3.185 s/op
Iteration  41: 3.059 s/op
Iteration  42: 3.125 s/op
Iteration  43: 3.096 s/op
Iteration  44: 3.104 s/op
Iteration  45: 3.148 s/op
Iteration  46: 3.090 s/op
Iteration  47: 3.038 s/op
Iteration  48: 3.133 s/op
Iteration  49: 3.146 s/op
Iteration  50: 3.184 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      3.176 ?(99.9%) 0.066 s/op

  Histogram, s/op:
    [3.000, 3.100) = 8 
    [3.100, 3.200) = 31 
    [3.200, 3.300) = 9 
    [3.300, 3.400) = 0 
    [3.400, 3.500) = 0 
    [3.500, 3.600) = 1 
    [3.600, 3.700) = 0 
    [3.700, 3.800) = 0 
    [3.800, 3.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.038 s/op
     p(50.0000) =      3.155 s/op
     p(90.0000) =      3.234 s/op
     p(95.0000) =      3.398 s/op
     p(99.0000) =      3.925 s/op
     p(99.9000) =      3.925 s/op
     p(99.9900) =      3.925 s/op
     p(99.9990) =      3.925 s/op
     p(99.9999) =      3.925 s/op
    p(100.0000) =      3.925 s/op


# Run complete. Total time: 00:02:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.176 ? 0.066   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_openj9_12.0.1_1564568517213.json
{"wallclock_times": [160.335656187], "core_cycle_counts": [[146744112454], [83479944520], [170114644042], [147106757022]], "aperf_counts": [[146320366911], [83404687279], [170055388094], [147046133928]], "mperf_counts": [[146326330914], [83404683552], [170055376584], [147046218730]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 12:24:37: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-31 12:24:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 12:24:38: INFO] 143 executions left in scheduler queue
[2019-07-31 12:24:38: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-31 12:24:38: INFO] Estimated completion (next execution): 2019-07-31 12:29:49 (0:05:10 from now)
[2019-07-31 12:24:38: INFO] Reboot in preparation for next execution
[2019-07-31 12:28:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 12:30:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.093 s/op
Iteration   2: 2.520 s/op
Iteration   3: 2.229 s/op
Iteration   4: 2.075 s/op
Iteration   5: 2.003 s/op
Iteration   6: 1.990 s/op
Iteration   7: 2.031 s/op
Iteration   8: 1.999 s/op
Iteration   9: 2.010 s/op
Iteration  10: 2.024 s/op
Iteration  11: 2.002 s/op
Iteration  12: 2.007 s/op
Iteration  13: 2.027 s/op
Iteration  14: 2.017 s/op
Iteration  15: 2.028 s/op
Iteration  16: 2.029 s/op
Iteration  17: 2.067 s/op
Iteration  18: 2.067 s/op
Iteration  19: 2.031 s/op
Iteration  20: 2.040 s/op
Iteration  21: 2.038 s/op
Iteration  22: 2.036 s/op
Iteration  23: 2.056 s/op
Iteration  24: 2.047 s/op
Iteration  25: 2.043 s/op
Iteration  26: 2.039 s/op
Iteration  27: 2.031 s/op
Iteration  28: 2.041 s/op
Iteration  29: 2.036 s/op
Iteration  30: 2.041 s/op
Iteration  31: 2.037 s/op
Iteration  32: 2.051 s/op
Iteration  33: 2.066 s/op
Iteration  34: 2.043 s/op
Iteration  35: 2.024 s/op
Iteration  36: 2.016 s/op
Iteration  37: 2.043 s/op
Iteration  38: 2.053 s/op
Iteration  39: 2.042 s/op
Iteration  40: 2.034 s/op
Iteration  41: 2.024 s/op
Iteration  42: 2.009 s/op
Iteration  43: 1.999 s/op
Iteration  44: 2.011 s/op
Iteration  45: 2.020 s/op
Iteration  46: 1.993 s/op
Iteration  47: 2.032 s/op
Iteration  48: 2.023 s/op
Iteration  49: 2.037 s/op
Iteration  50: 2.058 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.066 ?(99.9%) 0.083 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 4 
    [2.000, 2.250) = 44 
    [2.250, 2.500) = 0 
    [2.500, 2.750) = 1 
    [2.750, 3.000) = 0 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.990 s/op
     p(50.0000) =      2.035 s/op
     p(90.0000) =      2.067 s/op
     p(95.0000) =      2.360 s/op
     p(99.0000) =      3.093 s/op
     p(99.9000) =      3.093 s/op
     p(99.9900) =      3.093 s/op
     p(99.9990) =      3.093 s/op
     p(99.9999) =      3.093 s/op
    p(100.0000) =      3.093 s/op


# Run complete. Total time: 00:01:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.066 ? 0.083   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9-8u222-b10_1564568931511.json
{"wallclock_times": [104.567915634], "core_cycle_counts": [[121902838886], [95012647555], [61265740382], [81565135860]], "aperf_counts": [[121571150389], [94950556942], [61203154296], [81498943457]], "mperf_counts": [[121577375942], [94951121232], [61203150724], [81498946552]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 12:30:36: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-31 12:30:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 12:30:37: INFO] 142 executions left in scheduler queue
[2019-07-31 12:30:37: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-31 12:30:37: INFO] Estimated completion (next execution): 2019-07-31 12:34:51 (0:04:14 from now)
[2019-07-31 12:30:37: INFO] Reboot in preparation for next execution
[2019-07-31 12:34:53: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 12:37:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.793 s/op
Iteration   2: 3.401 s/op
Iteration   3: 3.756 s/op
Iteration   4: 3.319 s/op
Iteration   5: 3.330 s/op
Iteration   6: 3.364 s/op
Iteration   7: 3.325 s/op
Iteration   8: 3.437 s/op
Iteration   9: 3.358 s/op
Iteration  10: 3.341 s/op
Iteration  11: 3.314 s/op
Iteration  12: 3.348 s/op
Iteration  13: 3.354 s/op
Iteration  14: 3.368 s/op
Iteration  15: 3.410 s/op
Iteration  16: 3.380 s/op
Iteration  17: 3.356 s/op
Iteration  18: 3.428 s/op
Iteration  19: 3.398 s/op
Iteration  20: 3.342 s/op
Iteration  21: 3.371 s/op
Iteration  22: 3.356 s/op
Iteration  23: 3.339 s/op
Iteration  24: 3.344 s/op
Iteration  25: 3.361 s/op
Iteration  26: 3.336 s/op
Iteration  27: 3.356 s/op
Iteration  28: 3.347 s/op
Iteration  29: 3.345 s/op
Iteration  30: 3.354 s/op
Iteration  31: 3.376 s/op
Iteration  32: 3.346 s/op
Iteration  33: 3.379 s/op
Iteration  34: 3.321 s/op
Iteration  35: 3.340 s/op
Iteration  36: 3.375 s/op
Iteration  37: 3.352 s/op
Iteration  38: 3.365 s/op
Iteration  39: 3.368 s/op
Iteration  40: 3.367 s/op
Iteration  41: 3.339 s/op
Iteration  42: 3.315 s/op
Iteration  43: 3.364 s/op
Iteration  44: 3.332 s/op
Iteration  45: 3.324 s/op
Iteration  46: 3.310 s/op
Iteration  47: 3.347 s/op
Iteration  48: 3.313 s/op
Iteration  49: 3.343 s/op
Iteration  50: 3.350 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.371 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [3.300, 3.350) = 23 
    [3.350, 3.400) = 21 
    [3.400, 3.450) = 4 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.310 s/op
     p(50.0000) =      3.353 s/op
     p(90.0000) =      3.409 s/op
     p(95.0000) =      3.581 s/op
     p(99.0000) =      3.793 s/op
     p(99.9000) =      3.793 s/op
     p(99.9900) =      3.793 s/op
     p(99.9990) =      3.793 s/op
     p(99.9999) =      3.793 s/op
    p(100.0000) =      3.793 s/op


# Run complete. Total time: 00:02:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.371 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9-8u222-b10_1564569293879.json
{"wallclock_times": [169.680177031], "core_cycle_counts": [[147550667643], [147841268318], [165564664294], [115151842965]], "aperf_counts": [[147097823899], [147758610980], [165522119432], [115122489405]], "mperf_counts": [[147098914312], [147759260356], [165528233788], [115122972254]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 12:37:43: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-31 12:37:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 12:37:44: INFO] 141 executions left in scheduler queue
[2019-07-31 12:37:44: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-07-31 12:37:44: INFO] Estimated completion (next execution): 2019-07-31 12:43:04 (0:05:19 from now)
[2019-07-31 12:37:44: INFO] Reboot in preparation for next execution
[2019-07-31 12:41:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 12:41:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 12:41:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 12:41:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 12:41:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 12:52:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.333 s/op
Iteration   2: 13.050 s/op
Iteration   3: 13.281 s/op
Iteration   4: 13.073 s/op
Iteration   5: 13.040 s/op
Iteration   6: 13.049 s/op
Iteration   7: 13.057 s/op
Iteration   8: 13.055 s/op
Iteration   9: 12.996 s/op
Iteration  10: 12.995 s/op
Iteration  11: 13.031 s/op
Iteration  12: 13.016 s/op
Iteration  13: 13.118 s/op
Iteration  14: 13.002 s/op
Iteration  15: 13.050 s/op
Iteration  16: 12.965 s/op
Iteration  17: 13.025 s/op
Iteration  18: 13.175 s/op
Iteration  19: 12.981 s/op
Iteration  20: 13.046 s/op
Iteration  21: 13.029 s/op
Iteration  22: 13.056 s/op
Iteration  23: 13.016 s/op
Iteration  24: 13.047 s/op
Iteration  25: 13.041 s/op
Iteration  26: 13.103 s/op
Iteration  27: 13.025 s/op
Iteration  28: 13.052 s/op
Iteration  29: 12.930 s/op
Iteration  30: 12.995 s/op
Iteration  31: 13.143 s/op
Iteration  32: 12.958 s/op
Iteration  33: 13.113 s/op
Iteration  34: 13.003 s/op
Iteration  35: 13.067 s/op
Iteration  36: 13.051 s/op
Iteration  37: 13.037 s/op
Iteration  38: 13.086 s/op
Iteration  39: 13.001 s/op
Iteration  40: 13.145 s/op
Iteration  41: 13.065 s/op
Iteration  42: 13.076 s/op
Iteration  43: 13.036 s/op
Iteration  44: 12.972 s/op
Iteration  45: 13.140 s/op
Iteration  46: 13.006 s/op
Iteration  47: 13.085 s/op
Iteration  48: 13.022 s/op
Iteration  49: 13.037 s/op
Iteration  50: 13.101 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.056 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [12.900, 12.950) = 1 
    [12.950, 13.000) = 7 
    [13.000, 13.050) = 20 
    [13.050, 13.100) = 12 
    [13.100, 13.150) = 7 
    [13.150, 13.200) = 1 
    [13.200, 13.250) = 0 
    [13.250, 13.300) = 1 
    [13.300, 13.350) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.930 s/op
     p(50.0000) =     13.046 s/op
     p(90.0000) =     13.143 s/op
     p(95.0000) =     13.223 s/op
     p(99.0000) =     13.333 s/op
     p(99.9000) =     13.333 s/op
     p(99.9900) =     13.333 s/op
     p(99.9990) =     13.333 s/op
     p(99.9999) =     13.333 s/op
    p(100.0000) =     13.333 s/op


# Run complete. Total time: 00:10:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.056 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot_11.0.4_1564569718481.json
{"wallclock_times": [653.8640572459999], "core_cycle_counts": [[737420177028], [570427831332], [719497239954], [365963469471]], "aperf_counts": [[735900297777], [570214478020], [719393486219], [365855276717]], "mperf_counts": [[736680781818], [570532618070], [719792674862], [366040581102]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 12:52:52: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-07-31 12:52:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 12:52:53: INFO] 140 executions left in scheduler queue
[2019-07-31 12:52:53: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-07-31 12:52:53: INFO] Estimated completion (next execution): 2019-07-31 13:06:17 (0:13:24 from now)
[2019-07-31 12:52:53: INFO] Reboot in preparation for next execution
[2019-07-31 12:57:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 13:11:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.333 s/op
Iteration   2: 15.878 s/op
Iteration   3: 16.849 s/op
Iteration   4: 16.907 s/op
Iteration   5: 17.038 s/op
Iteration   6: 16.947 s/op
Iteration   7: 16.314 s/op
Iteration   8: 17.012 s/op
Iteration   9: 16.939 s/op
Iteration  10: 16.897 s/op
Iteration  11: 15.686 s/op
Iteration  12: 16.888 s/op
Iteration  13: 16.867 s/op
Iteration  14: 16.838 s/op
Iteration  15: 16.977 s/op
Iteration  16: 16.750 s/op
Iteration  17: 16.791 s/op
Iteration  18: 16.671 s/op
Iteration  19: 16.909 s/op
Iteration  20: 16.438 s/op
Iteration  21: 16.433 s/op
Iteration  22: 16.525 s/op
Iteration  23: 16.943 s/op
Iteration  24: 16.355 s/op
Iteration  25: 16.934 s/op
Iteration  26: 16.831 s/op
Iteration  27: 16.368 s/op
Iteration  28: 16.867 s/op
Iteration  29: 16.709 s/op
Iteration  30: 16.561 s/op
Iteration  31: 16.773 s/op
Iteration  32: 16.881 s/op
Iteration  33: 16.712 s/op
Iteration  34: 15.705 s/op
Iteration  35: 16.768 s/op
Iteration  36: 16.736 s/op
Iteration  37: 16.750 s/op
Iteration  38: 16.665 s/op
Iteration  39: 16.593 s/op
Iteration  40: 16.642 s/op
Iteration  41: 16.804 s/op
Iteration  42: 16.868 s/op
Iteration  43: 16.525 s/op
Iteration  44: 16.527 s/op
Iteration  45: 16.743 s/op
Iteration  46: 16.975 s/op
Iteration  47: 16.643 s/op
Iteration  48: 16.766 s/op
Iteration  49: 16.882 s/op
Iteration  50: 16.851 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.685 ?(99.9%) 0.150 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 2 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 6 
    [16.500, 16.750) = 15 
    [16.750, 17.000) = 24 
    [17.000, 17.250) = 2 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.686 s/op
     p(50.0000) =     16.767 s/op
     p(90.0000) =     16.946 s/op
     p(95.0000) =     16.993 s/op
     p(99.0000) =     17.038 s/op
     p(99.9000) =     17.038 s/op
     p(99.9900) =     17.038 s/op
     p(99.9990) =     17.038 s/op
     p(99.9999) =     17.038 s/op
    p(100.0000) =     17.038 s/op


# Run complete. Total time: 00:13:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.685 ? 0.150   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9-8u222-b10_1564570626370.json
{"wallclock_times": [835.624722869], "core_cycle_counts": [[630378014819], [1285271645381], [408694476534], [645901674886]], "aperf_counts": [[628071116179], [1285101862388], [408487777201], [645743812949]], "mperf_counts": [[628073678272], [1285102316456], [408489460828], [645743789560]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 13:11:01: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-07-31 13:11:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 13:11:02: INFO] 139 executions left in scheduler queue
[2019-07-31 13:11:02: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:11:02: INFO] Estimated completion (next execution): 2019-07-31 13:27:28 (0:16:25 from now)
[2019-07-31 13:11:02: INFO] Reboot in preparation for next execution
[2019-07-31 13:15:16: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 13:15:16: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 13:15:16: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 13:15:16: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 13:15:16: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 13:15:17: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 13:22:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.709 s/op
Iteration   2: 8.079 s/op
Iteration   3: 7.935 s/op
Iteration   4: 7.908 s/op
Iteration   5: 7.934 s/op
Iteration   6: 7.931 s/op
Iteration   7: 7.944 s/op
Iteration   8: 7.844 s/op
Iteration   9: 7.875 s/op
Iteration  10: 7.900 s/op
Iteration  11: 7.909 s/op
Iteration  12: 7.927 s/op
Iteration  13: 7.940 s/op
Iteration  14: 7.905 s/op
Iteration  15: 7.918 s/op
Iteration  16: 7.952 s/op
Iteration  17: 7.915 s/op
Iteration  18: 8.292 s/op
Iteration  19: 8.097 s/op
Iteration  20: 8.081 s/op
Iteration  21: 8.078 s/op
Iteration  22: 8.081 s/op
Iteration  23: 8.086 s/op
Iteration  24: 8.077 s/op
Iteration  25: 8.113 s/op
Iteration  26: 8.115 s/op
Iteration  27: 8.078 s/op
Iteration  28: 8.028 s/op
Iteration  29: 8.065 s/op
Iteration  30: 8.119 s/op
Iteration  31: 8.104 s/op
Iteration  32: 8.035 s/op
Iteration  33: 8.042 s/op
Iteration  34: 8.095 s/op
Iteration  35: 8.051 s/op
Iteration  36: 8.011 s/op
Iteration  37: 8.066 s/op
Iteration  38: 7.955 s/op
Iteration  39: 7.991 s/op
Iteration  40: 8.042 s/op
Iteration  41: 8.047 s/op
Iteration  42: 7.998 s/op
Iteration  43: 7.987 s/op
Iteration  44: 7.965 s/op
Iteration  45: 8.054 s/op
Iteration  46: 7.963 s/op
Iteration  47: 7.933 s/op
Iteration  48: 7.922 s/op
Iteration  49: 7.952 s/op
Iteration  50: 7.973 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.040 ?(99.9%) 0.126 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 25 
    [ 8.000,  8.250) = 23 
    [ 8.250,  8.500) = 1 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.844 s/op
     p(50.0000) =      8.004 s/op
     p(90.0000) =      8.112 s/op
     p(95.0000) =      8.197 s/op
     p(99.0000) =      9.709 s/op
     p(99.9000) =      9.709 s/op
     p(99.9900) =      9.709 s/op
     p(99.9990) =      9.709 s/op
     p(99.9999) =      9.709 s/op
    p(100.0000) =      9.709 s/op


# Run complete. Total time: 00:06:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  8.040 ? 0.126   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9_12.0.1_1564571716826.json
{"wallclock_times": [403.64172561600003], "core_cycle_counts": [[413041439572], [351485635447], [371098156033], [235540015466]], "aperf_counts": [[412037661742], [351338609611], [370986955411], [235418118184]], "mperf_counts": [[412040581284], [351339640386], [370986930724], [235418142612]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 13:22:00: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:22:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 13:22:01: INFO] 138 executions left in scheduler queue
[2019-07-31 13:22:01: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:22:01: INFO] Estimated completion (next execution): 2019-07-31 13:31:15 (0:09:14 from now)
[2019-07-31 13:22:01: INFO] Reboot in preparation for next execution
[2019-07-31 13:26:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 13:26:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 13:26:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 13:26:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 13:26:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 13:26:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 13:31:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.990 s/op
Iteration   2: 6.783 s/op
Iteration   3: 6.501 s/op
Iteration   4: 6.773 s/op
Iteration   5: 6.303 s/op
Iteration   6: 6.259 s/op
Iteration   7: 6.408 s/op
Iteration   8: 6.223 s/op
Iteration   9: 6.228 s/op
Iteration  10: 6.204 s/op
Iteration  11: 6.176 s/op
Iteration  12: 6.125 s/op
Iteration  13: 6.082 s/op
Iteration  14: 6.213 s/op
Iteration  15: 6.125 s/op
Iteration  16: 6.176 s/op
Iteration  17: 6.232 s/op
Iteration  18: 6.156 s/op
Iteration  19: 6.144 s/op
Iteration  20: 6.142 s/op
Iteration  21: 6.230 s/op
Iteration  22: 6.169 s/op
Iteration  23: 6.160 s/op
Iteration  24: 6.116 s/op
Iteration  25: 6.044 s/op
Iteration  26: 6.220 s/op
Iteration  27: 6.168 s/op
Iteration  28: 6.173 s/op
Iteration  29: 6.125 s/op
Iteration  30: 6.155 s/op
Iteration  31: 6.239 s/op
Iteration  32: 6.192 s/op
Iteration  33: 6.112 s/op
Iteration  34: 6.240 s/op
Iteration  35: 6.137 s/op
Iteration  36: 6.168 s/op
Iteration  37: 6.089 s/op
Iteration  38: 6.179 s/op
Iteration  39: 6.162 s/op
Iteration  40: 6.194 s/op
Iteration  41: 6.159 s/op
Iteration  42: 6.118 s/op
Iteration  43: 6.212 s/op
Iteration  44: 6.202 s/op
Iteration  45: 6.127 s/op
Iteration  46: 6.107 s/op
Iteration  47: 6.206 s/op
Iteration  48: 6.134 s/op
Iteration  49: 6.134 s/op
Iteration  50: 6.142 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.241 ?(99.9%) 0.143 s/op

  Histogram, s/op:
    [6.000, 6.125) = 8 
    [6.125, 6.250) = 35 
    [6.250, 6.375) = 2 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 2 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.044 s/op
     p(50.0000) =      6.171 s/op
     p(90.0000) =      6.397 s/op
     p(95.0000) =      6.778 s/op
     p(99.0000) =      7.990 s/op
     p(99.9000) =      7.990 s/op
     p(99.9900) =      7.990 s/op
     p(99.9990) =      7.990 s/op
     p(99.9999) =      7.990 s/op
    p(100.0000) =      7.990 s/op


# Run complete. Total time: 00:05:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.241 ? 0.143   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9_12.0.1_1564572389046.json
{"wallclock_times": [313.928560587], "core_cycle_counts": [[357636340198], [260312123693], [269239196151], [248535704707]], "aperf_counts": [[356888430259], [260156925088], [269135725156], [248425432449]], "mperf_counts": [[356889480654], [260156883492], [269135708844], [248425424680]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 13:31:42: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:31:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 13:31:43: INFO] 137 executions left in scheduler queue
[2019-07-31 13:31:43: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:31:43: INFO] Estimated completion (next execution): 2019-07-31 13:39:28 (0:07:44 from now)
[2019-07-31 13:31:43: INFO] Reboot in preparation for next execution
[2019-07-31 13:35:56: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 13:35:56: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 13:35:56: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 13:35:56: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 13:35:56: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 13:35:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 13:40:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.174 s/op
Iteration   2: 7.018 s/op
Iteration   3: 6.133 s/op
Iteration   4: 6.059 s/op
Iteration   5: 6.088 s/op
Iteration   6: 6.126 s/op
Iteration   7: 6.034 s/op
Iteration   8: 5.967 s/op
Iteration   9: 6.025 s/op
Iteration  10: 6.043 s/op
Iteration  11: 6.056 s/op
Iteration  12: 6.010 s/op
Iteration  13: 5.933 s/op
Iteration  14: 5.921 s/op
Iteration  15: 5.955 s/op
Iteration  16: 5.938 s/op
Iteration  17: 5.927 s/op
Iteration  18: 5.923 s/op
Iteration  19: 5.909 s/op
Iteration  20: 5.996 s/op
Iteration  21: 5.958 s/op
Iteration  22: 5.944 s/op
Iteration  23: 5.966 s/op
Iteration  24: 5.937 s/op
Iteration  25: 5.918 s/op
Iteration  26: 5.924 s/op
Iteration  27: 5.940 s/op
Iteration  28: 5.926 s/op
Iteration  29: 5.921 s/op
Iteration  30: 5.975 s/op
Iteration  31: 5.963 s/op
Iteration  32: 5.952 s/op
Iteration  33: 5.942 s/op
Iteration  34: 5.947 s/op
Iteration  35: 5.930 s/op
Iteration  36: 5.952 s/op
Iteration  37: 5.893 s/op
Iteration  38: 5.908 s/op
Iteration  39: 5.901 s/op
Iteration  40: 5.968 s/op
Iteration  41: 5.950 s/op
Iteration  42: 5.930 s/op
Iteration  43: 5.928 s/op
Iteration  44: 5.898 s/op
Iteration  45: 5.883 s/op
Iteration  46: 5.906 s/op
Iteration  47: 5.912 s/op
Iteration  48: 5.887 s/op
Iteration  49: 5.864 s/op
Iteration  50: 5.951 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.022 ?(99.9%) 0.173 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 39 
    [6.000, 6.250) = 9 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 1 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 1 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.864 s/op
     p(50.0000) =      5.943 s/op
     p(90.0000) =      6.085 s/op
     p(95.0000) =      6.531 s/op
     p(99.0000) =      8.174 s/op
     p(99.9000) =      8.174 s/op
     p(99.9900) =      8.174 s/op
     p(99.9990) =      8.174 s/op
     p(99.9999) =      8.174 s/op
    p(100.0000) =      8.174 s/op


# Run complete. Total time: 00:05:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.022 ? 0.173   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9_12.0.1_1564572956466.json
{"wallclock_times": [303.062065041], "core_cycle_counts": [[308816913476], [260304386252], [259101504989], [303487448795]], "aperf_counts": [[307978612885], [260134763278], [258953221648], [303393007705]], "mperf_counts": [[307984502654], [260134742340], [258953189504], [303392996168]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 13:40:59: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:41:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 13:41:00: INFO] 136 executions left in scheduler queue
[2019-07-31 13:41:00: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:41:00: INFO] Estimated completion (next execution): 2019-07-31 13:48:34 (0:07:33 from now)
[2019-07-31 13:41:00: INFO] Reboot in preparation for next execution
[2019-07-31 13:45:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 13:45:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 13:45:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 13:45:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 13:45:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 13:45:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 13:58:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.444 s/op
Iteration   2: 15.972 s/op
Iteration   3: 15.916 s/op
Iteration   4: 16.636 s/op
Iteration   5: 16.025 s/op
Iteration   6: 15.938 s/op
Iteration   7: 15.992 s/op
Iteration   8: 16.043 s/op
Iteration   9: 15.926 s/op
Iteration  10: 16.042 s/op
Iteration  11: 16.030 s/op
Iteration  12: 16.033 s/op
Iteration  13: 15.999 s/op
Iteration  14: 16.020 s/op
Iteration  15: 16.033 s/op
Iteration  16: 16.090 s/op
Iteration  17: 15.955 s/op
Iteration  18: 15.957 s/op
Iteration  19: 16.018 s/op
Iteration  20: 16.013 s/op
Iteration  21: 15.955 s/op
Iteration  22: 16.020 s/op
Iteration  23: 15.968 s/op
Iteration  24: 15.869 s/op
Iteration  25: 16.073 s/op
Iteration  26: 16.011 s/op
Iteration  27: 15.930 s/op
Iteration  28: 15.939 s/op
Iteration  29: 16.044 s/op
Iteration  30: 16.701 s/op
Iteration  31: 15.981 s/op
Iteration  32: 15.919 s/op
Iteration  33: 15.976 s/op
Iteration  34: 16.004 s/op
Iteration  35: 15.982 s/op
Iteration  36: 15.871 s/op
Iteration  37: 15.929 s/op
Iteration  38: 16.005 s/op
Iteration  39: 15.987 s/op
Iteration  40: 15.981 s/op
Iteration  41: 16.065 s/op
Iteration  42: 15.973 s/op
Iteration  43: 15.972 s/op
Iteration  44: 16.001 s/op
Iteration  45: 16.608 s/op
Iteration  46: 16.004 s/op
Iteration  47: 15.943 s/op
Iteration  48: 15.932 s/op
Iteration  49: 16.034 s/op
Iteration  50: 15.925 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.054 ?(99.9%) 0.129 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 26 
    [16.000, 16.250) = 20 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 3 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 1 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.869 s/op
     p(50.0000) =     15.996 s/op
     p(90.0000) =     16.088 s/op
     p(95.0000) =     16.666 s/op
     p(99.0000) =     17.444 s/op
     p(99.9000) =     17.444 s/op
     p(99.9900) =     17.444 s/op
     p(99.9990) =     17.444 s/op
     p(99.9999) =     17.444 s/op
    p(100.0000) =     17.444 s/op


# Run complete. Total time: 00:13:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.054 ? 0.129   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9_12.0.1_1564573513809.json
{"wallclock_times": [804.302319853], "core_cycle_counts": [[864388073854], [635634183451], [642469676484], [463828486680]], "aperf_counts": [[862551706820], [635445288038], [642235895414], [463634226326]], "mperf_counts": [[862554335894], [635445712030], [642236758788], [463634183766]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 13:58:38: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-31 13:58:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 13:58:39: INFO] 135 executions left in scheduler queue
[2019-07-31 13:58:39: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 13:58:39: INFO] Estimated completion (next execution): 2019-07-31 14:14:33 (0:15:54 from now)
[2019-07-31 13:58:39: INFO] Reboot in preparation for next execution
[2019-07-31 14:02:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 14:08:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.990 s/op
Iteration   2: 7.137 s/op
Iteration   3: 6.699 s/op
Iteration   4: 6.731 s/op
Iteration   5: 6.552 s/op
Iteration   6: 6.695 s/op
Iteration   7: 6.628 s/op
Iteration   8: 6.739 s/op
Iteration   9: 6.653 s/op
Iteration  10: 6.681 s/op
Iteration  11: 6.684 s/op
Iteration  12: 6.613 s/op
Iteration  13: 6.731 s/op
Iteration  14: 6.630 s/op
Iteration  15: 6.575 s/op
Iteration  16: 6.679 s/op
Iteration  17: 6.716 s/op
Iteration  18: 6.785 s/op
Iteration  19: 6.676 s/op
Iteration  20: 6.697 s/op
Iteration  21: 6.589 s/op
Iteration  22: 6.612 s/op
Iteration  23: 6.663 s/op
Iteration  24: 6.614 s/op
Iteration  25: 6.687 s/op
Iteration  26: 6.642 s/op
Iteration  27: 6.620 s/op
Iteration  28: 6.643 s/op
Iteration  29: 6.658 s/op
Iteration  30: 6.699 s/op
Iteration  31: 6.638 s/op
Iteration  32: 6.598 s/op
Iteration  33: 6.664 s/op
Iteration  34: 6.697 s/op
Iteration  35: 6.714 s/op
Iteration  36: 6.648 s/op
Iteration  37: 6.557 s/op
Iteration  38: 6.603 s/op
Iteration  39: 6.554 s/op
Iteration  40: 6.681 s/op
Iteration  41: 6.613 s/op
Iteration  42: 6.672 s/op
Iteration  43: 6.616 s/op
Iteration  44: 6.566 s/op
Iteration  45: 6.652 s/op
Iteration  46: 6.571 s/op
Iteration  47: 6.585 s/op
Iteration  48: 6.620 s/op
Iteration  49: 6.475 s/op
Iteration  50: 6.596 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.681 ?(99.9%) 0.104 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 18 
    [6.625, 6.750) = 28 
    [6.750, 6.875) = 1 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 1 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.475 s/op
     p(50.0000) =      6.650 s/op
     p(90.0000) =      6.731 s/op
     p(95.0000) =      6.943 s/op
     p(99.0000) =      7.990 s/op
     p(99.9000) =      7.990 s/op
     p(99.9900) =      7.990 s/op
     p(99.9990) =      7.990 s/op
     p(99.9999) =      7.990 s/op
    p(100.0000) =      7.990 s/op


# Run complete. Total time: 00:05:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.681 ? 0.104   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9-8u222-b10_1564574572508.json
{"wallclock_times": [335.518104011], "core_cycle_counts": [[404768320066], [239033888401], [252479451033], [271114878379]], "aperf_counts": [[403998372411], [238884200914], [252357747380], [271045696189]], "mperf_counts": [[404000972188], [238884349658], [252357713012], [271045684968]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 14:08:28: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 14:08:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 14:08:28: INFO] 134 executions left in scheduler queue
[2019-07-31 14:08:28: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 14:08:28: INFO] Estimated completion (next execution): 2019-07-31 14:16:34 (0:08:05 from now)
[2019-07-31 14:08:28: INFO] Reboot in preparation for next execution
[2019-07-31 14:12:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 14:19:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.882 s/op
Iteration   2: 8.618 s/op
Iteration   3: 8.554 s/op
Iteration   4: 8.586 s/op
Iteration   5: 8.481 s/op
Iteration   6: 8.481 s/op
Iteration   7: 8.427 s/op
Iteration   8: 8.415 s/op
Iteration   9: 8.458 s/op
Iteration  10: 8.394 s/op
Iteration  11: 8.534 s/op
Iteration  12: 8.435 s/op
Iteration  13: 8.482 s/op
Iteration  14: 8.473 s/op
Iteration  15: 8.443 s/op
Iteration  16: 8.463 s/op
Iteration  17: 8.477 s/op
Iteration  18: 8.439 s/op
Iteration  19: 8.451 s/op
Iteration  20: 8.514 s/op
Iteration  21: 8.445 s/op
Iteration  22: 8.431 s/op
Iteration  23: 8.439 s/op
Iteration  24: 8.406 s/op
Iteration  25: 8.383 s/op
Iteration  26: 8.343 s/op
Iteration  27: 8.458 s/op
Iteration  28: 8.482 s/op
Iteration  29: 8.389 s/op
Iteration  30: 8.437 s/op
Iteration  31: 8.411 s/op
Iteration  32: 8.420 s/op
Iteration  33: 8.376 s/op
Iteration  34: 8.424 s/op
Iteration  35: 8.476 s/op
Iteration  36: 8.424 s/op
Iteration  37: 8.394 s/op
Iteration  38: 8.493 s/op
Iteration  39: 8.460 s/op
Iteration  40: 8.457 s/op
Iteration  41: 8.497 s/op
Iteration  42: 8.439 s/op
Iteration  43: 8.436 s/op
Iteration  44: 8.368 s/op
Iteration  45: 8.422 s/op
Iteration  46: 8.451 s/op
Iteration  47: 8.430 s/op
Iteration  48: 8.421 s/op
Iteration  49: 8.444 s/op
Iteration  50: 8.483 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.479 ?(99.9%) 0.103 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 2 
    [ 8.375,  8.500) = 42 
    [ 8.500,  8.625) = 5 
    [ 8.625,  8.750) = 0 
    [ 8.750,  8.875) = 0 
    [ 8.875,  9.000) = 0 
    [ 9.000,  9.125) = 0 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 0 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.343 s/op
     p(50.0000) =      8.443 s/op
     p(90.0000) =      8.532 s/op
     p(95.0000) =      8.601 s/op
     p(99.0000) =      9.882 s/op
     p(99.9000) =      9.882 s/op
     p(99.9900) =      9.882 s/op
     p(99.9990) =      9.882 s/op
     p(99.9999) =      9.882 s/op
    p(100.0000) =      9.882 s/op


# Run complete. Total time: 00:07:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  8.479 ? 0.103   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9-8u222-b10_1564575162568.json
{"wallclock_times": [425.15858620999995], "core_cycle_counts": [[455542300680], [317251729244], [335965198871], [347842238104]], "aperf_counts": [[454560299484], [317066078579], [335883114090], [347755350535]], "mperf_counts": [[454563819190], [317068016022], [335886267160], [347756105502]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 14:19:47: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 14:19:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 14:19:48: INFO] 133 executions left in scheduler queue
[2019-07-31 14:19:48: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 14:19:48: INFO] Estimated completion (next execution): 2019-07-31 14:29:24 (0:09:35 from now)
[2019-07-31 14:19:48: INFO] Reboot in preparation for next execution
[2019-07-31 14:24:02: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 14:29:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.775 s/op
Iteration   2: 6.756 s/op
Iteration   3: 6.503 s/op
Iteration   4: 6.533 s/op
Iteration   5: 6.599 s/op
Iteration   6: 6.380 s/op
Iteration   7: 6.400 s/op
Iteration   8: 6.386 s/op
Iteration   9: 6.367 s/op
Iteration  10: 6.365 s/op
Iteration  11: 6.362 s/op
Iteration  12: 6.374 s/op
Iteration  13: 6.325 s/op
Iteration  14: 6.362 s/op
Iteration  15: 6.319 s/op
Iteration  16: 6.346 s/op
Iteration  17: 6.348 s/op
Iteration  18: 6.306 s/op
Iteration  19: 6.318 s/op
Iteration  20: 6.367 s/op
Iteration  21: 6.345 s/op
Iteration  22: 6.377 s/op
Iteration  23: 6.344 s/op
Iteration  24: 6.349 s/op
Iteration  25: 6.334 s/op
Iteration  26: 6.303 s/op
Iteration  27: 6.320 s/op
Iteration  28: 6.317 s/op
Iteration  29: 6.356 s/op
Iteration  30: 6.410 s/op
Iteration  31: 6.380 s/op
Iteration  32: 6.291 s/op
Iteration  33: 6.302 s/op
Iteration  34: 6.277 s/op
Iteration  35: 6.313 s/op
Iteration  36: 6.388 s/op
Iteration  37: 6.336 s/op
Iteration  38: 6.418 s/op
Iteration  39: 6.381 s/op
Iteration  40: 6.346 s/op
Iteration  41: 6.354 s/op
Iteration  42: 6.378 s/op
Iteration  43: 6.384 s/op
Iteration  44: 6.352 s/op
Iteration  45: 6.389 s/op
Iteration  46: 6.378 s/op
Iteration  47: 6.373 s/op
Iteration  48: 6.373 s/op
Iteration  49: 6.358 s/op
Iteration  50: 6.347 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.401 ?(99.9%) 0.106 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 32 
    [6.375, 6.500) = 13 
    [6.500, 6.625) = 3 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 1 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.277 s/op
     p(50.0000) =      6.362 s/op
     p(90.0000) =      6.494 s/op
     p(95.0000) =      6.670 s/op
     p(99.0000) =      7.775 s/op
     p(99.9000) =      7.775 s/op
     p(99.9900) =      7.775 s/op
     p(99.9990) =      7.775 s/op
     p(99.9999) =      7.775 s/op
    p(100.0000) =      7.775 s/op


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.401 ? 0.106   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9-8u222-b10_1564575842600.json
{"wallclock_times": [321.55216648], "core_cycle_counts": [[304478434011], [373642056289], [251532587803], [261388807788]], "aperf_counts": [[303591768140], [373496908549], [251401253674], [261261464811]], "mperf_counts": [[303591449640], [373496881484], [251401226812], [261261444868]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 14:29:24: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 14:29:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 14:29:25: INFO] 132 executions left in scheduler queue
[2019-07-31 14:29:25: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 14:29:25: INFO] Estimated completion (next execution): 2019-07-31 14:37:16 (0:07:51 from now)
[2019-07-31 14:29:25: INFO] Reboot in preparation for next execution
[2019-07-31 14:32:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 14:41:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.833 s/op
Iteration   2: 10.909 s/op
Iteration   3: 11.455 s/op
Iteration   4: 10.706 s/op
Iteration   5: 11.637 s/op
Iteration   6: 10.798 s/op
Iteration   7: 10.638 s/op
Iteration   8: 10.692 s/op
Iteration   9: 10.753 s/op
Iteration  10: 10.669 s/op
Iteration  11: 10.672 s/op
Iteration  12: 10.576 s/op
Iteration  13: 10.686 s/op
Iteration  14: 11.610 s/op
Iteration  15: 11.356 s/op
Iteration  16: 10.676 s/op
Iteration  17: 10.679 s/op
Iteration  18: 10.706 s/op
Iteration  19: 10.748 s/op
Iteration  20: 11.507 s/op
Iteration  21: 10.722 s/op
Iteration  22: 10.605 s/op
Iteration  23: 10.669 s/op
Iteration  24: 10.437 s/op
Iteration  25: 10.498 s/op
Iteration  26: 10.616 s/op
Iteration  27: 10.474 s/op
Iteration  28: 10.467 s/op
Iteration  29: 10.731 s/op
Iteration  30: 10.543 s/op
Iteration  31: 10.504 s/op
Iteration  32: 10.464 s/op
Iteration  33: 10.488 s/op
Iteration  34: 10.460 s/op
Iteration  35: 10.458 s/op
Iteration  36: 10.449 s/op
Iteration  37: 10.532 s/op
Iteration  38: 11.198 s/op
Iteration  39: 11.242 s/op
Iteration  40: 10.439 s/op
Iteration  41: 10.351 s/op
Iteration  42: 10.493 s/op
Iteration  43: 10.519 s/op
Iteration  44: 11.463 s/op
Iteration  45: 10.445 s/op
Iteration  46: 10.558 s/op
Iteration  47: 10.490 s/op
Iteration  48: 10.481 s/op
Iteration  49: 11.302 s/op
Iteration  50: 10.505 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.778 ?(99.9%) 0.226 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 15 
    [10.500, 10.750) = 22 
    [10.750, 11.000) = 3 
    [11.000, 11.250) = 2 
    [11.250, 11.500) = 4 
    [11.500, 11.750) = 3 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.351 s/op
     p(50.0000) =     10.654 s/op
     p(90.0000) =     11.462 s/op
     p(95.0000) =     11.622 s/op
     p(99.0000) =     12.833 s/op
     p(99.9000) =     12.833 s/op
     p(99.9900) =     12.833 s/op
     p(99.9990) =     12.833 s/op
     p(99.9999) =     12.833 s/op
    p(100.0000) =     12.833 s/op


# Run complete. Total time: 00:09:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.778 ? 0.226   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9-8u222-b10_1564576375409.json
{"wallclock_times": [540.2059928880001], "core_cycle_counts": [[604519502273], [354276168054], [505058447623], [304978675766]], "aperf_counts": [[603308072887], [354141004246], [504881205990], [304854235138]], "mperf_counts": [[603308606654], [354140967322], [504881155622], [304854194024]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 14:41:55: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-31 14:41:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 14:41:56: INFO] 131 executions left in scheduler queue
[2019-07-31 14:41:56: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-07-31 14:41:56: INFO] Estimated completion (next execution): 2019-07-31 14:53:27 (0:11:30 from now)
[2019-07-31 14:41:56: INFO] Reboot in preparation for next execution
[2019-07-31 14:52:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.083 s/op
Iteration   2: 7.803 s/op
Iteration   3: 7.861 s/op
Iteration   4: 7.863 s/op
Iteration   5: 7.861 s/op
Iteration   6: 7.858 s/op
Iteration   7: 7.861 s/op
Iteration   8: 7.859 s/op
Iteration   9: 7.869 s/op
Iteration  10: 7.872 s/op
Iteration  11: 7.884 s/op
Iteration  12: 7.859 s/op
Iteration  13: 7.864 s/op
Iteration  14: 7.858 s/op
Iteration  15: 7.858 s/op
Iteration  16: 7.873 s/op
Iteration  17: 7.860 s/op
Iteration  18: 7.863 s/op
Iteration  19: 7.861 s/op
Iteration  20: 7.862 s/op
Iteration  21: 7.854 s/op
Iteration  22: 7.862 s/op
Iteration  23: 7.862 s/op
Iteration  24: 7.863 s/op
Iteration  25: 7.857 s/op
Iteration  26: 7.856 s/op
Iteration  27: 7.858 s/op
Iteration  28: 7.858 s/op
Iteration  29: 7.863 s/op
Iteration  30: 7.867 s/op
Iteration  31: 7.873 s/op
Iteration  32: 7.894 s/op
Iteration  33: 7.856 s/op
Iteration  34: 7.857 s/op
Iteration  35: 7.863 s/op
Iteration  36: 7.859 s/op
Iteration  37: 7.857 s/op
Iteration  38: 7.864 s/op
Iteration  39: 7.859 s/op
Iteration  40: 7.870 s/op
Iteration  41: 7.865 s/op
Iteration  42: 7.857 s/op
Iteration  43: 7.857 s/op
Iteration  44: 7.866 s/op
Iteration  45: 7.858 s/op
Iteration  46: 7.858 s/op
Iteration  47: 7.863 s/op
Iteration  48: 7.857 s/op
Iteration  49: 7.864 s/op
Iteration  50: 7.868 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      7.866 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [7.800, 7.825) = 1 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 46 
    [7.875, 7.900) = 2 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 
    [7.975, 8.000) = 0 
    [8.000, 8.025) = 0 
    [8.025, 8.050) = 0 
    [8.050, 8.075) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.803 s/op
     p(50.0000) =      7.861 s/op
     p(90.0000) =      7.873 s/op
     p(95.0000) =      7.888 s/op
     p(99.0000) =      8.083 s/op
     p(99.9000) =      8.083 s/op
     p(99.9900) =      8.083 s/op
     p(99.9990) =      8.083 s/op
     p(99.9999) =      8.083 s/op
    p(100.0000) =      8.083 s/op


# Run complete. Total time: 00:06:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  7.866 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_graalvm-ce-19.1.1_1564577170423.json
{"wallclock_times": [394.145824123], "core_cycle_counts": [[328743935281], [378247975116], [243723332883], [322037890578]], "aperf_counts": [[327824697368], [378162426718], [243671119737], [321994822071]], "mperf_counts": [[327835590896], [378174832962], [243674060732], [321996492402]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 14:52:44: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-07-31 14:52:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 14:52:45: INFO] 130 executions left in scheduler queue
[2019-07-31 14:52:45: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-31 14:52:45: INFO] Estimated completion (next execution): 2019-07-31 15:01:49 (0:09:04 from now)
[2019-07-31 14:52:45: INFO] Reboot in preparation for next execution
[2019-07-31 14:57:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.331 s/op
Iteration   2: 0.865 s/op
Iteration   3: 0.851 s/op
Iteration   4: 0.925 s/op
Iteration   5: 0.837 s/op
Iteration   6: 0.844 s/op
Iteration   7: 0.840 s/op
Iteration   8: 0.842 s/op
Iteration   9: 0.849 s/op
Iteration  10: 0.841 s/op
Iteration  11: 0.838 s/op
Iteration  12: 0.845 s/op
Iteration  13: 0.843 s/op
Iteration  14: 0.847 s/op
Iteration  15: 0.845 s/op
Iteration  16: 0.847 s/op
Iteration  17: 0.840 s/op
Iteration  18: 0.843 s/op
Iteration  19: 0.838 s/op
Iteration  20: 0.851 s/op
Iteration  21: 0.840 s/op
Iteration  22: 0.839 s/op
Iteration  23: 0.846 s/op
Iteration  24: 0.843 s/op
Iteration  25: 0.842 s/op
Iteration  26: 0.847 s/op
Iteration  27: 0.842 s/op
Iteration  28: 0.841 s/op
Iteration  29: 0.841 s/op
Iteration  30: 0.842 s/op
Iteration  31: 0.841 s/op
Iteration  32: 0.842 s/op
Iteration  33: 0.837 s/op
Iteration  34: 0.838 s/op
Iteration  35: 0.842 s/op
Iteration  36: 0.840 s/op
Iteration  37: 0.841 s/op
Iteration  38: 0.844 s/op
Iteration  39: 0.842 s/op
Iteration  40: 0.845 s/op
Iteration  41: 0.841 s/op
Iteration  42: 0.846 s/op
Iteration  43: 0.846 s/op
Iteration  44: 0.836 s/op
Iteration  45: 0.840 s/op
Iteration  46: 0.838 s/op
Iteration  47: 0.838 s/op
Iteration  48: 0.842 s/op
Iteration  49: 0.840 s/op
Iteration  50: 0.837 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      0.854 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [0.800, 0.850) = 45 
    [0.850, 0.900) = 3 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.836 s/op
     p(50.0000) =      0.842 s/op
     p(90.0000) =      0.850 s/op
     p(95.0000) =      0.892 s/op
     p(99.0000) =      1.331 s/op
     p(99.9000) =      1.331 s/op
     p(99.9900) =      1.331 s/op
     p(99.9990) =      1.331 s/op
     p(99.9999) =      1.331 s/op
    p(100.0000) =      1.331 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.854 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_graalvm-ee-19.1.1_1564577818576.json
{"wallclock_times": [43.61326526799999], "core_cycle_counts": [[20385571668], [65636864894], [29645814640], [35319405587]], "aperf_counts": [[20201059025], [65617940718], [29623082134], [35297953135]], "mperf_counts": [[20223040544], [65623827546], [29623882384], [35299606248]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 14:57:42: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-31 14:57:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 14:57:43: INFO] 129 executions left in scheduler queue
[2019-07-31 14:57:43: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-31 14:57:43: INFO] Estimated completion (next execution): 2019-07-31 15:00:56 (0:03:13 from now)
[2019-07-31 14:57:43: INFO] Reboot in preparation for next execution
[2019-07-31 15:02:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.817 s/op
Iteration   2: 1.494 s/op
Iteration   3: 1.545 s/op
Iteration   4: 1.432 s/op
Iteration   5: 1.431 s/op
Iteration   6: 1.432 s/op
Iteration   7: 1.432 s/op
Iteration   8: 1.432 s/op
Iteration   9: 1.431 s/op
Iteration  10: 1.432 s/op
Iteration  11: 1.431 s/op
Iteration  12: 1.434 s/op
Iteration  13: 1.432 s/op
Iteration  14: 1.430 s/op
Iteration  15: 1.432 s/op
Iteration  16: 1.432 s/op
Iteration  17: 1.433 s/op
Iteration  18: 1.434 s/op
Iteration  19: 1.432 s/op
Iteration  20: 1.432 s/op
Iteration  21: 1.432 s/op
Iteration  22: 1.435 s/op
Iteration  23: 1.434 s/op
Iteration  24: 1.432 s/op
Iteration  25: 1.433 s/op
Iteration  26: 1.435 s/op
Iteration  27: 1.436 s/op
Iteration  28: 1.434 s/op
Iteration  29: 1.431 s/op
Iteration  30: 1.431 s/op
Iteration  31: 1.432 s/op
Iteration  32: 1.432 s/op
Iteration  33: 1.432 s/op
Iteration  34: 1.432 s/op
Iteration  35: 1.436 s/op
Iteration  36: 1.434 s/op
Iteration  37: 1.435 s/op
Iteration  38: 1.432 s/op
Iteration  39: 1.436 s/op
Iteration  40: 1.434 s/op
Iteration  41: 1.435 s/op
Iteration  42: 1.436 s/op
Iteration  43: 1.437 s/op
Iteration  44: 1.436 s/op
Iteration  45: 1.436 s/op
Iteration  46: 1.435 s/op
Iteration  47: 1.435 s/op
Iteration  48: 1.433 s/op
Iteration  49: 1.434 s/op
Iteration  50: 1.434 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.444 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.400, 1.450) = 47 
    [1.450, 1.500) = 1 
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.430 s/op
     p(50.0000) =      1.433 s/op
     p(90.0000) =      1.436 s/op
     p(95.0000) =      1.517 s/op
     p(99.0000) =      1.817 s/op
     p(99.9000) =      1.817 s/op
     p(99.9900) =      1.817 s/op
     p(99.9990) =      1.817 s/op
     p(99.9999) =      1.817 s/op
    p(100.0000) =      1.817 s/op


# Run complete. Total time: 00:01:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.444 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_graalvm-ee-19.1.1_1564578075419.json
{"wallclock_times": [73.069580548], "core_cycle_counts": [[70480281581], [47253051567], [42171040160], [80121313692]], "aperf_counts": [[70310933247], [47225247912], [42156226764], [80109354549]], "mperf_counts": [[70329192456], [47229812974], [42156662804], [80109989640]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 15:02:28: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-31 15:02:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 15:02:29: INFO] 128 executions left in scheduler queue
[2019-07-31 15:02:29: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-07-31 15:02:29: INFO] Estimated completion (next execution): 2019-07-31 15:06:12 (0:03:43 from now)
[2019-07-31 15:02:29: INFO] Reboot in preparation for next execution
[2019-07-31 15:06:44: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 15:06:44: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 15:06:44: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 15:06:44: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 15:06:44: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 15:18:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.422 s/op
Iteration   2: 14.639 s/op
Iteration   3: 14.524 s/op
Iteration   4: 14.495 s/op
Iteration   5: 14.413 s/op
Iteration   6: 14.507 s/op
Iteration   7: 14.373 s/op
Iteration   8: 14.402 s/op
Iteration   9: 14.401 s/op
Iteration  10: 14.359 s/op
Iteration  11: 14.340 s/op
Iteration  12: 14.504 s/op
Iteration  13: 14.357 s/op
Iteration  14: 14.380 s/op
Iteration  15: 14.407 s/op
Iteration  16: 14.439 s/op
Iteration  17: 14.400 s/op
Iteration  18: 14.549 s/op
Iteration  19: 14.357 s/op
Iteration  20: 14.480 s/op
Iteration  21: 14.376 s/op
Iteration  22: 14.411 s/op
Iteration  23: 14.392 s/op
Iteration  24: 14.372 s/op
Iteration  25: 14.486 s/op
Iteration  26: 14.485 s/op
Iteration  27: 14.379 s/op
Iteration  28: 14.461 s/op
Iteration  29: 14.386 s/op
Iteration  30: 14.528 s/op
Iteration  31: 14.369 s/op
Iteration  32: 14.539 s/op
Iteration  33: 14.499 s/op
Iteration  34: 14.441 s/op
Iteration  35: 14.408 s/op
Iteration  36: 14.415 s/op
Iteration  37: 14.484 s/op
Iteration  38: 14.426 s/op
Iteration  39: 14.501 s/op
Iteration  40: 14.400 s/op
Iteration  41: 14.391 s/op
Iteration  42: 14.378 s/op
Iteration  43: 14.478 s/op
Iteration  44: 14.430 s/op
Iteration  45: 14.411 s/op
Iteration  46: 14.417 s/op
Iteration  47: 14.404 s/op
Iteration  48: 14.517 s/op
Iteration  49: 14.386 s/op
Iteration  50: 14.522 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     14.457 ?(99.9%) 0.076 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 7 
    [14.375, 14.500) = 32 
    [14.500, 14.625) = 9 
    [14.625, 14.750) = 1 
    [14.750, 14.875) = 0 
    [14.875, 15.000) = 0 
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 1 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.340 s/op
     p(50.0000) =     14.414 s/op
     p(90.0000) =     14.528 s/op
     p(95.0000) =     14.590 s/op
     p(99.0000) =     15.422 s/op
     p(99.9000) =     15.422 s/op
     p(99.9900) =     15.422 s/op
     p(99.9990) =     15.422 s/op
     p(99.9999) =     15.422 s/op
    p(100.0000) =     15.422 s/op


# Run complete. Total time: 00:12:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.457 ? 0.076   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot_12.0.2_1564578404509.json
{"wallclock_times": [723.891751948], "core_cycle_counts": [[406820365517], [520746312223], [821020798719], [787354329360]], "aperf_counts": [[404527850987], [520489529161], [820729719104], [787055087429]], "mperf_counts": [[412115167002], [530388915534], [838010576678], [803333814128]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 15:18:48: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-07-31 15:18:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 15:18:49: INFO] 127 executions left in scheduler queue
[2019-07-31 15:18:49: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-07-31 15:18:49: INFO] Estimated completion (next execution): 2019-07-31 15:33:23 (0:14:34 from now)
[2019-07-31 15:18:49: INFO] Reboot in preparation for next execution
[2019-07-31 15:23:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 15:23:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 15:23:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 15:23:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 15:23:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 15:34:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.439 s/op
Iteration   2: 13.095 s/op
Iteration   3: 13.150 s/op
Iteration   4: 13.171 s/op
Iteration   5: 13.134 s/op
Iteration   6: 13.261 s/op
Iteration   7: 13.008 s/op
Iteration   8: 13.140 s/op
Iteration   9: 13.102 s/op
Iteration  10: 13.063 s/op
Iteration  11: 13.124 s/op
Iteration  12: 13.143 s/op
Iteration  13: 13.076 s/op
Iteration  14: 13.117 s/op
Iteration  15: 13.039 s/op
Iteration  16: 13.135 s/op
Iteration  17: 13.111 s/op
Iteration  18: 13.102 s/op
Iteration  19: 13.029 s/op
Iteration  20: 13.086 s/op
Iteration  21: 13.185 s/op
Iteration  22: 13.152 s/op
Iteration  23: 12.958 s/op
Iteration  24: 13.069 s/op
Iteration  25: 13.184 s/op
Iteration  26: 13.070 s/op
Iteration  27: 12.984 s/op
Iteration  28: 13.139 s/op
Iteration  29: 13.077 s/op
Iteration  30: 13.059 s/op
Iteration  31: 13.157 s/op
Iteration  32: 13.074 s/op
Iteration  33: 13.074 s/op
Iteration  34: 13.136 s/op
Iteration  35: 13.105 s/op
Iteration  36: 13.100 s/op
Iteration  37: 13.029 s/op
Iteration  38: 13.148 s/op
Iteration  39: 12.932 s/op
Iteration  40: 13.071 s/op
Iteration  41: 13.075 s/op
Iteration  42: 13.074 s/op
Iteration  43: 13.173 s/op
Iteration  44: 13.109 s/op
Iteration  45: 13.107 s/op
Iteration  46: 13.121 s/op
Iteration  47: 13.075 s/op
Iteration  48: 13.067 s/op
Iteration  49: 13.142 s/op
Iteration  50: 13.069 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.105 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [12.900, 12.950) = 1 
    [12.950, 13.000) = 2 
    [13.000, 13.050) = 4 
    [13.050, 13.100) = 16 
    [13.100, 13.150) = 18 
    [13.150, 13.200) = 7 
    [13.200, 13.250) = 0 
    [13.250, 13.300) = 1 
    [13.300, 13.350) = 0 
    [13.350, 13.400) = 0 
    [13.400, 13.450) = 1 

  Percentiles, s/op:
      p(0.0000) =     12.932 s/op
     p(50.0000) =     13.102 s/op
     p(90.0000) =     13.173 s/op
     p(95.0000) =     13.219 s/op
     p(99.0000) =     13.439 s/op
     p(99.9000) =     13.439 s/op
     p(99.9900) =     13.439 s/op
     p(99.9990) =     13.439 s/op
     p(99.9999) =     13.439 s/op
    p(100.0000) =     13.439 s/op


# Run complete. Total time: 00:10:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.105 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot_11.0.4_1564579384033.json
{"wallclock_times": [656.3454041099999], "core_cycle_counts": [[667012992646], [595961779287], [705453703065], [435656096477]], "aperf_counts": [[665393577237], [595769039201], [705354217469], [435555311274]], "mperf_counts": [[666455655318], [596338917844], [705948086376], [435912715890]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 15:34:00: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-07-31 15:34:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 15:34:01: INFO] 126 executions left in scheduler queue
[2019-07-31 15:34:01: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 15:34:01: INFO] Estimated completion (next execution): 2019-07-31 15:47:27 (0:13:26 from now)
[2019-07-31 15:34:01: INFO] Reboot in preparation for next execution
[2019-07-31 15:42:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.723 s/op
Iteration   2: 5.167 s/op
Iteration   3: 5.123 s/op
Iteration   4: 5.173 s/op
Iteration   5: 5.124 s/op
Iteration   6: 5.159 s/op
Iteration   7: 5.149 s/op
Iteration   8: 5.112 s/op
Iteration   9: 5.143 s/op
Iteration  10: 5.137 s/op
Iteration  11: 5.140 s/op
Iteration  12: 5.148 s/op
Iteration  13: 5.130 s/op
Iteration  14: 5.135 s/op
Iteration  15: 5.095 s/op
Iteration  16: 5.148 s/op
Iteration  17: 5.141 s/op
Iteration  18: 5.136 s/op
Iteration  19: 5.154 s/op
Iteration  20: 5.140 s/op
Iteration  21: 5.104 s/op
Iteration  22: 5.140 s/op
Iteration  23: 5.140 s/op
Iteration  24: 5.165 s/op
Iteration  25: 5.147 s/op
Iteration  26: 5.157 s/op
Iteration  27: 5.108 s/op
Iteration  28: 5.150 s/op
Iteration  29: 5.158 s/op
Iteration  30: 5.148 s/op
Iteration  31: 5.151 s/op
Iteration  32: 5.126 s/op
Iteration  33: 5.154 s/op
Iteration  34: 5.141 s/op
Iteration  35: 5.150 s/op
Iteration  36: 5.169 s/op
Iteration  37: 5.110 s/op
Iteration  38: 5.146 s/op
Iteration  39: 5.153 s/op
Iteration  40: 5.153 s/op
Iteration  41: 5.157 s/op
Iteration  42: 5.158 s/op
Iteration  43: 5.096 s/op
Iteration  44: 5.141 s/op
Iteration  45: 5.155 s/op
Iteration  46: 5.161 s/op
Iteration  47: 5.169 s/op
Iteration  48: 5.101 s/op
Iteration  49: 5.172 s/op
Iteration  50: 5.145 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.154 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [5.000, 5.050) = 0 
    [5.050, 5.100) = 2 
    [5.100, 5.150) = 28 
    [5.150, 5.200) = 19 
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 0 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 1 
    [5.750, 5.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.095 s/op
     p(50.0000) =      5.147 s/op
     p(90.0000) =      5.169 s/op
     p(95.0000) =      5.172 s/op
     p(99.0000) =      5.723 s/op
     p(99.9000) =      5.723 s/op
     p(99.9900) =      5.723 s/op
     p(99.9990) =      5.723 s/op
     p(99.9999) =      5.723 s/op
    p(100.0000) =      5.723 s/op


# Run complete. Total time: 00:04:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.154 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_graalvm-ee-19.1.1_1564580312118.json
{"wallclock_times": [258.76113160799997], "core_cycle_counts": [[209285599763], [292997859843], [214170336439], [190084405333]], "aperf_counts": [[208600199783], [292935303032], [214106807045], [190029264139]], "mperf_counts": [[208619858406], [292943386430], [214108131498], [190031175542]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 15:42:50: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 15:42:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 15:42:51: INFO] 125 executions left in scheduler queue
[2019-07-31 15:42:51: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 15:42:51: INFO] Estimated completion (next execution): 2019-07-31 15:49:40 (0:06:49 from now)
[2019-07-31 15:42:51: INFO] Reboot in preparation for next execution
[2019-07-31 15:55:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.663 s/op
Iteration   2: 9.641 s/op
Iteration   3: 9.532 s/op
Iteration   4: 9.522 s/op
Iteration   5: 9.525 s/op
Iteration   6: 9.536 s/op
Iteration   7: 9.537 s/op
Iteration   8: 9.501 s/op
Iteration   9: 9.517 s/op
Iteration  10: 9.513 s/op
Iteration  11: 9.524 s/op
Iteration  12: 9.512 s/op
Iteration  13: 9.536 s/op
Iteration  14: 9.529 s/op
Iteration  15: 9.553 s/op
Iteration  16: 9.510 s/op
Iteration  17: 9.532 s/op
Iteration  18: 9.519 s/op
Iteration  19: 9.525 s/op
Iteration  20: 9.518 s/op
Iteration  21: 9.518 s/op
Iteration  22: 9.525 s/op
Iteration  23: 9.530 s/op
Iteration  24: 9.543 s/op
Iteration  25: 9.502 s/op
Iteration  26: 9.540 s/op
Iteration  27: 9.524 s/op
Iteration  28: 9.523 s/op
Iteration  29: 9.493 s/op
Iteration  30: 9.523 s/op
Iteration  31: 9.530 s/op
Iteration  32: 9.531 s/op
Iteration  33: 9.519 s/op
Iteration  34: 9.502 s/op
Iteration  35: 9.527 s/op
Iteration  36: 9.546 s/op
Iteration  37: 9.529 s/op
Iteration  38: 9.519 s/op
Iteration  39: 9.521 s/op
Iteration  40: 9.541 s/op
Iteration  41: 9.531 s/op
Iteration  42: 9.513 s/op
Iteration  43: 9.512 s/op
Iteration  44: 9.541 s/op
Iteration  45: 9.540 s/op
Iteration  46: 9.536 s/op
Iteration  47: 9.544 s/op
Iteration  48: 9.506 s/op
Iteration  49: 9.538 s/op
Iteration  50: 9.534 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.531 ?(99.9%) 0.014 s/op

  Histogram, s/op:
    [9.400, 9.425) = 0 
    [9.425, 9.450) = 0 
    [9.450, 9.475) = 0 
    [9.475, 9.500) = 1 
    [9.500, 9.525) = 23 
    [9.525, 9.550) = 23 
    [9.550, 9.575) = 1 
    [9.575, 9.600) = 0 
    [9.600, 9.625) = 0 
    [9.625, 9.650) = 1 
    [9.650, 9.675) = 1 
    [9.675, 9.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.493 s/op
     p(50.0000) =      9.526 s/op
     p(90.0000) =      9.544 s/op
     p(95.0000) =      9.592 s/op
     p(99.0000) =      9.663 s/op
     p(99.9000) =      9.663 s/op
     p(99.9900) =      9.663 s/op
     p(99.9990) =      9.663 s/op
     p(99.9999) =      9.663 s/op
    p(100.0000) =      9.663 s/op


# Run complete. Total time: 00:07:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.531 ? 0.014   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_graalvm-ee-19.1.1_1564580824428.json
{"wallclock_times": [477.41376882400004], "core_cycle_counts": [[466839812368], [560374259865], [332845317017], [176973479538]], "aperf_counts": [[465818548591], [560292606056], [332804820204], [176933022819]], "mperf_counts": [[465834186798], [560309021630], [332807755704], [176934199062]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 15:55:01: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 15:55:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 15:55:02: INFO] 124 executions left in scheduler queue
[2019-07-31 15:55:02: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 15:55:02: INFO] Estimated completion (next execution): 2019-07-31 16:05:30 (0:10:27 from now)
[2019-07-31 15:55:02: INFO] Reboot in preparation for next execution
[2019-07-31 16:03:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.048 s/op
Iteration   2: 4.840 s/op
Iteration   3: 4.686 s/op
Iteration   4: 4.655 s/op
Iteration   5: 4.682 s/op
Iteration   6: 4.663 s/op
Iteration   7: 4.695 s/op
Iteration   8: 4.672 s/op
Iteration   9: 4.651 s/op
Iteration  10: 4.636 s/op
Iteration  11: 4.647 s/op
Iteration  12: 4.669 s/op
Iteration  13: 4.664 s/op
Iteration  14: 4.660 s/op
Iteration  15: 4.680 s/op
Iteration  16: 4.657 s/op
Iteration  17: 4.656 s/op
Iteration  18: 4.666 s/op
Iteration  19: 4.673 s/op
Iteration  20: 4.677 s/op
Iteration  21: 4.688 s/op
Iteration  22: 4.710 s/op
Iteration  23: 4.665 s/op
Iteration  24: 4.683 s/op
Iteration  25: 4.673 s/op
Iteration  26: 4.679 s/op
Iteration  27: 4.703 s/op
Iteration  28: 4.663 s/op
Iteration  29: 4.678 s/op
Iteration  30: 4.693 s/op
Iteration  31: 4.672 s/op
Iteration  32: 4.666 s/op
Iteration  33: 4.682 s/op
Iteration  34: 4.682 s/op
Iteration  35: 4.658 s/op
Iteration  36: 4.683 s/op
Iteration  37: 4.673 s/op
Iteration  38: 4.727 s/op
Iteration  39: 4.698 s/op
Iteration  40: 4.678 s/op
Iteration  41: 4.687 s/op
Iteration  42: 4.689 s/op
Iteration  43: 4.667 s/op
Iteration  44: 4.686 s/op
Iteration  45: 4.681 s/op
Iteration  46: 4.684 s/op
Iteration  47: 4.693 s/op
Iteration  48: 4.668 s/op
Iteration  49: 4.690 s/op
Iteration  50: 4.687 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.687 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [4.600, 4.650) = 2 
    [4.650, 4.700) = 43 
    [4.700, 4.750) = 3 
    [4.750, 4.800) = 0 
    [4.800, 4.850) = 1 
    [4.850, 4.900) = 0 
    [4.900, 4.950) = 0 
    [4.950, 5.000) = 0 
    [5.000, 5.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.636 s/op
     p(50.0000) =      4.678 s/op
     p(90.0000) =      4.703 s/op
     p(95.0000) =      4.778 s/op
     p(99.0000) =      5.048 s/op
     p(99.9000) =      5.048 s/op
     p(99.9900) =      5.048 s/op
     p(99.9990) =      5.048 s/op
     p(99.9999) =      5.048 s/op
    p(100.0000) =      5.048 s/op


# Run complete. Total time: 00:03:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.687 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_graalvm-ee-19.1.1_1564581558454.json
{"wallclock_times": [235.353330564], "core_cycle_counts": [[126657037752], [260204041422], [239215027744], [139316786781]], "aperf_counts": [[126033715825], [260166196393], [239193273671], [139290514884]], "mperf_counts": [[126055809526], [260166931734], [239202361174], [139292053206]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 16:03:13: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 16:03:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 16:03:14: INFO] 123 executions left in scheduler queue
[2019-07-31 16:03:14: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 16:03:14: INFO] Estimated completion (next execution): 2019-07-31 16:09:40 (0:06:25 from now)
[2019-07-31 16:03:14: INFO] Reboot in preparation for next execution
[2019-07-31 16:13:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.938 s/op
Iteration   2: 7.793 s/op
Iteration   3: 7.802 s/op
Iteration   4: 7.709 s/op
Iteration   5: 7.742 s/op
Iteration   6: 7.732 s/op
Iteration   7: 7.752 s/op
Iteration   8: 7.728 s/op
Iteration   9: 7.732 s/op
Iteration  10: 7.744 s/op
Iteration  11: 7.742 s/op
Iteration  12: 7.753 s/op
Iteration  13: 7.752 s/op
Iteration  14: 7.723 s/op
Iteration  15: 7.735 s/op
Iteration  16: 7.752 s/op
Iteration  17: 7.742 s/op
Iteration  18: 7.743 s/op
Iteration  19: 7.737 s/op
Iteration  20: 7.764 s/op
Iteration  21: 7.761 s/op
Iteration  22: 7.743 s/op
Iteration  23: 7.735 s/op
Iteration  24: 7.722 s/op
Iteration  25: 7.753 s/op
Iteration  26: 7.755 s/op
Iteration  27: 7.747 s/op
Iteration  28: 7.744 s/op
Iteration  29: 7.756 s/op
Iteration  30: 7.742 s/op
Iteration  31: 7.746 s/op
Iteration  32: 7.753 s/op
Iteration  33: 7.741 s/op
Iteration  34: 7.731 s/op
Iteration  35: 7.753 s/op
Iteration  36: 7.731 s/op
Iteration  37: 7.732 s/op
Iteration  38: 7.730 s/op
Iteration  39: 7.724 s/op
Iteration  40: 7.721 s/op
Iteration  41: 7.729 s/op
Iteration  42: 7.758 s/op
Iteration  43: 7.729 s/op
Iteration  44: 7.723 s/op
Iteration  45: 7.729 s/op
Iteration  46: 7.755 s/op
Iteration  47: 7.714 s/op
Iteration  48: 7.736 s/op
Iteration  49: 7.742 s/op
Iteration  50: 7.744 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.746 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [7.700, 7.725) = 7 
    [7.725, 7.750) = 27 
    [7.750, 7.775) = 13 
    [7.775, 7.800) = 1 
    [7.800, 7.825) = 1 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 0 
    [7.875, 7.900) = 0 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 1 
    [7.950, 7.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.709 s/op
     p(50.0000) =      7.742 s/op
     p(90.0000) =      7.761 s/op
     p(95.0000) =      7.797 s/op
     p(99.0000) =      7.938 s/op
     p(99.9000) =      7.938 s/op
     p(99.9900) =      7.938 s/op
     p(99.9990) =      7.938 s/op
     p(99.9999) =      7.938 s/op
    p(100.0000) =      7.938 s/op


# Run complete. Total time: 00:06:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  7.746 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_graalvm-ee-19.1.1_1564582050522.json
{"wallclock_times": [388.21783918499995], "core_cycle_counts": [[222534081082], [241602182324], [314970534979], [479833390066]], "aperf_counts": [[221544296418], [241546864676], [314940055371], [479805694616]], "mperf_counts": [[221553953166], [241553699394], [314942004056], [479805824102]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 16:13:58: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-31 16:13:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 16:13:59: INFO] 122 executions left in scheduler queue
[2019-07-31 16:13:59: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-07-31 16:13:59: INFO] Estimated completion (next execution): 2019-07-31 16:22:58 (0:08:58 from now)
[2019-07-31 16:13:59: INFO] Reboot in preparation for next execution
[2019-07-31 16:18:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 16:18:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 16:18:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 16:18:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 16:18:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 16:18:15: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 16:33:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.598 s/op
Iteration   2: 16.964 s/op
Iteration   3: 18.803 s/op
Iteration   4: 17.523 s/op
Iteration   5: 17.528 s/op
Iteration   6: 17.616 s/op
Iteration   7: 18.937 s/op
Iteration   8: 18.959 s/op
Iteration   9: 18.928 s/op
Iteration  10: 18.976 s/op
Iteration  11: 18.938 s/op
Iteration  12: 18.931 s/op
Iteration  13: 18.944 s/op
Iteration  14: 18.916 s/op
Iteration  15: 18.943 s/op
Iteration  16: 18.954 s/op
Iteration  17: 18.982 s/op
Iteration  18: 18.953 s/op
Iteration  19: 18.959 s/op
Iteration  20: 18.940 s/op
Iteration  21: 18.945 s/op
Iteration  22: 18.937 s/op
Iteration  23: 18.979 s/op
Iteration  24: 18.977 s/op
Iteration  25: 18.975 s/op
Iteration  26: 18.975 s/op
Iteration  27: 18.944 s/op
Iteration  28: 18.900 s/op
Iteration  29: 18.938 s/op
Iteration  30: 18.963 s/op
Iteration  31: 18.940 s/op
Iteration  32: 18.950 s/op
Iteration  33: 18.910 s/op
Iteration  34: 18.943 s/op
Iteration  35: 18.889 s/op
Iteration  36: 18.989 s/op
Iteration  37: 18.926 s/op
Iteration  38: 18.931 s/op
Iteration  39: 18.922 s/op
Iteration  40: 18.988 s/op
Iteration  41: 18.942 s/op
Iteration  42: 18.973 s/op
Iteration  43: 18.959 s/op
Iteration  44: 18.984 s/op
Iteration  45: 18.913 s/op
Iteration  46: 18.986 s/op
Iteration  47: 18.912 s/op
Iteration  48: 18.904 s/op
Iteration  49: 18.967 s/op
Iteration  50: 18.972 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     18.815 ?(99.9%) 0.213 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 3 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.964 s/op
     p(50.0000) =     18.942 s/op
     p(90.0000) =     18.982 s/op
     p(95.0000) =     18.987 s/op
     p(99.0000) =     18.989 s/op
     p(99.9000) =     18.989 s/op
     p(99.9900) =     18.989 s/op
     p(99.9990) =     18.989 s/op
     p(99.9999) =     18.989 s/op
    p(100.0000) =     18.989 s/op


# Run complete. Total time: 00:15:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  18.815 ? 0.213   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9_12.0.1_1564582694847.json
{"wallclock_times": [942.2789643169999], "core_cycle_counts": [[522543552162], [570726068196], [1086322322439], [869819508157]], "aperf_counts": [[519790158430], [570554545858], [1086177173873], [869666237787]], "mperf_counts": [[519790569324], [570554501620], [1086178080618], [869666864862]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 16:33:57: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-07-31 16:33:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 16:33:58: INFO] 121 executions left in scheduler queue
[2019-07-31 16:33:58: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-31 16:33:58: INFO] Estimated completion (next execution): 2019-07-31 16:52:10 (0:18:12 from now)
[2019-07-31 16:33:58: INFO] Reboot in preparation for next execution
[2019-07-31 16:38:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 16:38:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 16:38:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 16:38:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 16:38:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 16:40:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.225 s/op
Iteration   2: 2.273 s/op
Iteration   3: 2.615 s/op
Iteration   4: 2.306 s/op
Iteration   5: 2.365 s/op
Iteration   6: 2.343 s/op
Iteration   7: 2.371 s/op
Iteration   8: 2.363 s/op
Iteration   9: 2.368 s/op
Iteration  10: 2.358 s/op
Iteration  11: 2.329 s/op
Iteration  12: 2.347 s/op
Iteration  13: 2.354 s/op
Iteration  14: 2.342 s/op
Iteration  15: 2.337 s/op
Iteration  16: 2.150 s/op
Iteration  17: 2.348 s/op
Iteration  18: 2.343 s/op
Iteration  19: 2.335 s/op
Iteration  20: 2.338 s/op
Iteration  21: 2.344 s/op
Iteration  22: 2.350 s/op
Iteration  23: 2.349 s/op
Iteration  24: 2.177 s/op
Iteration  25: 2.339 s/op
Iteration  26: 2.346 s/op
Iteration  27: 2.346 s/op
Iteration  28: 2.334 s/op
Iteration  29: 2.340 s/op
Iteration  30: 2.343 s/op
Iteration  31: 2.344 s/op
Iteration  32: 2.332 s/op
Iteration  33: 2.242 s/op
Iteration  34: 2.221 s/op
Iteration  35: 2.354 s/op
Iteration  36: 2.348 s/op
Iteration  37: 2.312 s/op
Iteration  38: 2.181 s/op
Iteration  39: 2.300 s/op
Iteration  40: 2.348 s/op
Iteration  41: 2.338 s/op
Iteration  42: 2.201 s/op
Iteration  43: 2.343 s/op
Iteration  44: 2.346 s/op
Iteration  45: 2.332 s/op
Iteration  46: 2.346 s/op
Iteration  47: 2.342 s/op
Iteration  48: 2.334 s/op
Iteration  49: 2.346 s/op
Iteration  50: 2.338 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.327 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 3 
    [2.200, 2.250) = 4 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 34 
    [2.350, 2.400) = 7 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.150 s/op
     p(50.0000) =      2.342 s/op
     p(90.0000) =      2.362 s/op
     p(95.0000) =      2.370 s/op
     p(99.0000) =      2.615 s/op
     p(99.9000) =      2.615 s/op
     p(99.9900) =      2.615 s/op
     p(99.9990) =      2.615 s/op
     p(99.9999) =      2.615 s/op
    p(100.0000) =      2.615 s/op


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.327 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot_12.0.2_1564583894462.json
{"wallclock_times": [117.34462350000001], "core_cycle_counts": [[132098983392], [48981142492], [81699667311], [85796863635]], "aperf_counts": [[131807597149], [48933365854], [81671240557], [85777654426]], "mperf_counts": [[147668928382], [55248803916], [92628920714], [96564660956]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 16:40:11: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-31 16:40:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 16:40:12: INFO] 120 executions left in scheduler queue
[2019-07-31 16:40:12: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-31 16:40:12: INFO] Estimated completion (next execution): 2019-07-31 16:44:40 (0:04:27 from now)
[2019-07-31 16:40:12: INFO] Reboot in preparation for next execution
[2019-07-31 16:44:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 16:44:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 16:44:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 16:44:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 16:44:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 16:46:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.392 s/op
Iteration   2: 2.372 s/op
Iteration   3: 2.285 s/op
Iteration   4: 2.327 s/op
Iteration   5: 2.343 s/op
Iteration   6: 2.162 s/op
Iteration   7: 2.144 s/op
Iteration   8: 2.143 s/op
Iteration   9: 2.144 s/op
Iteration  10: 2.144 s/op
Iteration  11: 2.140 s/op
Iteration  12: 2.139 s/op
Iteration  13: 2.142 s/op
Iteration  14: 2.139 s/op
Iteration  15: 2.140 s/op
Iteration  16: 2.139 s/op
Iteration  17: 2.141 s/op
Iteration  18: 2.140 s/op
Iteration  19: 2.138 s/op
Iteration  20: 2.141 s/op
Iteration  21: 2.140 s/op
Iteration  22: 2.140 s/op
Iteration  23: 2.140 s/op
Iteration  24: 2.141 s/op
Iteration  25: 2.142 s/op
Iteration  26: 2.141 s/op
Iteration  27: 2.141 s/op
Iteration  28: 2.140 s/op
Iteration  29: 2.140 s/op
Iteration  30: 2.141 s/op
Iteration  31: 2.145 s/op
Iteration  32: 2.144 s/op
Iteration  33: 2.142 s/op
Iteration  34: 2.141 s/op
Iteration  35: 2.140 s/op
Iteration  36: 2.140 s/op
Iteration  37: 2.141 s/op
Iteration  38: 2.143 s/op
Iteration  39: 2.141 s/op
Iteration  40: 2.142 s/op
Iteration  41: 2.141 s/op
Iteration  42: 2.140 s/op
Iteration  43: 2.141 s/op
Iteration  44: 2.141 s/op
Iteration  45: 2.143 s/op
Iteration  46: 2.140 s/op
Iteration  47: 2.141 s/op
Iteration  48: 2.141 s/op
Iteration  49: 2.141 s/op
Iteration  50: 2.140 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.162 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [2.100, 2.125) = 0 
    [2.125, 2.150) = 44 
    [2.150, 2.175) = 1 
    [2.175, 2.200) = 0 
    [2.200, 2.225) = 0 
    [2.225, 2.250) = 0 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 1 
    [2.300, 2.325) = 0 
    [2.325, 2.350) = 2 
    [2.350, 2.375) = 1 
    [2.375, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.138 s/op
     p(50.0000) =      2.141 s/op
     p(90.0000) =      2.273 s/op
     p(95.0000) =      2.356 s/op
     p(99.0000) =      2.392 s/op
     p(99.9000) =      2.392 s/op
     p(99.9900) =      2.392 s/op
     p(99.9990) =      2.392 s/op
     p(99.9999) =      2.392 s/op
    p(100.0000) =      2.392 s/op


# Run complete. Total time: 00:01:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.162 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot_12.0.2_1564584267748.json
{"wallclock_times": [109.03069984400003], "core_cycle_counts": [[49712807347], [159098891186], [61261101457], [86183560758]], "aperf_counts": [[49388919462], [159075059862], [61241212986], [86164066078]], "mperf_counts": [[49886036376], [159184322782], [61452158080], [86275730944]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 16:46:16: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-31 16:46:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 16:46:17: INFO] 119 executions left in scheduler queue
[2019-07-31 16:46:17: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-07-31 16:46:17: INFO] Estimated completion (next execution): 2019-07-31 16:50:37 (0:04:19 from now)
[2019-07-31 16:46:17: INFO] Reboot in preparation for next execution
[2019-07-31 16:50:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 16:50:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 16:50:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 16:50:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 16:50:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 16:50:35: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 17:01:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.012 s/op
Iteration   2: 13.064 s/op
Iteration   3: 13.347 s/op
Iteration   4: 13.415 s/op
Iteration   5: 13.320 s/op
Iteration   6: 13.347 s/op
Iteration   7: 13.344 s/op
Iteration   8: 13.323 s/op
Iteration   9: 13.340 s/op
Iteration  10: 13.350 s/op
Iteration  11: 13.424 s/op
Iteration  12: 13.317 s/op
Iteration  13: 13.390 s/op
Iteration  14: 13.302 s/op
Iteration  15: 13.388 s/op
Iteration  16: 13.322 s/op
Iteration  17: 13.338 s/op
Iteration  18: 13.312 s/op
Iteration  19: 13.441 s/op
Iteration  20: 13.364 s/op
Iteration  21: 13.363 s/op
Iteration  22: 13.438 s/op
Iteration  23: 13.341 s/op
Iteration  24: 13.334 s/op
Iteration  25: 13.334 s/op
Iteration  26: 13.321 s/op
Iteration  27: 13.352 s/op
Iteration  28: 13.340 s/op
Iteration  29: 13.349 s/op
Iteration  30: 13.374 s/op
Iteration  31: 13.322 s/op
Iteration  32: 13.333 s/op
Iteration  33: 13.383 s/op
Iteration  34: 13.322 s/op
Iteration  35: 13.315 s/op
Iteration  36: 13.314 s/op
Iteration  37: 13.413 s/op
Iteration  38: 13.323 s/op
Iteration  39: 13.249 s/op
Iteration  40: 13.177 s/op
Iteration  41: 13.189 s/op
Iteration  42: 13.131 s/op
Iteration  43: 13.188 s/op
Iteration  44: 13.141 s/op
Iteration  45: 13.170 s/op
Iteration  46: 13.149 s/op
Iteration  47: 13.213 s/op
Iteration  48: 13.150 s/op
Iteration  49: 13.165 s/op
Iteration  50: 13.208 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     13.317 ?(99.9%) 0.067 s/op

  Histogram, s/op:
    [13.000, 13.100) = 1 
    [13.100, 13.200) = 9 
    [13.200, 13.300) = 3 
    [13.300, 13.400) = 31 
    [13.400, 13.500) = 5 
    [13.500, 13.600) = 0 
    [13.600, 13.700) = 0 
    [13.700, 13.800) = 0 
    [13.800, 13.900) = 0 
    [13.900, 14.000) = 0 
    [14.000, 14.100) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.064 s/op
     p(50.0000) =     13.328 s/op
     p(90.0000) =     13.415 s/op
     p(95.0000) =     13.439 s/op
     p(99.0000) =     14.012 s/op
     p(99.9000) =     14.012 s/op
     p(99.9900) =     14.012 s/op
     p(99.9990) =     14.012 s/op
     p(99.9999) =     14.012 s/op
    p(100.0000) =     14.012 s/op


# Run complete. Total time: 00:11:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.317 ? 0.067   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9_12.0.1_1564584634791.json
{"wallclock_times": [667.39445916], "core_cycle_counts": [[337922937571], [307991506751], [628812263829], [885128853272]], "aperf_counts": [[335909841783], [307862375301], [628673168172], [885061970250]], "mperf_counts": [[335910576126], [307863322098], [628673127156], [885061964680]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 17:01:42: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-07-31 17:01:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 17:01:43: INFO] 118 executions left in scheduler queue
[2019-07-31 17:01:43: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-07-31 17:01:43: INFO] Estimated completion (next execution): 2019-07-31 17:15:21 (0:13:37 from now)
[2019-07-31 17:01:43: INFO] Reboot in preparation for next execution
[2019-07-31 17:16:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.264 s/op
Iteration   2: 12.029 s/op
Iteration   3: 11.841 s/op
Iteration   4: 11.943 s/op
Iteration   5: 12.165 s/op
Iteration   6: 11.834 s/op
Iteration   7: 11.920 s/op
Iteration   8: 11.932 s/op
Iteration   9: 11.957 s/op
Iteration  10: 12.099 s/op
Iteration  11: 11.924 s/op
Iteration  12: 12.577 s/op
Iteration  13: 11.890 s/op
Iteration  14: 11.940 s/op
Iteration  15: 11.942 s/op
Iteration  16: 12.026 s/op
Iteration  17: 11.841 s/op
Iteration  18: 11.852 s/op
Iteration  19: 11.928 s/op
Iteration  20: 11.968 s/op
Iteration  21: 11.971 s/op
Iteration  22: 11.984 s/op
Iteration  23: 12.741 s/op
Iteration  24: 11.840 s/op
Iteration  25: 11.901 s/op
Iteration  26: 11.934 s/op
Iteration  27: 11.907 s/op
Iteration  28: 11.937 s/op
Iteration  29: 12.054 s/op
Iteration  30: 11.823 s/op
Iteration  31: 11.887 s/op
Iteration  32: 11.935 s/op
Iteration  33: 11.968 s/op
Iteration  34: 12.455 s/op
Iteration  35: 11.955 s/op
Iteration  36: 12.021 s/op
Iteration  37: 11.829 s/op
Iteration  38: 11.891 s/op
Iteration  39: 11.929 s/op
Iteration  40: 11.915 s/op
Iteration  41: 12.048 s/op
Iteration  42: 12.044 s/op
Iteration  43: 11.835 s/op
Iteration  44: 11.927 s/op
Iteration  45: 12.507 s/op
Iteration  46: 11.946 s/op
Iteration  47: 11.950 s/op
Iteration  48: 11.976 s/op
Iteration  49: 11.806 s/op
Iteration  50: 11.916 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.994 ?(99.9%) 0.096 s/op

  Histogram, s/op:
    [11.800, 11.900) = 12 
    [11.900, 12.000) = 25 
    [12.000, 12.100) = 7 
    [12.100, 12.200) = 1 
    [12.200, 12.300) = 1 
    [12.300, 12.400) = 0 
    [12.400, 12.500) = 1 
    [12.500, 12.600) = 2 
    [12.600, 12.700) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.806 s/op
     p(50.0000) =     11.939 s/op
     p(90.0000) =     12.254 s/op
     p(95.0000) =     12.539 s/op
     p(99.0000) =     12.741 s/op
     p(99.9000) =     12.741 s/op
     p(99.9900) =     12.741 s/op
     p(99.9990) =     12.741 s/op
     p(99.9999) =     12.741 s/op
    p(100.0000) =     12.741 s/op


# Run complete. Total time: 00:10:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.994 ? 0.096   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_hotspot-8u222-b10_1564585560490.json
{"wallclock_times": [600.645013017], "core_cycle_counts": [[393556014281], [568900572805], [630122520270], [628967810850]], "aperf_counts": [[391772148557], [568769402364], [630023924560], [628883323553]], "mperf_counts": [[391778433974], [568772503878], [630023947852], [628888281278]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 17:16:01: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-07-31 17:16:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 17:16:02: INFO] 117 executions left in scheduler queue
[2019-07-31 17:16:02: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-07-31 17:16:02: INFO] Estimated completion (next execution): 2019-07-31 17:28:32 (0:12:30 from now)
[2019-07-31 17:16:02: INFO] Reboot in preparation for next execution
[2019-07-31 17:20:19: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 17:20:19: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 17:20:19: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 17:20:19: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 17:20:19: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 17:27:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.233 s/op
Iteration   2: 9.087 s/op
Iteration   3: 8.852 s/op
Iteration   4: 8.846 s/op
Iteration   5: 8.848 s/op
Iteration   6: 8.851 s/op
Iteration   7: 8.854 s/op
Iteration   8: 8.853 s/op
Iteration   9: 8.848 s/op
Iteration  10: 8.848 s/op
Iteration  11: 8.846 s/op
Iteration  12: 8.849 s/op
Iteration  13: 8.848 s/op
Iteration  14: 8.853 s/op
Iteration  15: 8.863 s/op
Iteration  16: 8.862 s/op
Iteration  17: 8.854 s/op
Iteration  18: 8.846 s/op
Iteration  19: 8.844 s/op
Iteration  20: 8.843 s/op
Iteration  21: 8.849 s/op
Iteration  22: 8.848 s/op
Iteration  23: 8.852 s/op
Iteration  24: 8.852 s/op
Iteration  25: 8.845 s/op
Iteration  26: 8.849 s/op
Iteration  27: 8.848 s/op
Iteration  28: 8.848 s/op
Iteration  29: 8.847 s/op
Iteration  30: 8.853 s/op
Iteration  31: 8.852 s/op
Iteration  32: 8.847 s/op
Iteration  33: 8.844 s/op
Iteration  34: 8.845 s/op
Iteration  35: 8.846 s/op
Iteration  36: 8.852 s/op
Iteration  37: 8.847 s/op
Iteration  38: 8.848 s/op
Iteration  39: 8.846 s/op
Iteration  40: 8.846 s/op
Iteration  41: 8.846 s/op
Iteration  42: 8.855 s/op
Iteration  43: 8.844 s/op
Iteration  44: 8.843 s/op
Iteration  45: 8.842 s/op
Iteration  46: 8.844 s/op
Iteration  47: 8.841 s/op
Iteration  48: 8.843 s/op
Iteration  49: 8.848 s/op
Iteration  50: 8.860 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      8.881 ?(99.9%) 0.098 s/op

  Histogram, s/op:
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 48 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 
    [ 9.750, 10.000) = 0 
    [10.000, 10.250) = 1 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.841 s/op
     p(50.0000) =      8.848 s/op
     p(90.0000) =      8.860 s/op
     p(95.0000) =      8.964 s/op
     p(99.0000) =     10.233 s/op
     p(99.9000) =     10.233 s/op
     p(99.9900) =     10.233 s/op
     p(99.9990) =     10.233 s/op
     p(99.9999) =     10.233 s/op
    p(100.0000) =     10.233 s/op


# Run complete. Total time: 00:07:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  8.881 ? 0.098   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot_12.0.2_1564586419526.json
{"wallclock_times": [445.00610841], "core_cycle_counts": [[195698429934], [239381593330], [486224659717], [511271745659]], "aperf_counts": [[194438931313], [239266151455], [486144118180], [511202663120]], "mperf_counts": [[195029545144], [241215989446], [486461933912], [511474629710]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 17:27:44: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-07-31 17:27:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 17:27:45: INFO] 116 executions left in scheduler queue
[2019-07-31 17:27:45: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-31 17:27:45: INFO] Estimated completion (next execution): 2019-07-31 17:37:40 (0:09:55 from now)
[2019-07-31 17:27:45: INFO] Reboot in preparation for next execution
[2019-07-31 17:33:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.941 s/op
Iteration   2: 1.550 s/op
Iteration   3: 1.549 s/op
Iteration   4: 1.636 s/op
Iteration   5: 1.681 s/op
Iteration   6: 1.671 s/op
Iteration   7: 1.674 s/op
Iteration   8: 1.675 s/op
Iteration   9: 1.681 s/op
Iteration  10: 1.666 s/op
Iteration  11: 1.669 s/op
Iteration  12: 1.667 s/op
Iteration  13: 1.669 s/op
Iteration  14: 1.669 s/op
Iteration  15: 1.672 s/op
Iteration  16: 1.666 s/op
Iteration  17: 1.670 s/op
Iteration  18: 1.673 s/op
Iteration  19: 1.666 s/op
Iteration  20: 1.661 s/op
Iteration  21: 1.667 s/op
Iteration  22: 1.667 s/op
Iteration  23: 1.669 s/op
Iteration  24: 1.660 s/op
Iteration  25: 1.665 s/op
Iteration  26: 1.672 s/op
Iteration  27: 1.669 s/op
Iteration  28: 1.666 s/op
Iteration  29: 1.663 s/op
Iteration  30: 1.669 s/op
Iteration  31: 1.671 s/op
Iteration  32: 1.668 s/op
Iteration  33: 1.665 s/op
Iteration  34: 1.665 s/op
Iteration  35: 1.666 s/op
Iteration  36: 1.663 s/op
Iteration  37: 1.668 s/op
Iteration  38: 1.669 s/op
Iteration  39: 1.665 s/op
Iteration  40: 1.666 s/op
Iteration  41: 1.666 s/op
Iteration  42: 1.671 s/op
Iteration  43: 1.667 s/op
Iteration  44: 1.662 s/op
Iteration  45: 1.666 s/op
Iteration  46: 1.675 s/op
Iteration  47: 1.665 s/op
Iteration  48: 1.665 s/op
Iteration  49: 1.666 s/op
Iteration  50: 1.664 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.668 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [1.500, 1.550) = 2 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 46 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.549 s/op
     p(50.0000) =      1.667 s/op
     p(90.0000) =      1.675 s/op
     p(95.0000) =      1.681 s/op
     p(99.0000) =      1.941 s/op
     p(99.9000) =      1.941 s/op
     p(99.9900) =      1.941 s/op
     p(99.9990) =      1.941 s/op
     p(99.9999) =      1.941 s/op
    p(100.0000) =      1.941 s/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.668 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_hotspot-8u222-b10_1564587121838.json
{"wallclock_times": [84.263752627], "core_cycle_counts": [[86604472688], [69020130654], [65352223563], [63404987833]], "aperf_counts": [[86349150098], [68979119651], [65333446950], [63387603963]], "mperf_counts": [[86355975912], [68979355938], [65333544672], [63396247892]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 17:33:26: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-31 17:33:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 17:33:27: INFO] 115 executions left in scheduler queue
[2019-07-31 17:33:27: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-31 17:33:27: INFO] Estimated completion (next execution): 2019-07-31 17:37:21 (0:03:54 from now)
[2019-07-31 17:33:27: INFO] Reboot in preparation for next execution
[2019-07-31 17:38:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.350 s/op
Iteration   2: 1.824 s/op
Iteration   3: 2.037 s/op
Iteration   4: 1.911 s/op
Iteration   5: 2.117 s/op
Iteration   6: 2.225 s/op
Iteration   7: 2.274 s/op
Iteration   8: 2.239 s/op
Iteration   9: 2.271 s/op
Iteration  10: 2.272 s/op
Iteration  11: 2.273 s/op
Iteration  12: 2.273 s/op
Iteration  13: 2.275 s/op
Iteration  14: 2.272 s/op
Iteration  15: 2.273 s/op
Iteration  16: 2.253 s/op
Iteration  17: 2.254 s/op
Iteration  18: 2.267 s/op
Iteration  19: 2.269 s/op
Iteration  20: 2.273 s/op
Iteration  21: 2.260 s/op
Iteration  22: 2.264 s/op
Iteration  23: 2.278 s/op
Iteration  24: 2.276 s/op
Iteration  25: 2.251 s/op
Iteration  26: 2.272 s/op
Iteration  27: 2.274 s/op
Iteration  28: 2.270 s/op
Iteration  29: 2.274 s/op
Iteration  30: 2.274 s/op
Iteration  31: 2.275 s/op
Iteration  32: 2.270 s/op
Iteration  33: 2.274 s/op
Iteration  34: 2.277 s/op
Iteration  35: 2.281 s/op
Iteration  36: 2.271 s/op
Iteration  37: 2.275 s/op
Iteration  38: 2.271 s/op
Iteration  39: 2.275 s/op
Iteration  40: 2.271 s/op
Iteration  41: 2.273 s/op
Iteration  42: 2.271 s/op
Iteration  43: 2.273 s/op
Iteration  44: 2.239 s/op
Iteration  45: 2.240 s/op
Iteration  46: 2.239 s/op
Iteration  47: 2.242 s/op
Iteration  48: 2.244 s/op
Iteration  49: 2.240 s/op
Iteration  50: 2.244 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.243 ?(99.9%) 0.044 s/op

  Histogram, s/op:
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 9 
    [2.250, 2.300) = 36 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.824 s/op
     p(50.0000) =      2.271 s/op
     p(90.0000) =      2.276 s/op
     p(95.0000) =      2.279 s/op
     p(99.0000) =      2.350 s/op
     p(99.9000) =      2.350 s/op
     p(99.9900) =      2.350 s/op
     p(99.9990) =      2.350 s/op
     p(99.9999) =      2.350 s/op
    p(100.0000) =      2.350 s/op


# Run complete. Total time: 00:01:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.243 ? 0.044   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_hotspot-8u222-b10_1564587419036.json
{"wallclock_times": [112.933063576], "core_cycle_counts": [[118509935537], [37019926624], [94762983505], [118103721408]], "aperf_counts": [[118270285959], [36985979348], [94750076998], [118089782213]], "mperf_counts": [[118280829002], [36986316952], [94750868328], [118091133116]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 17:38:51: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-31 17:38:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 17:38:52: INFO] 114 executions left in scheduler queue
[2019-07-31 17:38:52: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-07-31 17:38:52: INFO] Estimated completion (next execution): 2019-07-31 17:43:16 (0:04:23 from now)
[2019-07-31 17:38:52: INFO] Reboot in preparation for next execution
[2019-07-31 17:48:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.078 s/op
Iteration   2: 5.545 s/op
Iteration   3: 6.105 s/op
Iteration   4: 5.919 s/op
Iteration   5: 5.807 s/op
Iteration   6: 5.850 s/op
Iteration   7: 5.789 s/op
Iteration   8: 5.828 s/op
Iteration   9: 5.838 s/op
Iteration  10: 5.688 s/op
Iteration  11: 5.702 s/op
Iteration  12: 5.860 s/op
Iteration  13: 6.520 s/op
Iteration  14: 5.757 s/op
Iteration  15: 5.692 s/op
Iteration  16: 5.829 s/op
Iteration  17: 5.701 s/op
Iteration  18: 5.878 s/op
Iteration  19: 5.700 s/op
Iteration  20: 5.856 s/op
Iteration  21: 5.723 s/op
Iteration  22: 5.866 s/op
Iteration  23: 5.721 s/op
Iteration  24: 6.916 s/op
Iteration  25: 5.636 s/op
Iteration  26: 5.862 s/op
Iteration  27: 5.699 s/op
Iteration  28: 5.890 s/op
Iteration  29: 5.684 s/op
Iteration  30: 5.733 s/op
Iteration  31: 5.830 s/op
Iteration  32: 5.748 s/op
Iteration  33: 5.872 s/op
Iteration  34: 5.739 s/op
Iteration  35: 6.899 s/op
Iteration  36: 5.636 s/op
Iteration  37: 5.852 s/op
Iteration  38: 5.712 s/op
Iteration  39: 5.857 s/op
Iteration  40: 5.707 s/op
Iteration  41: 5.893 s/op
Iteration  42: 5.726 s/op
Iteration  43: 5.730 s/op
Iteration  44: 5.723 s/op
Iteration  45: 5.708 s/op
Iteration  46: 6.828 s/op
Iteration  47: 5.640 s/op
Iteration  48: 5.846 s/op
Iteration  49: 5.722 s/op
Iteration  50: 5.861 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      5.864 ?(99.9%) 0.148 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 22 
    [5.750, 5.875) = 17 
    [5.875, 6.000) = 4 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.545 s/op
     p(50.0000) =      5.798 s/op
     p(90.0000) =      6.102 s/op
     p(95.0000) =      6.860 s/op
     p(99.0000) =      6.916 s/op
     p(99.9000) =      6.916 s/op
     p(99.9900) =      6.916 s/op
     p(99.9990) =      6.916 s/op
     p(99.9999) =      6.916 s/op
    p(100.0000) =      6.916 s/op


# Run complete. Total time: 00:04:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.864 ? 0.148   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_graalvm-ee-19.1.1_1564587805531.json
{"wallclock_times": [294.52175172299997], "core_cycle_counts": [[252505512150], [301942924249], [342413972495], [267949336218]], "aperf_counts": [[251700651260], [301862893847], [342378672108], [267913858438]], "mperf_counts": [[251731409566], [301862955926], [342386409608], [267914283946]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 17:48:20: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-07-31 17:48:20: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 17:48:20: INFO] 113 executions left in scheduler queue
[2019-07-31 17:48:20: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-07-31 17:48:20: INFO] Estimated completion (next execution): 2019-07-31 17:55:45 (0:07:24 from now)
[2019-07-31 17:48:20: INFO] Reboot in preparation for next execution
[2019-07-31 17:56:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.247 s/op
Iteration   2: 5.263 s/op
Iteration   3: 5.153 s/op
Iteration   4: 5.141 s/op
Iteration   5: 5.150 s/op
Iteration   6: 5.143 s/op
Iteration   7: 5.148 s/op
Iteration   8: 5.148 s/op
Iteration   9: 5.143 s/op
Iteration  10: 5.139 s/op
Iteration  11: 5.139 s/op
Iteration  12: 5.151 s/op
Iteration  13: 5.153 s/op
Iteration  14: 5.155 s/op
Iteration  15: 5.156 s/op
Iteration  16: 5.148 s/op
Iteration  17: 5.128 s/op
Iteration  18: 5.149 s/op
Iteration  19: 5.159 s/op
Iteration  20: 5.140 s/op
Iteration  21: 5.138 s/op
Iteration  22: 5.103 s/op
Iteration  23: 5.141 s/op
Iteration  24: 5.135 s/op
Iteration  25: 5.144 s/op
Iteration  26: 5.135 s/op
Iteration  27: 5.147 s/op
Iteration  28: 5.133 s/op
Iteration  29: 5.151 s/op
Iteration  30: 5.137 s/op
Iteration  31: 5.146 s/op
Iteration  32: 5.142 s/op
Iteration  33: 5.144 s/op
Iteration  34: 5.152 s/op
Iteration  35: 5.146 s/op
Iteration  36: 5.143 s/op
Iteration  37: 5.140 s/op
Iteration  38: 5.145 s/op
Iteration  39: 5.132 s/op
Iteration  40: 5.134 s/op
Iteration  41: 5.147 s/op
Iteration  42: 5.139 s/op
Iteration  43: 5.140 s/op
Iteration  44: 5.112 s/op
Iteration  45: 5.123 s/op
Iteration  46: 5.145 s/op
Iteration  47: 5.135 s/op
Iteration  48: 5.145 s/op
Iteration  49: 5.131 s/op
Iteration  50: 5.140 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.146 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [5.100, 5.113) = 2 
    [5.113, 5.125) = 1 
    [5.125, 5.138) = 9 
    [5.138, 5.150) = 27 
    [5.150, 5.163) = 9 
    [5.163, 5.175) = 0 
    [5.175, 5.188) = 0 
    [5.188, 5.200) = 0 
    [5.200, 5.213) = 0 
    [5.213, 5.225) = 0 
    [5.225, 5.238) = 0 
    [5.238, 5.250) = 1 
    [5.250, 5.263) = 0 
    [5.263, 5.275) = 1 
    [5.275, 5.288) = 0 
    [5.288, 5.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.103 s/op
     p(50.0000) =      5.143 s/op
     p(90.0000) =      5.155 s/op
     p(95.0000) =      5.198 s/op
     p(99.0000) =      5.263 s/op
     p(99.9000) =      5.263 s/op
     p(99.9900) =      5.263 s/op
     p(99.9990) =      5.263 s/op
     p(99.9999) =      5.263 s/op
    p(100.0000) =      5.263 s/op


# Run complete. Total time: 00:04:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.146 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_graalvm-ce-19.1.1_1564588356563.json
{"wallclock_times": [258.12963477], "core_cycle_counts": [[235083089467], [239364898686], [184576781483], [174605856008]], "aperf_counts": [[234485559202], [239292618905], [184534700213], [174563852205]], "mperf_counts": [[234506152804], [239293270754], [184536638388], [174571471292]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 17:56:54: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-07-31 17:56:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 17:56:55: INFO] 112 executions left in scheduler queue
[2019-07-31 17:56:55: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 17:56:55: INFO] Estimated completion (next execution): 2019-07-31 18:03:44 (0:06:48 from now)
[2019-07-31 17:56:55: INFO] Reboot in preparation for next execution
[2019-07-31 18:00:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 18:00:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 18:00:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 18:00:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 18:00:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 18:09:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.479 s/op
Iteration   2: 10.982 s/op
Iteration   3: 10.682 s/op
Iteration   4: 10.473 s/op
Iteration   5: 10.445 s/op
Iteration   6: 10.412 s/op
Iteration   7: 10.420 s/op
Iteration   8: 10.424 s/op
Iteration   9: 10.416 s/op
Iteration  10: 10.445 s/op
Iteration  11: 10.437 s/op
Iteration  12: 10.420 s/op
Iteration  13: 10.401 s/op
Iteration  14: 10.414 s/op
Iteration  15: 10.413 s/op
Iteration  16: 10.427 s/op
Iteration  17: 10.428 s/op
Iteration  18: 10.430 s/op
Iteration  19: 10.438 s/op
Iteration  20: 10.410 s/op
Iteration  21: 10.448 s/op
Iteration  22: 10.434 s/op
Iteration  23: 10.473 s/op
Iteration  24: 10.468 s/op
Iteration  25: 10.431 s/op
Iteration  26: 10.427 s/op
Iteration  27: 10.445 s/op
Iteration  28: 10.476 s/op
Iteration  29: 10.477 s/op
Iteration  30: 10.419 s/op
Iteration  31: 10.454 s/op
Iteration  32: 10.416 s/op
Iteration  33: 10.445 s/op
Iteration  34: 10.418 s/op
Iteration  35: 10.471 s/op
Iteration  36: 10.441 s/op
Iteration  37: 10.414 s/op
Iteration  38: 10.462 s/op
Iteration  39: 10.439 s/op
Iteration  40: 10.464 s/op
Iteration  41: 10.427 s/op
Iteration  42: 10.420 s/op
Iteration  43: 10.414 s/op
Iteration  44: 10.414 s/op
Iteration  45: 10.446 s/op
Iteration  46: 10.427 s/op
Iteration  47: 10.449 s/op
Iteration  48: 10.440 s/op
Iteration  49: 10.412 s/op
Iteration  50: 10.419 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.452 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [10.400, 10.450) = 38 
    [10.450, 10.500) = 10 
    [10.500, 10.550) = 0 
    [10.550, 10.600) = 0 
    [10.600, 10.650) = 0 
    [10.650, 10.700) = 1 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 0 
    [10.900, 10.950) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.401 s/op
     p(50.0000) =     10.432 s/op
     p(90.0000) =     10.476 s/op
     p(95.0000) =     10.571 s/op
     p(99.0000) =     10.982 s/op
     p(99.9000) =     10.982 s/op
     p(99.9900) =     10.982 s/op
     p(99.9990) =     10.982 s/op
     p(99.9999) =     10.982 s/op
    p(100.0000) =     10.982 s/op


# Run complete. Total time: 00:08:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.452 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot_11.0.4_1564588827583.json
{"wallclock_times": [523.6317849330001], "core_cycle_counts": [[230270720144], [312449431649], [250501330143], [899198995193]], "aperf_counts": [[228763964096], [312357475619], [250454130105], [899173667892]], "mperf_counts": [[229198187330], [312386864988], [250781453916], [899209692802]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 18:09:11: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 18:09:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 18:09:12: INFO] 111 executions left in scheduler queue
[2019-07-31 18:09:12: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 18:09:12: INFO] Estimated completion (next execution): 2019-07-31 18:20:26 (0:11:13 from now)
[2019-07-31 18:09:12: INFO] Reboot in preparation for next execution
[2019-07-31 18:13:28: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 18:13:28: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 18:13:28: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 18:13:28: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 18:13:28: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 18:19:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.905 s/op
Iteration   2: 7.126 s/op
Iteration   3: 7.784 s/op
Iteration   4: 7.260 s/op
Iteration   5: 7.366 s/op
Iteration   6: 7.391 s/op
Iteration   7: 7.416 s/op
Iteration   8: 7.379 s/op
Iteration   9: 7.359 s/op
Iteration  10: 7.359 s/op
Iteration  11: 6.832 s/op
Iteration  12: 7.060 s/op
Iteration  13: 6.645 s/op
Iteration  14: 7.369 s/op
Iteration  15: 7.366 s/op
Iteration  16: 7.362 s/op
Iteration  17: 7.368 s/op
Iteration  18: 7.359 s/op
Iteration  19: 7.380 s/op
Iteration  20: 7.373 s/op
Iteration  21: 7.358 s/op
Iteration  22: 7.409 s/op
Iteration  23: 6.473 s/op
Iteration  24: 7.382 s/op
Iteration  25: 7.361 s/op
Iteration  26: 7.357 s/op
Iteration  27: 7.348 s/op
Iteration  28: 7.395 s/op
Iteration  29: 7.371 s/op
Iteration  30: 7.380 s/op
Iteration  31: 7.382 s/op
Iteration  32: 7.342 s/op
Iteration  33: 7.388 s/op
Iteration  34: 7.356 s/op
Iteration  35: 7.360 s/op
Iteration  36: 7.402 s/op
Iteration  37: 7.348 s/op
Iteration  38: 7.368 s/op
Iteration  39: 7.371 s/op
Iteration  40: 7.371 s/op
Iteration  41: 7.353 s/op
Iteration  42: 7.376 s/op
Iteration  43: 7.384 s/op
Iteration  44: 7.383 s/op
Iteration  45: 7.368 s/op
Iteration  46: 7.372 s/op
Iteration  47: 7.390 s/op
Iteration  48: 7.351 s/op
Iteration  49: 7.383 s/op
Iteration  50: 7.386 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.314 ?(99.9%) 0.101 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 1 
    [6.875, 7.000) = 1 
    [7.000, 7.125) = 1 
    [7.125, 7.250) = 1 
    [7.250, 7.375) = 26 
    [7.375, 7.500) = 17 
    [7.500, 7.625) = 0 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.473 s/op
     p(50.0000) =      7.368 s/op
     p(90.0000) =      7.394 s/op
     p(95.0000) =      7.412 s/op
     p(99.0000) =      7.784 s/op
     p(99.9000) =      7.784 s/op
     p(99.9900) =      7.784 s/op
     p(99.9990) =      7.784 s/op
     p(99.9999) =      7.784 s/op
    p(100.0000) =      7.784 s/op


# Run complete. Total time: 00:06:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.314 ? 0.101   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot_11.0.4_1564589608910.json
{"wallclock_times": [366.86657337299994], "core_cycle_counts": [[194316059300], [215666353178], [560046896099], [90079632241]], "aperf_counts": [[193340571389], [215587267415], [560014747120], [90013205934]], "mperf_counts": [[219509532814], [243174472570], [631511912930], [99801154344]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 18:19:35: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 18:19:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 18:19:36: INFO] 110 executions left in scheduler queue
[2019-07-31 18:19:36: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 18:19:36: INFO] Estimated completion (next execution): 2019-07-31 18:28:13 (0:08:37 from now)
[2019-07-31 18:19:36: INFO] Reboot in preparation for next execution
[2019-07-31 18:23:53: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 18:23:53: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 18:23:53: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 18:23:53: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 18:23:53: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 18:29:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.476 s/op
Iteration   2: 7.326 s/op
Iteration   3: 6.976 s/op
Iteration   4: 6.981 s/op
Iteration   5: 6.955 s/op
Iteration   6: 6.973 s/op
Iteration   7: 7.008 s/op
Iteration   8: 6.886 s/op
Iteration   9: 7.019 s/op
Iteration  10: 7.012 s/op
Iteration  11: 6.901 s/op
Iteration  12: 7.035 s/op
Iteration  13: 6.884 s/op
Iteration  14: 7.018 s/op
Iteration  15: 7.024 s/op
Iteration  16: 6.876 s/op
Iteration  17: 7.015 s/op
Iteration  18: 6.876 s/op
Iteration  19: 6.985 s/op
Iteration  20: 7.025 s/op
Iteration  21: 6.891 s/op
Iteration  22: 7.027 s/op
Iteration  23: 7.039 s/op
Iteration  24: 6.880 s/op
Iteration  25: 7.000 s/op
Iteration  26: 6.983 s/op
Iteration  27: 6.965 s/op
Iteration  28: 6.949 s/op
Iteration  29: 6.966 s/op
Iteration  30: 6.938 s/op
Iteration  31: 7.022 s/op
Iteration  32: 6.941 s/op
Iteration  33: 6.908 s/op
Iteration  34: 6.980 s/op
Iteration  35: 6.875 s/op
Iteration  36: 6.993 s/op
Iteration  37: 6.867 s/op
Iteration  38: 7.006 s/op
Iteration  39: 7.003 s/op
Iteration  40: 6.862 s/op
Iteration  41: 6.990 s/op
Iteration  42: 6.870 s/op
Iteration  43: 6.991 s/op
Iteration  44: 7.014 s/op
Iteration  45: 6.889 s/op
Iteration  46: 7.012 s/op
Iteration  47: 6.845 s/op
Iteration  48: 6.993 s/op
Iteration  49: 6.988 s/op
Iteration  50: 6.982 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.978 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [6.800, 6.850) = 1 
    [6.850, 6.900) = 11 
    [6.900, 6.950) = 5 
    [6.950, 7.000) = 15 
    [7.000, 7.050) = 16 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 0 
    [7.300, 7.350) = 1 
    [7.350, 7.400) = 0 
    [7.400, 7.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.845 s/op
     p(50.0000) =      6.982 s/op
     p(90.0000) =      7.026 s/op
     p(95.0000) =      7.168 s/op
     p(99.0000) =      7.476 s/op
     p(99.9000) =      7.476 s/op
     p(99.9900) =      7.476 s/op
     p(99.9990) =      7.476 s/op
     p(99.9999) =      7.476 s/op
    p(100.0000) =      7.476 s/op


# Run complete. Total time: 00:05:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.978 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot_11.0.4_1564590233479.json
{"wallclock_times": [350.122153401], "core_cycle_counts": [[329438749546], [303551944486], [334168678615], [282411900625]], "aperf_counts": [[328575556239], [303464261379], [334114565376], [282364022291]], "mperf_counts": [[328730338668], [303927392176], [334185759944], [282428041196]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 18:29:43: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 18:29:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 18:29:44: INFO] 109 executions left in scheduler queue
[2019-07-31 18:29:44: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 18:29:44: INFO] Estimated completion (next execution): 2019-07-31 18:38:04 (0:08:20 from now)
[2019-07-31 18:29:44: INFO] Reboot in preparation for next execution
[2019-07-31 18:34:00: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 18:34:00: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 18:34:00: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 18:34:00: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 18:34:00: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 18:47:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 21.512 s/op
Iteration   2: 16.732 s/op
Iteration   3: 16.719 s/op
Iteration   4: 16.403 s/op
Iteration   5: 16.396 s/op
Iteration   6: 16.362 s/op
Iteration   7: 16.464 s/op
Iteration   8: 16.412 s/op
Iteration   9: 16.379 s/op
Iteration  10: 16.465 s/op
Iteration  11: 16.407 s/op
Iteration  12: 16.344 s/op
Iteration  13: 16.504 s/op
Iteration  14: 16.419 s/op
Iteration  15: 16.332 s/op
Iteration  16: 16.409 s/op
Iteration  17: 16.386 s/op
Iteration  18: 16.366 s/op
Iteration  19: 16.366 s/op
Iteration  20: 16.371 s/op
Iteration  21: 16.391 s/op
Iteration  22: 16.371 s/op
Iteration  23: 16.390 s/op
Iteration  24: 16.449 s/op
Iteration  25: 16.342 s/op
Iteration  26: 16.397 s/op
Iteration  27: 16.414 s/op
Iteration  28: 16.368 s/op
Iteration  29: 16.391 s/op
Iteration  30: 16.454 s/op
Iteration  31: 16.401 s/op
Iteration  32: 16.379 s/op
Iteration  33: 16.399 s/op
Iteration  34: 16.425 s/op
Iteration  35: 16.337 s/op
Iteration  36: 16.370 s/op
Iteration  37: 16.527 s/op
Iteration  38: 16.409 s/op
Iteration  39: 16.399 s/op
Iteration  40: 16.448 s/op
Iteration  41: 16.358 s/op
Iteration  42: 16.333 s/op
Iteration  43: 16.463 s/op
Iteration  44: 16.395 s/op
Iteration  45: 16.335 s/op
Iteration  46: 16.412 s/op
Iteration  47: 16.384 s/op
Iteration  48: 16.366 s/op
Iteration  49: 16.341 s/op
Iteration  50: 16.445 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.513 ?(99.9%) 0.359 s/op

  Histogram, s/op:
    [16.000, 16.500) = 45 
    [16.500, 17.000) = 4 
    [17.000, 17.500) = 0 
    [17.500, 18.000) = 0 
    [18.000, 18.500) = 0 
    [18.500, 19.000) = 0 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 0 
    [20.500, 21.000) = 0 
    [21.000, 21.500) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.332 s/op
     p(50.0000) =     16.396 s/op
     p(90.0000) =     16.500 s/op
     p(95.0000) =     16.725 s/op
     p(99.0000) =     21.512 s/op
     p(99.9000) =     21.512 s/op
     p(99.9900) =     21.512 s/op
     p(99.9990) =     21.512 s/op
     p(99.9999) =     21.512 s/op
    p(100.0000) =     21.512 s/op


# Run complete. Total time: 00:13:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.513 ? 0.359   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot_11.0.4_1564590840467.json
{"wallclock_times": [826.699987867], "core_cycle_counts": [[562234298243], [364287015455], [727417743493], [1013701297645]], "aperf_counts": [[560155027033], [364109637177], [727344486116], [1013605968082]], "mperf_counts": [[560351843748], [364171237974], [728077141696], [1013661148170]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 18:47:47: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-31 18:47:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 18:47:48: INFO] 108 executions left in scheduler queue
[2019-07-31 18:47:48: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-31 18:47:48: INFO] Estimated completion (next execution): 2019-07-31 19:04:05 (0:16:17 from now)
[2019-07-31 18:47:48: INFO] Reboot in preparation for next execution
[2019-07-31 18:52:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 18:52:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 18:52:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 18:52:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 18:52:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 18:52:05: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 18:53:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.070 s/op
Iteration   2: 2.324 s/op
Iteration   3: 2.094 s/op
Iteration   4: 2.133 s/op
Iteration   5: 2.129 s/op
Iteration   6: 2.021 s/op
Iteration   7: 2.012 s/op
Iteration   8: 2.009 s/op
Iteration   9: 1.998 s/op
Iteration  10: 2.004 s/op
Iteration  11: 2.014 s/op
Iteration  12: 2.017 s/op
Iteration  13: 1.995 s/op
Iteration  14: 2.027 s/op
Iteration  15: 2.025 s/op
Iteration  16: 1.975 s/op
Iteration  17: 1.979 s/op
Iteration  18: 1.971 s/op
Iteration  19: 1.957 s/op
Iteration  20: 1.984 s/op
Iteration  21: 1.990 s/op
Iteration  22: 1.950 s/op
Iteration  23: 1.990 s/op
Iteration  24: 1.987 s/op
Iteration  25: 1.934 s/op
Iteration  26: 1.961 s/op
Iteration  27: 1.964 s/op
Iteration  28: 1.935 s/op
Iteration  29: 1.947 s/op
Iteration  30: 1.912 s/op
Iteration  31: 1.948 s/op
Iteration  32: 1.939 s/op
Iteration  33: 1.960 s/op
Iteration  34: 1.921 s/op
Iteration  35: 1.936 s/op
Iteration  36: 1.942 s/op
Iteration  37: 1.963 s/op
Iteration  38: 1.952 s/op
Iteration  39: 1.937 s/op
Iteration  40: 1.955 s/op
Iteration  41: 1.961 s/op
Iteration  42: 1.956 s/op
Iteration  43: 1.958 s/op
Iteration  44: 1.943 s/op
Iteration  45: 1.933 s/op
Iteration  46: 1.942 s/op
Iteration  47: 1.937 s/op
Iteration  48: 1.943 s/op
Iteration  49: 1.965 s/op
Iteration  50: 1.925 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.005 ?(99.9%) 0.083 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 37 
    [2.000, 2.250) = 11 
    [2.250, 2.500) = 1 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 0 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.912 s/op
     p(50.0000) =      1.962 s/op
     p(90.0000) =      2.087 s/op
     p(95.0000) =      2.219 s/op
     p(99.0000) =      3.070 s/op
     p(99.9000) =      3.070 s/op
     p(99.9900) =      3.070 s/op
     p(99.9990) =      3.070 s/op
     p(99.9999) =      3.070 s/op
    p(100.0000) =      3.070 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.005 ? 0.083   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_openj9_11.0.4_1564591924907.json
{"wallclock_times": [101.86075478199999], "core_cycle_counts": [[116229202381], [68072449705], [103068676925], [72282648691]], "aperf_counts": [[115903792907], [67977035670], [103004514925], [72227118926]], "mperf_counts": [[115905697392], [67978659162], [103004513536], [72227116764]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 18:53:46: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-31 18:53:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 18:53:47: INFO] 107 executions left in scheduler queue
[2019-07-31 18:53:47: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-31 18:53:47: INFO] Estimated completion (next execution): 2019-07-31 18:58:00 (0:04:12 from now)
[2019-07-31 18:53:47: INFO] Reboot in preparation for next execution
[2019-07-31 18:58:01: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 18:58:01: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 18:58:01: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 18:58:01: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 18:58:01: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 18:58:01: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 19:00:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.697 s/op
Iteration   2: 3.379 s/op
Iteration   3: 3.208 s/op
Iteration   4: 3.086 s/op
Iteration   5: 3.155 s/op
Iteration   6: 3.165 s/op
Iteration   7: 3.163 s/op
Iteration   8: 3.085 s/op
Iteration   9: 3.088 s/op
Iteration  10: 3.122 s/op
Iteration  11: 3.080 s/op
Iteration  12: 3.046 s/op
Iteration  13: 3.086 s/op
Iteration  14: 3.119 s/op
Iteration  15: 3.081 s/op
Iteration  16: 3.083 s/op
Iteration  17: 3.078 s/op
Iteration  18: 3.078 s/op
Iteration  19: 3.088 s/op
Iteration  20: 3.041 s/op
Iteration  21: 3.078 s/op
Iteration  22: 3.062 s/op
Iteration  23: 3.103 s/op
Iteration  24: 3.094 s/op
Iteration  25: 3.068 s/op
Iteration  26: 3.094 s/op
Iteration  27: 3.077 s/op
Iteration  28: 3.084 s/op
Iteration  29: 3.062 s/op
Iteration  30: 3.094 s/op
Iteration  31: 3.062 s/op
Iteration  32: 3.091 s/op
Iteration  33: 3.135 s/op
Iteration  34: 3.096 s/op
Iteration  35: 3.062 s/op
Iteration  36: 3.106 s/op
Iteration  37: 3.124 s/op
Iteration  38: 3.110 s/op
Iteration  39: 3.107 s/op
Iteration  40: 3.120 s/op
Iteration  41: 3.090 s/op
Iteration  42: 3.095 s/op
Iteration  43: 3.084 s/op
Iteration  44: 3.093 s/op
Iteration  45: 3.098 s/op
Iteration  46: 3.064 s/op
Iteration  47: 3.104 s/op
Iteration  48: 3.100 s/op
Iteration  49: 3.116 s/op
Iteration  50: 3.087 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.114 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [3.000, 3.050) = 2 
    [3.050, 3.100) = 31 
    [3.100, 3.150) = 11 
    [3.150, 3.200) = 3 
    [3.200, 3.250) = 1 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.041 s/op
     p(50.0000) =      3.092 s/op
     p(90.0000) =      3.162 s/op
     p(95.0000) =      3.285 s/op
     p(99.0000) =      3.697 s/op
     p(99.9000) =      3.697 s/op
     p(99.9900) =      3.697 s/op
     p(99.9990) =      3.697 s/op
     p(99.9999) =      3.697 s/op
    p(100.0000) =      3.697 s/op


# Run complete. Total time: 00:02:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.114 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_openj9_11.0.4_1564592281768.json
{"wallclock_times": [157.17821777500004], "core_cycle_counts": [[123941484182], [177126501322], [106974325931], [125383047037]], "aperf_counts": [[123489362258], [177062056703], [106922583707], [125309447751]], "mperf_counts": [[123495406802], [177062050592], [106922656230], [125309535932]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 19:00:38: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-31 19:00:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 19:00:39: INFO] 106 executions left in scheduler queue
[2019-07-31 19:00:39: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:00:39: INFO] Estimated completion (next execution): 2019-07-31 19:05:47 (0:05:07 from now)
[2019-07-31 19:00:39: INFO] Reboot in preparation for next execution
[2019-07-31 19:07:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.343 s/op
Iteration   2: 3.312 s/op
Iteration   3: 3.175 s/op
Iteration   4: 3.152 s/op
Iteration   5: 3.161 s/op
Iteration   6: 3.186 s/op
Iteration   7: 3.158 s/op
Iteration   8: 3.181 s/op
Iteration   9: 3.166 s/op
Iteration  10: 3.170 s/op
Iteration  11: 3.166 s/op
Iteration  12: 3.156 s/op
Iteration  13: 3.191 s/op
Iteration  14: 3.183 s/op
Iteration  15: 3.189 s/op
Iteration  16: 3.203 s/op
Iteration  17: 3.151 s/op
Iteration  18: 3.185 s/op
Iteration  19: 3.159 s/op
Iteration  20: 3.165 s/op
Iteration  21: 3.144 s/op
Iteration  22: 3.155 s/op
Iteration  23: 3.166 s/op
Iteration  24: 3.173 s/op
Iteration  25: 3.194 s/op
Iteration  26: 3.145 s/op
Iteration  27: 3.168 s/op
Iteration  28: 3.161 s/op
Iteration  29: 3.161 s/op
Iteration  30: 3.176 s/op
Iteration  31: 3.163 s/op
Iteration  32: 3.162 s/op
Iteration  33: 3.162 s/op
Iteration  34: 3.151 s/op
Iteration  35: 3.166 s/op
Iteration  36: 3.165 s/op
Iteration  37: 3.156 s/op
Iteration  38: 3.157 s/op
Iteration  39: 3.170 s/op
Iteration  40: 3.162 s/op
Iteration  41: 3.172 s/op
Iteration  42: 3.171 s/op
Iteration  43: 3.178 s/op
Iteration  44: 3.158 s/op
Iteration  45: 3.194 s/op
Iteration  46: 3.160 s/op
Iteration  47: 3.146 s/op
Iteration  48: 3.164 s/op
Iteration  49: 3.168 s/op
Iteration  50: 3.171 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.174 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 3 
    [3.150, 3.175) = 33 
    [3.175, 3.200) = 11 
    [3.200, 3.225) = 1 
    [3.225, 3.250) = 0 
    [3.250, 3.275) = 0 
    [3.275, 3.300) = 0 
    [3.300, 3.325) = 1 
    [3.325, 3.350) = 1 
    [3.350, 3.375) = 0 
    [3.375, 3.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.144 s/op
     p(50.0000) =      3.166 s/op
     p(90.0000) =      3.194 s/op
     p(95.0000) =      3.252 s/op
     p(99.0000) =      3.343 s/op
     p(99.9000) =      3.343 s/op
     p(99.9900) =      3.343 s/op
     p(99.9990) =      3.343 s/op
     p(99.9999) =      3.343 s/op
    p(100.0000) =      3.343 s/op


# Run complete. Total time: 00:02:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.174 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_graalvm-ee-19.1.1_1564592688413.json
{"wallclock_times": [159.677897841], "core_cycle_counts": [[139714265787], [149373539380], [118730555468], [115472506169]], "aperf_counts": [[139337944006], [149335422973], [118704409062], [115451299831]], "mperf_counts": [[139360777154], [149338729270], [118708029684], [115455372450]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 19:07:28: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:07:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 19:07:29: INFO] 105 executions left in scheduler queue
[2019-07-31 19:07:29: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:07:29: INFO] Estimated completion (next execution): 2019-07-31 19:12:38 (0:05:09 from now)
[2019-07-31 19:07:29: INFO] Reboot in preparation for next execution
[2019-07-31 19:18:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.070 s/op
Iteration   2: 8.041 s/op
Iteration   3: 7.944 s/op
Iteration   4: 7.935 s/op
Iteration   5: 7.979 s/op
Iteration   6: 7.949 s/op
Iteration   7: 7.920 s/op
Iteration   8: 7.945 s/op
Iteration   9: 7.949 s/op
Iteration  10: 7.923 s/op
Iteration  11: 7.928 s/op
Iteration  12: 7.916 s/op
Iteration  13: 7.930 s/op
Iteration  14: 7.965 s/op
Iteration  15: 7.950 s/op
Iteration  16: 7.932 s/op
Iteration  17: 7.954 s/op
Iteration  18: 7.919 s/op
Iteration  19: 7.952 s/op
Iteration  20: 7.922 s/op
Iteration  21: 7.908 s/op
Iteration  22: 7.918 s/op
Iteration  23: 7.926 s/op
Iteration  24: 7.925 s/op
Iteration  25: 7.937 s/op
Iteration  26: 7.926 s/op
Iteration  27: 7.926 s/op
Iteration  28: 7.921 s/op
Iteration  29: 7.924 s/op
Iteration  30: 7.962 s/op
Iteration  31: 7.926 s/op
Iteration  32: 7.925 s/op
Iteration  33: 7.924 s/op
Iteration  34: 7.915 s/op
Iteration  35: 7.922 s/op
Iteration  36: 7.927 s/op
Iteration  37: 7.907 s/op
Iteration  38: 7.921 s/op
Iteration  39: 7.924 s/op
Iteration  40: 7.923 s/op
Iteration  41: 7.924 s/op
Iteration  42: 7.898 s/op
Iteration  43: 7.905 s/op
Iteration  44: 7.929 s/op
Iteration  45: 7.969 s/op
Iteration  46: 7.949 s/op
Iteration  47: 7.939 s/op
Iteration  48: 7.925 s/op
Iteration  49: 7.912 s/op
Iteration  50: 7.952 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.936 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 0 
    [7.875, 7.900) = 1 
    [7.900, 7.925) = 20 
    [7.925, 7.950) = 20 
    [7.950, 7.975) = 6 
    [7.975, 8.000) = 1 
    [8.000, 8.025) = 0 
    [8.025, 8.050) = 1 
    [8.050, 8.075) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.898 s/op
     p(50.0000) =      7.926 s/op
     p(90.0000) =      7.965 s/op
     p(95.0000) =      8.007 s/op
     p(99.0000) =      8.070 s/op
     p(99.9000) =      8.070 s/op
     p(99.9900) =      8.070 s/op
     p(99.9990) =      8.070 s/op
     p(99.9999) =      8.070 s/op
    p(100.0000) =      8.070 s/op


# Run complete. Total time: 00:06:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.936 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_graalvm-ee-19.1.1_1564593100141.json
{"wallclock_times": [397.72591177899994], "core_cycle_counts": [[320383710228], [262752515717], [411156628132], [287277556529]], "aperf_counts": [[319475229251], [262679306336], [411126638929], [287254459787]], "mperf_counts": [[319502901392], [262682689068], [411126786126], [287257353990]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 19:18:17: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:18:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 19:18:18: INFO] 104 executions left in scheduler queue
[2019-07-31 19:18:18: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:18:18: INFO] Estimated completion (next execution): 2019-07-31 19:27:26 (0:09:07 from now)
[2019-07-31 19:18:18: INFO] Reboot in preparation for next execution
[2019-07-31 19:25:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.245 s/op
Iteration   2: 3.669 s/op
Iteration   3: 3.682 s/op
Iteration   4: 3.675 s/op
Iteration   5: 3.678 s/op
Iteration   6: 3.709 s/op
Iteration   7: 3.660 s/op
Iteration   8: 3.727 s/op
Iteration   9: 3.664 s/op
Iteration  10: 3.732 s/op
Iteration  11: 3.669 s/op
Iteration  12: 3.679 s/op
Iteration  13: 3.723 s/op
Iteration  14: 3.677 s/op
Iteration  15: 3.731 s/op
Iteration  16: 3.684 s/op
Iteration  17: 3.685 s/op
Iteration  18: 3.727 s/op
Iteration  19: 3.677 s/op
Iteration  20: 3.666 s/op
Iteration  21: 3.722 s/op
Iteration  22: 3.673 s/op
Iteration  23: 3.652 s/op
Iteration  24: 3.727 s/op
Iteration  25: 3.671 s/op
Iteration  26: 3.736 s/op
Iteration  27: 3.681 s/op
Iteration  28: 3.684 s/op
Iteration  29: 3.739 s/op
Iteration  30: 3.674 s/op
Iteration  31: 3.663 s/op
Iteration  32: 3.735 s/op
Iteration  33: 3.678 s/op
Iteration  34: 3.677 s/op
Iteration  35: 3.749 s/op
Iteration  36: 3.676 s/op
Iteration  37: 3.685 s/op
Iteration  38: 3.737 s/op
Iteration  39: 3.682 s/op
Iteration  40: 3.684 s/op
Iteration  41: 3.725 s/op
Iteration  42: 3.685 s/op
Iteration  43: 3.758 s/op
Iteration  44: 3.667 s/op
Iteration  45: 3.690 s/op
Iteration  46: 3.755 s/op
Iteration  47: 3.668 s/op
Iteration  48: 3.684 s/op
Iteration  49: 4.072 s/op
Iteration  50: 3.649 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      3.713 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 31 
    [3.700, 3.750) = 14 
    [3.750, 3.800) = 2 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 1 
    [4.100, 4.150) = 0 
    [4.150, 4.200) = 0 
    [4.200, 4.250) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.649 s/op
     p(50.0000) =      3.684 s/op
     p(90.0000) =      3.748 s/op
     p(95.0000) =      3.899 s/op
     p(99.0000) =      4.245 s/op
     p(99.9000) =      4.245 s/op
     p(99.9900) =      4.245 s/op
     p(99.9990) =      4.245 s/op
     p(99.9999) =      4.245 s/op
    p(100.0000) =      4.245 s/op


# Run complete. Total time: 00:03:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.713 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_graalvm-ee-19.1.1_1564593749489.json
{"wallclock_times": [186.69331986399996], "core_cycle_counts": [[97915708187], [144548149125], [189779749813], [242562396802]], "aperf_counts": [[97349284143], [144497126216], [189737756445], [242527505520]], "mperf_counts": [[97367832660], [144503070654], [189753264110], [242532467444]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 19:25:36: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:25:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 19:25:37: INFO] 103 executions left in scheduler queue
[2019-07-31 19:25:37: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:25:37: INFO] Estimated completion (next execution): 2019-07-31 19:31:14 (0:05:36 from now)
[2019-07-31 19:25:37: INFO] Reboot in preparation for next execution
[2019-07-31 19:35:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.955 s/op
Iteration   2: 6.940 s/op
Iteration   3: 6.869 s/op
Iteration   4: 6.859 s/op
Iteration   5: 6.812 s/op
Iteration   6: 6.881 s/op
Iteration   7: 6.866 s/op
Iteration   8: 6.839 s/op
Iteration   9: 6.820 s/op
Iteration  10: 6.837 s/op
Iteration  11: 6.836 s/op
Iteration  12: 6.833 s/op
Iteration  13: 6.865 s/op
Iteration  14: 6.856 s/op
Iteration  15: 6.829 s/op
Iteration  16: 6.866 s/op
Iteration  17: 6.802 s/op
Iteration  18: 6.797 s/op
Iteration  19: 6.817 s/op
Iteration  20: 6.813 s/op
Iteration  21: 6.809 s/op
Iteration  22: 6.836 s/op
Iteration  23: 6.837 s/op
Iteration  24: 6.821 s/op
Iteration  25: 6.821 s/op
Iteration  26: 6.829 s/op
Iteration  27: 6.825 s/op
Iteration  28: 6.832 s/op
Iteration  29: 6.798 s/op
Iteration  30: 6.799 s/op
Iteration  31: 6.822 s/op
Iteration  32: 6.844 s/op
Iteration  33: 6.807 s/op
Iteration  34: 6.800 s/op
Iteration  35: 6.811 s/op
Iteration  36: 6.830 s/op
Iteration  37: 6.811 s/op
Iteration  38: 6.856 s/op
Iteration  39: 6.829 s/op
Iteration  40: 6.820 s/op
Iteration  41: 6.817 s/op
Iteration  42: 6.803 s/op
Iteration  43: 6.828 s/op
Iteration  44: 6.834 s/op
Iteration  45: 6.826 s/op
Iteration  46: 6.838 s/op
Iteration  47: 6.807 s/op
Iteration  48: 6.813 s/op
Iteration  49: 6.833 s/op
Iteration  50: 6.834 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.833 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 0 
    [6.775, 6.800) = 4 
    [6.800, 6.825) = 17 
    [6.825, 6.850) = 19 
    [6.850, 6.875) = 7 
    [6.875, 6.900) = 1 
    [6.900, 6.925) = 0 
    [6.925, 6.950) = 1 
    [6.950, 6.975) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.797 s/op
     p(50.0000) =      6.829 s/op
     p(90.0000) =      6.866 s/op
     p(95.0000) =      6.907 s/op
     p(99.0000) =      6.955 s/op
     p(99.9000) =      6.955 s/op
     p(99.9900) =      6.955 s/op
     p(99.9990) =      6.955 s/op
     p(99.9999) =      6.955 s/op
    p(100.0000) =      6.955 s/op


# Run complete. Total time: 00:05:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.833 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_graalvm-ee-19.1.1_1564594187553.json
{"wallclock_times": [342.58756344200003], "core_cycle_counts": [[237956192976], [324870638270], [236642376066], [306510735213]], "aperf_counts": [[237118076678], [324806179337], [236618087459], [306491029304]], "mperf_counts": [[237131714976], [324806978890], [236622466396], [306495454834]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-31 19:35:30: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-31 19:35:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 19:35:31: INFO] 102 executions left in scheduler queue
[2019-07-31 19:35:31: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 19:35:31: INFO] Estimated completion (next execution): 2019-07-31 19:43:43 (0:08:12 from now)
[2019-07-31 19:35:31: INFO] Reboot in preparation for next execution
[2019-07-31 19:39:46: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 19:46:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.104 s/op
Iteration   2: 7.966 s/op
Iteration   3: 7.804 s/op
Iteration   4: 7.818 s/op
Iteration   5: 7.588 s/op
Iteration   6: 7.563 s/op
Iteration   7: 7.606 s/op
Iteration   8: 7.555 s/op
Iteration   9: 7.550 s/op
Iteration  10: 7.618 s/op
Iteration  11: 7.561 s/op
Iteration  12: 7.540 s/op
Iteration  13: 7.528 s/op
Iteration  14: 7.543 s/op
Iteration  15: 7.567 s/op
Iteration  16: 7.513 s/op
Iteration  17: 7.605 s/op
Iteration  18: 7.502 s/op
Iteration  19: 7.585 s/op
Iteration  20: 7.581 s/op
Iteration  21: 7.552 s/op
Iteration  22: 7.536 s/op
Iteration  23: 7.520 s/op
Iteration  24: 7.550 s/op
Iteration  25: 7.541 s/op
Iteration  26: 7.574 s/op
Iteration  27: 7.511 s/op
Iteration  28: 7.561 s/op
Iteration  29: 7.575 s/op
Iteration  30: 7.505 s/op
Iteration  31: 7.621 s/op
Iteration  32: 7.583 s/op
Iteration  33: 7.585 s/op
Iteration  34: 7.553 s/op
Iteration  35: 7.554 s/op
Iteration  36: 7.575 s/op
Iteration  37: 7.589 s/op
Iteration  38: 7.587 s/op
Iteration  39: 7.641 s/op
Iteration  40: 7.609 s/op
Iteration  41: 7.576 s/op
Iteration  42: 7.564 s/op
Iteration  43: 7.530 s/op
Iteration  44: 7.570 s/op
Iteration  45: 7.487 s/op
Iteration  46: 7.547 s/op
Iteration  47: 7.554 s/op
Iteration  48: 7.585 s/op
Iteration  49: 7.562 s/op
Iteration  50: 7.541 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.611 ?(99.9%) 0.114 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 1 
    [ 7.500,  7.750) = 45 
    [ 7.750,  8.000) = 3 
    [ 8.000,  8.250) = 0 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 1 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.487 s/op
     p(50.0000) =      7.563 s/op
     p(90.0000) =      7.639 s/op
     p(95.0000) =      7.885 s/op
     p(99.0000) =      9.104 s/op
     p(99.9000) =      9.104 s/op
     p(99.9900) =      9.104 s/op
     p(99.9990) =      9.104 s/op
     p(99.9999) =      9.104 s/op
    p(100.0000) =      9.104 s/op


# Run complete. Total time: 00:06:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.611 ? 0.114   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_openj9-8u222-b10_1564594786321.json
{"wallclock_times": [381.7559978500001], "core_cycle_counts": [[508600675906], [189301165005], [312751686457], [302318544698]], "aperf_counts": [[507778533774], [189174660776], [312596000574], [302240599539]], "mperf_counts": [[507778613032], [189174627168], [312597436020], [302240581062]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 19:46:08: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 19:46:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 19:46:09: INFO] 101 executions left in scheduler queue
[2019-07-31 19:46:09: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 19:46:09: INFO] Estimated completion (next execution): 2019-07-31 19:55:01 (0:08:52 from now)
[2019-07-31 19:46:09: INFO] Reboot in preparation for next execution
[2019-07-31 19:50:19: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 19:55:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.616 s/op
Iteration   2: 6.918 s/op
Iteration   3: 6.980 s/op
Iteration   4: 6.545 s/op
Iteration   5: 6.384 s/op
Iteration   6: 6.157 s/op
Iteration   7: 6.167 s/op
Iteration   8: 6.103 s/op
Iteration   9: 6.119 s/op
Iteration  10: 6.118 s/op
Iteration  11: 6.618 s/op
Iteration  12: 6.134 s/op
Iteration  13: 6.099 s/op
Iteration  14: 6.643 s/op
Iteration  15: 6.192 s/op
Iteration  16: 6.076 s/op
Iteration  17: 6.170 s/op
Iteration  18: 6.120 s/op
Iteration  19: 6.048 s/op
Iteration  20: 6.218 s/op
Iteration  21: 6.134 s/op
Iteration  22: 6.078 s/op
Iteration  23: 6.161 s/op
Iteration  24: 6.047 s/op
Iteration  25: 6.157 s/op
Iteration  26: 6.516 s/op
Iteration  27: 6.170 s/op
Iteration  28: 6.101 s/op
Iteration  29: 6.490 s/op
Iteration  30: 6.094 s/op
Iteration  31: 6.143 s/op
Iteration  32: 6.164 s/op
Iteration  33: 6.059 s/op
Iteration  34: 6.521 s/op
Iteration  35: 6.605 s/op
Iteration  36: 6.128 s/op
Iteration  37: 6.148 s/op
Iteration  38: 6.113 s/op
Iteration  39: 6.601 s/op
Iteration  40: 6.166 s/op
Iteration  41: 6.082 s/op
Iteration  42: 6.192 s/op
Iteration  43: 6.130 s/op
Iteration  44: 6.176 s/op
Iteration  45: 6.072 s/op
Iteration  46: 6.202 s/op
Iteration  47: 6.145 s/op
Iteration  48: 6.533 s/op
Iteration  49: 6.131 s/op
Iteration  50: 6.146 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.277 ?(99.9%) 0.147 s/op

  Histogram, s/op:
    [6.000, 6.125) = 15 
    [6.125, 6.250) = 22 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 2 
    [6.500, 6.625) = 7 
    [6.625, 6.750) = 1 
    [6.750, 6.875) = 0 
    [6.875, 7.000) = 2 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 1 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.047 s/op
     p(50.0000) =      6.157 s/op
     p(90.0000) =      6.616 s/op
     p(95.0000) =      6.946 s/op
     p(99.0000) =      7.616 s/op
     p(99.9000) =      7.616 s/op
     p(99.9900) =      7.616 s/op
     p(99.9990) =      7.616 s/op
     p(99.9999) =      7.616 s/op
    p(100.0000) =      7.616 s/op


# Run complete. Total time: 00:05:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.277 ? 0.147   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_openj9-8u222-b10_1564595419631.json
{"wallclock_times": [315.33171529699996], "core_cycle_counts": [[397458112788], [221337760414], [237045118310], [255596673396]], "aperf_counts": [[396775579193], [221177535438], [236907220492], [255525149571]], "mperf_counts": [[396775779216], [221177506500], [236907186444], [255525133784]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 19:55:34: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 19:55:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 19:55:35: INFO] 100 executions left in scheduler queue
[2019-07-31 19:55:35: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 19:55:35: INFO] Estimated completion (next execution): 2019-07-31 20:03:21 (0:07:45 from now)
[2019-07-31 19:55:35: INFO] Reboot in preparation for next execution
[2019-07-31 20:00:05: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 20:04:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.995 s/op
Iteration   2: 5.904 s/op
Iteration   3: 5.511 s/op
Iteration   4: 5.691 s/op
Iteration   5: 5.423 s/op
Iteration   6: 5.409 s/op
Iteration   7: 5.410 s/op
Iteration   8: 5.332 s/op
Iteration   9: 5.319 s/op
Iteration  10: 5.359 s/op
Iteration  11: 5.353 s/op
Iteration  12: 5.342 s/op
Iteration  13: 5.339 s/op
Iteration  14: 5.339 s/op
Iteration  15: 5.289 s/op
Iteration  16: 5.337 s/op
Iteration  17: 5.355 s/op
Iteration  18: 5.342 s/op
Iteration  19: 5.366 s/op
Iteration  20: 5.363 s/op
Iteration  21: 5.377 s/op
Iteration  22: 5.359 s/op
Iteration  23: 5.352 s/op
Iteration  24: 5.382 s/op
Iteration  25: 5.322 s/op
Iteration  26: 5.379 s/op
Iteration  27: 5.362 s/op
Iteration  28: 5.335 s/op
Iteration  29: 5.319 s/op
Iteration  30: 5.343 s/op
Iteration  31: 5.312 s/op
Iteration  32: 5.386 s/op
Iteration  33: 5.327 s/op
Iteration  34: 5.328 s/op
Iteration  35: 5.336 s/op
Iteration  36: 5.353 s/op
Iteration  37: 5.369 s/op
Iteration  38: 5.314 s/op
Iteration  39: 5.291 s/op
Iteration  40: 5.291 s/op
Iteration  41: 5.297 s/op
Iteration  42: 5.308 s/op
Iteration  43: 5.322 s/op
Iteration  44: 5.299 s/op
Iteration  45: 5.319 s/op
Iteration  46: 5.363 s/op
Iteration  47: 5.330 s/op
Iteration  48: 5.344 s/op
Iteration  49: 5.341 s/op
Iteration  50: 5.338 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.398 ?(99.9%) 0.124 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 39 
    [5.375, 5.500) = 7 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 1 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 1 
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.289 s/op
     p(50.0000) =      5.342 s/op
     p(90.0000) =      5.422 s/op
     p(95.0000) =      5.787 s/op
     p(99.0000) =      6.995 s/op
     p(99.9000) =      6.995 s/op
     p(99.9900) =      6.995 s/op
     p(99.9990) =      6.995 s/op
     p(99.9999) =      6.995 s/op
    p(100.0000) =      6.995 s/op


# Run complete. Total time: 00:04:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.398 ? 0.124   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_openj9-8u222-b10_1564596005309.json
{"wallclock_times": [271.403893564], "core_cycle_counts": [[188295064867], [212909064220], [306814030495], [317612227148]], "aperf_counts": [[187414289222], [212759708535], [306657329401], [317542770106]], "mperf_counts": [[187416291226], [212759685132], [306657296516], [317542765940]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 20:04:36: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 20:04:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 20:04:37: INFO] 99 executions left in scheduler queue
[2019-07-31 20:04:37: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 20:04:37: INFO] Estimated completion (next execution): 2019-07-31 20:11:39 (0:07:01 from now)
[2019-07-31 20:04:37: INFO] Reboot in preparation for next execution
[2019-07-31 20:08:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 20:17:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.776 s/op
Iteration   2: 10.341 s/op
Iteration   3: 10.758 s/op
Iteration   4: 9.869 s/op
Iteration   5: 10.536 s/op
Iteration   6: 9.767 s/op
Iteration   7: 9.734 s/op
Iteration   8: 9.752 s/op
Iteration   9: 9.754 s/op
Iteration  10: 10.508 s/op
Iteration  11: 9.686 s/op
Iteration  12: 9.680 s/op
Iteration  13: 9.930 s/op
Iteration  14: 10.499 s/op
Iteration  15: 9.839 s/op
Iteration  16: 9.735 s/op
Iteration  17: 9.690 s/op
Iteration  18: 9.659 s/op
Iteration  19: 9.809 s/op
Iteration  20: 9.676 s/op
Iteration  21: 9.813 s/op
Iteration  22: 9.959 s/op
Iteration  23: 9.788 s/op
Iteration  24: 9.828 s/op
Iteration  25: 9.842 s/op
Iteration  26: 9.774 s/op
Iteration  27: 9.813 s/op
Iteration  28: 9.666 s/op
Iteration  29: 9.793 s/op
Iteration  30: 9.779 s/op
Iteration  31: 9.660 s/op
Iteration  32: 9.864 s/op
Iteration  33: 9.789 s/op
Iteration  34: 9.920 s/op
Iteration  35: 9.782 s/op
Iteration  36: 9.850 s/op
Iteration  37: 9.646 s/op
Iteration  38: 9.857 s/op
Iteration  39: 9.804 s/op
Iteration  40: 9.733 s/op
Iteration  41: 9.702 s/op
Iteration  42: 9.718 s/op
Iteration  43: 9.872 s/op
Iteration  44: 9.862 s/op
Iteration  45: 9.739 s/op
Iteration  46: 9.881 s/op
Iteration  47: 9.788 s/op
Iteration  48: 9.867 s/op
Iteration  49: 9.822 s/op
Iteration  50: 9.727 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.899 ?(99.9%) 0.179 s/op

  Histogram, s/op:
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 15 
    [ 9.750, 10.000) = 29 
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 2 
    [10.500, 10.750) = 2 
    [10.750, 11.000) = 1 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.646 s/op
     p(50.0000) =      9.798 s/op
     p(90.0000) =     10.483 s/op
     p(95.0000) =     10.636 s/op
     p(99.0000) =     11.776 s/op
     p(99.9000) =     11.776 s/op
     p(99.9900) =     11.776 s/op
     p(99.9990) =     11.776 s/op
     p(99.9999) =     11.776 s/op
    p(100.0000) =     11.776 s/op


# Run complete. Total time: 00:08:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  9.899 ? 0.179   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_openj9-8u222-b10_1564596527458.json
{"wallclock_times": [496.27244491600004], "core_cycle_counts": [[624243171072], [317595775070], [380291090062], [338117167263]], "aperf_counts": [[623174963273], [317419371373], [380134705054], [337972522673]], "mperf_counts": [[623178013944], [317419326388], [380135585274], [337972486992]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 20:17:03: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-31 20:17:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 20:17:04: INFO] 98 executions left in scheduler queue
[2019-07-31 20:17:04: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-31 20:17:04: INFO] Estimated completion (next execution): 2019-07-31 20:27:51 (0:10:46 from now)
[2019-07-31 20:17:04: INFO] Reboot in preparation for next execution
[2019-07-31 20:21:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 20:21:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 20:21:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 20:21:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 20:21:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 20:22:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.421 s/op
Iteration   2: 2.411 s/op
Iteration   3: 1.880 s/op
Iteration   4: 1.844 s/op
Iteration   5: 2.023 s/op
Iteration   6: 2.024 s/op
Iteration   7: 2.010 s/op
Iteration   8: 1.997 s/op
Iteration   9: 1.987 s/op
Iteration  10: 2.002 s/op
Iteration  11: 2.009 s/op
Iteration  12: 1.992 s/op
Iteration  13: 1.979 s/op
Iteration  14: 1.992 s/op
Iteration  15: 1.996 s/op
Iteration  16: 1.995 s/op
Iteration  17: 1.974 s/op
Iteration  18: 1.992 s/op
Iteration  19: 1.997 s/op
Iteration  20: 1.995 s/op
Iteration  21: 1.975 s/op
Iteration  22: 1.992 s/op
Iteration  23: 1.998 s/op
Iteration  24: 1.967 s/op
Iteration  25: 1.992 s/op
Iteration  26: 1.990 s/op
Iteration  27: 2.001 s/op
Iteration  28: 1.991 s/op
Iteration  29: 1.966 s/op
Iteration  30: 1.985 s/op
Iteration  31: 1.997 s/op
Iteration  32: 1.989 s/op
Iteration  33: 1.996 s/op
Iteration  34: 1.983 s/op
Iteration  35: 1.997 s/op
Iteration  36: 1.969 s/op
Iteration  37: 1.991 s/op
Iteration  38: 1.979 s/op
Iteration  39: 1.996 s/op
Iteration  40: 1.991 s/op
Iteration  41: 1.990 s/op
Iteration  42: 1.980 s/op
Iteration  43: 1.999 s/op
Iteration  44: 1.966 s/op
Iteration  45: 1.993 s/op
Iteration  46: 1.983 s/op
Iteration  47: 2.001 s/op
Iteration  48: 1.966 s/op
Iteration  49: 1.995 s/op
Iteration  50: 1.980 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.002 ?(99.9%) 0.045 s/op

  Histogram, s/op:
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 39 
    [2.000, 2.050) = 7 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 2 

  Percentiles, s/op:
      p(0.0000) =      1.844 s/op
     p(50.0000) =      1.992 s/op
     p(90.0000) =      2.010 s/op
     p(95.0000) =      2.198 s/op
     p(99.0000) =      2.421 s/op
     p(99.9000) =      2.421 s/op
     p(99.9900) =      2.421 s/op
     p(99.9990) =      2.421 s/op
     p(99.9999) =      2.421 s/op
    p(100.0000) =      2.421 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.002 ? 0.045   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot_11.0.4_1564597273559.json
{"wallclock_times": [101.190492947], "core_cycle_counts": [[92384274995], [41039281279], [84415110810], [85075721679]], "aperf_counts": [[92100169863], [40992856734], [84393730299], [85058164485]], "mperf_counts": [[103628258162], [45967351144], [95387019792], [96276114746]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 20:22:54: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-31 20:22:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 20:22:55: INFO] 97 executions left in scheduler queue
[2019-07-31 20:22:55: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-31 20:22:55: INFO] Estimated completion (next execution): 2019-07-31 20:27:07 (0:04:11 from now)
[2019-07-31 20:22:55: INFO] Reboot in preparation for next execution
[2019-07-31 20:27:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 20:27:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 20:27:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 20:27:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 20:27:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 20:29:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.114 s/op
Iteration   2: 2.378 s/op
Iteration   3: 2.424 s/op
Iteration   4: 2.337 s/op
Iteration   5: 2.765 s/op
Iteration   6: 2.318 s/op
Iteration   7: 2.295 s/op
Iteration   8: 2.309 s/op
Iteration   9: 2.324 s/op
Iteration  10: 2.307 s/op
Iteration  11: 2.301 s/op
Iteration  12: 2.305 s/op
Iteration  13: 2.304 s/op
Iteration  14: 2.309 s/op
Iteration  15: 2.298 s/op
Iteration  16: 2.289 s/op
Iteration  17: 2.287 s/op
Iteration  18: 2.286 s/op
Iteration  19: 2.284 s/op
Iteration  20: 2.291 s/op
Iteration  21: 2.284 s/op
Iteration  22: 2.305 s/op
Iteration  23: 2.299 s/op
Iteration  24: 2.298 s/op
Iteration  25: 2.295 s/op
Iteration  26: 2.288 s/op
Iteration  27: 2.299 s/op
Iteration  28: 2.293 s/op
Iteration  29: 2.288 s/op
Iteration  30: 2.289 s/op
Iteration  31: 2.300 s/op
Iteration  32: 2.288 s/op
Iteration  33: 2.292 s/op
Iteration  34: 2.297 s/op
Iteration  35: 2.287 s/op
Iteration  36: 2.286 s/op
Iteration  37: 2.282 s/op
Iteration  38: 2.283 s/op
Iteration  39: 2.285 s/op
Iteration  40: 2.283 s/op
Iteration  41: 2.285 s/op
Iteration  42: 2.282 s/op
Iteration  43: 2.284 s/op
Iteration  44: 2.302 s/op
Iteration  45: 2.284 s/op
Iteration  46: 2.287 s/op
Iteration  47: 2.293 s/op
Iteration  48: 2.298 s/op
Iteration  49: 2.294 s/op
Iteration  50: 2.296 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.305 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 35 
    [2.300, 2.350) = 11 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 1 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.114 s/op
     p(50.0000) =      2.294 s/op
     p(90.0000) =      2.324 s/op
     p(95.0000) =      2.399 s/op
     p(99.0000) =      2.765 s/op
     p(99.9000) =      2.765 s/op
     p(99.9900) =      2.765 s/op
     p(99.9990) =      2.765 s/op
     p(99.9999) =      2.765 s/op
    p(100.0000) =      2.765 s/op


# Run complete. Total time: 00:01:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.305 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot_11.0.4_1564597624325.json
{"wallclock_times": [116.25148536], "core_cycle_counts": [[125083651720], [40532576345], [106694031300], [106648857551]], "aperf_counts": [[124816124747], [40487881098], [106672468839], [106631219948]], "mperf_counts": [[125174772972], [41053834720], [106719626608], [106659934216]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 20:29:00: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-31 20:29:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 20:29:01: INFO] 96 executions left in scheduler queue
[2019-07-31 20:29:01: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 20:29:01: INFO] Estimated completion (next execution): 2019-07-31 20:33:28 (0:04:26 from now)
[2019-07-31 20:29:01: INFO] Reboot in preparation for next execution
[2019-07-31 20:33:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 20:33:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 20:33:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 20:33:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 20:33:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 20:39:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.307 s/op
Iteration   2: 8.127 s/op
Iteration   3: 7.948 s/op
Iteration   4: 7.855 s/op
Iteration   5: 7.957 s/op
Iteration   6: 7.899 s/op
Iteration   7: 7.905 s/op
Iteration   8: 7.927 s/op
Iteration   9: 7.910 s/op
Iteration  10: 7.901 s/op
Iteration  11: 7.921 s/op
Iteration  12: 7.904 s/op
Iteration  13: 7.890 s/op
Iteration  14: 7.899 s/op
Iteration  15: 7.896 s/op
Iteration  16: 7.895 s/op
Iteration  17: 7.898 s/op
Iteration  18: 7.889 s/op
Iteration  19: 7.940 s/op
Iteration  20: 7.910 s/op
Iteration  21: 7.895 s/op
Iteration  22: 7.915 s/op
Iteration  23: 7.878 s/op
Iteration  24: 7.889 s/op
Iteration  25: 7.859 s/op
Iteration  26: 7.845 s/op
Iteration  27: 7.929 s/op
Iteration  28: 7.832 s/op
Iteration  29: 7.905 s/op
Iteration  30: 7.826 s/op
Iteration  31: 7.900 s/op
Iteration  32: 7.939 s/op
Iteration  33: 7.775 s/op
Iteration  34: 7.900 s/op
Iteration  35: 7.920 s/op
Iteration  36: 7.882 s/op
Iteration  37: 7.885 s/op
Iteration  38: 7.876 s/op
Iteration  39: 7.903 s/op
Iteration  40: 7.878 s/op
Iteration  41: 7.912 s/op
Iteration  42: 7.886 s/op
Iteration  43: 7.894 s/op
Iteration  44: 7.894 s/op
Iteration  45: 7.898 s/op
Iteration  46: 7.883 s/op
Iteration  47: 7.910 s/op
Iteration  48: 7.891 s/op
Iteration  49: 7.885 s/op
Iteration  50: 7.869 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.907 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [7.700, 7.750) = 0 
    [7.750, 7.800) = 1 
    [7.800, 7.850) = 3 
    [7.850, 7.900) = 25 
    [7.900, 7.950) = 18 
    [7.950, 8.000) = 1 
    [8.000, 8.050) = 0 
    [8.050, 8.100) = 0 
    [8.100, 8.150) = 1 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 0 
    [8.300, 8.350) = 1 
    [8.350, 8.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.775 s/op
     p(50.0000) =      7.898 s/op
     p(90.0000) =      7.940 s/op
     p(95.0000) =      8.034 s/op
     p(99.0000) =      8.307 s/op
     p(99.9000) =      8.307 s/op
     p(99.9900) =      8.307 s/op
     p(99.9990) =      8.307 s/op
     p(99.9999) =      8.307 s/op
    p(100.0000) =      8.307 s/op


# Run complete. Total time: 00:06:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.907 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot_11.0.4_1564597991575.json
{"wallclock_times": [396.511489781], "core_cycle_counts": [[371098915395], [331070216310], [378982086938], [329370572993]], "aperf_counts": [[370139605306], [330961458530], [378922166301], [329314871859]], "mperf_counts": [[370417174388], [331014180778], [379003811442], [329460125566]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 20:39:48: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 20:39:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 20:39:49: INFO] 95 executions left in scheduler queue
[2019-07-31 20:39:49: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 20:39:49: INFO] Estimated completion (next execution): 2019-07-31 20:48:55 (0:09:06 from now)
[2019-07-31 20:39:49: INFO] Reboot in preparation for next execution
[2019-07-31 20:43:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 20:43:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 20:43:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 20:43:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 20:43:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 20:54:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.870 s/op
Iteration   2: 13.236 s/op
Iteration   3: 12.552 s/op
Iteration   4: 12.522 s/op
Iteration   5: 12.508 s/op
Iteration   6: 12.505 s/op
Iteration   7: 12.490 s/op
Iteration   8: 12.506 s/op
Iteration   9: 12.497 s/op
Iteration  10: 12.531 s/op
Iteration  11: 12.505 s/op
Iteration  12: 12.532 s/op
Iteration  13: 12.509 s/op
Iteration  14: 12.496 s/op
Iteration  15: 12.556 s/op
Iteration  16: 12.500 s/op
Iteration  17: 12.488 s/op
Iteration  18: 12.534 s/op
Iteration  19: 12.495 s/op
Iteration  20: 12.572 s/op
Iteration  21: 12.510 s/op
Iteration  22: 12.532 s/op
Iteration  23: 12.519 s/op
Iteration  24: 12.474 s/op
Iteration  25: 12.465 s/op
Iteration  26: 12.496 s/op
Iteration  27: 12.502 s/op
Iteration  28: 12.490 s/op
Iteration  29: 12.592 s/op
Iteration  30: 12.475 s/op
Iteration  31: 12.497 s/op
Iteration  32: 12.503 s/op
Iteration  33: 12.513 s/op
Iteration  34: 12.467 s/op
Iteration  35: 12.570 s/op
Iteration  36: 12.501 s/op
Iteration  37: 12.514 s/op
Iteration  38: 12.493 s/op
Iteration  39: 12.480 s/op
Iteration  40: 12.492 s/op
Iteration  41: 12.477 s/op
Iteration  42: 12.486 s/op
Iteration  43: 12.525 s/op
Iteration  44: 12.481 s/op
Iteration  45: 12.532 s/op
Iteration  46: 12.525 s/op
Iteration  47: 12.506 s/op
Iteration  48: 12.493 s/op
Iteration  49: 12.486 s/op
Iteration  50: 12.490 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.530 ?(99.9%) 0.058 s/op

  Histogram, s/op:
    [12.400, 12.450) = 0 
    [12.450, 12.500) = 21 
    [12.500, 12.550) = 22 
    [12.550, 12.600) = 5 
    [12.600, 12.650) = 0 
    [12.650, 12.700) = 0 
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 0 
    [12.800, 12.850) = 0 
    [12.850, 12.900) = 1 
    [12.900, 12.950) = 0 
    [12.950, 13.000) = 0 
    [13.000, 13.050) = 0 
    [13.050, 13.100) = 0 
    [13.100, 13.150) = 0 
    [13.150, 13.200) = 0 
    [13.200, 13.250) = 1 
    [13.250, 13.300) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.465 s/op
     p(50.0000) =     12.504 s/op
     p(90.0000) =     12.569 s/op
     p(95.0000) =     12.717 s/op
     p(99.0000) =     13.236 s/op
     p(99.9000) =     13.236 s/op
     p(99.9900) =     13.236 s/op
     p(99.9990) =     13.236 s/op
     p(99.9999) =     13.236 s/op
    p(100.0000) =     13.236 s/op


# Run complete. Total time: 00:10:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.530 ? 0.058   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot_11.0.4_1564598639025.json
{"wallclock_times": [627.52886983], "core_cycle_counts": [[206079410723], [355681210028], [761318101619], [705742770066]], "aperf_counts": [[204215780599], [355588347262], [761274009538], [705697751831]], "mperf_counts": [[204682855012], [355668865096], [761317926290], [705728507902]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 20:54:26: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 20:54:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 20:54:27: INFO] 94 executions left in scheduler queue
[2019-07-31 20:54:27: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 20:54:27: INFO] Estimated completion (next execution): 2019-07-31 21:07:25 (0:12:57 from now)
[2019-07-31 20:54:27: INFO] Reboot in preparation for next execution
[2019-07-31 20:58:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 20:58:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 20:58:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 20:58:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 20:58:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 21:05:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.643 s/op
Iteration   2: 8.206 s/op
Iteration   3: 7.889 s/op
Iteration   4: 8.579 s/op
Iteration   5: 8.631 s/op
Iteration   6: 8.408 s/op
Iteration   7: 8.146 s/op
Iteration   8: 8.583 s/op
Iteration   9: 8.128 s/op
Iteration  10: 8.574 s/op
Iteration  11: 8.536 s/op
Iteration  12: 8.561 s/op
Iteration  13: 8.518 s/op
Iteration  14: 8.536 s/op
Iteration  15: 8.494 s/op
Iteration  16: 8.534 s/op
Iteration  17: 8.573 s/op
Iteration  18: 8.540 s/op
Iteration  19: 8.549 s/op
Iteration  20: 8.273 s/op
Iteration  21: 8.555 s/op
Iteration  22: 8.568 s/op
Iteration  23: 8.552 s/op
Iteration  24: 8.551 s/op
Iteration  25: 8.529 s/op
Iteration  26: 8.565 s/op
Iteration  27: 8.554 s/op
Iteration  28: 8.579 s/op
Iteration  29: 8.558 s/op
Iteration  30: 8.547 s/op
Iteration  31: 8.563 s/op
Iteration  32: 8.565 s/op
Iteration  33: 8.553 s/op
Iteration  34: 8.548 s/op
Iteration  35: 8.553 s/op
Iteration  36: 8.584 s/op
Iteration  37: 8.565 s/op
Iteration  38: 8.561 s/op
Iteration  39: 8.554 s/op
Iteration  40: 8.531 s/op
Iteration  41: 8.576 s/op
Iteration  42: 8.558 s/op
Iteration  43: 8.584 s/op
Iteration  44: 8.574 s/op
Iteration  45: 8.594 s/op
Iteration  46: 8.544 s/op
Iteration  47: 8.601 s/op
Iteration  48: 8.593 s/op
Iteration  49: 8.577 s/op
Iteration  50: 8.535 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.515 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [7.800, 7.850) = 0 
    [7.850, 7.900) = 1 
    [7.900, 7.950) = 0 
    [7.950, 8.000) = 0 
    [8.000, 8.050) = 0 
    [8.050, 8.100) = 0 
    [8.100, 8.150) = 2 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 1 
    [8.250, 8.300) = 1 
    [8.300, 8.350) = 0 
    [8.350, 8.400) = 0 
    [8.400, 8.450) = 1 
    [8.450, 8.500) = 1 
    [8.500, 8.550) = 12 
    [8.550, 8.600) = 28 
    [8.600, 8.650) = 3 
    [8.650, 8.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.889 s/op
     p(50.0000) =      8.555 s/op
     p(90.0000) =      8.592 s/op
     p(95.0000) =      8.614 s/op
     p(99.0000) =      8.643 s/op
     p(99.9000) =      8.643 s/op
     p(99.9900) =      8.643 s/op
     p(99.9990) =      8.643 s/op
     p(99.9999) =      8.643 s/op
    p(100.0000) =      8.643 s/op


# Run complete. Total time: 00:07:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.515 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot_11.0.4_1564599521572.json
{"wallclock_times": [426.915989996], "core_cycle_counts": [[248798143925], [222236257813], [243176791811], [511869631279]], "aperf_counts": [[247672874632], [222128886824], [243135653911], [511831170835]], "mperf_counts": [[282137465968], [252316207108], [267924619684], [583297895264]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 21:05:48: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 21:05:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 21:05:49: INFO] 93 executions left in scheduler queue
[2019-07-31 21:05:49: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 21:05:49: INFO] Estimated completion (next execution): 2019-07-31 21:15:26 (0:09:37 from now)
[2019-07-31 21:05:49: INFO] Reboot in preparation for next execution
[2019-07-31 21:10:00: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 21:10:00: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 21:10:00: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 21:10:00: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 21:10:00: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 21:24:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.445 s/op
Iteration   2: 17.994 s/op
Iteration   3: 18.232 s/op
Iteration   4: 17.693 s/op
Iteration   5: 17.777 s/op
Iteration   6: 17.674 s/op
Iteration   7: 17.965 s/op
Iteration   8: 17.710 s/op
Iteration   9: 17.713 s/op
Iteration  10: 17.678 s/op
Iteration  11: 17.677 s/op
Iteration  12: 17.603 s/op
Iteration  13: 17.646 s/op
Iteration  14: 17.594 s/op
Iteration  15: 17.704 s/op
Iteration  16: 17.655 s/op
Iteration  17: 17.704 s/op
Iteration  18: 17.649 s/op
Iteration  19: 17.656 s/op
Iteration  20: 17.670 s/op
Iteration  21: 17.679 s/op
Iteration  22: 17.704 s/op
Iteration  23: 17.725 s/op
Iteration  24: 17.697 s/op
Iteration  25: 17.788 s/op
Iteration  26: 17.654 s/op
Iteration  27: 17.694 s/op
Iteration  28: 17.638 s/op
Iteration  29: 17.807 s/op
Iteration  30: 17.745 s/op
Iteration  31: 17.688 s/op
Iteration  32: 17.754 s/op
Iteration  33: 17.734 s/op
Iteration  34: 17.665 s/op
Iteration  35: 17.632 s/op
Iteration  36: 17.692 s/op
Iteration  37: 17.678 s/op
Iteration  38: 17.671 s/op
Iteration  39: 18.173 s/op
Iteration  40: 17.707 s/op
Iteration  41: 17.674 s/op
Iteration  42: 17.663 s/op
Iteration  43: 17.664 s/op
Iteration  44: 17.826 s/op
Iteration  45: 17.702 s/op
Iteration  46: 17.686 s/op
Iteration  47: 17.724 s/op
Iteration  48: 17.686 s/op
Iteration  49: 17.680 s/op
Iteration  50: 17.665 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.719 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [17.400, 17.450) = 1 
    [17.450, 17.500) = 0 
    [17.500, 17.550) = 0 
    [17.550, 17.600) = 1 
    [17.600, 17.650) = 5 
    [17.650, 17.700) = 23 
    [17.700, 17.750) = 11 
    [17.750, 17.800) = 3 
    [17.800, 17.850) = 2 
    [17.850, 17.900) = 0 
    [17.900, 17.950) = 0 
    [17.950, 18.000) = 2 
    [18.000, 18.050) = 0 
    [18.050, 18.100) = 0 
    [18.100, 18.150) = 0 
    [18.150, 18.200) = 1 
    [18.200, 18.250) = 1 

  Percentiles, s/op:
      p(0.0000) =     17.445 s/op
     p(50.0000) =     17.687 s/op
     p(90.0000) =     17.824 s/op
     p(95.0000) =     18.075 s/op
     p(99.0000) =     18.232 s/op
     p(99.9000) =     18.232 s/op
     p(99.9900) =     18.232 s/op
     p(99.9990) =     18.232 s/op
     p(99.9999) =     18.232 s/op
    p(100.0000) =     18.232 s/op


# Run complete. Total time: 00:14:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.719 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot_11.0.4_1564600200440.json
{"wallclock_times": [887.0191032309999], "core_cycle_counts": [[576493200777], [617281718996], [1198747859165], [465533150076]], "aperf_counts": [[574235096967], [617143500001], [1198682094107], [465389250079]], "mperf_counts": [[574800892614], [617535607922], [1199891302182], [465477294006]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 21:24:47: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-31 21:24:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 21:24:48: INFO] 92 executions left in scheduler queue
[2019-07-31 21:24:48: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-07-31 21:24:48: INFO] Estimated completion (next execution): 2019-07-31 21:42:05 (0:17:17 from now)
[2019-07-31 21:24:48: INFO] Reboot in preparation for next execution
[2019-07-31 21:28:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 21:28:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 21:28:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 21:28:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 21:28:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 21:29:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 21:42:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.739 s/op
Iteration   2: 16.867 s/op
Iteration   3: 16.320 s/op
Iteration   4: 16.352 s/op
Iteration   5: 16.318 s/op
Iteration   6: 16.315 s/op
Iteration   7: 16.281 s/op
Iteration   8: 16.346 s/op
Iteration   9: 16.322 s/op
Iteration  10: 16.317 s/op
Iteration  11: 16.275 s/op
Iteration  12: 16.323 s/op
Iteration  13: 16.312 s/op
Iteration  14: 16.387 s/op
Iteration  15: 16.275 s/op
Iteration  16: 16.306 s/op
Iteration  17: 16.292 s/op
Iteration  18: 16.278 s/op
Iteration  19: 16.285 s/op
Iteration  20: 16.235 s/op
Iteration  21: 16.310 s/op
Iteration  22: 16.314 s/op
Iteration  23: 16.275 s/op
Iteration  24: 16.316 s/op
Iteration  25: 16.309 s/op
Iteration  26: 16.282 s/op
Iteration  27: 16.314 s/op
Iteration  28: 16.320 s/op
Iteration  29: 16.343 s/op
Iteration  30: 16.336 s/op
Iteration  31: 16.364 s/op
Iteration  32: 16.345 s/op
Iteration  33: 16.315 s/op
Iteration  34: 16.321 s/op
Iteration  35: 16.291 s/op
Iteration  36: 16.285 s/op
Iteration  37: 16.316 s/op
Iteration  38: 16.275 s/op
Iteration  39: 16.294 s/op
Iteration  40: 16.283 s/op
Iteration  41: 16.298 s/op
Iteration  42: 16.312 s/op
Iteration  43: 16.287 s/op
Iteration  44: 16.309 s/op
Iteration  45: 16.290 s/op
Iteration  46: 16.323 s/op
Iteration  47: 16.279 s/op
Iteration  48: 16.321 s/op
Iteration  49: 16.329 s/op
Iteration  50: 16.290 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     16.388 ?(99.9%) 0.243 s/op

  Histogram, s/op:
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 47 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 1 
    [17.000, 17.250) = 0 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 
    [17.750, 18.000) = 0 
    [18.000, 18.250) = 0 
    [18.250, 18.500) = 0 
    [18.500, 18.750) = 0 
    [18.750, 19.000) = 0 
    [19.000, 19.250) = 0 
    [19.250, 19.500) = 0 
    [19.500, 19.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     16.235 s/op
     p(50.0000) =     16.313 s/op
     p(90.0000) =     16.351 s/op
     p(95.0000) =     16.603 s/op
     p(99.0000) =     19.739 s/op
     p(99.9000) =     19.739 s/op
     p(99.9900) =     19.739 s/op
     p(99.9990) =     19.739 s/op
     p(99.9999) =     19.739 s/op
    p(100.0000) =     19.739 s/op


# Run complete. Total time: 00:13:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  16.388 ? 0.243   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9_11.0.4_1564601339946.json
{"wallclock_times": [820.853732117], "core_cycle_counts": [[1097342429141], [184744803054], [779889631429], [608804027914]], "aperf_counts": [[1095591855041], [184474630003], [779667664353], [608486368908]], "mperf_counts": [[1095594471736], [184474558800], [779667595668], [608486275718]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 21:42:40: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-07-31 21:42:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 21:42:41: INFO] 91 executions left in scheduler queue
[2019-07-31 21:42:41: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-07-31 21:42:41: INFO] Estimated completion (next execution): 2019-07-31 21:58:53 (0:16:11 from now)
[2019-07-31 21:42:41: INFO] Reboot in preparation for next execution
[2019-07-31 21:47:06: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 21:47:06: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 21:47:06: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 21:47:06: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 21:47:06: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 21:47:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 21:59:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.613 s/op
Iteration   2: 16.037 s/op
Iteration   3: 15.237 s/op
Iteration   4: 15.412 s/op
Iteration   5: 14.901 s/op
Iteration   6: 16.183 s/op
Iteration   7: 15.349 s/op
Iteration   8: 14.660 s/op
Iteration   9: 14.955 s/op
Iteration  10: 15.960 s/op
Iteration  11: 15.193 s/op
Iteration  12: 14.941 s/op
Iteration  13: 15.906 s/op
Iteration  14: 14.889 s/op
Iteration  15: 16.080 s/op
Iteration  16: 15.668 s/op
Iteration  17: 15.671 s/op
Iteration  18: 15.448 s/op
Iteration  19: 14.570 s/op
Iteration  20: 15.891 s/op
Iteration  21: 14.577 s/op
Iteration  22: 15.118 s/op
Iteration  23: 15.010 s/op
Iteration  24: 15.469 s/op
Iteration  25: 16.032 s/op
Iteration  26: 14.722 s/op
Iteration  27: 14.486 s/op
Iteration  28: 14.764 s/op
Iteration  29: 15.297 s/op
Iteration  30: 14.915 s/op
Iteration  31: 15.315 s/op
Iteration  32: 14.838 s/op
Iteration  33: 14.873 s/op
Iteration  34: 14.492 s/op
Iteration  35: 15.335 s/op
Iteration  36: 15.306 s/op
Iteration  37: 15.968 s/op
Iteration  38: 14.987 s/op
Iteration  39: 14.328 s/op
Iteration  40: 14.602 s/op
Iteration  41: 15.470 s/op
Iteration  42: 15.022 s/op
Iteration  43: 15.388 s/op
Iteration  44: 14.908 s/op
Iteration  45: 14.520 s/op
Iteration  46: 15.145 s/op
Iteration  47: 15.460 s/op
Iteration  48: 15.064 s/op
Iteration  49: 14.563 s/op
Iteration  50: 14.907 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.189 ?(99.9%) 0.242 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 3 
    [14.500, 14.750) = 7 
    [14.750, 15.000) = 11 
    [15.000, 15.250) = 7 
    [15.250, 15.500) = 11 
    [15.500, 15.750) = 3 
    [15.750, 16.000) = 4 
    [16.000, 16.250) = 4 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.328 s/op
     p(50.0000) =     15.132 s/op
     p(90.0000) =     15.967 s/op
     p(95.0000) =     16.056 s/op
     p(99.0000) =     16.183 s/op
     p(99.9000) =     16.183 s/op
     p(99.9900) =     16.183 s/op
     p(99.9990) =     16.183 s/op
     p(99.9999) =     16.183 s/op
    p(100.0000) =     16.183 s/op


# Run complete. Total time: 00:12:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  15.189 ? 0.242   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9_11.0.4_1564602426844.json
{"wallclock_times": [761.220639698], "core_cycle_counts": [[672932788210], [526139098867], [882612869943], [891024732899]], "aperf_counts": [[670971615057], [525984318394], [882434447645], [890864346327]], "mperf_counts": [[670971388066], [525990790780], [882434442696], [890864311262]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 21:59:48: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-07-31 21:59:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 21:59:48: INFO] 90 executions left in scheduler queue
[2019-07-31 21:59:48: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-07-31 21:59:48: INFO] Estimated completion (next execution): 2019-07-31 22:15:00 (0:15:11 from now)
[2019-07-31 21:59:48: INFO] Reboot in preparation for next execution
[2019-07-31 22:03:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 22:03:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 22:03:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 22:03:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 22:03:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 22:03:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 22:19:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 18.025 s/op
Iteration   2: 16.845 s/op
Iteration   3: 17.902 s/op
Iteration   4: 18.163 s/op
Iteration   5: 17.955 s/op
Iteration   6: 18.112 s/op
Iteration   7: 18.113 s/op
Iteration   8: 18.011 s/op
Iteration   9: 17.800 s/op
Iteration  10: 17.330 s/op
Iteration  11: 18.066 s/op
Iteration  12: 18.254 s/op
Iteration  13: 18.637 s/op
Iteration  14: 18.507 s/op
Iteration  15: 18.655 s/op
Iteration  16: 18.570 s/op
Iteration  17: 17.652 s/op
Iteration  18: 18.301 s/op
Iteration  19: 18.237 s/op
Iteration  20: 18.077 s/op
Iteration  21: 17.759 s/op
Iteration  22: 17.978 s/op
Iteration  23: 18.229 s/op
Iteration  24: 18.361 s/op
Iteration  25: 18.111 s/op
Iteration  26: 17.912 s/op
Iteration  27: 17.870 s/op
Iteration  28: 17.717 s/op
Iteration  29: 17.752 s/op
Iteration  30: 18.319 s/op
Iteration  31: 16.994 s/op
Iteration  32: 18.397 s/op
Iteration  33: 18.353 s/op
Iteration  34: 17.226 s/op
Iteration  35: 18.183 s/op
Iteration  36: 17.431 s/op
Iteration  37: 18.422 s/op
Iteration  38: 18.145 s/op
Iteration  39: 18.025 s/op
Iteration  40: 18.129 s/op
Iteration  41: 18.247 s/op
Iteration  42: 17.755 s/op
Iteration  43: 17.560 s/op
Iteration  44: 17.936 s/op
Iteration  45: 18.273 s/op
Iteration  46: 18.152 s/op
Iteration  47: 18.060 s/op
Iteration  48: 18.287 s/op
Iteration  49: 17.736 s/op
Iteration  50: 18.181 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     18.014 ?(99.9%) 0.190 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 2 
    [17.000, 17.250) = 1 
    [17.250, 17.500) = 2 
    [17.500, 17.750) = 4 
    [17.750, 18.000) = 10 
    [18.000, 18.250) = 18 
    [18.250, 18.500) = 9 
    [18.500, 18.750) = 4 

  Percentiles, s/op:
      p(0.0000) =     16.845 s/op
     p(50.0000) =     18.094 s/op
     p(90.0000) =     18.420 s/op
     p(95.0000) =     18.600 s/op
     p(99.0000) =     18.655 s/op
     p(99.9000) =     18.655 s/op
     p(99.9900) =     18.655 s/op
     p(99.9990) =     18.655 s/op
     p(99.9999) =     18.655 s/op
    p(100.0000) =     18.655 s/op


# Run complete. Total time: 00:15:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  18.014 ? 0.190   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9_12.0.1_1564603438219.json
{"wallclock_times": [902.5320591120001], "core_cycle_counts": [[822561006075], [737270911379], [731266061320], [912257602881]], "aperf_counts": [[820295602110], [737117480322], [731035994733], [912036892979]], "mperf_counts": [[820300441550], [737117451420], [731035937476], [912036868322]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 22:19:00: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-07-31 22:19:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 22:19:01: INFO] 89 executions left in scheduler queue
[2019-07-31 22:19:01: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-07-31 22:19:01: INFO] Estimated completion (next execution): 2019-07-31 22:36:34 (0:17:33 from now)
[2019-07-31 22:19:01: INFO] Reboot in preparation for next execution
[2019-07-31 22:23:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 22:23:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 22:23:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 22:23:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 22:23:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 22:34:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.580 s/op
Iteration   2: 14.285 s/op
Iteration   3: 14.139 s/op
Iteration   4: 14.087 s/op
Iteration   5: 14.020 s/op
Iteration   6: 14.177 s/op
Iteration   7: 14.052 s/op
Iteration   8: 14.067 s/op
Iteration   9: 14.029 s/op
Iteration  10: 14.021 s/op
Iteration  11: 14.027 s/op
Iteration  12: 14.211 s/op
Iteration  13: 13.963 s/op
Iteration  14: 14.044 s/op
Iteration  15: 14.107 s/op
Iteration  16: 14.069 s/op
Iteration  17: 14.014 s/op
Iteration  18: 14.008 s/op
Iteration  19: 14.132 s/op
Iteration  20: 13.999 s/op
Iteration  21: 14.101 s/op
Iteration  22: 14.169 s/op
Iteration  23: 13.942 s/op
Iteration  24: 14.175 s/op
Iteration  25: 13.956 s/op
Iteration  26: 14.038 s/op
Iteration  27: 14.006 s/op
Iteration  28: 14.163 s/op
Iteration  29: 14.047 s/op
Iteration  30: 14.061 s/op
Iteration  31: 13.974 s/op
Iteration  32: 14.070 s/op
Iteration  33: 14.084 s/op
Iteration  34: 13.825 s/op
Iteration  35: 14.107 s/op
Iteration  36: 14.013 s/op
Iteration  37: 13.976 s/op
Iteration  38: 14.081 s/op
Iteration  39: 13.965 s/op
Iteration  40: 14.063 s/op
Iteration  41: 14.023 s/op
Iteration  42: 13.968 s/op
Iteration  43: 14.163 s/op
Iteration  44: 13.955 s/op
Iteration  45: 14.087 s/op
Iteration  46: 14.053 s/op
Iteration  47: 14.173 s/op
Iteration  48: 14.008 s/op
Iteration  49: 14.034 s/op
Iteration  50: 14.055 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     14.067 ?(99.9%) 0.054 s/op

  Histogram, s/op:
    [13.800, 13.850) = 1 
    [13.850, 13.900) = 0 
    [13.900, 13.950) = 1 
    [13.950, 14.000) = 8 
    [14.000, 14.050) = 14 
    [14.050, 14.100) = 12 
    [14.100, 14.150) = 5 
    [14.150, 14.200) = 6 
    [14.200, 14.250) = 1 
    [14.250, 14.300) = 1 
    [14.300, 14.350) = 0 
    [14.350, 14.400) = 0 
    [14.400, 14.450) = 0 
    [14.450, 14.500) = 0 
    [14.500, 14.550) = 0 
    [14.550, 14.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.825 s/op
     p(50.0000) =     14.052 s/op
     p(90.0000) =     14.174 s/op
     p(95.0000) =     14.244 s/op
     p(99.0000) =     14.580 s/op
     p(99.9000) =     14.580 s/op
     p(99.9900) =     14.580 s/op
     p(99.9990) =     14.580 s/op
     p(99.9999) =     14.580 s/op
    p(100.0000) =     14.580 s/op


# Run complete. Total time: 00:11:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.067 ? 0.054   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_hotspot_11.0.4_1564604591424.json
{"wallclock_times": [704.471735741], "core_cycle_counts": [[763330157963], [718349305069], [577139583176], [475397536298]], "aperf_counts": [[761581863340], [718029237438], [576938042389], [475237443752]], "mperf_counts": [[770016809616], [725186947524], [582433959718], [479731558832]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 22:34:55: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-07-31 22:34:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 22:34:56: INFO] 88 executions left in scheduler queue
[2019-07-31 22:34:56: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-31 22:34:56: INFO] Estimated completion (next execution): 2019-07-31 22:49:11 (0:14:14 from now)
[2019-07-31 22:34:56: INFO] Reboot in preparation for next execution
[2019-07-31 22:39:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 22:39:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 22:39:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 22:39:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 22:39:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 22:40:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.462 s/op
Iteration   2: 2.366 s/op
Iteration   3: 2.029 s/op
Iteration   4: 2.004 s/op
Iteration   5: 2.114 s/op
Iteration   6: 2.022 s/op
Iteration   7: 2.161 s/op
Iteration   8: 2.145 s/op
Iteration   9: 2.151 s/op
Iteration  10: 2.027 s/op
Iteration  11: 2.145 s/op
Iteration  12: 2.137 s/op
Iteration  13: 2.142 s/op
Iteration  14: 2.040 s/op
Iteration  15: 2.143 s/op
Iteration  16: 2.138 s/op
Iteration  17: 2.140 s/op
Iteration  18: 2.145 s/op
Iteration  19: 2.144 s/op
Iteration  20: 2.134 s/op
Iteration  21: 2.106 s/op
Iteration  22: 2.141 s/op
Iteration  23: 2.127 s/op
Iteration  24: 2.140 s/op
Iteration  25: 2.131 s/op
Iteration  26: 2.138 s/op
Iteration  27: 2.118 s/op
Iteration  28: 2.136 s/op
Iteration  29: 2.052 s/op
Iteration  30: 2.009 s/op
Iteration  31: 2.119 s/op
Iteration  32: 2.134 s/op
Iteration  33: 2.133 s/op
Iteration  34: 2.137 s/op
Iteration  35: 2.121 s/op
Iteration  36: 2.141 s/op
Iteration  37: 2.134 s/op
Iteration  38: 2.140 s/op
Iteration  39: 2.119 s/op
Iteration  40: 2.140 s/op
Iteration  41: 2.132 s/op
Iteration  42: 2.006 s/op
Iteration  43: 2.117 s/op
Iteration  44: 2.134 s/op
Iteration  45: 2.131 s/op
Iteration  46: 2.003 s/op
Iteration  47: 2.115 s/op
Iteration  48: 2.137 s/op
Iteration  49: 2.133 s/op
Iteration  50: 2.001 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.122 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [2.000, 2.050) = 9 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 36 
    [2.150, 2.200) = 2 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.001 s/op
     p(50.0000) =      2.134 s/op
     p(90.0000) =      2.145 s/op
     p(95.0000) =      2.253 s/op
     p(99.0000) =      2.462 s/op
     p(99.9000) =      2.462 s/op
     p(99.9900) =      2.462 s/op
     p(99.9990) =      2.462 s/op
     p(99.9999) =      2.462 s/op
    p(100.0000) =      2.462 s/op


# Run complete. Total time: 00:01:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.122 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot_12.0.2_1564605545902.json
{"wallclock_times": [107.13100261900001], "core_cycle_counts": [[113107756164], [56255199364], [90840092180], [59244061450]], "aperf_counts": [[112847180603], [56211906940], [90815280497], [59220488908]], "mperf_counts": [[127240750870], [63482478382], [102209648842], [65190937754]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 22:40:53: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-31 22:40:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 22:40:53: INFO] 87 executions left in scheduler queue
[2019-07-31 22:40:53: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-31 22:40:53: INFO] Estimated completion (next execution): 2019-07-31 22:45:11 (0:04:17 from now)
[2019-07-31 22:40:53: INFO] Reboot in preparation for next execution
[2019-07-31 22:45:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 22:45:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 22:45:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 22:45:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 22:45:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 22:47:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.343 s/op
Iteration   2: 2.547 s/op
Iteration   3: 2.633 s/op
Iteration   4: 2.653 s/op
Iteration   5: 2.747 s/op
Iteration   6: 2.477 s/op
Iteration   7: 2.468 s/op
Iteration   8: 2.468 s/op
Iteration   9: 2.465 s/op
Iteration  10: 2.467 s/op
Iteration  11: 2.469 s/op
Iteration  12: 2.466 s/op
Iteration  13: 2.466 s/op
Iteration  14: 2.467 s/op
Iteration  15: 2.468 s/op
Iteration  16: 2.468 s/op
Iteration  17: 2.470 s/op
Iteration  18: 2.468 s/op
Iteration  19: 2.468 s/op
Iteration  20: 2.470 s/op
Iteration  21: 2.470 s/op
Iteration  22: 2.473 s/op
Iteration  23: 2.469 s/op
Iteration  24: 2.469 s/op
Iteration  25: 2.469 s/op
Iteration  26: 2.468 s/op
Iteration  27: 2.469 s/op
Iteration  28: 2.471 s/op
Iteration  29: 2.471 s/op
Iteration  30: 2.469 s/op
Iteration  31: 2.474 s/op
Iteration  32: 2.472 s/op
Iteration  33: 2.473 s/op
Iteration  34: 2.471 s/op
Iteration  35: 2.470 s/op
Iteration  36: 2.473 s/op
Iteration  37: 2.472 s/op
Iteration  38: 2.471 s/op
Iteration  39: 2.468 s/op
Iteration  40: 2.475 s/op
Iteration  41: 2.471 s/op
Iteration  42: 2.469 s/op
Iteration  43: 2.473 s/op
Iteration  44: 2.470 s/op
Iteration  45: 2.469 s/op
Iteration  46: 2.469 s/op
Iteration  47: 2.473 s/op
Iteration  48: 2.474 s/op
Iteration  49: 2.470 s/op
Iteration  50: 2.467 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.481 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 45 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 1 
    [2.700, 2.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.343 s/op
     p(50.0000) =      2.470 s/op
     p(90.0000) =      2.477 s/op
     p(95.0000) =      2.642 s/op
     p(99.0000) =      2.747 s/op
     p(99.9000) =      2.747 s/op
     p(99.9900) =      2.747 s/op
     p(99.9990) =      2.747 s/op
     p(99.9999) =      2.747 s/op
    p(100.0000) =      2.747 s/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.481 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot_12.0.2_1564605905208.json
{"wallclock_times": [125.02140245700002], "core_cycle_counts": [[93619975198], [59625806571], [116189857998], [137344068969]], "aperf_counts": [[93310291931], [59575852702], [116161188137], [137328636448]], "mperf_counts": [[94076090600], [59649325390], [116300125586], [137440137850]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 22:47:10: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-31 22:47:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 22:47:11: INFO] 86 executions left in scheduler queue
[2019-07-31 22:47:11: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-07-31 22:47:11: INFO] Estimated completion (next execution): 2019-07-31 22:51:46 (0:04:35 from now)
[2019-07-31 22:47:11: INFO] Reboot in preparation for next execution
[2019-07-31 22:51:22: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 22:51:22: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 22:51:22: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 22:51:22: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 22:51:22: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 22:51:22: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-31 23:05:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.069 s/op
Iteration   2: 17.007 s/op
Iteration   3: 17.095 s/op
Iteration   4: 17.384 s/op
Iteration   5: 17.148 s/op
Iteration   6: 17.265 s/op
Iteration   7: 17.322 s/op
Iteration   8: 16.904 s/op
Iteration   9: 16.790 s/op
Iteration  10: 17.345 s/op
Iteration  11: 17.246 s/op
Iteration  12: 17.171 s/op
Iteration  13: 17.219 s/op
Iteration  14: 17.367 s/op
Iteration  15: 17.011 s/op
Iteration  16: 17.028 s/op
Iteration  17: 17.174 s/op
Iteration  18: 17.369 s/op
Iteration  19: 17.448 s/op
Iteration  20: 17.071 s/op
Iteration  21: 17.036 s/op
Iteration  22: 17.401 s/op
Iteration  23: 17.260 s/op
Iteration  24: 17.000 s/op
Iteration  25: 17.506 s/op
Iteration  26: 16.887 s/op
Iteration  27: 17.197 s/op
Iteration  28: 17.305 s/op
Iteration  29: 16.659 s/op
Iteration  30: 16.469 s/op
Iteration  31: 16.624 s/op
Iteration  32: 16.950 s/op
Iteration  33: 16.869 s/op
Iteration  34: 16.541 s/op
Iteration  35: 17.278 s/op
Iteration  36: 17.145 s/op
Iteration  37: 17.384 s/op
Iteration  38: 16.529 s/op
Iteration  39: 16.968 s/op
Iteration  40: 16.197 s/op
Iteration  41: 17.228 s/op
Iteration  42: 17.219 s/op
Iteration  43: 17.252 s/op
Iteration  44: 17.240 s/op
Iteration  45: 17.271 s/op
Iteration  46: 16.691 s/op
Iteration  47: 17.087 s/op
Iteration  48: 17.384 s/op
Iteration  49: 17.307 s/op
Iteration  50: 17.263 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.092 ?(99.9%) 0.141 s/op

  Histogram, s/op:
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 1 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 1 
    [16.500, 16.625) = 3 
    [16.625, 16.750) = 2 
    [16.750, 16.875) = 2 
    [16.875, 17.000) = 5 
    [17.000, 17.125) = 8 
    [17.125, 17.250) = 10 
    [17.250, 17.375) = 12 
    [17.375, 17.500) = 5 
    [17.500, 17.625) = 1 
    [17.625, 17.750) = 0 
    [17.750, 17.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.197 s/op
     p(50.0000) =     17.172 s/op
     p(90.0000) =     17.384 s/op
     p(95.0000) =     17.422 s/op
     p(99.0000) =     17.506 s/op
     p(99.9000) =     17.506 s/op
     p(99.9900) =     17.506 s/op
     p(99.9990) =     17.506 s/op
     p(99.9999) =     17.506 s/op
    p(100.0000) =     17.506 s/op


# Run complete. Total time: 00:14:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.092 ? 0.141   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9_11.0.4_1564606282744.json
{"wallclock_times": [856.380563408], "core_cycle_counts": [[644866931247], [454102388217], [942361788555], [1020637710986]], "aperf_counts": [[642539585867], [453919787346], [942187507979], [1020482040843]], "mperf_counts": [[642547536800], [453919832722], [942187455572], [1020482018576]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 23:05:39: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-07-31 23:05:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 23:05:40: INFO] 85 executions left in scheduler queue
[2019-07-31 23:05:40: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-07-31 23:05:40: INFO] Estimated completion (next execution): 2019-07-31 23:22:26 (0:16:46 from now)
[2019-07-31 23:05:40: INFO] Reboot in preparation for next execution
[2019-07-31 23:09:52: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 23:09:52: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 23:09:52: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 23:09:52: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 23:09:52: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 23:09:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-31 23:24:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.980 s/op
Iteration   2: 17.119 s/op
Iteration   3: 16.469 s/op
Iteration   4: 17.541 s/op
Iteration   5: 17.524 s/op
Iteration   6: 17.400 s/op
Iteration   7: 17.561 s/op
Iteration   8: 17.319 s/op
Iteration   9: 17.425 s/op
Iteration  10: 17.318 s/op
Iteration  11: 17.218 s/op
Iteration  12: 17.350 s/op
Iteration  13: 17.532 s/op
Iteration  14: 16.407 s/op
Iteration  15: 17.506 s/op
Iteration  16: 17.624 s/op
Iteration  17: 17.354 s/op
Iteration  18: 17.170 s/op
Iteration  19: 16.322 s/op
Iteration  20: 17.028 s/op
Iteration  21: 17.111 s/op
Iteration  22: 17.259 s/op
Iteration  23: 17.076 s/op
Iteration  24: 16.269 s/op
Iteration  25: 16.661 s/op
Iteration  26: 16.488 s/op
Iteration  27: 17.217 s/op
Iteration  28: 17.251 s/op
Iteration  29: 16.789 s/op
Iteration  30: 16.169 s/op
Iteration  31: 17.279 s/op
Iteration  32: 16.951 s/op
Iteration  33: 17.303 s/op
Iteration  34: 16.489 s/op
Iteration  35: 16.871 s/op
Iteration  36: 17.201 s/op
Iteration  37: 17.447 s/op
Iteration  38: 17.220 s/op
Iteration  39: 17.080 s/op
Iteration  40: 17.106 s/op
Iteration  41: 17.218 s/op
Iteration  42: 16.623 s/op
Iteration  43: 17.460 s/op
Iteration  44: 16.840 s/op
Iteration  45: 17.320 s/op
Iteration  46: 17.248 s/op
Iteration  47: 16.108 s/op
Iteration  48: 17.073 s/op
Iteration  49: 16.992 s/op
Iteration  50: 16.982 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.065 ?(99.9%) 0.194 s/op

  Histogram, s/op:
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 1 
    [16.250, 16.375) = 2 
    [16.375, 16.500) = 4 
    [16.500, 16.625) = 1 
    [16.625, 16.750) = 1 
    [16.750, 16.875) = 3 
    [16.875, 17.000) = 4 
    [17.000, 17.125) = 7 
    [17.125, 17.250) = 7 
    [17.250, 17.375) = 9 
    [17.375, 17.500) = 4 
    [17.500, 17.625) = 6 
    [17.625, 17.750) = 0 
    [17.750, 17.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.108 s/op
     p(50.0000) =     17.185 s/op
     p(90.0000) =     17.522 s/op
     p(95.0000) =     17.550 s/op
     p(99.0000) =     17.624 s/op
     p(99.9000) =     17.624 s/op
     p(99.9900) =     17.624 s/op
     p(99.9990) =     17.624 s/op
     p(99.9999) =     17.624 s/op
    p(100.0000) =     17.624 s/op


# Run complete. Total time: 00:14:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.065 ? 0.194   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_openj9_12.0.1_1564607392710.json
{"wallclock_times": [855.046735122], "core_cycle_counts": [[787091938675], [422244444884], [792569575255], [1054148433823]], "aperf_counts": [[784915919168], [422047062225], [792399365037], [1053930421415]], "mperf_counts": [[784921666868], [422047017138], [792399332178], [1053930531486]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 23:24:07: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-07-31 23:24:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 23:24:08: INFO] 84 executions left in scheduler queue
[2019-07-31 23:24:08: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-07-31 23:24:08: INFO] Estimated completion (next execution): 2019-07-31 23:40:54 (0:16:45 from now)
[2019-07-31 23:24:08: INFO] Reboot in preparation for next execution
[2019-07-31 23:28:19: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-31 23:41:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.912 s/op
Iteration   2: 15.994 s/op
Iteration   3: 16.360 s/op
Iteration   4: 15.704 s/op
Iteration   5: 15.499 s/op
Iteration   6: 16.220 s/op
Iteration   7: 16.288 s/op
Iteration   8: 16.107 s/op
Iteration   9: 16.307 s/op
Iteration  10: 16.199 s/op
Iteration  11: 15.606 s/op
Iteration  12: 15.505 s/op
Iteration  13: 16.526 s/op
Iteration  14: 16.458 s/op
Iteration  15: 16.341 s/op
Iteration  16: 16.410 s/op
Iteration  17: 16.490 s/op
Iteration  18: 16.650 s/op
Iteration  19: 16.505 s/op
Iteration  20: 16.454 s/op
Iteration  21: 16.480 s/op
Iteration  22: 16.456 s/op
Iteration  23: 16.493 s/op
Iteration  24: 16.298 s/op
Iteration  25: 16.621 s/op
Iteration  26: 16.268 s/op
Iteration  27: 16.415 s/op
Iteration  28: 16.449 s/op
Iteration  29: 16.469 s/op
Iteration  30: 16.376 s/op
Iteration  31: 16.497 s/op
Iteration  32: 16.177 s/op
Iteration  33: 16.372 s/op
Iteration  34: 16.292 s/op
Iteration  35: 16.247 s/op
Iteration  36: 16.407 s/op
Iteration  37: 16.638 s/op
Iteration  38: 15.905 s/op
Iteration  39: 16.476 s/op
Iteration  40: 16.334 s/op
Iteration  41: 16.560 s/op
Iteration  42: 16.247 s/op
Iteration  43: 16.424 s/op
Iteration  44: 16.528 s/op
Iteration  45: 16.528 s/op
Iteration  46: 16.477 s/op
Iteration  47: 16.442 s/op
Iteration  48: 16.576 s/op
Iteration  49: 16.616 s/op
Iteration  50: 16.464 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.321 ?(99.9%) 0.138 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 1 
    [15.500, 15.625) = 2 
    [15.625, 15.750) = 1 
    [15.750, 15.875) = 0 
    [15.875, 16.000) = 3 
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 5 
    [16.250, 16.375) = 9 
    [16.375, 16.500) = 18 
    [16.500, 16.625) = 8 
    [16.625, 16.750) = 2 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.499 s/op
     p(50.0000) =     16.413 s/op
     p(90.0000) =     16.574 s/op
     p(95.0000) =     16.629 s/op
     p(99.0000) =     16.650 s/op
     p(99.9000) =     16.650 s/op
     p(99.9900) =     16.650 s/op
     p(99.9990) =     16.650 s/op
     p(99.9999) =     16.650 s/op
    p(100.0000) =     16.650 s/op


# Run complete. Total time: 00:13:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.321 ? 0.138   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9-8u222-b10_1564608499478.json
{"wallclock_times": [817.4221006729999], "core_cycle_counts": [[487549243218], [463802942568], [1063594650418], [902318348150]], "aperf_counts": [[485156350624], [463625353485], [1063421994069], [902186908859]], "mperf_counts": [[485156971540], [463625317100], [1063422131956], [902186897324]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-31 23:41:56: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-07-31 23:41:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 23:41:57: INFO] 83 executions left in scheduler queue
[2019-07-31 23:41:57: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-07-31 23:41:57: INFO] Estimated completion (next execution): 2019-07-31 23:58:05 (0:16:07 from now)
[2019-07-31 23:41:57: INFO] Reboot in preparation for next execution
[2019-07-31 23:46:09: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 23:46:09: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 23:46:09: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 23:46:09: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 23:46:09: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-31 23:51:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.761 s/op
Iteration   2: 6.850 s/op
Iteration   3: 6.686 s/op
Iteration   4: 6.680 s/op
Iteration   5: 6.644 s/op
Iteration   6: 6.645 s/op
Iteration   7: 6.639 s/op
Iteration   8: 6.646 s/op
Iteration   9: 6.641 s/op
Iteration  10: 6.646 s/op
Iteration  11: 6.643 s/op
Iteration  12: 6.638 s/op
Iteration  13: 6.634 s/op
Iteration  14: 6.634 s/op
Iteration  15: 6.638 s/op
Iteration  16: 6.639 s/op
Iteration  17: 6.640 s/op
Iteration  18: 6.637 s/op
Iteration  19: 6.637 s/op
Iteration  20: 6.641 s/op
Iteration  21: 6.642 s/op
Iteration  22: 6.642 s/op
Iteration  23: 6.642 s/op
Iteration  24: 6.638 s/op
Iteration  25: 6.638 s/op
Iteration  26: 6.636 s/op
Iteration  27: 6.639 s/op
Iteration  28: 6.633 s/op
Iteration  29: 6.637 s/op
Iteration  30: 6.638 s/op
Iteration  31: 6.640 s/op
Iteration  32: 6.639 s/op
Iteration  33: 6.640 s/op
Iteration  34: 6.640 s/op
Iteration  35: 6.637 s/op
Iteration  36: 6.641 s/op
Iteration  37: 6.641 s/op
Iteration  38: 6.633 s/op
Iteration  39: 6.637 s/op
Iteration  40: 6.639 s/op
Iteration  41: 6.640 s/op
Iteration  42: 6.639 s/op
Iteration  43: 6.639 s/op
Iteration  44: 6.640 s/op
Iteration  45: 6.635 s/op
Iteration  46: 6.638 s/op
Iteration  47: 6.633 s/op
Iteration  48: 6.638 s/op
Iteration  49: 6.639 s/op
Iteration  50: 6.643 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.648 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [6.600, 6.625) = 0 
    [6.625, 6.650) = 46 
    [6.650, 6.675) = 0 
    [6.675, 6.700) = 2 
    [6.700, 6.725) = 0 
    [6.725, 6.750) = 0 
    [6.750, 6.775) = 1 
    [6.775, 6.800) = 0 
    [6.800, 6.825) = 0 
    [6.825, 6.850) = 0 
    [6.850, 6.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.633 s/op
     p(50.0000) =      6.639 s/op
     p(90.0000) =      6.646 s/op
     p(95.0000) =      6.720 s/op
     p(99.0000) =      6.850 s/op
     p(99.9000) =      6.850 s/op
     p(99.9900) =      6.850 s/op
     p(99.9990) =      6.850 s/op
     p(99.9999) =      6.850 s/op
    p(100.0000) =      6.850 s/op


# Run complete. Total time: 00:05:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.648 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot_11.0.4_1564609569395.json
{"wallclock_times": [333.36488998899995], "core_cycle_counts": [[108529346900], [386283843610], [448713961717], [134303097915]], "aperf_counts": [[107574018433], [386192085518], [448641746591], [134230154403]], "mperf_counts": [[107887545108], [386362145106], [448728391300], [134307857720]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-31 23:51:42: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-07-31 23:51:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-31 23:51:43: INFO] 82 executions left in scheduler queue
[2019-07-31 23:51:43: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-07-31 23:51:43: INFO] Estimated completion (next execution): 2019-07-31 23:59:47 (0:08:03 from now)
[2019-07-31 23:51:43: INFO] Reboot in preparation for next execution
[2019-07-31 23:55:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-31 23:55:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-31 23:55:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-31 23:55:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-31 23:55:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 00:01:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.700 s/op
Iteration   2: 6.897 s/op
Iteration   3: 6.466 s/op
Iteration   4: 6.420 s/op
Iteration   5: 6.421 s/op
Iteration   6: 6.419 s/op
Iteration   7: 6.416 s/op
Iteration   8: 6.417 s/op
Iteration   9: 6.416 s/op
Iteration  10: 6.434 s/op
Iteration  11: 6.421 s/op
Iteration  12: 6.422 s/op
Iteration  13: 6.417 s/op
Iteration  14: 6.416 s/op
Iteration  15: 6.422 s/op
Iteration  16: 6.418 s/op
Iteration  17: 6.412 s/op
Iteration  18: 6.429 s/op
Iteration  19: 6.416 s/op
Iteration  20: 6.416 s/op
Iteration  21: 6.418 s/op
Iteration  22: 6.417 s/op
Iteration  23: 6.411 s/op
Iteration  24: 6.410 s/op
Iteration  25: 6.415 s/op
Iteration  26: 6.414 s/op
Iteration  27: 6.416 s/op
Iteration  28: 6.413 s/op
Iteration  29: 6.417 s/op
Iteration  30: 6.409 s/op
Iteration  31: 6.413 s/op
Iteration  32: 6.407 s/op
Iteration  33: 6.414 s/op
Iteration  34: 6.417 s/op
Iteration  35: 6.427 s/op
Iteration  36: 6.424 s/op
Iteration  37: 6.424 s/op
Iteration  38: 6.424 s/op
Iteration  39: 6.423 s/op
Iteration  40: 6.424 s/op
Iteration  41: 6.428 s/op
Iteration  42: 6.429 s/op
Iteration  43: 6.429 s/op
Iteration  44: 6.415 s/op
Iteration  45: 6.416 s/op
Iteration  46: 6.412 s/op
Iteration  47: 6.410 s/op
Iteration  48: 6.416 s/op
Iteration  49: 6.414 s/op
Iteration  50: 6.416 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.434 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [6.400, 6.450) = 47 
    [6.450, 6.500) = 1 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.407 s/op
     p(50.0000) =      6.417 s/op
     p(90.0000) =      6.429 s/op
     p(95.0000) =      6.572 s/op
     p(99.0000) =      6.897 s/op
     p(99.9000) =      6.897 s/op
     p(99.9900) =      6.897 s/op
     p(99.9990) =      6.897 s/op
     p(99.9999) =      6.897 s/op
    p(100.0000) =      6.897 s/op


# Run complete. Total time: 00:05:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.434 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot_11.0.4_1564610155468.json
{"wallclock_times": [322.719697398], "core_cycle_counts": [[284215814876], [57609491097], [573385828520], [126447688047]], "aperf_counts": [[283417421904], [57511108934], [573344606602], [126399229717]], "mperf_counts": [[284062680796], [57583085342], [573625979926], [126528212136]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 00:01:18: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-08-01 00:01:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 00:01:19: INFO] 81 executions left in scheduler queue
[2019-08-01 00:01:19: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-08-01 00:01:19: INFO] Estimated completion (next execution): 2019-08-01 00:09:12 (0:07:52 from now)
[2019-08-01 00:01:19: INFO] Reboot in preparation for next execution
[2019-08-01 00:05:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 00:17:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.119 s/op
Iteration   2: 14.577 s/op
Iteration   3: 14.522 s/op
Iteration   4: 14.572 s/op
Iteration   5: 14.407 s/op
Iteration   6: 15.405 s/op
Iteration   7: 14.204 s/op
Iteration   8: 14.208 s/op
Iteration   9: 14.462 s/op
Iteration  10: 13.998 s/op
Iteration  11: 14.652 s/op
Iteration  12: 15.413 s/op
Iteration  13: 14.609 s/op
Iteration  14: 15.357 s/op
Iteration  15: 14.215 s/op
Iteration  16: 14.310 s/op
Iteration  17: 15.212 s/op
Iteration  18: 15.409 s/op
Iteration  19: 14.585 s/op
Iteration  20: 15.053 s/op
Iteration  21: 14.528 s/op
Iteration  22: 14.505 s/op
Iteration  23: 14.224 s/op
Iteration  24: 15.379 s/op
Iteration  25: 14.666 s/op
Iteration  26: 14.525 s/op
Iteration  27: 14.598 s/op
Iteration  28: 14.733 s/op
Iteration  29: 14.521 s/op
Iteration  30: 15.207 s/op
Iteration  31: 14.517 s/op
Iteration  32: 14.273 s/op
Iteration  33: 14.784 s/op
Iteration  34: 15.336 s/op
Iteration  35: 14.472 s/op
Iteration  36: 14.895 s/op
Iteration  37: 14.526 s/op
Iteration  38: 14.486 s/op
Iteration  39: 14.233 s/op
Iteration  40: 14.315 s/op
Iteration  41: 14.302 s/op
Iteration  42: 15.157 s/op
Iteration  43: 14.032 s/op
Iteration  44: 14.534 s/op
Iteration  45: 14.295 s/op
Iteration  46: 14.866 s/op
Iteration  47: 14.472 s/op
Iteration  48: 14.097 s/op
Iteration  49: 14.330 s/op
Iteration  50: 14.209 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.626 ?(99.9%) 0.199 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 1 
    [14.000, 14.250) = 8 
    [14.250, 14.500) = 11 
    [14.500, 14.750) = 16 
    [14.750, 15.000) = 3 
    [15.000, 15.250) = 5 
    [15.250, 15.500) = 6 
    [15.500, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.998 s/op
     p(50.0000) =     14.526 s/op
     p(90.0000) =     15.355 s/op
     p(95.0000) =     15.407 s/op
     p(99.0000) =     15.413 s/op
     p(99.9000) =     15.413 s/op
     p(99.9900) =     15.413 s/op
     p(99.9990) =     15.413 s/op
     p(99.9999) =     15.413 s/op
    p(100.0000) =     15.413 s/op


# Run complete. Total time: 00:12:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.626 ? 0.199   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_openj9-8u222-b10_1564610731050.json
{"wallclock_times": [732.668167968], "core_cycle_counts": [[755481771027], [554056413016], [767430516375], [572200971621]], "aperf_counts": [[753705737468], [553894769374], [767238679555], [571998616736]], "mperf_counts": [[753706287510], [553895541010], [767239259200], [571998599320]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 00:17:43: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-08-01 00:17:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 00:17:44: INFO] 80 executions left in scheduler queue
[2019-08-01 00:17:44: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-08-01 00:17:44: INFO] Estimated completion (next execution): 2019-08-01 00:32:27 (0:14:42 from now)
[2019-08-01 00:17:44: INFO] Reboot in preparation for next execution
[2019-08-01 00:22:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 00:35:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.390 s/op
Iteration   2: 15.594 s/op
Iteration   3: 15.010 s/op
Iteration   4: 15.029 s/op
Iteration   5: 15.025 s/op
Iteration   6: 14.836 s/op
Iteration   7: 16.296 s/op
Iteration   8: 16.242 s/op
Iteration   9: 16.334 s/op
Iteration  10: 16.180 s/op
Iteration  11: 16.111 s/op
Iteration  12: 16.114 s/op
Iteration  13: 16.138 s/op
Iteration  14: 16.128 s/op
Iteration  15: 16.097 s/op
Iteration  16: 16.193 s/op
Iteration  17: 16.189 s/op
Iteration  18: 16.072 s/op
Iteration  19: 16.117 s/op
Iteration  20: 16.121 s/op
Iteration  21: 16.152 s/op
Iteration  22: 16.133 s/op
Iteration  23: 16.162 s/op
Iteration  24: 16.175 s/op
Iteration  25: 16.140 s/op
Iteration  26: 16.101 s/op
Iteration  27: 16.184 s/op
Iteration  28: 16.108 s/op
Iteration  29: 16.135 s/op
Iteration  30: 16.094 s/op
Iteration  31: 16.136 s/op
Iteration  32: 16.102 s/op
Iteration  33: 16.168 s/op
Iteration  34: 16.150 s/op
Iteration  35: 16.147 s/op
Iteration  36: 16.081 s/op
Iteration  37: 16.063 s/op
Iteration  38: 16.127 s/op
Iteration  39: 16.108 s/op
Iteration  40: 16.077 s/op
Iteration  41: 16.110 s/op
Iteration  42: 16.119 s/op
Iteration  43: 16.131 s/op
Iteration  44: 16.122 s/op
Iteration  45: 16.127 s/op
Iteration  46: 16.146 s/op
Iteration  47: 16.114 s/op
Iteration  48: 16.109 s/op
Iteration  49: 16.157 s/op
Iteration  50: 16.158 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     16.041 ?(99.9%) 0.165 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 1 
    [15.000, 15.250) = 3 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 1 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 42 
    [16.250, 16.500) = 3 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.836 s/op
     p(50.0000) =     16.127 s/op
     p(90.0000) =     16.192 s/op
     p(95.0000) =     16.313 s/op
     p(99.0000) =     16.390 s/op
     p(99.9000) =     16.390 s/op
     p(99.9900) =     16.390 s/op
     p(99.9990) =     16.390 s/op
     p(99.9999) =     16.390 s/op
    p(100.0000) =     16.390 s/op


# Run complete. Total time: 00:13:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  16.041 ? 0.165   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_openj9-8u222-b10_1564611729552.json
{"wallclock_times": [803.1802418450001], "core_cycle_counts": [[1011820622446], [379157553204], [428626644673], [802084394057]], "aperf_counts": [[1010100457700], [378901916474], [428417854485], [801931774128]], "mperf_counts": [[1010103671622], [378901885226], [428418062954], [801931789666]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 00:35:32: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-08-01 00:35:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 00:35:33: INFO] 79 executions left in scheduler queue
[2019-08-01 00:35:33: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-08-01 00:35:33: INFO] Estimated completion (next execution): 2019-08-01 00:51:27 (0:15:53 from now)
[2019-08-01 00:35:33: INFO] Reboot in preparation for next execution
[2019-08-01 00:39:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 00:39:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 00:39:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 00:39:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 00:39:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 00:45:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.187 s/op
Iteration   2: 6.942 s/op
Iteration   3: 6.558 s/op
Iteration   4: 6.557 s/op
Iteration   5: 6.505 s/op
Iteration   6: 6.501 s/op
Iteration   7: 6.509 s/op
Iteration   8: 6.505 s/op
Iteration   9: 6.506 s/op
Iteration  10: 6.505 s/op
Iteration  11: 6.515 s/op
Iteration  12: 6.502 s/op
Iteration  13: 6.508 s/op
Iteration  14: 6.502 s/op
Iteration  15: 6.511 s/op
Iteration  16: 6.502 s/op
Iteration  17: 6.505 s/op
Iteration  18: 6.503 s/op
Iteration  19: 6.503 s/op
Iteration  20: 6.512 s/op
Iteration  21: 6.511 s/op
Iteration  22: 6.503 s/op
Iteration  23: 6.511 s/op
Iteration  24: 6.507 s/op
Iteration  25: 6.505 s/op
Iteration  26: 6.502 s/op
Iteration  27: 6.506 s/op
Iteration  28: 6.506 s/op
Iteration  29: 6.509 s/op
Iteration  30: 6.514 s/op
Iteration  31: 6.504 s/op
Iteration  32: 6.501 s/op
Iteration  33: 6.508 s/op
Iteration  34: 6.503 s/op
Iteration  35: 6.514 s/op
Iteration  36: 6.508 s/op
Iteration  37: 6.502 s/op
Iteration  38: 6.502 s/op
Iteration  39: 6.503 s/op
Iteration  40: 6.501 s/op
Iteration  41: 6.502 s/op
Iteration  42: 6.511 s/op
Iteration  43: 6.510 s/op
Iteration  44: 6.511 s/op
Iteration  45: 6.506 s/op
Iteration  46: 6.511 s/op
Iteration  47: 6.518 s/op
Iteration  48: 6.512 s/op
Iteration  49: 6.506 s/op
Iteration  50: 6.508 s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.531 ?(99.9%) 0.056 s/op

  Histogram, s/op:
    [6.500, 6.550) = 46 
    [6.550, 6.600) = 2 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.501 s/op
     p(50.0000) =      6.506 s/op
     p(90.0000) =      6.518 s/op
     p(95.0000) =      6.731 s/op
     p(99.0000) =      7.187 s/op
     p(99.9000) =      7.187 s/op
     p(99.9900) =      7.187 s/op
     p(99.9990) =      7.187 s/op
     p(99.9999) =      7.187 s/op
    p(100.0000) =      7.187 s/op


# Run complete. Total time: 00:05:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.531 ? 0.056   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_hotspot_12.0.2_1564612782842.json
{"wallclock_times": [327.51092128100004], "core_cycle_counts": [[212607266665], [285231665242], [347161735155], [211667136488]], "aperf_counts": [[211737960998], [285158063607], [347099467249], [211619086530]], "mperf_counts": [[212116108644], [285438731012], [347590025584], [211708983550]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 00:45:10: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-08-01 00:45:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 00:45:11: INFO] 78 executions left in scheduler queue
[2019-08-01 00:45:11: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-08-01 00:45:11: INFO] Estimated completion (next execution): 2019-08-01 00:53:09 (0:07:57 from now)
[2019-08-01 00:45:11: INFO] Reboot in preparation for next execution
[2019-08-01 00:49:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 00:49:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 00:49:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 00:49:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 00:49:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 00:49:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 01:03:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.602 s/op
Iteration   2: 16.967 s/op
Iteration   3: 16.937 s/op
Iteration   4: 16.156 s/op
Iteration   5: 16.150 s/op
Iteration   6: 16.780 s/op
Iteration   7: 15.588 s/op
Iteration   8: 16.862 s/op
Iteration   9: 16.174 s/op
Iteration  10: 16.643 s/op
Iteration  11: 16.525 s/op
Iteration  12: 16.471 s/op
Iteration  13: 16.887 s/op
Iteration  14: 16.726 s/op
Iteration  15: 16.599 s/op
Iteration  16: 16.514 s/op
Iteration  17: 16.311 s/op
Iteration  18: 16.727 s/op
Iteration  19: 16.367 s/op
Iteration  20: 15.883 s/op
Iteration  21: 16.138 s/op
Iteration  22: 16.854 s/op
Iteration  23: 15.999 s/op
Iteration  24: 16.528 s/op
Iteration  25: 15.773 s/op
Iteration  26: 16.672 s/op
Iteration  27: 16.590 s/op
Iteration  28: 16.026 s/op
Iteration  29: 16.554 s/op
Iteration  30: 16.265 s/op
Iteration  31: 16.358 s/op
Iteration  32: 16.529 s/op
Iteration  33: 15.900 s/op
Iteration  34: 16.322 s/op
Iteration  35: 16.281 s/op
Iteration  36: 16.578 s/op
Iteration  37: 16.442 s/op
Iteration  38: 16.357 s/op
Iteration  39: 16.401 s/op
Iteration  40: 16.413 s/op
Iteration  41: 16.451 s/op
Iteration  42: 16.524 s/op
Iteration  43: 16.385 s/op
Iteration  44: 16.403 s/op
Iteration  45: 16.367 s/op
Iteration  46: 16.376 s/op
Iteration  47: 15.845 s/op
Iteration  48: 16.300 s/op
Iteration  49: 16.239 s/op
Iteration  50: 16.443 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.404 ?(99.9%) 0.150 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 1 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 2 
    [15.875, 16.000) = 3 
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 5 
    [16.250, 16.375) = 9 
    [16.375, 16.500) = 9 
    [16.500, 16.625) = 10 
    [16.625, 16.750) = 4 
    [16.750, 16.875) = 3 

  Percentiles, s/op:
      p(0.0000) =     15.588 s/op
     p(50.0000) =     16.408 s/op
     p(90.0000) =     16.846 s/op
     p(95.0000) =     16.909 s/op
     p(99.0000) =     16.967 s/op
     p(99.9000) =     16.967 s/op
     p(99.9900) =     16.967 s/op
     p(99.9990) =     16.967 s/op
     p(99.9999) =     16.967 s/op
    p(100.0000) =     16.967 s/op


# Run complete. Total time: 00:13:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.404 ? 0.150   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9_11.0.4_1564613360864.json
{"wallclock_times": [821.881707818], "core_cycle_counts": [[509091884142], [770148827312], [809916189439], [869898137075]], "aperf_counts": [[506742408716], [770014042876], [809744926377], [869747414615]], "mperf_counts": [[506745660340], [770015844484], [809746634284], [869747383320]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 01:03:02: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-08-01 01:03:03: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 01:03:03: INFO] 77 executions left in scheduler queue
[2019-08-01 01:03:03: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-08-01 01:03:03: INFO] Estimated completion (next execution): 2019-08-01 01:19:16 (0:16:12 from now)
[2019-08-01 01:03:03: INFO] Reboot in preparation for next execution
[2019-08-01 01:07:15: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 01:16:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.198 s/op
Iteration   2: 11.514 s/op
Iteration   3: 11.234 s/op
Iteration   4: 11.360 s/op
Iteration   5: 11.227 s/op
Iteration   6: 11.112 s/op
Iteration   7: 11.180 s/op
Iteration   8: 11.182 s/op
Iteration   9: 11.109 s/op
Iteration  10: 11.134 s/op
Iteration  11: 11.138 s/op
Iteration  12: 11.134 s/op
Iteration  13: 11.109 s/op
Iteration  14: 11.119 s/op
Iteration  15: 11.108 s/op
Iteration  16: 11.110 s/op
Iteration  17: 11.117 s/op
Iteration  18: 11.104 s/op
Iteration  19: 11.135 s/op
Iteration  20: 11.086 s/op
Iteration  21: 11.119 s/op
Iteration  22: 11.104 s/op
Iteration  23: 11.098 s/op
Iteration  24: 11.122 s/op
Iteration  25: 11.164 s/op
Iteration  26: 11.099 s/op
Iteration  27: 11.117 s/op
Iteration  28: 11.121 s/op
Iteration  29: 11.120 s/op
Iteration  30: 11.119 s/op
Iteration  31: 11.079 s/op
Iteration  32: 11.111 s/op
Iteration  33: 11.116 s/op
Iteration  34: 11.141 s/op
Iteration  35: 11.145 s/op
Iteration  36: 11.118 s/op
Iteration  37: 11.115 s/op
Iteration  38: 11.116 s/op
Iteration  39: 11.140 s/op
Iteration  40: 11.096 s/op
Iteration  41: 11.114 s/op
Iteration  42: 11.158 s/op
Iteration  43: 11.110 s/op
Iteration  44: 11.100 s/op
Iteration  45: 11.084 s/op
Iteration  46: 11.111 s/op
Iteration  47: 11.176 s/op
Iteration  48: 11.099 s/op
Iteration  49: 11.128 s/op
Iteration  50: 11.087 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     11.159 ?(99.9%) 0.082 s/op

  Histogram, s/op:
    [11.000, 11.125) = 32 
    [11.125, 11.250) = 15 
    [11.250, 11.375) = 1 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 1 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 
    [11.875, 12.000) = 0 
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 1 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.079 s/op
     p(50.0000) =     11.118 s/op
     p(90.0000) =     11.222 s/op
     p(95.0000) =     11.429 s/op
     p(99.0000) =     12.198 s/op
     p(99.9000) =     12.198 s/op
     p(99.9900) =     12.198 s/op
     p(99.9990) =     12.198 s/op
     p(99.9999) =     12.198 s/op
    p(100.0000) =     12.198 s/op


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  11.159 ? 0.082   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_openj9-8u222-b10_1564614435600.json
{"wallclock_times": [559.099860906], "core_cycle_counts": [[479490378724], [509630187033], [470941593969], [363192375785]], "aperf_counts": [[477975174103], [509445341020], [470825749411], [363128535669]], "mperf_counts": [[477977172778], [509446096178], [470825720324], [363128523042]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 01:16:34: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-08-01 01:16:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 01:16:35: INFO] 76 executions left in scheduler queue
[2019-08-01 01:16:35: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-08-01 01:16:35: INFO] Estimated completion (next execution): 2019-08-01 01:28:24 (0:11:49 from now)
[2019-08-01 01:16:35: INFO] Reboot in preparation for next execution
[2019-08-01 01:27:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.592 s/op
Iteration   2: 8.285 s/op
Iteration   3: 7.993 s/op
Iteration   4: 7.985 s/op
Iteration   5: 7.991 s/op
Iteration   6: 7.995 s/op
Iteration   7: 7.983 s/op
Iteration   8: 7.990 s/op
Iteration   9: 7.991 s/op
Iteration  10: 7.986 s/op
Iteration  11: 7.985 s/op
Iteration  12: 7.988 s/op
Iteration  13: 7.987 s/op
Iteration  14: 7.990 s/op
Iteration  15: 7.989 s/op
Iteration  16: 7.993 s/op
Iteration  17: 7.984 s/op
Iteration  18: 7.992 s/op
Iteration  19: 7.981 s/op
Iteration  20: 7.981 s/op
Iteration  21: 7.986 s/op
Iteration  22: 7.987 s/op
Iteration  23: 7.985 s/op
Iteration  24: 7.991 s/op
Iteration  25: 7.986 s/op
Iteration  26: 7.988 s/op
Iteration  27: 7.986 s/op
Iteration  28: 7.980 s/op
Iteration  29: 7.986 s/op
Iteration  30: 7.978 s/op
Iteration  31: 7.983 s/op
Iteration  32: 7.984 s/op
Iteration  33: 7.983 s/op
Iteration  34: 7.987 s/op
Iteration  35: 7.980 s/op
Iteration  36: 7.990 s/op
Iteration  37: 7.994 s/op
Iteration  38: 7.986 s/op
Iteration  39: 7.981 s/op
Iteration  40: 7.982 s/op
Iteration  41: 7.981 s/op
Iteration  42: 7.983 s/op
Iteration  43: 7.981 s/op
Iteration  44: 7.979 s/op
Iteration  45: 7.990 s/op
Iteration  46: 7.988 s/op
Iteration  47: 7.983 s/op
Iteration  48: 7.988 s/op
Iteration  49: 7.988 s/op
Iteration  50: 7.994 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      8.004 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [7.900, 7.950) = 0 
    [7.950, 8.000) = 48 
    [8.000, 8.050) = 0 
    [8.050, 8.100) = 0 
    [8.100, 8.150) = 0 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 1 
    [8.300, 8.350) = 0 
    [8.350, 8.400) = 0 
    [8.400, 8.450) = 0 
    [8.450, 8.500) = 0 
    [8.500, 8.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.978 s/op
     p(50.0000) =      7.986 s/op
     p(90.0000) =      7.994 s/op
     p(95.0000) =      8.126 s/op
     p(99.0000) =      8.592 s/op
     p(99.9000) =      8.592 s/op
     p(99.9900) =      8.592 s/op
     p(99.9990) =      8.592 s/op
     p(99.9999) =      8.592 s/op
    p(100.0000) =      8.592 s/op


# Run complete. Total time: 00:06:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  8.004 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_hotspot-8u222-b10_1564615244902.json
{"wallclock_times": [401.036952757], "core_cycle_counts": [[359082929190], [358391156143], [307006021533], [266376548401]], "aperf_counts": [[358174214905], [358300125412], [306965078076], [266334776102]], "mperf_counts": [[358183567324], [358300186820], [306965135536], [266339118494]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 01:27:25: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-08-01 01:27:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 01:27:26: INFO] 75 executions left in scheduler queue
[2019-08-01 01:27:26: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-01 01:27:26: INFO] Estimated completion (next execution): 2019-08-01 01:36:38 (0:09:11 from now)
[2019-08-01 01:27:26: INFO] Reboot in preparation for next execution
[2019-08-01 01:33:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.099 s/op
Iteration   2: 1.669 s/op
Iteration   3: 1.977 s/op
Iteration   4: 2.040 s/op
Iteration   5: 1.973 s/op
Iteration   6: 1.967 s/op
Iteration   7: 1.965 s/op
Iteration   8: 1.966 s/op
Iteration   9: 1.975 s/op
Iteration  10: 1.971 s/op
Iteration  11: 1.971 s/op
Iteration  12: 1.972 s/op
Iteration  13: 1.967 s/op
Iteration  14: 1.965 s/op
Iteration  15: 1.963 s/op
Iteration  16: 1.966 s/op
Iteration  17: 1.984 s/op
Iteration  18: 1.963 s/op
Iteration  19: 1.961 s/op
Iteration  20: 1.969 s/op
Iteration  21: 1.964 s/op
Iteration  22: 1.961 s/op
Iteration  23: 1.969 s/op
Iteration  24: 1.969 s/op
Iteration  25: 1.965 s/op
Iteration  26: 1.965 s/op
Iteration  27: 1.963 s/op
Iteration  28: 1.964 s/op
Iteration  29: 1.970 s/op
Iteration  30: 1.964 s/op
Iteration  31: 1.968 s/op
Iteration  32: 1.967 s/op
Iteration  33: 1.965 s/op
Iteration  34: 1.972 s/op
Iteration  35: 1.971 s/op
Iteration  36: 1.967 s/op
Iteration  37: 1.970 s/op
Iteration  38: 1.967 s/op
Iteration  39: 1.967 s/op
Iteration  40: 1.968 s/op
Iteration  41: 1.964 s/op
Iteration  42: 1.967 s/op
Iteration  43: 1.968 s/op
Iteration  44: 1.966 s/op
Iteration  45: 1.968 s/op
Iteration  46: 1.971 s/op
Iteration  47: 1.973 s/op
Iteration  48: 1.968 s/op
Iteration  49: 1.967 s/op
Iteration  50: 1.966 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.966 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 47 
    [2.000, 2.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.669 s/op
     p(50.0000) =      1.967 s/op
     p(90.0000) =      1.975 s/op
     p(95.0000) =      2.009 s/op
     p(99.0000) =      2.099 s/op
     p(99.9000) =      2.099 s/op
     p(99.9900) =      2.099 s/op
     p(99.9990) =      2.099 s/op
     p(99.9999) =      2.099 s/op
    p(100.0000) =      2.099 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.966 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot-8u222-b10_1564615895538.json
{"wallclock_times": [99.15620912099999], "core_cycle_counts": [[122830547699], [55926594165], [77820305411], [76040025082]], "aperf_counts": [[122573691928], [55877927063], [77798091236], [76020426575]], "mperf_counts": [[122578194114], [55879233190], [77801109022], [76027490192]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 01:33:14: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-01 01:33:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 01:33:15: INFO] 74 executions left in scheduler queue
[2019-08-01 01:33:15: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-01 01:33:15: INFO] Estimated completion (next execution): 2019-08-01 01:37:25 (0:04:09 from now)
[2019-08-01 01:33:15: INFO] Reboot in preparation for next execution
[2019-08-01 01:38:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.229 s/op
Iteration   2: 1.405 s/op
Iteration   3: 1.774 s/op
Iteration   4: 1.637 s/op
Iteration   5: 1.678 s/op
Iteration   6: 1.686 s/op
Iteration   7: 1.680 s/op
Iteration   8: 1.681 s/op
Iteration   9: 1.673 s/op
Iteration  10: 1.676 s/op
Iteration  11: 1.675 s/op
Iteration  12: 1.675 s/op
Iteration  13: 1.677 s/op
Iteration  14: 1.676 s/op
Iteration  15: 1.678 s/op
Iteration  16: 1.680 s/op
Iteration  17: 1.681 s/op
Iteration  18: 1.677 s/op
Iteration  19: 1.679 s/op
Iteration  20: 1.682 s/op
Iteration  21: 1.681 s/op
Iteration  22: 1.679 s/op
Iteration  23: 1.678 s/op
Iteration  24: 1.677 s/op
Iteration  25: 1.680 s/op
Iteration  26: 1.677 s/op
Iteration  27: 1.675 s/op
Iteration  28: 1.674 s/op
Iteration  29: 1.680 s/op
Iteration  30: 1.677 s/op
Iteration  31: 1.680 s/op
Iteration  32: 1.681 s/op
Iteration  33: 1.680 s/op
Iteration  34: 1.684 s/op
Iteration  35: 1.677 s/op
Iteration  36: 1.685 s/op
Iteration  37: 1.679 s/op
Iteration  38: 1.681 s/op
Iteration  39: 1.680 s/op
Iteration  40: 1.681 s/op
Iteration  41: 1.678 s/op
Iteration  42: 1.678 s/op
Iteration  43: 1.680 s/op
Iteration  44: 1.678 s/op
Iteration  45: 1.677 s/op
Iteration  46: 1.683 s/op
Iteration  47: 1.680 s/op
Iteration  48: 1.682 s/op
Iteration  49: 1.679 s/op
Iteration  50: 1.680 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.686 ?(99.9%) 0.044 s/op

  Histogram, s/op:
    [1.400, 1.450) = 1 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 46 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.405 s/op
     p(50.0000) =      1.679 s/op
     p(90.0000) =      1.684 s/op
     p(95.0000) =      1.726 s/op
     p(99.0000) =      2.229 s/op
     p(99.9000) =      2.229 s/op
     p(99.9900) =      2.229 s/op
     p(99.9990) =      2.229 s/op
     p(99.9999) =      2.229 s/op
    p(100.0000) =      2.229 s/op


# Run complete. Total time: 00:01:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.686 ? 0.044   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot-8u222-b10_1564616247012.json
{"wallclock_times": [85.07787595900001], "core_cycle_counts": [[87777229553], [74657945516], [28432982124], [92901616426]], "aperf_counts": [[87593744663], [74633535935], [28414449469], [92890669201]], "mperf_counts": [[87598241002], [74633658950], [28426191688], [92891396218]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 01:38:52: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-08-01 01:38:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 01:38:53: INFO] 73 executions left in scheduler queue
[2019-08-01 01:38:53: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-08-01 01:38:53: INFO] Estimated completion (next execution): 2019-08-01 01:42:48 (0:03:55 from now)
[2019-08-01 01:38:53: INFO] Reboot in preparation for next execution
[2019-08-01 01:49:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.956 s/op
Iteration   2: 8.574 s/op
Iteration   3: 9.084 s/op
Iteration   4: 8.899 s/op
Iteration   5: 8.748 s/op
Iteration   6: 8.679 s/op
Iteration   7: 8.695 s/op
Iteration   8: 8.792 s/op
Iteration   9: 8.749 s/op
Iteration  10: 8.770 s/op
Iteration  11: 8.642 s/op
Iteration  12: 8.798 s/op
Iteration  13: 9.484 s/op
Iteration  14: 8.679 s/op
Iteration  15: 8.621 s/op
Iteration  16: 8.799 s/op
Iteration  17: 8.617 s/op
Iteration  18: 8.638 s/op
Iteration  19: 8.781 s/op
Iteration  20: 8.633 s/op
Iteration  21: 8.804 s/op
Iteration  22: 8.650 s/op
Iteration  23: 8.664 s/op
Iteration  24: 9.797 s/op
Iteration  25: 8.558 s/op
Iteration  26: 8.811 s/op
Iteration  27: 8.624 s/op
Iteration  28: 8.642 s/op
Iteration  29: 8.796 s/op
Iteration  30: 8.653 s/op
Iteration  31: 8.670 s/op
Iteration  32: 8.786 s/op
Iteration  33: 8.662 s/op
Iteration  34: 8.834 s/op
Iteration  35: 9.566 s/op
Iteration  36: 8.599 s/op
Iteration  37: 8.813 s/op
Iteration  38: 8.658 s/op
Iteration  39: 8.643 s/op
Iteration  40: 8.814 s/op
Iteration  41: 8.646 s/op
Iteration  42: 8.648 s/op
Iteration  43: 8.773 s/op
Iteration  44: 8.659 s/op
Iteration  45: 8.843 s/op
Iteration  46: 9.547 s/op
Iteration  47: 8.614 s/op
Iteration  48: 8.802 s/op
Iteration  49: 8.642 s/op
Iteration  50: 8.683 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.791 ?(99.9%) 0.130 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 7 
    [ 8.625,  8.750) = 21 
    [ 8.750,  8.875) = 15 
    [ 8.875,  9.000) = 2 
    [ 9.000,  9.125) = 1 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 2 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.558 s/op
     p(50.0000) =      8.689 s/op
     p(90.0000) =      9.071 s/op
     p(95.0000) =      9.556 s/op
     p(99.0000) =      9.797 s/op
     p(99.9000) =      9.797 s/op
     p(99.9900) =      9.797 s/op
     p(99.9990) =      9.797 s/op
     p(99.9999) =      9.797 s/op
    p(100.0000) =      9.797 s/op


# Run complete. Total time: 00:07:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.791 ? 0.130   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_graalvm-ce-19.1.1_1564616541479.json
{"wallclock_times": [440.51521571600006], "core_cycle_counts": [[357210861243], [179113636394], [347322038217], [745899596566]], "aperf_counts": [[356074288531], [178999645555], [347270966237], [745859043361]], "mperf_counts": [[356080796726], [179013982196], [347272479698], [745867886840]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 01:49:41: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-08-01 01:49:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 01:49:42: INFO] 72 executions left in scheduler queue
[2019-08-01 01:49:42: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-08-01 01:49:42: INFO] Estimated completion (next execution): 2019-08-01 01:59:33 (0:09:50 from now)
[2019-08-01 01:49:42: INFO] Reboot in preparation for next execution
[2019-08-01 01:57:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.256 s/op
Iteration   2: 4.106 s/op
Iteration   3: 4.032 s/op
Iteration   4: 4.039 s/op
Iteration   5: 4.047 s/op
Iteration   6: 4.049 s/op
Iteration   7: 4.051 s/op
Iteration   8: 4.054 s/op
Iteration   9: 4.037 s/op
Iteration  10: 4.041 s/op
Iteration  11: 4.033 s/op
Iteration  12: 4.052 s/op
Iteration  13: 4.039 s/op
Iteration  14: 4.055 s/op
Iteration  15: 4.045 s/op
Iteration  16: 4.042 s/op
Iteration  17: 4.038 s/op
Iteration  18: 4.034 s/op
Iteration  19: 4.052 s/op
Iteration  20: 4.034 s/op
Iteration  21: 4.043 s/op
Iteration  22: 4.069 s/op
Iteration  23: 4.026 s/op
Iteration  24: 4.054 s/op
Iteration  25: 4.038 s/op
Iteration  26: 4.056 s/op
Iteration  27: 4.046 s/op
Iteration  28: 4.059 s/op
Iteration  29: 4.060 s/op
Iteration  30: 4.066 s/op
Iteration  31: 4.035 s/op
Iteration  32: 4.032 s/op
Iteration  33: 4.048 s/op
Iteration  34: 4.038 s/op
Iteration  35: 4.045 s/op
Iteration  36: 4.027 s/op
Iteration  37: 4.038 s/op
Iteration  38: 4.033 s/op
Iteration  39: 4.037 s/op
Iteration  40: 4.034 s/op
Iteration  41: 4.035 s/op
Iteration  42: 4.045 s/op
Iteration  43: 4.033 s/op
Iteration  44: 4.037 s/op
Iteration  45: 4.035 s/op
Iteration  46: 4.026 s/op
Iteration  47: 4.040 s/op
Iteration  48: 4.049 s/op
Iteration  49: 4.027 s/op
Iteration  50: 4.056 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      4.048 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [4.000, 4.025) = 0 
    [4.025, 4.050) = 36 
    [4.050, 4.075) = 12 
    [4.075, 4.100) = 0 
    [4.100, 4.125) = 1 
    [4.125, 4.150) = 0 
    [4.150, 4.175) = 0 
    [4.175, 4.200) = 0 
    [4.200, 4.225) = 0 
    [4.225, 4.250) = 0 
    [4.250, 4.275) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.026 s/op
     p(50.0000) =      4.041 s/op
     p(90.0000) =      4.060 s/op
     p(95.0000) =      4.085 s/op
     p(99.0000) =      4.256 s/op
     p(99.9000) =      4.256 s/op
     p(99.9900) =      4.256 s/op
     p(99.9990) =      4.256 s/op
     p(99.9999) =      4.256 s/op
    p(100.0000) =      4.256 s/op


# Run complete. Total time: 00:03:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  4.048 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot-8u222-b10_1564617234549.json
{"wallclock_times": [203.20653741200002], "core_cycle_counts": [[188237856047], [156175721198], [170710252257], [140178156274]], "aperf_counts": [[187782813364], [156126163394], [170684259949], [140154049389]], "mperf_counts": [[187794433062], [156131542052], [170684417724], [140156188114]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 01:57:17: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-08-01 01:57:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 01:57:18: INFO] 71 executions left in scheduler queue
[2019-08-01 01:57:18: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-08-01 01:57:18: INFO] Estimated completion (next execution): 2019-08-01 02:03:12 (0:05:53 from now)
[2019-08-01 01:57:18: INFO] Reboot in preparation for next execution
[2019-08-01 02:08:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.043 s/op
Iteration   2: 9.012 s/op
Iteration   3: 8.881 s/op
Iteration   4: 9.010 s/op
Iteration   5: 8.766 s/op
Iteration   6: 8.697 s/op
Iteration   7: 8.818 s/op
Iteration   8: 8.751 s/op
Iteration   9: 8.782 s/op
Iteration  10: 8.684 s/op
Iteration  11: 8.826 s/op
Iteration  12: 9.515 s/op
Iteration  13: 8.727 s/op
Iteration  14: 8.682 s/op
Iteration  15: 8.692 s/op
Iteration  16: 8.848 s/op
Iteration  17: 8.735 s/op
Iteration  18: 8.708 s/op
Iteration  19: 8.859 s/op
Iteration  20: 8.693 s/op
Iteration  21: 8.721 s/op
Iteration  22: 8.705 s/op
Iteration  23: 9.904 s/op
Iteration  24: 8.633 s/op
Iteration  25: 8.722 s/op
Iteration  26: 8.705 s/op
Iteration  27: 8.706 s/op
Iteration  28: 8.697 s/op
Iteration  29: 8.691 s/op
Iteration  30: 8.873 s/op
Iteration  31: 8.700 s/op
Iteration  32: 8.710 s/op
Iteration  33: 8.698 s/op
Iteration  34: 9.979 s/op
Iteration  35: 8.651 s/op
Iteration  36: 8.679 s/op
Iteration  37: 8.677 s/op
Iteration  38: 8.852 s/op
Iteration  39: 8.712 s/op
Iteration  40: 8.696 s/op
Iteration  41: 8.704 s/op
Iteration  42: 8.852 s/op
Iteration  43: 8.715 s/op
Iteration  44: 8.689 s/op
Iteration  45: 8.725 s/op
Iteration  46: 8.942 s/op
Iteration  47: 8.673 s/op
Iteration  48: 8.698 s/op
Iteration  49: 8.696 s/op
Iteration  50: 8.854 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.820 ?(99.9%) 0.135 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 0 
    [ 8.625,  8.750) = 31 
    [ 8.750,  8.875) = 11 
    [ 8.875,  9.000) = 2 
    [ 9.000,  9.125) = 3 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 0 
    [ 9.500,  9.625) = 1 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.633 s/op
     p(50.0000) =      8.713 s/op
     p(90.0000) =      9.012 s/op
     p(95.0000) =      9.690 s/op
     p(99.0000) =      9.979 s/op
     p(99.9000) =      9.979 s/op
     p(99.9900) =      9.979 s/op
     p(99.9990) =      9.979 s/op
     p(99.9999) =      9.979 s/op
    p(100.0000) =      9.979 s/op


# Run complete. Total time: 00:07:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.820 ? 0.135   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_graalvm-ce-19.1.1_1564617689539.json
{"wallclock_times": [442.14260967900003], "core_cycle_counts": [[373709211512], [369718144189], [557124379514], [331224779982]], "aperf_counts": [[372566447338], [369631771673], [557084801655], [331182976041]], "mperf_counts": [[372584102380], [369638762316], [557087056470], [331183230950]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 02:08:51: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-08-01 02:08:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 02:08:52: INFO] 70 executions left in scheduler queue
[2019-08-01 02:08:52: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:08:52: INFO] Estimated completion (next execution): 2019-08-01 02:18:45 (0:09:52 from now)
[2019-08-01 02:08:52: INFO] Reboot in preparation for next execution
[2019-08-01 02:13:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 02:13:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 02:13:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 02:13:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 02:13:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 02:13:04: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 02:18:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.660 s/op
Iteration   2: 7.119 s/op
Iteration   3: 6.880 s/op
Iteration   4: 6.947 s/op
Iteration   5: 6.852 s/op
Iteration   6: 7.001 s/op
Iteration   7: 6.914 s/op
Iteration   8: 7.074 s/op
Iteration   9: 6.892 s/op
Iteration  10: 7.024 s/op
Iteration  11: 6.917 s/op
Iteration  12: 6.933 s/op
Iteration  13: 6.983 s/op
Iteration  14: 6.914 s/op
Iteration  15: 6.966 s/op
Iteration  16: 6.945 s/op
Iteration  17: 6.961 s/op
Iteration  18: 6.917 s/op
Iteration  19: 6.877 s/op
Iteration  20: 6.992 s/op
Iteration  21: 6.876 s/op
Iteration  22: 6.841 s/op
Iteration  23: 6.917 s/op
Iteration  24: 6.872 s/op
Iteration  25: 6.969 s/op
Iteration  26: 6.882 s/op
Iteration  27: 7.064 s/op
Iteration  28: 6.928 s/op
Iteration  29: 6.895 s/op
Iteration  30: 7.007 s/op
Iteration  31: 6.927 s/op
Iteration  32: 6.938 s/op
Iteration  33: 6.930 s/op
Iteration  34: 7.042 s/op
Iteration  35: 6.962 s/op
Iteration  36: 6.920 s/op
Iteration  37: 6.934 s/op
Iteration  38: 6.868 s/op
Iteration  39: 7.034 s/op
Iteration  40: 6.901 s/op
Iteration  41: 6.849 s/op
Iteration  42: 7.003 s/op
Iteration  43: 6.879 s/op
Iteration  44: 7.017 s/op
Iteration  45: 6.945 s/op
Iteration  46: 7.058 s/op
Iteration  47: 6.937 s/op
Iteration  48: 6.856 s/op
Iteration  49: 6.952 s/op
Iteration  50: 6.884 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.977 ?(99.9%) 0.124 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 38 
    [7.000, 7.250) = 11 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.841 s/op
     p(50.0000) =      6.934 s/op
     p(90.0000) =      7.056 s/op
     p(95.0000) =      7.094 s/op
     p(99.0000) =      8.660 s/op
     p(99.9000) =      8.660 s/op
     p(99.9900) =      8.660 s/op
     p(99.9990) =      8.660 s/op
     p(99.9999) =      8.660 s/op
    p(100.0000) =      8.660 s/op


# Run complete. Total time: 00:05:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.977 ? 0.124   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9_11.0.4_1564618384768.json
{"wallclock_times": [350.70962903300006], "core_cycle_counts": [[267253731768], [373468538449], [334070119124], [275226999304]], "aperf_counts": [[266314305217], [373341267092], [333951517937], [275148320775]], "mperf_counts": [[266319603138], [373341352104], [333951831944], [275148412390]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 02:18:55: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:18:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 02:18:56: INFO] 69 executions left in scheduler queue
[2019-08-01 02:18:56: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:18:56: INFO] Estimated completion (next execution): 2019-08-01 02:27:17 (0:08:21 from now)
[2019-08-01 02:18:56: INFO] Reboot in preparation for next execution
[2019-08-01 02:23:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 02:23:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 02:23:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 02:23:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 02:23:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 02:23:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 02:31:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.888 s/op
Iteration   2: 10.269 s/op
Iteration   3: 10.280 s/op
Iteration   4: 10.161 s/op
Iteration   5: 10.127 s/op
Iteration   6: 10.140 s/op
Iteration   7: 10.153 s/op
Iteration   8: 10.141 s/op
Iteration   9: 10.102 s/op
Iteration  10: 10.133 s/op
Iteration  11: 10.190 s/op
Iteration  12: 10.154 s/op
Iteration  13: 10.130 s/op
Iteration  14: 10.105 s/op
Iteration  15: 10.144 s/op
Iteration  16: 10.128 s/op
Iteration  17: 10.152 s/op
Iteration  18: 10.037 s/op
Iteration  19: 10.192 s/op
Iteration  20: 10.095 s/op
Iteration  21: 10.121 s/op
Iteration  22: 10.168 s/op
Iteration  23: 10.093 s/op
Iteration  24: 10.058 s/op
Iteration  25: 10.170 s/op
Iteration  26: 10.047 s/op
Iteration  27: 10.105 s/op
Iteration  28: 10.099 s/op
Iteration  29: 10.077 s/op
Iteration  30: 10.145 s/op
Iteration  31: 10.152 s/op
Iteration  32: 10.068 s/op
Iteration  33: 10.112 s/op
Iteration  34: 10.092 s/op
Iteration  35: 10.075 s/op
Iteration  36: 10.040 s/op
Iteration  37: 10.116 s/op
Iteration  38: 10.065 s/op
Iteration  39: 10.043 s/op
Iteration  40: 10.045 s/op
Iteration  41: 10.038 s/op
Iteration  42: 10.085 s/op
Iteration  43: 10.117 s/op
Iteration  44: 10.158 s/op
Iteration  45: 10.078 s/op
Iteration  46: 10.096 s/op
Iteration  47: 10.082 s/op
Iteration  48: 10.102 s/op
Iteration  49: 10.056 s/op
Iteration  50: 10.111 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.151 ?(99.9%) 0.127 s/op

  Histogram, s/op:
    [10.000, 10.125) = 29 
    [10.125, 10.250) = 18 
    [10.250, 10.375) = 2 
    [10.375, 10.500) = 0 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 
    [10.875, 11.000) = 0 
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.037 s/op
     p(50.0000) =     10.112 s/op
     p(90.0000) =     10.188 s/op
     p(95.0000) =     10.274 s/op
     p(99.0000) =     11.888 s/op
     p(99.9000) =     11.888 s/op
     p(99.9900) =     11.888 s/op
     p(99.9990) =     11.888 s/op
     p(99.9999) =     11.888 s/op
    p(100.0000) =     11.888 s/op


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.151 ? 0.127   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9_11.0.4_1564619001718.json
{"wallclock_times": [509.124446034], "core_cycle_counts": [[556246006787], [429056892605], [348110835924], [438947990136]], "aperf_counts": [[555029356522], [428904524794], [347947285171], [438852111020]], "mperf_counts": [[555030143506], [428904480396], [347948897914], [438852162962]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 02:31:50: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:31:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 02:31:51: INFO] 68 executions left in scheduler queue
[2019-08-01 02:31:51: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:31:51: INFO] Estimated completion (next execution): 2019-08-01 02:42:51 (0:10:59 from now)
[2019-08-01 02:31:51: INFO] Reboot in preparation for next execution
[2019-08-01 02:36:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 02:36:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 02:36:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 02:36:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 02:36:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 02:36:03: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 02:41:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.918 s/op
Iteration   2: 6.490 s/op
Iteration   3: 6.012 s/op
Iteration   4: 6.047 s/op
Iteration   5: 6.042 s/op
Iteration   6: 5.961 s/op
Iteration   7: 5.916 s/op
Iteration   8: 5.913 s/op
Iteration   9: 5.894 s/op
Iteration  10: 5.878 s/op
Iteration  11: 5.839 s/op
Iteration  12: 5.817 s/op
Iteration  13: 5.806 s/op
Iteration  14: 5.894 s/op
Iteration  15: 5.825 s/op
Iteration  16: 5.866 s/op
Iteration  17: 5.826 s/op
Iteration  18: 5.880 s/op
Iteration  19: 5.839 s/op
Iteration  20: 5.827 s/op
Iteration  21: 5.856 s/op
Iteration  22: 5.873 s/op
Iteration  23: 5.880 s/op
Iteration  24: 5.903 s/op
Iteration  25: 5.859 s/op
Iteration  26: 5.834 s/op
Iteration  27: 5.824 s/op
Iteration  28: 5.838 s/op
Iteration  29: 5.826 s/op
Iteration  30: 5.870 s/op
Iteration  31: 5.848 s/op
Iteration  32: 5.874 s/op
Iteration  33: 5.850 s/op
Iteration  34: 5.829 s/op
Iteration  35: 5.831 s/op
Iteration  36: 5.848 s/op
Iteration  37: 5.875 s/op
Iteration  38: 5.861 s/op
Iteration  39: 5.882 s/op
Iteration  40: 5.820 s/op
Iteration  41: 5.866 s/op
Iteration  42: 5.804 s/op
Iteration  43: 5.838 s/op
Iteration  44: 5.861 s/op
Iteration  45: 5.839 s/op
Iteration  46: 5.871 s/op
Iteration  47: 5.878 s/op
Iteration  48: 5.839 s/op
Iteration  49: 5.788 s/op
Iteration  50: 5.754 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.918 ?(99.9%) 0.152 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 45 
    [6.000, 6.250) = 3 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.754 s/op
     p(50.0000) =      5.860 s/op
     p(90.0000) =      6.007 s/op
     p(95.0000) =      6.246 s/op
     p(99.0000) =      7.918 s/op
     p(99.9000) =      7.918 s/op
     p(99.9900) =      7.918 s/op
     p(99.9990) =      7.918 s/op
     p(99.9999) =      7.918 s/op
    p(100.0000) =      7.918 s/op


# Run complete. Total time: 00:04:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.918 ? 0.152   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9_11.0.4_1564619762879.json
{"wallclock_times": [297.796086945], "core_cycle_counts": [[209469006877], [272484760417], [317906888609], [344234983080]], "aperf_counts": [[208541855063], [272375365499], [317801890971], [344122850230]], "mperf_counts": [[208553816120], [272377027310], [317802016332], [344122942056]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 02:41:00: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:41:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 02:41:01: INFO] 67 executions left in scheduler queue
[2019-08-01 02:41:01: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:41:01: INFO] Estimated completion (next execution): 2019-08-01 02:48:29 (0:07:28 from now)
[2019-08-01 02:41:01: INFO] Reboot in preparation for next execution
[2019-08-01 02:45:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 02:45:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 02:45:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 02:45:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 02:45:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 02:45:12: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 02:57:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.628 s/op
Iteration   2: 14.684 s/op
Iteration   3: 14.614 s/op
Iteration   4: 14.549 s/op
Iteration   5: 14.641 s/op
Iteration   6: 14.599 s/op
Iteration   7: 14.588 s/op
Iteration   8: 14.613 s/op
Iteration   9: 14.552 s/op
Iteration  10: 14.588 s/op
Iteration  11: 14.628 s/op
Iteration  12: 14.827 s/op
Iteration  13: 14.703 s/op
Iteration  14: 14.699 s/op
Iteration  15: 14.835 s/op
Iteration  16: 14.850 s/op
Iteration  17: 14.666 s/op
Iteration  18: 15.050 s/op
Iteration  19: 14.673 s/op
Iteration  20: 14.751 s/op
Iteration  21: 14.681 s/op
Iteration  22: 14.717 s/op
Iteration  23: 14.732 s/op
Iteration  24: 14.772 s/op
Iteration  25: 14.773 s/op
Iteration  26: 14.762 s/op
Iteration  27: 14.674 s/op
Iteration  28: 14.746 s/op
Iteration  29: 14.817 s/op
Iteration  30: 14.724 s/op
Iteration  31: 14.726 s/op
Iteration  32: 14.742 s/op
Iteration  33: 14.860 s/op
Iteration  34: 14.758 s/op
Iteration  35: 14.763 s/op
Iteration  36: 15.177 s/op
Iteration  37: 14.810 s/op
Iteration  38: 14.707 s/op
Iteration  39: 14.703 s/op
Iteration  40: 14.769 s/op
Iteration  41: 14.685 s/op
Iteration  42: 14.748 s/op
Iteration  43: 14.780 s/op
Iteration  44: 14.788 s/op
Iteration  45: 14.691 s/op
Iteration  46: 14.666 s/op
Iteration  47: 14.741 s/op
Iteration  48: 14.854 s/op
Iteration  49: 14.620 s/op
Iteration  50: 14.743 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.769 ?(99.9%) 0.144 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 31 
    [14.750, 15.000) = 16 
    [15.000, 15.250) = 2 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.549 s/op
     p(50.0000) =     14.729 s/op
     p(90.0000) =     14.854 s/op
     p(95.0000) =     15.107 s/op
     p(99.0000) =     16.628 s/op
     p(99.9000) =     16.628 s/op
     p(99.9900) =     16.628 s/op
     p(99.9990) =     16.628 s/op
     p(99.9999) =     16.628 s/op
    p(100.0000) =     16.628 s/op


# Run complete. Total time: 00:12:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.769 ? 0.144   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9_11.0.4_1564620311894.json
{"wallclock_times": [740.1357459239999], "core_cycle_counts": [[856657889428], [642028588976], [340352928100], [634012696175]], "aperf_counts": [[855019979418], [641821300452], [340180141840], [633797475111]], "mperf_counts": [[855026199656], [641821300258], [340180082920], [633797417226]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 02:57:32: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-08-01 02:57:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 02:57:32: INFO] 66 executions left in scheduler queue
[2019-08-01 02:57:32: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 02:57:32: INFO] Estimated completion (next execution): 2019-08-01 03:12:23 (0:14:50 from now)
[2019-08-01 02:57:32: INFO] Reboot in preparation for next execution
[2019-08-01 03:09:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.886 s/op
Iteration   2: 10.028 s/op
Iteration   3: 9.810 s/op
Iteration   4: 9.860 s/op
Iteration   5: 9.765 s/op
Iteration   6: 9.811 s/op
Iteration   7: 9.838 s/op
Iteration   8: 9.799 s/op
Iteration   9: 9.940 s/op
Iteration  10: 9.833 s/op
Iteration  11: 9.845 s/op
Iteration  12: 9.874 s/op
Iteration  13: 9.859 s/op
Iteration  14: 9.819 s/op
Iteration  15: 9.844 s/op
Iteration  16: 9.852 s/op
Iteration  17: 9.854 s/op
Iteration  18: 9.793 s/op
Iteration  19: 9.865 s/op
Iteration  20: 9.937 s/op
Iteration  21: 9.836 s/op
Iteration  22: 9.845 s/op
Iteration  23: 9.859 s/op
Iteration  24: 9.818 s/op
Iteration  25: 9.827 s/op
Iteration  26: 9.836 s/op
Iteration  27: 9.938 s/op
Iteration  28: 9.865 s/op
Iteration  29: 9.835 s/op
Iteration  30: 9.853 s/op
Iteration  31: 9.871 s/op
Iteration  32: 9.868 s/op
Iteration  33: 9.872 s/op
Iteration  34: 9.826 s/op
Iteration  35: 9.887 s/op
Iteration  36: 9.816 s/op
Iteration  37: 9.910 s/op
Iteration  38: 9.845 s/op
Iteration  39: 9.874 s/op
Iteration  40: 9.868 s/op
Iteration  41: 9.912 s/op
Iteration  42: 9.889 s/op
Iteration  43: 9.867 s/op
Iteration  44: 9.830 s/op
Iteration  45: 9.848 s/op
Iteration  46: 9.849 s/op
Iteration  47: 9.830 s/op
Iteration  48: 9.842 s/op
Iteration  49: 9.835 s/op
Iteration  50: 9.854 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.856 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [ 9.700,  9.725) = 0 
    [ 9.725,  9.750) = 0 
    [ 9.750,  9.775) = 1 
    [ 9.775,  9.800) = 2 
    [ 9.800,  9.825) = 5 
    [ 9.825,  9.850) = 17 
    [ 9.850,  9.875) = 16 
    [ 9.875,  9.900) = 3 
    [ 9.900,  9.925) = 2 
    [ 9.925,  9.950) = 3 
    [ 9.950,  9.975) = 0 
    [ 9.975, 10.000) = 0 
    [10.000, 10.025) = 0 
    [10.025, 10.050) = 1 
    [10.050, 10.075) = 0 
    [10.075, 10.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.765 s/op
     p(50.0000) =      9.851 s/op
     p(90.0000) =      9.912 s/op
     p(95.0000) =      9.939 s/op
     p(99.0000) =     10.028 s/op
     p(99.9000) =     10.028 s/op
     p(99.9900) =     10.028 s/op
     p(99.9990) =     10.028 s/op
     p(99.9999) =     10.028 s/op
    p(100.0000) =     10.028 s/op


# Run complete. Total time: 00:08:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.856 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fibonacci_hotspot-8u222-b10_1564621302917.json
{"wallclock_times": [493.68050890000006], "core_cycle_counts": [[474958746509], [208147001838], [369281561629], [539251231140]], "aperf_counts": [[473927173331], [208060359923], [369244518636], [539217739138]], "mperf_counts": [[473934269036], [208062138618], [369244584890], [539237128756]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 03:09:56: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 03:09:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 03:09:57: INFO] 65 executions left in scheduler queue
[2019-08-01 03:09:57: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 03:09:57: INFO] Estimated completion (next execution): 2019-08-01 03:20:41 (0:10:43 from now)
[2019-08-01 03:09:57: INFO] Reboot in preparation for next execution
[2019-08-01 03:18:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.266 s/op
Iteration   2: 5.194 s/op
Iteration   3: 5.764 s/op
Iteration   4: 5.739 s/op
Iteration   5: 5.747 s/op
Iteration   6: 5.779 s/op
Iteration   7: 5.772 s/op
Iteration   8: 5.756 s/op
Iteration   9: 5.758 s/op
Iteration  10: 5.786 s/op
Iteration  11: 5.782 s/op
Iteration  12: 5.786 s/op
Iteration  13: 5.763 s/op
Iteration  14: 5.764 s/op
Iteration  15: 5.775 s/op
Iteration  16: 5.766 s/op
Iteration  17: 5.747 s/op
Iteration  18: 5.755 s/op
Iteration  19: 5.735 s/op
Iteration  20: 5.756 s/op
Iteration  21: 5.760 s/op
Iteration  22: 5.759 s/op
Iteration  23: 5.750 s/op
Iteration  24: 5.753 s/op
Iteration  25: 5.755 s/op
Iteration  26: 5.764 s/op
Iteration  27: 5.750 s/op
Iteration  28: 5.770 s/op
Iteration  29: 5.769 s/op
Iteration  30: 5.760 s/op
Iteration  31: 5.772 s/op
Iteration  32: 5.734 s/op
Iteration  33: 5.751 s/op
Iteration  34: 5.738 s/op
Iteration  35: 5.762 s/op
Iteration  36: 5.752 s/op
Iteration  37: 5.763 s/op
Iteration  38: 5.757 s/op
Iteration  39: 5.773 s/op
Iteration  40: 5.740 s/op
Iteration  41: 5.754 s/op
Iteration  42: 5.738 s/op
Iteration  43: 5.754 s/op
Iteration  44: 5.776 s/op
Iteration  45: 5.756 s/op
Iteration  46: 5.775 s/op
Iteration  47: 5.763 s/op
Iteration  48: 5.746 s/op
Iteration  49: 5.754 s/op
Iteration  50: 5.746 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.758 ?(99.9%) 0.054 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 1 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 10 
    [5.750, 5.875) = 38 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 1 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.194 s/op
     p(50.0000) =      5.757 s/op
     p(90.0000) =      5.779 s/op
     p(95.0000) =      5.786 s/op
     p(99.0000) =      6.266 s/op
     p(99.9000) =      6.266 s/op
     p(99.9900) =      6.266 s/op
     p(99.9990) =      6.266 s/op
     p(99.9999) =      6.266 s/op
    p(100.0000) =      6.266 s/op


# Run complete. Total time: 00:04:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.758 ? 0.054   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_fannkuchredux_hotspot-8u222-b10_1564622048403.json
{"wallclock_times": [288.817910762], "core_cycle_counts": [[235838273273], [205314928948], [244649398643], [254283092870]], "aperf_counts": [[235158404600], [205261453932], [244622905684], [254262509911]], "mperf_counts": [[235173180118], [205273946828], [244624559148], [254264880338]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 03:18:57: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 03:18:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 03:18:58: INFO] 64 executions left in scheduler queue
[2019-08-01 03:18:58: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 03:18:58: INFO] Estimated completion (next execution): 2019-08-01 03:26:17 (0:07:19 from now)
[2019-08-01 03:18:58: INFO] Reboot in preparation for next execution
[2019-08-01 03:28:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.727 s/op
Iteration   2: 6.241 s/op
Iteration   3: 6.224 s/op
Iteration   4: 6.201 s/op
Iteration   5: 6.228 s/op
Iteration   6: 6.227 s/op
Iteration   7: 6.238 s/op
Iteration   8: 6.184 s/op
Iteration   9: 6.232 s/op
Iteration  10: 6.228 s/op
Iteration  11: 6.237 s/op
Iteration  12: 6.180 s/op
Iteration  13: 6.228 s/op
Iteration  14: 6.217 s/op
Iteration  15: 6.249 s/op
Iteration  16: 6.175 s/op
Iteration  17: 6.231 s/op
Iteration  18: 6.232 s/op
Iteration  19: 6.176 s/op
Iteration  20: 6.227 s/op
Iteration  21: 6.226 s/op
Iteration  22: 6.234 s/op
Iteration  23: 6.166 s/op
Iteration  24: 6.234 s/op
Iteration  25: 6.235 s/op
Iteration  26: 6.167 s/op
Iteration  27: 6.209 s/op
Iteration  28: 6.224 s/op
Iteration  29: 6.248 s/op
Iteration  30: 6.182 s/op
Iteration  31: 6.242 s/op
Iteration  32: 6.225 s/op
Iteration  33: 6.180 s/op
Iteration  34: 6.225 s/op
Iteration  35: 6.244 s/op
Iteration  36: 6.193 s/op
Iteration  37: 6.251 s/op
Iteration  38: 6.239 s/op
Iteration  39: 6.236 s/op
Iteration  40: 6.194 s/op
Iteration  41: 6.242 s/op
Iteration  42: 6.232 s/op
Iteration  43: 6.197 s/op
Iteration  44: 6.241 s/op
Iteration  45: 6.239 s/op
Iteration  46: 6.236 s/op
Iteration  47: 6.190 s/op
Iteration  48: 6.242 s/op
Iteration  49: 6.582 s/op
Iteration  50: 6.158 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.236 ?(99.9%) 0.045 s/op

  Histogram, s/op:
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 13 
    [6.200, 6.250) = 34 
    [6.250, 6.300) = 1 
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 0 
    [6.400, 6.450) = 0 
    [6.450, 6.500) = 0 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 1 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 1 
    [6.750, 6.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.158 s/op
     p(50.0000) =      6.228 s/op
     p(90.0000) =      6.247 s/op
     p(95.0000) =      6.400 s/op
     p(99.0000) =      6.727 s/op
     p(99.9000) =      6.727 s/op
     p(99.9900) =      6.727 s/op
     p(99.9990) =      6.727 s/op
     p(99.9999) =      6.727 s/op
    p(100.0000) =      6.727 s/op


# Run complete. Total time: 00:05:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.236 ? 0.045   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_binarytree_hotspot-8u222-b10_1564622588494.json
{"wallclock_times": [312.79565126299997], "core_cycle_counts": [[218233394954], [315714891989], [316836994310], [231312797747]], "aperf_counts": [[217408743237], [315640519180], [316781192601], [231256050845]], "mperf_counts": [[217414205274], [315642246618], [316797670586], [231256188326]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 03:28:21: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 03:28:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 03:28:22: INFO] 63 executions left in scheduler queue
[2019-08-01 03:28:22: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 03:28:22: INFO] Estimated completion (next execution): 2019-08-01 03:36:05 (0:07:43 from now)
[2019-08-01 03:28:22: INFO] Reboot in preparation for next execution
[2019-08-01 03:45:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.312 s/op
Iteration   2: 15.638 s/op
Iteration   3: 15.395 s/op
Iteration   4: 15.387 s/op
Iteration   5: 15.437 s/op
Iteration   6: 15.372 s/op
Iteration   7: 15.407 s/op
Iteration   8: 15.391 s/op
Iteration   9: 15.444 s/op
Iteration  10: 15.398 s/op
Iteration  11: 15.417 s/op
Iteration  12: 15.354 s/op
Iteration  13: 15.382 s/op
Iteration  14: 15.387 s/op
Iteration  15: 15.409 s/op
Iteration  16: 15.424 s/op
Iteration  17: 15.388 s/op
Iteration  18: 15.370 s/op
Iteration  19: 15.382 s/op
Iteration  20: 15.372 s/op
Iteration  21: 15.366 s/op
Iteration  22: 15.415 s/op
Iteration  23: 15.413 s/op
Iteration  24: 15.420 s/op
Iteration  25: 15.407 s/op
Iteration  26: 15.400 s/op
Iteration  27: 15.439 s/op
Iteration  28: 15.388 s/op
Iteration  29: 15.368 s/op
Iteration  30: 15.338 s/op
Iteration  31: 15.372 s/op
Iteration  32: 15.469 s/op
Iteration  33: 15.360 s/op
Iteration  34: 15.388 s/op
Iteration  35: 15.392 s/op
Iteration  36: 15.415 s/op
Iteration  37: 15.410 s/op
Iteration  38: 15.431 s/op
Iteration  39: 15.417 s/op
Iteration  40: 15.424 s/op
Iteration  41: 15.600 s/op
Iteration  42: 15.430 s/op
Iteration  43: 15.402 s/op
Iteration  44: 15.361 s/op
Iteration  45: 15.397 s/op
Iteration  46: 15.364 s/op
Iteration  47: 15.407 s/op
Iteration  48: 15.409 s/op
Iteration  49: 15.368 s/op
Iteration  50: 15.404 s/op


Result "fr.mleduc.minijava.MinijavaVisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     15.405 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [15.300, 15.325) = 1 
    [15.325, 15.350) = 1 
    [15.350, 15.375) = 11 
    [15.375, 15.400) = 12 
    [15.400, 15.425) = 17 
    [15.425, 15.450) = 5 
    [15.450, 15.475) = 1 
    [15.475, 15.500) = 0 
    [15.500, 15.525) = 0 
    [15.525, 15.550) = 0 
    [15.550, 15.575) = 0 
    [15.575, 15.600) = 0 
    [15.600, 15.625) = 1 
    [15.625, 15.650) = 1 
    [15.650, 15.675) = 0 
    [15.675, 15.700) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.312 s/op
     p(50.0000) =     15.399 s/op
     p(90.0000) =     15.439 s/op
     p(95.0000) =     15.528 s/op
     p(99.0000) =     15.638 s/op
     p(99.9000) =     15.638 s/op
     p(99.9900) =     15.638 s/op
     p(99.9990) =     15.638 s/op
     p(99.9999) =     15.638 s/op
    p(100.0000) =     15.638 s/op


# Run complete. Total time: 00:12:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaVisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.405 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_visitor_sort_hotspot-8u222-b10_1564623152353.json
{"wallclock_times": [771.125804961], "core_cycle_counts": [[734211304690], [483031300757], [707309366181], [599971179227]], "aperf_counts": [[732542621068], [482900954328], [707243286913], [599941163464]], "mperf_counts": [[732544444034], [482905020838], [707243638112], [599941212642]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 03:45:23: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-08-01 03:45:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 03:45:24: INFO] 62 executions left in scheduler queue
[2019-08-01 03:45:24: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-08-01 03:45:24: INFO] Estimated completion (next execution): 2019-08-01 04:00:45 (0:15:21 from now)
[2019-08-01 03:45:24: INFO] Reboot in preparation for next execution
[2019-08-01 03:49:38: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 04:00:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.267 s/op
Iteration   2: 13.751 s/op
Iteration   3: 13.285 s/op
Iteration   4: 13.229 s/op
Iteration   5: 13.272 s/op
Iteration   6: 13.206 s/op
Iteration   7: 13.244 s/op
Iteration   8: 13.220 s/op
Iteration   9: 13.220 s/op
Iteration  10: 13.218 s/op
Iteration  11: 13.224 s/op
Iteration  12: 13.231 s/op
Iteration  13: 13.226 s/op
Iteration  14: 13.240 s/op
Iteration  15: 13.222 s/op
Iteration  16: 13.238 s/op
Iteration  17: 13.324 s/op
Iteration  18: 13.308 s/op
Iteration  19: 13.315 s/op
Iteration  20: 13.311 s/op
Iteration  21: 13.319 s/op
Iteration  22: 13.323 s/op
Iteration  23: 13.324 s/op
Iteration  24: 13.358 s/op
Iteration  25: 13.304 s/op
Iteration  26: 13.322 s/op
Iteration  27: 13.322 s/op
Iteration  28: 13.300 s/op
Iteration  29: 13.305 s/op
Iteration  30: 13.314 s/op
Iteration  31: 13.332 s/op
Iteration  32: 13.328 s/op
Iteration  33: 13.318 s/op
Iteration  34: 13.302 s/op
Iteration  35: 13.345 s/op
Iteration  36: 13.359 s/op
Iteration  37: 13.322 s/op
Iteration  38: 13.333 s/op
Iteration  39: 13.319 s/op
Iteration  40: 13.318 s/op
Iteration  41: 13.306 s/op
Iteration  42: 13.328 s/op
Iteration  43: 13.352 s/op
Iteration  44: 13.321 s/op
Iteration  45: 13.345 s/op
Iteration  46: 13.307 s/op
Iteration  47: 13.318 s/op
Iteration  48: 13.348 s/op
Iteration  49: 13.338 s/op
Iteration  50: 13.338 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     13.346 ?(99.9%) 0.143 s/op

  Histogram, s/op:
    [13.000, 13.250) = 12 
    [13.250, 13.500) = 36 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 1 
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 0 
    [14.750, 15.000) = 0 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 1 
    [15.500, 15.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.206 s/op
     p(50.0000) =     13.318 s/op
     p(90.0000) =     13.351 s/op
     p(95.0000) =     13.535 s/op
     p(99.0000) =     15.267 s/op
     p(99.9000) =     15.267 s/op
     p(99.9900) =     15.267 s/op
     p(99.9990) =     15.267 s/op
     p(99.9999) =     15.267 s/op
    p(100.0000) =     15.267 s/op


# Run complete. Total time: 00:11:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  13.346 ? 0.143   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9-8u222-b10_1564624178473.json
{"wallclock_times": [668.465327781], "core_cycle_counts": [[409257178358], [338570450369], [722319119528], [695021580193]], "aperf_counts": [[407311803397], [338421525406], [722206817179], [694945482221]], "mperf_counts": [[407315241254], [338422341640], [722206954712], [694945556430]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 04:00:46: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-08-01 04:00:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 04:00:47: INFO] 61 executions left in scheduler queue
[2019-08-01 04:00:47: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:00:47: INFO] Estimated completion (next execution): 2019-08-01 04:14:26 (0:13:38 from now)
[2019-08-01 04:00:47: INFO] Reboot in preparation for next execution
[2019-08-01 04:05:01: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 04:05:01: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 04:05:01: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 04:05:01: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 04:05:01: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 04:13:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.853 s/op
Iteration   2: 10.201 s/op
Iteration   3: 9.936 s/op
Iteration   4: 10.118 s/op
Iteration   5: 9.810 s/op
Iteration   6: 9.800 s/op
Iteration   7: 9.849 s/op
Iteration   8: 9.801 s/op
Iteration   9: 9.827 s/op
Iteration  10: 9.786 s/op
Iteration  11: 9.826 s/op
Iteration  12: 9.810 s/op
Iteration  13: 9.802 s/op
Iteration  14: 9.798 s/op
Iteration  15: 9.785 s/op
Iteration  16: 9.811 s/op
Iteration  17: 9.832 s/op
Iteration  18: 9.810 s/op
Iteration  19: 9.807 s/op
Iteration  20: 9.793 s/op
Iteration  21: 9.839 s/op
Iteration  22: 9.816 s/op
Iteration  23: 9.817 s/op
Iteration  24: 9.840 s/op
Iteration  25: 9.799 s/op
Iteration  26: 9.804 s/op
Iteration  27: 9.781 s/op
Iteration  28: 9.863 s/op
Iteration  29: 9.808 s/op
Iteration  30: 9.805 s/op
Iteration  31: 9.780 s/op
Iteration  32: 9.846 s/op
Iteration  33: 9.846 s/op
Iteration  34: 9.792 s/op
Iteration  35: 9.780 s/op
Iteration  36: 9.784 s/op
Iteration  37: 9.841 s/op
Iteration  38: 9.797 s/op
Iteration  39: 9.820 s/op
Iteration  40: 9.789 s/op
Iteration  41: 9.806 s/op
Iteration  42: 9.802 s/op
Iteration  43: 9.803 s/op
Iteration  44: 9.804 s/op
Iteration  45: 9.795 s/op
Iteration  46: 9.816 s/op
Iteration  47: 9.796 s/op
Iteration  48: 9.807 s/op
Iteration  49: 9.817 s/op
Iteration  50: 9.781 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.827 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [ 9.700,  9.750) = 0 
    [ 9.750,  9.800) = 15 
    [ 9.800,  9.850) = 30 
    [ 9.850,  9.900) = 2 
    [ 9.900,  9.950) = 1 
    [ 9.950, 10.000) = 0 
    [10.000, 10.050) = 0 
    [10.050, 10.100) = 0 
    [10.100, 10.150) = 1 
    [10.150, 10.200) = 0 
    [10.200, 10.250) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.780 s/op
     p(50.0000) =      9.807 s/op
     p(90.0000) =      9.853 s/op
     p(95.0000) =     10.018 s/op
     p(99.0000) =     10.201 s/op
     p(99.9000) =     10.201 s/op
     p(99.9900) =     10.201 s/op
     p(99.9990) =     10.201 s/op
     p(99.9999) =     10.201 s/op
    p(100.0000) =     10.201 s/op


# Run complete. Total time: 00:08:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.827 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot_12.0.2_1564625101360.json
{"wallclock_times": [492.314114268], "core_cycle_counts": [[125421755534], [320890185300], [555216722523], [597838661773]], "aperf_counts": [[123956357771], [320820040778], [555185443546], [597800830294]], "mperf_counts": [[124530597210], [320859920558], [555237583684], [597845539302]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 04:13:13: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:13:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 04:13:14: INFO] 60 executions left in scheduler queue
[2019-08-01 04:13:14: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:13:14: INFO] Estimated completion (next execution): 2019-08-01 04:23:57 (0:10:42 from now)
[2019-08-01 04:13:14: INFO] Reboot in preparation for next execution
[2019-08-01 04:17:25: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 04:17:25: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 04:17:25: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 04:17:25: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 04:17:25: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 04:30:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.105 s/op
Iteration   2: 16.395 s/op
Iteration   3: 16.327 s/op
Iteration   4: 16.255 s/op
Iteration   5: 16.511 s/op
Iteration   6: 16.507 s/op
Iteration   7: 16.248 s/op
Iteration   8: 16.267 s/op
Iteration   9: 16.252 s/op
Iteration  10: 16.237 s/op
Iteration  11: 16.210 s/op
Iteration  12: 16.243 s/op
Iteration  13: 16.159 s/op
Iteration  14: 16.179 s/op
Iteration  15: 16.108 s/op
Iteration  16: 16.177 s/op
Iteration  17: 16.217 s/op
Iteration  18: 16.196 s/op
Iteration  19: 16.266 s/op
Iteration  20: 16.215 s/op
Iteration  21: 16.245 s/op
Iteration  22: 16.199 s/op
Iteration  23: 16.217 s/op
Iteration  24: 16.170 s/op
Iteration  25: 16.156 s/op
Iteration  26: 16.286 s/op
Iteration  27: 16.167 s/op
Iteration  28: 16.259 s/op
Iteration  29: 16.236 s/op
Iteration  30: 16.217 s/op
Iteration  31: 16.226 s/op
Iteration  32: 16.225 s/op
Iteration  33: 16.249 s/op
Iteration  34: 16.185 s/op
Iteration  35: 16.145 s/op
Iteration  36: 16.148 s/op
Iteration  37: 16.151 s/op
Iteration  38: 16.147 s/op
Iteration  39: 16.180 s/op
Iteration  40: 16.238 s/op
Iteration  41: 16.255 s/op
Iteration  42: 16.319 s/op
Iteration  43: 16.246 s/op
Iteration  44: 16.229 s/op
Iteration  45: 16.196 s/op
Iteration  46: 16.158 s/op
Iteration  47: 16.168 s/op
Iteration  48: 16.153 s/op
Iteration  49: 16.223 s/op
Iteration  50: 16.197 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.225 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [16.100, 16.150) = 5 
    [16.150, 16.200) = 16 
    [16.200, 16.250) = 17 
    [16.250, 16.300) = 7 
    [16.300, 16.350) = 2 
    [16.350, 16.400) = 1 
    [16.400, 16.450) = 0 
    [16.450, 16.500) = 0 
    [16.500, 16.550) = 2 

  Percentiles, s/op:
      p(0.0000) =     16.105 s/op
     p(50.0000) =     16.217 s/op
     p(90.0000) =     16.315 s/op
     p(95.0000) =     16.446 s/op
     p(99.0000) =     16.511 s/op
     p(99.9000) =     16.511 s/op
     p(99.9900) =     16.511 s/op
     p(99.9990) =     16.511 s/op
     p(99.9999) =     16.511 s/op
    p(100.0000) =     16.511 s/op


# Run complete. Total time: 00:13:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.225 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot_12.0.2_1564625845548.json
{"wallclock_times": [812.2569567620001], "core_cycle_counts": [[523592976885], [840312418857], [545540051602], [707313021713]], "aperf_counts": [[521496435235], [840185174677], [545488798939], [707242468446]], "mperf_counts": [[522316845632], [840663630700], [545590143790], [707383307026]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 04:30:57: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:30:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 04:30:58: INFO] 59 executions left in scheduler queue
[2019-08-01 04:30:58: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:30:58: INFO] Estimated completion (next execution): 2019-08-01 04:47:01 (0:16:02 from now)
[2019-08-01 04:30:58: INFO] Reboot in preparation for next execution
[2019-08-01 04:35:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 04:35:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 04:35:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 04:35:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 04:35:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 04:40:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.822 s/op
Iteration   2: 6.500 s/op
Iteration   3: 7.581 s/op
Iteration   4: 6.459 s/op
Iteration   5: 6.386 s/op
Iteration   6: 6.451 s/op
Iteration   7: 6.470 s/op
Iteration   8: 6.387 s/op
Iteration   9: 6.507 s/op
Iteration  10: 6.392 s/op
Iteration  11: 6.402 s/op
Iteration  12: 6.394 s/op
Iteration  13: 6.541 s/op
Iteration  14: 6.440 s/op
Iteration  15: 6.425 s/op
Iteration  16: 6.431 s/op
Iteration  17: 6.425 s/op
Iteration  18: 6.437 s/op
Iteration  19: 6.431 s/op
Iteration  20: 6.392 s/op
Iteration  21: 6.544 s/op
Iteration  22: 6.429 s/op
Iteration  23: 6.412 s/op
Iteration  24: 6.408 s/op
Iteration  25: 6.401 s/op
Iteration  26: 6.559 s/op
Iteration  27: 6.392 s/op
Iteration  28: 6.379 s/op
Iteration  29: 6.508 s/op
Iteration  30: 6.370 s/op
Iteration  31: 6.384 s/op
Iteration  32: 6.572 s/op
Iteration  33: 6.452 s/op
Iteration  34: 6.401 s/op
Iteration  35: 6.410 s/op
Iteration  36: 6.408 s/op
Iteration  37: 6.570 s/op
Iteration  38: 6.431 s/op
Iteration  39: 6.426 s/op
Iteration  40: 6.430 s/op
Iteration  41: 6.412 s/op
Iteration  42: 6.428 s/op
Iteration  43: 6.433 s/op
Iteration  44: 6.409 s/op
Iteration  45: 6.401 s/op
Iteration  46: 6.547 s/op
Iteration  47: 6.411 s/op
Iteration  48: 6.408 s/op
Iteration  49: 6.415 s/op
Iteration  50: 6.414 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.469 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 1 
    [6.375, 6.500) = 38 
    [6.500, 6.625) = 9 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 1 
    [6.875, 7.000) = 0 
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 1 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.370 s/op
     p(50.0000) =      6.425 s/op
     p(90.0000) =      6.558 s/op
     p(95.0000) =      6.685 s/op
     p(99.0000) =      7.581 s/op
     p(99.9000) =      7.581 s/op
     p(99.9900) =      7.581 s/op
     p(99.9990) =      7.581 s/op
     p(99.9999) =      7.581 s/op
    p(100.0000) =      7.581 s/op


# Run complete. Total time: 00:05:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.469 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot_12.0.2_1564626911001.json
{"wallclock_times": [324.564664602], "core_cycle_counts": [[272437437064], [298003313201], [280247405762], [282829081706]], "aperf_counts": [[271613241601], [297924672293], [280201594694], [282794392640]], "mperf_counts": [[271915652604], [298131377656], [280418807390], [285414836458]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 04:40:35: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:40:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 04:40:36: INFO] 58 executions left in scheduler queue
[2019-08-01 04:40:36: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:40:36: INFO] Estimated completion (next execution): 2019-08-01 04:48:31 (0:07:54 from now)
[2019-08-01 04:40:36: INFO] Reboot in preparation for next execution
[2019-08-01 04:45:00: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 04:45:00: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 04:45:00: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 04:45:00: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 04:45:00: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 04:50:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.399 s/op
Iteration   2: 6.585 s/op
Iteration   3: 6.455 s/op
Iteration   4: 6.079 s/op
Iteration   5: 6.713 s/op
Iteration   6: 6.919 s/op
Iteration   7: 6.637 s/op
Iteration   8: 6.649 s/op
Iteration   9: 6.625 s/op
Iteration  10: 6.623 s/op
Iteration  11: 6.628 s/op
Iteration  12: 6.648 s/op
Iteration  13: 6.611 s/op
Iteration  14: 6.620 s/op
Iteration  15: 6.611 s/op
Iteration  16: 6.623 s/op
Iteration  17: 6.609 s/op
Iteration  18: 6.591 s/op
Iteration  19: 6.611 s/op
Iteration  20: 6.586 s/op
Iteration  21: 6.637 s/op
Iteration  22: 6.618 s/op
Iteration  23: 6.640 s/op
Iteration  24: 6.622 s/op
Iteration  25: 6.580 s/op
Iteration  26: 6.649 s/op
Iteration  27: 6.460 s/op
Iteration  28: 6.624 s/op
Iteration  29: 6.656 s/op
Iteration  30: 6.589 s/op
Iteration  31: 6.638 s/op
Iteration  32: 6.642 s/op
Iteration  33: 6.636 s/op
Iteration  34: 6.613 s/op
Iteration  35: 6.607 s/op
Iteration  36: 6.617 s/op
Iteration  37: 6.611 s/op
Iteration  38: 6.601 s/op
Iteration  39: 6.616 s/op
Iteration  40: 6.625 s/op
Iteration  41: 6.601 s/op
Iteration  42: 6.605 s/op
Iteration  43: 6.610 s/op
Iteration  44: 6.618 s/op
Iteration  45: 6.626 s/op
Iteration  46: 6.620 s/op
Iteration  47: 6.608 s/op
Iteration  48: 6.629 s/op
Iteration  49: 6.588 s/op
Iteration  50: 6.440 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.601 ?(99.9%) 0.051 s/op

  Histogram, s/op:
    [6.000, 6.100) = 1 
    [6.100, 6.200) = 0 
    [6.200, 6.300) = 0 
    [6.300, 6.400) = 1 
    [6.400, 6.500) = 3 
    [6.500, 6.600) = 6 
    [6.600, 6.700) = 37 
    [6.700, 6.800) = 1 
    [6.800, 6.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.079 s/op
     p(50.0000) =      6.617 s/op
     p(90.0000) =      6.649 s/op
     p(95.0000) =      6.681 s/op
     p(99.0000) =      6.919 s/op
     p(99.9000) =      6.919 s/op
     p(99.9900) =      6.919 s/op
     p(99.9990) =      6.919 s/op
     p(99.9999) =      6.919 s/op
    p(100.0000) =      6.919 s/op


# Run complete. Total time: 00:05:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.601 ? 0.051   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot_12.0.2_1564627500601.json
{"wallclock_times": [331.11044697299997], "core_cycle_counts": [[194092688559], [209146657167], [195464572584], [351841428063]], "aperf_counts": [[193234780255], [209085955819], [195428501682], [351801720179]], "mperf_counts": [[219782206460], [237265383954], [221599893908], [397138192562]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 04:50:31: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-08-01 04:50:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 04:50:32: INFO] 57 executions left in scheduler queue
[2019-08-01 04:50:32: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 04:50:32: INFO] Estimated completion (next execution): 2019-08-01 04:58:34 (0:08:01 from now)
[2019-08-01 04:50:32: INFO] Reboot in preparation for next execution
[2019-08-01 04:54:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 04:54:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 04:54:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 04:54:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 04:54:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 05:00:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.603 s/op
Iteration   2: 6.155 s/op
Iteration   3: 7.503 s/op
Iteration   4: 7.104 s/op
Iteration   5: 7.003 s/op
Iteration   6: 7.080 s/op
Iteration   7: 7.088 s/op
Iteration   8: 6.948 s/op
Iteration   9: 7.068 s/op
Iteration  10: 7.064 s/op
Iteration  11: 7.070 s/op
Iteration  12: 7.075 s/op
Iteration  13: 7.067 s/op
Iteration  14: 7.061 s/op
Iteration  15: 7.088 s/op
Iteration  16: 7.055 s/op
Iteration  17: 7.031 s/op
Iteration  18: 7.030 s/op
Iteration  19: 7.035 s/op
Iteration  20: 7.035 s/op
Iteration  21: 7.045 s/op
Iteration  22: 7.033 s/op
Iteration  23: 7.043 s/op
Iteration  24: 7.040 s/op
Iteration  25: 7.023 s/op
Iteration  26: 7.037 s/op
Iteration  27: 7.038 s/op
Iteration  28: 7.033 s/op
Iteration  29: 7.022 s/op
Iteration  30: 7.041 s/op
Iteration  31: 7.021 s/op
Iteration  32: 7.041 s/op
Iteration  33: 7.045 s/op
Iteration  34: 6.836 s/op
Iteration  35: 7.019 s/op
Iteration  36: 7.028 s/op
Iteration  37: 7.063 s/op
Iteration  38: 7.064 s/op
Iteration  39: 7.061 s/op
Iteration  40: 7.057 s/op
Iteration  41: 7.065 s/op
Iteration  42: 7.030 s/op
Iteration  43: 7.036 s/op
Iteration  44: 7.027 s/op
Iteration  45: 7.046 s/op
Iteration  46: 7.038 s/op
Iteration  47: 7.019 s/op
Iteration  48: 7.036 s/op
Iteration  49: 7.016 s/op
Iteration  50: 7.015 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.042 ?(99.9%) 0.083 s/op

  Histogram, s/op:
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 1 
    [6.875, 7.000) = 1 
    [7.000, 7.125) = 45 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 2 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.155 s/op
     p(50.0000) =      7.039 s/op
     p(90.0000) =      7.087 s/op
     p(95.0000) =      7.283 s/op
     p(99.0000) =      7.603 s/op
     p(99.9000) =      7.603 s/op
     p(99.9900) =      7.603 s/op
     p(99.9990) =      7.603 s/op
     p(99.9999) =      7.603 s/op
    p(100.0000) =      7.603 s/op


# Run complete. Total time: 00:05:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  7.042 ? 0.083   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_hotspot_11.0.4_1564628081648.json
{"wallclock_times": [353.195414077], "core_cycle_counts": [[377412731889], [276148539668], [271188146812], [87972485272]], "aperf_counts": [[376667967856], [276058095918], [271126551588], [87925805189]], "mperf_counts": [[429552145638], [313874770104], [308245131254], [97348057460]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 05:00:34: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 05:00:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 05:00:35: INFO] 56 executions left in scheduler queue
[2019-08-01 05:00:35: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 05:00:35: INFO] Estimated completion (next execution): 2019-08-01 05:08:59 (0:08:23 from now)
[2019-08-01 05:00:35: INFO] Reboot in preparation for next execution
[2019-08-01 05:04:47: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 05:04:47: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 05:04:47: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 05:04:47: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 05:04:47: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 05:13:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.861 s/op
Iteration   2: 11.085 s/op
Iteration   3: 10.655 s/op
Iteration   4: 10.395 s/op
Iteration   5: 10.379 s/op
Iteration   6: 10.389 s/op
Iteration   7: 10.407 s/op
Iteration   8: 10.387 s/op
Iteration   9: 10.400 s/op
Iteration  10: 10.412 s/op
Iteration  11: 10.399 s/op
Iteration  12: 10.440 s/op
Iteration  13: 10.439 s/op
Iteration  14: 10.409 s/op
Iteration  15: 10.424 s/op
Iteration  16: 10.402 s/op
Iteration  17: 10.390 s/op
Iteration  18: 10.417 s/op
Iteration  19: 10.401 s/op
Iteration  20: 10.398 s/op
Iteration  21: 10.403 s/op
Iteration  22: 10.414 s/op
Iteration  23: 10.386 s/op
Iteration  24: 10.426 s/op
Iteration  25: 10.394 s/op
Iteration  26: 10.422 s/op
Iteration  27: 10.405 s/op
Iteration  28: 10.451 s/op
Iteration  29: 10.407 s/op
Iteration  30: 10.379 s/op
Iteration  31: 10.415 s/op
Iteration  32: 10.413 s/op
Iteration  33: 10.427 s/op
Iteration  34: 10.430 s/op
Iteration  35: 10.390 s/op
Iteration  36: 10.376 s/op
Iteration  37: 10.403 s/op
Iteration  38: 10.397 s/op
Iteration  39: 10.400 s/op
Iteration  40: 10.406 s/op
Iteration  41: 10.422 s/op
Iteration  42: 10.391 s/op
Iteration  43: 10.390 s/op
Iteration  44: 10.409 s/op
Iteration  45: 10.387 s/op
Iteration  46: 10.381 s/op
Iteration  47: 10.407 s/op
Iteration  48: 10.433 s/op
Iteration  49: 10.425 s/op
Iteration  50: 10.378 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.433 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [10.300, 10.350) = 0 
    [10.350, 10.400) = 20 
    [10.400, 10.450) = 26 
    [10.450, 10.500) = 1 
    [10.500, 10.550) = 0 
    [10.550, 10.600) = 0 
    [10.600, 10.650) = 0 
    [10.650, 10.700) = 1 
    [10.700, 10.750) = 0 
    [10.750, 10.800) = 0 
    [10.800, 10.850) = 0 
    [10.850, 10.900) = 1 
    [10.900, 10.950) = 0 
    [10.950, 11.000) = 0 
    [11.000, 11.050) = 0 
    [11.050, 11.100) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.376 s/op
     p(50.0000) =     10.405 s/op
     p(90.0000) =     10.440 s/op
     p(95.0000) =     10.748 s/op
     p(99.0000) =     11.085 s/op
     p(99.9000) =     11.085 s/op
     p(99.9900) =     11.085 s/op
     p(99.9990) =     11.085 s/op
     p(99.9999) =     11.085 s/op
    p(100.0000) =     11.085 s/op


# Run complete. Total time: 00:08:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  10.433 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_hotspot_11.0.4_1564628687590.json
{"wallclock_times": [522.669231073], "core_cycle_counts": [[727560691076], [204669256928], [390690989012], [366643214155]], "aperf_counts": [[726611736549], [204486685830], [390600009062], [366574406637]], "mperf_counts": [[727114105140], [204527263766], [390995021856], [366605729048]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 05:13:30: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 05:13:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 05:13:31: INFO] 55 executions left in scheduler queue
[2019-08-01 05:13:31: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 05:13:31: INFO] Estimated completion (next execution): 2019-08-01 05:24:44 (0:11:12 from now)
[2019-08-01 05:13:31: INFO] Reboot in preparation for next execution
[2019-08-01 05:17:43: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 05:17:43: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 05:17:43: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 05:17:43: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 05:17:43: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 05:23:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.274 s/op
Iteration   2: 6.911 s/op
Iteration   3: 6.916 s/op
Iteration   4: 6.919 s/op
Iteration   5: 6.824 s/op
Iteration   6: 6.826 s/op
Iteration   7: 6.709 s/op
Iteration   8: 6.828 s/op
Iteration   9: 6.693 s/op
Iteration  10: 6.824 s/op
Iteration  11: 6.817 s/op
Iteration  12: 6.688 s/op
Iteration  13: 6.826 s/op
Iteration  14: 6.691 s/op
Iteration  15: 6.830 s/op
Iteration  16: 6.816 s/op
Iteration  17: 6.694 s/op
Iteration  18: 6.833 s/op
Iteration  19: 6.814 s/op
Iteration  20: 6.675 s/op
Iteration  21: 6.814 s/op
Iteration  22: 6.687 s/op
Iteration  23: 6.807 s/op
Iteration  24: 6.815 s/op
Iteration  25: 6.817 s/op
Iteration  26: 6.810 s/op
Iteration  27: 6.809 s/op
Iteration  28: 6.784 s/op
Iteration  29: 6.769 s/op
Iteration  30: 6.753 s/op
Iteration  31: 6.734 s/op
Iteration  32: 6.846 s/op
Iteration  33: 6.650 s/op
Iteration  34: 6.781 s/op
Iteration  35: 6.784 s/op
Iteration  36: 6.676 s/op
Iteration  37: 6.836 s/op
Iteration  38: 6.654 s/op
Iteration  39: 6.799 s/op
Iteration  40: 6.803 s/op
Iteration  41: 6.682 s/op
Iteration  42: 6.807 s/op
Iteration  43: 6.654 s/op
Iteration  44: 6.846 s/op
Iteration  45: 6.814 s/op
Iteration  46: 6.676 s/op
Iteration  47: 6.819 s/op
Iteration  48: 6.836 s/op
Iteration  49: 6.669 s/op
Iteration  50: 6.787 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.789 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 13 
    [6.700, 6.750) = 2 
    [6.750, 6.800) = 7 
    [6.800, 6.850) = 24 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 3 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 0 
    [7.100, 7.150) = 0 
    [7.150, 7.200) = 0 
    [7.200, 7.250) = 0 
    [7.250, 7.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.650 s/op
     p(50.0000) =      6.808 s/op
     p(90.0000) =      6.846 s/op
     p(95.0000) =      6.917 s/op
     p(99.0000) =      7.274 s/op
     p(99.9000) =      7.274 s/op
     p(99.9900) =      7.274 s/op
     p(99.9990) =      7.274 s/op
     p(99.9999) =      7.274 s/op
    p(100.0000) =      7.274 s/op


# Run complete. Total time: 00:05:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.789 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_hotspot_11.0.4_1564629463503.json
{"wallclock_times": [340.624167572], "core_cycle_counts": [[252664135554], [261550334119], [360564320474], [351893068998]], "aperf_counts": [[251765531374], [261460601831], [360520651451], [351848317268]], "mperf_counts": [[252022232222], [261656684104], [360772895024], [351913511144]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 05:23:24: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 05:23:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 05:23:25: INFO] 54 executions left in scheduler queue
[2019-08-01 05:23:25: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 05:23:25: INFO] Estimated completion (next execution): 2019-08-01 05:31:35 (0:08:10 from now)
[2019-08-01 05:23:25: INFO] Reboot in preparation for next execution
[2019-08-01 05:27:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 05:27:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 05:27:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 05:27:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 05:27:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 05:41:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.817 s/op
Iteration   2: 16.633 s/op
Iteration   3: 16.729 s/op
Iteration   4: 16.362 s/op
Iteration   5: 16.381 s/op
Iteration   6: 16.340 s/op
Iteration   7: 16.304 s/op
Iteration   8: 16.341 s/op
Iteration   9: 16.379 s/op
Iteration  10: 16.343 s/op
Iteration  11: 16.320 s/op
Iteration  12: 16.369 s/op
Iteration  13: 16.406 s/op
Iteration  14: 16.390 s/op
Iteration  15: 16.346 s/op
Iteration  16: 16.334 s/op
Iteration  17: 16.355 s/op
Iteration  18: 16.296 s/op
Iteration  19: 16.333 s/op
Iteration  20: 16.381 s/op
Iteration  21: 16.351 s/op
Iteration  22: 16.315 s/op
Iteration  23: 16.324 s/op
Iteration  24: 16.337 s/op
Iteration  25: 16.382 s/op
Iteration  26: 16.350 s/op
Iteration  27: 16.351 s/op
Iteration  28: 16.369 s/op
Iteration  29: 16.349 s/op
Iteration  30: 16.306 s/op
Iteration  31: 16.333 s/op
Iteration  32: 16.389 s/op
Iteration  33: 16.355 s/op
Iteration  34: 16.383 s/op
Iteration  35: 16.309 s/op
Iteration  36: 16.337 s/op
Iteration  37: 16.349 s/op
Iteration  38: 16.338 s/op
Iteration  39: 16.351 s/op
Iteration  40: 16.369 s/op
Iteration  41: 16.379 s/op
Iteration  42: 16.305 s/op
Iteration  43: 16.349 s/op
Iteration  44: 16.362 s/op
Iteration  45: 16.338 s/op
Iteration  46: 16.364 s/op
Iteration  47: 16.613 s/op
Iteration  48: 16.392 s/op
Iteration  49: 16.380 s/op
Iteration  50: 16.312 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     16.358 ?(99.9%) 0.055 s/op

  Histogram, s/op:
    [15.800, 15.900) = 1 
    [15.900, 16.000) = 0 
    [16.000, 16.100) = 0 
    [16.100, 16.200) = 0 
    [16.200, 16.300) = 1 
    [16.300, 16.400) = 44 
    [16.400, 16.500) = 1 
    [16.500, 16.600) = 0 
    [16.600, 16.700) = 2 

  Percentiles, s/op:
      p(0.0000) =     15.817 s/op
     p(50.0000) =     16.350 s/op
     p(90.0000) =     16.392 s/op
     p(95.0000) =     16.622 s/op
     p(99.0000) =     16.729 s/op
     p(99.9000) =     16.729 s/op
     p(99.9900) =     16.729 s/op
     p(99.9990) =     16.729 s/op
     p(99.9999) =     16.729 s/op
    p(100.0000) =     16.729 s/op


# Run complete. Total time: 00:13:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  16.358 ? 0.055   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_hotspot_11.0.4_1564630056482.json
{"wallclock_times": [818.975879249], "core_cycle_counts": [[385270394471], [258349513093], [1552510765777], [445794369164]], "aperf_counts": [[383062291427], [258211992150], [1552467469473], [445674658443]], "mperf_counts": [[383530671034], [258424383784], [1552535797732], [445756725774]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 05:41:15: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-08-01 05:41:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 05:41:16: INFO] 53 executions left in scheduler queue
[2019-08-01 05:41:16: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-01 05:41:16: INFO] Estimated completion (next execution): 2019-08-01 05:57:25 (0:16:09 from now)
[2019-08-01 05:41:16: INFO] Reboot in preparation for next execution
[2019-08-01 05:47:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.058 s/op
Iteration   2: 1.561 s/op
Iteration   3: 1.871 s/op
Iteration   4: 1.941 s/op
Iteration   5: 1.903 s/op
Iteration   6: 1.897 s/op
Iteration   7: 1.898 s/op
Iteration   8: 1.904 s/op
Iteration   9: 1.906 s/op
Iteration  10: 1.900 s/op
Iteration  11: 1.902 s/op
Iteration  12: 1.904 s/op
Iteration  13: 1.895 s/op
Iteration  14: 1.899 s/op
Iteration  15: 1.900 s/op
Iteration  16: 1.902 s/op
Iteration  17: 1.901 s/op
Iteration  18: 1.913 s/op
Iteration  19: 1.905 s/op
Iteration  20: 1.905 s/op
Iteration  21: 1.903 s/op
Iteration  22: 1.897 s/op
Iteration  23: 1.898 s/op
Iteration  24: 1.904 s/op
Iteration  25: 1.896 s/op
Iteration  26: 1.899 s/op
Iteration  27: 1.896 s/op
Iteration  28: 1.897 s/op
Iteration  29: 1.899 s/op
Iteration  30: 1.898 s/op
Iteration  31: 1.903 s/op
Iteration  32: 1.899 s/op
Iteration  33: 1.903 s/op
Iteration  34: 1.902 s/op
Iteration  35: 1.901 s/op
Iteration  36: 1.910 s/op
Iteration  37: 1.902 s/op
Iteration  38: 1.896 s/op
Iteration  39: 1.900 s/op
Iteration  40: 1.895 s/op
Iteration  41: 1.894 s/op
Iteration  42: 1.901 s/op
Iteration  43: 1.901 s/op
Iteration  44: 1.903 s/op
Iteration  45: 1.901 s/op
Iteration  46: 1.905 s/op
Iteration  47: 1.906 s/op
Iteration  48: 1.899 s/op
Iteration  49: 1.903 s/op
Iteration  50: 1.901 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.897 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 1 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 19 
    [1.900, 1.950) = 29 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.561 s/op
     p(50.0000) =      1.901 s/op
     p(90.0000) =      1.906 s/op
     p(95.0000) =      1.925 s/op
     p(99.0000) =      2.058 s/op
     p(99.9000) =      2.058 s/op
     p(99.9900) =      2.058 s/op
     p(99.9990) =      2.058 s/op
     p(99.9999) =      2.058 s/op
    p(100.0000) =      2.058 s/op


# Run complete. Total time: 00:01:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.897 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot-8u222-b10_1564631127442.json
{"wallclock_times": [95.73492695099998], "core_cycle_counts": [[151904526807], [62157631743], [47089792395], [60925546648]], "aperf_counts": [[151696469868], [62104576362], [47061658627], [60907292353]], "mperf_counts": [[151704621470], [62105174650], [47061698308], [60926459914]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 05:47:03: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-01 05:47:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 05:47:04: INFO] 52 executions left in scheduler queue
[2019-08-01 05:47:04: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-01 05:47:04: INFO] Estimated completion (next execution): 2019-08-01 05:51:10 (0:04:05 from now)
[2019-08-01 05:47:04: INFO] Reboot in preparation for next execution
[2019-08-01 05:53:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.004 s/op
Iteration   2: 1.608 s/op
Iteration   3: 1.949 s/op
Iteration   4: 1.864 s/op
Iteration   5: 2.045 s/op
Iteration   6: 2.158 s/op
Iteration   7: 2.154 s/op
Iteration   8: 2.161 s/op
Iteration   9: 2.154 s/op
Iteration  10: 2.154 s/op
Iteration  11: 2.155 s/op
Iteration  12: 2.150 s/op
Iteration  13: 2.158 s/op
Iteration  14: 2.150 s/op
Iteration  15: 2.152 s/op
Iteration  16: 2.165 s/op
Iteration  17: 2.160 s/op
Iteration  18: 2.154 s/op
Iteration  19: 2.160 s/op
Iteration  20: 2.157 s/op
Iteration  21: 2.167 s/op
Iteration  22: 2.158 s/op
Iteration  23: 2.157 s/op
Iteration  24: 2.163 s/op
Iteration  25: 2.160 s/op
Iteration  26: 2.159 s/op
Iteration  27: 2.158 s/op
Iteration  28: 2.158 s/op
Iteration  29: 2.158 s/op
Iteration  30: 2.161 s/op
Iteration  31: 2.153 s/op
Iteration  32: 2.159 s/op
Iteration  33: 2.170 s/op
Iteration  34: 2.162 s/op
Iteration  35: 2.174 s/op
Iteration  36: 2.176 s/op
Iteration  37: 2.174 s/op
Iteration  38: 2.179 s/op
Iteration  39: 2.171 s/op
Iteration  40: 2.153 s/op
Iteration  41: 2.156 s/op
Iteration  42: 2.159 s/op
Iteration  43: 2.162 s/op
Iteration  44: 2.173 s/op
Iteration  45: 2.168 s/op
Iteration  46: 2.167 s/op
Iteration  47: 2.171 s/op
Iteration  48: 2.174 s/op
Iteration  49: 2.169 s/op
Iteration  50: 2.170 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.135 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 2 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 2 
    [2.150, 2.200) = 43 

  Percentiles, s/op:
      p(0.0000) =      1.608 s/op
     p(50.0000) =      2.159 s/op
     p(90.0000) =      2.174 s/op
     p(95.0000) =      2.175 s/op
     p(99.0000) =      2.179 s/op
     p(99.9000) =      2.179 s/op
     p(99.9900) =      2.179 s/op
     p(99.9990) =      2.179 s/op
     p(99.9999) =      2.179 s/op
    p(100.0000) =      2.179 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.135 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot-8u222-b10_1564631475608.json
{"wallclock_times": [107.53794514499998], "core_cycle_counts": [[206923787926], [87731361134], [17437499578], [36790844735]], "aperf_counts": [[206786178137], [87689353352], [17421416000], [36777672380]], "mperf_counts": [[206790615060], [87689346024], [17430978052], [36777999196]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 05:53:03: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-08-01 05:53:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 05:53:04: INFO] 51 executions left in scheduler queue
[2019-08-01 05:53:04: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 05:53:04: INFO] Estimated completion (next execution): 2019-08-01 05:57:21 (0:04:17 from now)
[2019-08-01 05:53:04: INFO] Reboot in preparation for next execution
[2019-08-01 05:57:16: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 06:03:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.369 s/op
Iteration   2: 7.456 s/op
Iteration   3: 7.344 s/op
Iteration   4: 7.415 s/op
Iteration   5: 7.300 s/op
Iteration   6: 7.270 s/op
Iteration   7: 7.143 s/op
Iteration   8: 7.137 s/op
Iteration   9: 7.107 s/op
Iteration  10: 7.076 s/op
Iteration  11: 7.021 s/op
Iteration  12: 7.046 s/op
Iteration  13: 7.040 s/op
Iteration  14: 7.044 s/op
Iteration  15: 6.983 s/op
Iteration  16: 7.015 s/op
Iteration  17: 7.042 s/op
Iteration  18: 7.031 s/op
Iteration  19: 7.020 s/op
Iteration  20: 7.040 s/op
Iteration  21: 7.021 s/op
Iteration  22: 7.087 s/op
Iteration  23: 7.083 s/op
Iteration  24: 7.076 s/op
Iteration  25: 6.991 s/op
Iteration  26: 6.979 s/op
Iteration  27: 6.968 s/op
Iteration  28: 7.020 s/op
Iteration  29: 7.035 s/op
Iteration  30: 7.024 s/op
Iteration  31: 7.032 s/op
Iteration  32: 6.990 s/op
Iteration  33: 6.993 s/op
Iteration  34: 6.957 s/op
Iteration  35: 7.038 s/op
Iteration  36: 7.002 s/op
Iteration  37: 7.023 s/op
Iteration  38: 7.007 s/op
Iteration  39: 6.974 s/op
Iteration  40: 6.984 s/op
Iteration  41: 7.027 s/op
Iteration  42: 7.021 s/op
Iteration  43: 7.002 s/op
Iteration  44: 6.996 s/op
Iteration  45: 6.989 s/op
Iteration  46: 6.962 s/op
Iteration  47: 7.031 s/op
Iteration  48: 7.030 s/op
Iteration  49: 6.976 s/op
Iteration  50: 6.981 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.084 ?(99.9%) 0.107 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 14 
    [7.000, 7.250) = 30 
    [7.250, 7.500) = 5 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.957 s/op
     p(50.0000) =      7.026 s/op
     p(90.0000) =      7.297 s/op
     p(95.0000) =      7.433 s/op
     p(99.0000) =      8.369 s/op
     p(99.9000) =      8.369 s/op
     p(99.9900) =      8.369 s/op
     p(99.9990) =      8.369 s/op
     p(99.9999) =      8.369 s/op
    p(100.0000) =      8.369 s/op


# Run complete. Total time: 00:05:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.084 ? 0.107   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_openj9-8u222-b10_1564631836454.json
{"wallclock_times": [355.64146032299993], "core_cycle_counts": [[432702629468], [341694414986], [193906218640], [329105304052]], "aperf_counts": [[431804525515], [341560865653], [193703965350], [329019792308]], "mperf_counts": [[431805775350], [341560967430], [193704661950], [329021626804]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 06:03:12: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 06:03:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 06:03:13: INFO] 50 executions left in scheduler queue
[2019-08-01 06:03:13: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 06:03:13: INFO] Estimated completion (next execution): 2019-08-01 06:11:38 (0:08:25 from now)
[2019-08-01 06:03:13: INFO] Reboot in preparation for next execution
[2019-08-01 06:07:25: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 06:17:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.998 s/op
Iteration   2: 11.996 s/op
Iteration   3: 11.970 s/op
Iteration   4: 12.078 s/op
Iteration   5: 12.137 s/op
Iteration   6: 12.409 s/op
Iteration   7: 12.442 s/op
Iteration   8: 12.430 s/op
Iteration   9: 12.299 s/op
Iteration  10: 12.370 s/op
Iteration  11: 12.367 s/op
Iteration  12: 12.355 s/op
Iteration  13: 12.309 s/op
Iteration  14: 12.344 s/op
Iteration  15: 12.365 s/op
Iteration  16: 12.336 s/op
Iteration  17: 12.280 s/op
Iteration  18: 12.370 s/op
Iteration  19: 12.320 s/op
Iteration  20: 12.255 s/op
Iteration  21: 12.274 s/op
Iteration  22: 12.257 s/op
Iteration  23: 12.178 s/op
Iteration  24: 12.299 s/op
Iteration  25: 12.223 s/op
Iteration  26: 12.259 s/op
Iteration  27: 12.241 s/op
Iteration  28: 12.212 s/op
Iteration  29: 12.243 s/op
Iteration  30: 12.266 s/op
Iteration  31: 12.272 s/op
Iteration  32: 12.259 s/op
Iteration  33: 12.261 s/op
Iteration  34: 12.251 s/op
Iteration  35: 12.242 s/op
Iteration  36: 12.135 s/op
Iteration  37: 12.218 s/op
Iteration  38: 12.251 s/op
Iteration  39: 12.253 s/op
Iteration  40: 12.251 s/op
Iteration  41: 12.254 s/op
Iteration  42: 12.247 s/op
Iteration  43: 12.259 s/op
Iteration  44: 12.145 s/op
Iteration  45: 12.250 s/op
Iteration  46: 12.252 s/op
Iteration  47: 12.148 s/op
Iteration  48: 12.293 s/op
Iteration  49: 12.160 s/op
Iteration  50: 12.278 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.271 ?(99.9%) 0.070 s/op

  Histogram, s/op:
    [11.000, 11.125) = 0 
    [11.125, 11.250) = 0 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 
    [11.875, 12.000) = 2 
    [12.000, 12.125) = 1 
    [12.125, 12.250) = 14 
    [12.250, 12.375) = 29 
    [12.375, 12.500) = 3 
    [12.500, 12.625) = 0 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.970 s/op
     p(50.0000) =     12.258 s/op
     p(90.0000) =     12.370 s/op
     p(95.0000) =     12.436 s/op
     p(99.0000) =     12.998 s/op
     p(99.9000) =     12.998 s/op
     p(99.9900) =     12.998 s/op
     p(99.9990) =     12.998 s/op
     p(99.9999) =     12.998 s/op
    p(100.0000) =     12.998 s/op


# Run complete. Total time: 00:10:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.271 ? 0.070   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_openj9-8u222-b10_1564632445467.json
{"wallclock_times": [614.7544833559999], "core_cycle_counts": [[762156189815], [336050452066], [518348112343], [432176151456]], "aperf_counts": [[760842747242], [335758814200], [518198172457], [432107103741]], "mperf_counts": [[760844474160], [335758721760], [518201871232], [432107098596]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 06:17:40: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 06:17:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 06:17:41: INFO] 49 executions left in scheduler queue
[2019-08-01 06:17:41: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 06:17:41: INFO] Estimated completion (next execution): 2019-08-01 06:30:26 (0:12:45 from now)
[2019-08-01 06:17:41: INFO] Reboot in preparation for next execution
[2019-08-01 06:21:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 06:28:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.451 s/op
Iteration   2: 9.845 s/op
Iteration   3: 8.512 s/op
Iteration   4: 8.181 s/op
Iteration   5: 8.015 s/op
Iteration   6: 8.099 s/op
Iteration   7: 8.069 s/op
Iteration   8: 8.186 s/op
Iteration   9: 8.080 s/op
Iteration  10: 8.044 s/op
Iteration  11: 8.169 s/op
Iteration  12: 8.105 s/op
Iteration  13: 8.199 s/op
Iteration  14: 8.082 s/op
Iteration  15: 8.160 s/op
Iteration  16: 8.072 s/op
Iteration  17: 8.200 s/op
Iteration  18: 8.181 s/op
Iteration  19: 8.076 s/op
Iteration  20: 8.132 s/op
Iteration  21: 8.117 s/op
Iteration  22: 8.074 s/op
Iteration  23: 8.147 s/op
Iteration  24: 8.033 s/op
Iteration  25: 8.143 s/op
Iteration  26: 8.082 s/op
Iteration  27: 8.133 s/op
Iteration  28: 8.161 s/op
Iteration  29: 8.089 s/op
Iteration  30: 8.162 s/op
Iteration  31: 8.154 s/op
Iteration  32: 8.196 s/op
Iteration  33: 8.195 s/op
Iteration  34: 8.088 s/op
Iteration  35: 8.112 s/op
Iteration  36: 7.986 s/op
Iteration  37: 8.188 s/op
Iteration  38: 8.013 s/op
Iteration  39: 8.114 s/op
Iteration  40: 8.148 s/op
Iteration  41: 8.001 s/op
Iteration  42: 8.029 s/op
Iteration  43: 8.032 s/op
Iteration  44: 8.087 s/op
Iteration  45: 8.152 s/op
Iteration  46: 8.118 s/op
Iteration  47: 8.071 s/op
Iteration  48: 8.084 s/op
Iteration  49: 8.033 s/op
Iteration  50: 8.046 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.177 ?(99.9%) 0.157 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 1 
    [ 8.000,  8.250) = 46 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 1 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 1 
    [ 9.500,  9.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.986 s/op
     p(50.0000) =      8.113 s/op
     p(90.0000) =      8.199 s/op
     p(95.0000) =      8.935 s/op
     p(99.0000) =      9.845 s/op
     p(99.9000) =      9.845 s/op
     p(99.9900) =      9.845 s/op
     p(99.9990) =      9.845 s/op
     p(99.9999) =      9.845 s/op
    p(100.0000) =      9.845 s/op


# Run complete. Total time: 00:06:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.177 ? 0.157   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_openj9-8u222-b10_1564633314952.json
{"wallclock_times": [410.261156391], "core_cycle_counts": [[230283864754], [442939847540], [389870310019], [314720904681]], "aperf_counts": [[229087959866], [442856479546], [389766653201], [314662276614]], "mperf_counts": [[229087528298], [442856462076], [389766636476], [314662261556]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 06:28:45: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 06:28:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 06:28:46: INFO] 48 executions left in scheduler queue
[2019-08-01 06:28:46: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 06:28:46: INFO] Estimated completion (next execution): 2019-08-01 06:38:06 (0:09:20 from now)
[2019-08-01 06:28:46: INFO] Reboot in preparation for next execution
[2019-08-01 06:33:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-08-01 06:43:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.261 s/op
Iteration   2: 12.857 s/op
Iteration   3: 12.542 s/op
Iteration   4: 12.575 s/op
Iteration   5: 12.497 s/op
Iteration   6: 12.562 s/op
Iteration   7: 13.108 s/op
Iteration   8: 12.798 s/op
Iteration   9: 12.535 s/op
Iteration  10: 13.193 s/op
Iteration  11: 12.519 s/op
Iteration  12: 12.462 s/op
Iteration  13: 13.238 s/op
Iteration  14: 12.487 s/op
Iteration  15: 12.461 s/op
Iteration  16: 13.081 s/op
Iteration  17: 12.517 s/op
Iteration  18: 12.469 s/op
Iteration  19: 13.040 s/op
Iteration  20: 12.576 s/op
Iteration  21: 12.399 s/op
Iteration  22: 12.594 s/op
Iteration  23: 12.476 s/op
Iteration  24: 12.482 s/op
Iteration  25: 12.462 s/op
Iteration  26: 13.097 s/op
Iteration  27: 12.521 s/op
Iteration  28: 12.545 s/op
Iteration  29: 12.525 s/op
Iteration  30: 13.137 s/op
Iteration  31: 13.197 s/op
Iteration  32: 12.484 s/op
Iteration  33: 12.439 s/op
Iteration  34: 12.642 s/op
Iteration  35: 13.036 s/op
Iteration  36: 12.525 s/op
Iteration  37: 12.509 s/op
Iteration  38: 12.476 s/op
Iteration  39: 13.284 s/op
Iteration  40: 12.433 s/op
Iteration  41: 13.241 s/op
Iteration  42: 12.437 s/op
Iteration  43: 13.139 s/op
Iteration  44: 12.372 s/op
Iteration  45: 12.526 s/op
Iteration  46: 12.533 s/op
Iteration  47: 12.483 s/op
Iteration  48: 13.267 s/op
Iteration  49: 13.141 s/op
Iteration  50: 12.473 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.733 ?(99.9%) 0.185 s/op

  Histogram, s/op:
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 17 
    [12.500, 12.750) = 16 
    [12.750, 13.000) = 2 
    [13.000, 13.250) = 12 
    [13.250, 13.500) = 2 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 0 
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 1 
    [14.500, 14.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.372 s/op
     p(50.0000) =     12.534 s/op
     p(90.0000) =     13.234 s/op
     p(95.0000) =     13.275 s/op
     p(99.0000) =     14.261 s/op
     p(99.9000) =     14.261 s/op
     p(99.9900) =     14.261 s/op
     p(99.9990) =     14.261 s/op
     p(99.9999) =     14.261 s/op
    p(100.0000) =     14.261 s/op


# Run complete. Total time: 00:10:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  12.733 ? 0.185   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_openj9-8u222-b10_1564633991555.json
{"wallclock_times": [637.943372498], "core_cycle_counts": [[518121204610], [561000456670], [593805268482], [419892915214]], "aperf_counts": [[516469590137], [560801670538], [593676099434], [419826276827]], "mperf_counts": [[516473989538], [560801704538], [593676194516], [419830000552]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 06:43:49: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-08-01 06:43:50: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 06:43:50: INFO] 47 executions left in scheduler queue
[2019-08-01 06:43:50: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-01 06:43:50: INFO] Estimated completion (next execution): 2019-08-01 06:56:58 (0:13:08 from now)
[2019-08-01 06:43:50: INFO] Reboot in preparation for next execution
[2019-08-01 06:48:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 06:48:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 06:48:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 06:48:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 06:48:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 06:49:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.342 s/op
Iteration   2: 2.313 s/op
Iteration   3: 1.895 s/op
Iteration   4: 1.854 s/op
Iteration   5: 2.020 s/op
Iteration   6: 1.914 s/op
Iteration   7: 2.008 s/op
Iteration   8: 1.939 s/op
Iteration   9: 1.877 s/op
Iteration  10: 2.001 s/op
Iteration  11: 2.002 s/op
Iteration  12: 1.970 s/op
Iteration  13: 1.992 s/op
Iteration  14: 1.989 s/op
Iteration  15: 1.988 s/op
Iteration  16: 1.964 s/op
Iteration  17: 1.989 s/op
Iteration  18: 1.993 s/op
Iteration  19: 1.964 s/op
Iteration  20: 1.988 s/op
Iteration  21: 1.951 s/op
Iteration  22: 1.993 s/op
Iteration  23: 1.990 s/op
Iteration  24: 1.992 s/op
Iteration  25: 1.993 s/op
Iteration  26: 1.991 s/op
Iteration  27: 1.985 s/op
Iteration  28: 1.993 s/op
Iteration  29: 1.987 s/op
Iteration  30: 1.937 s/op
Iteration  31: 1.959 s/op
Iteration  32: 1.995 s/op
Iteration  33: 1.989 s/op
Iteration  34: 1.985 s/op
Iteration  35: 1.903 s/op
Iteration  36: 1.997 s/op
Iteration  37: 1.991 s/op
Iteration  38: 1.989 s/op
Iteration  39: 1.994 s/op
Iteration  40: 1.993 s/op
Iteration  41: 1.934 s/op
Iteration  42: 1.947 s/op
Iteration  43: 1.995 s/op
Iteration  44: 1.989 s/op
Iteration  45: 1.984 s/op
Iteration  46: 1.990 s/op
Iteration  47: 1.995 s/op
Iteration  48: 1.991 s/op
Iteration  49: 1.986 s/op
Iteration  50: 1.877 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.986 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 4 
    [1.900, 1.950) = 6 
    [1.950, 2.000) = 34 
    [2.000, 2.050) = 4 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 2 
    [2.350, 2.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.854 s/op
     p(50.0000) =      1.989 s/op
     p(90.0000) =      2.002 s/op
     p(95.0000) =      2.152 s/op
     p(99.0000) =      2.342 s/op
     p(99.9000) =      2.342 s/op
     p(99.9900) =      2.342 s/op
     p(99.9990) =      2.342 s/op
     p(99.9999) =      2.342 s/op
    p(100.0000) =      2.342 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.986 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_hotspot_11.0.4_1564634884048.json
{"wallclock_times": [100.35390956099997], "core_cycle_counts": [[39370665578], [37015348630], [119140173523], [104744216113]], "aperf_counts": [[39042069439], [36974569729], [119117055433], [104726187579]], "mperf_counts": [[43848752880], [41074993676], [134622228980], [117945020094]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 06:49:44: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-01 06:49:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 06:49:45: INFO] 46 executions left in scheduler queue
[2019-08-01 06:49:45: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-01 06:49:45: INFO] Estimated completion (next execution): 2019-08-01 06:53:55 (0:04:10 from now)
[2019-08-01 06:49:45: INFO] Reboot in preparation for next execution
[2019-08-01 06:53:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 06:53:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 06:53:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 06:53:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 06:53:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 06:55:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.045 s/op
Iteration   2: 2.208 s/op
Iteration   3: 2.415 s/op
Iteration   4: 2.412 s/op
Iteration   5: 2.613 s/op
Iteration   6: 2.274 s/op
Iteration   7: 2.259 s/op
Iteration   8: 2.251 s/op
Iteration   9: 2.255 s/op
Iteration  10: 2.253 s/op
Iteration  11: 2.250 s/op
Iteration  12: 2.255 s/op
Iteration  13: 2.253 s/op
Iteration  14: 2.250 s/op
Iteration  15: 2.250 s/op
Iteration  16: 2.251 s/op
Iteration  17: 2.259 s/op
Iteration  18: 2.259 s/op
Iteration  19: 2.259 s/op
Iteration  20: 2.255 s/op
Iteration  21: 2.259 s/op
Iteration  22: 2.256 s/op
Iteration  23: 2.256 s/op
Iteration  24: 2.256 s/op
Iteration  25: 2.257 s/op
Iteration  26: 2.256 s/op
Iteration  27: 2.255 s/op
Iteration  28: 2.254 s/op
Iteration  29: 2.256 s/op
Iteration  30: 2.255 s/op
Iteration  31: 2.256 s/op
Iteration  32: 2.257 s/op
Iteration  33: 2.257 s/op
Iteration  34: 2.258 s/op
Iteration  35: 2.257 s/op
Iteration  36: 2.254 s/op
Iteration  37: 2.254 s/op
Iteration  38: 2.259 s/op
Iteration  39: 2.257 s/op
Iteration  40: 2.255 s/op
Iteration  41: 2.260 s/op
Iteration  42: 2.258 s/op
Iteration  43: 2.263 s/op
Iteration  44: 2.260 s/op
Iteration  45: 2.260 s/op
Iteration  46: 2.256 s/op
Iteration  47: 2.258 s/op
Iteration  48: 2.259 s/op
Iteration  49: 2.260 s/op
Iteration  50: 2.258 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.265 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 3 
    [2.250, 2.300) = 43 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 2 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.045 s/op
     p(50.0000) =      2.256 s/op
     p(90.0000) =      2.263 s/op
     p(95.0000) =      2.413 s/op
     p(99.0000) =      2.613 s/op
     p(99.9000) =      2.613 s/op
     p(99.9900) =      2.613 s/op
     p(99.9990) =      2.613 s/op
     p(99.9999) =      2.613 s/op
    p(100.0000) =      2.613 s/op


# Run complete. Total time: 00:01:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.265 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_hotspot_11.0.4_1564635237097.json
{"wallclock_times": [114.23658857500001], "core_cycle_counts": [[114921285483], [71796616647], [116134313122], [69803090008]], "aperf_counts": [[114653353057], [71758240754], [116111469912], [69784991978]], "mperf_counts": [[114999084540], [71998855836], [116266799830], [69845915194]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 06:55:51: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-08-01 06:55:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 06:55:52: INFO] 45 executions left in scheduler queue
[2019-08-01 06:55:52: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-08-01 06:55:52: INFO] Estimated completion (next execution): 2019-08-01 07:00:16 (0:04:24 from now)
[2019-08-01 06:55:52: INFO] Reboot in preparation for next execution
[2019-08-01 07:04:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.281 s/op
Iteration   2: 5.564 s/op
Iteration   3: 5.574 s/op
Iteration   4: 5.607 s/op
Iteration   5: 5.598 s/op
Iteration   6: 5.606 s/op
Iteration   7: 5.580 s/op
Iteration   8: 5.604 s/op
Iteration   9: 5.592 s/op
Iteration  10: 5.592 s/op
Iteration  11: 5.599 s/op
Iteration  12: 5.597 s/op
Iteration  13: 5.595 s/op
Iteration  14: 5.587 s/op
Iteration  15: 5.602 s/op
Iteration  16: 5.604 s/op
Iteration  17: 5.608 s/op
Iteration  18: 5.592 s/op
Iteration  19: 5.601 s/op
Iteration  20: 5.586 s/op
Iteration  21: 5.573 s/op
Iteration  22: 5.603 s/op
Iteration  23: 5.598 s/op
Iteration  24: 5.600 s/op
Iteration  25: 5.594 s/op
Iteration  26: 5.592 s/op
Iteration  27: 5.584 s/op
Iteration  28: 5.577 s/op
Iteration  29: 5.584 s/op
Iteration  30: 5.594 s/op
Iteration  31: 5.566 s/op
Iteration  32: 5.587 s/op
Iteration  33: 5.590 s/op
Iteration  34: 5.593 s/op
Iteration  35: 5.605 s/op
Iteration  36: 5.605 s/op
Iteration  37: 5.599 s/op
Iteration  38: 5.594 s/op
Iteration  39: 5.601 s/op
Iteration  40: 5.607 s/op
Iteration  41: 5.577 s/op
Iteration  42: 5.600 s/op
Iteration  43: 5.609 s/op
Iteration  44: 5.579 s/op
Iteration  45: 5.554 s/op
Iteration  46: 5.564 s/op
Iteration  47: 5.558 s/op
Iteration  48: 5.598 s/op
Iteration  49: 5.589 s/op
Iteration  50: 5.606 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      5.585 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 1 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 35 
    [5.600, 5.650) = 14 

  Percentiles, s/op:
      p(0.0000) =      5.281 s/op
     p(50.0000) =      5.594 s/op
     p(90.0000) =      5.606 s/op
     p(95.0000) =      5.608 s/op
     p(99.0000) =      5.609 s/op
     p(99.9000) =      5.609 s/op
     p(99.9900) =      5.609 s/op
     p(99.9990) =      5.609 s/op
     p(99.9999) =      5.609 s/op
    p(100.0000) =      5.609 s/op


# Run complete. Total time: 00:04:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.585 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_graalvm-ce-19.1.1_1564635603504.json
{"wallclock_times": [280.09609648900005], "core_cycle_counts": [[247666314555], [345781916589], [152394824480], [158330294048]], "aperf_counts": [[247008244907], [345709979359], [152352340624], [158290076207]], "mperf_counts": [[247014295302], [345711705664], [152367565860], [158299185692]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 07:04:43: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-08-01 07:04:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 07:04:44: INFO] 44 executions left in scheduler queue
[2019-08-01 07:04:44: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-08-01 07:04:44: INFO] Estimated completion (next execution): 2019-08-01 07:11:54 (0:07:10 from now)
[2019-08-01 07:04:44: INFO] Reboot in preparation for next execution
[2019-08-01 07:08:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 07:08:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 07:08:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 07:08:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 07:08:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 07:08:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 07:21:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.108 s/op
Iteration   2: 15.528 s/op
Iteration   3: 15.622 s/op
Iteration   4: 15.658 s/op
Iteration   5: 15.646 s/op
Iteration   6: 15.604 s/op
Iteration   7: 15.613 s/op
Iteration   8: 15.609 s/op
Iteration   9: 15.556 s/op
Iteration  10: 15.586 s/op
Iteration  11: 15.610 s/op
Iteration  12: 15.595 s/op
Iteration  13: 15.563 s/op
Iteration  14: 15.483 s/op
Iteration  15: 15.619 s/op
Iteration  16: 15.612 s/op
Iteration  17: 15.567 s/op
Iteration  18: 15.545 s/op
Iteration  19: 15.567 s/op
Iteration  20: 15.575 s/op
Iteration  21: 15.569 s/op
Iteration  22: 15.554 s/op
Iteration  23: 15.517 s/op
Iteration  24: 15.534 s/op
Iteration  25: 15.560 s/op
Iteration  26: 15.545 s/op
Iteration  27: 15.579 s/op
Iteration  28: 15.530 s/op
Iteration  29: 15.520 s/op
Iteration  30: 15.550 s/op
Iteration  31: 15.455 s/op
Iteration  32: 15.539 s/op
Iteration  33: 15.597 s/op
Iteration  34: 15.545 s/op
Iteration  35: 15.526 s/op
Iteration  36: 15.523 s/op
Iteration  37: 15.646 s/op
Iteration  38: 15.595 s/op
Iteration  39: 15.603 s/op
Iteration  40: 15.446 s/op
Iteration  41: 15.560 s/op
Iteration  42: 15.575 s/op
Iteration  43: 15.560 s/op
Iteration  44: 15.522 s/op
Iteration  45: 15.520 s/op
Iteration  46: 15.529 s/op
Iteration  47: 15.542 s/op
Iteration  48: 15.566 s/op
Iteration  49: 15.507 s/op
Iteration  50: 15.510 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     15.592 ?(99.9%) 0.111 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 3 
    [15.500, 15.750) = 46 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 0 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 1 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.446 s/op
     p(50.0000) =     15.560 s/op
     p(90.0000) =     15.622 s/op
     p(95.0000) =     15.652 s/op
     p(99.0000) =     17.108 s/op
     p(99.9000) =     17.108 s/op
     p(99.9900) =     17.108 s/op
     p(99.9990) =     17.108 s/op
     p(99.9999) =     17.108 s/op
    p(100.0000) =     17.108 s/op


# Run complete. Total time: 00:13:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  15.592 ? 0.111   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_openj9_12.0.1_1564636135892.json
{"wallclock_times": [781.118194451], "core_cycle_counts": [[563313292088], [669100430248], [574355215665], [721822836963]], "aperf_counts": [[561148884799], [668899201552], [574221000877], [721691025180]], "mperf_counts": [[561161554348], [668899138692], [574221056936], [721691072826]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 07:21:57: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-08-01 07:21:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 07:21:57: INFO] 43 executions left in scheduler queue
[2019-08-01 07:21:57: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 07:21:57: INFO] Estimated completion (next execution): 2019-08-01 07:37:29 (0:15:31 from now)
[2019-08-01 07:21:57: INFO] Reboot in preparation for next execution
[2019-08-01 07:26:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 07:26:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 07:26:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 07:26:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 07:26:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 07:26:10: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 07:32:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.691 s/op
Iteration   2: 8.216 s/op
Iteration   3: 7.974 s/op
Iteration   4: 7.998 s/op
Iteration   5: 8.047 s/op
Iteration   6: 7.986 s/op
Iteration   7: 7.972 s/op
Iteration   8: 8.033 s/op
Iteration   9: 8.021 s/op
Iteration  10: 8.033 s/op
Iteration  11: 7.997 s/op
Iteration  12: 8.017 s/op
Iteration  13: 7.997 s/op
Iteration  14: 8.000 s/op
Iteration  15: 8.044 s/op
Iteration  16: 7.998 s/op
Iteration  17: 8.002 s/op
Iteration  18: 8.004 s/op
Iteration  19: 7.999 s/op
Iteration  20: 8.047 s/op
Iteration  21: 7.995 s/op
Iteration  22: 7.997 s/op
Iteration  23: 7.992 s/op
Iteration  24: 8.103 s/op
Iteration  25: 7.977 s/op
Iteration  26: 7.966 s/op
Iteration  27: 7.982 s/op
Iteration  28: 7.929 s/op
Iteration  29: 7.975 s/op
Iteration  30: 7.943 s/op
Iteration  31: 7.950 s/op
Iteration  32: 7.965 s/op
Iteration  33: 7.995 s/op
Iteration  34: 7.958 s/op
Iteration  35: 7.896 s/op
Iteration  36: 7.963 s/op
Iteration  37: 7.895 s/op
Iteration  38: 7.992 s/op
Iteration  39: 7.922 s/op
Iteration  40: 7.980 s/op
Iteration  41: 7.953 s/op
Iteration  42: 7.901 s/op
Iteration  43: 7.951 s/op
Iteration  44: 7.862 s/op
Iteration  45: 7.932 s/op
Iteration  46: 7.889 s/op
Iteration  47: 7.951 s/op
Iteration  48: 7.922 s/op
Iteration  49: 7.883 s/op
Iteration  50: 7.914 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.012 ?(99.9%) 0.123 s/op

  Histogram, s/op:
    [ 7.000,  7.250) = 0 
    [ 7.250,  7.500) = 0 
    [ 7.500,  7.750) = 0 
    [ 7.750,  8.000) = 38 
    [ 8.000,  8.250) = 11 
    [ 8.250,  8.500) = 0 
    [ 8.500,  8.750) = 0 
    [ 8.750,  9.000) = 0 
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.862 s/op
     p(50.0000) =      7.981 s/op
     p(90.0000) =      8.047 s/op
     p(95.0000) =      8.154 s/op
     p(99.0000) =      9.691 s/op
     p(99.9000) =      9.691 s/op
     p(99.9900) =      9.691 s/op
     p(99.9990) =      9.691 s/op
     p(99.9999) =      9.691 s/op
    p(100.0000) =      9.691 s/op


# Run complete. Total time: 00:06:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  8.012 ? 0.123   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9_11.0.4_1564637170665.json
{"wallclock_times": [402.22230055800003], "core_cycle_counts": [[268300222852], [402560731744], [312516680213], [370980327272]], "aperf_counts": [[267167976959], [402454665621], [312436303197], [370910107827]], "mperf_counts": [[267171132626], [402454634744], [312436289936], [370910111574]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 07:32:52: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 07:32:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 07:32:53: INFO] 42 executions left in scheduler queue
[2019-08-01 07:32:53: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 07:32:53: INFO] Estimated completion (next execution): 2019-08-01 07:42:06 (0:09:12 from now)
[2019-08-01 07:32:53: INFO] Reboot in preparation for next execution
[2019-08-01 07:37:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 07:37:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 07:37:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 07:37:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 07:37:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 07:37:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 07:46:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.698 s/op
Iteration   2: 11.316 s/op
Iteration   3: 11.211 s/op
Iteration   4: 11.184 s/op
Iteration   5: 11.158 s/op
Iteration   6: 11.046 s/op
Iteration   7: 11.119 s/op
Iteration   8: 10.921 s/op
Iteration   9: 10.871 s/op
Iteration  10: 10.954 s/op
Iteration  11: 10.901 s/op
Iteration  12: 10.985 s/op
Iteration  13: 10.880 s/op
Iteration  14: 10.987 s/op
Iteration  15: 11.004 s/op
Iteration  16: 10.953 s/op
Iteration  17: 10.904 s/op
Iteration  18: 10.860 s/op
Iteration  19: 10.963 s/op
Iteration  20: 10.898 s/op
Iteration  21: 10.804 s/op
Iteration  22: 10.712 s/op
Iteration  23: 10.754 s/op
Iteration  24: 10.684 s/op
Iteration  25: 10.677 s/op
Iteration  26: 10.683 s/op
Iteration  27: 10.758 s/op
Iteration  28: 10.779 s/op
Iteration  29: 10.690 s/op
Iteration  30: 10.758 s/op
Iteration  31: 10.690 s/op
Iteration  32: 10.920 s/op
Iteration  33: 10.712 s/op
Iteration  34: 10.813 s/op
Iteration  35: 10.705 s/op
Iteration  36: 10.803 s/op
Iteration  37: 10.783 s/op
Iteration  38: 10.765 s/op
Iteration  39: 10.795 s/op
Iteration  40: 10.753 s/op
Iteration  41: 10.739 s/op
Iteration  42: 10.651 s/op
Iteration  43: 10.871 s/op
Iteration  44: 10.698 s/op
Iteration  45: 10.991 s/op
Iteration  46: 10.722 s/op
Iteration  47: 10.624 s/op
Iteration  48: 10.780 s/op
Iteration  49: 10.708 s/op
Iteration  50: 10.823 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.889 ?(99.9%) 0.151 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 14 
    [10.750, 11.000) = 28 
    [11.000, 11.250) = 6 
    [11.250, 11.500) = 1 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     10.624 s/op
     p(50.0000) =     10.809 s/op
     p(90.0000) =     11.154 s/op
     p(95.0000) =     11.258 s/op
     p(99.0000) =     12.698 s/op
     p(99.9000) =     12.698 s/op
     p(99.9900) =     12.698 s/op
     p(99.9990) =     12.698 s/op
     p(99.9999) =     12.698 s/op
    p(100.0000) =     12.698 s/op


# Run complete. Total time: 00:09:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.889 ? 0.151   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9_11.0.4_1564637825820.json
{"wallclock_times": [546.112253493], "core_cycle_counts": [[588499542852], [203716244621], [506673877127], [504015332924]], "aperf_counts": [[587251439829], [203574741782], [506448713649], [503937263874]], "mperf_counts": [[587254121270], [203574704672], [506448638916], [503937248476]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 07:46:11: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 07:46:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 07:46:12: INFO] 41 executions left in scheduler queue
[2019-08-01 07:46:12: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 07:46:12: INFO] Estimated completion (next execution): 2019-08-01 07:57:49 (0:11:36 from now)
[2019-08-01 07:46:12: INFO] Reboot in preparation for next execution
[2019-08-01 07:50:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 07:50:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 07:50:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 07:50:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 07:50:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 07:50:27: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 07:54:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.491 s/op
Iteration   2: 5.561 s/op
Iteration   3: 4.913 s/op
Iteration   4: 4.920 s/op
Iteration   5: 4.930 s/op
Iteration   6: 4.779 s/op
Iteration   7: 4.776 s/op
Iteration   8: 4.782 s/op
Iteration   9: 4.708 s/op
Iteration  10: 4.755 s/op
Iteration  11: 4.711 s/op
Iteration  12: 4.690 s/op
Iteration  13: 4.680 s/op
Iteration  14: 4.749 s/op
Iteration  15: 4.707 s/op
Iteration  16: 4.686 s/op
Iteration  17: 4.686 s/op
Iteration  18: 4.670 s/op
Iteration  19: 4.692 s/op
Iteration  20: 4.716 s/op
Iteration  21: 4.707 s/op
Iteration  22: 4.698 s/op
Iteration  23: 4.740 s/op
Iteration  24: 4.717 s/op
Iteration  25: 4.667 s/op
Iteration  26: 4.672 s/op
Iteration  27: 4.690 s/op
Iteration  28: 4.693 s/op
Iteration  29: 4.687 s/op
Iteration  30: 4.716 s/op
Iteration  31: 4.732 s/op
Iteration  32: 4.738 s/op
Iteration  33: 4.770 s/op
Iteration  34: 4.678 s/op
Iteration  35: 4.692 s/op
Iteration  36: 4.709 s/op
Iteration  37: 4.698 s/op
Iteration  38: 4.709 s/op
Iteration  39: 4.701 s/op
Iteration  40: 4.685 s/op
Iteration  41: 4.662 s/op
Iteration  42: 4.713 s/op
Iteration  43: 4.673 s/op
Iteration  44: 4.670 s/op
Iteration  45: 4.692 s/op
Iteration  46: 4.712 s/op
Iteration  47: 4.681 s/op
Iteration  48: 4.719 s/op
Iteration  49: 4.683 s/op
Iteration  50: 4.699 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.772 ?(99.9%) 0.139 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 40 
    [4.750, 5.000) = 8 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.662 s/op
     p(50.0000) =      4.707 s/op
     p(90.0000) =      4.900 s/op
     p(95.0000) =      5.214 s/op
     p(99.0000) =      6.491 s/op
     p(99.9000) =      6.491 s/op
     p(99.9900) =      6.491 s/op
     p(99.9990) =      6.491 s/op
     p(99.9999) =      6.491 s/op
    p(100.0000) =      6.491 s/op


# Run complete. Total time: 00:04:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.772 ? 0.139   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9_11.0.4_1564638627265.json
{"wallclock_times": [240.420717124], "core_cycle_counts": [[250631941544], [253103913057], [187456355084], [189058617056]], "aperf_counts": [[250035740917], [252970537977], [187336956236], [188969581589]], "mperf_counts": [[250041323192], [252971467338], [187336988154], [188970192056]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 07:54:27: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 07:54:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 07:54:28: INFO] 40 executions left in scheduler queue
[2019-08-01 07:54:28: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 07:54:28: INFO] Estimated completion (next execution): 2019-08-01 08:00:59 (0:06:30 from now)
[2019-08-01 07:54:28: INFO] Reboot in preparation for next execution
[2019-08-01 07:58:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 07:58:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 07:58:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 07:58:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 07:58:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 07:58:41: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 08:02:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.553 s/op
Iteration   2: 5.579 s/op
Iteration   3: 5.073 s/op
Iteration   4: 5.202 s/op
Iteration   5: 5.115 s/op
Iteration   6: 5.027 s/op
Iteration   7: 4.911 s/op
Iteration   8: 5.119 s/op
Iteration   9: 5.034 s/op
Iteration  10: 4.971 s/op
Iteration  11: 5.090 s/op
Iteration  12: 5.002 s/op
Iteration  13: 4.936 s/op
Iteration  14: 5.016 s/op
Iteration  15: 4.979 s/op
Iteration  16: 5.056 s/op
Iteration  17: 5.018 s/op
Iteration  18: 4.912 s/op
Iteration  19: 5.010 s/op
Iteration  20: 4.934 s/op
Iteration  21: 5.072 s/op
Iteration  22: 5.013 s/op
Iteration  23: 4.928 s/op
Iteration  24: 5.039 s/op
Iteration  25: 4.990 s/op
Iteration  26: 5.084 s/op
Iteration  27: 4.977 s/op
Iteration  28: 4.935 s/op
Iteration  29: 5.018 s/op
Iteration  30: 4.943 s/op
Iteration  31: 5.034 s/op
Iteration  32: 5.031 s/op
Iteration  33: 4.926 s/op
Iteration  34: 5.010 s/op
Iteration  35: 5.012 s/op
Iteration  36: 4.911 s/op
Iteration  37: 4.999 s/op
Iteration  38: 4.931 s/op
Iteration  39: 5.061 s/op
Iteration  40: 4.979 s/op
Iteration  41: 4.915 s/op
Iteration  42: 5.049 s/op
Iteration  43: 4.920 s/op
Iteration  44: 5.086 s/op
Iteration  45: 4.988 s/op
Iteration  46: 4.920 s/op
Iteration  47: 5.030 s/op
Iteration  48: 4.985 s/op
Iteration  49: 4.896 s/op
Iteration  50: 5.007 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.044 ?(99.9%) 0.120 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 
    [4.750, 5.000) = 22 
    [5.000, 5.250) = 26 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.896 s/op
     p(50.0000) =      5.010 s/op
     p(90.0000) =      5.112 s/op
     p(95.0000) =      5.371 s/op
     p(99.0000) =      6.553 s/op
     p(99.9000) =      6.553 s/op
     p(99.9900) =      6.553 s/op
     p(99.9990) =      6.553 s/op
     p(99.9999) =      6.553 s/op
    p(100.0000) =      6.553 s/op


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.044 ? 0.120   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9_11.0.4_1564639121770.json
{"wallclock_times": [254.077988375], "core_cycle_counts": [[235365840191], [235982969823], [202886241427], [241282640146]], "aperf_counts": [[234700505466], [235863058280], [202805680397], [241211241072]], "mperf_counts": [[234705777950], [235864756022], [202805667084], [241211243016]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 08:02:55: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-08-01 08:02:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 08:02:56: INFO] 39 executions left in scheduler queue
[2019-08-01 08:02:56: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-01 08:02:56: INFO] Estimated completion (next execution): 2019-08-01 08:09:41 (0:06:44 from now)
[2019-08-01 08:02:56: INFO] Reboot in preparation for next execution
[2019-08-01 08:07:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 08:07:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 08:07:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 08:07:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 08:07:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 08:09:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.504 s/op
Iteration   2: 2.500 s/op
Iteration   3: 2.464 s/op
Iteration   4: 2.429 s/op
Iteration   5: 2.492 s/op
Iteration   6: 2.483 s/op
Iteration   7: 2.502 s/op
Iteration   8: 2.493 s/op
Iteration   9: 2.489 s/op
Iteration  10: 2.500 s/op
Iteration  11: 2.438 s/op
Iteration  12: 2.491 s/op
Iteration  13: 2.489 s/op
Iteration  14: 2.481 s/op
Iteration  15: 2.459 s/op
Iteration  16: 2.490 s/op
Iteration  17: 2.476 s/op
Iteration  18: 2.451 s/op
Iteration  19: 2.477 s/op
Iteration  20: 2.489 s/op
Iteration  21: 2.486 s/op
Iteration  22: 2.481 s/op
Iteration  23: 2.338 s/op
Iteration  24: 2.493 s/op
Iteration  25: 2.490 s/op
Iteration  26: 2.473 s/op
Iteration  27: 2.483 s/op
Iteration  28: 2.463 s/op
Iteration  29: 2.486 s/op
Iteration  30: 2.478 s/op
Iteration  31: 2.483 s/op
Iteration  32: 2.442 s/op
Iteration  33: 2.484 s/op
Iteration  34: 2.476 s/op
Iteration  35: 2.424 s/op
Iteration  36: 2.408 s/op
Iteration  37: 2.484 s/op
Iteration  38: 2.488 s/op
Iteration  39: 2.460 s/op
Iteration  40: 2.465 s/op
Iteration  41: 2.495 s/op
Iteration  42: 2.488 s/op
Iteration  43: 2.377 s/op
Iteration  44: 2.438 s/op
Iteration  45: 2.476 s/op
Iteration  46: 2.484 s/op
Iteration  47: 2.479 s/op
Iteration  48: 2.298 s/op
Iteration  49: 2.423 s/op
Iteration  50: 2.491 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.467 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [2.200, 2.225) = 0 
    [2.225, 2.250) = 0 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 1 
    [2.300, 2.325) = 0 
    [2.325, 2.350) = 1 
    [2.350, 2.375) = 0 
    [2.375, 2.400) = 1 
    [2.400, 2.425) = 3 
    [2.425, 2.450) = 4 
    [2.450, 2.475) = 7 
    [2.475, 2.500) = 30 
    [2.500, 2.525) = 3 
    [2.525, 2.550) = 0 
    [2.550, 2.575) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.298 s/op
     p(50.0000) =      2.482 s/op
     p(90.0000) =      2.495 s/op
     p(95.0000) =      2.501 s/op
     p(99.0000) =      2.504 s/op
     p(99.9000) =      2.504 s/op
     p(99.9900) =      2.504 s/op
     p(99.9990) =      2.504 s/op
     p(99.9999) =      2.504 s/op
    p(100.0000) =      2.504 s/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.467 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_hotspot_12.0.2_1564639632000.json
{"wallclock_times": [124.35013872800002], "core_cycle_counts": [[83930869308], [94693357683], [114108564594], [75722697985]], "aperf_counts": [[83539675510], [94659246030], [114087456861], [75697553038]], "mperf_counts": [[93116053342], [107471987096], [129018556094], [85204687178]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 08:09:16: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-01 08:09:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 08:09:17: INFO] 38 executions left in scheduler queue
[2019-08-01 08:09:17: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-01 08:09:17: INFO] Estimated completion (next execution): 2019-08-01 08:13:51 (0:04:34 from now)
[2019-08-01 08:09:17: INFO] Reboot in preparation for next execution
[2019-08-01 08:13:43: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 08:13:43: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 08:13:43: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 08:13:43: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 08:13:43: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 08:15:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.201 s/op
Iteration   2: 2.305 s/op
Iteration   3: 2.422 s/op
Iteration   4: 2.478 s/op
Iteration   5: 2.466 s/op
Iteration   6: 2.539 s/op
Iteration   7: 2.336 s/op
Iteration   8: 2.338 s/op
Iteration   9: 2.343 s/op
Iteration  10: 2.335 s/op
Iteration  11: 2.337 s/op
Iteration  12: 2.332 s/op
Iteration  13: 2.334 s/op
Iteration  14: 2.332 s/op
Iteration  15: 2.332 s/op
Iteration  16: 2.331 s/op
Iteration  17: 2.329 s/op
Iteration  18: 2.328 s/op
Iteration  19: 2.329 s/op
Iteration  20: 2.329 s/op
Iteration  21: 2.329 s/op
Iteration  22: 2.329 s/op
Iteration  23: 2.328 s/op
Iteration  24: 2.328 s/op
Iteration  25: 2.328 s/op
Iteration  26: 2.334 s/op
Iteration  27: 2.328 s/op
Iteration  28: 2.328 s/op
Iteration  29: 2.328 s/op
Iteration  30: 2.329 s/op
Iteration  31: 2.331 s/op
Iteration  32: 2.330 s/op
Iteration  33: 2.330 s/op
Iteration  34: 2.328 s/op
Iteration  35: 2.328 s/op
Iteration  36: 2.330 s/op
Iteration  37: 2.330 s/op
Iteration  38: 2.332 s/op
Iteration  39: 2.337 s/op
Iteration  40: 2.330 s/op
Iteration  41: 2.330 s/op
Iteration  42: 2.333 s/op
Iteration  43: 2.330 s/op
Iteration  44: 2.328 s/op
Iteration  45: 2.327 s/op
Iteration  46: 2.330 s/op
Iteration  47: 2.327 s/op
Iteration  48: 2.330 s/op
Iteration  49: 2.329 s/op
Iteration  50: 2.329 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.339 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [2.200, 2.225) = 1 
    [2.225, 2.250) = 0 
    [2.250, 2.275) = 0 
    [2.275, 2.300) = 0 
    [2.300, 2.325) = 1 
    [2.325, 2.350) = 44 
    [2.350, 2.375) = 0 
    [2.375, 2.400) = 0 
    [2.400, 2.425) = 1 
    [2.425, 2.450) = 0 
    [2.450, 2.475) = 1 
    [2.475, 2.500) = 1 
    [2.500, 2.525) = 0 
    [2.525, 2.550) = 1 
    [2.550, 2.575) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.201 s/op
     p(50.0000) =      2.330 s/op
     p(90.0000) =      2.343 s/op
     p(95.0000) =      2.471 s/op
     p(99.0000) =      2.539 s/op
     p(99.9000) =      2.539 s/op
     p(99.9900) =      2.539 s/op
     p(99.9990) =      2.539 s/op
     p(99.9999) =      2.539 s/op
    p(100.0000) =      2.539 s/op


# Run complete. Total time: 00:01:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.339 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_hotspot_12.0.2_1564640023672.json
{"wallclock_times": [117.91108273399999], "core_cycle_counts": [[67958466033], [159876429586], [93236419020], [64185677359]], "aperf_counts": [[67640836890], [159843913729], [93203974365], [64166025361]], "mperf_counts": [[68005576890], [159952809884], [93409827434], [64222094430]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 08:15:41: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-08-01 08:15:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 08:15:42: INFO] 37 executions left in scheduler queue
[2019-08-01 08:15:42: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-01 08:15:42: INFO] Estimated completion (next execution): 2019-08-01 08:20:10 (0:04:28 from now)
[2019-08-01 08:15:42: INFO] Reboot in preparation for next execution
[2019-08-01 08:19:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.298 s/op
Iteration   2: 0.851 s/op
Iteration   3: 0.840 s/op
Iteration   4: 0.921 s/op
Iteration   5: 0.833 s/op
Iteration   6: 0.832 s/op
Iteration   7: 0.832 s/op
Iteration   8: 0.836 s/op
Iteration   9: 0.832 s/op
Iteration  10: 0.832 s/op
Iteration  11: 0.833 s/op
Iteration  12: 0.829 s/op
Iteration  13: 0.833 s/op
Iteration  14: 0.832 s/op
Iteration  15: 0.836 s/op
Iteration  16: 0.837 s/op
Iteration  17: 0.835 s/op
Iteration  18: 0.837 s/op
Iteration  19: 0.829 s/op
Iteration  20: 0.833 s/op
Iteration  21: 0.834 s/op
Iteration  22: 0.836 s/op
Iteration  23: 0.837 s/op
Iteration  24: 0.828 s/op
Iteration  25: 0.827 s/op
Iteration  26: 0.830 s/op
Iteration  27: 0.830 s/op
Iteration  28: 0.833 s/op
Iteration  29: 0.832 s/op
Iteration  30: 0.834 s/op
Iteration  31: 0.833 s/op
Iteration  32: 0.835 s/op
Iteration  33: 0.838 s/op
Iteration  34: 0.832 s/op
Iteration  35: 0.832 s/op
Iteration  36: 0.829 s/op
Iteration  37: 0.832 s/op
Iteration  38: 0.832 s/op
Iteration  39: 0.831 s/op
Iteration  40: 0.835 s/op
Iteration  41: 0.832 s/op
Iteration  42: 0.833 s/op
Iteration  43: 0.836 s/op
Iteration  44: 0.835 s/op
Iteration  45: 0.835 s/op
Iteration  46: 0.829 s/op
Iteration  47: 0.831 s/op
Iteration  48: 0.832 s/op
Iteration  49: 0.831 s/op
Iteration  50: 0.830 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      0.844 ?(99.9%) 0.033 s/op

  Histogram, s/op:
    [0.800, 0.850) = 47 
    [0.850, 0.900) = 1 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.827 s/op
     p(50.0000) =      0.833 s/op
     p(90.0000) =      0.838 s/op
     p(95.0000) =      0.883 s/op
     p(99.0000) =      1.298 s/op
     p(99.9000) =      1.298 s/op
     p(99.9900) =      1.298 s/op
     p(99.9990) =      1.298 s/op
     p(99.9999) =      1.298 s/op
    p(100.0000) =      1.298 s/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.844 ? 0.033   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_graalvm-ee-19.1.1_1564640353261.json
{"wallclock_times": [43.13998508200001], "core_cycle_counts": [[73052037037], [29846149154], [18687985642], [27211450042]], "aperf_counts": [[72945127731], [29814943274], [18659874489], [27191847426]], "mperf_counts": [[72966266442], [29815947954], [18662702200], [27200628324]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 08:19:56: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-01 08:19:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 08:19:57: INFO] 36 executions left in scheduler queue
[2019-08-01 08:19:57: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-01 08:19:57: INFO] Estimated completion (next execution): 2019-08-01 08:23:10 (0:03:13 from now)
[2019-08-01 08:19:57: INFO] Reboot in preparation for next execution
[2019-08-01 08:25:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.563 s/op
Iteration   2: 1.206 s/op
Iteration   3: 1.138 s/op
Iteration   4: 1.246 s/op
Iteration   5: 1.131 s/op
Iteration   6: 1.132 s/op
Iteration   7: 1.138 s/op
Iteration   8: 1.131 s/op
Iteration   9: 1.131 s/op
Iteration  10: 1.130 s/op
Iteration  11: 1.134 s/op
Iteration  12: 1.130 s/op
Iteration  13: 1.128 s/op
Iteration  14: 1.129 s/op
Iteration  15: 1.130 s/op
Iteration  16: 1.134 s/op
Iteration  17: 1.132 s/op
Iteration  18: 1.131 s/op
Iteration  19: 1.130 s/op
Iteration  20: 1.130 s/op
Iteration  21: 1.133 s/op
Iteration  22: 1.131 s/op
Iteration  23: 1.131 s/op
Iteration  24: 1.130 s/op
Iteration  25: 1.139 s/op
Iteration  26: 1.131 s/op
Iteration  27: 1.130 s/op
Iteration  28: 1.131 s/op
Iteration  29: 1.131 s/op
Iteration  30: 1.130 s/op
Iteration  31: 1.131 s/op
Iteration  32: 1.130 s/op
Iteration  33: 1.129 s/op
Iteration  34: 1.131 s/op
Iteration  35: 1.130 s/op
Iteration  36: 1.128 s/op
Iteration  37: 1.131 s/op
Iteration  38: 1.128 s/op
Iteration  39: 1.131 s/op
Iteration  40: 1.130 s/op
Iteration  41: 1.131 s/op
Iteration  42: 1.131 s/op
Iteration  43: 1.130 s/op
Iteration  44: 1.131 s/op
Iteration  45: 1.130 s/op
Iteration  46: 1.129 s/op
Iteration  47: 1.129 s/op
Iteration  48: 1.129 s/op
Iteration  49: 1.129 s/op
Iteration  50: 1.130 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.143 ?(99.9%) 0.031 s/op

  Histogram, s/op:
    [1.100, 1.150) = 47 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 2 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 0 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.128 s/op
     p(50.0000) =      1.131 s/op
     p(90.0000) =      1.138 s/op
     p(95.0000) =      1.224 s/op
     p(99.0000) =      1.563 s/op
     p(99.9000) =      1.563 s/op
     p(99.9900) =      1.563 s/op
     p(99.9990) =      1.563 s/op
     p(99.9999) =      1.563 s/op
    p(100.0000) =      1.563 s/op


# Run complete. Total time: 00:00:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.143 ? 0.031   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_graalvm-ee-19.1.1_1564640650570.json
{"wallclock_times": [58.01429910300001], "core_cycle_counts": [[40598154162], [66222154655], [37596875834], [46822135551]], "aperf_counts": [[40450410291], [66205387487], [37583691555], [46808272427]], "mperf_counts": [[40470829454], [66215668156], [37589654056], [46808364946]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 08:25:08: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-08-01 08:25:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 08:25:09: INFO] 35 executions left in scheduler queue
[2019-08-01 08:25:09: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-08-01 08:25:09: INFO] Estimated completion (next execution): 2019-08-01 08:28:37 (0:03:28 from now)
[2019-08-01 08:25:09: INFO] Reboot in preparation for next execution
[2019-08-01 08:33:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.829 s/op
Iteration   2: 4.592 s/op
Iteration   3: 4.613 s/op
Iteration   4: 4.605 s/op
Iteration   5: 4.622 s/op
Iteration   6: 4.617 s/op
Iteration   7: 4.628 s/op
Iteration   8: 4.625 s/op
Iteration   9: 4.632 s/op
Iteration  10: 4.623 s/op
Iteration  11: 4.602 s/op
Iteration  12: 4.632 s/op
Iteration  13: 4.631 s/op
Iteration  14: 4.624 s/op
Iteration  15: 4.629 s/op
Iteration  16: 4.621 s/op
Iteration  17: 4.620 s/op
Iteration  18: 4.621 s/op
Iteration  19: 4.624 s/op
Iteration  20: 4.610 s/op
Iteration  21: 4.627 s/op
Iteration  22: 4.624 s/op
Iteration  23: 4.632 s/op
Iteration  24: 4.629 s/op
Iteration  25: 4.620 s/op
Iteration  26: 4.628 s/op
Iteration  27: 4.620 s/op
Iteration  28: 4.625 s/op
Iteration  29: 4.622 s/op
Iteration  30: 4.623 s/op
Iteration  31: 4.623 s/op
Iteration  32: 4.615 s/op
Iteration  33: 4.627 s/op
Iteration  34: 4.601 s/op
Iteration  35: 4.611 s/op
Iteration  36: 4.622 s/op
Iteration  37: 4.614 s/op
Iteration  38: 4.626 s/op
Iteration  39: 4.621 s/op
Iteration  40: 4.599 s/op
Iteration  41: 4.621 s/op
Iteration  42: 4.614 s/op
Iteration  43: 4.618 s/op
Iteration  44: 4.620 s/op
Iteration  45: 4.627 s/op
Iteration  46: 4.620 s/op
Iteration  47: 4.631 s/op
Iteration  48: 4.620 s/op
Iteration  49: 4.629 s/op
Iteration  50: 4.604 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      4.624 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [4.500, 4.525) = 0 
    [4.525, 4.550) = 0 
    [4.550, 4.575) = 0 
    [4.575, 4.600) = 2 
    [4.600, 4.625) = 32 
    [4.625, 4.650) = 15 
    [4.650, 4.675) = 0 
    [4.675, 4.700) = 0 
    [4.700, 4.725) = 0 
    [4.725, 4.750) = 0 
    [4.750, 4.775) = 0 
    [4.775, 4.800) = 0 
    [4.800, 4.825) = 0 
    [4.825, 4.850) = 1 
    [4.850, 4.875) = 0 
    [4.875, 4.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.592 s/op
     p(50.0000) =      4.622 s/op
     p(90.0000) =      4.631 s/op
     p(95.0000) =      4.632 s/op
     p(99.0000) =      4.829 s/op
     p(99.9000) =      4.829 s/op
     p(99.9900) =      4.829 s/op
     p(99.9990) =      4.829 s/op
     p(99.9999) =      4.829 s/op
    p(100.0000) =      4.829 s/op


# Run complete. Total time: 00:03:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  4.624 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_graalvm-ce-19.1.1_1564640961991.json
{"wallclock_times": [232.07310063600002], "core_cycle_counts": [[185672452999], [151671207403], [173759229781], [238757352309]], "aperf_counts": [[185132273788], [151599394513], [173706603300], [238723125693]], "mperf_counts": [[185141925650], [151608152358], [173707475468], [238729426486]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 08:33:14: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-08-01 08:33:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 08:33:14: INFO] 34 executions left in scheduler queue
[2019-08-01 08:33:14: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-08-01 08:33:14: INFO] Estimated completion (next execution): 2019-08-01 08:39:37 (0:06:22 from now)
[2019-08-01 08:33:14: INFO] Reboot in preparation for next execution
[2019-08-01 08:37:28: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 08:37:28: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 08:37:28: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 08:37:28: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 08:37:28: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 08:42:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.670 s/op
Iteration   2: 5.869 s/op
Iteration   3: 5.564 s/op
Iteration   4: 5.507 s/op
Iteration   5: 5.508 s/op
Iteration   6: 5.505 s/op
Iteration   7: 5.507 s/op
Iteration   8: 5.510 s/op
Iteration   9: 5.528 s/op
Iteration  10: 5.513 s/op
Iteration  11: 5.508 s/op
Iteration  12: 5.529 s/op
Iteration  13: 5.520 s/op
Iteration  14: 5.512 s/op
Iteration  15: 5.510 s/op
Iteration  16: 5.518 s/op
Iteration  17: 5.508 s/op
Iteration  18: 5.526 s/op
Iteration  19: 5.508 s/op
Iteration  20: 5.527 s/op
Iteration  21: 5.517 s/op
Iteration  22: 5.524 s/op
Iteration  23: 5.530 s/op
Iteration  24: 5.534 s/op
Iteration  25: 5.522 s/op
Iteration  26: 5.524 s/op
Iteration  27: 5.512 s/op
Iteration  28: 5.510 s/op
Iteration  29: 5.507 s/op
Iteration  30: 5.515 s/op
Iteration  31: 5.517 s/op
Iteration  32: 5.515 s/op
Iteration  33: 5.510 s/op
Iteration  34: 5.514 s/op
Iteration  35: 5.520 s/op
Iteration  36: 5.525 s/op
Iteration  37: 5.530 s/op
Iteration  38: 5.530 s/op
Iteration  39: 5.512 s/op
Iteration  40: 5.526 s/op
Iteration  41: 5.510 s/op
Iteration  42: 5.524 s/op
Iteration  43: 5.516 s/op
Iteration  44: 5.527 s/op
Iteration  45: 5.506 s/op
Iteration  46: 5.522 s/op
Iteration  47: 5.516 s/op
Iteration  48: 5.516 s/op
Iteration  49: 5.518 s/op
Iteration  50: 5.514 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      5.528 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [5.500, 5.525) = 37 
    [5.525, 5.550) = 10 
    [5.550, 5.575) = 1 
    [5.575, 5.600) = 0 
    [5.600, 5.625) = 0 
    [5.625, 5.650) = 0 
    [5.650, 5.675) = 1 
    [5.675, 5.700) = 0 
    [5.700, 5.725) = 0 
    [5.725, 5.750) = 0 
    [5.750, 5.775) = 0 
    [5.775, 5.800) = 0 
    [5.800, 5.825) = 0 
    [5.825, 5.850) = 0 
    [5.850, 5.875) = 1 
    [5.875, 5.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.505 s/op
     p(50.0000) =      5.516 s/op
     p(90.0000) =      5.530 s/op
     p(95.0000) =      5.612 s/op
     p(99.0000) =      5.869 s/op
     p(99.9000) =      5.869 s/op
     p(99.9900) =      5.869 s/op
     p(99.9990) =      5.869 s/op
     p(99.9999) =      5.869 s/op
    p(100.0000) =      5.869 s/op


# Run complete. Total time: 00:04:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  5.528 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_hotspot_12.0.2_1564641448928.json
{"wallclock_times": [277.359274044], "core_cycle_counts": [[143329967453], [99211536567], [140176974387], [512801119208]], "aperf_counts": [[142553581986], [99142978978], [140143335676], [512773021602]], "mperf_counts": [[142912894322], [99225289974], [140265256464], [512896486768]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 08:42:06: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-08-01 08:42:07: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 08:42:07: INFO] 33 executions left in scheduler queue
[2019-08-01 08:42:07: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-08-01 08:42:07: INFO] Estimated completion (next execution): 2019-08-01 08:49:14 (0:07:07 from now)
[2019-08-01 08:42:07: INFO] Reboot in preparation for next execution
[2019-08-01 08:46:19: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 08:46:19: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 08:46:19: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 08:46:19: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 08:46:19: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 08:46:19: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 09:01:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 19.778 s/op
Iteration   2: 18.195 s/op
Iteration   3: 18.262 s/op
Iteration   4: 18.270 s/op
Iteration   5: 18.231 s/op
Iteration   6: 18.199 s/op
Iteration   7: 18.296 s/op
Iteration   8: 18.248 s/op
Iteration   9: 18.250 s/op
Iteration  10: 18.292 s/op
Iteration  11: 18.224 s/op
Iteration  12: 18.312 s/op
Iteration  13: 18.246 s/op
Iteration  14: 18.235 s/op
Iteration  15: 18.219 s/op
Iteration  16: 18.269 s/op
Iteration  17: 18.234 s/op
Iteration  18: 18.159 s/op
Iteration  19: 18.156 s/op
Iteration  20: 18.228 s/op
Iteration  21: 18.251 s/op
Iteration  22: 18.252 s/op
Iteration  23: 18.200 s/op
Iteration  24: 18.232 s/op
Iteration  25: 18.259 s/op
Iteration  26: 18.195 s/op
Iteration  27: 18.235 s/op
Iteration  28: 18.221 s/op
Iteration  29: 18.244 s/op
Iteration  30: 18.215 s/op
Iteration  31: 18.192 s/op
Iteration  32: 18.262 s/op
Iteration  33: 18.218 s/op
Iteration  34: 18.215 s/op
Iteration  35: 18.273 s/op
Iteration  36: 18.318 s/op
Iteration  37: 18.218 s/op
Iteration  38: 18.201 s/op
Iteration  39: 18.223 s/op
Iteration  40: 18.278 s/op
Iteration  41: 18.261 s/op
Iteration  42: 18.199 s/op
Iteration  43: 18.207 s/op
Iteration  44: 18.226 s/op
Iteration  45: 18.239 s/op
Iteration  46: 18.175 s/op
Iteration  47: 18.207 s/op
Iteration  48: 18.195 s/op
Iteration  49: 18.258 s/op
Iteration  50: 18.260 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     18.265 ?(99.9%) 0.110 s/op

  Histogram, s/op:
    [18.000, 18.125) = 0 
    [18.125, 18.250) = 33 
    [18.250, 18.375) = 16 
    [18.375, 18.500) = 0 
    [18.500, 18.625) = 0 
    [18.625, 18.750) = 0 
    [18.750, 18.875) = 0 
    [18.875, 19.000) = 0 
    [19.000, 19.125) = 0 
    [19.125, 19.250) = 0 
    [19.250, 19.375) = 0 
    [19.375, 19.500) = 0 
    [19.500, 19.625) = 0 
    [19.625, 19.750) = 0 
    [19.750, 19.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     18.156 s/op
     p(50.0000) =     18.233 s/op
     p(90.0000) =     18.291 s/op
     p(95.0000) =     18.315 s/op
     p(99.0000) =     19.778 s/op
     p(99.9000) =     19.778 s/op
     p(99.9900) =     19.778 s/op
     p(99.9990) =     19.778 s/op
     p(99.9999) =     19.778 s/op
    p(100.0000) =     19.778 s/op


# Run complete. Total time: 00:15:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  18.265 ? 0.110   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_openj9_12.0.1_1564641979647.json
{"wallclock_times": [914.7410405550002], "core_cycle_counts": [[747170911526], [590725563272], [709823570614], [914134345253]], "aperf_counts": [[744782703268], [590512506131], [709648865140], [913994946062]], "mperf_counts": [[744793301122], [590512525704], [709648850244], [913994900196]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 09:01:34: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-08-01 09:01:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 09:01:35: INFO] 32 executions left in scheduler queue
[2019-08-01 09:01:35: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-08-01 09:01:35: INFO] Estimated completion (next execution): 2019-08-01 09:19:20 (0:17:45 from now)
[2019-08-01 09:01:35: INFO] Reboot in preparation for next execution
[2019-08-01 09:05:50: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 09:05:50: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 09:05:50: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 09:05:50: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 09:05:50: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 09:05:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 09:19:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.311 s/op
Iteration   2: 16.270 s/op
Iteration   3: 15.927 s/op
Iteration   4: 16.251 s/op
Iteration   5: 16.671 s/op
Iteration   6: 16.922 s/op
Iteration   7: 16.147 s/op
Iteration   8: 15.955 s/op
Iteration   9: 17.097 s/op
Iteration  10: 16.132 s/op
Iteration  11: 16.247 s/op
Iteration  12: 17.115 s/op
Iteration  13: 17.009 s/op
Iteration  14: 17.109 s/op
Iteration  15: 15.806 s/op
Iteration  16: 17.047 s/op
Iteration  17: 16.863 s/op
Iteration  18: 16.871 s/op
Iteration  19: 16.878 s/op
Iteration  20: 17.110 s/op
Iteration  21: 17.113 s/op
Iteration  22: 17.006 s/op
Iteration  23: 16.794 s/op
Iteration  24: 17.057 s/op
Iteration  25: 16.953 s/op
Iteration  26: 17.164 s/op
Iteration  27: 17.238 s/op
Iteration  28: 17.028 s/op
Iteration  29: 16.949 s/op
Iteration  30: 16.649 s/op
Iteration  31: 16.196 s/op
Iteration  32: 16.788 s/op
Iteration  33: 17.166 s/op
Iteration  34: 16.349 s/op
Iteration  35: 16.195 s/op
Iteration  36: 17.132 s/op
Iteration  37: 17.089 s/op
Iteration  38: 17.022 s/op
Iteration  39: 17.137 s/op
Iteration  40: 16.733 s/op
Iteration  41: 16.866 s/op
Iteration  42: 17.234 s/op
Iteration  43: 16.890 s/op
Iteration  44: 17.101 s/op
Iteration  45: 16.621 s/op
Iteration  46: 16.228 s/op
Iteration  47: 16.402 s/op
Iteration  48: 16.410 s/op
Iteration  49: 16.848 s/op
Iteration  50: 17.119 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.744 ?(99.9%) 0.200 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 3 
    [16.000, 16.250) = 6 
    [16.250, 16.500) = 6 
    [16.500, 16.750) = 4 
    [16.750, 17.000) = 11 
    [17.000, 17.250) = 20 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.806 s/op
     p(50.0000) =     16.875 s/op
     p(90.0000) =     17.137 s/op
     p(95.0000) =     17.196 s/op
     p(99.0000) =     17.238 s/op
     p(99.9000) =     17.238 s/op
     p(99.9900) =     17.238 s/op
     p(99.9990) =     17.238 s/op
     p(99.9999) =     17.238 s/op
    p(100.0000) =     17.238 s/op


# Run complete. Total time: 00:13:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.744 ? 0.200   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_openj9_12.0.1_1564643150081.json
{"wallclock_times": [838.9794271090001], "core_cycle_counts": [[748926887070], [777708877409], [600151823496], [884269380563]], "aperf_counts": [[746759725898], [777561066525], [599956923669], [884051970894]], "mperf_counts": [[746761401976], [777561049108], [599956897068], [884051902112]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 09:19:49: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-08-01 09:19:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 09:19:49: INFO] 31 executions left in scheduler queue
[2019-08-01 09:19:49: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 09:19:49: INFO] Estimated completion (next execution): 2019-08-01 09:36:19 (0:16:29 from now)
[2019-08-01 09:19:49: INFO] Reboot in preparation for next execution
[2019-08-01 09:24:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 09:24:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 09:24:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 09:24:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 09:24:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 09:24:05: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 09:29:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.914 s/op
Iteration   2: 6.980 s/op
Iteration   3: 6.825 s/op
Iteration   4: 6.797 s/op
Iteration   5: 6.726 s/op
Iteration   6: 6.669 s/op
Iteration   7: 6.748 s/op
Iteration   8: 6.777 s/op
Iteration   9: 6.751 s/op
Iteration  10: 6.640 s/op
Iteration  11: 6.714 s/op
Iteration  12: 6.742 s/op
Iteration  13: 6.770 s/op
Iteration  14: 6.683 s/op
Iteration  15: 6.717 s/op
Iteration  16: 6.776 s/op
Iteration  17: 6.712 s/op
Iteration  18: 6.736 s/op
Iteration  19: 6.741 s/op
Iteration  20: 6.784 s/op
Iteration  21: 6.715 s/op
Iteration  22: 6.743 s/op
Iteration  23: 6.712 s/op
Iteration  24: 6.678 s/op
Iteration  25: 6.731 s/op
Iteration  26: 6.772 s/op
Iteration  27: 6.782 s/op
Iteration  28: 6.721 s/op
Iteration  29: 6.768 s/op
Iteration  30: 6.783 s/op
Iteration  31: 6.675 s/op
Iteration  32: 6.736 s/op
Iteration  33: 6.688 s/op
Iteration  34: 6.782 s/op
Iteration  35: 6.739 s/op
Iteration  36: 6.744 s/op
Iteration  37: 6.699 s/op
Iteration  38: 6.618 s/op
Iteration  39: 6.754 s/op
Iteration  40: 6.706 s/op
Iteration  41: 6.792 s/op
Iteration  42: 6.746 s/op
Iteration  43: 6.696 s/op
Iteration  44: 6.708 s/op
Iteration  45: 6.748 s/op
Iteration  46: 6.767 s/op
Iteration  47: 6.723 s/op
Iteration  48: 6.875 s/op
Iteration  49: 6.694 s/op
Iteration  50: 6.661 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      6.783 ?(99.9%) 0.155 s/op

  Histogram, s/op:
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 32 
    [6.750, 7.000) = 17 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 0 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.618 s/op
     p(50.0000) =      6.740 s/op
     p(90.0000) =      6.796 s/op
     p(95.0000) =      6.922 s/op
     p(99.0000) =      8.914 s/op
     p(99.9000) =      8.914 s/op
     p(99.9900) =      8.914 s/op
     p(99.9990) =      8.914 s/op
     p(99.9999) =      8.914 s/op
    p(100.0000) =      8.914 s/op


# Run complete. Total time: 00:05:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.783 ? 0.155   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fannkuchredux_openj9_12.0.1_1564644245283.json
{"wallclock_times": [341.083911434], "core_cycle_counts": [[392670915256], [288773524295], [266634537863], [221328855231]], "aperf_counts": [[391880552173], [288650663773], [266506008277], [221202730963]], "mperf_counts": [[391884785416], [288650638050], [266506600274], [221202802084]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 09:29:46: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 09:29:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 09:29:47: INFO] 30 executions left in scheduler queue
[2019-08-01 09:29:47: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 09:29:47: INFO] Estimated completion (next execution): 2019-08-01 09:37:58 (0:08:11 from now)
[2019-08-01 09:29:47: INFO] Reboot in preparation for next execution
[2019-08-01 09:33:59: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 09:33:59: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 09:33:59: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 09:33:59: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 09:33:59: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 09:34:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 09:43:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.556 s/op
Iteration   2: 11.168 s/op
Iteration   3: 11.071 s/op
Iteration   4: 11.050 s/op
Iteration   5: 11.128 s/op
Iteration   6: 11.082 s/op
Iteration   7: 11.147 s/op
Iteration   8: 11.107 s/op
Iteration   9: 11.096 s/op
Iteration  10: 11.106 s/op
Iteration  11: 11.054 s/op
Iteration  12: 11.079 s/op
Iteration  13: 11.180 s/op
Iteration  14: 11.116 s/op
Iteration  15: 11.134 s/op
Iteration  16: 11.142 s/op
Iteration  17: 11.163 s/op
Iteration  18: 11.078 s/op
Iteration  19: 11.083 s/op
Iteration  20: 11.022 s/op
Iteration  21: 11.078 s/op
Iteration  22: 11.074 s/op
Iteration  23: 11.067 s/op
Iteration  24: 11.009 s/op
Iteration  25: 11.007 s/op
Iteration  26: 11.081 s/op
Iteration  27: 11.164 s/op
Iteration  28: 11.108 s/op
Iteration  29: 11.136 s/op
Iteration  30: 11.120 s/op
Iteration  31: 11.114 s/op
Iteration  32: 11.019 s/op
Iteration  33: 11.189 s/op
Iteration  34: 11.031 s/op
Iteration  35: 11.080 s/op
Iteration  36: 11.085 s/op
Iteration  37: 11.106 s/op
Iteration  38: 11.015 s/op
Iteration  39: 11.003 s/op
Iteration  40: 11.124 s/op
Iteration  41: 11.140 s/op
Iteration  42: 11.150 s/op
Iteration  43: 11.068 s/op
Iteration  44: 11.117 s/op
Iteration  45: 11.092 s/op
Iteration  46: 11.002 s/op
Iteration  47: 11.107 s/op
Iteration  48: 11.068 s/op
Iteration  49: 11.078 s/op
Iteration  50: 11.073 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     11.121 ?(99.9%) 0.105 s/op

  Histogram, s/op:
    [11.000, 11.125) = 37 
    [11.125, 11.250) = 12 
    [11.250, 11.375) = 0 
    [11.375, 11.500) = 0 
    [11.500, 11.625) = 0 
    [11.625, 11.750) = 0 
    [11.750, 11.875) = 0 
    [11.875, 12.000) = 0 
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 0 
    [12.500, 12.625) = 1 
    [12.625, 12.750) = 0 
    [12.750, 12.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.002 s/op
     p(50.0000) =     11.089 s/op
     p(90.0000) =     11.164 s/op
     p(95.0000) =     11.184 s/op
     p(99.0000) =     12.556 s/op
     p(99.9000) =     12.556 s/op
     p(99.9900) =     12.556 s/op
     p(99.9990) =     12.556 s/op
     p(99.9999) =     12.556 s/op
    p(100.0000) =     12.556 s/op


# Run complete. Total time: 00:09:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  11.121 ? 0.105   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_fibonacci_openj9_12.0.1_1564644839785.json
{"wallclock_times": [557.670380927], "core_cycle_counts": [[701969289447], [397332743500], [438108316100], [277213274599]], "aperf_counts": [[700790051305], [397129309644], [437950980608], [277108852622]], "mperf_counts": [[700792946966], [397131698794], [437951180686], [277108835304]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 09:43:17: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 09:43:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 09:43:18: INFO] 29 executions left in scheduler queue
[2019-08-01 09:43:18: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 09:43:18: INFO] Estimated completion (next execution): 2019-08-01 09:55:06 (0:11:48 from now)
[2019-08-01 09:43:18: INFO] Reboot in preparation for next execution
[2019-08-01 09:47:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 09:47:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 09:47:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 09:47:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 09:47:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 09:47:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 09:52:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.593 s/op
Iteration   2: 6.612 s/op
Iteration   3: 5.964 s/op
Iteration   4: 6.000 s/op
Iteration   5: 5.985 s/op
Iteration   6: 5.994 s/op
Iteration   7: 5.873 s/op
Iteration   8: 5.913 s/op
Iteration   9: 5.898 s/op
Iteration  10: 5.881 s/op
Iteration  11: 5.854 s/op
Iteration  12: 5.837 s/op
Iteration  13: 5.857 s/op
Iteration  14: 5.809 s/op
Iteration  15: 5.852 s/op
Iteration  16: 5.876 s/op
Iteration  17: 5.893 s/op
Iteration  18: 5.815 s/op
Iteration  19: 5.870 s/op
Iteration  20: 5.872 s/op
Iteration  21: 5.899 s/op
Iteration  22: 5.921 s/op
Iteration  23: 5.978 s/op
Iteration  24: 5.951 s/op
Iteration  25: 5.979 s/op
Iteration  26: 5.957 s/op
Iteration  27: 5.936 s/op
Iteration  28: 5.930 s/op
Iteration  29: 5.948 s/op
Iteration  30: 5.985 s/op
Iteration  31: 5.981 s/op
Iteration  32: 5.997 s/op
Iteration  33: 5.954 s/op
Iteration  34: 5.935 s/op
Iteration  35: 5.923 s/op
Iteration  36: 5.939 s/op
Iteration  37: 5.981 s/op
Iteration  38: 6.010 s/op
Iteration  39: 5.933 s/op
Iteration  40: 5.974 s/op
Iteration  41: 5.902 s/op
Iteration  42: 5.936 s/op
Iteration  43: 5.929 s/op
Iteration  44: 5.915 s/op
Iteration  45: 5.998 s/op
Iteration  46: 6.012 s/op
Iteration  47: 5.960 s/op
Iteration  48: 5.952 s/op
Iteration  49: 5.940 s/op
Iteration  50: 5.946 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.977 ?(99.9%) 0.127 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 45 
    [6.000, 6.250) = 3 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.809 s/op
     p(50.0000) =      5.938 s/op
     p(90.0000) =      6.000 s/op
     p(95.0000) =      6.282 s/op
     p(99.0000) =      7.593 s/op
     p(99.9000) =      7.593 s/op
     p(99.9900) =      7.593 s/op
     p(99.9990) =      7.593 s/op
     p(99.9999) =      7.593 s/op
    p(100.0000) =      7.593 s/op


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.977 ? 0.127   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_binarytree_openj9_12.0.1_1564645651935.json
{"wallclock_times": [300.792380669], "core_cycle_counts": [[338204213917], [378746829287], [244426747417], [191506963190]], "aperf_counts": [[337429321518], [378600449241], [244265429809], [191384569048]], "mperf_counts": [[337441988268], [378600519548], [244265573068], [191385681320]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 09:52:32: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 09:52:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 09:52:33: INFO] 28 executions left in scheduler queue
[2019-08-01 09:52:33: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 09:52:33: INFO] Estimated completion (next execution): 2019-08-01 10:00:04 (0:07:31 from now)
[2019-08-01 09:52:33: INFO] Reboot in preparation for next execution
[2019-08-01 09:56:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 09:56:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 09:56:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 09:56:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 09:56:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 09:56:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 10:15:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 22.749 s/op
Iteration   2: 22.100 s/op
Iteration   3: 22.185 s/op
Iteration   4: 22.156 s/op
Iteration   5: 22.243 s/op
Iteration   6: 22.082 s/op
Iteration   7: 22.144 s/op
Iteration   8: 22.922 s/op
Iteration   9: 22.262 s/op
Iteration  10: 22.108 s/op
Iteration  11: 22.139 s/op
Iteration  12: 22.195 s/op
Iteration  13: 22.214 s/op
Iteration  14: 22.281 s/op
Iteration  15: 22.282 s/op
Iteration  16: 22.167 s/op
Iteration  17: 22.166 s/op
Iteration  18: 22.155 s/op
Iteration  19: 22.116 s/op
Iteration  20: 22.186 s/op
Iteration  21: 22.077 s/op
Iteration  22: 22.272 s/op
Iteration  23: 22.215 s/op
Iteration  24: 22.209 s/op
Iteration  25: 22.205 s/op
Iteration  26: 22.172 s/op
Iteration  27: 22.338 s/op
Iteration  28: 22.364 s/op
Iteration  29: 22.176 s/op
Iteration  30: 22.227 s/op
Iteration  31: 22.241 s/op
Iteration  32: 22.258 s/op
Iteration  33: 22.129 s/op
Iteration  34: 22.164 s/op
Iteration  35: 22.163 s/op
Iteration  36: 22.156 s/op
Iteration  37: 22.311 s/op
Iteration  38: 22.163 s/op
Iteration  39: 22.160 s/op
Iteration  40: 22.146 s/op
Iteration  41: 22.212 s/op
Iteration  42: 22.161 s/op
Iteration  43: 22.159 s/op
Iteration  44: 22.182 s/op
Iteration  45: 22.086 s/op
Iteration  46: 22.116 s/op
Iteration  47: 22.175 s/op
Iteration  48: 22.133 s/op
Iteration  49: 22.284 s/op
Iteration  50: 22.134 s/op


Result "fr.mleduc.minijava.MinijavaRevisitorBenchmark.minijavaInterpreter":
  N = 50
  mean =     22.213 ?(99.9%) 0.072 s/op

  Histogram, s/op:
    [22.000, 22.100) = 3 
    [22.100, 22.200) = 28 
    [22.200, 22.300) = 14 
    [22.300, 22.400) = 3 
    [22.400, 22.500) = 0 
    [22.500, 22.600) = 0 
    [22.600, 22.700) = 0 
    [22.700, 22.800) = 1 
    [22.800, 22.900) = 0 

  Percentiles, s/op:
      p(0.0000) =     22.077 s/op
     p(50.0000) =     22.174 s/op
     p(90.0000) =     22.308 s/op
     p(95.0000) =     22.537 s/op
     p(99.0000) =     22.922 s/op
     p(99.9000) =     22.922 s/op
     p(99.9900) =     22.922 s/op
     p(99.9990) =     22.922 s/op
     p(99.9999) =     22.922 s/op
    p(100.0000) =     22.922 s/op


# Run complete. Total time: 00:18:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         (program)  Mode  Cnt   Score   Error  Units
MinijavaRevisitorBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  22.213 ? 0.072   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_revisitor_sort_openj9_12.0.1_1564646209189.json
{"wallclock_times": [1112.31599431], "core_cycle_counts": [[990371689959], [1009496848644], [608142832879], [985030757728]], "aperf_counts": [[987662785758], [1009296438366], [607902205756], [984850673018]], "mperf_counts": [[987667556282], [1009298039812], [607902113182], [984850952670]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 10:15:21: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-08-01 10:15:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 10:15:22: INFO] 27 executions left in scheduler queue
[2019-08-01 10:15:22: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-01 10:15:22: INFO] Estimated completion (next execution): 2019-08-01 10:36:25 (0:21:02 from now)
[2019-08-01 10:15:22: INFO] Reboot in preparation for next execution
[2019-08-01 10:18:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 10:18:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 10:18:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 10:18:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 10:18:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 10:20:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.452 s/op
Iteration   2: 2.390 s/op
Iteration   3: 2.270 s/op
Iteration   4: 2.242 s/op
Iteration   5: 2.264 s/op
Iteration   6: 2.229 s/op
Iteration   7: 2.264 s/op
Iteration   8: 2.237 s/op
Iteration   9: 2.248 s/op
Iteration  10: 2.256 s/op
Iteration  11: 2.243 s/op
Iteration  12: 2.250 s/op
Iteration  13: 2.214 s/op
Iteration  14: 2.222 s/op
Iteration  15: 2.230 s/op
Iteration  16: 2.250 s/op
Iteration  17: 2.240 s/op
Iteration  18: 2.246 s/op
Iteration  19: 2.251 s/op
Iteration  20: 2.245 s/op
Iteration  21: 2.238 s/op
Iteration  22: 2.245 s/op
Iteration  23: 2.250 s/op
Iteration  24: 2.244 s/op
Iteration  25: 2.207 s/op
Iteration  26: 2.228 s/op
Iteration  27: 2.247 s/op
Iteration  28: 2.253 s/op
Iteration  29: 2.244 s/op
Iteration  30: 2.227 s/op
Iteration  31: 2.245 s/op
Iteration  32: 2.251 s/op
Iteration  33: 2.246 s/op
Iteration  34: 2.238 s/op
Iteration  35: 2.210 s/op
Iteration  36: 2.244 s/op
Iteration  37: 2.244 s/op
Iteration  38: 2.238 s/op
Iteration  39: 2.241 s/op
Iteration  40: 2.252 s/op
Iteration  41: 2.244 s/op
Iteration  42: 2.239 s/op
Iteration  43: 2.245 s/op
Iteration  44: 2.252 s/op
Iteration  45: 2.247 s/op
Iteration  46: 2.233 s/op
Iteration  47: 2.210 s/op
Iteration  48: 2.247 s/op
Iteration  49: 2.248 s/op
Iteration  50: 2.243 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.249 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [2.200, 2.225) = 5 
    [2.225, 2.250) = 33 
    [2.250, 2.275) = 10 
    [2.275, 2.300) = 0 
    [2.300, 2.325) = 0 
    [2.325, 2.350) = 0 
    [2.350, 2.375) = 0 
    [2.375, 2.400) = 1 
    [2.400, 2.425) = 0 
    [2.425, 2.450) = 0 
    [2.450, 2.475) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.207 s/op
     p(50.0000) =      2.244 s/op
     p(90.0000) =      2.263 s/op
     p(95.0000) =      2.324 s/op
     p(99.0000) =      2.452 s/op
     p(99.9000) =      2.452 s/op
     p(99.9900) =      2.452 s/op
     p(99.9990) =      2.452 s/op
     p(99.9999) =      2.452 s/op
    p(100.0000) =      2.452 s/op


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.249 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_hotspot_11.0.4_1564647534041.json
{"wallclock_times": [113.50509934799999], "core_cycle_counts": [[55826257920], [94974253697], [120186892834], [76340786598]], "aperf_counts": [[55477368338], [94932778754], [120157481825], [76317779169]], "mperf_counts": [[62330413410], [107543576596], [136413088950], [84822428836]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 10:20:47: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-01 10:20:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 10:20:48: INFO] 26 executions left in scheduler queue
[2019-08-01 10:20:48: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-01 10:20:48: INFO] Estimated completion (next execution): 2019-08-01 10:25:12 (0:04:23 from now)
[2019-08-01 10:20:48: INFO] Reboot in preparation for next execution
[2019-08-01 10:25:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 10:25:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 10:25:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 10:25:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 10:25:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 10:26:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.244 s/op
Iteration   2: 2.110 s/op
Iteration   3: 2.119 s/op
Iteration   4: 2.361 s/op
Iteration   5: 2.014 s/op
Iteration   6: 1.989 s/op
Iteration   7: 1.982 s/op
Iteration   8: 1.983 s/op
Iteration   9: 1.985 s/op
Iteration  10: 1.985 s/op
Iteration  11: 1.987 s/op
Iteration  12: 1.988 s/op
Iteration  13: 1.986 s/op
Iteration  14: 1.986 s/op
Iteration  15: 1.985 s/op
Iteration  16: 1.983 s/op
Iteration  17: 1.982 s/op
Iteration  18: 1.984 s/op
Iteration  19: 1.986 s/op
Iteration  20: 1.984 s/op
Iteration  21: 1.981 s/op
Iteration  22: 1.985 s/op
Iteration  23: 1.985 s/op
Iteration  24: 1.982 s/op
Iteration  25: 1.984 s/op
Iteration  26: 1.985 s/op
Iteration  27: 1.983 s/op
Iteration  28: 1.984 s/op
Iteration  29: 1.986 s/op
Iteration  30: 1.987 s/op
Iteration  31: 1.984 s/op
Iteration  32: 1.986 s/op
Iteration  33: 1.986 s/op
Iteration  34: 1.980 s/op
Iteration  35: 1.983 s/op
Iteration  36: 1.984 s/op
Iteration  37: 1.983 s/op
Iteration  38: 1.985 s/op
Iteration  39: 1.983 s/op
Iteration  40: 1.982 s/op
Iteration  41: 1.983 s/op
Iteration  42: 1.982 s/op
Iteration  43: 1.982 s/op
Iteration  44: 1.987 s/op
Iteration  45: 1.982 s/op
Iteration  46: 1.985 s/op
Iteration  47: 1.987 s/op
Iteration  48: 1.987 s/op
Iteration  49: 1.986 s/op
Iteration  50: 1.983 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.003 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 45 
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 2 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.980 s/op
     p(50.0000) =      1.985 s/op
     p(90.0000) =      2.011 s/op
     p(95.0000) =      2.175 s/op
     p(99.0000) =      2.361 s/op
     p(99.9000) =      2.361 s/op
     p(99.9900) =      2.361 s/op
     p(99.9990) =      2.361 s/op
     p(99.9999) =      2.361 s/op
    p(100.0000) =      2.361 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.003 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_hotspot_11.0.4_1564647918420.json
{"wallclock_times": [101.14422775699998], "core_cycle_counts": [[162857030912], [57203960385], [50397767594], [60974480118]], "aperf_counts": [[162682793883], [57157187644], [50361358527], [60954320219]], "mperf_counts": [[163083598170], [57204672570], [50406249630], [61018060272]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 10:26:59: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-08-01 10:27:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 10:27:00: INFO] 25 executions left in scheduler queue
[2019-08-01 10:27:00: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-08-01 10:27:00: INFO] Estimated completion (next execution): 2019-08-01 10:31:11 (0:04:11 from now)
[2019-08-01 10:27:00: INFO] Reboot in preparation for next execution
[2019-08-01 10:31:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 10:31:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 10:31:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 10:31:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 10:31:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 10:31:13: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 10:46:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.701 s/op
Iteration   2: 17.319 s/op
Iteration   3: 17.892 s/op
Iteration   4: 18.009 s/op
Iteration   5: 17.744 s/op
Iteration   6: 17.135 s/op
Iteration   7: 18.119 s/op
Iteration   8: 18.075 s/op
Iteration   9: 17.712 s/op
Iteration  10: 17.081 s/op
Iteration  11: 17.808 s/op
Iteration  12: 18.001 s/op
Iteration  13: 18.066 s/op
Iteration  14: 17.888 s/op
Iteration  15: 18.059 s/op
Iteration  16: 17.651 s/op
Iteration  17: 17.879 s/op
Iteration  18: 18.043 s/op
Iteration  19: 18.076 s/op
Iteration  20: 17.815 s/op
Iteration  21: 18.004 s/op
Iteration  22: 17.855 s/op
Iteration  23: 18.049 s/op
Iteration  24: 17.735 s/op
Iteration  25: 18.251 s/op
Iteration  26: 17.939 s/op
Iteration  27: 18.044 s/op
Iteration  28: 17.805 s/op
Iteration  29: 18.085 s/op
Iteration  30: 17.858 s/op
Iteration  31: 17.997 s/op
Iteration  32: 17.787 s/op
Iteration  33: 18.106 s/op
Iteration  34: 18.139 s/op
Iteration  35: 17.004 s/op
Iteration  36: 18.028 s/op
Iteration  37: 18.101 s/op
Iteration  38: 17.861 s/op
Iteration  39: 18.031 s/op
Iteration  40: 18.051 s/op
Iteration  41: 17.887 s/op
Iteration  42: 17.933 s/op
Iteration  43: 17.839 s/op
Iteration  44: 16.713 s/op
Iteration  45: 17.334 s/op
Iteration  46: 17.008 s/op
Iteration  47: 18.047 s/op
Iteration  48: 18.015 s/op
Iteration  49: 18.094 s/op
Iteration  50: 17.485 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     17.823 ?(99.9%) 0.169 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 0 
    [17.000, 17.250) = 4 
    [17.250, 17.500) = 3 
    [17.500, 17.750) = 5 
    [17.750, 18.000) = 15 
    [18.000, 18.250) = 21 
    [18.250, 18.500) = 1 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.713 s/op
     p(50.0000) =     17.912 s/op
     p(90.0000) =     18.100 s/op
     p(95.0000) =     18.128 s/op
     p(99.0000) =     18.251 s/op
     p(99.9000) =     18.251 s/op
     p(99.9900) =     18.251 s/op
     p(99.9990) =     18.251 s/op
     p(99.9999) =     18.251 s/op
    p(100.0000) =     18.251 s/op


# Run complete. Total time: 00:14:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.823 ? 0.169   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_openj9_11.0.4_1564648272793.json
{"wallclock_times": [892.9223436350001], "core_cycle_counts": [[513999512661], [854254772248], [892864273568], [923431388311]], "aperf_counts": [[511336192069], [854110814045], [892722876720], [923260816694]], "mperf_counts": [[511336651900], [854111647564], [892723032942], [923260783130]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 10:46:05: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-08-01 10:46:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 10:46:06: INFO] 24 executions left in scheduler queue
[2019-08-01 10:46:06: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-08-01 10:46:06: INFO] Estimated completion (next execution): 2019-08-01 11:03:30 (0:17:23 from now)
[2019-08-01 10:46:06: INFO] Reboot in preparation for next execution
[2019-08-01 10:50:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 10:50:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 10:50:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 10:50:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 10:50:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 10:55:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.055 s/op
Iteration   2: 6.594 s/op
Iteration   3: 6.640 s/op
Iteration   4: 6.622 s/op
Iteration   5: 6.623 s/op
Iteration   6: 6.626 s/op
Iteration   7: 6.623 s/op
Iteration   8: 6.624 s/op
Iteration   9: 6.626 s/op
Iteration  10: 6.628 s/op
Iteration  11: 6.623 s/op
Iteration  12: 6.621 s/op
Iteration  13: 6.620 s/op
Iteration  14: 6.622 s/op
Iteration  15: 6.632 s/op
Iteration  16: 6.625 s/op
Iteration  17: 6.627 s/op
Iteration  18: 6.626 s/op
Iteration  19: 6.627 s/op
Iteration  20: 6.624 s/op
Iteration  21: 6.627 s/op
Iteration  22: 6.625 s/op
Iteration  23: 6.624 s/op
Iteration  24: 6.624 s/op
Iteration  25: 6.624 s/op
Iteration  26: 6.624 s/op
Iteration  27: 6.626 s/op
Iteration  28: 6.626 s/op
Iteration  29: 6.623 s/op
Iteration  30: 6.624 s/op
Iteration  31: 6.624 s/op
Iteration  32: 6.624 s/op
Iteration  33: 6.622 s/op
Iteration  34: 6.626 s/op
Iteration  35: 6.623 s/op
Iteration  36: 6.629 s/op
Iteration  37: 6.622 s/op
Iteration  38: 6.626 s/op
Iteration  39: 6.627 s/op
Iteration  40: 6.626 s/op
Iteration  41: 6.622 s/op
Iteration  42: 6.629 s/op
Iteration  43: 6.628 s/op
Iteration  44: 6.625 s/op
Iteration  45: 6.623 s/op
Iteration  46: 6.626 s/op
Iteration  47: 6.626 s/op
Iteration  48: 6.626 s/op
Iteration  49: 6.624 s/op
Iteration  50: 6.627 s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      6.633 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 1 
    [6.600, 6.650) = 48 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 0 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 0 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 0 
    [7.050, 7.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.594 s/op
     p(50.0000) =      6.625 s/op
     p(90.0000) =      6.629 s/op
     p(95.0000) =      6.636 s/op
     p(99.0000) =      7.055 s/op
     p(99.9000) =      7.055 s/op
     p(99.9900) =      7.055 s/op
     p(99.9990) =      7.055 s/op
     p(99.9999) =      7.055 s/op
    p(100.0000) =      7.055 s/op


# Run complete. Total time: 00:05:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  6.633 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_hotspot_12.0.2_1564649420954.json
{"wallclock_times": [332.61133398999993], "core_cycle_counts": [[92324844449], [189755319469], [424602506021], [367510781150]], "aperf_counts": [[91293869779], [189685618965], [424566250103], [367467450111]], "mperf_counts": [[91654593936], [189766233680], [424786156404], [367757561736]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 10:55:53: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-08-01 10:55:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 10:55:54: INFO] 23 executions left in scheduler queue
[2019-08-01 10:55:54: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 10:55:54: INFO] Estimated completion (next execution): 2019-08-01 11:03:57 (0:08:02 from now)
[2019-08-01 10:55:54: INFO] Reboot in preparation for next execution
[2019-08-01 11:07:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.225 s/op
Iteration   2: 9.240 s/op
Iteration   3: 9.245 s/op
Iteration   4: 9.201 s/op
Iteration   5: 9.228 s/op
Iteration   6: 9.176 s/op
Iteration   7: 9.216 s/op
Iteration   8: 9.219 s/op
Iteration   9: 9.189 s/op
Iteration  10: 9.183 s/op
Iteration  11: 9.191 s/op
Iteration  12: 9.184 s/op
Iteration  13: 9.189 s/op
Iteration  14: 9.189 s/op
Iteration  15: 9.192 s/op
Iteration  16: 9.164 s/op
Iteration  17: 9.228 s/op
Iteration  18: 9.211 s/op
Iteration  19: 9.221 s/op
Iteration  20: 9.228 s/op
Iteration  21: 9.201 s/op
Iteration  22: 9.207 s/op
Iteration  23: 9.229 s/op
Iteration  24: 9.187 s/op
Iteration  25: 9.208 s/op
Iteration  26: 9.227 s/op
Iteration  27: 9.193 s/op
Iteration  28: 9.215 s/op
Iteration  29: 9.226 s/op
Iteration  30: 9.216 s/op
Iteration  31: 9.200 s/op
Iteration  32: 9.233 s/op
Iteration  33: 9.221 s/op
Iteration  34: 9.184 s/op
Iteration  35: 9.237 s/op
Iteration  36: 9.223 s/op
Iteration  37: 9.165 s/op
Iteration  38: 9.175 s/op
Iteration  39: 9.230 s/op
Iteration  40: 9.237 s/op
Iteration  41: 9.194 s/op
Iteration  42: 9.203 s/op
Iteration  43: 9.229 s/op
Iteration  44: 9.175 s/op
Iteration  45: 9.219 s/op
Iteration  46: 9.223 s/op
Iteration  47: 9.197 s/op
Iteration  48: 9.205 s/op
Iteration  49: 9.190 s/op
Iteration  50: 9.195 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      9.207 ?(99.9%) 0.010 s/op

  Histogram, s/op:
    [9.160, 9.165) = 2 
    [9.165, 9.170) = 0 
    [9.170, 9.175) = 0 
    [9.175, 9.180) = 3 
    [9.180, 9.185) = 3 
    [9.185, 9.190) = 5 
    [9.190, 9.195) = 4 
    [9.195, 9.200) = 3 
    [9.200, 9.205) = 4 
    [9.205, 9.210) = 2 
    [9.210, 9.215) = 1 
    [9.215, 9.220) = 5 
    [9.220, 9.225) = 4 
    [9.225, 9.230) = 8 
    [9.230, 9.235) = 2 
    [9.235, 9.240) = 3 
    [9.240, 9.245) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.164 s/op
     p(50.0000) =      9.208 s/op
     p(90.0000) =      9.232 s/op
     p(95.0000) =      9.238 s/op
     p(99.0000) =      9.245 s/op
     p(99.9000) =      9.245 s/op
     p(99.9900) =      9.245 s/op
     p(99.9990) =      9.245 s/op
     p(99.9999) =      9.245 s/op
    p(100.0000) =      9.245 s/op


# Run complete. Total time: 00:07:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.207 ? 0.010   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_hotspot-8u222-b10_1564649965502.json
{"wallclock_times": [461.20268698999996], "core_cycle_counts": [[340212422579], [197374793034], [488306076507], [460208007412]], "aperf_counts": [[339146587495], [197285910380], [488284082505], [460186703215]], "mperf_counts": [[339150277980], [197296836714], [488285797544], [460186720482]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 11:07:06: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 11:07:07: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 11:07:07: INFO] 22 executions left in scheduler queue
[2019-08-01 11:07:07: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 11:07:07: INFO] Estimated completion (next execution): 2019-08-01 11:17:19 (0:10:11 from now)
[2019-08-01 11:07:07: INFO] Reboot in preparation for next execution
[2019-08-01 11:23:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.748 s/op
Iteration   2: 14.882 s/op
Iteration   3: 14.989 s/op
Iteration   4: 14.915 s/op
Iteration   5: 14.810 s/op
Iteration   6: 14.852 s/op
Iteration   7: 14.877 s/op
Iteration   8: 14.896 s/op
Iteration   9: 14.870 s/op
Iteration  10: 14.880 s/op
Iteration  11: 14.896 s/op
Iteration  12: 14.885 s/op
Iteration  13: 14.929 s/op
Iteration  14: 14.883 s/op
Iteration  15: 14.898 s/op
Iteration  16: 14.915 s/op
Iteration  17: 14.906 s/op
Iteration  18: 14.884 s/op
Iteration  19: 14.950 s/op
Iteration  20: 15.506 s/op
Iteration  21: 14.950 s/op
Iteration  22: 14.902 s/op
Iteration  23: 14.923 s/op
Iteration  24: 14.882 s/op
Iteration  25: 14.904 s/op
Iteration  26: 16.269 s/op
Iteration  27: 14.924 s/op
Iteration  28: 14.951 s/op
Iteration  29: 14.906 s/op
Iteration  30: 14.878 s/op
Iteration  31: 14.891 s/op
Iteration  32: 14.907 s/op
Iteration  33: 14.894 s/op
Iteration  34: 14.932 s/op
Iteration  35: 14.911 s/op
Iteration  36: 14.914 s/op
Iteration  37: 14.928 s/op
Iteration  38: 14.941 s/op
Iteration  39: 14.940 s/op
Iteration  40: 14.862 s/op
Iteration  41: 14.993 s/op
Iteration  42: 14.929 s/op
Iteration  43: 14.885 s/op
Iteration  44: 14.880 s/op
Iteration  45: 14.866 s/op
Iteration  46: 14.913 s/op
Iteration  47: 14.886 s/op
Iteration  48: 14.886 s/op
Iteration  49: 14.905 s/op
Iteration  50: 14.887 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     14.940 ?(99.9%) 0.106 s/op

  Histogram, s/op:
    [14.000, 14.250) = 0 
    [14.250, 14.500) = 0 
    [14.500, 14.750) = 1 
    [14.750, 15.000) = 47 
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 1 
    [15.750, 16.000) = 0 
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 1 
    [16.500, 16.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.748 s/op
     p(50.0000) =     14.903 s/op
     p(90.0000) =     14.951 s/op
     p(95.0000) =     15.224 s/op
     p(99.0000) =     16.269 s/op
     p(99.9000) =     16.269 s/op
     p(99.9900) =     16.269 s/op
     p(99.9990) =     16.269 s/op
     p(99.9999) =     16.269 s/op
    p(100.0000) =     16.269 s/op


# Run complete. Total time: 00:12:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.940 ? 0.106   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_hotspot-8u222-b10_1564650680582.json
{"wallclock_times": [747.859748511], "core_cycle_counts": [[491481988335], [324064599967], [1028103626749], [562834420311]], "aperf_counts": [[489722408618], [323893163480], [1028034497170], [562801245002]], "mperf_counts": [[489727183634], [323903296138], [1028034482894], [562802717156]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 11:23:48: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 11:23:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 11:23:49: INFO] 21 executions left in scheduler queue
[2019-08-01 11:23:49: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 11:23:49: INFO] Estimated completion (next execution): 2019-08-01 11:38:47 (0:14:58 from now)
[2019-08-01 11:23:49: INFO] Reboot in preparation for next execution
[2019-08-01 11:32:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.321 s/op
Iteration   2: 5.847 s/op
Iteration   3: 5.916 s/op
Iteration   4: 5.855 s/op
Iteration   5: 5.873 s/op
Iteration   6: 5.899 s/op
Iteration   7: 5.874 s/op
Iteration   8: 5.814 s/op
Iteration   9: 5.797 s/op
Iteration  10: 5.890 s/op
Iteration  11: 5.873 s/op
Iteration  12: 5.896 s/op
Iteration  13: 5.882 s/op
Iteration  14: 5.883 s/op
Iteration  15: 5.885 s/op
Iteration  16: 5.895 s/op
Iteration  17: 5.905 s/op
Iteration  18: 5.905 s/op
Iteration  19: 5.887 s/op
Iteration  20: 5.893 s/op
Iteration  21: 5.815 s/op
Iteration  22: 5.793 s/op
Iteration  23: 5.889 s/op
Iteration  24: 5.884 s/op
Iteration  25: 5.888 s/op
Iteration  26: 5.890 s/op
Iteration  27: 5.898 s/op
Iteration  28: 5.901 s/op
Iteration  29: 5.879 s/op
Iteration  30: 5.816 s/op
Iteration  31: 5.760 s/op
Iteration  32: 5.886 s/op
Iteration  33: 5.888 s/op
Iteration  34: 5.893 s/op
Iteration  35: 5.904 s/op
Iteration  36: 5.883 s/op
Iteration  37: 5.869 s/op
Iteration  38: 5.893 s/op
Iteration  39: 5.805 s/op
Iteration  40: 5.796 s/op
Iteration  41: 5.894 s/op
Iteration  42: 5.887 s/op
Iteration  43: 5.888 s/op
Iteration  44: 5.892 s/op
Iteration  45: 5.901 s/op
Iteration  46: 5.901 s/op
Iteration  47: 5.892 s/op
Iteration  48: 5.905 s/op
Iteration  49: 5.900 s/op
Iteration  50: 5.818 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.882 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 4 
    [5.800, 5.850) = 6 
    [5.850, 5.900) = 30 
    [5.900, 5.950) = 9 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 0 
    [6.050, 6.100) = 0 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 1 
    [6.350, 6.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.760 s/op
     p(50.0000) =      5.888 s/op
     p(90.0000) =      5.905 s/op
     p(95.0000) =      5.910 s/op
     p(99.0000) =      6.321 s/op
     p(99.9000) =      6.321 s/op
     p(99.9900) =      6.321 s/op
     p(99.9990) =      6.321 s/op
     p(99.9999) =      6.321 s/op
    p(100.0000) =      6.321 s/op


# Run complete. Total time: 00:04:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.882 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_hotspot-8u222-b10_1564651684063.json
{"wallclock_times": [295.08348241199997], "core_cycle_counts": [[375706523900], [171862865071], [267246909771], [196624021103]], "aperf_counts": [[375125862565], [171782200882], [267193429994], [196578763021]], "mperf_counts": [[375129802158], [171784300896], [267205376992], [196590177048]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 11:32:59: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 11:33:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 11:33:00: INFO] 20 executions left in scheduler queue
[2019-08-01 11:33:00: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 11:33:00: INFO] Estimated completion (next execution): 2019-08-01 11:40:25 (0:07:25 from now)
[2019-08-01 11:33:00: INFO] Reboot in preparation for next execution
[2019-08-01 11:40:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.736 s/op
Iteration   2: 5.398 s/op
Iteration   3: 5.434 s/op
Iteration   4: 5.336 s/op
Iteration   5: 5.312 s/op
Iteration   6: 5.295 s/op
Iteration   7: 5.311 s/op
Iteration   8: 5.298 s/op
Iteration   9: 5.335 s/op
Iteration  10: 5.309 s/op
Iteration  11: 5.309 s/op
Iteration  12: 5.321 s/op
Iteration  13: 5.309 s/op
Iteration  14: 5.315 s/op
Iteration  15: 5.299 s/op
Iteration  16: 5.314 s/op
Iteration  17: 5.293 s/op
Iteration  18: 5.326 s/op
Iteration  19: 5.313 s/op
Iteration  20: 5.302 s/op
Iteration  21: 5.305 s/op
Iteration  22: 5.324 s/op
Iteration  23: 5.314 s/op
Iteration  24: 5.306 s/op
Iteration  25: 5.313 s/op
Iteration  26: 5.348 s/op
Iteration  27: 5.303 s/op
Iteration  28: 5.288 s/op
Iteration  29: 5.340 s/op
Iteration  30: 5.291 s/op
Iteration  31: 5.302 s/op
Iteration  32: 5.288 s/op
Iteration  33: 5.281 s/op
Iteration  34: 5.313 s/op
Iteration  35: 5.319 s/op
Iteration  36: 5.308 s/op
Iteration  37: 5.308 s/op
Iteration  38: 5.295 s/op
Iteration  39: 5.288 s/op
Iteration  40: 5.312 s/op
Iteration  41: 5.291 s/op
Iteration  42: 5.316 s/op
Iteration  43: 5.319 s/op
Iteration  44: 5.310 s/op
Iteration  45: 5.291 s/op
Iteration  46: 5.289 s/op
Iteration  47: 5.295 s/op
Iteration  48: 5.324 s/op
Iteration  49: 5.316 s/op
Iteration  50: 5.317 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.322 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 14 
    [5.300, 5.350) = 33 
    [5.350, 5.400) = 1 
    [5.400, 5.450) = 1 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 0 
    [5.650, 5.700) = 0 
    [5.700, 5.750) = 1 
    [5.750, 5.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.281 s/op
     p(50.0000) =      5.311 s/op
     p(90.0000) =      5.340 s/op
     p(95.0000) =      5.414 s/op
     p(99.0000) =      5.736 s/op
     p(99.9000) =      5.736 s/op
     p(99.9900) =      5.736 s/op
     p(99.9990) =      5.736 s/op
     p(99.9999) =      5.736 s/op
    p(100.0000) =      5.736 s/op


# Run complete. Total time: 00:04:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.322 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_hotspot-8u222-b10_1564652191561.json
{"wallclock_times": [266.992584596], "core_cycle_counts": [[181138766942], [127695938634], [219948153378], [339743895398]], "aperf_counts": [[180492536009], [127643527629], [219929795828], [339729284938]], "mperf_counts": [[180498782560], [127645342306], [219930083402], [339742170826]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 11:40:58: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-08-01 11:40:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 11:40:59: INFO] 19 executions left in scheduler queue
[2019-08-01 11:40:59: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-01 11:40:59: INFO] Estimated completion (next execution): 2019-08-01 11:47:56 (0:06:57 from now)
[2019-08-01 11:40:59: INFO] Reboot in preparation for next execution
[2019-08-01 11:45:15: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 11:45:15: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 11:45:15: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 11:45:15: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 11:45:15: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 11:45:15: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 11:46:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.683 s/op
Iteration   2: 2.288 s/op
Iteration   3: 2.236 s/op
Iteration   4: 2.044 s/op
Iteration   5: 2.017 s/op
Iteration   6: 1.968 s/op
Iteration   7: 1.924 s/op
Iteration   8: 1.945 s/op
Iteration   9: 1.939 s/op
Iteration  10: 1.938 s/op
Iteration  11: 1.958 s/op
Iteration  12: 1.911 s/op
Iteration  13: 1.951 s/op
Iteration  14: 1.945 s/op
Iteration  15: 1.962 s/op
Iteration  16: 1.952 s/op
Iteration  17: 1.942 s/op
Iteration  18: 1.956 s/op
Iteration  19: 1.971 s/op
Iteration  20: 1.982 s/op
Iteration  21: 1.973 s/op
Iteration  22: 1.992 s/op
Iteration  23: 1.984 s/op
Iteration  24: 1.960 s/op
Iteration  25: 1.992 s/op
Iteration  26: 1.960 s/op
Iteration  27: 2.004 s/op
Iteration  28: 2.005 s/op
Iteration  29: 1.963 s/op
Iteration  30: 1.950 s/op
Iteration  31: 1.940 s/op
Iteration  32: 1.976 s/op
Iteration  33: 1.924 s/op
Iteration  34: 1.955 s/op
Iteration  35: 1.913 s/op
Iteration  36: 1.975 s/op
Iteration  37: 1.945 s/op
Iteration  38: 1.932 s/op
Iteration  39: 1.931 s/op
Iteration  40: 1.972 s/op
Iteration  41: 1.952 s/op
Iteration  42: 1.950 s/op
Iteration  43: 1.958 s/op
Iteration  44: 1.952 s/op
Iteration  45: 1.937 s/op
Iteration  46: 1.963 s/op
Iteration  47: 1.957 s/op
Iteration  48: 1.967 s/op
Iteration  49: 1.929 s/op
Iteration  50: 1.923 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.985 ?(99.9%) 0.060 s/op

  Histogram, s/op:
    [1.900, 1.950) = 17 
    [1.950, 2.000) = 26 
    [2.000, 2.050) = 4 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.911 s/op
     p(50.0000) =      1.957 s/op
     p(90.0000) =      2.015 s/op
     p(95.0000) =      2.259 s/op
     p(99.0000) =      2.683 s/op
     p(99.9000) =      2.683 s/op
     p(99.9900) =      2.683 s/op
     p(99.9990) =      2.683 s/op
     p(99.9999) =      2.683 s/op
    p(100.0000) =      2.683 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.985 ? 0.060   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_openj9_11.0.4_1564652715267.json
{"wallclock_times": [100.89020568900003], "core_cycle_counts": [[119440976473], [54530320462], [98409633668], [82591847808]], "aperf_counts": [[119130308013], [54459169606], [98353834915], [82489947729]], "mperf_counts": [[119132268394], [54463951424], [98353837206], [82490681060]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 11:46:56: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-01 11:46:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 11:46:57: INFO] 18 executions left in scheduler queue
[2019-08-01 11:46:57: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-01 11:46:57: INFO] Estimated completion (next execution): 2019-08-01 11:51:08 (0:04:11 from now)
[2019-08-01 11:46:57: INFO] Reboot in preparation for next execution
[2019-08-01 11:51:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 11:51:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 11:51:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 11:51:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 11:51:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 11:51:12: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-08-01 11:53:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.006 s/op
Iteration   2: 2.635 s/op
Iteration   3: 2.630 s/op
Iteration   4: 2.745 s/op
Iteration   5: 2.393 s/op
Iteration   6: 2.414 s/op
Iteration   7: 2.399 s/op
Iteration   8: 2.406 s/op
Iteration   9: 2.449 s/op
Iteration  10: 2.388 s/op
Iteration  11: 2.408 s/op
Iteration  12: 2.413 s/op
Iteration  13: 2.396 s/op
Iteration  14: 2.399 s/op
Iteration  15: 2.406 s/op
Iteration  16: 2.379 s/op
Iteration  17: 2.372 s/op
Iteration  18: 2.400 s/op
Iteration  19: 2.412 s/op
Iteration  20: 2.382 s/op
Iteration  21: 2.397 s/op
Iteration  22: 2.391 s/op
Iteration  23: 2.354 s/op
Iteration  24: 2.397 s/op
Iteration  25: 2.383 s/op
Iteration  26: 2.381 s/op
Iteration  27: 2.432 s/op
Iteration  28: 2.385 s/op
Iteration  29: 2.404 s/op
Iteration  30: 2.425 s/op
Iteration  31: 2.369 s/op
Iteration  32: 2.364 s/op
Iteration  33: 2.403 s/op
Iteration  34: 2.412 s/op
Iteration  35: 2.404 s/op
Iteration  36: 2.375 s/op
Iteration  37: 2.350 s/op
Iteration  38: 2.399 s/op
Iteration  39: 2.377 s/op
Iteration  40: 2.375 s/op
Iteration  41: 2.397 s/op
Iteration  42: 2.350 s/op
Iteration  43: 2.418 s/op
Iteration  44: 2.423 s/op
Iteration  45: 2.390 s/op
Iteration  46: 2.368 s/op
Iteration  47: 2.386 s/op
Iteration  48: 2.351 s/op
Iteration  49: 2.395 s/op
Iteration  50: 2.345 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.421 ?(99.9%) 0.055 s/op

  Histogram, s/op:
    [2.300, 2.350) = 3 
    [2.350, 2.400) = 27 
    [2.400, 2.450) = 16 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 2 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 1 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.345 s/op
     p(50.0000) =      2.397 s/op
     p(90.0000) =      2.447 s/op
     p(95.0000) =      2.685 s/op
     p(99.0000) =      3.006 s/op
     p(99.9000) =      3.006 s/op
     p(99.9900) =      3.006 s/op
     p(99.9990) =      3.006 s/op
     p(99.9999) =      3.006 s/op
    p(100.0000) =      3.006 s/op


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.421 ? 0.055   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_openj9_11.0.4_1564653072630.json
{"wallclock_times": [122.509294968], "core_cycle_counts": [[113483938707], [104122564759], [97762337595], [104462810238]], "aperf_counts": [[113152052482], [104063400585], [97715311244], [104409298353]], "mperf_counts": [[113158446534], [104071062618], [97717448446], [104409404594]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 11:53:15: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-08-01 11:53:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 11:53:16: INFO] 17 executions left in scheduler queue
[2019-08-01 11:53:16: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 11:53:16: INFO] Estimated completion (next execution): 2019-08-01 11:57:49 (0:04:32 from now)
[2019-08-01 11:53:16: INFO] Reboot in preparation for next execution
[2019-08-01 11:57:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 11:57:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 11:57:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 11:57:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 11:57:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 12:04:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.253 s/op
Iteration   2: 7.956 s/op
Iteration   3: 7.974 s/op
Iteration   4: 7.894 s/op
Iteration   5: 7.885 s/op
Iteration   6: 7.905 s/op
Iteration   7: 7.869 s/op
Iteration   8: 7.864 s/op
Iteration   9: 7.850 s/op
Iteration  10: 7.860 s/op
Iteration  11: 7.859 s/op
Iteration  12: 7.857 s/op
Iteration  13: 7.835 s/op
Iteration  14: 7.846 s/op
Iteration  15: 7.878 s/op
Iteration  16: 7.858 s/op
Iteration  17: 7.860 s/op
Iteration  18: 7.891 s/op
Iteration  19: 7.849 s/op
Iteration  20: 7.860 s/op
Iteration  21: 7.863 s/op
Iteration  22: 7.859 s/op
Iteration  23: 7.823 s/op
Iteration  24: 7.815 s/op
Iteration  25: 7.802 s/op
Iteration  26: 7.773 s/op
Iteration  27: 7.883 s/op
Iteration  28: 7.777 s/op
Iteration  29: 7.851 s/op
Iteration  30: 7.775 s/op
Iteration  31: 7.843 s/op
Iteration  32: 7.857 s/op
Iteration  33: 7.705 s/op
Iteration  34: 7.815 s/op
Iteration  35: 7.821 s/op
Iteration  36: 7.842 s/op
Iteration  37: 7.819 s/op
Iteration  38: 7.836 s/op
Iteration  39: 7.844 s/op
Iteration  40: 7.849 s/op
Iteration  41: 7.838 s/op
Iteration  42: 7.851 s/op
Iteration  43: 7.836 s/op
Iteration  44: 7.835 s/op
Iteration  45: 7.836 s/op
Iteration  46: 7.857 s/op
Iteration  47: 7.860 s/op
Iteration  48: 7.820 s/op
Iteration  49: 7.803 s/op
Iteration  50: 7.793 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.854 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [7.700, 7.750) = 1 
    [7.750, 7.800) = 4 
    [7.800, 7.850) = 20 
    [7.850, 7.900) = 21 
    [7.900, 7.950) = 1 
    [7.950, 8.000) = 2 
    [8.000, 8.050) = 0 
    [8.050, 8.100) = 0 
    [8.100, 8.150) = 0 
    [8.150, 8.200) = 0 
    [8.200, 8.250) = 0 
    [8.250, 8.300) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.705 s/op
     p(50.0000) =      7.850 s/op
     p(90.0000) =      7.894 s/op
     p(95.0000) =      7.964 s/op
     p(99.0000) =      8.253 s/op
     p(99.9000) =      8.253 s/op
     p(99.9900) =      8.253 s/op
     p(99.9990) =      8.253 s/op
     p(99.9999) =      8.253 s/op
    p(100.0000) =      8.253 s/op


# Run complete. Total time: 00:06:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  7.854 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_hotspot_12.0.2_1564653449542.json
{"wallclock_times": [393.79097496200006], "core_cycle_counts": [[299418119966], [315347958322], [426897265417], [355170587499]], "aperf_counts": [[298367415052], [315253857415], [426851083915], [355135590563]], "mperf_counts": [[298939570236], [315542819862], [427143382434], [355297775510]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 12:04:03: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 12:04:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 12:04:04: INFO] 16 executions left in scheduler queue
[2019-08-01 12:04:04: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 12:04:04: INFO] Estimated completion (next execution): 2019-08-01 12:13:08 (0:09:04 from now)
[2019-08-01 12:04:04: INFO] Reboot in preparation for next execution
[2019-08-01 12:08:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 12:08:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 12:08:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 12:08:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 12:08:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 12:18:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.459 s/op
Iteration   2: 13.034 s/op
Iteration   3: 12.415 s/op
Iteration   4: 12.376 s/op
Iteration   5: 12.407 s/op
Iteration   6: 12.415 s/op
Iteration   7: 12.417 s/op
Iteration   8: 12.439 s/op
Iteration   9: 12.458 s/op
Iteration  10: 12.400 s/op
Iteration  11: 12.395 s/op
Iteration  12: 12.388 s/op
Iteration  13: 12.406 s/op
Iteration  14: 12.434 s/op
Iteration  15: 12.431 s/op
Iteration  16: 12.427 s/op
Iteration  17: 12.418 s/op
Iteration  18: 12.388 s/op
Iteration  19: 12.406 s/op
Iteration  20: 12.407 s/op
Iteration  21: 12.391 s/op
Iteration  22: 12.438 s/op
Iteration  23: 12.431 s/op
Iteration  24: 12.432 s/op
Iteration  25: 12.388 s/op
Iteration  26: 12.391 s/op
Iteration  27: 12.405 s/op
Iteration  28: 12.437 s/op
Iteration  29: 12.372 s/op
Iteration  30: 12.404 s/op
Iteration  31: 12.406 s/op
Iteration  32: 12.416 s/op
Iteration  33: 12.409 s/op
Iteration  34: 12.416 s/op
Iteration  35: 12.426 s/op
Iteration  36: 12.400 s/op
Iteration  37: 12.377 s/op
Iteration  38: 12.384 s/op
Iteration  39: 12.444 s/op
Iteration  40: 12.465 s/op
Iteration  41: 12.417 s/op
Iteration  42: 12.437 s/op
Iteration  43: 12.422 s/op
Iteration  44: 12.426 s/op
Iteration  45: 12.397 s/op
Iteration  46: 12.390 s/op
Iteration  47: 12.401 s/op
Iteration  48: 12.415 s/op
Iteration  49: 12.429 s/op
Iteration  50: 12.396 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     12.426 ?(99.9%) 0.045 s/op

  Histogram, s/op:
    [12.300, 12.350) = 0 
    [12.350, 12.400) = 14 
    [12.400, 12.450) = 32 
    [12.450, 12.500) = 3 
    [12.500, 12.550) = 0 
    [12.550, 12.600) = 0 
    [12.600, 12.650) = 0 
    [12.650, 12.700) = 0 
    [12.700, 12.750) = 0 
    [12.750, 12.800) = 0 
    [12.800, 12.850) = 0 
    [12.850, 12.900) = 0 
    [12.900, 12.950) = 0 
    [12.950, 13.000) = 0 
    [13.000, 13.050) = 1 
    [13.050, 13.100) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.372 s/op
     p(50.0000) =     12.415 s/op
     p(90.0000) =     12.443 s/op
     p(95.0000) =     12.462 s/op
     p(99.0000) =     13.034 s/op
     p(99.9000) =     13.034 s/op
     p(99.9900) =     13.034 s/op
     p(99.9990) =     13.034 s/op
     p(99.9999) =     13.034 s/op
    p(100.0000) =     13.034 s/op


# Run complete. Total time: 00:10:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  12.426 ? 0.045   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_hotspot_12.0.2_1564654100166.json
{"wallclock_times": [622.288835207], "core_cycle_counts": [[232572479384], [237954344993], [1222224224980], [317358224293]], "aperf_counts": [[230867417863], [237795688570], [1222166921988], [317240053112]], "mperf_counts": [[231067812062], [237820050210], [1222302839164], [317291288446]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 12:18:42: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 12:18:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 12:18:43: INFO] 15 executions left in scheduler queue
[2019-08-01 12:18:43: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 12:18:43: INFO] Estimated completion (next execution): 2019-08-01 12:31:35 (0:12:52 from now)
[2019-08-01 12:18:43: INFO] Reboot in preparation for next execution
[2019-08-01 12:22:57: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 12:22:57: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 12:22:57: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 12:22:57: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 12:22:57: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 12:29:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.474 s/op
Iteration   2: 8.154 s/op
Iteration   3: 8.671 s/op
Iteration   4: 7.538 s/op
Iteration   5: 8.100 s/op
Iteration   6: 8.164 s/op
Iteration   7: 8.302 s/op
Iteration   8: 8.292 s/op
Iteration   9: 8.304 s/op
Iteration  10: 8.250 s/op
Iteration  11: 8.270 s/op
Iteration  12: 8.276 s/op
Iteration  13: 8.305 s/op
Iteration  14: 8.270 s/op
Iteration  15: 8.242 s/op
Iteration  16: 8.287 s/op
Iteration  17: 8.312 s/op
Iteration  18: 8.281 s/op
Iteration  19: 8.311 s/op
Iteration  20: 8.312 s/op
Iteration  21: 8.246 s/op
Iteration  22: 8.332 s/op
Iteration  23: 7.978 s/op
Iteration  24: 8.322 s/op
Iteration  25: 8.319 s/op
Iteration  26: 8.290 s/op
Iteration  27: 8.342 s/op
Iteration  28: 8.317 s/op
Iteration  29: 8.307 s/op
Iteration  30: 7.553 s/op
Iteration  31: 8.310 s/op
Iteration  32: 8.297 s/op
Iteration  33: 8.331 s/op
Iteration  34: 8.303 s/op
Iteration  35: 8.308 s/op
Iteration  36: 8.312 s/op
Iteration  37: 8.289 s/op
Iteration  38: 8.215 s/op
Iteration  39: 7.774 s/op
Iteration  40: 8.298 s/op
Iteration  41: 8.275 s/op
Iteration  42: 7.833 s/op
Iteration  43: 8.302 s/op
Iteration  44: 8.274 s/op
Iteration  45: 8.291 s/op
Iteration  46: 8.258 s/op
Iteration  47: 8.301 s/op
Iteration  48: 8.316 s/op
Iteration  49: 8.291 s/op
Iteration  50: 8.293 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.240 ?(99.9%) 0.096 s/op

  Histogram, s/op:
    [7.000, 7.125) = 0 
    [7.125, 7.250) = 0 
    [7.250, 7.375) = 0 
    [7.375, 7.500) = 0 
    [7.500, 7.625) = 2 
    [7.625, 7.750) = 0 
    [7.750, 7.875) = 2 
    [7.875, 8.000) = 1 
    [8.000, 8.125) = 1 
    [8.125, 8.250) = 6 
    [8.250, 8.375) = 36 
    [8.375, 8.500) = 1 
    [8.500, 8.625) = 0 
    [8.625, 8.750) = 1 
    [8.750, 8.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.538 s/op
     p(50.0000) =      8.293 s/op
     p(90.0000) =      8.330 s/op
     p(95.0000) =      8.401 s/op
     p(99.0000) =      8.671 s/op
     p(99.9000) =      8.671 s/op
     p(99.9900) =      8.671 s/op
     p(99.9990) =      8.671 s/op
     p(99.9999) =      8.671 s/op
    p(100.0000) =      8.671 s/op


# Run complete. Total time: 00:06:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  8.240 ? 0.096   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_hotspot_12.0.2_1564654977637.json
{"wallclock_times": [413.075023899], "core_cycle_counts": [[116365289473], [284664630432], [608662074242], [181504948409]], "aperf_counts": [[115177410695], [284558171251], [608610259237], [181452076590]], "mperf_counts": [[129185432410], [323625832788], [687429494190], [202207259026]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 12:29:50: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 12:29:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 12:29:51: INFO] 14 executions left in scheduler queue
[2019-08-01 12:29:51: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 12:29:51: INFO] Estimated completion (next execution): 2019-08-01 12:39:14 (0:09:23 from now)
[2019-08-01 12:29:51: INFO] Reboot in preparation for next execution
[2019-08-01 12:34:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 12:34:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 12:34:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 12:34:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 12:34:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 12:49:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.647 s/op
Iteration   2: 18.188 s/op
Iteration   3: 18.123 s/op
Iteration   4: 17.646 s/op
Iteration   5: 17.872 s/op
Iteration   6: 17.815 s/op
Iteration   7: 18.247 s/op
Iteration   8: 17.727 s/op
Iteration   9: 17.680 s/op
Iteration  10: 17.748 s/op
Iteration  11: 17.737 s/op
Iteration  12: 17.982 s/op
Iteration  13: 17.820 s/op
Iteration  14: 17.751 s/op
Iteration  15: 17.639 s/op
Iteration  16: 17.680 s/op
Iteration  17: 17.733 s/op
Iteration  18: 17.775 s/op
Iteration  19: 17.859 s/op
Iteration  20: 17.749 s/op
Iteration  21: 17.736 s/op
Iteration  22: 17.820 s/op
Iteration  23: 17.715 s/op
Iteration  24: 17.757 s/op
Iteration  25: 17.700 s/op
Iteration  26: 17.755 s/op
Iteration  27: 17.766 s/op
Iteration  28: 17.737 s/op
Iteration  29: 17.665 s/op
Iteration  30: 17.663 s/op
Iteration  31: 17.737 s/op
Iteration  32: 17.724 s/op
Iteration  33: 17.798 s/op
Iteration  34: 17.761 s/op
Iteration  35: 17.736 s/op
Iteration  36: 17.811 s/op
Iteration  37: 17.648 s/op
Iteration  38: 17.728 s/op
Iteration  39: 17.858 s/op
Iteration  40: 17.799 s/op
Iteration  41: 17.790 s/op
Iteration  42: 17.807 s/op
Iteration  43: 17.717 s/op
Iteration  44: 17.860 s/op
Iteration  45: 17.820 s/op
Iteration  46: 17.728 s/op
Iteration  47: 17.741 s/op
Iteration  48: 17.777 s/op
Iteration  49: 17.853 s/op
Iteration  50: 17.743 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     17.783 ?(99.9%) 0.061 s/op

  Histogram, s/op:
    [17.600, 17.650) = 4 
    [17.650, 17.700) = 4 
    [17.700, 17.750) = 17 
    [17.750, 17.800) = 10 
    [17.800, 17.850) = 6 
    [17.850, 17.900) = 5 
    [17.900, 17.950) = 0 
    [17.950, 18.000) = 1 
    [18.000, 18.050) = 0 
    [18.050, 18.100) = 0 
    [18.100, 18.150) = 1 
    [18.150, 18.200) = 1 
    [18.200, 18.250) = 1 

  Percentiles, s/op:
      p(0.0000) =     17.639 s/op
     p(50.0000) =     17.750 s/op
     p(90.0000) =     17.871 s/op
     p(95.0000) =     18.153 s/op
     p(99.0000) =     18.247 s/op
     p(99.9000) =     18.247 s/op
     p(99.9900) =     18.247 s/op
     p(99.9990) =     18.247 s/op
     p(99.9999) =     18.247 s/op
    p(100.0000) =     18.247 s/op


# Run complete. Total time: 00:14:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  17.783 ? 0.061   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_hotspot_12.0.2_1564655660132.json
{"wallclock_times": [890.21314267], "core_cycle_counts": [[377535991333], [329310310912], [1538849678923], [622671134032]], "aperf_counts": [[375054253850], [329147740067], [1538811388046], [622628369111]], "mperf_counts": [[376024433156], [329333483610], [1539888157090], [622817683606]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 12:49:10: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-08-01 12:49:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 12:49:11: INFO] 13 executions left in scheduler queue
[2019-08-01 12:49:11: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-01 12:49:11: INFO] Estimated completion (next execution): 2019-08-01 13:06:31 (0:17:20 from now)
[2019-08-01 12:49:11: INFO] Reboot in preparation for next execution
[2019-08-01 12:54:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.299 s/op
Iteration   2: 0.834 s/op
Iteration   3: 0.832 s/op
Iteration   4: 0.912 s/op
Iteration   5: 0.827 s/op
Iteration   6: 0.827 s/op
Iteration   7: 0.827 s/op
Iteration   8: 0.825 s/op
Iteration   9: 0.827 s/op
Iteration  10: 0.829 s/op
Iteration  11: 0.824 s/op
Iteration  12: 0.826 s/op
Iteration  13: 0.821 s/op
Iteration  14: 0.824 s/op
Iteration  15: 0.822 s/op
Iteration  16: 0.823 s/op
Iteration  17: 0.825 s/op
Iteration  18: 0.825 s/op
Iteration  19: 0.823 s/op
Iteration  20: 0.830 s/op
Iteration  21: 0.821 s/op
Iteration  22: 0.827 s/op
Iteration  23: 0.827 s/op
Iteration  24: 0.821 s/op
Iteration  25: 0.824 s/op
Iteration  26: 0.825 s/op
Iteration  27: 0.821 s/op
Iteration  28: 0.826 s/op
Iteration  29: 0.826 s/op
Iteration  30: 0.823 s/op
Iteration  31: 0.830 s/op
Iteration  32: 0.827 s/op
Iteration  33: 0.823 s/op
Iteration  34: 0.825 s/op
Iteration  35: 0.822 s/op
Iteration  36: 0.822 s/op
Iteration  37: 0.824 s/op
Iteration  38: 0.825 s/op
Iteration  39: 0.826 s/op
Iteration  40: 0.827 s/op
Iteration  41: 0.825 s/op
Iteration  42: 0.827 s/op
Iteration  43: 0.826 s/op
Iteration  44: 0.827 s/op
Iteration  45: 0.825 s/op
Iteration  46: 0.824 s/op
Iteration  47: 0.826 s/op
Iteration  48: 0.826 s/op
Iteration  49: 0.827 s/op
Iteration  50: 0.827 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      0.837 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [0.800, 0.850) = 48 
    [0.850, 0.900) = 0 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.821 s/op
     p(50.0000) =      0.826 s/op
     p(90.0000) =      0.830 s/op
     p(95.0000) =      0.869 s/op
     p(99.0000) =      1.299 s/op
     p(99.9000) =      1.299 s/op
     p(99.9900) =      1.299 s/op
     p(99.9990) =      1.299 s/op
     p(99.9999) =      1.299 s/op
    p(100.0000) =      1.299 s/op


# Run complete. Total time: 00:00:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.837 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_graalvm-ee-19.1.1_1564656805738.json
{"wallclock_times": [42.73159922200003], "core_cycle_counts": [[63207618127], [18799401141], [11777913584], [53706094469]], "aperf_counts": [[63102246021], [18769639250], [11749421514], [53688345158]], "mperf_counts": [[63118615364], [18782314356], [11751536502], [53688636282]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 12:54:08: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-01 12:54:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 12:54:09: INFO] 12 executions left in scheduler queue
[2019-08-01 12:54:09: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-01 12:54:09: INFO] Estimated completion (next execution): 2019-08-01 12:57:22 (0:03:12 from now)
[2019-08-01 12:54:09: INFO] Reboot in preparation for next execution
[2019-08-01 12:59:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.637 s/op
Iteration   2: 1.312 s/op
Iteration   3: 1.368 s/op
Iteration   4: 1.250 s/op
Iteration   5: 1.251 s/op
Iteration   6: 1.252 s/op
Iteration   7: 1.252 s/op
Iteration   8: 1.251 s/op
Iteration   9: 1.250 s/op
Iteration  10: 1.249 s/op
Iteration  11: 1.251 s/op
Iteration  12: 1.250 s/op
Iteration  13: 1.251 s/op
Iteration  14: 1.250 s/op
Iteration  15: 1.249 s/op
Iteration  16: 1.250 s/op
Iteration  17: 1.252 s/op
Iteration  18: 1.251 s/op
Iteration  19: 1.252 s/op
Iteration  20: 1.251 s/op
Iteration  21: 1.252 s/op
Iteration  22: 1.254 s/op
Iteration  23: 1.255 s/op
Iteration  24: 1.254 s/op
Iteration  25: 1.253 s/op
Iteration  26: 1.255 s/op
Iteration  27: 1.254 s/op
Iteration  28: 1.253 s/op
Iteration  29: 1.254 s/op
Iteration  30: 1.252 s/op
Iteration  31: 1.254 s/op
Iteration  32: 1.252 s/op
Iteration  33: 1.255 s/op
Iteration  34: 1.252 s/op
Iteration  35: 1.253 s/op
Iteration  36: 1.252 s/op
Iteration  37: 1.255 s/op
Iteration  38: 1.257 s/op
Iteration  39: 1.253 s/op
Iteration  40: 1.252 s/op
Iteration  41: 1.250 s/op
Iteration  42: 1.252 s/op
Iteration  43: 1.252 s/op
Iteration  44: 1.252 s/op
Iteration  45: 1.252 s/op
Iteration  46: 1.253 s/op
Iteration  47: 1.253 s/op
Iteration  48: 1.252 s/op
Iteration  49: 1.251 s/op
Iteration  50: 1.253 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.263 ?(99.9%) 0.028 s/op

  Histogram, s/op:
    [1.200, 1.250) = 5 
    [1.250, 1.300) = 42 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 1 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.249 s/op
     p(50.0000) =      1.252 s/op
     p(90.0000) =      1.255 s/op
     p(95.0000) =      1.337 s/op
     p(99.0000) =      1.637 s/op
     p(99.9000) =      1.637 s/op
     p(99.9900) =      1.637 s/op
     p(99.9990) =      1.637 s/op
     p(99.9999) =      1.637 s/op
    p(100.0000) =      1.637 s/op


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.263 ? 0.028   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_graalvm-ee-19.1.1_1564657103535.json
{"wallclock_times": [64.01918720600003], "core_cycle_counts": [[79674744840], [40890762073], [53735919291], [36232334032]], "aperf_counts": [[79546177350], [40863427698], [53721810590], [36219367953]], "mperf_counts": [[79567456416], [40869830708], [53724807022], [36221103254]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 12:59:27: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-08-01 12:59:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 12:59:28: INFO] 11 executions left in scheduler queue
[2019-08-01 12:59:28: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-08-01 12:59:28: INFO] Estimated completion (next execution): 2019-08-01 13:03:02 (0:03:34 from now)
[2019-08-01 12:59:28: INFO] Reboot in preparation for next execution
[2019-08-01 13:07:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.409 s/op
Iteration   2: 5.090 s/op
Iteration   3: 4.949 s/op
Iteration   4: 4.947 s/op
Iteration   5: 4.941 s/op
Iteration   6: 4.940 s/op
Iteration   7: 4.945 s/op
Iteration   8: 4.922 s/op
Iteration   9: 4.934 s/op
Iteration  10: 4.946 s/op
Iteration  11: 4.949 s/op
Iteration  12: 4.931 s/op
Iteration  13: 4.941 s/op
Iteration  14: 4.939 s/op
Iteration  15: 4.943 s/op
Iteration  16: 4.919 s/op
Iteration  17: 4.937 s/op
Iteration  18: 4.911 s/op
Iteration  19: 4.950 s/op
Iteration  20: 4.922 s/op
Iteration  21: 4.940 s/op
Iteration  22: 4.941 s/op
Iteration  23: 4.946 s/op
Iteration  24: 4.932 s/op
Iteration  25: 4.946 s/op
Iteration  26: 4.939 s/op
Iteration  27: 4.937 s/op
Iteration  28: 4.932 s/op
Iteration  29: 4.938 s/op
Iteration  30: 4.935 s/op
Iteration  31: 4.942 s/op
Iteration  32: 4.946 s/op
Iteration  33: 4.945 s/op
Iteration  34: 4.932 s/op
Iteration  35: 4.929 s/op
Iteration  36: 4.936 s/op
Iteration  37: 4.944 s/op
Iteration  38: 4.930 s/op
Iteration  39: 4.942 s/op
Iteration  40: 4.938 s/op
Iteration  41: 4.938 s/op
Iteration  42: 4.941 s/op
Iteration  43: 4.944 s/op
Iteration  44: 4.944 s/op
Iteration  45: 4.950 s/op
Iteration  46: 4.930 s/op
Iteration  47: 4.927 s/op
Iteration  48: 4.928 s/op
Iteration  49: 4.953 s/op
Iteration  50: 4.944 s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =      4.951 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [4.900, 4.950) = 46 
    [4.950, 5.000) = 2 
    [5.000, 5.050) = 0 
    [5.050, 5.100) = 1 
    [5.100, 5.150) = 0 
    [5.150, 5.200) = 0 
    [5.200, 5.250) = 0 
    [5.250, 5.300) = 0 
    [5.300, 5.350) = 0 
    [5.350, 5.400) = 0 
    [5.400, 5.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.911 s/op
     p(50.0000) =      4.940 s/op
     p(90.0000) =      4.950 s/op
     p(95.0000) =      5.014 s/op
     p(99.0000) =      5.409 s/op
     p(99.9000) =      5.409 s/op
     p(99.9900) =      5.409 s/op
     p(99.9990) =      5.409 s/op
     p(99.9999) =      5.409 s/op
    p(100.0000) =      5.409 s/op


# Run complete. Total time: 00:04:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  4.951 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_graalvm-ee-19.1.1_1564657423594.json
{"wallclock_times": [248.407584977], "core_cycle_counts": [[246442030440], [196746065903], [167575993504], [192401771556]], "aperf_counts": [[245887047600], [196674668090], [167533751462], [192359288425]], "mperf_counts": [[245916920748], [196675804944], [167545333016], [192367563690]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 13:07:52: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-08-01 13:07:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 13:07:52: INFO] 10 executions left in scheduler queue
[2019-08-01 13:07:52: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-08-01 13:07:52: INFO] Estimated completion (next execution): 2019-08-01 13:14:31 (0:06:38 from now)
[2019-08-01 13:07:52: INFO] Reboot in preparation for next execution
[2019-08-01 13:14:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.803 s/op
Iteration   2: 2.390 s/op
Iteration   3: 2.548 s/op
Iteration   4: 2.490 s/op
Iteration   5: 2.480 s/op
Iteration   6: 2.483 s/op
Iteration   7: 2.484 s/op
Iteration   8: 2.485 s/op
Iteration   9: 2.485 s/op
Iteration  10: 2.485 s/op
Iteration  11: 2.494 s/op
Iteration  12: 2.477 s/op
Iteration  13: 2.484 s/op
Iteration  14: 2.493 s/op
Iteration  15: 2.488 s/op
Iteration  16: 2.497 s/op
Iteration  17: 2.485 s/op
Iteration  18: 2.486 s/op
Iteration  19: 2.487 s/op
Iteration  20: 2.485 s/op
Iteration  21: 2.481 s/op
Iteration  22: 2.485 s/op
Iteration  23: 2.485 s/op
Iteration  24: 2.485 s/op
Iteration  25: 2.486 s/op
Iteration  26: 2.482 s/op
Iteration  27: 2.487 s/op
Iteration  28: 2.488 s/op
Iteration  29: 2.484 s/op
Iteration  30: 2.491 s/op
Iteration  31: 2.484 s/op
Iteration  32: 2.485 s/op
Iteration  33: 2.488 s/op
Iteration  34: 2.494 s/op
Iteration  35: 2.483 s/op
Iteration  36: 2.488 s/op
Iteration  37: 2.486 s/op
Iteration  38: 2.491 s/op
Iteration  39: 2.494 s/op
Iteration  40: 2.483 s/op
Iteration  41: 2.478 s/op
Iteration  42: 2.492 s/op
Iteration  43: 2.491 s/op
Iteration  44: 2.492 s/op
Iteration  45: 2.482 s/op
Iteration  46: 2.486 s/op
Iteration  47: 2.483 s/op
Iteration  48: 2.486 s/op
Iteration  49: 2.485 s/op
Iteration  50: 2.489 s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =      2.492 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 47 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 1 
    [2.850, 2.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.390 s/op
     p(50.0000) =      2.485 s/op
     p(90.0000) =      2.494 s/op
     p(95.0000) =      2.520 s/op
     p(99.0000) =      2.803 s/op
     p(99.9000) =      2.803 s/op
     p(99.9900) =      2.803 s/op
     p(99.9990) =      2.803 s/op
     p(99.9999) =      2.803 s/op
    p(100.0000) =      2.803 s/op


# Run complete. Total time: 00:02:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  2.492 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_graalvm-ee-19.1.1_1564657928562.json
{"wallclock_times": [125.47518119600002], "core_cycle_counts": [[136820625115], [121285171021], [100247375467], [52307203794]], "aperf_counts": [[136541861636], [121242362209], [100216461716], [52280323820]], "mperf_counts": [[136572943474], [121246449802], [100217186482], [52286657844]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 13:14:14: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-08-01 13:14:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 13:14:14: INFO] 9 executions left in scheduler queue
[2019-08-01 13:14:14: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-08-01 13:14:14: INFO] Estimated completion (next execution): 2019-08-01 13:18:50 (0:04:35 from now)
[2019-08-01 13:14:14: INFO] Reboot in preparation for next execution
[2019-08-01 13:18:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 13:18:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 13:18:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 13:18:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 13:18:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 13:29:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.579 s/op
Iteration   2: 13.424 s/op
Iteration   3: 13.286 s/op
Iteration   4: 13.239 s/op
Iteration   5: 13.263 s/op
Iteration   6: 13.360 s/op
Iteration   7: 13.208 s/op
Iteration   8: 13.160 s/op
Iteration   9: 13.136 s/op
Iteration  10: 13.174 s/op
Iteration  11: 13.167 s/op
Iteration  12: 13.279 s/op
Iteration  13: 13.247 s/op
Iteration  14: 13.191 s/op
Iteration  15: 13.175 s/op
Iteration  16: 13.164 s/op
Iteration  17: 13.171 s/op
Iteration  18: 13.237 s/op
Iteration  19: 13.203 s/op
Iteration  20: 13.211 s/op
Iteration  21: 13.265 s/op
Iteration  22: 13.183 s/op
Iteration  23: 13.155 s/op
Iteration  24: 13.127 s/op
Iteration  25: 13.189 s/op
Iteration  26: 13.186 s/op
Iteration  27: 13.216 s/op
Iteration  28: 13.201 s/op
Iteration  29: 13.166 s/op
Iteration  30: 13.233 s/op
Iteration  31: 13.163 s/op
Iteration  32: 13.311 s/op
Iteration  33: 13.159 s/op
Iteration  34: 13.147 s/op
Iteration  35: 13.149 s/op
Iteration  36: 13.256 s/op
Iteration  37: 13.174 s/op
Iteration  38: 13.180 s/op
Iteration  39: 13.179 s/op
Iteration  40: 13.152 s/op
Iteration  41: 13.191 s/op
Iteration  42: 13.164 s/op
Iteration  43: 13.282 s/op
Iteration  44: 13.173 s/op
Iteration  45: 13.228 s/op
Iteration  46: 13.136 s/op
Iteration  47: 13.168 s/op
Iteration  48: 13.220 s/op
Iteration  49: 13.153 s/op
Iteration  50: 13.152 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.211 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [13.100, 13.150) = 5 
    [13.150, 13.200) = 24 
    [13.200, 13.250) = 11 
    [13.250, 13.300) = 6 
    [13.300, 13.350) = 1 
    [13.350, 13.400) = 1 
    [13.400, 13.450) = 1 
    [13.450, 13.500) = 0 
    [13.500, 13.550) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.127 s/op
     p(50.0000) =     13.185 s/op
     p(90.0000) =     13.286 s/op
     p(95.0000) =     13.389 s/op
     p(99.0000) =     13.579 s/op
     p(99.9000) =     13.579 s/op
     p(99.9900) =     13.579 s/op
     p(99.9990) =     13.579 s/op
     p(99.9999) =     13.579 s/op
    p(100.0000) =     13.579 s/op


# Run complete. Total time: 00:11:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.211 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_hotspot_12.0.2_1564658309496.json
{"wallclock_times": [661.598382765], "core_cycle_counts": [[520742055591], [503785531636], [650472961267], [700115839798]], "aperf_counts": [[518857664836], [503582430582], [650325907841], [699958570368]], "mperf_counts": [[523198578938], [507124940372], [655092150612], [705514670204]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-08-01 13:29:31: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-08-01 13:29:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 13:29:32: INFO] 8 executions left in scheduler queue
[2019-08-01 13:29:32: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 13:29:32: INFO] Estimated completion (next execution): 2019-08-01 13:43:03 (0:13:31 from now)
[2019-08-01 13:29:32: INFO] Reboot in preparation for next execution
[2019-08-01 13:33:45: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 13:33:45: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 13:33:45: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 13:33:45: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 13:33:45: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 13:33:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 13:40:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.648 s/op
Iteration   2: 8.449 s/op
Iteration   3: 8.275 s/op
Iteration   4: 8.211 s/op
Iteration   5: 8.226 s/op
Iteration   6: 8.217 s/op
Iteration   7: 8.204 s/op
Iteration   8: 8.204 s/op
Iteration   9: 8.208 s/op
Iteration  10: 8.127 s/op
Iteration  11: 8.217 s/op
Iteration  12: 8.136 s/op
Iteration  13: 8.213 s/op
Iteration  14: 8.132 s/op
Iteration  15: 8.172 s/op
Iteration  16: 8.225 s/op
Iteration  17: 8.087 s/op
Iteration  18: 8.251 s/op
Iteration  19: 8.210 s/op
Iteration  20: 8.199 s/op
Iteration  21: 8.223 s/op
Iteration  22: 8.206 s/op
Iteration  23: 8.219 s/op
Iteration  24: 8.176 s/op
Iteration  25: 8.261 s/op
Iteration  26: 8.163 s/op
Iteration  27: 8.270 s/op
Iteration  28: 8.212 s/op
Iteration  29: 8.309 s/op
Iteration  30: 8.202 s/op
Iteration  31: 8.177 s/op
Iteration  32: 8.226 s/op
Iteration  33: 8.180 s/op
Iteration  34: 8.246 s/op
Iteration  35: 8.178 s/op
Iteration  36: 8.254 s/op
Iteration  37: 8.199 s/op
Iteration  38: 8.250 s/op
Iteration  39: 8.202 s/op
Iteration  40: 8.166 s/op
Iteration  41: 8.122 s/op
Iteration  42: 8.162 s/op
Iteration  43: 8.225 s/op
Iteration  44: 8.185 s/op
Iteration  45: 8.268 s/op
Iteration  46: 8.148 s/op
Iteration  47: 8.138 s/op
Iteration  48: 8.161 s/op
Iteration  49: 8.207 s/op
Iteration  50: 8.248 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      8.236 ?(99.9%) 0.105 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 2 
    [ 8.125,  8.250) = 38 
    [ 8.250,  8.375) = 8 
    [ 8.375,  8.500) = 1 
    [ 8.500,  8.625) = 0 
    [ 8.625,  8.750) = 0 
    [ 8.750,  8.875) = 0 
    [ 8.875,  9.000) = 0 
    [ 9.000,  9.125) = 0 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 0 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 1 
    [ 9.750,  9.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.087 s/op
     p(50.0000) =      8.208 s/op
     p(90.0000) =      8.270 s/op
     p(95.0000) =      8.372 s/op
     p(99.0000) =      9.648 s/op
     p(99.9000) =      9.648 s/op
     p(99.9900) =      9.648 s/op
     p(99.9990) =      9.648 s/op
     p(99.9999) =      9.648 s/op
    p(100.0000) =      9.648 s/op


# Run complete. Total time: 00:06:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  8.236 ? 0.105   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_openj9_12.0.1_1564659225648.json
{"wallclock_times": [413.412626831], "core_cycle_counts": [[462373989897], [319602731798], [271136306098], [362462088692]], "aperf_counts": [[461404600067], [319427044856], [271026442395], [362389871792]], "mperf_counts": [[461405183596], [319429390400], [271026410136], [362389868468]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 13:40:39: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 13:40:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 13:40:40: INFO] 7 executions left in scheduler queue
[2019-08-01 13:40:40: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 13:40:40: INFO] Estimated completion (next execution): 2019-08-01 13:50:03 (0:09:23 from now)
[2019-08-01 13:40:40: INFO] Reboot in preparation for next execution
[2019-08-01 13:44:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 13:44:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 13:44:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 13:44:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 13:44:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 13:44:54: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 13:56:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.891 s/op
Iteration   2: 13.765 s/op
Iteration   3: 13.796 s/op
Iteration   4: 13.943 s/op
Iteration   5: 13.817 s/op
Iteration   6: 13.915 s/op
Iteration   7: 13.790 s/op
Iteration   8: 13.813 s/op
Iteration   9: 13.426 s/op
Iteration  10: 13.503 s/op
Iteration  11: 13.623 s/op
Iteration  12: 13.515 s/op
Iteration  13: 13.525 s/op
Iteration  14: 13.613 s/op
Iteration  15: 13.504 s/op
Iteration  16: 13.547 s/op
Iteration  17: 13.486 s/op
Iteration  18: 13.535 s/op
Iteration  19: 13.623 s/op
Iteration  20: 13.482 s/op
Iteration  21: 13.588 s/op
Iteration  22: 13.515 s/op
Iteration  23: 13.548 s/op
Iteration  24: 13.621 s/op
Iteration  25: 13.502 s/op
Iteration  26: 13.548 s/op
Iteration  27: 13.493 s/op
Iteration  28: 13.532 s/op
Iteration  29: 13.453 s/op
Iteration  30: 13.513 s/op
Iteration  31: 13.588 s/op
Iteration  32: 13.487 s/op
Iteration  33: 13.544 s/op
Iteration  34: 13.485 s/op
Iteration  35: 13.475 s/op
Iteration  36: 13.569 s/op
Iteration  37: 13.431 s/op
Iteration  38: 13.515 s/op
Iteration  39: 13.406 s/op
Iteration  40: 13.480 s/op
Iteration  41: 13.535 s/op
Iteration  42: 13.442 s/op
Iteration  43: 13.483 s/op
Iteration  44: 13.551 s/op
Iteration  45: 13.419 s/op
Iteration  46: 13.507 s/op
Iteration  47: 13.547 s/op
Iteration  48: 13.459 s/op
Iteration  49: 13.535 s/op
Iteration  50: 13.435 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =     13.586 ?(99.9%) 0.112 s/op

  Histogram, s/op:
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 0 
    [13.375, 13.500) = 16 
    [13.500, 13.625) = 26 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 5 
    [13.875, 14.000) = 2 
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 0 
    [14.375, 14.500) = 0 
    [14.500, 14.625) = 0 
    [14.625, 14.750) = 0 
    [14.750, 14.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.406 s/op
     p(50.0000) =     13.529 s/op
     p(90.0000) =     13.812 s/op
     p(95.0000) =     13.928 s/op
     p(99.0000) =     14.891 s/op
     p(99.9000) =     14.891 s/op
     p(99.9900) =     14.891 s/op
     p(99.9990) =     14.891 s/op
     p(99.9999) =     14.891 s/op
    p(100.0000) =     14.891 s/op


# Run complete. Total time: 00:11:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  13.586 ? 0.112   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_openj9_12.0.1_1564659894764.json
{"wallclock_times": [680.948552374], "core_cycle_counts": [[884318531185], [445188291406], [470300799161], [435612969091]], "aperf_counts": [[882911106628], [444957235236], [470120174540], [435414355280]], "mperf_counts": [[882915793898], [444957815426], [470120132082], [435414283172]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 13:56:15: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 13:56:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 13:56:16: INFO] 6 executions left in scheduler queue
[2019-08-01 13:56:16: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 13:56:16: INFO] Estimated completion (next execution): 2019-08-01 14:10:08 (0:13:51 from now)
[2019-08-01 13:56:16: INFO] Reboot in preparation for next execution
[2019-08-01 14:00:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 14:00:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 14:00:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 14:00:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 14:00:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 14:00:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 14:04:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.092 s/op
Iteration   2: 5.373 s/op
Iteration   3: 4.789 s/op
Iteration   4: 4.744 s/op
Iteration   5: 4.738 s/op
Iteration   6: 4.731 s/op
Iteration   7: 4.619 s/op
Iteration   8: 4.397 s/op
Iteration   9: 4.420 s/op
Iteration  10: 4.427 s/op
Iteration  11: 4.415 s/op
Iteration  12: 4.445 s/op
Iteration  13: 4.452 s/op
Iteration  14: 4.463 s/op
Iteration  15: 4.399 s/op
Iteration  16: 4.396 s/op
Iteration  17: 4.428 s/op
Iteration  18: 4.405 s/op
Iteration  19: 4.426 s/op
Iteration  20: 4.479 s/op
Iteration  21: 4.443 s/op
Iteration  22: 4.455 s/op
Iteration  23: 4.434 s/op
Iteration  24: 4.417 s/op
Iteration  25: 4.393 s/op
Iteration  26: 4.410 s/op
Iteration  27: 4.439 s/op
Iteration  28: 4.432 s/op
Iteration  29: 4.425 s/op
Iteration  30: 4.436 s/op
Iteration  31: 4.459 s/op
Iteration  32: 4.434 s/op
Iteration  33: 4.372 s/op
Iteration  34: 4.392 s/op
Iteration  35: 4.421 s/op
Iteration  36: 4.449 s/op
Iteration  37: 4.430 s/op
Iteration  38: 4.427 s/op
Iteration  39: 4.437 s/op
Iteration  40: 4.399 s/op
Iteration  41: 4.396 s/op
Iteration  42: 4.432 s/op
Iteration  43: 4.416 s/op
Iteration  44: 4.426 s/op
Iteration  45: 4.471 s/op
Iteration  46: 4.444 s/op
Iteration  47: 4.443 s/op
Iteration  48: 4.458 s/op
Iteration  49: 4.388 s/op
Iteration  50: 4.388 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.508 ?(99.9%) 0.138 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 43 
    [4.500, 4.750) = 4 
    [4.750, 5.000) = 1 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 1 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.372 s/op
     p(50.0000) =      4.432 s/op
     p(90.0000) =      4.737 s/op
     p(95.0000) =      5.052 s/op
     p(99.0000) =      6.092 s/op
     p(99.9000) =      6.092 s/op
     p(99.9900) =      6.092 s/op
     p(99.9990) =      6.092 s/op
     p(99.9999) =      6.092 s/op
    p(100.0000) =      6.092 s/op


# Run complete. Total time: 00:03:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.508 ? 0.138   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_openj9_12.0.1_1564660831313.json
{"wallclock_times": [227.28858966700002], "core_cycle_counts": [[211150030285], [258335192020], [224752312840], [181978376420]], "aperf_counts": [[210502577465], [258201872257], [224672915862], [181854396348]], "mperf_counts": [[210504695194], [258207125458], [224672994694], [181854381840]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 14:04:18: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 14:04:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 14:04:19: INFO] 5 executions left in scheduler queue
[2019-08-01 14:04:19: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 14:04:19: INFO] Estimated completion (next execution): 2019-08-01 14:10:37 (0:06:17 from now)
[2019-08-01 14:04:19: INFO] Reboot in preparation for next execution
[2019-08-01 14:07:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-08-01 14:07:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-08-01 14:07:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-08-01 14:07:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-08-01 14:07:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-08-01 14:07:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-08-01 14:12:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.756 s/op
Iteration   2: 5.959 s/op
Iteration   3: 5.605 s/op
Iteration   4: 5.440 s/op
Iteration   5: 5.107 s/op
Iteration   6: 5.065 s/op
Iteration   7: 5.040 s/op
Iteration   8: 4.938 s/op
Iteration   9: 5.004 s/op
Iteration  10: 4.985 s/op
Iteration  11: 4.946 s/op
Iteration  12: 5.016 s/op
Iteration  13: 4.898 s/op
Iteration  14: 5.028 s/op
Iteration  15: 4.942 s/op
Iteration  16: 4.872 s/op
Iteration  17: 4.996 s/op
Iteration  18: 4.999 s/op
Iteration  19: 4.902 s/op
Iteration  20: 4.995 s/op
Iteration  21: 4.909 s/op
Iteration  22: 4.864 s/op
Iteration  23: 4.985 s/op
Iteration  24: 4.950 s/op
Iteration  25: 4.872 s/op
Iteration  26: 4.953 s/op
Iteration  27: 4.931 s/op
Iteration  28: 4.833 s/op
Iteration  29: 4.978 s/op
Iteration  30: 4.907 s/op
Iteration  31: 5.001 s/op
Iteration  32: 4.953 s/op
Iteration  33: 4.861 s/op
Iteration  34: 5.010 s/op
Iteration  35: 4.956 s/op
Iteration  36: 4.828 s/op
Iteration  37: 5.008 s/op
Iteration  38: 4.905 s/op
Iteration  39: 4.853 s/op
Iteration  40: 4.975 s/op
Iteration  41: 4.911 s/op
Iteration  42: 5.029 s/op
Iteration  43: 4.921 s/op
Iteration  44: 4.874 s/op
Iteration  45: 5.030 s/op
Iteration  46: 4.995 s/op
Iteration  47: 4.866 s/op
Iteration  48: 5.016 s/op
Iteration  49: 4.973 s/op
Iteration  50: 4.867 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.minijavaInterpreter":
  N = 50
  mean =      5.030 ?(99.9%) 0.155 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 0 
    [4.750, 5.000) = 34 
    [5.000, 5.250) = 12 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 1 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.828 s/op
     p(50.0000) =      4.964 s/op
     p(90.0000) =      5.103 s/op
     p(95.0000) =      5.765 s/op
     p(99.0000) =      6.756 s/op
     p(99.9000) =      6.756 s/op
     p(99.9900) =      6.756 s/op
     p(99.9990) =      6.756 s/op
     p(99.9999) =      6.756 s/op
    p(100.0000) =      6.756 s/op


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.030 ? 0.155   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_openj9_12.0.1_1564661269797.json
{"wallclock_times": [253.422335262], "core_cycle_counts": [[234185646443], [220669626927], [223734570279], [256170015492]], "aperf_counts": [[233516756612], [220572923889], [223638274175], [256081120028]], "mperf_counts": [[233525059512], [220572906592], [223638261780], [256081289544]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-08-01 14:12:03: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-08-01 14:12:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 14:12:04: INFO] 4 executions left in scheduler queue
[2019-08-01 14:12:04: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:12:04: INFO] Estimated completion (next execution): 2019-08-01 14:18:48 (0:06:43 from now)
[2019-08-01 14:12:04: INFO] Reboot in preparation for next execution
[2019-08-01 14:20:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.220 s/op
Iteration   2: 4.722 s/op
Iteration   3: 4.655 s/op
Iteration   4: 4.698 s/op
Iteration   5: 4.676 s/op
Iteration   6: 4.696 s/op
Iteration   7: 4.668 s/op
Iteration   8: 4.671 s/op
Iteration   9: 4.664 s/op
Iteration  10: 4.667 s/op
Iteration  11: 4.677 s/op
Iteration  12: 4.668 s/op
Iteration  13: 4.660 s/op
Iteration  14: 4.613 s/op
Iteration  15: 4.658 s/op
Iteration  16: 4.675 s/op
Iteration  17: 4.667 s/op
Iteration  18: 4.661 s/op
Iteration  19: 4.675 s/op
Iteration  20: 4.669 s/op
Iteration  21: 4.664 s/op
Iteration  22: 4.612 s/op
Iteration  23: 4.658 s/op
Iteration  24: 4.682 s/op
Iteration  25: 4.680 s/op
Iteration  26: 4.688 s/op
Iteration  27: 4.681 s/op
Iteration  28: 4.673 s/op
Iteration  29: 4.683 s/op
Iteration  30: 4.636 s/op
Iteration  31: 4.658 s/op
Iteration  32: 4.673 s/op
Iteration  33: 4.669 s/op
Iteration  34: 4.678 s/op
Iteration  35: 4.676 s/op
Iteration  36: 4.662 s/op
Iteration  37: 4.671 s/op
Iteration  38: 4.627 s/op
Iteration  39: 4.671 s/op
Iteration  40: 4.668 s/op
Iteration  41: 4.688 s/op
Iteration  42: 4.673 s/op
Iteration  43: 4.687 s/op
Iteration  44: 4.673 s/op
Iteration  45: 4.626 s/op
Iteration  46: 4.677 s/op
Iteration  47: 4.686 s/op
Iteration  48: 4.670 s/op
Iteration  49: 4.741 s/op
Iteration  50: 4.668 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.681 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [4.600, 4.650) = 5 
    [4.650, 4.700) = 42 
    [4.700, 4.750) = 2 
    [4.750, 4.800) = 0 
    [4.800, 4.850) = 0 
    [4.850, 4.900) = 0 
    [4.900, 4.950) = 0 
    [4.950, 5.000) = 0 
    [5.000, 5.050) = 0 
    [5.050, 5.100) = 0 
    [5.100, 5.150) = 0 
    [5.150, 5.200) = 0 
    [5.200, 5.250) = 1 
    [5.250, 5.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.612 s/op
     p(50.0000) =      4.671 s/op
     p(90.0000) =      4.695 s/op
     p(95.0000) =      4.731 s/op
     p(99.0000) =      5.220 s/op
     p(99.9000) =      5.220 s/op
     p(99.9900) =      5.220 s/op
     p(99.9990) =      5.220 s/op
     p(99.9999) =      5.220 s/op
    p(100.0000) =      5.220 s/op


# Run complete. Total time: 00:03:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.681 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_binarytree_graalvm-ce-19.1.1_1564661778552.json
{"wallclock_times": [235.10311802299998], "core_cycle_counts": [[244993274365], [235474438656], [196429720211], [157518070835]], "aperf_counts": [[244413736709], [235404244590], [196368150671], [157473375827]], "mperf_counts": [[244425390332], [235417553484], [196369259774], [157475435318]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 14:20:13: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:20:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 14:20:14: INFO] 3 executions left in scheduler queue
[2019-08-01 14:20:14: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:20:14: INFO] Estimated completion (next execution): 2019-08-01 14:26:39 (0:06:25 from now)
[2019-08-01 14:20:14: INFO] Reboot in preparation for next execution
[2019-08-01 14:31:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.704 s/op
Iteration   2: 8.064 s/op
Iteration   3: 7.887 s/op
Iteration   4: 7.874 s/op
Iteration   5: 7.884 s/op
Iteration   6: 7.857 s/op
Iteration   7: 7.861 s/op
Iteration   8: 7.864 s/op
Iteration   9: 7.869 s/op
Iteration  10: 7.864 s/op
Iteration  11: 7.858 s/op
Iteration  12: 7.857 s/op
Iteration  13: 7.877 s/op
Iteration  14: 7.891 s/op
Iteration  15: 7.878 s/op
Iteration  16: 7.868 s/op
Iteration  17: 7.854 s/op
Iteration  18: 7.841 s/op
Iteration  19: 7.844 s/op
Iteration  20: 7.865 s/op
Iteration  21: 7.861 s/op
Iteration  22: 7.834 s/op
Iteration  23: 7.821 s/op
Iteration  24: 7.847 s/op
Iteration  25: 7.846 s/op
Iteration  26: 7.844 s/op
Iteration  27: 7.852 s/op
Iteration  28: 7.845 s/op
Iteration  29: 7.858 s/op
Iteration  30: 7.842 s/op
Iteration  31: 7.851 s/op
Iteration  32: 7.860 s/op
Iteration  33: 7.846 s/op
Iteration  34: 7.829 s/op
Iteration  35: 7.843 s/op
Iteration  36: 7.843 s/op
Iteration  37: 7.844 s/op
Iteration  38: 7.865 s/op
Iteration  39: 7.860 s/op
Iteration  40: 7.868 s/op
Iteration  41: 7.830 s/op
Iteration  42: 7.861 s/op
Iteration  43: 7.845 s/op
Iteration  44: 7.868 s/op
Iteration  45: 7.856 s/op
Iteration  46: 7.860 s/op
Iteration  47: 7.851 s/op
Iteration  48: 7.836 s/op
Iteration  49: 7.850 s/op
Iteration  50: 7.877 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      7.857 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [7.700, 7.725) = 1 
    [7.725, 7.750) = 0 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 0 
    [7.800, 7.825) = 1 
    [7.825, 7.850) = 16 
    [7.850, 7.875) = 25 
    [7.875, 7.900) = 6 
    [7.900, 7.925) = 0 
    [7.925, 7.950) = 0 
    [7.950, 7.975) = 0 
    [7.975, 8.000) = 0 
    [8.000, 8.025) = 0 
    [8.025, 8.050) = 0 
    [8.050, 8.075) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.704 s/op
     p(50.0000) =      7.857 s/op
     p(90.0000) =      7.878 s/op
     p(95.0000) =      7.889 s/op
     p(99.0000) =      8.064 s/op
     p(99.9000) =      8.064 s/op
     p(99.9900) =      8.064 s/op
     p(99.9990) =      8.064 s/op
     p(99.9999) =      8.064 s/op
    p(100.0000) =      8.064 s/op


# Run complete. Total time: 00:06:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.857 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fibonacci_graalvm-ce-19.1.1_1564662282979.json
{"wallclock_times": [393.73002675000004], "core_cycle_counts": [[261321529025], [373364550150], [343655079026], [292003560767]], "aperf_counts": [[260368575463], [373297775284], [343628827053], [291974385381]], "mperf_counts": [[260379211182], [373311003144], [343635149708], [291976704316]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 14:31:16: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:31:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 14:31:17: INFO] 2 executions left in scheduler queue
[2019-08-01 14:31:17: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:31:17: INFO] Estimated completion (next execution): 2019-08-01 14:40:21 (0:09:03 from now)
[2019-08-01 14:31:17: INFO] Reboot in preparation for next execution
[2019-08-01 14:39:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.841 s/op
Iteration   2: 4.484 s/op
Iteration   3: 4.349 s/op
Iteration   4: 4.360 s/op
Iteration   5: 4.345 s/op
Iteration   6: 4.343 s/op
Iteration   7: 4.330 s/op
Iteration   8: 4.343 s/op
Iteration   9: 4.349 s/op
Iteration  10: 4.380 s/op
Iteration  11: 4.354 s/op
Iteration  12: 4.346 s/op
Iteration  13: 4.359 s/op
Iteration  14: 4.341 s/op
Iteration  15: 4.367 s/op
Iteration  16: 4.352 s/op
Iteration  17: 4.316 s/op
Iteration  18: 4.370 s/op
Iteration  19: 4.367 s/op
Iteration  20: 4.291 s/op
Iteration  21: 4.333 s/op
Iteration  22: 4.348 s/op
Iteration  23: 4.309 s/op
Iteration  24: 4.327 s/op
Iteration  25: 4.331 s/op
Iteration  26: 4.324 s/op
Iteration  27: 4.332 s/op
Iteration  28: 4.325 s/op
Iteration  29: 4.331 s/op
Iteration  30: 4.357 s/op
Iteration  31: 4.315 s/op
Iteration  32: 4.333 s/op
Iteration  33: 4.322 s/op
Iteration  34: 4.345 s/op
Iteration  35: 4.323 s/op
Iteration  36: 4.335 s/op
Iteration  37: 4.372 s/op
Iteration  38: 4.346 s/op
Iteration  39: 4.316 s/op
Iteration  40: 4.325 s/op
Iteration  41: 4.329 s/op
Iteration  42: 4.331 s/op
Iteration  43: 4.303 s/op
Iteration  44: 4.353 s/op
Iteration  45: 4.323 s/op
Iteration  46: 4.301 s/op
Iteration  47: 4.330 s/op
Iteration  48: 4.307 s/op
Iteration  49: 4.342 s/op
Iteration  50: 4.318 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =      4.349 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [4.200, 4.250) = 0 
    [4.250, 4.300) = 1 
    [4.300, 4.350) = 36 
    [4.350, 4.400) = 11 
    [4.400, 4.450) = 0 
    [4.450, 4.500) = 1 
    [4.500, 4.550) = 0 
    [4.550, 4.600) = 0 
    [4.600, 4.650) = 0 
    [4.650, 4.700) = 0 
    [4.700, 4.750) = 0 
    [4.750, 4.800) = 0 
    [4.800, 4.850) = 1 
    [4.850, 4.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.291 s/op
     p(50.0000) =      4.334 s/op
     p(90.0000) =      4.370 s/op
     p(95.0000) =      4.427 s/op
     p(99.0000) =      4.841 s/op
     p(99.9000) =      4.841 s/op
     p(99.9900) =      4.841 s/op
     p(99.9990) =      4.841 s/op
     p(99.9999) =      4.841 s/op
    p(100.0000) =      4.841 s/op


# Run complete. Total time: 00:03:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               (program)  Mode  Cnt  Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.349 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_fannkuchredux_graalvm-ce-19.1.1_1564662931615.json
{"wallclock_times": [218.42593280500003], "core_cycle_counts": [[150343765941], [165287220331], [220444585445], [177884651635]], "aperf_counts": [[149809450186], [165241589263], [220417137395], [177861895822]], "mperf_counts": [[149823418324], [165252937354], [220420395124], [177862066670]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 14:39:10: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:39:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-08-01 14:39:10: INFO] 1 executions left in scheduler queue
[2019-08-01 14:39:10: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:39:10: INFO] Estimated completion (next execution): 2019-08-01 14:45:19 (0:06:08 from now)
[2019-08-01 14:39:10: INFO] Reboot in preparation for next execution
[2019-08-01 14:52:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.237 s/op
Iteration   2: 11.104 s/op
Iteration   3: 10.976 s/op
Iteration   4: 10.940 s/op
Iteration   5: 10.923 s/op
Iteration   6: 10.940 s/op
Iteration   7: 10.973 s/op
Iteration   8: 10.943 s/op
Iteration   9: 10.936 s/op
Iteration  10: 10.975 s/op
Iteration  11: 10.969 s/op
Iteration  12: 10.945 s/op
Iteration  13: 10.974 s/op
Iteration  14: 10.975 s/op
Iteration  15: 10.929 s/op
Iteration  16: 10.933 s/op
Iteration  17: 10.925 s/op
Iteration  18: 10.951 s/op
Iteration  19: 10.996 s/op
Iteration  20: 10.932 s/op
Iteration  21: 10.948 s/op
Iteration  22: 10.993 s/op
Iteration  23: 10.960 s/op
Iteration  24: 10.943 s/op
Iteration  25: 10.957 s/op
Iteration  26: 10.952 s/op
Iteration  27: 10.941 s/op
Iteration  28: 10.958 s/op
Iteration  29: 10.965 s/op
Iteration  30: 10.933 s/op
Iteration  31: 11.022 s/op
Iteration  32: 10.955 s/op
Iteration  33: 10.919 s/op
Iteration  34: 10.928 s/op
Iteration  35: 11.014 s/op
Iteration  36: 10.970 s/op
Iteration  37: 10.946 s/op
Iteration  38: 10.916 s/op
Iteration  39: 10.920 s/op
Iteration  40: 10.967 s/op
Iteration  41: 10.934 s/op
Iteration  42: 10.954 s/op
Iteration  43: 10.955 s/op
Iteration  44: 10.919 s/op
Iteration  45: 10.967 s/op
Iteration  46: 10.980 s/op
Iteration  47: 10.945 s/op
Iteration  48: 10.927 s/op
Iteration  49: 10.984 s/op
Iteration  50: 11.002 s/op


Result "fr.mleduc.minijava.MinijavaSwitchBenchmark.minijavaInterpreter":
  N = 50
  mean =     10.963 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [10.900, 10.925) = 5 
    [10.925, 10.950) = 18 
    [10.950, 10.975) = 17 
    [10.975, 11.000) = 5 
    [11.000, 11.025) = 3 
    [11.025, 11.050) = 0 
    [11.050, 11.075) = 0 
    [11.075, 11.100) = 0 
    [11.100, 11.125) = 1 
    [11.125, 11.150) = 0 
    [11.150, 11.175) = 0 
    [11.175, 11.200) = 0 
    [11.200, 11.225) = 0 
    [11.225, 11.250) = 1 
    [11.250, 11.275) = 0 
    [11.275, 11.300) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.916 s/op
     p(50.0000) =     10.953 s/op
     p(90.0000) =     11.001 s/op
     p(95.0000) =     11.059 s/op
     p(99.0000) =     11.237 s/op
     p(99.9000) =     11.237 s/op
     p(99.9900) =     11.237 s/op
     p(99.9990) =     11.237 s/op
     p(99.9999) =     11.237 s/op
    p(100.0000) =     11.237 s/op


# Run complete. Total time: 00:09:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (program)  Mode  Cnt   Score   Error  Units
MinijavaSwitchBenchmark.minijavaInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.963 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_switch_sort_graalvm-ce-19.1.1_1564663405545.json
{"wallclock_times": [549.0577416900001], "core_cycle_counts": [[364709506843], [422606763174], [507957527966], [492574115587]], "aperf_counts": [[363363042249], [422527203773], [507927201463], [492539743408]], "mperf_counts": [[363377351560], [422531011602], [507928939210], [492540446946]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-08-01 14:52:34: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-08-01 14:52:35: INFO] Estimated completion (whole session): 2019-08-01 14:52:35 (0:00:00 from now)
[2019-08-01 14:52:35: INFO] 0 executions left in scheduler queue
[2019-08-01 14:52:35: INFO] Done: Results dumped to /home/benchmarks/krun/examples/benchmarks_results.json.bz2
[2019-08-01 14:52:35: WARNING] Errors/warnings occurred -- read the log!
[2019-08-01 14:52:35: INFO] Session completed. Log file at: '/home/benchmarks/krun/examples/benchmarks.log'

Errors/warnings occurred -- read the log!

Don't forget to disable Krun at boot.
