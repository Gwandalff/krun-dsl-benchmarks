[2019-07-26 09:51:18: INFO] Wait 1 secs to allow system to cool prior to collecting initial temperature readings
[2019-07-26 09:55:51: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 09:55:51: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 09:55:51: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 09:55:51: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 09:55:51: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 10:06:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.597 s/op
Iteration   2: 12.178 s/op
Iteration   3: 12.416 s/op
Iteration   4: 12.294 s/op
Iteration   5: 12.171 s/op
Iteration   6: 12.288 s/op
Iteration   7: 12.186 s/op
Iteration   8: 12.204 s/op
Iteration   9: 11.983 s/op
Iteration  10: 12.265 s/op
Iteration  11: 12.106 s/op
Iteration  12: 12.093 s/op
Iteration  13: 12.226 s/op
Iteration  14: 12.165 s/op
Iteration  15: 12.241 s/op
Iteration  16: 12.017 s/op
Iteration  17: 12.234 s/op
Iteration  18: 12.101 s/op
Iteration  19: 12.087 s/op
Iteration  20: 12.208 s/op
Iteration  21: 12.146 s/op
Iteration  22: 12.261 s/op
Iteration  23: 12.055 s/op
Iteration  24: 12.243 s/op
Iteration  25: 12.084 s/op
Iteration  26: 12.093 s/op
Iteration  27: 12.189 s/op
Iteration  28: 12.248 s/op
Iteration  29: 12.036 s/op
Iteration  30: 12.183 s/op
Iteration  31: 12.109 s/op
Iteration  32: 12.223 s/op
Iteration  33: 12.213 s/op
Iteration  34: 12.131 s/op
Iteration  35: 12.138 s/op
Iteration  36: 12.191 s/op
Iteration  37: 12.124 s/op
Iteration  38: 12.077 s/op
Iteration  39: 12.201 s/op
Iteration  40: 12.136 s/op
Iteration  41: 12.256 s/op
Iteration  42: 12.084 s/op
Iteration  43: 12.085 s/op
Iteration  44: 12.249 s/op
Iteration  45: 12.087 s/op
Iteration  46: 12.215 s/op
Iteration  47: 12.121 s/op
Iteration  48: 12.255 s/op
Iteration  49: 11.996 s/op
Iteration  50: 12.195 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.174 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [11.900, 11.950) = 0 
    [11.950, 12.000) = 2 
    [12.000, 12.050) = 2 
    [12.050, 12.100) = 9 
    [12.100, 12.150) = 9 
    [12.150, 12.200) = 8 
    [12.200, 12.250) = 12 
    [12.250, 12.300) = 6 
    [12.300, 12.350) = 0 
    [12.350, 12.400) = 0 
    [12.400, 12.450) = 1 
    [12.450, 12.500) = 0 
    [12.500, 12.550) = 0 
    [12.550, 12.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     11.983 s/op
     p(50.0000) =     12.180 s/op
     p(90.0000) =     12.264 s/op
     p(95.0000) =     12.349 s/op
     p(99.0000) =     12.597 s/op
     p(99.9000) =     12.597 s/op
     p(99.9900) =     12.597 s/op
     p(99.9990) =     12.597 s/op
     p(99.9999) =     12.597 s/op
    p(100.0000) =     12.597 s/op


# Run complete. Total time: 00:10:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.174 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564127751474.json
{"wallclock_times": [609.780767214], "core_cycle_counts": [[728854143308], [560695512661], [516299552968], [401362803793]], "aperf_counts": [[727380171024], [560414549241], [516137323762], [401226504336]], "mperf_counts": [[734676639712], [565627164404], [520729765572], [404847029938]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 10:06:01: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_11.0.4'
[2019-07-26 10:06:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 10:06:02: INFO] 255 executions left in scheduler queue
[2019-07-26 10:06:02: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-07-26 10:06:02: INFO] Estimated completion (next execution): 2019-07-26 10:18:42 (0:12:40 from now)
[2019-07-26 10:06:02: INFO] Reboot in preparation for next execution
[2019-07-26 10:14:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.549 s/op
Iteration   2: 5.417 s/op
Iteration   3: 5.292 s/op
Iteration   4: 5.425 s/op
Iteration   5: 5.201 s/op
Iteration   6: 5.217 s/op
Iteration   7: 5.158 s/op
Iteration   8: 5.180 s/op
Iteration   9: 5.224 s/op
Iteration  10: 5.288 s/op
Iteration  11: 5.114 s/op
Iteration  12: 6.325 s/op
Iteration  13: 5.041 s/op
Iteration  14: 5.291 s/op
Iteration  15: 5.105 s/op
Iteration  16: 5.130 s/op
Iteration  17: 5.300 s/op
Iteration  18: 5.132 s/op
Iteration  19: 5.140 s/op
Iteration  20: 5.289 s/op
Iteration  21: 5.120 s/op
Iteration  22: 5.145 s/op
Iteration  23: 6.403 s/op
Iteration  24: 5.084 s/op
Iteration  25: 5.150 s/op
Iteration  26: 5.136 s/op
Iteration  27: 5.281 s/op
Iteration  28: 5.126 s/op
Iteration  29: 5.156 s/op
Iteration  30: 5.300 s/op
Iteration  31: 5.126 s/op
Iteration  32: 5.138 s/op
Iteration  33: 5.135 s/op
Iteration  34: 6.267 s/op
Iteration  35: 5.068 s/op
Iteration  36: 5.128 s/op
Iteration  37: 5.291 s/op
Iteration  38: 5.133 s/op
Iteration  39: 5.136 s/op
Iteration  40: 5.141 s/op
Iteration  41: 5.275 s/op
Iteration  42: 5.125 s/op
Iteration  43: 5.148 s/op
Iteration  44: 5.313 s/op
Iteration  45: 6.083 s/op
Iteration  46: 5.062 s/op
Iteration  47: 5.114 s/op
Iteration  48: 5.273 s/op
Iteration  49: 5.124 s/op
Iteration  50: 5.130 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.279 ?(99.9%) 0.155 s/op

  Histogram, s/op:
    [5.000, 5.125) = 10 
    [5.125, 5.250) = 22 
    [5.250, 5.375) = 11 
    [5.375, 5.500) = 2 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 0 
    [6.000, 6.125) = 1 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 2 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.041 s/op
     p(50.0000) =      5.149 s/op
     p(90.0000) =      5.536 s/op
     p(95.0000) =      6.293 s/op
     p(99.0000) =      6.403 s/op
     p(99.9000) =      6.403 s/op
     p(99.9900) =      6.403 s/op
     p(99.9990) =      6.403 s/op
     p(99.9999) =      6.403 s/op
    p(100.0000) =      6.403 s/op


# Run complete. Total time: 00:04:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.279 ? 0.155   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564128616471.json
{"wallclock_times": [264.923416212], "core_cycle_counts": [[384934068035], [203164436175], [261631044708], [221038091695]], "aperf_counts": [[384425540041], [203082459795], [261571969970], [220991008227]], "mperf_counts": [[384443128032], [203090292250], [261574299678], [220994367494]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 10:14:41: WARNING] Mail quota reached.
[2019-07-26 10:14:41: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ee-19.1.1'
[2019-07-26 10:14:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 10:14:42: INFO] 254 executions left in scheduler queue
[2019-07-26 10:14:42: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-07-26 10:14:42: INFO] Estimated completion (next execution): 2019-07-26 10:21:37 (0:06:55 from now)
[2019-07-26 10:14:42: INFO] Reboot in preparation for next execution
[2019-07-26 10:18:56: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 10:18:56: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 10:18:56: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 10:18:56: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 10:18:56: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 10:30:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.170 s/op
Iteration   2: 13.661 s/op
Iteration   3: 13.515 s/op
Iteration   4: 13.630 s/op
Iteration   5: 13.518 s/op
Iteration   6: 13.436 s/op
Iteration   7: 13.470 s/op
Iteration   8: 13.419 s/op
Iteration   9: 13.420 s/op
Iteration  10: 13.408 s/op
Iteration  11: 13.427 s/op
Iteration  12: 13.425 s/op
Iteration  13: 13.390 s/op
Iteration  14: 13.441 s/op
Iteration  15: 13.456 s/op
Iteration  16: 13.462 s/op
Iteration  17: 13.431 s/op
Iteration  18: 13.423 s/op
Iteration  19: 13.410 s/op
Iteration  20: 13.437 s/op
Iteration  21: 13.464 s/op
Iteration  22: 13.514 s/op
Iteration  23: 13.421 s/op
Iteration  24: 13.439 s/op
Iteration  25: 13.440 s/op
Iteration  26: 13.533 s/op
Iteration  27: 13.462 s/op
Iteration  28: 13.431 s/op
Iteration  29: 13.419 s/op
Iteration  30: 13.428 s/op
Iteration  31: 13.400 s/op
Iteration  32: 13.522 s/op
Iteration  33: 13.317 s/op
Iteration  34: 13.444 s/op
Iteration  35: 13.418 s/op
Iteration  36: 13.412 s/op
Iteration  37: 13.481 s/op
Iteration  38: 13.423 s/op
Iteration  39: 13.341 s/op
Iteration  40: 13.443 s/op
Iteration  41: 13.416 s/op
Iteration  42: 13.398 s/op
Iteration  43: 13.505 s/op
Iteration  44: 13.472 s/op
Iteration  45: 13.489 s/op
Iteration  46: 13.498 s/op
Iteration  47: 13.538 s/op
Iteration  48: 13.442 s/op
Iteration  49: 13.431 s/op
Iteration  50: 13.449 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.467 ?(99.9%) 0.058 s/op

  Histogram, s/op:
    [13.300, 13.350) = 2 
    [13.350, 13.400) = 3 
    [13.400, 13.450) = 26 
    [13.450, 13.500) = 9 
    [13.500, 13.550) = 7 
    [13.550, 13.600) = 0 
    [13.600, 13.650) = 1 
    [13.650, 13.700) = 1 
    [13.700, 13.750) = 0 
    [13.750, 13.800) = 0 
    [13.800, 13.850) = 0 
    [13.850, 13.900) = 0 
    [13.900, 13.950) = 0 
    [13.950, 14.000) = 0 
    [14.000, 14.050) = 0 
    [14.050, 14.100) = 0 
    [14.100, 14.150) = 0 
    [14.150, 14.200) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.317 s/op
     p(50.0000) =     13.440 s/op
     p(90.0000) =     13.532 s/op
     p(95.0000) =     13.644 s/op
     p(99.0000) =     14.170 s/op
     p(99.9000) =     14.170 s/op
     p(99.9900) =     14.170 s/op
     p(99.9990) =     14.170 s/op
     p(99.9999) =     14.170 s/op
    p(100.0000) =     14.170 s/op


# Run complete. Total time: 00:11:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.467 ? 0.058   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564129136393.json
{"wallclock_times": [674.3828388500001], "core_cycle_counts": [[387146090925], [510661808121], [783786880662], [749942398261]], "aperf_counts": [[385087815973], [510537205338], [783701141317], [749875810871]], "mperf_counts": [[385842918606], [511122888934], [785444717778], [750882009446]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 10:30:10: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_12.0.2'
[2019-07-26 10:30:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 10:30:11: INFO] 253 executions left in scheduler queue
[2019-07-26 10:30:11: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 10:30:11: INFO] Estimated completion (next execution): 2019-07-26 10:43:56 (0:13:44 from now)
[2019-07-26 10:30:11: INFO] Reboot in preparation for next execution
[2019-07-26 10:39:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.484 s/op
Iteration   2: 5.392 s/op
Iteration   3: 5.399 s/op
Iteration   4: 5.293 s/op
Iteration   5: 5.287 s/op
Iteration   6: 5.307 s/op
Iteration   7: 5.290 s/op
Iteration   8: 5.291 s/op
Iteration   9: 5.285 s/op
Iteration  10: 5.285 s/op
Iteration  11: 5.286 s/op
Iteration  12: 5.271 s/op
Iteration  13: 5.288 s/op
Iteration  14: 5.282 s/op
Iteration  15: 5.288 s/op
Iteration  16: 5.286 s/op
Iteration  17: 5.288 s/op
Iteration  18: 5.298 s/op
Iteration  19: 5.291 s/op
Iteration  20: 5.297 s/op
Iteration  21: 5.286 s/op
Iteration  22: 5.288 s/op
Iteration  23: 5.286 s/op
Iteration  24: 5.289 s/op
Iteration  25: 5.281 s/op
Iteration  26: 5.283 s/op
Iteration  27: 5.284 s/op
Iteration  28: 5.266 s/op
Iteration  29: 5.292 s/op
Iteration  30: 5.291 s/op
Iteration  31: 5.283 s/op
Iteration  32: 5.283 s/op
Iteration  33: 5.271 s/op
Iteration  34: 5.269 s/op
Iteration  35: 5.287 s/op
Iteration  36: 5.267 s/op
Iteration  37: 5.286 s/op
Iteration  38: 5.286 s/op
Iteration  39: 5.283 s/op
Iteration  40: 5.267 s/op
Iteration  41: 5.291 s/op
Iteration  42: 5.284 s/op
Iteration  43: 5.290 s/op
Iteration  44: 5.293 s/op
Iteration  45: 5.273 s/op
Iteration  46: 5.285 s/op
Iteration  47: 5.288 s/op
Iteration  48: 5.285 s/op
Iteration  49: 5.282 s/op
Iteration  50: 5.291 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      5.294 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [5.200, 5.225) = 0 
    [5.225, 5.250) = 0 
    [5.250, 5.275) = 7 
    [5.275, 5.300) = 39 
    [5.300, 5.325) = 1 
    [5.325, 5.350) = 0 
    [5.350, 5.375) = 0 
    [5.375, 5.400) = 2 
    [5.400, 5.425) = 0 
    [5.425, 5.450) = 0 
    [5.450, 5.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.266 s/op
     p(50.0000) =      5.286 s/op
     p(90.0000) =      5.298 s/op
     p(95.0000) =      5.395 s/op
     p(99.0000) =      5.484 s/op
     p(99.9000) =      5.484 s/op
     p(99.9900) =      5.484 s/op
     p(99.9990) =      5.484 s/op
     p(99.9999) =      5.484 s/op
    p(100.0000) =      5.484 s/op


# Run complete. Total time: 00:04:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.294 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564130079463.json
{"wallclock_times": [265.549443049], "core_cycle_counts": [[173400337302], [123871563002], [159406767136], [402134394351]], "aperf_counts": [[172756011546], [123829639365], [159382890244], [402118748196]], "mperf_counts": [[172771174866], [123830901212], [159383463132], [402124558624]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 10:39:05: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 10:39:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 10:39:06: INFO] 252 executions left in scheduler queue
[2019-07-26 10:39:06: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 10:39:06: INFO] Estimated completion (next execution): 2019-07-26 10:46:01 (0:06:55 from now)
[2019-07-26 10:39:06: INFO] Reboot in preparation for next execution
[2019-07-26 10:51:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.013 s/op
Iteration   2: 9.842 s/op
Iteration   3: 9.822 s/op
Iteration   4: 9.935 s/op
Iteration   5: 9.792 s/op
Iteration   6: 9.842 s/op
Iteration   7: 9.790 s/op
Iteration   8: 9.786 s/op
Iteration   9: 9.815 s/op
Iteration  10: 9.769 s/op
Iteration  11: 9.790 s/op
Iteration  12: 9.821 s/op
Iteration  13: 9.780 s/op
Iteration  14: 9.837 s/op
Iteration  15: 9.830 s/op
Iteration  16: 9.795 s/op
Iteration  17: 9.824 s/op
Iteration  18: 9.811 s/op
Iteration  19: 9.787 s/op
Iteration  20: 9.783 s/op
Iteration  21: 9.809 s/op
Iteration  22: 9.773 s/op
Iteration  23: 9.792 s/op
Iteration  24: 9.808 s/op
Iteration  25: 9.813 s/op
Iteration  26: 9.772 s/op
Iteration  27: 9.788 s/op
Iteration  28: 9.829 s/op
Iteration  29: 9.777 s/op
Iteration  30: 9.821 s/op
Iteration  31: 9.810 s/op
Iteration  32: 9.768 s/op
Iteration  33: 9.760 s/op
Iteration  34: 9.784 s/op
Iteration  35: 9.779 s/op
Iteration  36: 9.796 s/op
Iteration  37: 9.769 s/op
Iteration  38: 9.819 s/op
Iteration  39: 9.762 s/op
Iteration  40: 9.785 s/op
Iteration  41: 9.819 s/op
Iteration  42: 9.770 s/op
Iteration  43: 9.793 s/op
Iteration  44: 9.862 s/op
Iteration  45: 9.823 s/op
Iteration  46: 9.832 s/op
Iteration  47: 9.797 s/op
Iteration  48: 9.827 s/op
Iteration  49: 9.780 s/op
Iteration  50: 9.825 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      9.808 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [ 9.700,  9.725) = 0 
    [ 9.725,  9.750) = 0 
    [ 9.750,  9.775) = 8 
    [ 9.775,  9.800) = 18 
    [ 9.800,  9.825) = 14 
    [ 9.825,  9.850) = 7 
    [ 9.850,  9.875) = 1 
    [ 9.875,  9.900) = 0 
    [ 9.900,  9.925) = 0 
    [ 9.925,  9.950) = 1 
    [ 9.950,  9.975) = 0 
    [ 9.975, 10.000) = 0 
    [10.000, 10.025) = 1 
    [10.025, 10.050) = 0 
    [10.050, 10.075) = 0 
    [10.075, 10.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.760 s/op
     p(50.0000) =      9.797 s/op
     p(90.0000) =      9.841 s/op
     p(95.0000) =      9.895 s/op
     p(99.0000) =     10.013 s/op
     p(99.9000) =     10.013 s/op
     p(99.9900) =     10.013 s/op
     p(99.9990) =     10.013 s/op
     p(99.9999) =     10.013 s/op
    p(100.0000) =     10.013 s/op


# Run complete. Total time: 00:08:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  9.808 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564130600082.json
{"wallclock_times": [491.309920854], "core_cycle_counts": [[535366363848], [236889829902], [436804399892], [372768575913]], "aperf_counts": [[534407952060], [236785212297], [436723406062], [372727049121]], "mperf_counts": [[534425438330], [236790889334], [436723514242], [372727708502]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 10:51:31: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 10:51:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 10:51:32: INFO] 251 executions left in scheduler queue
[2019-07-26 10:51:32: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 10:51:32: INFO] Estimated completion (next execution): 2019-07-26 11:02:14 (0:10:41 from now)
[2019-07-26 10:51:32: INFO] Reboot in preparation for next execution
[2019-07-26 10:58:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.810 s/op
Iteration   2: 3.339 s/op
Iteration   3: 3.332 s/op
Iteration   4: 3.411 s/op
Iteration   5: 3.304 s/op
Iteration   6: 3.341 s/op
Iteration   7: 3.310 s/op
Iteration   8: 3.337 s/op
Iteration   9: 3.356 s/op
Iteration  10: 3.336 s/op
Iteration  11: 3.364 s/op
Iteration  12: 3.334 s/op
Iteration  13: 3.354 s/op
Iteration  14: 3.347 s/op
Iteration  15: 3.356 s/op
Iteration  16: 3.350 s/op
Iteration  17: 3.370 s/op
Iteration  18: 3.331 s/op
Iteration  19: 3.442 s/op
Iteration  20: 3.353 s/op
Iteration  21: 3.352 s/op
Iteration  22: 3.355 s/op
Iteration  23: 3.355 s/op
Iteration  24: 3.347 s/op
Iteration  25: 3.342 s/op
Iteration  26: 3.351 s/op
Iteration  27: 3.339 s/op
Iteration  28: 3.355 s/op
Iteration  29: 3.340 s/op
Iteration  30: 3.354 s/op
Iteration  31: 3.341 s/op
Iteration  32: 3.359 s/op
Iteration  33: 3.335 s/op
Iteration  34: 3.365 s/op
Iteration  35: 3.337 s/op
Iteration  36: 3.358 s/op
Iteration  37: 3.347 s/op
Iteration  38: 3.435 s/op
Iteration  39: 3.344 s/op
Iteration  40: 3.366 s/op
Iteration  41: 3.345 s/op
Iteration  42: 3.355 s/op
Iteration  43: 3.352 s/op
Iteration  44: 3.344 s/op
Iteration  45: 3.359 s/op
Iteration  46: 3.338 s/op
Iteration  47: 3.351 s/op
Iteration  48: 3.342 s/op
Iteration  49: 3.351 s/op
Iteration  50: 3.348 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      3.361 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.300, 3.350) = 24 
    [3.350, 3.400) = 22 
    [3.400, 3.450) = 3 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 1 
    [3.850, 3.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.304 s/op
     p(50.0000) =      3.350 s/op
     p(90.0000) =      3.370 s/op
     p(95.0000) =      3.438 s/op
     p(99.0000) =      3.810 s/op
     p(99.9000) =      3.810 s/op
     p(99.9900) =      3.810 s/op
     p(99.9990) =      3.810 s/op
     p(99.9999) =      3.810 s/op
    p(100.0000) =      3.810 s/op


# Run complete. Total time: 00:02:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.361 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564131347565.json
{"wallclock_times": [169.01750543], "core_cycle_counts": [[200355456995], [156539394629], [132608018647], [99466358620]], "aperf_counts": [[199995454122], [156490925848], [132566921957], [99438594350]], "mperf_counts": [[200005505684], [156502170756], [132567633142], [99439368062]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 10:58:36: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 10:58:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 10:58:37: INFO] 250 executions left in scheduler queue
[2019-07-26 10:58:37: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 10:58:37: INFO] Estimated completion (next execution): 2019-07-26 11:03:56 (0:05:19 from now)
[2019-07-26 10:58:37: INFO] Reboot in preparation for next execution
[2019-07-26 11:05:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.613 s/op
Iteration   2: 3.205 s/op
Iteration   3: 3.158 s/op
Iteration   4: 3.274 s/op
Iteration   5: 3.166 s/op
Iteration   6: 3.209 s/op
Iteration   7: 3.151 s/op
Iteration   8: 3.150 s/op
Iteration   9: 3.160 s/op
Iteration  10: 3.177 s/op
Iteration  11: 3.164 s/op
Iteration  12: 3.168 s/op
Iteration  13: 3.131 s/op
Iteration  14: 3.165 s/op
Iteration  15: 3.174 s/op
Iteration  16: 3.174 s/op
Iteration  17: 3.129 s/op
Iteration  18: 3.152 s/op
Iteration  19: 3.168 s/op
Iteration  20: 3.156 s/op
Iteration  21: 3.155 s/op
Iteration  22: 3.152 s/op
Iteration  23: 3.134 s/op
Iteration  24: 3.140 s/op
Iteration  25: 3.166 s/op
Iteration  26: 3.174 s/op
Iteration  27: 3.144 s/op
Iteration  28: 3.169 s/op
Iteration  29: 3.139 s/op
Iteration  30: 3.136 s/op
Iteration  31: 3.146 s/op
Iteration  32: 3.154 s/op
Iteration  33: 3.147 s/op
Iteration  34: 3.163 s/op
Iteration  35: 3.168 s/op
Iteration  36: 3.169 s/op
Iteration  37: 3.130 s/op
Iteration  38: 3.179 s/op
Iteration  39: 3.123 s/op
Iteration  40: 3.157 s/op
Iteration  41: 3.161 s/op
Iteration  42: 3.165 s/op
Iteration  43: 3.156 s/op
Iteration  44: 3.179 s/op
Iteration  45: 3.141 s/op
Iteration  46: 3.148 s/op
Iteration  47: 3.141 s/op
Iteration  48: 3.172 s/op
Iteration  49: 3.147 s/op
Iteration  50: 3.170 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      3.169 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [3.100, 3.150) = 15 
    [3.150, 3.200) = 31 
    [3.200, 3.250) = 2 
    [3.250, 3.300) = 1 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 1 
    [3.650, 3.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.123 s/op
     p(50.0000) =      3.159 s/op
     p(90.0000) =      3.179 s/op
     p(95.0000) =      3.238 s/op
     p(99.0000) =      3.613 s/op
     p(99.9000) =      3.613 s/op
     p(99.9900) =      3.613 s/op
     p(99.9990) =      3.613 s/op
     p(99.9999) =      3.613 s/op
    p(100.0000) =      3.613 s/op


# Run complete. Total time: 00:02:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  3.169 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564131795050.json
{"wallclock_times": [159.42171241900002], "core_cycle_counts": [[109271356729], [131925544598], [168677288774], [112324544758]], "aperf_counts": [[108875200425], [131890058128], [168649424740], [112305563809]], "mperf_counts": [[108886299694], [131908845758], [168650933436], [112315887072]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 11:05:54: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ce-19.1.1'
[2019-07-26 11:05:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 11:05:55: INFO] 249 executions left in scheduler queue
[2019-07-26 11:05:55: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-07-26 11:05:55: INFO] Estimated completion (next execution): 2019-07-26 11:11:05 (0:05:09 from now)
[2019-07-26 11:05:55: INFO] Reboot in preparation for next execution
[2019-07-26 11:10:10: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 11:10:10: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 11:10:10: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 11:10:10: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 11:10:10: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 11:10:10: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 11:10:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.002 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 16 
    [0.000, 0.001) = 33 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 1 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.002 s/op
     p(99.9000) =      0.002 s/op
     p(99.9900) =      0.002 s/op
     p(99.9990) =      0.002 s/op
     p(99.9999) =      0.002 s/op
    p(100.0000) =      0.002 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564132210693.json
{"wallclock_times": [1.4976943050000102], "core_cycle_counts": [[3354475580], [2900349304], [2323911124], [1910382699]], "aperf_counts": [[3343160696], [2886378258], [2312040976], [1896285587]], "mperf_counts": [[3352053502], [2888347212], [2312046696], [1896288300]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 11:10:12: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_11.0.4'
[2019-07-26 11:10:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 11:10:13: INFO] 248 executions left in scheduler queue
[2019-07-26 11:10:13: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-26 11:10:13: INFO] Estimated completion (next execution): 2019-07-26 11:12:45 (0:02:31 from now)
[2019-07-26 11:10:13: INFO] Reboot in preparation for next execution
[2019-07-26 11:14:29: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 11:14:29: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 11:14:29: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 11:14:29: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 11:14:29: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 11:16:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.670 s/op
Iteration   2: 2.493 s/op
Iteration   3: 2.462 s/op
Iteration   4: 2.451 s/op
Iteration   5: 2.504 s/op
Iteration   6: 2.374 s/op
Iteration   7: 2.514 s/op
Iteration   8: 2.500 s/op
Iteration   9: 2.487 s/op
Iteration  10: 2.426 s/op
Iteration  11: 2.483 s/op
Iteration  12: 2.489 s/op
Iteration  13: 2.479 s/op
Iteration  14: 2.488 s/op
Iteration  15: 2.493 s/op
Iteration  16: 2.463 s/op
Iteration  17: 2.488 s/op
Iteration  18: 2.485 s/op
Iteration  19: 2.488 s/op
Iteration  20: 2.495 s/op
Iteration  21: 2.489 s/op
Iteration  22: 2.493 s/op
Iteration  23: 2.485 s/op
Iteration  24: 2.401 s/op
Iteration  25: 2.496 s/op
Iteration  26: 2.483 s/op
Iteration  27: 2.488 s/op
Iteration  28: 2.486 s/op
Iteration  29: 2.461 s/op
Iteration  30: 2.498 s/op
Iteration  31: 2.489 s/op
Iteration  32: 2.362 s/op
Iteration  33: 2.496 s/op
Iteration  34: 2.493 s/op
Iteration  35: 2.484 s/op
Iteration  36: 2.488 s/op
Iteration  37: 2.378 s/op
Iteration  38: 2.495 s/op
Iteration  39: 2.494 s/op
Iteration  40: 2.485 s/op
Iteration  41: 2.479 s/op
Iteration  42: 2.489 s/op
Iteration  43: 2.488 s/op
Iteration  44: 2.482 s/op
Iteration  45: 2.467 s/op
Iteration  46: 2.466 s/op
Iteration  47: 2.489 s/op
Iteration  48: 2.483 s/op
Iteration  49: 2.495 s/op
Iteration  50: 2.501 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.480 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [2.300, 2.325) = 0 
    [2.325, 2.350) = 0 
    [2.350, 2.375) = 2 
    [2.375, 2.400) = 1 
    [2.400, 2.425) = 1 
    [2.425, 2.450) = 1 
    [2.450, 2.475) = 6 
    [2.475, 2.500) = 34 
    [2.500, 2.525) = 4 
    [2.525, 2.550) = 0 
    [2.550, 2.575) = 0 
    [2.575, 2.600) = 0 
    [2.600, 2.625) = 0 
    [2.625, 2.650) = 0 
    [2.650, 2.675) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.362 s/op
     p(50.0000) =      2.488 s/op
     p(90.0000) =      2.500 s/op
     p(95.0000) =      2.508 s/op
     p(99.0000) =      2.670 s/op
     p(99.9000) =      2.670 s/op
     p(99.9900) =      2.670 s/op
     p(99.9990) =      2.670 s/op
     p(99.9999) =      2.670 s/op
    p(100.0000) =      2.670 s/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.480 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564132469610.json
{"wallclock_times": [125.06091254199998], "core_cycle_counts": [[71618711103], [63970881859], [112574042593], [123992735613]], "aperf_counts": [[71224460405], [63933737592], [112546377429], [123973413987]], "mperf_counts": [[80071396000], [71961677516], [126455155162], [140642338438]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 11:16:34: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-26 11:16:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 11:16:35: INFO] 247 executions left in scheduler queue
[2019-07-26 11:16:35: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-26 11:16:35: INFO] Estimated completion (next execution): 2019-07-26 11:21:11 (0:04:35 from now)
[2019-07-26 11:16:35: INFO] Reboot in preparation for next execution
[2019-07-26 11:20:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 11:20:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 11:20:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 11:20:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 11:20:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 11:22:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.515 s/op
Iteration   2: 2.449 s/op
Iteration   3: 2.479 s/op
Iteration   4: 2.622 s/op
Iteration   5: 2.241 s/op
Iteration   6: 2.270 s/op
Iteration   7: 2.251 s/op
Iteration   8: 2.248 s/op
Iteration   9: 2.242 s/op
Iteration  10: 2.247 s/op
Iteration  11: 2.252 s/op
Iteration  12: 2.255 s/op
Iteration  13: 2.256 s/op
Iteration  14: 2.254 s/op
Iteration  15: 2.246 s/op
Iteration  16: 2.248 s/op
Iteration  17: 2.245 s/op
Iteration  18: 2.250 s/op
Iteration  19: 2.247 s/op
Iteration  20: 2.248 s/op
Iteration  21: 2.243 s/op
Iteration  22: 2.251 s/op
Iteration  23: 2.248 s/op
Iteration  24: 2.253 s/op
Iteration  25: 2.250 s/op
Iteration  26: 2.247 s/op
Iteration  27: 2.251 s/op
Iteration  28: 2.249 s/op
Iteration  29: 2.244 s/op
Iteration  30: 2.245 s/op
Iteration  31: 2.246 s/op
Iteration  32: 2.246 s/op
Iteration  33: 2.243 s/op
Iteration  34: 2.246 s/op
Iteration  35: 2.245 s/op
Iteration  36: 2.245 s/op
Iteration  37: 2.248 s/op
Iteration  38: 2.252 s/op
Iteration  39: 2.244 s/op
Iteration  40: 2.250 s/op
Iteration  41: 2.246 s/op
Iteration  42: 2.246 s/op
Iteration  43: 2.248 s/op
Iteration  44: 2.256 s/op
Iteration  45: 2.247 s/op
Iteration  46: 2.244 s/op
Iteration  47: 2.254 s/op
Iteration  48: 2.250 s/op
Iteration  49: 2.249 s/op
Iteration  50: 2.251 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.270 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [2.200, 2.250) = 30 
    [2.250, 2.300) = 16 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 1 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.241 s/op
     p(50.0000) =      2.248 s/op
     p(90.0000) =      2.268 s/op
     p(95.0000) =      2.495 s/op
     p(99.0000) =      2.622 s/op
     p(99.9000) =      2.622 s/op
     p(99.9900) =      2.622 s/op
     p(99.9990) =      2.622 s/op
     p(99.9999) =      2.622 s/op
    p(100.0000) =      2.622 s/op


# Run complete. Total time: 00:01:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.270 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564132849545.json
{"wallclock_times": [114.48443805199997], "core_cycle_counts": [[70934722271], [91405033831], [121907766671], [91052854814]], "aperf_counts": [[70613513634], [91374064222], [121888624976], [91036111747]], "mperf_counts": [[70777351320], [91789981014], [121964760380], [91059817208]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 11:22:44: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_11.0.4'
[2019-07-26 11:22:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 11:22:45: INFO] 246 executions left in scheduler queue
[2019-07-26 11:22:45: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 11:22:45: INFO] Estimated completion (next execution): 2019-07-26 11:27:09 (0:04:24 from now)
[2019-07-26 11:22:45: INFO] Reboot in preparation for next execution
[2019-07-26 11:32:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.400 s
Iteration   2: 6.960 s
Iteration   3: 6.900 s
Iteration   4: 6.913 s
Iteration   5: 6.938 s
Iteration   6: 6.896 s
Iteration   7: 6.929 s
Iteration   8: 6.904 s
Iteration   9: 6.914 s
Iteration  10: 6.947 s
Iteration  11: 6.914 s
Iteration  12: 6.930 s
Iteration  13: 6.904 s
Iteration  14: 6.904 s
Iteration  15: 6.931 s
Iteration  16: 6.893 s
Iteration  17: 6.900 s
Iteration  18: 6.948 s
Iteration  19: 6.923 s
Iteration  20: 6.965 s
Iteration  21: 6.914 s
Iteration  22: 6.899 s
Iteration  23: 6.963 s
Iteration  24: 6.903 s
Iteration  25: 6.891 s
Iteration  26: 6.953 s
Iteration  27: 6.912 s
Iteration  28: 6.898 s
Iteration  29: 6.962 s
Iteration  30: 6.930 s
Iteration  31: 6.917 s
Iteration  32: 6.954 s
Iteration  33: 6.926 s
Iteration  34: 6.935 s
Iteration  35: 6.960 s
Iteration  36: 6.936 s
Iteration  37: 6.903 s
Iteration  38: 6.955 s
Iteration  39: 6.920 s
Iteration  40: 6.952 s
Iteration  41: 6.930 s
Iteration  42: 6.912 s
Iteration  43: 6.973 s
Iteration  44: 6.901 s
Iteration  45: 6.917 s
Iteration  46: 6.954 s
Iteration  47: 6.926 s
Iteration  48: 6.921 s
Iteration  49: 6.959 s
Iteration  50: 6.891 s


Result: 6.936 ?(99.9%) 0.035 s [Average]
  Statistics: (min, avg, max) = (6.891, 6.936, 7.400), stdev = 0.071
  Confidence interval (99.9%): [6.901, 6.971]
  Samples, N = 50
        mean =      6.936 ?(99.9%) 0.035 s
         min =      6.891 s
  p( 0.0000) =      6.891 s
  p(50.0000) =      6.924 s
  p(90.0000) =      6.962 s
  p(95.0000) =      6.968 s
  p(99.0000) =      7.400 s
  p(99.9000) =      7.400 s
  p(99.9900) =      7.400 s
  p(99.9990) =      7.400 s
  p(99.9999) =      7.400 s
         max =      7.400 s


# Run complete. Total time: 00:05:47

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.936        0.035      s
{"wallclock_times": [347.85613866000006], "core_cycle_counts": [[440826099112], [232331429878], [246433567516], [277507473070]], "aperf_counts": [[440112937808], [232230674698], [246352899699], [277443125171]], "mperf_counts": [[440126433516], [232230894534], [246352990112], [277443533372]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 11:32:48: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 11:32:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 11:32:49: INFO] 245 executions left in scheduler queue
[2019-07-26 11:32:49: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 11:32:49: INFO] Estimated completion (next execution): 2019-07-26 11:41:07 (0:08:18 from now)
[2019-07-26 11:32:49: INFO] Reboot in preparation for next execution
[2019-07-26 11:46:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.691 s
Iteration   2: 11.732 s
Iteration   3: 11.545 s
Iteration   4: 11.792 s
Iteration   5: 11.739 s
Iteration   6: 11.769 s
Iteration   7: 11.777 s
Iteration   8: 11.792 s
Iteration   9: 11.730 s
Iteration  10: 11.722 s
Iteration  11: 11.762 s
Iteration  12: 11.741 s
Iteration  13: 11.741 s
Iteration  14: 11.709 s
Iteration  15: 11.774 s
Iteration  16: 11.725 s
Iteration  17: 11.726 s
Iteration  18: 11.730 s
Iteration  19: 11.714 s
Iteration  20: 11.705 s
Iteration  21: 11.777 s
Iteration  22: 11.730 s
Iteration  23: 11.727 s
Iteration  24: 11.712 s
Iteration  25: 11.712 s
Iteration  26: 11.743 s
Iteration  27: 11.719 s
Iteration  28: 11.730 s
Iteration  29: 11.693 s
Iteration  30: 11.752 s
Iteration  31: 11.713 s
Iteration  32: 11.733 s
Iteration  33: 11.723 s
Iteration  34: 11.674 s
Iteration  35: 11.702 s
Iteration  36: 11.751 s
Iteration  37: 11.753 s
Iteration  38: 11.729 s
Iteration  39: 11.715 s
Iteration  40: 11.718 s
Iteration  41: 11.707 s
Iteration  42: 11.722 s
Iteration  43: 11.706 s
Iteration  44: 11.762 s
Iteration  45: 11.728 s
Iteration  46: 11.698 s
Iteration  47: 11.755 s
Iteration  48: 11.684 s
Iteration  49: 11.717 s
Iteration  50: 11.711 s


Result: 11.726 ?(99.9%) 0.018 s [Average]
  Statistics: (min, avg, max) = (11.545, 11.726, 11.792), stdev = 0.037
  Confidence interval (99.9%): [11.708, 11.745]
  Samples, N = 50
        mean =     11.726 ?(99.9%) 0.018 s
         min =     11.545 s
  p( 0.0000) =     11.545 s
  p(50.0000) =     11.727 s
  p(90.0000) =     11.774 s
  p(95.0000) =     11.784 s
  p(99.0000) =     11.792 s
  p(99.9000) =     11.792 s
  p(99.9900) =     11.792 s
  p(99.9990) =     11.792 s
  p(99.9999) =     11.792 s
         max =     11.792 s


# Run complete. Total time: 00:09:47

Benchmark                                                                               (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  11.726        0.018      s
{"wallclock_times": [587.230461568], "core_cycle_counts": [[464319869355], [325148524607], [346505338424], [756165606467]], "aperf_counts": [[462992720457], [325051723349], [346460366939], [756139011803]], "mperf_counts": [[463006262304], [325052128542], [346464904222], [756139443056]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 11:46:07: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 11:46:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 11:46:08: INFO] 244 executions left in scheduler queue
[2019-07-26 11:46:08: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 11:46:08: INFO] Estimated completion (next execution): 2019-07-26 11:58:26 (0:12:17 from now)
[2019-07-26 11:46:08: INFO] Reboot in preparation for next execution
[2019-07-26 11:55:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.972 s
Iteration   2: 6.712 s
Iteration   3: 6.562 s
Iteration   4: 6.605 s
Iteration   5: 6.650 s
Iteration   6: 6.627 s
Iteration   7: 6.608 s
Iteration   8: 6.625 s
Iteration   9: 6.652 s
Iteration  10: 6.631 s
Iteration  11: 6.645 s
Iteration  12: 6.640 s
Iteration  13: 6.691 s
Iteration  14: 6.637 s
Iteration  15: 6.628 s
Iteration  16: 6.636 s
Iteration  17: 6.623 s
Iteration  18: 6.674 s
Iteration  19: 6.629 s
Iteration  20: 6.628 s
Iteration  21: 6.617 s
Iteration  22: 6.610 s
Iteration  23: 6.632 s
Iteration  24: 6.644 s
Iteration  25: 6.635 s
Iteration  26: 6.647 s
Iteration  27: 6.631 s
Iteration  28: 6.627 s
Iteration  29: 6.668 s
Iteration  30: 6.633 s
Iteration  31: 6.648 s
Iteration  32: 6.671 s
Iteration  33: 6.647 s
Iteration  34: 6.689 s
Iteration  35: 6.656 s
Iteration  36: 6.680 s
Iteration  37: 6.667 s
Iteration  38: 6.628 s
Iteration  39: 6.674 s
Iteration  40: 6.653 s
Iteration  41: 6.654 s
Iteration  42: 6.677 s
Iteration  43: 6.632 s
Iteration  44: 6.623 s
Iteration  45: 6.602 s
Iteration  46: 6.672 s
Iteration  47: 6.640 s
Iteration  48: 6.666 s
Iteration  49: 6.650 s
Iteration  50: 6.654 s


Result: 6.650 ?(99.9%) 0.026 s [Average]
  Statistics: (min, avg, max) = (6.562, 6.650, 6.972), stdev = 0.053
  Confidence interval (99.9%): [6.624, 6.676]
  Samples, N = 50
        mean =      6.650 ?(99.9%) 0.026 s
         min =      6.562 s
  p( 0.0000) =      6.562 s
  p(50.0000) =      6.642 s
  p(90.0000) =      6.680 s
  p(95.0000) =      6.700 s
  p(99.0000) =      6.972 s
  p(99.9000) =      6.972 s
  p(99.9900) =      6.972 s
  p(99.9990) =      6.972 s
  p(99.9999) =      6.972 s
         max =      6.972 s


# Run complete. Total time: 00:05:33

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  6.650        0.026      s
{"wallclock_times": [333.49066594600004], "core_cycle_counts": [[281987630406], [210643764273], [310956868414], [279301816626]], "aperf_counts": [[281235812934], [210581283869], [310920312001], [279280646924]], "mperf_counts": [[281241725972], [210588895682], [310920375360], [279281306504]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 11:55:59: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 11:55:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 11:55:59: INFO] 243 executions left in scheduler queue
[2019-07-26 11:55:59: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 11:55:59: INFO] Estimated completion (next execution): 2019-07-26 12:04:03 (0:08:03 from now)
[2019-07-26 11:55:59: INFO] Reboot in preparation for next execution
[2019-07-26 12:13:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.311 s
Iteration   2: 16.312 s
Iteration   3: 16.241 s
Iteration   4: 16.276 s
Iteration   5: 16.240 s
Iteration   6: 16.311 s
Iteration   7: 16.227 s
Iteration   8: 16.222 s
Iteration   9: 16.219 s
Iteration  10: 16.251 s
Iteration  11: 16.217 s
Iteration  12: 16.258 s
Iteration  13: 16.257 s
Iteration  14: 16.309 s
Iteration  15: 16.238 s
Iteration  16: 16.260 s
Iteration  17: 16.246 s
Iteration  18: 16.226 s
Iteration  19: 16.287 s
Iteration  20: 16.233 s
Iteration  21: 16.225 s
Iteration  22: 16.184 s
Iteration  23: 16.263 s
Iteration  24: 16.258 s
Iteration  25: 16.281 s
Iteration  26: 16.233 s
Iteration  27: 16.311 s
Iteration  28: 16.267 s
Iteration  29: 16.297 s
Iteration  30: 16.175 s
Iteration  31: 16.210 s
Iteration  32: 16.229 s
Iteration  33: 16.255 s
Iteration  34: 16.285 s
Iteration  35: 16.252 s
Iteration  36: 16.298 s
Iteration  37: 16.213 s
Iteration  38: 16.297 s
Iteration  39: 16.273 s
Iteration  40: 16.251 s
Iteration  41: 16.284 s
Iteration  42: 16.244 s
Iteration  43: 16.245 s
Iteration  44: 16.241 s
Iteration  45: 16.291 s
Iteration  46: 16.239 s
Iteration  47: 16.184 s
Iteration  48: 16.267 s
Iteration  49: 16.233 s
Iteration  50: 16.195 s


Result: 16.253 ?(99.9%) 0.017 s [Average]
  Statistics: (min, avg, max) = (16.175, 16.253, 16.312), stdev = 0.035
  Confidence interval (99.9%): [16.235, 16.270]
  Samples, N = 50
        mean =     16.253 ?(99.9%) 0.017 s
         min =     16.175 s
  p( 0.0000) =     16.175 s
  p(50.0000) =     16.251 s
  p(90.0000) =     16.308 s
  p(95.0000) =     16.311 s
  p(99.0000) =     16.312 s
  p(99.9000) =     16.312 s
  p(99.9900) =     16.312 s
  p(99.9990) =     16.312 s
  p(99.9999) =     16.312 s
         max =     16.312 s


# Run complete. Total time: 00:13:33

Benchmark                                                                          (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  16.253        0.017      s
{"wallclock_times": [813.577562166], "core_cycle_counts": [[818472967649], [661687177505], [367169288109], [771591767497]], "aperf_counts": [[816744572552], [661522668594], [367113285236], [771561040420]], "mperf_counts": [[816755451156], [661528901848], [367119073584], [771561218586]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 12:13:50: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot-8u222-b10'
[2019-07-26 12:13:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 12:13:51: INFO] 242 executions left in scheduler queue
[2019-07-26 12:13:51: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:13:51: INFO] Estimated completion (next execution): 2019-07-26 12:29:55 (0:16:03 from now)
[2019-07-26 12:13:51: INFO] Reboot in preparation for next execution
[2019-07-26 12:21:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.917 s
Iteration   2: 3.672 s
Iteration   3: 3.528 s
Iteration   4: 3.495 s
Iteration   5: 3.499 s
Iteration   6: 3.507 s
Iteration   7: 3.520 s
Iteration   8: 3.529 s
Iteration   9: 3.512 s
Iteration  10: 3.532 s
Iteration  11: 3.507 s
Iteration  12: 3.522 s
Iteration  13: 3.540 s
Iteration  14: 3.496 s
Iteration  15: 3.551 s
Iteration  16: 3.502 s
Iteration  17: 3.526 s
Iteration  18: 3.501 s
Iteration  19: 3.511 s
Iteration  20: 3.540 s
Iteration  21: 3.518 s
Iteration  22: 3.505 s
Iteration  23: 3.511 s
Iteration  24: 3.493 s
Iteration  25: 3.513 s
Iteration  26: 3.515 s
Iteration  27: 3.516 s
Iteration  28: 3.493 s
Iteration  29: 3.507 s
Iteration  30: 3.514 s
Iteration  31: 3.508 s
Iteration  32: 3.497 s
Iteration  33: 3.532 s
Iteration  34: 3.497 s
Iteration  35: 3.520 s
Iteration  36: 3.508 s
Iteration  37: 3.553 s
Iteration  38: 3.515 s
Iteration  39: 3.519 s
Iteration  40: 3.542 s
Iteration  41: 3.538 s
Iteration  42: 3.511 s
Iteration  43: 3.543 s
Iteration  44: 3.517 s
Iteration  45: 3.516 s
Iteration  46: 3.495 s
Iteration  47: 3.517 s
Iteration  48: 3.522 s
Iteration  49: 3.559 s
Iteration  50: 3.497 s


Result: 3.528 ?(99.9%) 0.031 s [Average]
  Statistics: (min, avg, max) = (3.493, 3.528, 3.917), stdev = 0.062
  Confidence interval (99.9%): [3.497, 3.559]
  Samples, N = 50
        mean =      3.528 ?(99.9%) 0.031 s
         min =      3.493 s
  p( 0.0000) =      3.493 s
  p(50.0000) =      3.516 s
  p(90.0000) =      3.550 s
  p(95.0000) =      3.610 s
  p(99.0000) =      3.917 s
  p(99.9000) =      3.917 s
  p(99.9900) =      3.917 s
  p(99.9990) =      3.917 s
  p(99.9999) =      3.917 s
         max =      3.917 s


# Run complete. Total time: 00:02:57

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  3.528        0.031      s
{"wallclock_times": [177.445487375], "core_cycle_counts": [[214458291822], [111967382127], [154950229642], [97807523351]], "aperf_counts": [[214105840194], [111918348669], [154926259126], [97788171614]], "mperf_counts": [[214126360742], [111924693552], [154929873900], [97788945112]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 12:21:04: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:21:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 12:21:05: INFO] 241 executions left in scheduler queue
[2019-07-26 12:21:05: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:21:05: INFO] Estimated completion (next execution): 2019-07-26 12:26:33 (0:05:27 from now)
[2019-07-26 12:21:05: INFO] Reboot in preparation for next execution
[2019-07-26 12:30:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.992 s
Iteration   2: 5.823 s
Iteration   3: 5.655 s
Iteration   4: 5.671 s
Iteration   5: 5.665 s
Iteration   6: 5.670 s
Iteration   7: 5.645 s
Iteration   8: 5.664 s
Iteration   9: 5.663 s
Iteration  10: 5.668 s
Iteration  11: 5.646 s
Iteration  12: 5.681 s
Iteration  13: 5.682 s
Iteration  14: 5.674 s
Iteration  15: 5.687 s
Iteration  16: 5.673 s
Iteration  17: 5.675 s
Iteration  18: 5.663 s
Iteration  19: 5.659 s
Iteration  20: 5.662 s
Iteration  21: 5.660 s
Iteration  22: 5.666 s
Iteration  23: 5.666 s
Iteration  24: 5.664 s
Iteration  25: 5.679 s
Iteration  26: 5.692 s
Iteration  27: 5.690 s
Iteration  28: 5.688 s
Iteration  29: 5.645 s
Iteration  30: 5.661 s
Iteration  31: 5.644 s
Iteration  32: 5.687 s
Iteration  33: 5.671 s
Iteration  34: 5.656 s
Iteration  35: 5.667 s
Iteration  36: 5.666 s
Iteration  37: 5.672 s
Iteration  38: 5.685 s
Iteration  39: 5.666 s
Iteration  40: 5.676 s
Iteration  41: 5.665 s
Iteration  42: 5.653 s
Iteration  43: 5.661 s
Iteration  44: 5.666 s
Iteration  45: 5.665 s
Iteration  46: 5.666 s
Iteration  47: 5.668 s
Iteration  48: 5.654 s
Iteration  49: 5.663 s
Iteration  50: 5.673 s


Result: 5.677 ?(99.9%) 0.026 s [Average]
  Statistics: (min, avg, max) = (5.644, 5.677, 5.992), stdev = 0.052
  Confidence interval (99.9%): [5.651, 5.703]
  Samples, N = 50
        mean =      5.677 ?(99.9%) 0.026 s
         min =      5.644 s
  p( 0.0000) =      5.644 s
  p(50.0000) =      5.666 s
  p(90.0000) =      5.688 s
  p(95.0000) =      5.751 s
  p(99.0000) =      5.992 s
  p(99.9000) =      5.992 s
  p(99.9900) =      5.992 s
  p(99.9990) =      5.992 s
  p(99.9999) =      5.992 s
         max =      5.992 s


# Run complete. Total time: 00:04:44

Benchmark                                                                                  (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  5.677        0.026      s
{"wallclock_times": [284.831702172], "core_cycle_counts": [[290121030240], [176596435640], [240838755664], [213008136863]], "aperf_counts": [[289517858129], [176525515121], [240816810468], [212984754857]], "mperf_counts": [[289543809296], [176529561636], [240822066460], [212987028774]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 12:30:06: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:30:07: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 12:30:07: INFO] 240 executions left in scheduler queue
[2019-07-26 12:30:07: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:30:07: INFO] Estimated completion (next execution): 2019-07-26 12:37:22 (0:07:15 from now)
[2019-07-26 12:30:07: INFO] Reboot in preparation for next execution
[2019-07-26 12:37:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.173 s
Iteration   2: 3.669 s
Iteration   3: 3.636 s
Iteration   4: 3.655 s
Iteration   5: 3.630 s
Iteration   6: 3.629 s
Iteration   7: 3.678 s
Iteration   8: 3.624 s
Iteration   9: 3.690 s
Iteration  10: 3.626 s
Iteration  11: 3.632 s
Iteration  12: 3.691 s
Iteration  13: 3.633 s
Iteration  14: 3.618 s
Iteration  15: 3.690 s
Iteration  16: 3.629 s
Iteration  17: 3.633 s
Iteration  18: 3.698 s
Iteration  19: 3.637 s
Iteration  20: 3.644 s
Iteration  21: 3.637 s
Iteration  22: 3.703 s
Iteration  23: 3.648 s
Iteration  24: 3.632 s
Iteration  25: 3.685 s
Iteration  26: 3.638 s
Iteration  27: 3.644 s
Iteration  28: 3.622 s
Iteration  29: 3.694 s
Iteration  30: 3.647 s
Iteration  31: 3.634 s
Iteration  32: 3.692 s
Iteration  33: 3.634 s
Iteration  34: 3.638 s
Iteration  35: 3.639 s
Iteration  36: 3.700 s
Iteration  37: 3.641 s
Iteration  38: 3.649 s
Iteration  39: 3.706 s
Iteration  40: 3.628 s
Iteration  41: 3.638 s
Iteration  42: 3.630 s
Iteration  43: 3.693 s
Iteration  44: 3.648 s
Iteration  45: 3.630 s
Iteration  46: 3.632 s
Iteration  47: 3.636 s
Iteration  48: 3.632 s
Iteration  49: 3.644 s
Iteration  50: 3.749 s


Result: 3.663 ?(99.9%) 0.039 s [Average]
  Statistics: (min, avg, max) = (3.618, 3.663, 4.173), stdev = 0.079
  Confidence interval (99.9%): [3.624, 3.702]
  Samples, N = 50
        mean =      3.663 ?(99.9%) 0.039 s
         min =      3.618 s
  p( 0.0000) =      3.618 s
  p(50.0000) =      3.639 s
  p(90.0000) =      3.700 s
  p(95.0000) =      3.725 s
  p(99.0000) =      4.173 s
  p(99.9000) =      4.173 s
  p(99.9900) =      4.173 s
  p(99.9990) =      4.173 s
  p(99.9999) =      4.173 s
         max =      4.173 s


# Run complete. Total time: 00:03:04

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  3.663        0.039      s
{"wallclock_times": [184.35669934300003], "core_cycle_counts": [[238128097691], [141253441194], [160459568551], [124179942862]], "aperf_counts": [[237725558039], [141182354769], [160417231299], [124135682473]], "mperf_counts": [[237735842002], [141190974542], [160421502536], [124136175966]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 12:37:30: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:37:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 12:37:31: INFO] 239 executions left in scheduler queue
[2019-07-26 12:37:31: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:37:31: INFO] Estimated completion (next execution): 2019-07-26 12:43:05 (0:05:34 from now)
[2019-07-26 12:37:31: INFO] Reboot in preparation for next execution
[2019-07-26 12:50:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.609 s
Iteration   2: 10.429 s
Iteration   3: 10.303 s
Iteration   4: 10.368 s
Iteration   5: 10.329 s
Iteration   6: 10.353 s
Iteration   7: 10.346 s
Iteration   8: 10.349 s
Iteration   9: 10.340 s
Iteration  10: 10.312 s
Iteration  11: 10.359 s
Iteration  12: 10.356 s
Iteration  13: 10.297 s
Iteration  14: 10.287 s
Iteration  15: 10.317 s
Iteration  16: 10.311 s
Iteration  17: 10.349 s
Iteration  18: 10.312 s
Iteration  19: 10.320 s
Iteration  20: 10.332 s
Iteration  21: 10.375 s
Iteration  22: 10.309 s
Iteration  23: 10.373 s
Iteration  24: 10.321 s
Iteration  25: 10.538 s
Iteration  26: 10.338 s
Iteration  27: 10.301 s
Iteration  28: 10.360 s
Iteration  29: 10.360 s
Iteration  30: 10.365 s
Iteration  31: 10.310 s
Iteration  32: 10.275 s
Iteration  33: 10.348 s
Iteration  34: 10.376 s
Iteration  35: 10.364 s
Iteration  36: 10.355 s
Iteration  37: 10.335 s
Iteration  38: 10.343 s
Iteration  39: 10.304 s
Iteration  40: 10.316 s
Iteration  41: 10.329 s
Iteration  42: 10.343 s
Iteration  43: 10.298 s
Iteration  44: 10.316 s
Iteration  45: 10.360 s
Iteration  46: 10.350 s
Iteration  47: 10.311 s
Iteration  48: 10.313 s
Iteration  49: 10.298 s
Iteration  50: 10.327 s


Result: 10.344 ?(99.9%) 0.028 s [Average]
  Statistics: (min, avg, max) = (10.275, 10.344, 10.609), stdev = 0.056
  Confidence interval (99.9%): [10.316, 10.371]
  Samples, N = 50
        mean =     10.344 ?(99.9%) 0.028 s
         min =     10.275 s
  p( 0.0000) =     10.275 s
  p(50.0000) =     10.337 s
  p(90.0000) =     10.375 s
  p(95.0000) =     10.478 s
  p(99.0000) =     10.609 s
  p(99.9000) =     10.609 s
  p(99.9900) =     10.609 s
  p(99.9990) =     10.609 s
  p(99.9999) =     10.609 s
         max =     10.609 s


# Run complete. Total time: 00:08:38

Benchmark                                                                             (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  10.344        0.028      s
{"wallclock_times": [518.1743627650001], "core_cycle_counts": [[662907823115], [492191222431], [137080240884], [375838394088]], "aperf_counts": [[661948188647], [492119417621], [137005988221], [375789165782]], "mperf_counts": [[661963477166], [492125783842], [137006545970], [375789861492]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 12:50:26: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ce-19.1.1'
[2019-07-26 12:50:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 12:50:27: INFO] 238 executions left in scheduler queue
[2019-07-26 12:50:27: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-26 12:50:27: INFO] Estimated completion (next execution): 2019-07-26 13:01:36 (0:11:08 from now)
[2019-07-26 12:50:27: INFO] Reboot in preparation for next execution
[2019-07-26 12:56:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.806 s/op
Iteration   2: 1.601 s/op
Iteration   3: 1.583 s/op
Iteration   4: 1.670 s/op
Iteration   5: 1.579 s/op
Iteration   6: 1.585 s/op
Iteration   7: 1.574 s/op
Iteration   8: 1.588 s/op
Iteration   9: 1.579 s/op
Iteration  10: 1.578 s/op
Iteration  11: 1.588 s/op
Iteration  12: 1.572 s/op
Iteration  13: 1.581 s/op
Iteration  14: 1.572 s/op
Iteration  15: 1.581 s/op
Iteration  16: 1.583 s/op
Iteration  17: 1.583 s/op
Iteration  18: 1.581 s/op
Iteration  19: 1.588 s/op
Iteration  20: 1.577 s/op
Iteration  21: 1.581 s/op
Iteration  22: 1.578 s/op
Iteration  23: 1.591 s/op
Iteration  24: 1.577 s/op
Iteration  25: 1.578 s/op
Iteration  26: 1.581 s/op
Iteration  27: 1.581 s/op
Iteration  28: 1.582 s/op
Iteration  29: 1.577 s/op
Iteration  30: 1.584 s/op
Iteration  31: 1.572 s/op
Iteration  32: 1.575 s/op
Iteration  33: 1.581 s/op
Iteration  34: 1.577 s/op
Iteration  35: 1.577 s/op
Iteration  36: 1.578 s/op
Iteration  37: 1.579 s/op
Iteration  38: 1.579 s/op
Iteration  39: 1.572 s/op
Iteration  40: 1.579 s/op
Iteration  41: 1.575 s/op
Iteration  42: 1.573 s/op
Iteration  43: 1.573 s/op
Iteration  44: 1.580 s/op
Iteration  45: 1.604 s/op
Iteration  46: 1.580 s/op
Iteration  47: 1.585 s/op
Iteration  48: 1.589 s/op
Iteration  49: 1.584 s/op
Iteration  50: 1.581 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.587 ?(99.9%) 0.017 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 9 
    [1.575, 1.600) = 37 
    [1.600, 1.625) = 2 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.572 s/op
     p(50.0000) =      1.581 s/op
     p(90.0000) =      1.591 s/op
     p(95.0000) =      1.633 s/op
     p(99.0000) =      1.806 s/op
     p(99.9000) =      1.806 s/op
     p(99.9900) =      1.806 s/op
     p(99.9990) =      1.806 s/op
     p(99.9999) =      1.806 s/op
    p(100.0000) =      1.806 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.587 ? 0.017   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564138497960.json
{"wallclock_times": [80.255344052], "core_cycle_counts": [[55719227091], [43560770904], [88985574008], [79213125840]], "aperf_counts": [[55437829294], [43532583223], [88966807219], [79192942295]], "mperf_counts": [[55455907188], [43532889134], [88968680362], [79202802628]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 12:56:18: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-26 12:56:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 12:56:19: INFO] 237 executions left in scheduler queue
[2019-07-26 12:56:19: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-26 12:56:19: INFO] Estimated completion (next execution): 2019-07-26 13:00:09 (0:03:50 from now)
[2019-07-26 12:56:19: INFO] Reboot in preparation for next execution
[2019-07-26 13:01:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.612 s/op
Iteration   2: 1.361 s/op
Iteration   3: 1.317 s/op
Iteration   4: 1.519 s/op
Iteration   5: 1.313 s/op
Iteration   6: 1.311 s/op
Iteration   7: 1.309 s/op
Iteration   8: 1.313 s/op
Iteration   9: 1.309 s/op
Iteration  10: 1.312 s/op
Iteration  11: 1.310 s/op
Iteration  12: 1.309 s/op
Iteration  13: 1.314 s/op
Iteration  14: 1.311 s/op
Iteration  15: 1.311 s/op
Iteration  16: 1.311 s/op
Iteration  17: 1.311 s/op
Iteration  18: 1.308 s/op
Iteration  19: 1.308 s/op
Iteration  20: 1.308 s/op
Iteration  21: 1.309 s/op
Iteration  22: 1.308 s/op
Iteration  23: 1.313 s/op
Iteration  24: 1.309 s/op
Iteration  25: 1.307 s/op
Iteration  26: 1.309 s/op
Iteration  27: 1.309 s/op
Iteration  28: 1.310 s/op
Iteration  29: 1.308 s/op
Iteration  30: 1.310 s/op
Iteration  31: 1.308 s/op
Iteration  32: 1.310 s/op
Iteration  33: 1.311 s/op
Iteration  34: 1.312 s/op
Iteration  35: 1.310 s/op
Iteration  36: 1.308 s/op
Iteration  37: 1.307 s/op
Iteration  38: 1.310 s/op
Iteration  39: 1.309 s/op
Iteration  40: 1.307 s/op
Iteration  41: 1.307 s/op
Iteration  42: 1.308 s/op
Iteration  43: 1.310 s/op
Iteration  44: 1.313 s/op
Iteration  45: 1.308 s/op
Iteration  46: 1.310 s/op
Iteration  47: 1.309 s/op
Iteration  48: 1.309 s/op
Iteration  49: 1.310 s/op
Iteration  50: 1.310 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.321 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.300, 1.325) = 47 
    [1.325, 1.350) = 0 
    [1.350, 1.375) = 1 
    [1.375, 1.400) = 0 
    [1.400, 1.425) = 0 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 1 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 1 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.307 s/op
     p(50.0000) =      1.310 s/op
     p(90.0000) =      1.314 s/op
     p(95.0000) =      1.432 s/op
     p(99.0000) =      1.612 s/op
     p(99.9000) =      1.612 s/op
     p(99.9900) =      1.612 s/op
     p(99.9990) =      1.612 s/op
     p(99.9999) =      1.612 s/op
    p(100.0000) =      1.612 s/op


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.321 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564138834576.json
{"wallclock_times": [66.88326597400001], "core_cycle_counts": [[71371529947], [22946184715], [86843660408], [42912958750]], "aperf_counts": [[71230309931], [22923155475], [86831802394], [42900321871]], "mperf_counts": [[71249695608], [22936677682], [86832263046], [42901884816]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 13:01:41: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ce-19.1.1'
[2019-07-26 13:01:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 13:01:42: INFO] 236 executions left in scheduler queue
[2019-07-26 13:01:42: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-07-26 13:01:42: INFO] Estimated completion (next execution): 2019-07-26 13:05:19 (0:03:37 from now)
[2019-07-26 13:01:42: INFO] Reboot in preparation for next execution
[2019-07-26 13:15:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.325 s/op
Iteration   2: 11.363 s/op
Iteration   3: 10.937 s/op
Iteration   4: 11.066 s/op
Iteration   5: 11.170 s/op
Iteration   6: 11.041 s/op
Iteration   7: 11.105 s/op
Iteration   8: 11.030 s/op
Iteration   9: 10.957 s/op
Iteration  10: 11.073 s/op
Iteration  11: 11.054 s/op
Iteration  12: 12.025 s/op
Iteration  13: 11.118 s/op
Iteration  14: 11.156 s/op
Iteration  15: 11.073 s/op
Iteration  16: 10.939 s/op
Iteration  17: 10.978 s/op
Iteration  18: 11.018 s/op
Iteration  19: 10.980 s/op
Iteration  20: 11.004 s/op
Iteration  21: 11.083 s/op
Iteration  22: 11.124 s/op
Iteration  23: 11.695 s/op
Iteration  24: 11.123 s/op
Iteration  25: 11.100 s/op
Iteration  26: 10.973 s/op
Iteration  27: 11.002 s/op
Iteration  28: 10.925 s/op
Iteration  29: 11.050 s/op
Iteration  30: 11.023 s/op
Iteration  31: 11.034 s/op
Iteration  32: 11.091 s/op
Iteration  33: 11.105 s/op
Iteration  34: 11.680 s/op
Iteration  35: 11.135 s/op
Iteration  36: 11.134 s/op
Iteration  37: 11.117 s/op
Iteration  38: 10.945 s/op
Iteration  39: 10.932 s/op
Iteration  40: 11.033 s/op
Iteration  41: 10.987 s/op
Iteration  42: 11.013 s/op
Iteration  43: 11.066 s/op
Iteration  44: 11.094 s/op
Iteration  45: 11.691 s/op
Iteration  46: 11.094 s/op
Iteration  47: 11.124 s/op
Iteration  48: 11.118 s/op
Iteration  49: 10.962 s/op
Iteration  50: 10.934 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     11.116 ?(99.9%) 0.108 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 0 
    [10.750, 11.000) = 12 
    [11.000, 11.250) = 32 
    [11.250, 11.500) = 2 
    [11.500, 11.750) = 3 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 1 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.925 s/op
     p(50.0000) =     11.069 s/op
     p(90.0000) =     11.359 s/op
     p(95.0000) =     11.693 s/op
     p(99.0000) =     12.025 s/op
     p(99.9000) =     12.025 s/op
     p(99.9900) =     12.025 s/op
     p(99.9990) =     12.025 s/op
     p(99.9999) =     12.025 s/op
    p(100.0000) =     12.025 s/op


# Run complete. Total time: 00:09:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.116 ? 0.108   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564139158584.json
{"wallclock_times": [556.711681624], "core_cycle_counts": [[462594205987], [533038877770], [521983773885], [550215816254]], "aperf_counts": [[461035346488], [532892188701], [521909552438], [550142009107]], "mperf_counts": [[461040465806], [532892814322], [521918324144], [550142813738]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 13:15:15: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot-8u222-b10'
[2019-07-26 13:15:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 13:15:16: INFO] 235 executions left in scheduler queue
[2019-07-26 13:15:16: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-26 13:15:16: INFO] Estimated completion (next execution): 2019-07-26 13:27:03 (0:11:46 from now)
[2019-07-26 13:15:16: INFO] Reboot in preparation for next execution
[2019-07-26 13:19:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 13:19:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 13:19:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 13:19:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 13:19:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 13:21:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.381 s/op
Iteration   2: 2.336 s/op
Iteration   3: 1.913 s/op
Iteration   4: 1.877 s/op
Iteration   5: 2.021 s/op
Iteration   6: 2.005 s/op
Iteration   7: 2.026 s/op
Iteration   8: 2.013 s/op
Iteration   9: 1.990 s/op
Iteration  10: 2.019 s/op
Iteration  11: 2.009 s/op
Iteration  12: 1.995 s/op
Iteration  13: 2.003 s/op
Iteration  14: 2.000 s/op
Iteration  15: 2.000 s/op
Iteration  16: 2.004 s/op
Iteration  17: 2.006 s/op
Iteration  18: 2.007 s/op
Iteration  19: 2.001 s/op
Iteration  20: 2.000 s/op
Iteration  21: 2.002 s/op
Iteration  22: 2.001 s/op
Iteration  23: 1.998 s/op
Iteration  24: 1.999 s/op
Iteration  25: 2.002 s/op
Iteration  26: 2.001 s/op
Iteration  27: 1.996 s/op
Iteration  28: 1.985 s/op
Iteration  29: 1.999 s/op
Iteration  30: 1.997 s/op
Iteration  31: 2.000 s/op
Iteration  32: 2.003 s/op
Iteration  33: 1.998 s/op
Iteration  34: 1.993 s/op
Iteration  35: 2.004 s/op
Iteration  36: 1.991 s/op
Iteration  37: 2.002 s/op
Iteration  38: 1.994 s/op
Iteration  39: 1.995 s/op
Iteration  40: 2.000 s/op
Iteration  41: 1.993 s/op
Iteration  42: 1.981 s/op
Iteration  43: 1.998 s/op
Iteration  44: 2.001 s/op
Iteration  45: 1.994 s/op
Iteration  46: 2.003 s/op
Iteration  47: 1.999 s/op
Iteration  48: 1.998 s/op
Iteration  49: 1.978 s/op
Iteration  50: 2.002 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.010 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 21 
    [2.000, 2.050) = 25 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.877 s/op
     p(50.0000) =      2.000 s/op
     p(90.0000) =      2.019 s/op
     p(95.0000) =      2.166 s/op
     p(99.0000) =      2.381 s/op
     p(99.9000) =      2.381 s/op
     p(99.9900) =      2.381 s/op
     p(99.9990) =      2.381 s/op
     p(99.9999) =      2.381 s/op
    p(100.0000) =      2.381 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.010 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564139973456.json
{"wallclock_times": [101.51999593800002], "core_cycle_counts": [[60956151707], [18328327434], [143282353932], [78147222552]], "aperf_counts": [[60621773488], [18287929687], [143267195003], [78129093630]], "mperf_counts": [[68795979244], [20172027146], [162758957312], [88649419762]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 13:21:14: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-26 13:21:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 13:21:15: INFO] 234 executions left in scheduler queue
[2019-07-26 13:21:15: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-26 13:21:15: INFO] Estimated completion (next execution): 2019-07-26 13:25:27 (0:04:11 from now)
[2019-07-26 13:21:15: INFO] Reboot in preparation for next execution
[2019-07-26 13:25:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 13:25:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 13:25:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 13:25:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 13:25:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 13:26:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.911 s/op
Iteration   2: 1.639 s/op
Iteration   3: 1.871 s/op
Iteration   4: 1.802 s/op
Iteration   5: 1.877 s/op
Iteration   6: 1.930 s/op
Iteration   7: 1.827 s/op
Iteration   8: 1.725 s/op
Iteration   9: 1.727 s/op
Iteration  10: 1.725 s/op
Iteration  11: 1.724 s/op
Iteration  12: 1.725 s/op
Iteration  13: 1.725 s/op
Iteration  14: 1.724 s/op
Iteration  15: 1.723 s/op
Iteration  16: 1.726 s/op
Iteration  17: 1.726 s/op
Iteration  18: 1.727 s/op
Iteration  19: 1.729 s/op
Iteration  20: 1.725 s/op
Iteration  21: 1.728 s/op
Iteration  22: 1.726 s/op
Iteration  23: 1.727 s/op
Iteration  24: 1.726 s/op
Iteration  25: 1.724 s/op
Iteration  26: 1.724 s/op
Iteration  27: 1.726 s/op
Iteration  28: 1.726 s/op
Iteration  29: 1.725 s/op
Iteration  30: 1.723 s/op
Iteration  31: 1.724 s/op
Iteration  32: 1.723 s/op
Iteration  33: 1.722 s/op
Iteration  34: 1.722 s/op
Iteration  35: 1.724 s/op
Iteration  36: 1.724 s/op
Iteration  37: 1.723 s/op
Iteration  38: 1.722 s/op
Iteration  39: 1.721 s/op
Iteration  40: 1.719 s/op
Iteration  41: 1.720 s/op
Iteration  42: 1.721 s/op
Iteration  43: 1.720 s/op
Iteration  44: 1.723 s/op
Iteration  45: 1.722 s/op
Iteration  46: 1.719 s/op
Iteration  47: 1.722 s/op
Iteration  48: 1.720 s/op
Iteration  49: 1.724 s/op
Iteration  50: 1.717 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.740 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 1 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 30 
    [1.725, 1.750) = 13 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 1 
    [1.850, 1.875) = 1 
    [1.875, 1.900) = 1 
    [1.900, 1.925) = 1 
    [1.925, 1.950) = 1 
    [1.950, 1.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.639 s/op
     p(50.0000) =      1.724 s/op
     p(90.0000) =      1.825 s/op
     p(95.0000) =      1.892 s/op
     p(99.0000) =      1.930 s/op
     p(99.9000) =      1.930 s/op
     p(99.9900) =      1.930 s/op
     p(99.9990) =      1.930 s/op
     p(99.9999) =      1.930 s/op
    p(100.0000) =      1.930 s/op


# Run complete. Total time: 00:01:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.740 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564140332063.json
{"wallclock_times": [87.92112112500001], "core_cycle_counts": [[70358573664], [41609342595], [67387274839], [108871943121]], "aperf_counts": [[70126460732], [41573604952], [67369127169], [108853515144]], "mperf_counts": [[70735473124], [41802840240], [67739096278], [109474062894]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 13:26:59: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_12.0.2'
[2019-07-26 13:27:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 13:27:00: INFO] 233 executions left in scheduler queue
[2019-07-26 13:27:00: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-07-26 13:27:00: INFO] Estimated completion (next execution): 2019-07-26 13:30:59 (0:03:58 from now)
[2019-07-26 13:27:00: INFO] Reboot in preparation for next execution
[2019-07-26 13:41:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.563 s/op
Iteration   2: 12.131 s/op
Iteration   3: 12.270 s/op
Iteration   4: 12.226 s/op
Iteration   5: 12.242 s/op
Iteration   6: 12.393 s/op
Iteration   7: 12.133 s/op
Iteration   8: 12.243 s/op
Iteration   9: 12.147 s/op
Iteration  10: 12.247 s/op
Iteration  11: 12.135 s/op
Iteration  12: 12.718 s/op
Iteration  13: 12.061 s/op
Iteration  14: 12.228 s/op
Iteration  15: 12.189 s/op
Iteration  16: 12.236 s/op
Iteration  17: 12.114 s/op
Iteration  18: 12.461 s/op
Iteration  19: 12.185 s/op
Iteration  20: 12.439 s/op
Iteration  21: 12.124 s/op
Iteration  22: 12.455 s/op
Iteration  23: 12.721 s/op
Iteration  24: 12.407 s/op
Iteration  25: 12.072 s/op
Iteration  26: 12.415 s/op
Iteration  27: 12.091 s/op
Iteration  28: 12.263 s/op
Iteration  29: 12.116 s/op
Iteration  30: 12.202 s/op
Iteration  31: 12.303 s/op
Iteration  32: 12.231 s/op
Iteration  33: 12.382 s/op
Iteration  34: 12.714 s/op
Iteration  35: 12.334 s/op
Iteration  36: 12.163 s/op
Iteration  37: 12.286 s/op
Iteration  38: 12.162 s/op
Iteration  39: 12.324 s/op
Iteration  40: 12.227 s/op
Iteration  41: 12.323 s/op
Iteration  42: 12.221 s/op
Iteration  43: 12.329 s/op
Iteration  44: 12.234 s/op
Iteration  45: 12.970 s/op
Iteration  46: 12.216 s/op
Iteration  47: 12.258 s/op
Iteration  48: 12.159 s/op
Iteration  49: 12.309 s/op
Iteration  50: 12.183 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     12.291 ?(99.9%) 0.091 s/op

  Histogram, s/op:
    [12.000, 12.100) = 3 
    [12.100, 12.200) = 13 
    [12.200, 12.300) = 16 
    [12.300, 12.400) = 8 
    [12.400, 12.500) = 5 
    [12.500, 12.600) = 1 
    [12.600, 12.700) = 0 
    [12.700, 12.800) = 3 
    [12.800, 12.900) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.061 s/op
     p(50.0000) =     12.239 s/op
     p(90.0000) =     12.553 s/op
     p(95.0000) =     12.719 s/op
     p(99.0000) =     12.970 s/op
     p(99.9000) =     12.970 s/op
     p(99.9900) =     12.970 s/op
     p(99.9990) =     12.970 s/op
     p(99.9999) =     12.970 s/op
    p(100.0000) =     12.970 s/op


# Run complete. Total time: 00:10:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.291 ? 0.091   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564140675531.json
{"wallclock_times": [615.696903597], "core_cycle_counts": [[656907025273], [592384473053], [588941911604], [435524500408]], "aperf_counts": [[655374902995], [592220545588], [588826941778], [435420591587]], "mperf_counts": [[655380979596], [592222081618], [588827016322], [435428696122]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 13:41:31: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot-8u222-b10'
[2019-07-26 13:41:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 13:41:32: INFO] 232 executions left in scheduler queue
[2019-07-26 13:41:32: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-26 13:41:32: INFO] Estimated completion (next execution): 2019-07-26 13:54:18 (0:12:45 from now)
[2019-07-26 13:41:32: INFO] Reboot in preparation for next execution
[2019-07-26 13:45:48: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 13:47:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.662 s/op
Iteration   2: 2.080 s/op
Iteration   3: 2.129 s/op
Iteration   4: 2.032 s/op
Iteration   5: 2.028 s/op
Iteration   6: 1.960 s/op
Iteration   7: 1.914 s/op
Iteration   8: 1.946 s/op
Iteration   9: 1.936 s/op
Iteration  10: 1.953 s/op
Iteration  11: 1.969 s/op
Iteration  12: 1.941 s/op
Iteration  13: 1.972 s/op
Iteration  14: 1.951 s/op
Iteration  15: 1.963 s/op
Iteration  16: 1.944 s/op
Iteration  17: 1.972 s/op
Iteration  18: 1.946 s/op
Iteration  19: 1.969 s/op
Iteration  20: 1.935 s/op
Iteration  21: 1.978 s/op
Iteration  22: 1.948 s/op
Iteration  23: 1.973 s/op
Iteration  24: 1.969 s/op
Iteration  25: 1.991 s/op
Iteration  26: 1.959 s/op
Iteration  27: 1.936 s/op
Iteration  28: 1.986 s/op
Iteration  29: 1.968 s/op
Iteration  30: 1.984 s/op
Iteration  31: 1.948 s/op
Iteration  32: 1.988 s/op
Iteration  33: 1.987 s/op
Iteration  34: 1.978 s/op
Iteration  35: 1.953 s/op
Iteration  36: 1.998 s/op
Iteration  37: 1.982 s/op
Iteration  38: 1.989 s/op
Iteration  39: 1.973 s/op
Iteration  40: 1.962 s/op
Iteration  41: 1.971 s/op
Iteration  42: 1.960 s/op
Iteration  43: 1.929 s/op
Iteration  44: 1.989 s/op
Iteration  45: 1.951 s/op
Iteration  46: 1.987 s/op
Iteration  47: 1.938 s/op
Iteration  48: 1.936 s/op
Iteration  49: 1.957 s/op
Iteration  50: 1.981 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.985 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [1.900, 1.950) = 13 
    [1.950, 2.000) = 32 
    [2.000, 2.050) = 2 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 1 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.914 s/op
     p(50.0000) =      1.969 s/op
     p(90.0000) =      2.025 s/op
     p(95.0000) =      2.102 s/op
     p(99.0000) =      2.662 s/op
     p(99.9000) =      2.662 s/op
     p(99.9900) =      2.662 s/op
     p(99.9990) =      2.662 s/op
     p(99.9999) =      2.662 s/op
    p(100.0000) =      2.662 s/op


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.985 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564141548642.json
{"wallclock_times": [100.51892595799998], "core_cycle_counts": [[90305224852], [112940315469], [72669645143], [66667962539]], "aperf_counts": [[89945151369], [112874578448], [72605483816], [66628327519]], "mperf_counts": [[89948528874], [112874581158], [72605486586], [66628337536]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 13:47:29: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-26 13:47:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 13:47:29: INFO] 231 executions left in scheduler queue
[2019-07-26 13:47:29: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-26 13:47:29: INFO] Estimated completion (next execution): 2019-07-26 13:51:40 (0:04:10 from now)
[2019-07-26 13:47:29: INFO] Reboot in preparation for next execution
[2019-07-26 13:51:46: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 13:53:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.095 s/op
Iteration   2: 2.602 s/op
Iteration   3: 2.524 s/op
Iteration   4: 2.448 s/op
Iteration   5: 2.367 s/op
Iteration   6: 2.365 s/op
Iteration   7: 2.412 s/op
Iteration   8: 2.397 s/op
Iteration   9: 2.425 s/op
Iteration  10: 2.354 s/op
Iteration  11: 2.364 s/op
Iteration  12: 2.390 s/op
Iteration  13: 2.367 s/op
Iteration  14: 2.358 s/op
Iteration  15: 2.312 s/op
Iteration  16: 2.357 s/op
Iteration  17: 2.375 s/op
Iteration  18: 2.339 s/op
Iteration  19: 2.392 s/op
Iteration  20: 2.332 s/op
Iteration  21: 2.359 s/op
Iteration  22: 2.356 s/op
Iteration  23: 2.387 s/op
Iteration  24: 2.371 s/op
Iteration  25: 2.307 s/op
Iteration  26: 2.318 s/op
Iteration  27: 2.329 s/op
Iteration  28: 2.334 s/op
Iteration  29: 2.308 s/op
Iteration  30: 2.313 s/op
Iteration  31: 2.312 s/op
Iteration  32: 2.328 s/op
Iteration  33: 2.307 s/op
Iteration  34: 2.324 s/op
Iteration  35: 2.314 s/op
Iteration  36: 2.317 s/op
Iteration  37: 2.313 s/op
Iteration  38: 2.327 s/op
Iteration  39: 2.326 s/op
Iteration  40: 2.321 s/op
Iteration  41: 2.322 s/op
Iteration  42: 2.308 s/op
Iteration  43: 2.311 s/op
Iteration  44: 2.323 s/op
Iteration  45: 2.311 s/op
Iteration  46: 2.310 s/op
Iteration  47: 2.322 s/op
Iteration  48: 2.320 s/op
Iteration  49: 2.313 s/op
Iteration  50: 2.315 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.366 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [2.300, 2.350) = 29 
    [2.350, 2.400) = 15 
    [2.400, 2.450) = 3 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.307 s/op
     p(50.0000) =      2.328 s/op
     p(90.0000) =      2.424 s/op
     p(95.0000) =      2.559 s/op
     p(99.0000) =      3.095 s/op
     p(99.9000) =      3.095 s/op
     p(99.9900) =      3.095 s/op
     p(99.9990) =      3.095 s/op
     p(99.9999) =      3.095 s/op
    p(100.0000) =      3.095 s/op


# Run complete. Total time: 00:01:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.366 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564141906714.json
{"wallclock_times": [119.427902324], "core_cycle_counts": [[114623776530], [78366389863], [107367252076], [106037332416]], "aperf_counts": [[114307500747], [78304193361], [107325185483], [106004669099]], "mperf_counts": [[114307730522], [78304177556], [107325183282], [106004671954]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 13:53:46: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9-8u222-b10'
[2019-07-26 13:53:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 13:53:47: INFO] 230 executions left in scheduler queue
[2019-07-26 13:53:47: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 13:53:47: INFO] Estimated completion (next execution): 2019-07-26 13:58:16 (0:04:29 from now)
[2019-07-26 13:53:47: INFO] Reboot in preparation for next execution
[2019-07-26 14:04:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.811 s
Iteration   2: 6.810 s
Iteration   3: 6.918 s
Iteration   4: 7.132 s
Iteration   5: 7.011 s
Iteration   6: 6.900 s
Iteration   7: 6.915 s
Iteration   8: 6.907 s
Iteration   9: 6.905 s
Iteration  10: 6.911 s
Iteration  11: 6.896 s
Iteration  12: 6.888 s
Iteration  13: 6.895 s
Iteration  14: 6.910 s
Iteration  15: 6.870 s
Iteration  16: 6.897 s
Iteration  17: 6.993 s
Iteration  18: 6.883 s
Iteration  19: 6.928 s
Iteration  20: 6.897 s
Iteration  21: 6.901 s
Iteration  22: 6.897 s
Iteration  23: 6.681 s
Iteration  24: 6.931 s
Iteration  25: 7.139 s
Iteration  26: 6.902 s
Iteration  27: 6.919 s
Iteration  28: 6.921 s
Iteration  29: 6.917 s
Iteration  30: 6.897 s
Iteration  31: 6.915 s
Iteration  32: 6.898 s
Iteration  33: 6.917 s
Iteration  34: 6.936 s
Iteration  35: 6.914 s
Iteration  36: 6.927 s
Iteration  37: 6.924 s
Iteration  38: 6.918 s
Iteration  39: 7.096 s
Iteration  40: 6.939 s
Iteration  41: 6.939 s
Iteration  42: 6.920 s
Iteration  43: 6.902 s
Iteration  44: 6.917 s
Iteration  45: 6.910 s
Iteration  46: 6.883 s
Iteration  47: 7.066 s
Iteration  48: 6.915 s
Iteration  49: 6.880 s
Iteration  50: 7.224 s


Result: 6.926 ?(99.9%) 0.042 s [Average]
  Statistics: (min, avg, max) = (6.681, 6.926, 7.224), stdev = 0.084
  Confidence interval (99.9%): [6.885, 6.968]
  Samples, N = 50
        mean =      6.926 ?(99.9%) 0.042 s
         min =      6.681 s
  p( 0.0000) =      6.681 s
  p(50.0000) =      6.915 s
  p(90.0000) =      7.060 s
  p(95.0000) =      7.136 s
  p(99.0000) =      7.224 s
  p(99.9000) =      7.224 s
  p(99.9900) =      7.224 s
  p(99.9990) =      7.224 s
  p(99.9999) =      7.224 s
         max =      7.224 s


# Run complete. Total time: 00:05:47

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  6.926        0.042      s
{"wallclock_times": [347.476343885], "core_cycle_counts": [[376888838365], [139750660699], [354602401184], [123809909456]], "aperf_counts": [[376184217589], [139638335497], [354562019550], [123757176733]], "mperf_counts": [[428101606956], [156468506262], [403816425686], [140566533470]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 14:04:04: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 14:04:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 14:04:05: INFO] 229 executions left in scheduler queue
[2019-07-26 14:04:05: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 14:04:05: INFO] Estimated completion (next execution): 2019-07-26 14:12:23 (0:08:17 from now)
[2019-07-26 14:04:05: INFO] Reboot in preparation for next execution
[2019-07-26 14:17:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.621 s
Iteration   2: 10.845 s
Iteration   3: 10.655 s
Iteration   4: 10.452 s
Iteration   5: 10.445 s
Iteration   6: 10.437 s
Iteration   7: 10.435 s
Iteration   8: 10.442 s
Iteration   9: 10.456 s
Iteration  10: 10.456 s
Iteration  11: 10.444 s
Iteration  12: 10.436 s
Iteration  13: 10.448 s
Iteration  14: 10.448 s
Iteration  15: 10.442 s
Iteration  16: 10.419 s
Iteration  17: 10.443 s
Iteration  18: 10.443 s
Iteration  19: 10.440 s
Iteration  20: 10.451 s
Iteration  21: 10.439 s
Iteration  22: 10.437 s
Iteration  23: 10.458 s
Iteration  24: 10.434 s
Iteration  25: 10.422 s
Iteration  26: 10.446 s
Iteration  27: 10.419 s
Iteration  28: 10.431 s
Iteration  29: 10.449 s
Iteration  30: 10.446 s
Iteration  31: 10.457 s
Iteration  32: 10.433 s
Iteration  33: 10.445 s
Iteration  34: 10.420 s
Iteration  35: 10.434 s
Iteration  36: 10.417 s
Iteration  37: 10.449 s
Iteration  38: 10.430 s
Iteration  39: 10.447 s
Iteration  40: 10.445 s
Iteration  41: 10.438 s
Iteration  42: 10.437 s
Iteration  43: 10.455 s
Iteration  44: 10.458 s
Iteration  45: 10.441 s
Iteration  46: 10.436 s
Iteration  47: 10.425 s
Iteration  48: 10.437 s
Iteration  49: 10.437 s
Iteration  50: 10.440 s


Result: 10.456 ?(99.9%) 0.034 s [Average]
  Statistics: (min, avg, max) = (10.417, 10.456, 10.845), stdev = 0.069
  Confidence interval (99.9%): [10.422, 10.491]
  Samples, N = 50
        mean =     10.456 ?(99.9%) 0.034 s
         min =     10.417 s
  p( 0.0000) =     10.417 s
  p(50.0000) =     10.442 s
  p(90.0000) =     10.458 s
  p(95.0000) =     10.636 s
  p(99.0000) =     10.845 s
  p(99.9000) =     10.845 s
  p(99.9900) =     10.845 s
  p(99.9990) =     10.845 s
  p(99.9999) =     10.845 s
         max =     10.845 s


# Run complete. Total time: 00:08:43

Benchmark                                                                                  (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  10.456        0.034      s
{"wallclock_times": [523.8460736119999], "core_cycle_counts": [[355157607471], [307786624095], [797487951266], [231278771643]], "aperf_counts": [[353827820210], [307678441751], [797443908410], [231216778813]], "mperf_counts": [[354085171606], [307760459858], [797482396184], [231274923480]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 14:17:05: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 14:17:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 14:17:06: INFO] 228 executions left in scheduler queue
[2019-07-26 14:17:06: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 14:17:06: INFO] Estimated completion (next execution): 2019-07-26 14:28:20 (0:11:14 from now)
[2019-07-26 14:17:06: INFO] Reboot in preparation for next execution
[2019-07-26 14:27:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.187 s
Iteration   2: 6.971 s
Iteration   3: 7.036 s
Iteration   4: 6.691 s
Iteration   5: 6.702 s
Iteration   6: 6.736 s
Iteration   7: 6.760 s
Iteration   8: 6.624 s
Iteration   9: 6.752 s
Iteration  10: 6.772 s
Iteration  11: 6.647 s
Iteration  12: 6.758 s
Iteration  13: 6.632 s
Iteration  14: 6.769 s
Iteration  15: 6.770 s
Iteration  16: 6.632 s
Iteration  17: 6.810 s
Iteration  18: 6.639 s
Iteration  19: 6.768 s
Iteration  20: 6.779 s
Iteration  21: 6.632 s
Iteration  22: 6.759 s
Iteration  23: 6.772 s
Iteration  24: 6.634 s
Iteration  25: 6.738 s
Iteration  26: 6.720 s
Iteration  27: 6.731 s
Iteration  28: 6.709 s
Iteration  29: 6.703 s
Iteration  30: 6.713 s
Iteration  31: 6.691 s
Iteration  32: 6.782 s
Iteration  33: 6.679 s
Iteration  34: 6.615 s
Iteration  35: 6.755 s
Iteration  36: 6.765 s
Iteration  37: 6.630 s
Iteration  38: 6.755 s
Iteration  39: 6.633 s
Iteration  40: 6.769 s
Iteration  41: 6.657 s
Iteration  42: 6.769 s
Iteration  43: 6.758 s
Iteration  44: 6.616 s
Iteration  45: 6.758 s
Iteration  46: 6.645 s
Iteration  47: 6.763 s
Iteration  48: 6.749 s
Iteration  49: 6.616 s
Iteration  50: 6.717 s


Result: 6.733 ?(99.9%) 0.052 s [Average]
  Statistics: (min, avg, max) = (6.615, 6.733, 7.187), stdev = 0.105
  Confidence interval (99.9%): [6.682, 6.785]
  Samples, N = 50
        mean =      6.733 ?(99.9%) 0.052 s
         min =      6.615 s
  p( 0.0000) =      6.615 s
  p(50.0000) =      6.737 s
  p(90.0000) =      6.782 s
  p(95.0000) =      7.001 s
  p(99.0000) =      7.187 s
  p(99.9000) =      7.187 s
  p(99.9900) =      7.187 s
  p(99.9990) =      7.187 s
  p(99.9999) =      7.187 s
         max =      7.187 s


# Run complete. Total time: 00:05:37

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.733        0.052      s
{"wallclock_times": [337.83057032], "core_cycle_counts": [[206311326874], [324873843962], [422034304034], [249205187366]], "aperf_counts": [[205351897063], [324805179788], [421995757103], [249175503974]], "mperf_counts": [[205919706792], [325575487762], [422167267052], [249443139326]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 14:27:00: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 14:27:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 14:27:01: INFO] 227 executions left in scheduler queue
[2019-07-26 14:27:01: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 14:27:01: INFO] Estimated completion (next execution): 2019-07-26 14:35:09 (0:08:08 from now)
[2019-07-26 14:27:01: INFO] Reboot in preparation for next execution
[2019-07-26 14:44:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.539 s
Iteration   2: 16.704 s
Iteration   3: 16.488 s
Iteration   4: 16.568 s
Iteration   5: 16.359 s
Iteration   6: 16.492 s
Iteration   7: 16.445 s
Iteration   8: 16.357 s
Iteration   9: 16.364 s
Iteration  10: 16.411 s
Iteration  11: 16.393 s
Iteration  12: 16.420 s
Iteration  13: 16.385 s
Iteration  14: 16.398 s
Iteration  15: 16.383 s
Iteration  16: 16.903 s
Iteration  17: 16.364 s
Iteration  18: 16.369 s
Iteration  19: 16.402 s
Iteration  20: 16.339 s
Iteration  21: 16.373 s
Iteration  22: 16.378 s
Iteration  23: 16.384 s
Iteration  24: 16.357 s
Iteration  25: 16.379 s
Iteration  26: 16.394 s
Iteration  27: 16.395 s
Iteration  28: 16.315 s
Iteration  29: 16.369 s
Iteration  30: 16.364 s
Iteration  31: 16.359 s
Iteration  32: 16.361 s
Iteration  33: 16.370 s
Iteration  34: 16.396 s
Iteration  35: 16.370 s
Iteration  36: 16.388 s
Iteration  37: 16.360 s
Iteration  38: 16.397 s
Iteration  39: 16.421 s
Iteration  40: 16.360 s
Iteration  41: 16.394 s
Iteration  42: 16.409 s
Iteration  43: 16.363 s
Iteration  44: 16.343 s
Iteration  45: 16.422 s
Iteration  46: 16.385 s
Iteration  47: 16.426 s
Iteration  48: 16.352 s
Iteration  49: 16.433 s
Iteration  50: 16.383 s


Result: 16.410 ?(99.9%) 0.047 s [Average]
  Statistics: (min, avg, max) = (16.315, 16.410, 16.903), stdev = 0.096
  Confidence interval (99.9%): [16.362, 16.457]
  Samples, N = 50
        mean =     16.410 ?(99.9%) 0.047 s
         min =     16.315 s
  p( 0.0000) =     16.315 s
  p(50.0000) =     16.385 s
  p(90.0000) =     16.492 s
  p(95.0000) =     16.629 s
  p(99.0000) =     16.903 s
  p(99.9000) =     16.903 s
  p(99.9900) =     16.903 s
  p(99.9990) =     16.903 s
  p(99.9999) =     16.903 s
         max =     16.903 s


# Run complete. Total time: 00:13:41

Benchmark                                                                             (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  16.410        0.047      s
{"wallclock_times": [821.573590963], "core_cycle_counts": [[595130488647], [642935537469], [701534857036], [709394165273]], "aperf_counts": [[593099848726], [642796827861], [701452594224], [709333106754]], "mperf_counts": [[593805260218], [642896534300], [701583792398], [709448723672]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 14:44:59: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_12.0.2'
[2019-07-26 14:45:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 14:45:00: INFO] 226 executions left in scheduler queue
[2019-07-26 14:45:00: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-07-26 14:45:00: INFO] Estimated completion (next execution): 2019-07-26 15:01:12 (0:16:11 from now)
[2019-07-26 14:45:00: INFO] Reboot in preparation for next execution
[2019-07-26 14:53:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.507 s/op
Iteration   2: 5.258 s/op
Iteration   3: 5.390 s/op
Iteration   4: 5.276 s/op
Iteration   5: 5.343 s/op
Iteration   6: 5.113 s/op
Iteration   7: 5.279 s/op
Iteration   8: 5.177 s/op
Iteration   9: 5.071 s/op
Iteration  10: 5.224 s/op
Iteration  11: 5.111 s/op
Iteration  12: 6.450 s/op
Iteration  13: 5.068 s/op
Iteration  14: 5.127 s/op
Iteration  15: 5.133 s/op
Iteration  16: 5.146 s/op
Iteration  17: 5.127 s/op
Iteration  18: 5.131 s/op
Iteration  19: 5.102 s/op
Iteration  20: 5.303 s/op
Iteration  21: 5.158 s/op
Iteration  22: 5.169 s/op
Iteration  23: 6.169 s/op
Iteration  24: 5.071 s/op
Iteration  25: 5.137 s/op
Iteration  26: 5.163 s/op
Iteration  27: 5.145 s/op
Iteration  28: 5.138 s/op
Iteration  29: 5.167 s/op
Iteration  30: 5.152 s/op
Iteration  31: 5.166 s/op
Iteration  32: 5.159 s/op
Iteration  33: 5.186 s/op
Iteration  34: 5.980 s/op
Iteration  35: 5.160 s/op
Iteration  36: 5.158 s/op
Iteration  37: 5.161 s/op
Iteration  38: 5.156 s/op
Iteration  39: 5.154 s/op
Iteration  40: 5.156 s/op
Iteration  41: 5.148 s/op
Iteration  42: 5.154 s/op
Iteration  43: 5.138 s/op
Iteration  44: 5.153 s/op
Iteration  45: 5.157 s/op
Iteration  46: 5.187 s/op
Iteration  47: 5.120 s/op
Iteration  48: 5.127 s/op
Iteration  49: 5.110 s/op
Iteration  50: 5.121 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      5.233 ?(99.9%) 0.130 s/op

  Histogram, s/op:
    [5.000, 5.125) = 9 
    [5.125, 5.250) = 31 
    [5.250, 5.375) = 5 
    [5.375, 5.500) = 1 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 1 
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 1 
    [6.500, 6.625) = 0 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.068 s/op
     p(50.0000) =      5.156 s/op
     p(90.0000) =      5.385 s/op
     p(95.0000) =      6.065 s/op
     p(99.0000) =      6.450 s/op
     p(99.9000) =      6.450 s/op
     p(99.9900) =      6.450 s/op
     p(99.9990) =      6.450 s/op
     p(99.9999) =      6.450 s/op
    p(100.0000) =      6.450 s/op


# Run complete. Total time: 00:04:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.233 ? 0.130   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564145357964.json
{"wallclock_times": [262.635509071], "core_cycle_counts": [[284808995865], [248913665855], [247784471883], [269632236104]], "aperf_counts": [[284160228378], [248840391096], [247746383459], [269600169488]], "mperf_counts": [[284172230544], [248845786976], [247749789526], [269600747456]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 14:53:40: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ee-19.1.1'
[2019-07-26 14:53:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 14:53:41: INFO] 225 executions left in scheduler queue
[2019-07-26 14:53:41: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 14:53:41: INFO] Estimated completion (next execution): 2019-07-26 15:00:34 (0:06:52 from now)
[2019-07-26 14:53:41: INFO] Reboot in preparation for next execution
[2019-07-26 14:58:00: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 14:58:00: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 14:58:00: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 14:58:00: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 14:58:00: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 15:05:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.665 s/op
Iteration   2: 9.910 s/op
Iteration   3: 9.614 s/op
Iteration   4: 9.850 s/op
Iteration   5: 9.458 s/op
Iteration   6: 9.502 s/op
Iteration   7: 9.475 s/op
Iteration   8: 9.524 s/op
Iteration   9: 9.475 s/op
Iteration  10: 9.488 s/op
Iteration  11: 9.486 s/op
Iteration  12: 9.480 s/op
Iteration  13: 9.480 s/op
Iteration  14: 9.487 s/op
Iteration  15: 9.483 s/op
Iteration  16: 9.509 s/op
Iteration  17: 9.467 s/op
Iteration  18: 9.490 s/op
Iteration  19: 9.495 s/op
Iteration  20: 9.487 s/op
Iteration  21: 9.484 s/op
Iteration  22: 9.463 s/op
Iteration  23: 9.493 s/op
Iteration  24: 9.464 s/op
Iteration  25: 9.473 s/op
Iteration  26: 9.465 s/op
Iteration  27: 9.463 s/op
Iteration  28: 9.473 s/op
Iteration  29: 9.484 s/op
Iteration  30: 9.518 s/op
Iteration  31: 9.468 s/op
Iteration  32: 9.471 s/op
Iteration  33: 9.482 s/op
Iteration  34: 9.486 s/op
Iteration  35: 9.494 s/op
Iteration  36: 9.474 s/op
Iteration  37: 9.512 s/op
Iteration  38: 9.468 s/op
Iteration  39: 9.489 s/op
Iteration  40: 9.507 s/op
Iteration  41: 9.502 s/op
Iteration  42: 9.508 s/op
Iteration  43: 9.468 s/op
Iteration  44: 9.483 s/op
Iteration  45: 9.460 s/op
Iteration  46: 9.479 s/op
Iteration  47: 9.474 s/op
Iteration  48: 9.469 s/op
Iteration  49: 9.462 s/op
Iteration  50: 9.474 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      9.505 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [ 9.400,  9.450) = 0 
    [ 9.450,  9.500) = 38 
    [ 9.500,  9.550) = 8 
    [ 9.550,  9.600) = 0 
    [ 9.600,  9.650) = 1 
    [ 9.650,  9.700) = 1 
    [ 9.700,  9.750) = 0 
    [ 9.750,  9.800) = 0 
    [ 9.800,  9.850) = 0 
    [ 9.850,  9.900) = 1 
    [ 9.900,  9.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.458 s/op
     p(50.0000) =      9.483 s/op
     p(90.0000) =      9.523 s/op
     p(95.0000) =      9.749 s/op
     p(99.0000) =      9.910 s/op
     p(99.9000) =      9.910 s/op
     p(99.9900) =      9.910 s/op
     p(99.9990) =      9.910 s/op
     p(99.9999) =      9.910 s/op
    p(100.0000) =      9.910 s/op


# Run complete. Total time: 00:07:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.505 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564145880508.json
{"wallclock_times": [476.27573232199995], "core_cycle_counts": [[241206225287], [460573432450], [673073004371], [165801304574]], "aperf_counts": [[239922467939], [460477719766], [673025519728], [165750225487]], "mperf_counts": [[240467919504], [460609361400], [673072293568], [165782786868]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 15:05:56: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 15:05:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 15:05:57: INFO] 224 executions left in scheduler queue
[2019-07-26 15:05:57: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 15:05:57: INFO] Estimated completion (next execution): 2019-07-26 15:16:24 (0:10:26 from now)
[2019-07-26 15:05:57: INFO] Reboot in preparation for next execution
[2019-07-26 15:10:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 15:10:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 15:10:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 15:10:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 15:10:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 15:23:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.068 s/op
Iteration   2: 16.126 s/op
Iteration   3: 15.973 s/op
Iteration   4: 16.013 s/op
Iteration   5: 16.248 s/op
Iteration   6: 15.868 s/op
Iteration   7: 15.838 s/op
Iteration   8: 15.794 s/op
Iteration   9: 15.874 s/op
Iteration  10: 15.858 s/op
Iteration  11: 15.863 s/op
Iteration  12: 15.896 s/op
Iteration  13: 15.891 s/op
Iteration  14: 15.900 s/op
Iteration  15: 15.847 s/op
Iteration  16: 15.907 s/op
Iteration  17: 15.906 s/op
Iteration  18: 15.853 s/op
Iteration  19: 15.833 s/op
Iteration  20: 15.849 s/op
Iteration  21: 15.801 s/op
Iteration  22: 15.825 s/op
Iteration  23: 15.885 s/op
Iteration  24: 15.998 s/op
Iteration  25: 15.987 s/op
Iteration  26: 15.933 s/op
Iteration  27: 15.887 s/op
Iteration  28: 15.823 s/op
Iteration  29: 15.831 s/op
Iteration  30: 15.819 s/op
Iteration  31: 15.868 s/op
Iteration  32: 15.833 s/op
Iteration  33: 15.806 s/op
Iteration  34: 15.885 s/op
Iteration  35: 15.920 s/op
Iteration  36: 15.898 s/op
Iteration  37: 15.986 s/op
Iteration  38: 15.950 s/op
Iteration  39: 15.862 s/op
Iteration  40: 15.962 s/op
Iteration  41: 16.054 s/op
Iteration  42: 15.832 s/op
Iteration  43: 15.882 s/op
Iteration  44: 15.861 s/op
Iteration  45: 15.845 s/op
Iteration  46: 15.850 s/op
Iteration  47: 15.872 s/op
Iteration  48: 15.824 s/op
Iteration  49: 15.864 s/op
Iteration  50: 15.850 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.878 ?(99.9%) 0.071 s/op

  Histogram, s/op:
    [15.000, 15.125) = 1 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 27 
    [15.875, 16.000) = 18 
    [16.000, 16.125) = 2 
    [16.125, 16.250) = 2 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 0 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 0 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.068 s/op
     p(50.0000) =     15.868 s/op
     p(90.0000) =     15.997 s/op
     p(95.0000) =     16.086 s/op
     p(99.0000) =     16.248 s/op
     p(99.9000) =     16.248 s/op
     p(99.9900) =     16.248 s/op
     p(99.9990) =     16.248 s/op
     p(99.9999) =     16.248 s/op
    p(100.0000) =     16.248 s/op


# Run complete. Total time: 00:13:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.878 ? 0.071   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564146612470.json
{"wallclock_times": [794.9701213180001], "core_cycle_counts": [[802010175084], [446171038858], [933304916426], [380329988665]], "aperf_counts": [[800229904732], [445988934715], [933243990781], [380212292899]], "mperf_counts": [[801260076306], [446041594482], [933291203336], [380327120458]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 15:23:27: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 15:23:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 15:23:28: INFO] 223 executions left in scheduler queue
[2019-07-26 15:23:28: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 15:23:28: INFO] Estimated completion (next execution): 2019-07-26 15:39:13 (0:15:45 from now)
[2019-07-26 15:23:28: INFO] Reboot in preparation for next execution
[2019-07-26 15:27:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 15:27:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 15:27:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 15:27:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 15:27:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 15:32:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.601 s/op
Iteration   2: 6.347 s/op
Iteration   3: 6.343 s/op
Iteration   4: 6.360 s/op
Iteration   5: 6.261 s/op
Iteration   6: 6.492 s/op
Iteration   7: 6.264 s/op
Iteration   8: 6.273 s/op
Iteration   9: 6.262 s/op
Iteration  10: 6.448 s/op
Iteration  11: 6.283 s/op
Iteration  12: 6.260 s/op
Iteration  13: 6.260 s/op
Iteration  14: 6.244 s/op
Iteration  15: 6.262 s/op
Iteration  16: 6.269 s/op
Iteration  17: 6.262 s/op
Iteration  18: 6.250 s/op
Iteration  19: 6.256 s/op
Iteration  20: 6.255 s/op
Iteration  21: 6.411 s/op
Iteration  22: 6.253 s/op
Iteration  23: 6.246 s/op
Iteration  24: 6.275 s/op
Iteration  25: 6.257 s/op
Iteration  26: 6.408 s/op
Iteration  27: 6.250 s/op
Iteration  28: 6.275 s/op
Iteration  29: 6.354 s/op
Iteration  30: 6.239 s/op
Iteration  31: 6.225 s/op
Iteration  32: 6.411 s/op
Iteration  33: 6.272 s/op
Iteration  34: 6.225 s/op
Iteration  35: 6.244 s/op
Iteration  36: 6.379 s/op
Iteration  37: 6.281 s/op
Iteration  38: 6.283 s/op
Iteration  39: 6.279 s/op
Iteration  40: 6.261 s/op
Iteration  41: 6.274 s/op
Iteration  42: 6.264 s/op
Iteration  43: 6.252 s/op
Iteration  44: 6.397 s/op
Iteration  45: 6.284 s/op
Iteration  46: 6.286 s/op
Iteration  47: 6.292 s/op
Iteration  48: 6.281 s/op
Iteration  49: 6.275 s/op
Iteration  50: 6.256 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.299 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [6.200, 6.250) = 7 
    [6.250, 6.300) = 31 
    [6.300, 6.350) = 2 
    [6.350, 6.400) = 4 
    [6.400, 6.450) = 4 
    [6.450, 6.500) = 1 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.225 s/op
     p(50.0000) =      6.273 s/op
     p(90.0000) =      6.410 s/op
     p(95.0000) =      6.468 s/op
     p(99.0000) =      6.601 s/op
     p(99.9000) =      6.601 s/op
     p(99.9900) =      6.601 s/op
     p(99.9990) =      6.601 s/op
     p(99.9999) =      6.601 s/op
    p(100.0000) =      6.601 s/op


# Run complete. Total time: 00:05:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.299 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564147659502.json
{"wallclock_times": [316.118150466], "core_cycle_counts": [[268169979730], [310794015469], [391751755359], [137006236119]], "aperf_counts": [[267383664164], [310711776426], [391712584061], [136953881404]], "mperf_counts": [[268040780082], [310787848100], [391762771656], [136991700618]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 15:32:55: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 15:32:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 15:32:56: INFO] 222 executions left in scheduler queue
[2019-07-26 15:32:56: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 15:32:56: INFO] Estimated completion (next execution): 2019-07-26 15:40:42 (0:07:46 from now)
[2019-07-26 15:32:56: INFO] Reboot in preparation for next execution
[2019-07-26 15:37:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 15:37:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 15:37:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 15:37:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 15:37:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 15:42:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.508 s/op
Iteration   2: 6.931 s/op
Iteration   3: 6.731 s/op
Iteration   4: 6.794 s/op
Iteration   5: 7.043 s/op
Iteration   6: 6.646 s/op
Iteration   7: 6.658 s/op
Iteration   8: 6.660 s/op
Iteration   9: 6.654 s/op
Iteration  10: 6.654 s/op
Iteration  11: 6.707 s/op
Iteration  12: 6.706 s/op
Iteration  13: 6.688 s/op
Iteration  14: 6.691 s/op
Iteration  15: 6.677 s/op
Iteration  16: 6.523 s/op
Iteration  17: 6.655 s/op
Iteration  18: 6.508 s/op
Iteration  19: 6.653 s/op
Iteration  20: 6.677 s/op
Iteration  21: 6.650 s/op
Iteration  22: 6.676 s/op
Iteration  23: 6.651 s/op
Iteration  24: 6.670 s/op
Iteration  25: 6.646 s/op
Iteration  26: 6.652 s/op
Iteration  27: 6.683 s/op
Iteration  28: 6.665 s/op
Iteration  29: 6.655 s/op
Iteration  30: 6.648 s/op
Iteration  31: 6.700 s/op
Iteration  32: 6.682 s/op
Iteration  33: 6.702 s/op
Iteration  34: 6.717 s/op
Iteration  35: 6.689 s/op
Iteration  36: 6.685 s/op
Iteration  37: 6.669 s/op
Iteration  38: 6.699 s/op
Iteration  39: 6.677 s/op
Iteration  40: 6.703 s/op
Iteration  41: 6.708 s/op
Iteration  42: 6.672 s/op
Iteration  43: 6.677 s/op
Iteration  44: 6.714 s/op
Iteration  45: 6.664 s/op
Iteration  46: 6.674 s/op
Iteration  47: 6.677 s/op
Iteration  48: 6.697 s/op
Iteration  49: 6.661 s/op
Iteration  50: 6.647 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.681 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [6.500, 6.550) = 3 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 5 
    [6.650, 6.700) = 30 
    [6.700, 6.750) = 9 
    [6.750, 6.800) = 1 
    [6.800, 6.850) = 0 
    [6.850, 6.900) = 0 
    [6.900, 6.950) = 1 
    [6.950, 7.000) = 0 
    [7.000, 7.050) = 1 
    [7.050, 7.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.508 s/op
     p(50.0000) =      6.676 s/op
     p(90.0000) =      6.717 s/op
     p(95.0000) =      6.856 s/op
     p(99.0000) =      7.043 s/op
     p(99.9000) =      7.043 s/op
     p(99.9900) =      7.043 s/op
     p(99.9990) =      7.043 s/op
     p(99.9999) =      7.043 s/op
    p(100.0000) =      7.043 s/op


# Run complete. Total time: 00:05:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.681 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564148227649.json
{"wallclock_times": [335.22898676299997], "core_cycle_counts": [[304501973829], [142385400971], [334725842015], [176867801831]], "aperf_counts": [[303747437634], [142271598160], [334684105511], [176830763868]], "mperf_counts": [[345778167624], [161966790656], [380992356254], [201090217788]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 15:42:42: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_11.0.4'
[2019-07-26 15:42:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 15:42:43: INFO] 221 executions left in scheduler queue
[2019-07-26 15:42:43: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 15:42:43: INFO] Estimated completion (next execution): 2019-07-26 15:50:49 (0:08:05 from now)
[2019-07-26 15:42:43: INFO] Reboot in preparation for next execution
[2019-07-26 15:46:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 15:52:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.565 s
Iteration   2: 7.412 s
Iteration   3: 7.316 s
Iteration   4: 7.340 s
Iteration   5: 7.244 s
Iteration   6: 7.104 s
Iteration   7: 7.188 s
Iteration   8: 7.123 s
Iteration   9: 7.230 s
Iteration  10: 7.065 s
Iteration  11: 7.062 s
Iteration  12: 7.076 s
Iteration  13: 7.059 s
Iteration  14: 7.042 s
Iteration  15: 7.088 s
Iteration  16: 7.028 s
Iteration  17: 7.000 s
Iteration  18: 7.031 s
Iteration  19: 7.026 s
Iteration  20: 7.046 s
Iteration  21: 7.066 s
Iteration  22: 7.078 s
Iteration  23: 7.023 s
Iteration  24: 7.019 s
Iteration  25: 7.065 s
Iteration  26: 7.107 s
Iteration  27: 7.033 s
Iteration  28: 7.035 s
Iteration  29: 7.067 s
Iteration  30: 7.052 s
Iteration  31: 7.072 s
Iteration  32: 7.090 s
Iteration  33: 7.051 s
Iteration  34: 7.089 s
Iteration  35: 7.092 s
Iteration  36: 7.098 s
Iteration  37: 7.084 s
Iteration  38: 7.088 s
Iteration  39: 7.086 s
Iteration  40: 7.061 s
Iteration  41: 7.039 s
Iteration  42: 7.058 s
Iteration  43: 7.070 s
Iteration  44: 7.046 s
Iteration  45: 7.025 s
Iteration  46: 7.102 s
Iteration  47: 7.062 s
Iteration  48: 7.109 s
Iteration  49: 7.057 s
Iteration  50: 7.050 s


Result: 7.120 ?(99.9%) 0.111 s [Average]
  Statistics: (min, avg, max) = (7.000, 7.120, 8.565), stdev = 0.224
  Confidence interval (99.9%): [7.009, 7.231]
  Samples, N = 50
        mean =      7.120 ?(99.9%) 0.111 s
         min =      7.000 s
  p( 0.0000) =      7.000 s
  p(50.0000) =      7.067 s
  p(90.0000) =      7.243 s
  p(95.0000) =      7.372 s
  p(99.0000) =      8.565 s
  p(99.9000) =      8.565 s
  p(99.9900) =      8.565 s
  p(99.9990) =      8.565 s
  p(99.9999) =      8.565 s
         max =      8.565 s


# Run complete. Total time: 00:05:57

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  7.120        0.111      s
{"wallclock_times": [357.92018734300007], "core_cycle_counts": [[412083013321], [327250673223], [358781935019], [227369197239]], "aperf_counts": [[411195878633], [327092734427], [358554718078], [227256486010]], "mperf_counts": [[411199332916], [327093417344], [358554669816], [227256484696]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 15:52:52: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 15:52:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 15:52:53: INFO] 220 executions left in scheduler queue
[2019-07-26 15:52:53: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 15:52:53: INFO] Estimated completion (next execution): 2019-07-26 16:01:22 (0:08:28 from now)
[2019-07-26 15:52:53: INFO] Reboot in preparation for next execution
[2019-07-26 15:57:27: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 16:06:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.308 s
Iteration   2: 11.253 s
Iteration   3: 11.137 s
Iteration   4: 11.169 s
Iteration   5: 11.132 s
Iteration   6: 11.143 s
Iteration   7: 11.110 s
Iteration   8: 11.066 s
Iteration   9: 11.097 s
Iteration  10: 11.088 s
Iteration  11: 11.049 s
Iteration  12: 11.132 s
Iteration  13: 11.111 s
Iteration  14: 11.095 s
Iteration  15: 11.110 s
Iteration  16: 11.174 s
Iteration  17: 11.133 s
Iteration  18: 11.076 s
Iteration  19: 11.053 s
Iteration  20: 11.108 s
Iteration  21: 11.001 s
Iteration  22: 11.007 s
Iteration  23: 11.014 s
Iteration  24: 11.035 s
Iteration  25: 11.017 s
Iteration  26: 10.991 s
Iteration  27: 11.051 s
Iteration  28: 11.053 s
Iteration  29: 11.034 s
Iteration  30: 10.917 s
Iteration  31: 10.920 s
Iteration  32: 10.978 s
Iteration  33: 11.031 s
Iteration  34: 11.044 s
Iteration  35: 11.004 s
Iteration  36: 11.013 s
Iteration  37: 11.043 s
Iteration  38: 11.009 s
Iteration  39: 11.003 s
Iteration  40: 10.896 s
Iteration  41: 10.983 s
Iteration  42: 11.036 s
Iteration  43: 10.977 s
Iteration  44: 11.017 s
Iteration  45: 11.052 s
Iteration  46: 11.056 s
Iteration  47: 10.935 s
Iteration  48: 10.995 s
Iteration  49: 10.968 s
Iteration  50: 11.060 s


Result: 11.074 ?(99.9%) 0.095 s [Average]
  Statistics: (min, avg, max) = (10.896, 11.074, 12.308), stdev = 0.192
  Confidence interval (99.9%): [10.979, 11.169]
  Samples, N = 50
        mean =     11.074 ?(99.9%) 0.095 s
         min =     10.896 s
  p( 0.0000) =     10.896 s
  p(50.0000) =     11.047 s
  p(90.0000) =     11.142 s
  p(95.0000) =     11.209 s
  p(99.0000) =     12.308 s
  p(99.9000) =     12.308 s
  p(99.9900) =     12.308 s
  p(99.9990) =     12.308 s
  p(99.9999) =     12.308 s
         max =     12.308 s


# Run complete. Total time: 00:09:14

Benchmark                                                                               (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  11.074        0.095      s
{"wallclock_times": [555.1630430370001], "core_cycle_counts": [[466519272909], [378475406209], [438235591781], [571723887938]], "aperf_counts": [[465080645432], [378312497172], [438164461322], [571601233088]], "mperf_counts": [[465082057034], [378315188100], [438164454708], [571601196450]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 16:06:42: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 16:06:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 16:06:43: INFO] 219 executions left in scheduler queue
[2019-07-26 16:06:43: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 16:06:43: INFO] Estimated completion (next execution): 2019-07-26 16:18:29 (0:11:45 from now)
[2019-07-26 16:06:43: INFO] Reboot in preparation for next execution
[2019-07-26 16:11:04: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 16:17:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.010 s
Iteration   2: 7.837 s
Iteration   3: 7.667 s
Iteration   4: 7.588 s
Iteration   5: 7.566 s
Iteration   6: 7.672 s
Iteration   7: 7.606 s
Iteration   8: 7.555 s
Iteration   9: 7.663 s
Iteration  10: 7.583 s
Iteration  11: 7.737 s
Iteration  12: 7.659 s
Iteration  13: 7.582 s
Iteration  14: 7.647 s
Iteration  15: 7.668 s
Iteration  16: 7.648 s
Iteration  17: 7.686 s
Iteration  18: 7.593 s
Iteration  19: 7.660 s
Iteration  20: 7.562 s
Iteration  21: 7.673 s
Iteration  22: 7.609 s
Iteration  23: 7.603 s
Iteration  24: 7.628 s
Iteration  25: 7.562 s
Iteration  26: 7.727 s
Iteration  27: 7.611 s
Iteration  28: 7.633 s
Iteration  29: 7.663 s
Iteration  30: 7.684 s
Iteration  31: 7.673 s
Iteration  32: 7.603 s
Iteration  33: 7.553 s
Iteration  34: 7.603 s
Iteration  35: 7.566 s
Iteration  36: 7.505 s
Iteration  37: 7.621 s
Iteration  38: 7.674 s
Iteration  39: 7.675 s
Iteration  40: 7.603 s
Iteration  41: 7.589 s
Iteration  42: 7.616 s
Iteration  43: 7.579 s
Iteration  44: 7.653 s
Iteration  45: 7.601 s
Iteration  46: 7.620 s
Iteration  47: 7.614 s
Iteration  48: 7.596 s
Iteration  49: 7.674 s
Iteration  50: 7.622 s


Result: 7.676 ?(99.9%) 0.169 s [Average]
  Statistics: (min, avg, max) = (7.505, 7.676, 10.010), stdev = 0.341
  Confidence interval (99.9%): [7.507, 7.845]
  Samples, N = 50
        mean =      7.676 ?(99.9%) 0.169 s
         min =      7.505 s
  p( 0.0000) =      7.505 s
  p(50.0000) =      7.621 s
  p(90.0000) =      7.686 s
  p(95.0000) =      7.782 s
  p(99.0000) =     10.010 s
  p(99.9000) =     10.010 s
  p(99.9900) =     10.010 s
  p(99.9990) =     10.010 s
  p(99.9999) =     10.010 s
         max =     10.010 s


# Run complete. Total time: 00:06:25

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  7.676        0.169      s
{"wallclock_times": [385.61037674600004], "core_cycle_counts": [[241828326594], [378954642556], [418780300873], [267519284036]], "aperf_counts": [[240733426543], [378851342671], [418677345727], [267455127076]], "mperf_counts": [[240737831094], [378851331990], [418677320800], [267455216032]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 16:17:30: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 16:17:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 16:17:31: INFO] 218 executions left in scheduler queue
[2019-07-26 16:17:31: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 16:17:31: INFO] Estimated completion (next execution): 2019-07-26 16:26:27 (0:08:56 from now)
[2019-07-26 16:17:31: INFO] Reboot in preparation for next execution
[2019-07-26 16:21:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 16:40:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 23.743 s
Iteration   2: 22.776 s
Iteration   3: 22.948 s
Iteration   4: 22.730 s
Iteration   5: 22.749 s
Iteration   6: 22.946 s
Iteration   7: 22.858 s
Iteration   8: 22.840 s
Iteration   9: 22.744 s
Iteration  10: 22.969 s
Iteration  11: 22.718 s
Iteration  12: 22.822 s
Iteration  13: 22.892 s
Iteration  14: 22.925 s
Iteration  15: 22.815 s
Iteration  16: 23.007 s
Iteration  17: 22.909 s
Iteration  18: 22.828 s
Iteration  19: 22.855 s
Iteration  20: 22.909 s
Iteration  21: 22.924 s
Iteration  22: 22.936 s
Iteration  23: 22.789 s
Iteration  24: 23.434 s
Iteration  25: 22.866 s
Iteration  26: 22.835 s
Iteration  27: 22.888 s
Iteration  28: 22.918 s
Iteration  29: 22.802 s
Iteration  30: 22.857 s
Iteration  31: 22.904 s
Iteration  32: 22.986 s
Iteration  33: 22.910 s
Iteration  34: 22.872 s
Iteration  35: 22.846 s
Iteration  36: 22.879 s
Iteration  37: 22.857 s
Iteration  38: 22.832 s
Iteration  39: 23.606 s
Iteration  40: 22.885 s
Iteration  41: 22.901 s
Iteration  42: 22.723 s
Iteration  43: 22.731 s
Iteration  44: 22.678 s
Iteration  45: 22.616 s
Iteration  46: 22.738 s
Iteration  47: 22.711 s
Iteration  48: 22.685 s
Iteration  49: 22.682 s
Iteration  50: 22.746 s


Result: 22.880 ?(99.9%) 0.102 s [Average]
  Statistics: (min, avg, max) = (22.616, 22.880, 23.743), stdev = 0.205
  Confidence interval (99.9%): [22.779, 22.982]
  Samples, N = 50
        mean =     22.880 ?(99.9%) 0.102 s
         min =     22.616 s
  p( 0.0000) =     22.616 s
  p(50.0000) =     22.857 s
  p(90.0000) =     22.985 s
  p(95.0000) =     23.511 s
  p(99.0000) =     23.743 s
  p(99.9000) =     23.743 s
  p(99.9900) =     23.743 s
  p(99.9990) =     23.743 s
  p(99.9999) =     23.743 s
         max =     23.743 s


# Run complete. Total time: 00:19:05

Benchmark                                                                          (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  22.880        0.102      s
{"wallclock_times": [1145.623444466], "core_cycle_counts": [[1671037620150], [616241842255], [443917978014], [966015799282]], "aperf_counts": [[1668929260993], [615958677624], [443481710167], [965780971213]], "mperf_counts": [[1668931730522], [615958582008], [443481534160], [965781166842]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 16:40:46: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_12.0.1'
[2019-07-26 16:40:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 16:40:47: INFO] 217 executions left in scheduler queue
[2019-07-26 16:40:47: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-07-26 16:40:47: INFO] Estimated completion (next execution): 2019-07-26 17:02:23 (0:21:36 from now)
[2019-07-26 16:40:47: INFO] Reboot in preparation for next execution
[2019-07-26 16:44:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: 0.004 s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 44 
    [0.000, 0.001) = 4 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 1 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score    Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564152295597.json
{"wallclock_times": [0.7829243310000038], "core_cycle_counts": [[1714518779], [1517948958], [842740846], [830799298]], "aperf_counts": [[1712647105], [1515517964], [838327898], [825989973]], "mperf_counts": [[1723552340], [1530464240], [838546850], [826090036]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 16:44:56: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot-8u222-b10'
[2019-07-26 16:44:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 16:44:57: INFO] 216 executions left in scheduler queue
[2019-07-26 16:44:57: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-07-26 16:44:57: INFO] Estimated completion (next execution): 2019-07-26 16:47:28 (0:02:31 from now)
[2019-07-26 16:44:57: INFO] Reboot in preparation for next execution
[2019-07-26 16:49:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 16:49:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 16:49:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 16:49:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 16:49:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 16:49:07: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 16:49:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 0 
    [0.000, 0.001) = 49 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564152547717.json
{"wallclock_times": [1.4883825809999962], "core_cycle_counts": [[3116664786], [2804913905], [2287194307], [2322518983]], "aperf_counts": [[3108863296], [2793350406], [2278141944], [2303882891]], "mperf_counts": [[3114995020], [2793352516], [2279135984], [2303956382]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 16:49:09: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_11.0.4'
[2019-07-26 16:49:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 16:49:10: INFO] 215 executions left in scheduler queue
[2019-07-26 16:49:10: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-26 16:49:10: INFO] Estimated completion (next execution): 2019-07-26 16:51:42 (0:02:32 from now)
[2019-07-26 16:49:10: INFO] Reboot in preparation for next execution
[2019-07-26 16:53:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 16:53:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 16:53:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 16:53:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 16:53:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 16:53:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 16:55:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.808 s/op
Iteration   2: 2.470 s/op
Iteration   3: 2.400 s/op
Iteration   4: 2.348 s/op
Iteration   5: 2.339 s/op
Iteration   6: 1.994 s/op
Iteration   7: 1.957 s/op
Iteration   8: 1.969 s/op
Iteration   9: 1.931 s/op
Iteration  10: 1.925 s/op
Iteration  11: 1.979 s/op
Iteration  12: 1.953 s/op
Iteration  13: 1.973 s/op
Iteration  14: 1.953 s/op
Iteration  15: 1.956 s/op
Iteration  16: 1.945 s/op
Iteration  17: 1.963 s/op
Iteration  18: 1.954 s/op
Iteration  19: 1.950 s/op
Iteration  20: 1.959 s/op
Iteration  21: 1.949 s/op
Iteration  22: 1.964 s/op
Iteration  23: 1.960 s/op
Iteration  24: 1.959 s/op
Iteration  25: 1.945 s/op
Iteration  26: 1.999 s/op
Iteration  27: 1.991 s/op
Iteration  28: 1.976 s/op
Iteration  29: 2.002 s/op
Iteration  30: 1.978 s/op
Iteration  31: 1.956 s/op
Iteration  32: 1.978 s/op
Iteration  33: 1.971 s/op
Iteration  34: 1.981 s/op
Iteration  35: 1.938 s/op
Iteration  36: 1.997 s/op
Iteration  37: 1.948 s/op
Iteration  38: 1.933 s/op
Iteration  39: 1.938 s/op
Iteration  40: 1.970 s/op
Iteration  41: 1.971 s/op
Iteration  42: 1.961 s/op
Iteration  43: 1.987 s/op
Iteration  44: 1.981 s/op
Iteration  45: 1.932 s/op
Iteration  46: 2.001 s/op
Iteration  47: 1.971 s/op
Iteration  48: 1.984 s/op
Iteration  49: 1.944 s/op
Iteration  50: 1.991 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.016 ?(99.9%) 0.082 s/op

  Histogram, s/op:
    [1.900, 2.000) = 43 
    [2.000, 2.100) = 2 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 2 
    [2.400, 2.500) = 2 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.925 s/op
     p(50.0000) =      1.969 s/op
     p(90.0000) =      2.306 s/op
     p(95.0000) =      2.432 s/op
     p(99.0000) =      2.808 s/op
     p(99.9000) =      2.808 s/op
     p(99.9900) =      2.808 s/op
     p(99.9990) =      2.808 s/op
     p(99.9999) =      2.808 s/op
    p(100.0000) =      2.808 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.016 ? 0.082   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564152800803.json
{"wallclock_times": [102.50756926600002], "core_cycle_counts": [[111083520501], [88156447558], [74859918062], [82157891674]], "aperf_counts": [[110747476131], [88091505085], [74800248137], [82070088446]], "mperf_counts": [[110753194186], [88092129530], [74800710468], [82070232168]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 16:55:03: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-26 16:55:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 16:55:04: INFO] 214 executions left in scheduler queue
[2019-07-26 16:55:04: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-26 16:55:04: INFO] Estimated completion (next execution): 2019-07-26 16:59:17 (0:04:13 from now)
[2019-07-26 16:55:04: INFO] Reboot in preparation for next execution
[2019-07-26 16:59:45: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 16:59:45: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 16:59:45: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 16:59:45: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 16:59:45: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 16:59:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 17:02:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.684 s/op
Iteration   2: 3.577 s/op
Iteration   3: 3.771 s/op
Iteration   4: 3.737 s/op
Iteration   5: 3.431 s/op
Iteration   6: 3.426 s/op
Iteration   7: 3.346 s/op
Iteration   8: 3.320 s/op
Iteration   9: 3.305 s/op
Iteration  10: 3.298 s/op
Iteration  11: 3.309 s/op
Iteration  12: 3.335 s/op
Iteration  13: 3.334 s/op
Iteration  14: 3.342 s/op
Iteration  15: 3.361 s/op
Iteration  16: 3.340 s/op
Iteration  17: 3.330 s/op
Iteration  18: 3.307 s/op
Iteration  19: 3.351 s/op
Iteration  20: 3.316 s/op
Iteration  21: 3.364 s/op
Iteration  22: 3.322 s/op
Iteration  23: 3.300 s/op
Iteration  24: 3.275 s/op
Iteration  25: 3.314 s/op
Iteration  26: 3.341 s/op
Iteration  27: 3.336 s/op
Iteration  28: 3.324 s/op
Iteration  29: 3.328 s/op
Iteration  30: 3.337 s/op
Iteration  31: 3.281 s/op
Iteration  32: 3.351 s/op
Iteration  33: 3.289 s/op
Iteration  34: 3.326 s/op
Iteration  35: 3.337 s/op
Iteration  36: 3.356 s/op
Iteration  37: 3.327 s/op
Iteration  38: 3.316 s/op
Iteration  39: 3.322 s/op
Iteration  40: 3.367 s/op
Iteration  41: 3.367 s/op
Iteration  42: 3.298 s/op
Iteration  43: 3.355 s/op
Iteration  44: 3.320 s/op
Iteration  45: 3.316 s/op
Iteration  46: 3.325 s/op
Iteration  47: 3.324 s/op
Iteration  48: 3.293 s/op
Iteration  49: 3.313 s/op
Iteration  50: 3.300 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.359 ?(99.9%) 0.052 s/op

  Histogram, s/op:
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 8 
    [3.300, 3.350) = 28 
    [3.350, 3.400) = 8 
    [3.400, 3.450) = 2 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 1 
    [3.700, 3.750) = 1 
    [3.750, 3.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.275 s/op
     p(50.0000) =      3.327 s/op
     p(90.0000) =      3.431 s/op
     p(95.0000) =      3.708 s/op
     p(99.0000) =      3.771 s/op
     p(99.9000) =      3.771 s/op
     p(99.9900) =      3.771 s/op
     p(99.9990) =      3.771 s/op
     p(99.9999) =      3.771 s/op
    p(100.0000) =      3.771 s/op


# Run complete. Total time: 00:02:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.359 ? 0.052   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564153185687.json
{"wallclock_times": [169.45572257600003], "core_cycle_counts": [[118501062666], [124101060487], [200681279705], [131479228097]], "aperf_counts": [[117998286160], [124040676588], [200625544336], [131420359570]], "mperf_counts": [[118004194408], [124041652546], [200625538996], [131420440836]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 17:02:35: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_12.0.1'
[2019-07-26 17:02:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 17:02:36: INFO] 213 executions left in scheduler queue
[2019-07-26 17:02:36: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-07-26 17:02:36: INFO] Estimated completion (next execution): 2019-07-26 17:07:56 (0:05:19 from now)
[2019-07-26 17:02:36: INFO] Reboot in preparation for next execution
[2019-07-26 17:10:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.958 s/op
Iteration   2: 4.651 s/op
Iteration   3: 4.274 s/op
Iteration   4: 4.309 s/op
Iteration   5: 4.323 s/op
Iteration   6: 4.338 s/op
Iteration   7: 4.530 s/op
Iteration   8: 4.648 s/op
Iteration   9: 4.447 s/op
Iteration  10: 4.487 s/op
Iteration  11: 4.544 s/op
Iteration  12: 4.565 s/op
Iteration  13: 4.377 s/op
Iteration  14: 4.326 s/op
Iteration  15: 4.632 s/op
Iteration  16: 4.441 s/op
Iteration  17: 4.281 s/op
Iteration  18: 4.340 s/op
Iteration  19: 4.502 s/op
Iteration  20: 4.310 s/op
Iteration  21: 4.372 s/op
Iteration  22: 4.473 s/op
Iteration  23: 4.299 s/op
Iteration  24: 4.262 s/op
Iteration  25: 4.326 s/op
Iteration  26: 5.301 s/op
Iteration  27: 4.321 s/op
Iteration  28: 4.453 s/op
Iteration  29: 4.454 s/op
Iteration  30: 4.292 s/op
Iteration  31: 4.258 s/op
Iteration  32: 4.353 s/op
Iteration  33: 4.486 s/op
Iteration  34: 4.304 s/op
Iteration  35: 4.264 s/op
Iteration  36: 4.378 s/op
Iteration  37: 4.467 s/op
Iteration  38: 4.290 s/op
Iteration  39: 4.275 s/op
Iteration  40: 4.242 s/op
Iteration  41: 4.323 s/op
Iteration  42: 4.310 s/op
Iteration  43: 4.323 s/op
Iteration  44: 4.254 s/op
Iteration  45: 4.379 s/op
Iteration  46: 4.456 s/op
Iteration  47: 4.330 s/op
Iteration  48: 4.297 s/op
Iteration  49: 4.274 s/op
Iteration  50: 4.342 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.409 ?(99.9%) 0.092 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 1 
    [4.250, 4.375) = 28 
    [4.375, 4.500) = 12 
    [4.500, 4.625) = 4 
    [4.625, 4.750) = 3 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 1 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 1 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.242 s/op
     p(50.0000) =      4.339 s/op
     p(90.0000) =      4.625 s/op
     p(95.0000) =      4.789 s/op
     p(99.0000) =      5.301 s/op
     p(99.9000) =      5.301 s/op
     p(99.9900) =      5.301 s/op
     p(99.9990) =      5.301 s/op
     p(99.9999) =      5.301 s/op
    p(100.0000) =      5.301 s/op


# Run complete. Total time: 00:03:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  4.409 ? 0.092   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564153605379.json
{"wallclock_times": [221.415686634], "core_cycle_counts": [[212140455366], [289944168141], [102947423914], [194174129032]], "aperf_counts": [[211607231071], [289891489690], [102911768017], [194154099151]], "mperf_counts": [[211621771210], [289891985446], [102913344388], [194159046810]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 17:10:26: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ee-19.1.1'
[2019-07-26 17:10:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 17:10:27: INFO] 212 executions left in scheduler queue
[2019-07-26 17:10:27: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-07-26 17:10:27: INFO] Estimated completion (next execution): 2019-07-26 17:16:39 (0:06:11 from now)
[2019-07-26 17:10:27: INFO] Reboot in preparation for next execution
[2019-07-26 17:22:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.719 s/op
Iteration   2: 9.318 s/op
Iteration   3: 9.659 s/op
Iteration   4: 9.352 s/op
Iteration   5: 9.269 s/op
Iteration   6: 9.324 s/op
Iteration   7: 9.233 s/op
Iteration   8: 9.394 s/op
Iteration   9: 9.298 s/op
Iteration  10: 9.180 s/op
Iteration  11: 9.314 s/op
Iteration  12: 10.392 s/op
Iteration  13: 9.282 s/op
Iteration  14: 9.186 s/op
Iteration  15: 9.340 s/op
Iteration  16: 9.185 s/op
Iteration  17: 9.361 s/op
Iteration  18: 9.395 s/op
Iteration  19: 9.186 s/op
Iteration  20: 9.389 s/op
Iteration  21: 9.190 s/op
Iteration  22: 9.358 s/op
Iteration  23: 9.977 s/op
Iteration  24: 9.238 s/op
Iteration  25: 9.238 s/op
Iteration  26: 9.353 s/op
Iteration  27: 9.383 s/op
Iteration  28: 9.233 s/op
Iteration  29: 9.388 s/op
Iteration  30: 9.198 s/op
Iteration  31: 9.353 s/op
Iteration  32: 9.195 s/op
Iteration  33: 9.356 s/op
Iteration  34: 9.908 s/op
Iteration  35: 9.267 s/op
Iteration  36: 9.194 s/op
Iteration  37: 9.341 s/op
Iteration  38: 9.366 s/op
Iteration  39: 9.228 s/op
Iteration  40: 9.378 s/op
Iteration  41: 9.237 s/op
Iteration  42: 9.365 s/op
Iteration  43: 9.211 s/op
Iteration  44: 9.387 s/op
Iteration  45: 9.967 s/op
Iteration  46: 9.251 s/op
Iteration  47: 9.225 s/op
Iteration  48: 9.326 s/op
Iteration  49: 9.371 s/op
Iteration  50: 9.203 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      9.369 ?(99.9%) 0.118 s/op

  Histogram, s/op:
    [ 9.000,  9.125) = 0 
    [ 9.125,  9.250) = 17 
    [ 9.250,  9.375) = 20 
    [ 9.375,  9.500) = 7 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 2 
    [ 9.750,  9.875) = 0 
    [ 9.875, 10.000) = 3 
    [10.000, 10.125) = 0 
    [10.125, 10.250) = 0 
    [10.250, 10.375) = 0 
    [10.375, 10.500) = 1 
    [10.500, 10.625) = 0 
    [10.625, 10.750) = 0 
    [10.750, 10.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      9.180 s/op
     p(50.0000) =      9.325 s/op
     p(90.0000) =      9.713 s/op
     p(95.0000) =      9.972 s/op
     p(99.0000) =     10.392 s/op
     p(99.9000) =     10.392 s/op
     p(99.9900) =     10.392 s/op
     p(99.9990) =     10.392 s/op
     p(99.9999) =     10.392 s/op
    p(100.0000) =     10.392 s/op


# Run complete. Total time: 00:07:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  9.369 ? 0.118   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564154077561.json
{"wallclock_times": [469.426976739], "core_cycle_counts": [[485695146415], [369582115291], [357985717255], [510446174594]], "aperf_counts": [[484590238756], [369453672948], [357928952150], [510406189346]], "mperf_counts": [[484608062214], [369468573508], [357931045660], [510409080142]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 17:22:26: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ce-19.1.1'
[2019-07-26 17:22:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 17:22:27: INFO] 211 executions left in scheduler queue
[2019-07-26 17:22:27: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 17:22:27: INFO] Estimated completion (next execution): 2019-07-26 17:32:47 (0:10:19 from now)
[2019-07-26 17:22:27: INFO] Reboot in preparation for next execution
[2019-07-26 17:31:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.956 s
Iteration   2: 5.777 s
Iteration   3: 5.523 s
Iteration   4: 5.509 s
Iteration   5: 5.549 s
Iteration   6: 5.551 s
Iteration   7: 5.528 s
Iteration   8: 5.529 s
Iteration   9: 5.560 s
Iteration  10: 5.572 s
Iteration  11: 5.568 s
Iteration  12: 5.578 s
Iteration  13: 5.572 s
Iteration  14: 5.573 s
Iteration  15: 5.580 s
Iteration  16: 5.590 s
Iteration  17: 5.572 s
Iteration  18: 5.585 s
Iteration  19: 5.559 s
Iteration  20: 5.555 s
Iteration  21: 5.594 s
Iteration  22: 5.587 s
Iteration  23: 5.583 s
Iteration  24: 5.607 s
Iteration  25: 5.576 s
Iteration  26: 5.556 s
Iteration  27: 5.582 s
Iteration  28: 5.555 s
Iteration  29: 5.589 s
Iteration  30: 5.561 s
Iteration  31: 5.566 s
Iteration  32: 5.601 s
Iteration  33: 5.569 s
Iteration  34: 5.595 s
Iteration  35: 5.568 s
Iteration  36: 5.585 s
Iteration  37: 5.589 s
Iteration  38: 5.569 s
Iteration  39: 5.572 s
Iteration  40: 5.587 s
Iteration  41: 5.561 s
Iteration  42: 5.599 s
Iteration  43: 5.571 s
Iteration  44: 5.557 s
Iteration  45: 5.577 s
Iteration  46: 5.558 s
Iteration  47: 5.587 s
Iteration  48: 5.612 s
Iteration  49: 5.584 s
Iteration  50: 5.582 s


Result: 5.583 ?(99.9%) 0.032 s [Average]
  Statistics: (min, avg, max) = (5.509, 5.583, 5.956), stdev = 0.065
  Confidence interval (99.9%): [5.551, 5.615]
  Samples, N = 50
        mean =      5.583 ?(99.9%) 0.032 s
         min =      5.509 s
  p( 0.0000) =      5.509 s
  p(50.0000) =      5.572 s
  p(90.0000) =      5.601 s
  p(95.0000) =      5.686 s
  p(99.0000) =      5.956 s
  p(99.9000) =      5.956 s
  p(99.9900) =      5.956 s
  p(99.9990) =      5.956 s
  p(99.9999) =      5.956 s
         max =      5.956 s


# Run complete. Total time: 00:04:40

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  5.583        0.032      s
{"wallclock_times": [280.17612902], "core_cycle_counts": [[219799966888], [261518308345], [283354913067], [148335961772]], "aperf_counts": [[219149255843], [261466605250], [283328349007], [148305799310]], "mperf_counts": [[219159482650], [261466688438], [283339647272], [148306847358]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 17:31:27: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 17:31:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 17:31:28: INFO] 210 executions left in scheduler queue
[2019-07-26 17:31:28: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 17:31:28: INFO] Estimated completion (next execution): 2019-07-26 17:38:38 (0:07:10 from now)
[2019-07-26 17:31:28: INFO] Reboot in preparation for next execution
[2019-07-26 17:44:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.843 s
Iteration   2: 10.350 s
Iteration   3: 9.982 s
Iteration   4: 10.005 s
Iteration   5: 10.008 s
Iteration   6: 10.108 s
Iteration   7: 10.054 s
Iteration   8: 10.081 s
Iteration   9: 10.062 s
Iteration  10: 10.085 s
Iteration  11: 10.076 s
Iteration  12: 10.058 s
Iteration  13: 10.064 s
Iteration  14: 10.076 s
Iteration  15: 10.098 s
Iteration  16: 10.072 s
Iteration  17: 10.060 s
Iteration  18: 10.094 s
Iteration  19: 10.088 s
Iteration  20: 10.090 s
Iteration  21: 10.060 s
Iteration  22: 10.037 s
Iteration  23: 10.061 s
Iteration  24: 10.018 s
Iteration  25: 10.074 s
Iteration  26: 10.096 s
Iteration  27: 10.075 s
Iteration  28: 10.074 s
Iteration  29: 10.034 s
Iteration  30: 10.054 s
Iteration  31: 10.071 s
Iteration  32: 10.067 s
Iteration  33: 10.100 s
Iteration  34: 10.049 s
Iteration  35: 10.041 s
Iteration  36: 10.043 s
Iteration  37: 10.045 s
Iteration  38: 10.051 s
Iteration  39: 10.022 s
Iteration  40: 10.053 s
Iteration  41: 10.041 s
Iteration  42: 10.074 s
Iteration  43: 10.086 s
Iteration  44: 10.054 s
Iteration  45: 10.049 s
Iteration  46: 10.076 s
Iteration  47: 10.048 s
Iteration  48: 10.054 s
Iteration  49: 10.072 s
Iteration  50: 10.051 s


Result: 10.062 ?(99.9%) 0.029 s [Average]
  Statistics: (min, avg, max) = (9.843, 10.062, 10.350), stdev = 0.058
  Confidence interval (99.9%): [10.033, 10.090]
  Samples, N = 50
        mean =     10.062 ?(99.9%) 0.029 s
         min =      9.843 s
  p( 0.0000) =      9.843 s
  p(50.0000) =     10.061 s
  p(90.0000) =     10.096 s
  p(95.0000) =     10.103 s
  p(99.0000) =     10.350 s
  p(99.9000) =     10.350 s
  p(99.9900) =     10.350 s
  p(99.9990) =     10.350 s
  p(99.9999) =     10.350 s
         max =     10.350 s


# Run complete. Total time: 00:08:23

Benchmark                                                                                  (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  10.062        0.029      s
{"wallclock_times": [503.980065729], "core_cycle_counts": [[406840239369], [480066942432], [331626412706], [406924793297]], "aperf_counts": [[405705306172], [479984156465], [331586030178], [406900370443]], "mperf_counts": [[405712014636], [479987217130], [331587871568], [406900752708]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 17:44:02: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 17:44:03: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 17:44:03: INFO] 209 executions left in scheduler queue
[2019-07-26 17:44:03: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 17:44:03: INFO] Estimated completion (next execution): 2019-07-26 17:54:57 (0:10:54 from now)
[2019-07-26 17:44:03: INFO] Reboot in preparation for next execution
[2019-07-26 17:53:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.664 s
Iteration   2: 6.119 s
Iteration   3: 6.074 s
Iteration   4: 6.079 s
Iteration   5: 6.132 s
Iteration   6: 6.090 s
Iteration   7: 6.077 s
Iteration   8: 6.120 s
Iteration   9: 6.116 s
Iteration  10: 6.066 s
Iteration  11: 6.100 s
Iteration  12: 6.103 s
Iteration  13: 6.106 s
Iteration  14: 6.060 s
Iteration  15: 6.093 s
Iteration  16: 6.113 s
Iteration  17: 6.102 s
Iteration  18: 6.054 s
Iteration  19: 6.107 s
Iteration  20: 6.117 s
Iteration  21: 6.099 s
Iteration  22: 6.068 s
Iteration  23: 6.105 s
Iteration  24: 6.122 s
Iteration  25: 6.101 s
Iteration  26: 6.057 s
Iteration  27: 6.110 s
Iteration  28: 6.112 s
Iteration  29: 6.121 s
Iteration  30: 6.065 s
Iteration  31: 6.111 s
Iteration  32: 6.133 s
Iteration  33: 6.124 s
Iteration  34: 6.067 s
Iteration  35: 6.110 s
Iteration  36: 6.130 s
Iteration  37: 6.078 s
Iteration  38: 6.066 s
Iteration  39: 6.106 s
Iteration  40: 6.117 s
Iteration  41: 6.070 s
Iteration  42: 6.114 s
Iteration  43: 6.109 s
Iteration  44: 6.126 s
Iteration  45: 6.070 s
Iteration  46: 6.109 s
Iteration  47: 6.104 s
Iteration  48: 6.107 s
Iteration  49: 6.467 s
Iteration  50: 6.041 s


Result: 6.116 ?(99.9%) 0.048 s [Average]
  Statistics: (min, avg, max) = (6.041, 6.116, 6.664), stdev = 0.098
  Confidence interval (99.9%): [6.068, 6.165]
  Samples, N = 50
        mean =      6.116 ?(99.9%) 0.048 s
         min =      6.041 s
  p( 0.0000) =      6.041 s
  p(50.0000) =      6.106 s
  p(90.0000) =      6.130 s
  p(95.0000) =      6.283 s
  p(99.0000) =      6.664 s
  p(99.9000) =      6.664 s
  p(99.9900) =      6.664 s
  p(99.9990) =      6.664 s
  p(99.9999) =      6.664 s
         max =      6.664 s


# Run complete. Total time: 00:05:06

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.116        0.048      s
{"wallclock_times": [306.95704287999996], "core_cycle_counts": [[208246370970], [337086942129], [222632275901], [296527480071]], "aperf_counts": [[207441613678], [337015806459], [222559678295], [296476282754]], "mperf_counts": [[207458287490], [337016723324], [222559720166], [296476306642]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 17:53:20: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 17:53:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 17:53:21: INFO] 208 executions left in scheduler queue
[2019-07-26 17:53:21: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 17:53:21: INFO] Estimated completion (next execution): 2019-07-26 18:00:58 (0:07:37 from now)
[2019-07-26 17:53:21: INFO] Reboot in preparation for next execution
[2019-07-26 18:10:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.190 s
Iteration   2: 15.425 s
Iteration   3: 15.206 s
Iteration   4: 15.178 s
Iteration   5: 15.159 s
Iteration   6: 15.134 s
Iteration   7: 15.159 s
Iteration   8: 15.137 s
Iteration   9: 15.200 s
Iteration  10: 15.178 s
Iteration  11: 15.105 s
Iteration  12: 15.179 s
Iteration  13: 15.189 s
Iteration  14: 15.192 s
Iteration  15: 15.156 s
Iteration  16: 15.167 s
Iteration  17: 15.159 s
Iteration  18: 15.178 s
Iteration  19: 15.199 s
Iteration  20: 15.156 s
Iteration  21: 15.151 s
Iteration  22: 15.177 s
Iteration  23: 15.193 s
Iteration  24: 15.134 s
Iteration  25: 15.203 s
Iteration  26: 15.134 s
Iteration  27: 15.193 s
Iteration  28: 15.141 s
Iteration  29: 15.134 s
Iteration  30: 15.139 s
Iteration  31: 15.247 s
Iteration  32: 15.143 s
Iteration  33: 15.308 s
Iteration  34: 15.173 s
Iteration  35: 15.173 s
Iteration  36: 15.180 s
Iteration  37: 15.086 s
Iteration  38: 15.187 s
Iteration  39: 15.167 s
Iteration  40: 15.165 s
Iteration  41: 15.150 s
Iteration  42: 15.196 s
Iteration  43: 15.174 s
Iteration  44: 15.166 s
Iteration  45: 15.145 s
Iteration  46: 15.136 s
Iteration  47: 15.241 s
Iteration  48: 15.154 s
Iteration  49: 15.168 s
Iteration  50: 15.144 s


Result: 15.175 ?(99.9%) 0.025 s [Average]
  Statistics: (min, avg, max) = (15.086, 15.175, 15.425), stdev = 0.051
  Confidence interval (99.9%): [15.150, 15.200]
  Samples, N = 50
        mean =     15.175 ?(99.9%) 0.025 s
         min =     15.086 s
  p( 0.0000) =     15.086 s
  p(50.0000) =     15.168 s
  p(90.0000) =     15.205 s
  p(95.0000) =     15.274 s
  p(99.0000) =     15.425 s
  p(99.9000) =     15.425 s
  p(99.9900) =     15.425 s
  p(99.9990) =     15.425 s
  p(99.9999) =     15.425 s
         max =     15.425 s


# Run complete. Total time: 00:12:39

Benchmark                                                                             (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  15.175        0.025      s
{"wallclock_times": [759.705478114], "core_cycle_counts": [[453567199831], [715458109005], [635397553723], [649282123290]], "aperf_counts": [[451691438272], [715377372078], [635336967063], [649251527400]], "mperf_counts": [[451700108904], [715378949952], [635341295962], [649252609716]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 18:10:12: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot-8u222-b10'
[2019-07-26 18:10:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 18:10:13: INFO] 207 executions left in scheduler queue
[2019-07-26 18:10:13: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-07-26 18:10:13: INFO] Estimated completion (next execution): 2019-07-26 18:25:23 (0:15:09 from now)
[2019-07-26 18:10:13: INFO] Reboot in preparation for next execution
[2019-07-26 18:14:23: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 18:14:24: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: 0.001 s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: 0.001 s/op
Iteration   7: 0.001 s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: 0.001 s/op
Iteration  12: 0.001 s/op
Iteration  13: 0.001 s/op
Iteration  14: 0.001 s/op
Iteration  15: 0.001 s/op
Iteration  16: 0.001 s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 0 
    [0.000, 0.001) = 40 
    [0.001, 0.001) = 9 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =      0.001 s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564157663437.json
{"wallclock_times": [1.1307636189999926], "core_cycle_counts": [[2399304595], [2095475869], [1684667114], [1452483067]], "aperf_counts": [[2392820947], [2084485442], [1678683357], [1440083423]], "mperf_counts": [[2395410070], [2086137248], [1679896948], [1440797768]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 18:14:24: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9-8u222-b10'
[2019-07-26 18:14:25: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 18:14:25: INFO] 206 executions left in scheduler queue
[2019-07-26 18:14:25: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-07-26 18:14:25: INFO] Estimated completion (next execution): 2019-07-26 18:16:56 (0:02:31 from now)
[2019-07-26 18:14:25: INFO] Reboot in preparation for next execution
[2019-07-26 18:18:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: 0.001 s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: 0.002 s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 44 
    [0.000, 0.001) = 3 
    [0.001, 0.001) = 1 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 1 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564157917603.json
{"wallclock_times": [0.7780812630000185], "core_cycle_counts": [[1401177161], [1035566708], [1547357044], [874715990]], "aperf_counts": [[1398671223], [1031348388], [1544466987], [871352330]], "mperf_counts": [[1408276018], [1033874368], [1550559930], [872115776]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 18:18:38: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot-8u222-b10'
[2019-07-26 18:18:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 18:18:39: INFO] 205 executions left in scheduler queue
[2019-07-26 18:18:39: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-07-26 18:18:39: INFO] Estimated completion (next execution): 2019-07-26 18:21:10 (0:02:31 from now)
[2019-07-26 18:18:39: INFO] Reboot in preparation for next execution
[2019-07-26 18:22:50: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 18:22:50: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 18:22:50: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 18:22:50: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 18:22:50: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 18:22:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 18:35:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.532 s/op
Iteration   2: 14.826 s/op
Iteration   3: 14.594 s/op
Iteration   4: 14.720 s/op
Iteration   5: 14.489 s/op
Iteration   6: 14.649 s/op
Iteration   7: 15.339 s/op
Iteration   8: 14.257 s/op
Iteration   9: 14.947 s/op
Iteration  10: 14.547 s/op
Iteration  11: 14.300 s/op
Iteration  12: 15.396 s/op
Iteration  13: 14.512 s/op
Iteration  14: 14.585 s/op
Iteration  15: 14.458 s/op
Iteration  16: 15.004 s/op
Iteration  17: 14.444 s/op
Iteration  18: 15.302 s/op
Iteration  19: 15.276 s/op
Iteration  20: 14.810 s/op
Iteration  21: 14.579 s/op
Iteration  22: 14.630 s/op
Iteration  23: 14.442 s/op
Iteration  24: 14.703 s/op
Iteration  25: 14.661 s/op
Iteration  26: 14.846 s/op
Iteration  27: 15.538 s/op
Iteration  28: 14.265 s/op
Iteration  29: 14.462 s/op
Iteration  30: 15.043 s/op
Iteration  31: 14.665 s/op
Iteration  32: 15.219 s/op
Iteration  33: 14.985 s/op
Iteration  34: 14.935 s/op
Iteration  35: 15.297 s/op
Iteration  36: 15.337 s/op
Iteration  37: 14.749 s/op
Iteration  38: 14.877 s/op
Iteration  39: 14.754 s/op
Iteration  40: 15.547 s/op
Iteration  41: 15.160 s/op
Iteration  42: 14.388 s/op
Iteration  43: 14.941 s/op
Iteration  44: 14.452 s/op
Iteration  45: 14.736 s/op
Iteration  46: 14.686 s/op
Iteration  47: 14.712 s/op
Iteration  48: 14.521 s/op
Iteration  49: 15.055 s/op
Iteration  50: 14.673 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.817 ?(99.9%) 0.174 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 3 
    [14.375, 14.500) = 7 
    [14.500, 14.625) = 6 
    [14.625, 14.750) = 11 
    [14.750, 14.875) = 4 
    [14.875, 15.000) = 5 
    [15.000, 15.125) = 3 
    [15.125, 15.250) = 2 
    [15.250, 15.375) = 5 
    [15.375, 15.500) = 1 
    [15.500, 15.625) = 3 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.257 s/op
     p(50.0000) =     14.728 s/op
     p(90.0000) =     15.339 s/op
     p(95.0000) =     15.535 s/op
     p(99.0000) =     15.547 s/op
     p(99.9000) =     15.547 s/op
     p(99.9900) =     15.547 s/op
     p(99.9990) =     15.547 s/op
     p(99.9999) =     15.547 s/op
    p(100.0000) =     15.547 s/op


# Run complete. Total time: 00:12:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.817 ? 0.174   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564158170666.json
{"wallclock_times": [742.605434007], "core_cycle_counts": [[724184534835], [666344580547], [614577304016], [694995244482]], "aperf_counts": [[722348209989], [666188009050], [614382120218], [694797690226]], "mperf_counts": [[722353044522], [666187974010], [614382197290], [694798655154]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 18:35:13: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_12.0.1'
[2019-07-26 18:35:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 18:35:14: INFO] 204 executions left in scheduler queue
[2019-07-26 18:35:14: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-07-26 18:35:14: INFO] Estimated completion (next execution): 2019-07-26 18:50:07 (0:14:53 from now)
[2019-07-26 18:35:14: INFO] Reboot in preparation for next execution
[2019-07-26 18:39:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 18:54:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.394 s/op
Iteration   2: 16.672 s/op
Iteration   3: 17.488 s/op
Iteration   4: 17.697 s/op
Iteration   5: 17.760 s/op
Iteration   6: 17.715 s/op
Iteration   7: 17.905 s/op
Iteration   8: 17.888 s/op
Iteration   9: 17.035 s/op
Iteration  10: 17.520 s/op
Iteration  11: 17.524 s/op
Iteration  12: 17.613 s/op
Iteration  13: 17.248 s/op
Iteration  14: 17.824 s/op
Iteration  15: 17.586 s/op
Iteration  16: 17.784 s/op
Iteration  17: 17.833 s/op
Iteration  18: 17.848 s/op
Iteration  19: 17.286 s/op
Iteration  20: 17.828 s/op
Iteration  21: 17.804 s/op
Iteration  22: 17.737 s/op
Iteration  23: 17.636 s/op
Iteration  24: 17.741 s/op
Iteration  25: 17.982 s/op
Iteration  26: 17.098 s/op
Iteration  27: 17.804 s/op
Iteration  28: 17.649 s/op
Iteration  29: 17.350 s/op
Iteration  30: 17.594 s/op
Iteration  31: 17.660 s/op
Iteration  32: 17.617 s/op
Iteration  33: 17.646 s/op
Iteration  34: 17.624 s/op
Iteration  35: 17.628 s/op
Iteration  36: 17.454 s/op
Iteration  37: 17.740 s/op
Iteration  38: 17.643 s/op
Iteration  39: 17.656 s/op
Iteration  40: 17.672 s/op
Iteration  41: 17.691 s/op
Iteration  42: 17.690 s/op
Iteration  43: 17.675 s/op
Iteration  44: 17.461 s/op
Iteration  45: 17.522 s/op
Iteration  46: 17.612 s/op
Iteration  47: 17.077 s/op
Iteration  48: 17.631 s/op
Iteration  49: 17.275 s/op
Iteration  50: 17.697 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     17.590 ?(99.9%) 0.123 s/op

  Histogram, s/op:
    [16.000, 16.125) = 0 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 0 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 1 
    [16.750, 16.875) = 0 
    [16.875, 17.000) = 0 
    [17.000, 17.125) = 3 
    [17.125, 17.250) = 1 
    [17.250, 17.375) = 3 
    [17.375, 17.500) = 4 
    [17.500, 17.625) = 9 
    [17.625, 17.750) = 18 
    [17.750, 17.875) = 8 

  Percentiles, s/op:
      p(0.0000) =     16.672 s/op
     p(50.0000) =     17.645 s/op
     p(90.0000) =     17.832 s/op
     p(95.0000) =     17.896 s/op
     p(99.0000) =     17.982 s/op
     p(99.9000) =     17.982 s/op
     p(99.9900) =     17.982 s/op
     p(99.9990) =     17.982 s/op
     p(99.9999) =     17.982 s/op
    p(100.0000) =     17.982 s/op


# Run complete. Total time: 00:14:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.590 ? 0.123   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564159165986.json
{"wallclock_times": [880.8757496410001], "core_cycle_counts": [[521886240419], [1526399092804], [397080060393], [673195662096]], "aperf_counts": [[519313772202], [1526249611702], [396909810432], [673043661856]], "mperf_counts": [[519319227562], [1526249578116], [396911662042], [673043684156]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 18:54:06: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9-8u222-b10'
[2019-07-26 18:54:07: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 18:54:07: INFO] 203 executions left in scheduler queue
[2019-07-26 18:54:07: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-26 18:54:07: INFO] Estimated completion (next execution): 2019-07-26 19:11:18 (0:17:11 from now)
[2019-07-26 18:54:07: INFO] Reboot in preparation for next execution
[2019-07-26 18:59:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.818 s/op
Iteration   2: 1.591 s/op
Iteration   3: 1.575 s/op
Iteration   4: 1.670 s/op
Iteration   5: 1.574 s/op
Iteration   6: 1.577 s/op
Iteration   7: 1.585 s/op
Iteration   8: 1.579 s/op
Iteration   9: 1.576 s/op
Iteration  10: 1.571 s/op
Iteration  11: 1.574 s/op
Iteration  12: 1.568 s/op
Iteration  13: 1.564 s/op
Iteration  14: 1.571 s/op
Iteration  15: 1.570 s/op
Iteration  16: 1.571 s/op
Iteration  17: 1.568 s/op
Iteration  18: 1.577 s/op
Iteration  19: 1.572 s/op
Iteration  20: 1.575 s/op
Iteration  21: 1.572 s/op
Iteration  22: 1.575 s/op
Iteration  23: 1.567 s/op
Iteration  24: 1.570 s/op
Iteration  25: 1.576 s/op
Iteration  26: 1.578 s/op
Iteration  27: 1.572 s/op
Iteration  28: 1.569 s/op
Iteration  29: 1.566 s/op
Iteration  30: 1.569 s/op
Iteration  31: 1.571 s/op
Iteration  32: 1.579 s/op
Iteration  33: 1.576 s/op
Iteration  34: 1.565 s/op
Iteration  35: 1.573 s/op
Iteration  36: 1.574 s/op
Iteration  37: 1.581 s/op
Iteration  38: 1.569 s/op
Iteration  39: 1.571 s/op
Iteration  40: 1.573 s/op
Iteration  41: 1.568 s/op
Iteration  42: 1.575 s/op
Iteration  43: 1.573 s/op
Iteration  44: 1.577 s/op
Iteration  45: 1.568 s/op
Iteration  46: 1.569 s/op
Iteration  47: 1.571 s/op
Iteration  48: 1.567 s/op
Iteration  49: 1.572 s/op
Iteration  50: 1.571 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.580 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 33 
    [1.575, 1.600) = 15 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 1 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.564 s/op
     p(50.0000) =      1.572 s/op
     p(90.0000) =      1.581 s/op
     p(95.0000) =      1.627 s/op
     p(99.0000) =      1.818 s/op
     p(99.9000) =      1.818 s/op
     p(99.9900) =      1.818 s/op
     p(99.9990) =      1.818 s/op
     p(99.9999) =      1.818 s/op
    p(100.0000) =      1.818 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.580 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564160299518.json
{"wallclock_times": [79.880670872], "core_cycle_counts": [[63212419222], [112929667001], [52831377682], [37844564366]], "aperf_counts": [[62948609304], [112901082677], [52808247024], [37821199328]], "mperf_counts": [[62961417786], [112901289558], [52811868834], [37824143582]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 18:59:39: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-26 18:59:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 18:59:40: INFO] 202 executions left in scheduler queue
[2019-07-26 18:59:40: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-26 18:59:40: INFO] Estimated completion (next execution): 2019-07-26 19:03:30 (0:03:50 from now)
[2019-07-26 18:59:40: INFO] Reboot in preparation for next execution
[2019-07-26 19:05:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.760 s/op
Iteration   2: 1.704 s/op
Iteration   3: 1.761 s/op
Iteration   4: 1.647 s/op
Iteration   5: 1.651 s/op
Iteration   6: 1.652 s/op
Iteration   7: 1.648 s/op
Iteration   8: 1.647 s/op
Iteration   9: 1.652 s/op
Iteration  10: 1.650 s/op
Iteration  11: 1.648 s/op
Iteration  12: 1.648 s/op
Iteration  13: 1.648 s/op
Iteration  14: 1.647 s/op
Iteration  15: 1.646 s/op
Iteration  16: 1.648 s/op
Iteration  17: 1.649 s/op
Iteration  18: 1.650 s/op
Iteration  19: 1.651 s/op
Iteration  20: 1.649 s/op
Iteration  21: 1.648 s/op
Iteration  22: 1.649 s/op
Iteration  23: 1.651 s/op
Iteration  24: 1.652 s/op
Iteration  25: 1.651 s/op
Iteration  26: 1.651 s/op
Iteration  27: 1.650 s/op
Iteration  28: 1.651 s/op
Iteration  29: 1.648 s/op
Iteration  30: 1.647 s/op
Iteration  31: 1.649 s/op
Iteration  32: 1.650 s/op
Iteration  33: 1.650 s/op
Iteration  34: 1.650 s/op
Iteration  35: 1.648 s/op
Iteration  36: 1.648 s/op
Iteration  37: 1.648 s/op
Iteration  38: 1.646 s/op
Iteration  39: 1.647 s/op
Iteration  40: 1.647 s/op
Iteration  41: 1.649 s/op
Iteration  42: 1.646 s/op
Iteration  43: 1.649 s/op
Iteration  44: 1.649 s/op
Iteration  45: 1.649 s/op
Iteration  46: 1.650 s/op
Iteration  47: 1.648 s/op
Iteration  48: 1.647 s/op
Iteration  49: 1.649 s/op
Iteration  50: 1.648 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.654 ?(99.9%) 0.012 s/op

  Histogram, s/op:
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 0 
    [1.638, 1.650) = 35 
    [1.650, 1.663) = 12 
    [1.663, 1.675) = 0 
    [1.675, 1.688) = 0 
    [1.688, 1.700) = 0 
    [1.700, 1.713) = 1 
    [1.713, 1.725) = 0 
    [1.725, 1.738) = 0 
    [1.738, 1.750) = 0 
    [1.750, 1.763) = 2 
    [1.763, 1.775) = 0 
    [1.775, 1.788) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.646 s/op
     p(50.0000) =      1.649 s/op
     p(90.0000) =      1.652 s/op
     p(95.0000) =      1.730 s/op
     p(99.0000) =      1.761 s/op
     p(99.9000) =      1.761 s/op
     p(99.9900) =      1.761 s/op
     p(99.9990) =      1.761 s/op
     p(99.9999) =      1.761 s/op
    p(100.0000) =      1.761 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.654 ? 0.012   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564160644995.json
{"wallclock_times": [83.55861415999999], "core_cycle_counts": [[48553664855], [120111914727], [86922013003], [17753770502]], "aperf_counts": [[48335072036], [120092233433], [86909468734], [17736537598]], "mperf_counts": [[48353241908], [120108172516], [86910961144], [17736973178]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 19:05:28: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ce-19.1.1'
[2019-07-26 19:05:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:05:29: INFO] 201 executions left in scheduler queue
[2019-07-26 19:05:29: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-26 19:05:29: INFO] Estimated completion (next execution): 2019-07-26 19:09:23 (0:03:53 from now)
[2019-07-26 19:05:29: INFO] Reboot in preparation for next execution
[2019-07-26 19:11:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.029 s/op
Iteration   2: 1.611 s/op
Iteration   3: 1.939 s/op
Iteration   4: 2.014 s/op
Iteration   5: 1.957 s/op
Iteration   6: 1.943 s/op
Iteration   7: 1.936 s/op
Iteration   8: 1.939 s/op
Iteration   9: 1.951 s/op
Iteration  10: 1.942 s/op
Iteration  11: 1.941 s/op
Iteration  12: 1.935 s/op
Iteration  13: 1.935 s/op
Iteration  14: 1.934 s/op
Iteration  15: 1.941 s/op
Iteration  16: 1.944 s/op
Iteration  17: 1.942 s/op
Iteration  18: 1.938 s/op
Iteration  19: 1.939 s/op
Iteration  20: 1.938 s/op
Iteration  21: 1.939 s/op
Iteration  22: 1.936 s/op
Iteration  23: 1.939 s/op
Iteration  24: 1.942 s/op
Iteration  25: 1.932 s/op
Iteration  26: 1.939 s/op
Iteration  27: 1.935 s/op
Iteration  28: 1.938 s/op
Iteration  29: 1.941 s/op
Iteration  30: 1.937 s/op
Iteration  31: 1.942 s/op
Iteration  32: 1.939 s/op
Iteration  33: 1.942 s/op
Iteration  34: 1.944 s/op
Iteration  35: 1.941 s/op
Iteration  36: 1.939 s/op
Iteration  37: 1.940 s/op
Iteration  38: 1.940 s/op
Iteration  39: 1.939 s/op
Iteration  40: 1.935 s/op
Iteration  41: 1.939 s/op
Iteration  42: 1.940 s/op
Iteration  43: 1.941 s/op
Iteration  44: 1.941 s/op
Iteration  45: 1.939 s/op
Iteration  46: 1.938 s/op
Iteration  47: 1.944 s/op
Iteration  48: 1.941 s/op
Iteration  49: 1.938 s/op
Iteration  50: 1.937 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.936 ?(99.9%) 0.025 s/op

  Histogram, s/op:
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 45 
    [1.950, 2.000) = 2 
    [2.000, 2.050) = 2 

  Percentiles, s/op:
      p(0.0000) =      1.611 s/op
     p(50.0000) =      1.939 s/op
     p(90.0000) =      1.944 s/op
     p(95.0000) =      1.983 s/op
     p(99.0000) =      2.029 s/op
     p(99.9000) =      2.029 s/op
     p(99.9900) =      2.029 s/op
     p(99.9990) =      2.029 s/op
     p(99.9999) =      2.029 s/op
    p(100.0000) =      2.029 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.936 ? 0.025   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564160979759.json
{"wallclock_times": [97.69284896899998], "core_cycle_counts": [[111968140354], [53854671257], [28281525796], [133600082049]], "aperf_counts": [[111699829389], [53813579574], [28252347670], [133584515179]], "mperf_counts": [[111709466500], [53825761970], [28252509078], [133584527550]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 19:11:17: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-26 19:11:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:11:18: INFO] 200 executions left in scheduler queue
[2019-07-26 19:11:18: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-26 19:11:18: INFO] Estimated completion (next execution): 2019-07-26 19:15:26 (0:04:07 from now)
[2019-07-26 19:11:18: INFO] Reboot in preparation for next execution
[2019-07-26 19:16:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.226 s/op
Iteration   2: 1.528 s/op
Iteration   3: 1.863 s/op
Iteration   4: 1.724 s/op
Iteration   5: 1.764 s/op
Iteration   6: 1.767 s/op
Iteration   7: 1.764 s/op
Iteration   8: 1.766 s/op
Iteration   9: 1.766 s/op
Iteration  10: 1.763 s/op
Iteration  11: 1.766 s/op
Iteration  12: 1.759 s/op
Iteration  13: 1.765 s/op
Iteration  14: 1.767 s/op
Iteration  15: 1.760 s/op
Iteration  16: 1.765 s/op
Iteration  17: 1.766 s/op
Iteration  18: 1.765 s/op
Iteration  19: 1.767 s/op
Iteration  20: 1.766 s/op
Iteration  21: 1.767 s/op
Iteration  22: 1.765 s/op
Iteration  23: 1.767 s/op
Iteration  24: 1.766 s/op
Iteration  25: 1.768 s/op
Iteration  26: 1.764 s/op
Iteration  27: 1.765 s/op
Iteration  28: 1.766 s/op
Iteration  29: 1.767 s/op
Iteration  30: 1.766 s/op
Iteration  31: 1.766 s/op
Iteration  32: 1.766 s/op
Iteration  33: 1.764 s/op
Iteration  34: 1.765 s/op
Iteration  35: 1.764 s/op
Iteration  36: 1.770 s/op
Iteration  37: 1.767 s/op
Iteration  38: 1.764 s/op
Iteration  39: 1.766 s/op
Iteration  40: 1.768 s/op
Iteration  41: 1.766 s/op
Iteration  42: 1.767 s/op
Iteration  43: 1.770 s/op
Iteration  44: 1.766 s/op
Iteration  45: 1.763 s/op
Iteration  46: 1.765 s/op
Iteration  47: 1.765 s/op
Iteration  48: 1.763 s/op
Iteration  49: 1.764 s/op
Iteration  50: 1.764 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.771 ?(99.9%) 0.037 s/op

  Histogram, s/op:
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 1 
    [1.750, 1.800) = 46 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.528 s/op
     p(50.0000) =      1.766 s/op
     p(90.0000) =      1.768 s/op
     p(95.0000) =      1.812 s/op
     p(99.0000) =      2.226 s/op
     p(99.9000) =      2.226 s/op
     p(99.9900) =      2.226 s/op
     p(99.9990) =      2.226 s/op
     p(99.9999) =      2.226 s/op
    p(100.0000) =      2.226 s/op


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.771 ? 0.037   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564161328394.json
{"wallclock_times": [89.35685063300002], "core_cycle_counts": [[65000998951], [115225615297], [39230204013], [76199275061]], "aperf_counts": [[64790604342], [115201432450], [39203104684], [76183734881]], "mperf_counts": [[64804578652], [115205928392], [39206682740], [76183921874]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 19:16:57: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot-8u222-b10'
[2019-07-26 19:16:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:16:58: INFO] 199 executions left in scheduler queue
[2019-07-26 19:16:58: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-26 19:16:58: INFO] Estimated completion (next execution): 2019-07-26 19:20:58 (0:03:59 from now)
[2019-07-26 19:16:58: INFO] Reboot in preparation for next execution
[2019-07-26 19:21:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 19:22:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.726 s/op
Iteration   2: 2.345 s/op
Iteration   3: 2.420 s/op
Iteration   4: 2.304 s/op
Iteration   5: 2.063 s/op
Iteration   6: 1.877 s/op
Iteration   7: 1.869 s/op
Iteration   8: 1.860 s/op
Iteration   9: 1.848 s/op
Iteration  10: 1.854 s/op
Iteration  11: 1.840 s/op
Iteration  12: 1.863 s/op
Iteration  13: 1.834 s/op
Iteration  14: 1.844 s/op
Iteration  15: 1.837 s/op
Iteration  16: 1.834 s/op
Iteration  17: 1.854 s/op
Iteration  18: 1.849 s/op
Iteration  19: 1.844 s/op
Iteration  20: 1.838 s/op
Iteration  21: 1.835 s/op
Iteration  22: 1.846 s/op
Iteration  23: 1.840 s/op
Iteration  24: 1.841 s/op
Iteration  25: 1.845 s/op
Iteration  26: 1.856 s/op
Iteration  27: 1.838 s/op
Iteration  28: 1.834 s/op
Iteration  29: 1.847 s/op
Iteration  30: 1.856 s/op
Iteration  31: 1.850 s/op
Iteration  32: 1.836 s/op
Iteration  33: 1.813 s/op
Iteration  34: 1.824 s/op
Iteration  35: 1.855 s/op
Iteration  36: 1.837 s/op
Iteration  37: 1.841 s/op
Iteration  38: 1.830 s/op
Iteration  39: 1.861 s/op
Iteration  40: 1.808 s/op
Iteration  41: 1.847 s/op
Iteration  42: 1.862 s/op
Iteration  43: 1.825 s/op
Iteration  44: 1.854 s/op
Iteration  45: 1.853 s/op
Iteration  46: 1.855 s/op
Iteration  47: 1.864 s/op
Iteration  48: 1.857 s/op
Iteration  49: 1.826 s/op
Iteration  50: 1.861 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.898 ?(99.9%) 0.086 s/op

  Histogram, s/op:
    [1.800, 1.900) = 45 
    [1.900, 2.000) = 0 
    [2.000, 2.100) = 1 
    [2.100, 2.200) = 0 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 2 
    [2.400, 2.500) = 1 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.808 s/op
     p(50.0000) =      1.848 s/op
     p(90.0000) =      2.045 s/op
     p(95.0000) =      2.378 s/op
     p(99.0000) =      2.726 s/op
     p(99.9000) =      2.726 s/op
     p(99.9900) =      2.726 s/op
     p(99.9990) =      2.726 s/op
     p(99.9999) =      2.726 s/op
    p(100.0000) =      2.726 s/op


# Run complete. Total time: 00:01:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.898 ? 0.086   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564161669613.json
{"wallclock_times": [96.167674761], "core_cycle_counts": [[111387559562], [90274960526], [72318923589], [61544257297]], "aperf_counts": [[111078072275], [90200293934], [72248448224], [61496561895]], "mperf_counts": [[111078533084], [90201165182], [72248444020], [61499824194]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 19:22:45: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-26 19:22:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:22:46: INFO] 198 executions left in scheduler queue
[2019-07-26 19:22:46: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-26 19:22:46: INFO] Estimated completion (next execution): 2019-07-26 19:26:53 (0:04:06 from now)
[2019-07-26 19:22:46: INFO] Reboot in preparation for next execution
[2019-07-26 19:26:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 19:29:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.244 s/op
Iteration   2: 2.934 s/op
Iteration   3: 2.922 s/op
Iteration   4: 2.696 s/op
Iteration   5: 2.684 s/op
Iteration   6: 2.771 s/op
Iteration   7: 2.808 s/op
Iteration   8: 2.791 s/op
Iteration   9: 2.758 s/op
Iteration  10: 2.749 s/op
Iteration  11: 2.754 s/op
Iteration  12: 2.771 s/op
Iteration  13: 2.782 s/op
Iteration  14: 2.768 s/op
Iteration  15: 2.759 s/op
Iteration  16: 2.788 s/op
Iteration  17: 2.798 s/op
Iteration  18: 2.793 s/op
Iteration  19: 2.775 s/op
Iteration  20: 2.774 s/op
Iteration  21: 2.769 s/op
Iteration  22: 2.775 s/op
Iteration  23: 2.783 s/op
Iteration  24: 2.788 s/op
Iteration  25: 2.760 s/op
Iteration  26: 2.772 s/op
Iteration  27: 2.763 s/op
Iteration  28: 2.795 s/op
Iteration  29: 2.809 s/op
Iteration  30: 2.816 s/op
Iteration  31: 2.745 s/op
Iteration  32: 2.791 s/op
Iteration  33: 2.785 s/op
Iteration  34: 2.757 s/op
Iteration  35: 2.850 s/op
Iteration  36: 2.810 s/op
Iteration  37: 2.776 s/op
Iteration  38: 2.814 s/op
Iteration  39: 2.776 s/op
Iteration  40: 2.806 s/op
Iteration  41: 2.782 s/op
Iteration  42: 2.777 s/op
Iteration  43: 2.779 s/op
Iteration  44: 2.821 s/op
Iteration  45: 2.786 s/op
Iteration  46: 2.788 s/op
Iteration  47: 2.773 s/op
Iteration  48: 2.805 s/op
Iteration  49: 2.774 s/op
Iteration  50: 2.765 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.794 ?(99.9%) 0.038 s/op

  Histogram, s/op:
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 2 
    [2.700, 2.750) = 2 
    [2.750, 2.800) = 34 
    [2.800, 2.850) = 9 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 2 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 1 
    [3.250, 3.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.684 s/op
     p(50.0000) =      2.780 s/op
     p(90.0000) =      2.821 s/op
     p(95.0000) =      2.928 s/op
     p(99.0000) =      3.244 s/op
     p(99.9000) =      3.244 s/op
     p(99.9900) =      3.244 s/op
     p(99.9990) =      3.244 s/op
     p(99.9999) =      3.244 s/op
    p(100.0000) =      3.244 s/op


# Run complete. Total time: 00:02:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.794 ? 0.038   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564162017953.json
{"wallclock_times": [140.83690833699998], "core_cycle_counts": [[178706044886], [60815750455], [99007436384], [136265660247]], "aperf_counts": [[178381956001], [60746222578], [98943484373], [136236728931]], "mperf_counts": [[178382489014], [60746230970], [98945370606], [136237474822]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 19:29:18: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9-8u222-b10'
[2019-07-26 19:29:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:29:19: INFO] 197 executions left in scheduler queue
[2019-07-26 19:29:19: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-26 19:29:19: INFO] Estimated completion (next execution): 2019-07-26 19:34:10 (0:04:51 from now)
[2019-07-26 19:29:19: INFO] Reboot in preparation for next execution
[2019-07-26 19:33:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 19:33:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 19:33:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 19:33:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 19:33:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 19:33:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 19:35:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.832 s/op
Iteration   2: 2.408 s/op
Iteration   3: 2.283 s/op
Iteration   4: 2.337 s/op
Iteration   5: 2.171 s/op
Iteration   6: 1.969 s/op
Iteration   7: 1.956 s/op
Iteration   8: 1.892 s/op
Iteration   9: 1.953 s/op
Iteration  10: 1.897 s/op
Iteration  11: 1.899 s/op
Iteration  12: 1.920 s/op
Iteration  13: 1.912 s/op
Iteration  14: 1.904 s/op
Iteration  15: 1.913 s/op
Iteration  16: 1.837 s/op
Iteration  17: 1.852 s/op
Iteration  18: 1.924 s/op
Iteration  19: 1.911 s/op
Iteration  20: 1.916 s/op
Iteration  21: 1.902 s/op
Iteration  22: 1.929 s/op
Iteration  23: 1.914 s/op
Iteration  24: 1.911 s/op
Iteration  25: 1.877 s/op
Iteration  26: 1.926 s/op
Iteration  27: 1.915 s/op
Iteration  28: 1.928 s/op
Iteration  29: 1.933 s/op
Iteration  30: 1.886 s/op
Iteration  31: 1.882 s/op
Iteration  32: 1.900 s/op
Iteration  33: 1.909 s/op
Iteration  34: 1.907 s/op
Iteration  35: 1.890 s/op
Iteration  36: 1.889 s/op
Iteration  37: 1.928 s/op
Iteration  38: 1.902 s/op
Iteration  39: 1.903 s/op
Iteration  40: 1.878 s/op
Iteration  41: 1.927 s/op
Iteration  42: 1.917 s/op
Iteration  43: 1.911 s/op
Iteration  44: 1.908 s/op
Iteration  45: 1.921 s/op
Iteration  46: 1.912 s/op
Iteration  47: 1.937 s/op
Iteration  48: 1.924 s/op
Iteration  49: 1.878 s/op
Iteration  50: 1.900 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.959 ?(99.9%) 0.084 s/op

  Histogram, s/op:
    [1.800, 1.900) = 12 
    [1.900, 2.000) = 33 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 1 
    [2.400, 2.500) = 1 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.837 s/op
     p(50.0000) =      1.912 s/op
     p(90.0000) =      2.151 s/op
     p(95.0000) =      2.369 s/op
     p(99.0000) =      2.832 s/op
     p(99.9000) =      2.832 s/op
     p(99.9900) =      2.832 s/op
     p(99.9990) =      2.832 s/op
     p(99.9999) =      2.832 s/op
    p(100.0000) =      2.832 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.959 ? 0.084   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564162411745.json
{"wallclock_times": [99.66246742499999], "core_cycle_counts": [[93894841261], [89451540759], [103674797546], [59659938911]], "aperf_counts": [[93546135514], [89374314900], [103615919225], [59609751675]], "mperf_counts": [[93553122498], [89374869230], [103615981658], [59609843386]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 19:35:11: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-26 19:35:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:35:12: INFO] 196 executions left in scheduler queue
[2019-07-26 19:35:12: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-26 19:35:12: INFO] Estimated completion (next execution): 2019-07-26 19:39:22 (0:04:10 from now)
[2019-07-26 19:35:12: INFO] Reboot in preparation for next execution
[2019-07-26 19:39:41: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 19:39:41: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 19:39:41: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 19:39:41: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 19:39:41: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 19:39:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 19:42:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.440 s/op
Iteration   2: 3.121 s/op
Iteration   3: 3.224 s/op
Iteration   4: 3.212 s/op
Iteration   5: 2.817 s/op
Iteration   6: 2.888 s/op
Iteration   7: 2.818 s/op
Iteration   8: 2.871 s/op
Iteration   9: 2.862 s/op
Iteration  10: 2.870 s/op
Iteration  11: 2.822 s/op
Iteration  12: 2.813 s/op
Iteration  13: 2.803 s/op
Iteration  14: 2.794 s/op
Iteration  15: 2.843 s/op
Iteration  16: 2.849 s/op
Iteration  17: 2.806 s/op
Iteration  18: 2.859 s/op
Iteration  19: 2.804 s/op
Iteration  20: 2.785 s/op
Iteration  21: 2.811 s/op
Iteration  22: 2.828 s/op
Iteration  23: 2.819 s/op
Iteration  24: 2.837 s/op
Iteration  25: 2.798 s/op
Iteration  26: 2.812 s/op
Iteration  27: 2.866 s/op
Iteration  28: 2.772 s/op
Iteration  29: 2.822 s/op
Iteration  30: 2.804 s/op
Iteration  31: 2.800 s/op
Iteration  32: 2.819 s/op
Iteration  33: 2.815 s/op
Iteration  34: 2.860 s/op
Iteration  35: 2.862 s/op
Iteration  36: 2.858 s/op
Iteration  37: 2.904 s/op
Iteration  38: 2.934 s/op
Iteration  39: 2.898 s/op
Iteration  40: 2.864 s/op
Iteration  41: 2.841 s/op
Iteration  42: 2.870 s/op
Iteration  43: 2.871 s/op
Iteration  44: 2.945 s/op
Iteration  45: 2.869 s/op
Iteration  46: 2.894 s/op
Iteration  47: 2.893 s/op
Iteration  48: 2.931 s/op
Iteration  49: 2.945 s/op
Iteration  50: 2.860 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.880 ?(99.9%) 0.061 s/op

  Histogram, s/op:
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 4 
    [2.800, 2.850) = 20 
    [2.850, 2.900) = 17 
    [2.900, 2.950) = 5 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 1 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 2 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.772 s/op
     p(50.0000) =      2.859 s/op
     p(90.0000) =      2.945 s/op
     p(95.0000) =      3.218 s/op
     p(99.0000) =      3.440 s/op
     p(99.9000) =      3.440 s/op
     p(99.9900) =      3.440 s/op
     p(99.9990) =      3.440 s/op
     p(99.9999) =      3.440 s/op
    p(100.0000) =      3.440 s/op


# Run complete. Total time: 00:02:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.880 ? 0.061   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564162781840.json
{"wallclock_times": [145.538241919], "core_cycle_counts": [[222307647654], [91416056775], [74294769394], [109491310900]], "aperf_counts": [[222012229615], [91325546440], [74214533305], [109439816371]], "mperf_counts": [[222015820890], [91325972122], [74215201440], [109439813814]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 19:42:07: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_12.0.1'
[2019-07-26 19:42:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:42:08: INFO] 195 executions left in scheduler queue
[2019-07-26 19:42:08: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-07-26 19:42:08: INFO] Estimated completion (next execution): 2019-07-26 19:47:04 (0:04:56 from now)
[2019-07-26 19:42:08: INFO] Reboot in preparation for next execution
[2019-07-26 19:46:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 19:46:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 19:46:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 19:46:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 19:46:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 19:46:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.001 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 24 
    [0.000, 0.000) = 23 
    [0.000, 0.000) = 2 
    [0.000, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 1 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.001 s/op
     p(99.9000) =      0.001 s/op
     p(99.9900) =      0.001 s/op
     p(99.9990) =      0.001 s/op
     p(99.9999) =      0.001 s/op
    p(100.0000) =      0.001 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564163181103.json
{"wallclock_times": [0.962663574000004], "core_cycle_counts": [[2196469037], [1410216555], [1328860376], [1029938022]], "aperf_counts": [[2194509692], [1405162070], [1323785567], [1025731648]], "mperf_counts": [[2419563168], [1444922270], [1347012198], [1062483700]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 19:46:22: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_11.0.4'
[2019-07-26 19:46:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:46:23: INFO] 194 executions left in scheduler queue
[2019-07-26 19:46:23: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-07-26 19:46:23: INFO] Estimated completion (next execution): 2019-07-26 19:48:54 (0:02:31 from now)
[2019-07-26 19:46:23: INFO] Reboot in preparation for next execution
[2019-07-26 19:50:38: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 19:50:38: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 19:50:38: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 19:50:38: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 19:50:38: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 19:50:39: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 19:50:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.001) = 49 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 
    [0.004, 0.005) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score    Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564163438871.json
{"wallclock_times": [1.5011665010000002], "core_cycle_counts": [[3315566560], [2401277733], [2339471875], [1984000932]], "aperf_counts": [[3308865650], [2389781274], [2319565569], [1969569309]], "mperf_counts": [[3313475624], [2392903714], [2319639004], [1969575534]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 19:50:40: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_11.0.4'
[2019-07-26 19:50:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:50:41: INFO] 193 executions left in scheduler queue
[2019-07-26 19:50:41: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-26 19:50:41: INFO] Estimated completion (next execution): 2019-07-26 19:53:13 (0:02:31 from now)
[2019-07-26 19:50:41: INFO] Reboot in preparation for next execution
[2019-07-26 19:54:54: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 19:56:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.942 s/op
Iteration   2: 2.150 s/op
Iteration   3: 2.194 s/op
Iteration   4: 2.097 s/op
Iteration   5: 2.066 s/op
Iteration   6: 1.958 s/op
Iteration   7: 1.966 s/op
Iteration   8: 1.952 s/op
Iteration   9: 1.980 s/op
Iteration  10: 1.971 s/op
Iteration  11: 1.963 s/op
Iteration  12: 1.975 s/op
Iteration  13: 1.993 s/op
Iteration  14: 1.960 s/op
Iteration  15: 1.981 s/op
Iteration  16: 1.959 s/op
Iteration  17: 1.944 s/op
Iteration  18: 1.974 s/op
Iteration  19: 1.990 s/op
Iteration  20: 1.979 s/op
Iteration  21: 1.987 s/op
Iteration  22: 1.981 s/op
Iteration  23: 1.950 s/op
Iteration  24: 1.994 s/op
Iteration  25: 1.986 s/op
Iteration  26: 1.968 s/op
Iteration  27: 1.956 s/op
Iteration  28: 1.974 s/op
Iteration  29: 1.987 s/op
Iteration  30: 1.963 s/op
Iteration  31: 1.986 s/op
Iteration  32: 1.975 s/op
Iteration  33: 1.982 s/op
Iteration  34: 1.989 s/op
Iteration  35: 1.978 s/op
Iteration  36: 1.977 s/op
Iteration  37: 1.956 s/op
Iteration  38: 1.958 s/op
Iteration  39: 1.981 s/op
Iteration  40: 1.979 s/op
Iteration  41: 1.972 s/op
Iteration  42: 1.970 s/op
Iteration  43: 1.974 s/op
Iteration  44: 1.989 s/op
Iteration  45: 1.959 s/op
Iteration  46: 1.963 s/op
Iteration  47: 1.962 s/op
Iteration  48: 1.944 s/op
Iteration  49: 1.929 s/op
Iteration  50: 1.967 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.003 ?(99.9%) 0.071 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 0 
    [1.875, 2.000) = 45 
    [2.000, 2.125) = 2 
    [2.125, 2.250) = 2 
    [2.250, 2.375) = 0 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.929 s/op
     p(50.0000) =      1.975 s/op
     p(90.0000) =      2.059 s/op
     p(95.0000) =      2.170 s/op
     p(99.0000) =      2.942 s/op
     p(99.9000) =      2.942 s/op
     p(99.9900) =      2.942 s/op
     p(99.9990) =      2.942 s/op
     p(99.9999) =      2.942 s/op
    p(100.0000) =      2.942 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.003 ? 0.071   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564163694600.json
{"wallclock_times": [101.37482782700002], "core_cycle_counts": [[117476658542], [73632356362], [97041873032], [61374745736]], "aperf_counts": [[117158709937], [73561282195], [96976000333], [61314868752]], "mperf_counts": [[117160533126], [73563355162], [96977634764], [61315753228]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 19:56:35: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-26 19:56:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 19:56:36: INFO] 192 executions left in scheduler queue
[2019-07-26 19:56:36: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-26 19:56:36: INFO] Estimated completion (next execution): 2019-07-26 20:00:48 (0:04:11 from now)
[2019-07-26 19:56:36: INFO] Reboot in preparation for next execution
[2019-07-26 20:00:50: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-26 20:03:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.674 s/op
Iteration   2: 3.241 s/op
Iteration   3: 3.184 s/op
Iteration   4: 3.434 s/op
Iteration   5: 2.991 s/op
Iteration   6: 2.943 s/op
Iteration   7: 2.923 s/op
Iteration   8: 2.951 s/op
Iteration   9: 3.037 s/op
Iteration  10: 2.964 s/op
Iteration  11: 2.934 s/op
Iteration  12: 2.996 s/op
Iteration  13: 2.955 s/op
Iteration  14: 2.993 s/op
Iteration  15: 2.907 s/op
Iteration  16: 2.922 s/op
Iteration  17: 2.997 s/op
Iteration  18: 2.986 s/op
Iteration  19: 3.006 s/op
Iteration  20: 2.942 s/op
Iteration  21: 3.004 s/op
Iteration  22: 2.971 s/op
Iteration  23: 2.989 s/op
Iteration  24: 2.987 s/op
Iteration  25: 3.000 s/op
Iteration  26: 2.905 s/op
Iteration  27: 2.985 s/op
Iteration  28: 2.998 s/op
Iteration  29: 2.942 s/op
Iteration  30: 2.990 s/op
Iteration  31: 3.001 s/op
Iteration  32: 2.930 s/op
Iteration  33: 2.886 s/op
Iteration  34: 2.944 s/op
Iteration  35: 2.982 s/op
Iteration  36: 2.973 s/op
Iteration  37: 2.994 s/op
Iteration  38: 2.933 s/op
Iteration  39: 3.001 s/op
Iteration  40: 2.954 s/op
Iteration  41: 3.009 s/op
Iteration  42: 2.955 s/op
Iteration  43: 2.997 s/op
Iteration  44: 2.952 s/op
Iteration  45: 2.982 s/op
Iteration  46: 2.977 s/op
Iteration  47: 2.937 s/op
Iteration  48: 3.011 s/op
Iteration  49: 2.971 s/op
Iteration  50: 3.005 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      3.003 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 1 
    [2.900, 2.950) = 12 
    [2.950, 3.000) = 24 
    [3.000, 3.050) = 9 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 1 
    [3.200, 3.250) = 1 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 1 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.886 s/op
     p(50.0000) =      2.984 s/op
     p(90.0000) =      3.034 s/op
     p(95.0000) =      3.328 s/op
     p(99.0000) =      3.674 s/op
     p(99.9000) =      3.674 s/op
     p(99.9900) =      3.674 s/op
     p(99.9990) =      3.674 s/op
     p(99.9999) =      3.674 s/op
    p(100.0000) =      3.674 s/op


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.003 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564164050048.json
{"wallclock_times": [151.28333496099998], "core_cycle_counts": [[132264042525], [133560100951], [105539912468], [138843221482]], "aperf_counts": [[131857285033], [133501962539], [105485114022], [138811408233]], "mperf_counts": [[131860825412], [133502824796], [105492227362], [138811410618]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 20:03:21: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9-8u222-b10'
[2019-07-26 20:03:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:03:22: INFO] 191 executions left in scheduler queue
[2019-07-26 20:03:22: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:03:22: INFO] Estimated completion (next execution): 2019-07-26 20:08:23 (0:05:01 from now)
[2019-07-26 20:03:22: INFO] Reboot in preparation for next execution
[2019-07-26 20:12:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.915 s
Iteration   2: 5.810 s
Iteration   3: 5.655 s
Iteration   4: 5.692 s
Iteration   5: 5.692 s
Iteration   6: 5.701 s
Iteration   7: 5.678 s
Iteration   8: 5.675 s
Iteration   9: 5.685 s
Iteration  10: 5.682 s
Iteration  11: 5.672 s
Iteration  12: 5.678 s
Iteration  13: 5.676 s
Iteration  14: 5.682 s
Iteration  15: 5.668 s
Iteration  16: 5.675 s
Iteration  17: 5.683 s
Iteration  18: 5.699 s
Iteration  19: 5.675 s
Iteration  20: 5.678 s
Iteration  21: 5.681 s
Iteration  22: 5.672 s
Iteration  23: 5.672 s
Iteration  24: 5.672 s
Iteration  25: 5.682 s
Iteration  26: 5.676 s
Iteration  27: 5.679 s
Iteration  28: 5.681 s
Iteration  29: 5.678 s
Iteration  30: 5.681 s
Iteration  31: 5.691 s
Iteration  32: 5.661 s
Iteration  33: 5.678 s
Iteration  34: 5.671 s
Iteration  35: 5.673 s
Iteration  36: 5.680 s
Iteration  37: 5.663 s
Iteration  38: 5.686 s
Iteration  39: 5.682 s
Iteration  40: 5.687 s
Iteration  41: 5.677 s
Iteration  42: 5.672 s
Iteration  43: 5.684 s
Iteration  44: 5.681 s
Iteration  45: 5.679 s
Iteration  46: 5.687 s
Iteration  47: 5.678 s
Iteration  48: 5.655 s
Iteration  49: 5.671 s
Iteration  50: 5.655 s


Result: 5.685 ?(99.9%) 0.019 s [Average]
  Statistics: (min, avg, max) = (5.655, 5.685, 5.915), stdev = 0.039
  Confidence interval (99.9%): [5.666, 5.705]
  Samples, N = 50
        mean =      5.685 ?(99.9%) 0.019 s
         min =      5.655 s
  p( 0.0000) =      5.655 s
  p(50.0000) =      5.678 s
  p(90.0000) =      5.692 s
  p(95.0000) =      5.750 s
  p(99.0000) =      5.915 s
  p(99.9000) =      5.915 s
  p(99.9900) =      5.915 s
  p(99.9990) =      5.915 s
  p(99.9999) =      5.915 s
         max =      5.915 s


# Run complete. Total time: 00:04:45

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  5.685        0.019      s
{"wallclock_times": [285.21164428000003], "core_cycle_counts": [[221422854332], [300940177353], [217661907746], [181756701954]], "aperf_counts": [[220756264136], [300886425479], [217634694911], [181734769920]], "mperf_counts": [[220769149434], [300890468444], [217639405836], [181746228132]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 20:12:20: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:12:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:12:21: INFO] 190 executions left in scheduler queue
[2019-07-26 20:12:21: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:12:21: INFO] Estimated completion (next execution): 2019-07-26 20:19:37 (0:07:15 from now)
[2019-07-26 20:12:21: INFO] Reboot in preparation for next execution
[2019-07-26 20:19:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.870 s
Iteration   2: 3.649 s
Iteration   3: 3.523 s
Iteration   4: 3.533 s
Iteration   5: 3.488 s
Iteration   6: 3.492 s
Iteration   7: 3.505 s
Iteration   8: 3.487 s
Iteration   9: 3.494 s
Iteration  10: 3.486 s
Iteration  11: 3.508 s
Iteration  12: 3.485 s
Iteration  13: 3.481 s
Iteration  14: 3.508 s
Iteration  15: 3.486 s
Iteration  16: 3.471 s
Iteration  17: 3.466 s
Iteration  18: 3.486 s
Iteration  19: 3.486 s
Iteration  20: 3.496 s
Iteration  21: 3.482 s
Iteration  22: 3.517 s
Iteration  23: 3.499 s
Iteration  24: 3.503 s
Iteration  25: 3.511 s
Iteration  26: 3.496 s
Iteration  27: 3.519 s
Iteration  28: 3.517 s
Iteration  29: 3.489 s
Iteration  30: 3.485 s
Iteration  31: 3.493 s
Iteration  32: 3.503 s
Iteration  33: 3.498 s
Iteration  34: 3.493 s
Iteration  35: 3.506 s
Iteration  36: 3.502 s
Iteration  37: 3.490 s
Iteration  38: 3.466 s
Iteration  39: 3.495 s
Iteration  40: 3.536 s
Iteration  41: 3.505 s
Iteration  42: 3.477 s
Iteration  43: 3.524 s
Iteration  44: 3.472 s
Iteration  45: 3.488 s
Iteration  46: 3.489 s
Iteration  47: 3.473 s
Iteration  48: 3.531 s
Iteration  49: 3.493 s
Iteration  50: 3.512 s


Result: 3.507 ?(99.9%) 0.029 s [Average]
  Statistics: (min, avg, max) = (3.466, 3.507, 3.870), stdev = 0.059
  Confidence interval (99.9%): [3.478, 3.536]
  Samples, N = 50
        mean =      3.507 ?(99.9%) 0.029 s
         min =      3.466 s
  p( 0.0000) =      3.466 s
  p(50.0000) =      3.494 s
  p(90.0000) =      3.530 s
  p(95.0000) =      3.587 s
  p(99.0000) =      3.870 s
  p(99.9000) =      3.870 s
  p(99.9900) =      3.870 s
  p(99.9990) =      3.870 s
  p(99.9999) =      3.870 s
         max =      3.870 s


# Run complete. Total time: 00:02:56

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  3.507        0.029      s
{"wallclock_times": [176.41933082999998], "core_cycle_counts": [[114712045163], [193258123204], [146124191571], [121803814742]], "aperf_counts": [[114263701974], [193224262076], [146101505283], [121783599566]], "mperf_counts": [[114282509622], [193225604150], [146113918380], [121785530786]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 20:19:35: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:19:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:19:36: INFO] 189 executions left in scheduler queue
[2019-07-26 20:19:36: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:19:36: INFO] Estimated completion (next execution): 2019-07-26 20:25:02 (0:05:26 from now)
[2019-07-26 20:19:36: INFO] Reboot in preparation for next execution
[2019-07-26 20:26:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.144 s
Iteration   2: 3.677 s
Iteration   3: 3.638 s
Iteration   4: 3.637 s
Iteration   5: 3.622 s
Iteration   6: 3.668 s
Iteration   7: 3.626 s
Iteration   8: 3.624 s
Iteration   9: 3.666 s
Iteration  10: 3.632 s
Iteration  11: 3.674 s
Iteration  12: 3.638 s
Iteration  13: 3.637 s
Iteration  14: 3.688 s
Iteration  15: 3.637 s
Iteration  16: 3.636 s
Iteration  17: 3.687 s
Iteration  18: 3.639 s
Iteration  19: 3.617 s
Iteration  20: 3.695 s
Iteration  21: 3.626 s
Iteration  22: 3.621 s
Iteration  23: 3.672 s
Iteration  24: 3.626 s
Iteration  25: 3.647 s
Iteration  26: 3.705 s
Iteration  27: 3.639 s
Iteration  28: 3.641 s
Iteration  29: 3.683 s
Iteration  30: 3.631 s
Iteration  31: 3.623 s
Iteration  32: 3.682 s
Iteration  33: 3.646 s
Iteration  34: 3.659 s
Iteration  35: 3.698 s
Iteration  36: 3.639 s
Iteration  37: 3.647 s
Iteration  38: 3.699 s
Iteration  39: 3.638 s
Iteration  40: 3.632 s
Iteration  41: 3.683 s
Iteration  42: 3.634 s
Iteration  43: 3.624 s
Iteration  44: 3.696 s
Iteration  45: 3.646 s
Iteration  46: 3.635 s
Iteration  47: 3.698 s
Iteration  48: 3.642 s
Iteration  49: 3.633 s
Iteration  50: 3.733 s


Result: 3.663 ?(99.9%) 0.037 s [Average]
  Statistics: (min, avg, max) = (3.617, 3.663, 4.144), stdev = 0.075
  Confidence interval (99.9%): [3.626, 3.700]
  Samples, N = 50
        mean =      3.663 ?(99.9%) 0.037 s
         min =      3.617 s
  p( 0.0000) =      3.617 s
  p(50.0000) =      3.640 s
  p(90.0000) =      3.698 s
  p(95.0000) =      3.718 s
  p(99.0000) =      4.144 s
  p(99.9000) =      4.144 s
  p(99.9900) =      4.144 s
  p(99.9990) =      4.144 s
  p(99.9999) =      4.144 s
         max =      4.144 s


# Run complete. Total time: 00:03:04

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  3.663        0.037      s
{"wallclock_times": [184.28813762199997], "core_cycle_counts": [[126745554074], [145771016903], [178145271279], [213268790603]], "aperf_counts": [[126233427029], [145710507584], [178100609788], [213232864710]], "mperf_counts": [[126251806876], [145714749532], [178100793694], [213237238286]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 20:26:53: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:26:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:26:54: INFO] 188 executions left in scheduler queue
[2019-07-26 20:26:54: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:26:54: INFO] Estimated completion (next execution): 2019-07-26 20:32:29 (0:05:34 from now)
[2019-07-26 20:26:54: INFO] Reboot in preparation for next execution
[2019-07-26 20:39:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.430 s
Iteration   2: 10.383 s
Iteration   3: 10.255 s
Iteration   4: 10.253 s
Iteration   5: 10.295 s
Iteration   6: 10.278 s
Iteration   7: 10.236 s
Iteration   8: 10.301 s
Iteration   9: 10.259 s
Iteration  10: 10.275 s
Iteration  11: 10.269 s
Iteration  12: 10.256 s
Iteration  13: 10.260 s
Iteration  14: 10.277 s
Iteration  15: 10.284 s
Iteration  16: 10.254 s
Iteration  17: 10.256 s
Iteration  18: 10.235 s
Iteration  19: 10.250 s
Iteration  20: 10.230 s
Iteration  21: 10.230 s
Iteration  22: 10.275 s
Iteration  23: 10.435 s
Iteration  24: 10.232 s
Iteration  25: 10.250 s
Iteration  26: 10.254 s
Iteration  27: 10.253 s
Iteration  28: 10.260 s
Iteration  29: 10.255 s
Iteration  30: 10.258 s
Iteration  31: 10.273 s
Iteration  32: 10.250 s
Iteration  33: 10.247 s
Iteration  34: 10.227 s
Iteration  35: 10.260 s
Iteration  36: 10.277 s
Iteration  37: 10.256 s
Iteration  38: 10.228 s
Iteration  39: 10.255 s
Iteration  40: 10.254 s
Iteration  41: 10.263 s
Iteration  42: 10.230 s
Iteration  43: 10.295 s
Iteration  44: 10.247 s
Iteration  45: 10.221 s
Iteration  46: 10.307 s
Iteration  47: 10.241 s
Iteration  48: 10.230 s
Iteration  49: 10.252 s
Iteration  50: 10.262 s


Result: 10.266 ?(99.9%) 0.021 s [Average]
  Statistics: (min, avg, max) = (10.221, 10.266, 10.435), stdev = 0.043
  Confidence interval (99.9%): [10.245, 10.288]
  Samples, N = 50
        mean =     10.266 ?(99.9%) 0.021 s
         min =     10.221 s
  p( 0.0000) =     10.221 s
  p(50.0000) =     10.255 s
  p(90.0000) =     10.301 s
  p(95.0000) =     10.404 s
  p(99.0000) =     10.435 s
  p(99.9000) =     10.435 s
  p(99.9900) =     10.435 s
  p(99.9990) =     10.435 s
  p(99.9999) =     10.435 s
         max =     10.435 s


# Run complete. Total time: 00:08:34

Benchmark                                                                           (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  10.266        0.021      s
{"wallclock_times": [514.317002922], "core_cycle_counts": [[442131349096], [362175238058], [516654187810], [334970548202]], "aperf_counts": [[440970479502], [362094611573], [516608042896], [334945935358]], "mperf_counts": [[440987520748], [362099121658], [516610180588], [334951483380]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 20:39:41: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ce-19.1.1'
[2019-07-26 20:39:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:39:42: INFO] 187 executions left in scheduler queue
[2019-07-26 20:39:42: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-26 20:39:42: INFO] Estimated completion (next execution): 2019-07-26 20:50:46 (0:11:04 from now)
[2019-07-26 20:39:42: INFO] Reboot in preparation for next execution
[2019-07-26 20:43:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 20:43:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 20:43:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 20:43:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 20:43:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 20:43:56: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 20:45:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.915 s/op
Iteration   2: 2.168 s/op
Iteration   3: 2.218 s/op
Iteration   4: 1.999 s/op
Iteration   5: 2.110 s/op
Iteration   6: 1.943 s/op
Iteration   7: 1.949 s/op
Iteration   8: 1.951 s/op
Iteration   9: 1.938 s/op
Iteration  10: 1.931 s/op
Iteration  11: 1.903 s/op
Iteration  12: 1.920 s/op
Iteration  13: 1.910 s/op
Iteration  14: 1.887 s/op
Iteration  15: 1.866 s/op
Iteration  16: 1.921 s/op
Iteration  17: 1.916 s/op
Iteration  18: 1.912 s/op
Iteration  19: 1.926 s/op
Iteration  20: 1.888 s/op
Iteration  21: 1.904 s/op
Iteration  22: 1.879 s/op
Iteration  23: 1.893 s/op
Iteration  24: 1.908 s/op
Iteration  25: 1.876 s/op
Iteration  26: 1.902 s/op
Iteration  27: 1.891 s/op
Iteration  28: 1.867 s/op
Iteration  29: 1.907 s/op
Iteration  30: 1.897 s/op
Iteration  31: 1.908 s/op
Iteration  32: 1.893 s/op
Iteration  33: 1.896 s/op
Iteration  34: 1.902 s/op
Iteration  35: 1.918 s/op
Iteration  36: 1.896 s/op
Iteration  37: 1.896 s/op
Iteration  38: 1.914 s/op
Iteration  39: 1.900 s/op
Iteration  40: 1.885 s/op
Iteration  41: 1.866 s/op
Iteration  42: 1.894 s/op
Iteration  43: 1.897 s/op
Iteration  44: 1.892 s/op
Iteration  45: 1.913 s/op
Iteration  46: 1.909 s/op
Iteration  47: 1.907 s/op
Iteration  48: 1.893 s/op
Iteration  49: 1.890 s/op
Iteration  50: 1.902 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.941 ?(99.9%) 0.077 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 3 
    [1.875, 2.000) = 43 
    [2.000, 2.125) = 1 
    [2.125, 2.250) = 2 
    [2.250, 2.375) = 0 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.866 s/op
     p(50.0000) =      1.904 s/op
     p(90.0000) =      1.994 s/op
     p(95.0000) =      2.190 s/op
     p(99.0000) =      2.915 s/op
     p(99.9000) =      2.915 s/op
     p(99.9900) =      2.915 s/op
     p(99.9990) =      2.915 s/op
     p(99.9999) =      2.915 s/op
    p(100.0000) =      2.915 s/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.941 ? 0.077   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564166635924.json
{"wallclock_times": [98.69127262200001], "core_cycle_counts": [[166779393772], [59617630867], [68135690279], [50918014555]], "aperf_counts": [[166553749062], [59531018306], [68058857003], [50823967685]], "mperf_counts": [[166564347368], [59531249544], [68058841504], [50827767788]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 20:45:34: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-26 20:45:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:45:35: INFO] 186 executions left in scheduler queue
[2019-07-26 20:45:35: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-26 20:45:35: INFO] Estimated completion (next execution): 2019-07-26 20:49:44 (0:04:09 from now)
[2019-07-26 20:45:35: INFO] Reboot in preparation for next execution
[2019-07-26 20:49:49: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 20:49:49: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 20:49:49: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 20:49:49: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 20:49:49: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 20:49:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 20:52:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.562 s/op
Iteration   2: 3.264 s/op
Iteration   3: 3.588 s/op
Iteration   4: 2.885 s/op
Iteration   5: 2.914 s/op
Iteration   6: 2.867 s/op
Iteration   7: 2.855 s/op
Iteration   8: 2.857 s/op
Iteration   9: 2.820 s/op
Iteration  10: 2.835 s/op
Iteration  11: 2.804 s/op
Iteration  12: 2.812 s/op
Iteration  13: 2.837 s/op
Iteration  14: 2.849 s/op
Iteration  15: 2.819 s/op
Iteration  16: 2.837 s/op
Iteration  17: 2.807 s/op
Iteration  18: 2.848 s/op
Iteration  19: 2.775 s/op
Iteration  20: 2.825 s/op
Iteration  21: 2.805 s/op
Iteration  22: 2.818 s/op
Iteration  23: 2.799 s/op
Iteration  24: 2.786 s/op
Iteration  25: 2.810 s/op
Iteration  26: 2.840 s/op
Iteration  27: 2.839 s/op
Iteration  28: 2.821 s/op
Iteration  29: 2.912 s/op
Iteration  30: 2.980 s/op
Iteration  31: 3.054 s/op
Iteration  32: 3.028 s/op
Iteration  33: 3.053 s/op
Iteration  34: 3.065 s/op
Iteration  35: 3.064 s/op
Iteration  36: 3.026 s/op
Iteration  37: 2.973 s/op
Iteration  38: 3.029 s/op
Iteration  39: 3.028 s/op
Iteration  40: 2.989 s/op
Iteration  41: 3.038 s/op
Iteration  42: 3.036 s/op
Iteration  43: 3.086 s/op
Iteration  44: 2.981 s/op
Iteration  45: 3.069 s/op
Iteration  46: 2.997 s/op
Iteration  47: 3.048 s/op
Iteration  48: 3.000 s/op
Iteration  49: 2.998 s/op
Iteration  50: 2.980 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.952 ?(99.9%) 0.084 s/op

  Histogram, s/op:
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 3 
    [2.800, 2.850) = 17 
    [2.850, 2.900) = 4 
    [2.900, 2.950) = 2 
    [2.950, 3.000) = 7 
    [3.000, 3.050) = 8 
    [3.050, 3.100) = 6 
    [3.100, 3.150) = 0 
    [3.150, 3.200) = 0 
    [3.200, 3.250) = 0 
    [3.250, 3.300) = 1 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.775 s/op
     p(50.0000) =      2.913 s/op
     p(90.0000) =      3.068 s/op
     p(95.0000) =      3.398 s/op
     p(99.0000) =      3.588 s/op
     p(99.9000) =      3.588 s/op
     p(99.9900) =      3.588 s/op
     p(99.9990) =      3.588 s/op
     p(99.9999) =      3.588 s/op
    p(100.0000) =      3.588 s/op


# Run complete. Total time: 00:02:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.952 ? 0.084   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564166989411.json
{"wallclock_times": [149.08912180400003], "core_cycle_counts": [[183869367018], [92057936528], [124602350803], [110391754657]], "aperf_counts": [[183529750319], [91988047045], [124522771184], [110333256110]], "mperf_counts": [[183535162242], [91988032112], [124523334066], [110334055350]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 20:52:18: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_11.0.4'
[2019-07-26 20:52:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:52:19: INFO] 185 executions left in scheduler queue
[2019-07-26 20:52:19: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-26 20:52:19: INFO] Estimated completion (next execution): 2019-07-26 20:57:19 (0:04:59 from now)
[2019-07-26 20:52:19: INFO] Reboot in preparation for next execution
[2019-07-26 20:56:46: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 20:56:46: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 20:56:46: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 20:56:46: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 20:56:46: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 20:56:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 20:58:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.973 s/op
Iteration   2: 2.429 s/op
Iteration   3: 2.388 s/op
Iteration   4: 2.498 s/op
Iteration   5: 2.323 s/op
Iteration   6: 2.255 s/op
Iteration   7: 2.286 s/op
Iteration   8: 2.230 s/op
Iteration   9: 2.262 s/op
Iteration  10: 2.276 s/op
Iteration  11: 2.235 s/op
Iteration  12: 2.218 s/op
Iteration  13: 2.230 s/op
Iteration  14: 2.227 s/op
Iteration  15: 2.197 s/op
Iteration  16: 2.236 s/op
Iteration  17: 2.247 s/op
Iteration  18: 2.232 s/op
Iteration  19: 2.190 s/op
Iteration  20: 2.222 s/op
Iteration  21: 2.222 s/op
Iteration  22: 2.233 s/op
Iteration  23: 2.212 s/op
Iteration  24: 2.230 s/op
Iteration  25: 2.243 s/op
Iteration  26: 2.249 s/op
Iteration  27: 2.256 s/op
Iteration  28: 2.222 s/op
Iteration  29: 2.224 s/op
Iteration  30: 2.260 s/op
Iteration  31: 2.283 s/op
Iteration  32: 2.298 s/op
Iteration  33: 2.286 s/op
Iteration  34: 2.255 s/op
Iteration  35: 2.277 s/op
Iteration  36: 2.296 s/op
Iteration  37: 2.268 s/op
Iteration  38: 2.315 s/op
Iteration  39: 2.273 s/op
Iteration  40: 2.297 s/op
Iteration  41: 2.280 s/op
Iteration  42: 2.272 s/op
Iteration  43: 2.267 s/op
Iteration  44: 2.296 s/op
Iteration  45: 2.295 s/op
Iteration  46: 2.285 s/op
Iteration  47: 2.273 s/op
Iteration  48: 2.253 s/op
Iteration  49: 2.205 s/op
Iteration  50: 2.199 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.280 ?(99.9%) 0.057 s/op

  Histogram, s/op:
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 3 
    [2.200, 2.250) = 18 
    [2.250, 2.300) = 23 
    [2.300, 2.350) = 2 
    [2.350, 2.400) = 1 
    [2.400, 2.450) = 1 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.190 s/op
     p(50.0000) =      2.258 s/op
     p(90.0000) =      2.322 s/op
     p(95.0000) =      2.460 s/op
     p(99.0000) =      2.973 s/op
     p(99.9000) =      2.973 s/op
     p(99.9900) =      2.973 s/op
     p(99.9990) =      2.973 s/op
     p(99.9999) =      2.973 s/op
    p(100.0000) =      2.973 s/op


# Run complete. Total time: 00:01:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.280 ? 0.057   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564167406823.json
{"wallclock_times": [115.64755478799998], "core_cycle_counts": [[160943404319], [47426957811], [94108347150], [94566655004]], "aperf_counts": [[160635609279], [47345927177], [94023449142], [94500329072]], "mperf_counts": [[160637797234], [47345921150], [94023447822], [94500323016]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 20:58:42: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-26 20:58:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 20:58:43: INFO] 184 executions left in scheduler queue
[2019-07-26 20:58:43: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-26 20:58:43: INFO] Estimated completion (next execution): 2019-07-26 21:03:09 (0:04:26 from now)
[2019-07-26 20:58:43: INFO] Reboot in preparation for next execution
[2019-07-26 21:02:55: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 21:02:55: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 21:02:55: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 21:02:55: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 21:02:55: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 21:02:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-26 21:05:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.004 s/op
Iteration   2: 2.807 s/op
Iteration   3: 2.679 s/op
Iteration   4: 2.521 s/op
Iteration   5: 2.478 s/op
Iteration   6: 2.515 s/op
Iteration   7: 2.509 s/op
Iteration   8: 2.444 s/op
Iteration   9: 2.479 s/op
Iteration  10: 2.482 s/op
Iteration  11: 2.453 s/op
Iteration  12: 2.470 s/op
Iteration  13: 2.475 s/op
Iteration  14: 2.425 s/op
Iteration  15: 2.418 s/op
Iteration  16: 2.414 s/op
Iteration  17: 2.440 s/op
Iteration  18: 2.459 s/op
Iteration  19: 2.469 s/op
Iteration  20: 2.428 s/op
Iteration  21: 2.434 s/op
Iteration  22: 2.465 s/op
Iteration  23: 2.439 s/op
Iteration  24: 2.458 s/op
Iteration  25: 2.457 s/op
Iteration  26: 2.451 s/op
Iteration  27: 2.440 s/op
Iteration  28: 2.419 s/op
Iteration  29: 2.464 s/op
Iteration  30: 2.432 s/op
Iteration  31: 2.464 s/op
Iteration  32: 2.455 s/op
Iteration  33: 2.450 s/op
Iteration  34: 2.470 s/op
Iteration  35: 2.462 s/op
Iteration  36: 2.466 s/op
Iteration  37: 2.446 s/op
Iteration  38: 2.451 s/op
Iteration  39: 2.403 s/op
Iteration  40: 2.434 s/op
Iteration  41: 2.451 s/op
Iteration  42: 2.449 s/op
Iteration  43: 2.408 s/op
Iteration  44: 2.437 s/op
Iteration  45: 2.456 s/op
Iteration  46: 2.455 s/op
Iteration  47: 2.441 s/op
Iteration  48: 2.444 s/op
Iteration  49: 2.429 s/op
Iteration  50: 2.454 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.475 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [2.400, 2.450) = 20 
    [2.450, 2.500) = 24 
    [2.500, 2.550) = 3 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 1 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 1 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.403 s/op
     p(50.0000) =      2.454 s/op
     p(90.0000) =      2.514 s/op
     p(95.0000) =      2.737 s/op
     p(99.0000) =      3.004 s/op
     p(99.9000) =      3.004 s/op
     p(99.9900) =      3.004 s/op
     p(99.9990) =      3.004 s/op
     p(99.9999) =      3.004 s/op
    p(100.0000) =      3.004 s/op


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.475 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564167775662.json
{"wallclock_times": [125.25646823400001], "core_cycle_counts": [[122953611850], [110657521672], [83407689135], [112542176990]], "aperf_counts": [[122615546620], [110598213187], [83344526505], [112502176631]], "mperf_counts": [[122621628288], [110598990998], [83347778228], [112504693666]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 21:05:00: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_12.0.1'
[2019-07-26 21:05:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 21:05:01: INFO] 183 executions left in scheduler queue
[2019-07-26 21:05:01: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-26 21:05:01: INFO] Estimated completion (next execution): 2019-07-26 21:09:37 (0:04:35 from now)
[2019-07-26 21:05:01: INFO] Reboot in preparation for next execution
[2019-07-26 21:09:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 21:09:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 21:09:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 21:09:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 21:09:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 21:09:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 21:10:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.960 s/op
Iteration   2: 2.346 s/op
Iteration   3: 2.196 s/op
Iteration   4: 2.089 s/op
Iteration   5: 1.967 s/op
Iteration   6: 1.868 s/op
Iteration   7: 1.866 s/op
Iteration   8: 1.896 s/op
Iteration   9: 1.905 s/op
Iteration  10: 1.892 s/op
Iteration  11: 1.933 s/op
Iteration  12: 1.896 s/op
Iteration  13: 1.906 s/op
Iteration  14: 1.914 s/op
Iteration  15: 1.891 s/op
Iteration  16: 1.911 s/op
Iteration  17: 1.905 s/op
Iteration  18: 1.936 s/op
Iteration  19: 1.904 s/op
Iteration  20: 1.898 s/op
Iteration  21: 1.918 s/op
Iteration  22: 1.921 s/op
Iteration  23: 1.902 s/op
Iteration  24: 1.942 s/op
Iteration  25: 1.916 s/op
Iteration  26: 1.909 s/op
Iteration  27: 1.922 s/op
Iteration  28: 1.917 s/op
Iteration  29: 1.922 s/op
Iteration  30: 1.922 s/op
Iteration  31: 1.918 s/op
Iteration  32: 1.921 s/op
Iteration  33: 1.925 s/op
Iteration  34: 1.942 s/op
Iteration  35: 1.941 s/op
Iteration  36: 1.926 s/op
Iteration  37: 1.912 s/op
Iteration  38: 1.890 s/op
Iteration  39: 1.915 s/op
Iteration  40: 1.917 s/op
Iteration  41: 1.920 s/op
Iteration  42: 1.907 s/op
Iteration  43: 1.925 s/op
Iteration  44: 1.894 s/op
Iteration  45: 1.922 s/op
Iteration  46: 1.918 s/op
Iteration  47: 1.940 s/op
Iteration  48: 1.914 s/op
Iteration  49: 1.939 s/op
Iteration  50: 1.897 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.953 ?(99.9%) 0.082 s/op

  Histogram, s/op:
    [1.000, 1.125) = 0 
    [1.125, 1.250) = 0 
    [1.250, 1.375) = 0 
    [1.375, 1.500) = 0 
    [1.500, 1.625) = 0 
    [1.625, 1.750) = 0 
    [1.750, 1.875) = 2 
    [1.875, 2.000) = 44 
    [2.000, 2.125) = 1 
    [2.125, 2.250) = 1 
    [2.250, 2.375) = 1 
    [2.375, 2.500) = 0 
    [2.500, 2.625) = 0 
    [2.625, 2.750) = 0 
    [2.750, 2.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.866 s/op
     p(50.0000) =      1.917 s/op
     p(90.0000) =      1.965 s/op
     p(95.0000) =      2.264 s/op
     p(99.0000) =      2.960 s/op
     p(99.9000) =      2.960 s/op
     p(99.9900) =      2.960 s/op
     p(99.9990) =      2.960 s/op
     p(99.9999) =      2.960 s/op
    p(100.0000) =      2.960 s/op


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.953 ? 0.082   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564168153795.json
{"wallclock_times": [99.29256453100001], "core_cycle_counts": [[114696702950], [103169559609], [85715025076], [45582836457]], "aperf_counts": [[114382424547], [103114495798], [85648271798], [45500331542]], "mperf_counts": [[114389356394], [103114677794], [85648348812], [45500346482]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 21:10:53: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-26 21:10:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 21:10:54: INFO] 182 executions left in scheduler queue
[2019-07-26 21:10:54: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-26 21:10:54: INFO] Estimated completion (next execution): 2019-07-26 21:15:03 (0:04:09 from now)
[2019-07-26 21:10:54: INFO] Reboot in preparation for next execution
[2019-07-26 21:15:05: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 21:15:05: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 21:15:05: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 21:15:05: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 21:15:05: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 21:15:06: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 21:17:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.381 s/op
Iteration   2: 2.840 s/op
Iteration   3: 2.679 s/op
Iteration   4: 2.524 s/op
Iteration   5: 2.554 s/op
Iteration   6: 2.528 s/op
Iteration   7: 2.616 s/op
Iteration   8: 2.567 s/op
Iteration   9: 2.605 s/op
Iteration  10: 2.590 s/op
Iteration  11: 2.562 s/op
Iteration  12: 2.538 s/op
Iteration  13: 2.600 s/op
Iteration  14: 2.551 s/op
Iteration  15: 2.530 s/op
Iteration  16: 2.549 s/op
Iteration  17: 2.549 s/op
Iteration  18: 2.536 s/op
Iteration  19: 2.597 s/op
Iteration  20: 2.598 s/op
Iteration  21: 2.608 s/op
Iteration  22: 2.535 s/op
Iteration  23: 2.489 s/op
Iteration  24: 2.566 s/op
Iteration  25: 2.586 s/op
Iteration  26: 2.532 s/op
Iteration  27: 2.487 s/op
Iteration  28: 2.559 s/op
Iteration  29: 2.495 s/op
Iteration  30: 2.582 s/op
Iteration  31: 2.555 s/op
Iteration  32: 2.585 s/op
Iteration  33: 2.511 s/op
Iteration  34: 2.595 s/op
Iteration  35: 2.584 s/op
Iteration  36: 2.510 s/op
Iteration  37: 2.502 s/op
Iteration  38: 2.511 s/op
Iteration  39: 2.581 s/op
Iteration  40: 2.524 s/op
Iteration  41: 2.535 s/op
Iteration  42: 2.576 s/op
Iteration  43: 2.563 s/op
Iteration  44: 2.539 s/op
Iteration  45: 2.497 s/op
Iteration  46: 2.578 s/op
Iteration  47: 2.492 s/op
Iteration  48: 2.508 s/op
Iteration  49: 2.585 s/op
Iteration  50: 2.533 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.576 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [2.400, 2.500) = 5 
    [2.500, 2.600) = 38 
    [2.600, 2.700) = 5 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 
    [2.900, 3.000) = 0 
    [3.000, 3.100) = 0 
    [3.100, 3.200) = 0 
    [3.200, 3.300) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.487 s/op
     p(50.0000) =      2.554 s/op
     p(90.0000) =      2.607 s/op
     p(95.0000) =      2.752 s/op
     p(99.0000) =      3.381 s/op
     p(99.9000) =      3.381 s/op
     p(99.9900) =      3.381 s/op
     p(99.9990) =      3.381 s/op
     p(99.9999) =      3.381 s/op
    p(100.0000) =      3.381 s/op


# Run complete. Total time: 00:02:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.576 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564168505836.json
{"wallclock_times": [130.288371721], "core_cycle_counts": [[132077281787], [141454584811], [121315948181], [51227520650]], "aperf_counts": [[131735136076], [141390677854], [121251078038], [51181175159]], "mperf_counts": [[131738027266], [141394422088], [121251078210], [51181181878]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 21:17:16: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_openj9_11.0.4'
[2019-07-26 21:17:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 21:17:17: INFO] 181 executions left in scheduler queue
[2019-07-26 21:17:17: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 21:17:17: INFO] Estimated completion (next execution): 2019-07-26 21:21:57 (0:04:40 from now)
[2019-07-26 21:17:17: INFO] Reboot in preparation for next execution
[2019-07-26 21:30:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.588 s
Iteration   2: 11.313 s
Iteration   3: 11.003 s
Iteration   4: 10.772 s
Iteration   5: 10.741 s
Iteration   6: 10.772 s
Iteration   7: 10.784 s
Iteration   8: 10.761 s
Iteration   9: 10.773 s
Iteration  10: 10.769 s
Iteration  11: 10.773 s
Iteration  12: 10.774 s
Iteration  13: 10.772 s
Iteration  14: 10.808 s
Iteration  15: 10.795 s
Iteration  16: 10.781 s
Iteration  17: 10.786 s
Iteration  18: 10.747 s
Iteration  19: 10.754 s
Iteration  20: 10.781 s
Iteration  21: 10.762 s
Iteration  22: 10.765 s
Iteration  23: 10.805 s
Iteration  24: 10.808 s
Iteration  25: 10.770 s
Iteration  26: 10.775 s
Iteration  27: 10.826 s
Iteration  28: 10.756 s
Iteration  29: 10.742 s
Iteration  30: 10.790 s
Iteration  31: 10.766 s
Iteration  32: 10.810 s
Iteration  33: 10.761 s
Iteration  34: 10.767 s
Iteration  35: 10.762 s
Iteration  36: 10.762 s
Iteration  37: 10.776 s
Iteration  38: 10.756 s
Iteration  39: 10.762 s
Iteration  40: 10.804 s
Iteration  41: 10.773 s
Iteration  42: 10.768 s
Iteration  43: 10.769 s
Iteration  44: 10.773 s
Iteration  45: 10.785 s
Iteration  46: 10.781 s
Iteration  47: 10.781 s
Iteration  48: 10.790 s
Iteration  49: 10.782 s
Iteration  50: 10.788 s


Result: 10.787 ?(99.9%) 0.044 s [Average]
  Statistics: (min, avg, max) = (10.588, 10.787, 11.313), stdev = 0.088
  Confidence interval (99.9%): [10.743, 10.831]
  Samples, N = 50
        mean =     10.787 ?(99.9%) 0.044 s
         min =     10.588 s
  p( 0.0000) =     10.588 s
  p(50.0000) =     10.773 s
  p(90.0000) =     10.808 s
  p(95.0000) =     10.906 s
  p(99.0000) =     11.313 s
  p(99.9000) =     11.313 s
  p(99.9900) =     11.313 s
  p(99.9990) =     11.313 s
  p(99.9999) =     11.313 s
         max =     11.313 s


# Run complete. Total time: 00:09:00

Benchmark                                                                                (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  10.787        0.044      s
{"wallclock_times": [540.4065594409999], "core_cycle_counts": [[144000286532], [406342435425], [824859831709], [371493166696]], "aperf_counts": [[142423364240], [406258287789], [824829213057], [371427618966]], "mperf_counts": [[142949907726], [406305002676], [824854818068], [371488327222]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 21:30:29: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 21:30:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 21:30:30: INFO] 180 executions left in scheduler queue
[2019-07-26 21:30:30: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 21:30:30: INFO] Estimated completion (next execution): 2019-07-26 21:42:01 (0:11:30 from now)
[2019-07-26 21:30:30: INFO] Reboot in preparation for next execution
[2019-07-26 21:40:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.535 s
Iteration   2: 7.455 s
Iteration   3: 7.357 s
Iteration   4: 7.645 s
Iteration   5: 7.419 s
Iteration   6: 7.412 s
Iteration   7: 7.416 s
Iteration   8: 7.392 s
Iteration   9: 7.297 s
Iteration  10: 7.434 s
Iteration  11: 7.130 s
Iteration  12: 7.429 s
Iteration  13: 7.414 s
Iteration  14: 7.390 s
Iteration  15: 7.399 s
Iteration  16: 7.401 s
Iteration  17: 7.395 s
Iteration  18: 6.569 s
Iteration  19: 7.407 s
Iteration  20: 7.414 s
Iteration  21: 7.422 s
Iteration  22: 7.380 s
Iteration  23: 7.399 s
Iteration  24: 7.419 s
Iteration  25: 7.444 s
Iteration  26: 7.421 s
Iteration  27: 7.403 s
Iteration  28: 7.399 s
Iteration  29: 7.414 s
Iteration  30: 7.398 s
Iteration  31: 7.417 s
Iteration  32: 7.430 s
Iteration  33: 7.199 s
Iteration  34: 7.447 s
Iteration  35: 7.420 s
Iteration  36: 6.851 s
Iteration  37: 7.472 s
Iteration  38: 7.409 s
Iteration  39: 7.429 s
Iteration  40: 7.431 s
Iteration  41: 7.411 s
Iteration  42: 7.425 s
Iteration  43: 7.443 s
Iteration  44: 7.408 s
Iteration  45: 7.406 s
Iteration  46: 7.252 s
Iteration  47: 7.407 s
Iteration  48: 7.417 s
Iteration  49: 7.423 s
Iteration  50: 7.432 s


Result: 7.379 ?(99.9%) 0.078 s [Average]
  Statistics: (min, avg, max) = (6.569, 7.379, 7.645), stdev = 0.158
  Confidence interval (99.9%): [7.301, 7.457]
  Samples, N = 50
        mean =      7.379 ?(99.9%) 0.078 s
         min =      6.569 s
  p( 0.0000) =      6.569 s
  p(50.0000) =      7.414 s
  p(90.0000) =      7.447 s
  p(95.0000) =      7.500 s
  p(99.0000) =      7.645 s
  p(99.9000) =      7.645 s
  p(99.9900) =      7.645 s
  p(99.9990) =      7.645 s
  p(99.9999) =      7.645 s
         max =      7.645 s


# Run complete. Total time: 00:06:09

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  7.379        0.078      s
{"wallclock_times": [370.07045015100005], "core_cycle_counts": [[242269378383], [304023351898], [283146379907], [235733191405]], "aperf_counts": [[241311593529], [303941192392], [283114270224], [235691983973]], "mperf_counts": [[273101634280], [346290975500], [318873357252], [265490521924]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 21:40:53: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 21:40:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 21:40:54: INFO] 179 executions left in scheduler queue
[2019-07-26 21:40:54: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 21:40:54: INFO] Estimated completion (next execution): 2019-07-26 21:49:34 (0:08:40 from now)
[2019-07-26 21:40:54: INFO] Reboot in preparation for next execution
[2019-07-26 21:50:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.371 s
Iteration   2: 7.111 s
Iteration   3: 7.482 s
Iteration   4: 6.983 s
Iteration   5: 6.942 s
Iteration   6: 6.982 s
Iteration   7: 6.899 s
Iteration   8: 7.025 s
Iteration   9: 7.015 s
Iteration  10: 6.907 s
Iteration  11: 7.031 s
Iteration  12: 6.915 s
Iteration  13: 7.034 s
Iteration  14: 7.059 s
Iteration  15: 6.879 s
Iteration  16: 7.054 s
Iteration  17: 6.891 s
Iteration  18: 7.009 s
Iteration  19: 7.059 s
Iteration  20: 6.910 s
Iteration  21: 7.022 s
Iteration  22: 7.043 s
Iteration  23: 6.883 s
Iteration  24: 7.023 s
Iteration  25: 7.016 s
Iteration  26: 6.986 s
Iteration  27: 6.993 s
Iteration  28: 6.973 s
Iteration  29: 6.982 s
Iteration  30: 6.961 s
Iteration  31: 6.961 s
Iteration  32: 7.045 s
Iteration  33: 6.941 s
Iteration  34: 6.880 s
Iteration  35: 7.010 s
Iteration  36: 7.018 s
Iteration  37: 6.907 s
Iteration  38: 7.008 s
Iteration  39: 6.892 s
Iteration  40: 7.033 s
Iteration  41: 7.026 s
Iteration  42: 6.894 s
Iteration  43: 7.025 s
Iteration  44: 6.894 s
Iteration  45: 7.012 s
Iteration  46: 7.028 s
Iteration  47: 6.902 s
Iteration  48: 7.024 s
Iteration  49: 7.009 s
Iteration  50: 6.891 s


Result: 6.997 ?(99.9%) 0.053 s [Average]
  Statistics: (min, avg, max) = (6.879, 6.997, 7.482), stdev = 0.108
  Confidence interval (99.9%): [6.943, 7.050]
  Samples, N = 50
        mean =      6.997 ?(99.9%) 0.053 s
         min =      6.879 s
  p( 0.0000) =      6.879 s
  p(50.0000) =      7.009 s
  p(90.0000) =      7.059 s
  p(95.0000) =      7.228 s
  p(99.0000) =      7.482 s
  p(99.9000) =      7.482 s
  p(99.9900) =      7.482 s
  p(99.9990) =      7.482 s
  p(99.9999) =      7.482 s
         max =      7.482 s


# Run complete. Total time: 00:05:50

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.997        0.053      s
{"wallclock_times": [351.03652955499996], "core_cycle_counts": [[314436772640], [265837891438], [359451768489], [305461298205]], "aperf_counts": [[313584889765], [265750812431], [359390628456], [305416996598]], "mperf_counts": [[314851831500], [266173563822], [359536843144], [305547178292]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 21:50:58: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 21:50:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 21:50:59: INFO] 178 executions left in scheduler queue
[2019-07-26 21:50:59: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 21:50:59: INFO] Estimated completion (next execution): 2019-07-26 21:59:20 (0:08:21 from now)
[2019-07-26 21:50:59: INFO] Reboot in preparation for next execution
[2019-07-26 22:09:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 22.025 s
Iteration   2: 16.776 s
Iteration   3: 16.709 s
Iteration   4: 16.692 s
Iteration   5: 16.524 s
Iteration   6: 16.602 s
Iteration   7: 16.502 s
Iteration   8: 16.549 s
Iteration   9: 16.553 s
Iteration  10: 16.499 s
Iteration  11: 16.504 s
Iteration  12: 16.528 s
Iteration  13: 16.478 s
Iteration  14: 16.559 s
Iteration  15: 16.491 s
Iteration  16: 16.508 s
Iteration  17: 16.505 s
Iteration  18: 16.563 s
Iteration  19: 16.506 s
Iteration  20: 16.518 s
Iteration  21: 16.540 s
Iteration  22: 16.580 s
Iteration  23: 16.537 s
Iteration  24: 16.518 s
Iteration  25: 16.523 s
Iteration  26: 16.522 s
Iteration  27: 16.454 s
Iteration  28: 16.560 s
Iteration  29: 16.554 s
Iteration  30: 16.507 s
Iteration  31: 16.538 s
Iteration  32: 16.524 s
Iteration  33: 16.906 s
Iteration  34: 16.487 s
Iteration  35: 16.522 s
Iteration  36: 16.485 s
Iteration  37: 16.509 s
Iteration  38: 16.588 s
Iteration  39: 16.508 s
Iteration  40: 16.525 s
Iteration  41: 16.567 s
Iteration  42: 16.498 s
Iteration  43: 16.568 s
Iteration  44: 16.568 s
Iteration  45: 16.548 s
Iteration  46: 16.501 s
Iteration  47: 16.497 s
Iteration  48: 16.524 s
Iteration  49: 16.512 s
Iteration  50: 16.524 s


Result: 16.656 ?(99.9%) 0.385 s [Average]
  Statistics: (min, avg, max) = (16.454, 16.656, 22.025), stdev = 0.779
  Confidence interval (99.9%): [16.270, 17.041]
  Samples, N = 50
        mean =     16.656 ?(99.9%) 0.385 s
         min =     16.454 s
  p( 0.0000) =     16.454 s
  p(50.0000) =     16.524 s
  p(90.0000) =     16.683 s
  p(95.0000) =     16.835 s
  p(99.0000) =     22.025 s
  p(99.9000) =     22.025 s
  p(99.9900) =     22.025 s
  p(99.9990) =     22.025 s
  p(99.9999) =     22.025 s
         max =     22.025 s


# Run complete. Total time: 00:13:53

Benchmark                                                                           (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  16.656        0.385      s
{"wallclock_times": [833.907013078], "core_cycle_counts": [[396979525341], [243709610121], [1488930415201], [560286511333]], "aperf_counts": [[394679598935], [243569084565], [1488894621937], [560239000175]], "mperf_counts": [[395002582860], [243660215542], [1489574517510], [560336188782]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 22:09:05: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_12.0.2'
[2019-07-26 22:09:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:09:06: INFO] 177 executions left in scheduler queue
[2019-07-26 22:09:06: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-26 22:09:06: INFO] Estimated completion (next execution): 2019-07-26 22:25:30 (0:16:24 from now)
[2019-07-26 22:09:06: INFO] Reboot in preparation for next execution
[2019-07-26 22:13:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.819 s/op
Iteration   2: 1.667 s/op
Iteration   3: 1.638 s/op
Iteration   4: 1.731 s/op
Iteration   5: 1.628 s/op
Iteration   6: 1.643 s/op
Iteration   7: 1.639 s/op
Iteration   8: 1.624 s/op
Iteration   9: 1.646 s/op
Iteration  10: 1.630 s/op
Iteration  11: 1.635 s/op
Iteration  12: 1.636 s/op
Iteration  13: 1.627 s/op
Iteration  14: 1.635 s/op
Iteration  15: 1.634 s/op
Iteration  16: 1.641 s/op
Iteration  17: 1.631 s/op
Iteration  18: 1.626 s/op
Iteration  19: 1.627 s/op
Iteration  20: 1.626 s/op
Iteration  21: 1.638 s/op
Iteration  22: 1.636 s/op
Iteration  23: 1.636 s/op
Iteration  24: 1.631 s/op
Iteration  25: 1.632 s/op
Iteration  26: 1.667 s/op
Iteration  27: 1.644 s/op
Iteration  28: 1.637 s/op
Iteration  29: 1.628 s/op
Iteration  30: 1.632 s/op
Iteration  31: 1.632 s/op
Iteration  32: 1.633 s/op
Iteration  33: 1.637 s/op
Iteration  34: 1.628 s/op
Iteration  35: 1.624 s/op
Iteration  36: 1.628 s/op
Iteration  37: 1.630 s/op
Iteration  38: 1.623 s/op
Iteration  39: 1.630 s/op
Iteration  40: 1.631 s/op
Iteration  41: 1.624 s/op
Iteration  42: 1.631 s/op
Iteration  43: 1.632 s/op
Iteration  44: 1.634 s/op
Iteration  45: 1.637 s/op
Iteration  46: 1.631 s/op
Iteration  47: 1.632 s/op
Iteration  48: 1.634 s/op
Iteration  49: 1.632 s/op
Iteration  50: 1.638 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.640 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [1.600, 1.625) = 4 
    [1.625, 1.650) = 42 
    [1.650, 1.675) = 2 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 1 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 1 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.623 s/op
     p(50.0000) =      1.632 s/op
     p(90.0000) =      1.645 s/op
     p(95.0000) =      1.696 s/op
     p(99.0000) =      1.819 s/op
     p(99.9000) =      1.819 s/op
     p(99.9900) =      1.819 s/op
     p(99.9990) =      1.819 s/op
     p(99.9999) =      1.819 s/op
    p(100.0000) =      1.819 s/op


# Run complete. Total time: 00:01:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.640 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564171957004.json
{"wallclock_times": [82.883539824], "core_cycle_counts": [[70836512342], [64504061856], [27992578614], [113163017033]], "aperf_counts": [[70578754825], [64469205004], [27964704769], [113146432132]], "mperf_counts": [[70592933630], [64480527636], [27965010746], [113147399310]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 22:13:59: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-26 22:14:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:14:00: INFO] 176 executions left in scheduler queue
[2019-07-26 22:14:00: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-26 22:14:00: INFO] Estimated completion (next execution): 2019-07-26 22:17:53 (0:03:53 from now)
[2019-07-26 22:14:00: INFO] Reboot in preparation for next execution
[2019-07-26 22:19:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.664 s/op
Iteration   2: 1.631 s/op
Iteration   3: 1.686 s/op
Iteration   4: 1.574 s/op
Iteration   5: 1.571 s/op
Iteration   6: 1.578 s/op
Iteration   7: 1.583 s/op
Iteration   8: 1.569 s/op
Iteration   9: 1.572 s/op
Iteration  10: 1.579 s/op
Iteration  11: 1.567 s/op
Iteration  12: 1.588 s/op
Iteration  13: 1.573 s/op
Iteration  14: 1.586 s/op
Iteration  15: 1.570 s/op
Iteration  16: 1.580 s/op
Iteration  17: 1.581 s/op
Iteration  18: 1.589 s/op
Iteration  19: 1.573 s/op
Iteration  20: 1.590 s/op
Iteration  21: 1.584 s/op
Iteration  22: 1.580 s/op
Iteration  23: 1.573 s/op
Iteration  24: 1.572 s/op
Iteration  25: 1.581 s/op
Iteration  26: 1.576 s/op
Iteration  27: 1.576 s/op
Iteration  28: 1.575 s/op
Iteration  29: 1.575 s/op
Iteration  30: 1.576 s/op
Iteration  31: 1.573 s/op
Iteration  32: 1.588 s/op
Iteration  33: 1.580 s/op
Iteration  34: 1.573 s/op
Iteration  35: 1.577 s/op
Iteration  36: 1.574 s/op
Iteration  37: 1.574 s/op
Iteration  38: 1.588 s/op
Iteration  39: 1.581 s/op
Iteration  40: 1.571 s/op
Iteration  41: 1.578 s/op
Iteration  42: 1.574 s/op
Iteration  43: 1.576 s/op
Iteration  44: 1.581 s/op
Iteration  45: 1.585 s/op
Iteration  46: 1.572 s/op
Iteration  47: 1.584 s/op
Iteration  48: 1.590 s/op
Iteration  49: 1.571 s/op
Iteration  50: 1.573 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.583 ?(99.9%) 0.011 s/op

  Histogram, s/op:
    [1.500, 1.513) = 0 
    [1.513, 1.525) = 0 
    [1.525, 1.538) = 0 
    [1.538, 1.550) = 0 
    [1.550, 1.563) = 0 
    [1.563, 1.575) = 20 
    [1.575, 1.588) = 21 
    [1.588, 1.600) = 6 
    [1.600, 1.613) = 0 
    [1.613, 1.625) = 0 
    [1.625, 1.638) = 1 
    [1.638, 1.650) = 0 
    [1.650, 1.663) = 0 
    [1.663, 1.675) = 1 
    [1.675, 1.688) = 1 
    [1.688, 1.700) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.567 s/op
     p(50.0000) =      1.577 s/op
     p(90.0000) =      1.590 s/op
     p(95.0000) =      1.646 s/op
     p(99.0000) =      1.686 s/op
     p(99.9000) =      1.686 s/op
     p(99.9900) =      1.686 s/op
     p(99.9990) =      1.686 s/op
     p(99.9999) =      1.686 s/op
    p(100.0000) =      1.686 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.583 ? 0.011   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564172292512.json
{"wallclock_times": [79.976223124], "core_cycle_counts": [[78409083128], [47958918980], [80249210939], [54887652551]], "aperf_counts": [[78230262091], [47935229643], [80231946871], [54874062933]], "mperf_counts": [[78245482266], [47940539852], [80234435108], [54887627462]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 22:19:32: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ce-19.1.1'
[2019-07-26 22:19:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:19:33: INFO] 175 executions left in scheduler queue
[2019-07-26 22:19:33: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-07-26 22:19:33: INFO] Estimated completion (next execution): 2019-07-26 22:23:23 (0:03:50 from now)
[2019-07-26 22:19:33: INFO] Reboot in preparation for next execution
[2019-07-26 22:23:43: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-26 22:23:43: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-26 22:23:43: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-26 22:23:43: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-26 22:23:43: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-26 22:23:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 44 
    [0.000, 0.001) = 5 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564172623551.json
{"wallclock_times": [0.9751585799999987], "core_cycle_counts": [[2095974153], [1107500506], [1486650321], [1343472311]], "aperf_counts": [[2093638202], [1102310951], [1481035541], [1340069857]], "mperf_counts": [[2300622970], [1135529260], [1522280228], [1398383322]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-26 22:23:44: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_11.0.4'
[2019-07-26 22:23:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:23:45: INFO] 174 executions left in scheduler queue
[2019-07-26 22:23:45: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-26 22:23:45: INFO] Estimated completion (next execution): 2019-07-26 22:26:16 (0:02:31 from now)
[2019-07-26 22:23:45: INFO] Reboot in preparation for next execution
[2019-07-26 22:29:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.842 s/op
Iteration   2: 1.620 s/op
Iteration   3: 1.605 s/op
Iteration   4: 1.687 s/op
Iteration   5: 1.599 s/op
Iteration   6: 1.601 s/op
Iteration   7: 1.595 s/op
Iteration   8: 1.597 s/op
Iteration   9: 1.599 s/op
Iteration  10: 1.599 s/op
Iteration  11: 1.601 s/op
Iteration  12: 1.606 s/op
Iteration  13: 1.602 s/op
Iteration  14: 1.603 s/op
Iteration  15: 1.603 s/op
Iteration  16: 1.604 s/op
Iteration  17: 1.605 s/op
Iteration  18: 1.608 s/op
Iteration  19: 1.600 s/op
Iteration  20: 1.605 s/op
Iteration  21: 1.607 s/op
Iteration  22: 1.600 s/op
Iteration  23: 1.604 s/op
Iteration  24: 1.601 s/op
Iteration  25: 1.605 s/op
Iteration  26: 1.613 s/op
Iteration  27: 1.599 s/op
Iteration  28: 1.598 s/op
Iteration  29: 1.594 s/op
Iteration  30: 1.601 s/op
Iteration  31: 1.598 s/op
Iteration  32: 1.599 s/op
Iteration  33: 1.600 s/op
Iteration  34: 1.603 s/op
Iteration  35: 1.603 s/op
Iteration  36: 1.602 s/op
Iteration  37: 1.603 s/op
Iteration  38: 1.603 s/op
Iteration  39: 1.602 s/op
Iteration  40: 1.598 s/op
Iteration  41: 1.597 s/op
Iteration  42: 1.602 s/op
Iteration  43: 1.604 s/op
Iteration  44: 1.596 s/op
Iteration  45: 1.606 s/op
Iteration  46: 1.601 s/op
Iteration  47: 1.605 s/op
Iteration  48: 1.606 s/op
Iteration  49: 1.599 s/op
Iteration  50: 1.596 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.609 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 15 
    [1.600, 1.625) = 33 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 1 
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 1 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.594 s/op
     p(50.0000) =      1.602 s/op
     p(90.0000) =      1.608 s/op
     p(95.0000) =      1.650 s/op
     p(99.0000) =      1.842 s/op
     p(99.9000) =      1.842 s/op
     p(99.9900) =      1.842 s/op
     p(99.9990) =      1.842 s/op
     p(99.9999) =      1.842 s/op
    p(100.0000) =      1.842 s/op


# Run complete. Total time: 00:01:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.609 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564172877492.json
{"wallclock_times": [81.325863194], "core_cycle_counts": [[114831682632], [85971330841], [21524423141], [49414035346]], "aperf_counts": [[114627092942], [85926608477], [21499055289], [49395289072]], "mperf_counts": [[114646600740], [85931786344], [21500791798], [49397013210]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 22:29:18: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-26 22:29:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:29:19: INFO] 173 executions left in scheduler queue
[2019-07-26 22:29:19: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-26 22:29:19: INFO] Estimated completion (next execution): 2019-07-26 22:33:11 (0:03:51 from now)
[2019-07-26 22:29:19: INFO] Reboot in preparation for next execution
[2019-07-26 22:34:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.933 s/op
Iteration   2: 1.709 s/op
Iteration   3: 1.765 s/op
Iteration   4: 1.646 s/op
Iteration   5: 1.668 s/op
Iteration   6: 1.645 s/op
Iteration   7: 1.646 s/op
Iteration   8: 1.644 s/op
Iteration   9: 1.662 s/op
Iteration  10: 1.647 s/op
Iteration  11: 1.659 s/op
Iteration  12: 1.643 s/op
Iteration  13: 1.642 s/op
Iteration  14: 1.643 s/op
Iteration  15: 1.644 s/op
Iteration  16: 1.651 s/op
Iteration  17: 1.656 s/op
Iteration  18: 1.641 s/op
Iteration  19: 1.652 s/op
Iteration  20: 1.645 s/op
Iteration  21: 1.645 s/op
Iteration  22: 1.644 s/op
Iteration  23: 1.642 s/op
Iteration  24: 1.645 s/op
Iteration  25: 1.656 s/op
Iteration  26: 1.640 s/op
Iteration  27: 1.644 s/op
Iteration  28: 1.643 s/op
Iteration  29: 1.643 s/op
Iteration  30: 1.642 s/op
Iteration  31: 1.643 s/op
Iteration  32: 1.642 s/op
Iteration  33: 1.639 s/op
Iteration  34: 1.640 s/op
Iteration  35: 1.642 s/op
Iteration  36: 1.642 s/op
Iteration  37: 1.653 s/op
Iteration  38: 1.640 s/op
Iteration  39: 1.660 s/op
Iteration  40: 1.642 s/op
Iteration  41: 1.659 s/op
Iteration  42: 1.660 s/op
Iteration  43: 1.660 s/op
Iteration  44: 1.640 s/op
Iteration  45: 1.638 s/op
Iteration  46: 1.647 s/op
Iteration  47: 1.644 s/op
Iteration  48: 1.641 s/op
Iteration  49: 1.641 s/op
Iteration  50: 1.644 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.656 ?(99.9%) 0.022 s/op

  Histogram, s/op:
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 35 
    [1.650, 1.675) = 12 
    [1.675, 1.700) = 0 
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 1 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 1 
    [1.950, 1.975) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.638 s/op
     p(50.0000) =      1.644 s/op
     p(90.0000) =      1.662 s/op
     p(95.0000) =      1.734 s/op
     p(99.0000) =      1.933 s/op
     p(99.9000) =      1.933 s/op
     p(99.9900) =      1.933 s/op
     p(99.9990) =      1.933 s/op
     p(99.9999) =      1.933 s/op
    p(100.0000) =      1.933 s/op


# Run complete. Total time: 00:01:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.656 ? 0.022   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564173213978.json
{"wallclock_times": [83.63354539299999], "core_cycle_counts": [[124621612066], [45108020873], [21314784554], [82561296891]], "aperf_counts": [[124479079015], [45075212003], [21292327408], [82548886708]], "mperf_counts": [[124495808904], [45079487068], [21293524562], [82557899698]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 22:34:57: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ce-19.1.1'
[2019-07-26 22:34:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:34:58: INFO] 172 executions left in scheduler queue
[2019-07-26 22:34:58: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 22:34:58: INFO] Estimated completion (next execution): 2019-07-26 22:38:52 (0:03:53 from now)
[2019-07-26 22:34:58: INFO] Reboot in preparation for next execution
[2019-07-26 22:44:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.876 s/op
Iteration   2: 7.668 s/op
Iteration   3: 7.793 s/op
Iteration   4: 7.690 s/op
Iteration   5: 7.691 s/op
Iteration   6: 7.707 s/op
Iteration   7: 7.686 s/op
Iteration   8: 7.692 s/op
Iteration   9: 7.681 s/op
Iteration  10: 7.693 s/op
Iteration  11: 7.688 s/op
Iteration  12: 7.685 s/op
Iteration  13: 7.682 s/op
Iteration  14: 7.695 s/op
Iteration  15: 7.687 s/op
Iteration  16: 7.675 s/op
Iteration  17: 7.724 s/op
Iteration  18: 7.714 s/op
Iteration  19: 7.725 s/op
Iteration  20: 7.722 s/op
Iteration  21: 7.706 s/op
Iteration  22: 7.726 s/op
Iteration  23: 7.726 s/op
Iteration  24: 7.713 s/op
Iteration  25: 7.719 s/op
Iteration  26: 7.728 s/op
Iteration  27: 7.726 s/op
Iteration  28: 7.720 s/op
Iteration  29: 7.699 s/op
Iteration  30: 7.710 s/op
Iteration  31: 7.728 s/op
Iteration  32: 7.725 s/op
Iteration  33: 7.710 s/op
Iteration  34: 7.716 s/op
Iteration  35: 7.706 s/op
Iteration  36: 7.718 s/op
Iteration  37: 7.718 s/op
Iteration  38: 7.721 s/op
Iteration  39: 7.721 s/op
Iteration  40: 7.722 s/op
Iteration  41: 7.722 s/op
Iteration  42: 7.719 s/op
Iteration  43: 7.702 s/op
Iteration  44: 7.703 s/op
Iteration  45: 7.705 s/op
Iteration  46: 7.715 s/op
Iteration  47: 7.702 s/op
Iteration  48: 7.718 s/op
Iteration  49: 7.694 s/op
Iteration  50: 7.700 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      7.712 ?(99.9%) 0.015 s/op

  Histogram, s/op:
    [7.600, 7.625) = 0 
    [7.625, 7.650) = 0 
    [7.650, 7.675) = 1 
    [7.675, 7.700) = 15 
    [7.700, 7.725) = 26 
    [7.725, 7.750) = 6 
    [7.750, 7.775) = 0 
    [7.775, 7.800) = 1 
    [7.800, 7.825) = 0 
    [7.825, 7.850) = 0 
    [7.850, 7.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      7.668 s/op
     p(50.0000) =      7.711 s/op
     p(90.0000) =      7.726 s/op
     p(95.0000) =      7.757 s/op
     p(99.0000) =      7.876 s/op
     p(99.9000) =      7.876 s/op
     p(99.9900) =      7.876 s/op
     p(99.9990) =      7.876 s/op
     p(99.9999) =      7.876 s/op
    p(100.0000) =      7.876 s/op


# Run complete. Total time: 00:06:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  7.712 ? 0.015   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564173507441.json
{"wallclock_times": [386.498808709], "core_cycle_counts": [[245566703578], [278943244570], [279323213301], [441427771135]], "aperf_counts": [[244613249162], [278883147526], [279300378301], [441409952869]], "mperf_counts": [[244624865666], [278883399874], [279303671544], [441410957564]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 22:44:53: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 22:44:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:44:54: INFO] 171 executions left in scheduler queue
[2019-07-26 22:44:54: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 22:44:54: INFO] Estimated completion (next execution): 2019-07-26 22:53:51 (0:08:56 from now)
[2019-07-26 22:44:54: INFO] Reboot in preparation for next execution
[2019-07-26 22:54:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.728 s/op
Iteration   2: 6.564 s/op
Iteration   3: 6.538 s/op
Iteration   4: 6.765 s/op
Iteration   5: 6.584 s/op
Iteration   6: 6.618 s/op
Iteration   7: 6.578 s/op
Iteration   8: 6.637 s/op
Iteration   9: 6.590 s/op
Iteration  10: 6.641 s/op
Iteration  11: 6.581 s/op
Iteration  12: 6.619 s/op
Iteration  13: 6.588 s/op
Iteration  14: 6.679 s/op
Iteration  15: 6.611 s/op
Iteration  16: 6.575 s/op
Iteration  17: 6.592 s/op
Iteration  18: 6.585 s/op
Iteration  19: 6.562 s/op
Iteration  20: 6.701 s/op
Iteration  21: 6.601 s/op
Iteration  22: 6.587 s/op
Iteration  23: 6.592 s/op
Iteration  24: 6.615 s/op
Iteration  25: 6.603 s/op
Iteration  26: 6.643 s/op
Iteration  27: 6.582 s/op
Iteration  28: 6.561 s/op
Iteration  29: 6.593 s/op
Iteration  30: 6.600 s/op
Iteration  31: 6.553 s/op
Iteration  32: 6.619 s/op
Iteration  33: 6.602 s/op
Iteration  34: 6.626 s/op
Iteration  35: 6.558 s/op
Iteration  36: 6.615 s/op
Iteration  37: 6.590 s/op
Iteration  38: 6.600 s/op
Iteration  39: 6.553 s/op
Iteration  40: 6.627 s/op
Iteration  41: 6.571 s/op
Iteration  42: 6.640 s/op
Iteration  43: 6.611 s/op
Iteration  44: 6.591 s/op
Iteration  45: 6.631 s/op
Iteration  46: 6.599 s/op
Iteration  47: 6.580 s/op
Iteration  48: 6.600 s/op
Iteration  49: 6.588 s/op
Iteration  50: 6.584 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.605 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [6.500, 6.525) = 0 
    [6.525, 6.550) = 1 
    [6.550, 6.575) = 8 
    [6.575, 6.600) = 19 
    [6.600, 6.625) = 11 
    [6.625, 6.650) = 7 
    [6.650, 6.675) = 0 
    [6.675, 6.700) = 1 
    [6.700, 6.725) = 1 
    [6.725, 6.750) = 1 
    [6.750, 6.775) = 1 
    [6.775, 6.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.538 s/op
     p(50.0000) =      6.596 s/op
     p(90.0000) =      6.643 s/op
     p(95.0000) =      6.713 s/op
     p(99.0000) =      6.765 s/op
     p(99.9000) =      6.765 s/op
     p(99.9900) =      6.765 s/op
     p(99.9990) =      6.765 s/op
     p(99.9999) =      6.765 s/op
    p(100.0000) =      6.765 s/op


# Run complete. Total time: 00:05:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  6.605 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564174146526.json
{"wallclock_times": [331.160647005], "core_cycle_counts": [[393531748564], [211013804981], [286894093440], [177664732555]], "aperf_counts": [[392902981723], [210932774562], [286831310298], [177633622871]], "mperf_counts": [[392915941304], [210932989712], [286832933594], [177639180740]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 22:54:37: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 22:54:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 22:54:38: INFO] 170 executions left in scheduler queue
[2019-07-26 22:54:38: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 22:54:38: INFO] Estimated completion (next execution): 2019-07-26 23:02:40 (0:08:01 from now)
[2019-07-26 22:54:38: INFO] Reboot in preparation for next execution
[2019-07-26 23:01:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.849 s/op
Iteration   2: 3.395 s/op
Iteration   3: 3.406 s/op
Iteration   4: 3.354 s/op
Iteration   5: 3.453 s/op
Iteration   6: 3.359 s/op
Iteration   7: 3.404 s/op
Iteration   8: 3.414 s/op
Iteration   9: 3.335 s/op
Iteration  10: 3.381 s/op
Iteration  11: 3.395 s/op
Iteration  12: 3.405 s/op
Iteration  13: 3.403 s/op
Iteration  14: 3.344 s/op
Iteration  15: 3.388 s/op
Iteration  16: 3.419 s/op
Iteration  17: 3.401 s/op
Iteration  18: 3.406 s/op
Iteration  19: 3.348 s/op
Iteration  20: 3.364 s/op
Iteration  21: 3.415 s/op
Iteration  22: 3.412 s/op
Iteration  23: 3.418 s/op
Iteration  24: 3.400 s/op
Iteration  25: 3.400 s/op
Iteration  26: 3.353 s/op
Iteration  27: 3.369 s/op
Iteration  28: 3.417 s/op
Iteration  29: 3.408 s/op
Iteration  30: 3.418 s/op
Iteration  31: 3.347 s/op
Iteration  32: 3.359 s/op
Iteration  33: 3.408 s/op
Iteration  34: 3.404 s/op
Iteration  35: 3.424 s/op
Iteration  36: 3.410 s/op
Iteration  37: 3.414 s/op
Iteration  38: 3.344 s/op
Iteration  39: 3.373 s/op
Iteration  40: 3.427 s/op
Iteration  41: 3.402 s/op
Iteration  42: 3.406 s/op
Iteration  43: 3.413 s/op
Iteration  44: 3.403 s/op
Iteration  45: 3.336 s/op
Iteration  46: 3.389 s/op
Iteration  47: 3.408 s/op
Iteration  48: 3.398 s/op
Iteration  49: 3.407 s/op
Iteration  50: 3.406 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      3.402 ?(99.9%) 0.035 s/op

  Histogram, s/op:
    [3.300, 3.350) = 6 
    [3.350, 3.400) = 14 
    [3.400, 3.450) = 28 
    [3.450, 3.500) = 1 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 1 
    [3.850, 3.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.335 s/op
     p(50.0000) =      3.403 s/op
     p(90.0000) =      3.419 s/op
     p(95.0000) =      3.439 s/op
     p(99.0000) =      3.849 s/op
     p(99.9000) =      3.849 s/op
     p(99.9900) =      3.849 s/op
     p(99.9990) =      3.849 s/op
     p(99.9999) =      3.849 s/op
    p(100.0000) =      3.849 s/op


# Run complete. Total time: 00:02:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  3.402 ? 0.035   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564174732610.json
{"wallclock_times": [171.100558133], "core_cycle_counts": [[155362382915], [129786131378], [193908513164], [112258204092]], "aperf_counts": [[154959892273], [129743155042], [193874725850], [112221633377]], "mperf_counts": [[154969706774], [129755306444], [193877004118], [112221770590]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 23:01:43: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 23:01:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 23:01:44: INFO] 169 executions left in scheduler queue
[2019-07-26 23:01:44: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 23:01:44: INFO] Estimated completion (next execution): 2019-07-26 23:07:05 (0:05:21 from now)
[2019-07-26 23:01:44: INFO] Reboot in preparation for next execution
[2019-07-26 23:08:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.228 s/op
Iteration   2: 2.965 s/op
Iteration   3: 2.981 s/op
Iteration   4: 3.074 s/op
Iteration   5: 2.960 s/op
Iteration   6: 2.954 s/op
Iteration   7: 2.999 s/op
Iteration   8: 3.008 s/op
Iteration   9: 2.974 s/op
Iteration  10: 2.965 s/op
Iteration  11: 2.988 s/op
Iteration  12: 2.952 s/op
Iteration  13: 2.955 s/op
Iteration  14: 2.968 s/op
Iteration  15: 2.959 s/op
Iteration  16: 2.968 s/op
Iteration  17: 2.969 s/op
Iteration  18: 2.970 s/op
Iteration  19: 2.963 s/op
Iteration  20: 2.983 s/op
Iteration  21: 2.969 s/op
Iteration  22: 2.972 s/op
Iteration  23: 2.975 s/op
Iteration  24: 2.969 s/op
Iteration  25: 2.948 s/op
Iteration  26: 2.964 s/op
Iteration  27: 2.965 s/op
Iteration  28: 2.981 s/op
Iteration  29: 2.953 s/op
Iteration  30: 2.979 s/op
Iteration  31: 2.978 s/op
Iteration  32: 2.959 s/op
Iteration  33: 2.964 s/op
Iteration  34: 2.972 s/op
Iteration  35: 2.976 s/op
Iteration  36: 2.984 s/op
Iteration  37: 2.962 s/op
Iteration  38: 2.979 s/op
Iteration  39: 2.982 s/op
Iteration  40: 2.967 s/op
Iteration  41: 2.983 s/op
Iteration  42: 2.976 s/op
Iteration  43: 2.970 s/op
Iteration  44: 2.957 s/op
Iteration  45: 2.964 s/op
Iteration  46: 2.984 s/op
Iteration  47: 2.963 s/op
Iteration  48: 2.979 s/op
Iteration  49: 2.988 s/op
Iteration  50: 2.949 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      2.978 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [2.900, 2.925) = 0 
    [2.925, 2.950) = 2 
    [2.950, 2.975) = 29 
    [2.975, 3.000) = 16 
    [3.000, 3.025) = 1 
    [3.025, 3.050) = 0 
    [3.050, 3.075) = 1 
    [3.075, 3.100) = 0 
    [3.100, 3.125) = 0 
    [3.125, 3.150) = 0 
    [3.150, 3.175) = 0 
    [3.175, 3.200) = 0 
    [3.200, 3.225) = 0 
    [3.225, 3.250) = 1 
    [3.250, 3.275) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.948 s/op
     p(50.0000) =      2.970 s/op
     p(90.0000) =      2.988 s/op
     p(95.0000) =      3.038 s/op
     p(99.0000) =      3.228 s/op
     p(99.9000) =      3.228 s/op
     p(99.9900) =      3.228 s/op
     p(99.9990) =      3.228 s/op
     p(99.9999) =      3.228 s/op
    p(100.0000) =      3.228 s/op


# Run complete. Total time: 00:02:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  2.978 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564175157631.json
{"wallclock_times": [149.862366975], "core_cycle_counts": [[157975186857], [132831014225], [112795903383], [94327662976]], "aperf_counts": [[157662799865], [132793565297], [112766370081], [94310888284]], "mperf_counts": [[157676996604], [132794703166], [112768022526], [94318395952]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-26 23:08:27: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_graalvm-ee-19.1.1'
[2019-07-26 23:08:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 23:08:28: INFO] 168 executions left in scheduler queue
[2019-07-26 23:08:28: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:08:28: INFO] Estimated completion (next execution): 2019-07-26 23:13:28 (0:05:00 from now)
[2019-07-26 23:08:28: INFO] Reboot in preparation for next execution
[2019-07-26 23:12:41: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 23:18:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.344 s
Iteration   2: 7.162 s
Iteration   3: 6.834 s
Iteration   4: 6.935 s
Iteration   5: 6.906 s
Iteration   6: 6.900 s
Iteration   7: 6.962 s
Iteration   8: 6.957 s
Iteration   9: 6.795 s
Iteration  10: 6.765 s
Iteration  11: 6.720 s
Iteration  12: 6.714 s
Iteration  13: 6.739 s
Iteration  14: 6.717 s
Iteration  15: 6.689 s
Iteration  16: 6.722 s
Iteration  17: 6.680 s
Iteration  18: 6.722 s
Iteration  19: 6.724 s
Iteration  20: 6.686 s
Iteration  21: 6.740 s
Iteration  22: 6.664 s
Iteration  23: 6.710 s
Iteration  24: 6.719 s
Iteration  25: 6.710 s
Iteration  26: 6.746 s
Iteration  27: 6.724 s
Iteration  28: 6.693 s
Iteration  29: 6.717 s
Iteration  30: 6.715 s
Iteration  31: 6.729 s
Iteration  32: 6.693 s
Iteration  33: 6.687 s
Iteration  34: 6.709 s
Iteration  35: 6.667 s
Iteration  36: 6.664 s
Iteration  37: 6.685 s
Iteration  38: 6.677 s
Iteration  39: 6.667 s
Iteration  40: 6.654 s
Iteration  41: 6.687 s
Iteration  42: 6.628 s
Iteration  43: 6.640 s
Iteration  44: 6.661 s
Iteration  45: 6.662 s
Iteration  46: 6.674 s
Iteration  47: 6.651 s
Iteration  48: 6.642 s
Iteration  49: 6.674 s
Iteration  50: 6.674 s


Result: 6.765 ?(99.9%) 0.123 s [Average]
  Statistics: (min, avg, max) = (6.628, 6.765, 8.344), stdev = 0.249
  Confidence interval (99.9%): [6.641, 6.888]
  Samples, N = 50
        mean =      6.765 ?(99.9%) 0.123 s
         min =      6.628 s
  p( 0.0000) =      6.628 s
  p(50.0000) =      6.710 s
  p(90.0000) =      6.932 s
  p(95.0000) =      7.052 s
  p(99.0000) =      8.344 s
  p(99.9000) =      8.344 s
  p(99.9900) =      8.344 s
  p(99.9990) =      8.344 s
  p(99.9999) =      8.344 s
         max =      8.344 s


# Run complete. Total time: 00:05:39

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.765        0.123      s
{"wallclock_times": [340.040646302], "core_cycle_counts": [[253126862074], [224391634175], [507370834569], [274423547062]], "aperf_counts": [[252066173837], [224250813353], [507264757199], [274298861435]], "mperf_counts": [[252071946544], [224250797212], [507265290032], [274298973242]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 23:18:21: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:18:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 23:18:22: INFO] 167 executions left in scheduler queue
[2019-07-26 23:18:22: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:18:22: INFO] Estimated completion (next execution): 2019-07-26 23:26:33 (0:08:10 from now)
[2019-07-26 23:18:22: INFO] Reboot in preparation for next execution
[2019-07-26 23:22:49: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 23:31:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.746 s
Iteration   2: 11.105 s
Iteration   3: 10.964 s
Iteration   4: 11.039 s
Iteration   5: 11.098 s
Iteration   6: 10.801 s
Iteration   7: 10.787 s
Iteration   8: 10.822 s
Iteration   9: 10.737 s
Iteration  10: 10.829 s
Iteration  11: 10.829 s
Iteration  12: 10.824 s
Iteration  13: 10.824 s
Iteration  14: 10.867 s
Iteration  15: 10.856 s
Iteration  16: 10.787 s
Iteration  17: 10.872 s
Iteration  18: 10.848 s
Iteration  19: 10.853 s
Iteration  20: 10.864 s
Iteration  21: 10.855 s
Iteration  22: 10.868 s
Iteration  23: 10.887 s
Iteration  24: 10.867 s
Iteration  25: 10.815 s
Iteration  26: 10.836 s
Iteration  27: 10.887 s
Iteration  28: 10.842 s
Iteration  29: 10.854 s
Iteration  30: 10.781 s
Iteration  31: 10.837 s
Iteration  32: 10.847 s
Iteration  33: 10.861 s
Iteration  34: 10.886 s
Iteration  35: 10.889 s
Iteration  36: 10.872 s
Iteration  37: 10.764 s
Iteration  38: 10.790 s
Iteration  39: 10.872 s
Iteration  40: 10.859 s
Iteration  41: 10.781 s
Iteration  42: 10.847 s
Iteration  43: 10.909 s
Iteration  44: 10.887 s
Iteration  45: 10.901 s
Iteration  46: 10.898 s
Iteration  47: 10.786 s
Iteration  48: 10.859 s
Iteration  49: 10.865 s
Iteration  50: 10.873 s


Result: 10.899 ?(99.9%) 0.136 s [Average]
  Statistics: (min, avg, max) = (10.737, 10.899, 12.746), stdev = 0.276
  Confidence interval (99.9%): [10.762, 11.035]
  Samples, N = 50
        mean =     10.899 ?(99.9%) 0.136 s
         min =     10.737 s
  p( 0.0000) =     10.737 s
  p(50.0000) =     10.858 s
  p(90.0000) =     10.959 s
  p(95.0000) =     11.101 s
  p(99.0000) =     12.746 s
  p(99.9000) =     12.746 s
  p(99.9900) =     12.746 s
  p(99.9990) =     12.746 s
  p(99.9999) =     12.746 s
         max =     12.746 s


# Run complete. Total time: 00:09:06

Benchmark                                                                               (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  10.899        0.136      s
{"wallclock_times": [546.403922429], "core_cycle_counts": [[504578149989], [353157539526], [393567413416], [542791441058]], "aperf_counts": [[503208514061], [353057876793], [393407249802], [542688087704]], "mperf_counts": [[503214120070], [353058158364], [393407598306], [542688113422]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 23:31:56: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:31:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 23:31:57: INFO] 166 executions left in scheduler queue
[2019-07-26 23:31:57: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:31:57: INFO] Estimated completion (next execution): 2019-07-26 23:43:34 (0:11:36 from now)
[2019-07-26 23:31:57: INFO] Reboot in preparation for next execution
[2019-07-26 23:36:10: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 23:42:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.487 s
Iteration   2: 8.530 s
Iteration   3: 7.964 s
Iteration   4: 7.811 s
Iteration   5: 7.624 s
Iteration   6: 7.669 s
Iteration   7: 7.708 s
Iteration   8: 7.698 s
Iteration   9: 7.662 s
Iteration  10: 7.739 s
Iteration  11: 7.694 s
Iteration  12: 7.571 s
Iteration  13: 7.671 s
Iteration  14: 7.588 s
Iteration  15: 7.643 s
Iteration  16: 7.629 s
Iteration  17: 7.683 s
Iteration  18: 7.752 s
Iteration  19: 7.657 s
Iteration  20: 7.674 s
Iteration  21: 7.688 s
Iteration  22: 7.717 s
Iteration  23: 7.670 s
Iteration  24: 7.681 s
Iteration  25: 7.627 s
Iteration  26: 7.674 s
Iteration  27: 7.743 s
Iteration  28: 7.661 s
Iteration  29: 7.716 s
Iteration  30: 7.695 s
Iteration  31: 7.699 s
Iteration  32: 7.694 s
Iteration  33: 7.757 s
Iteration  34: 7.714 s
Iteration  35: 7.661 s
Iteration  36: 7.787 s
Iteration  37: 7.713 s
Iteration  38: 7.696 s
Iteration  39: 7.760 s
Iteration  40: 7.716 s
Iteration  41: 7.800 s
Iteration  42: 7.820 s
Iteration  43: 7.648 s
Iteration  44: 7.733 s
Iteration  45: 7.726 s
Iteration  46: 7.765 s
Iteration  47: 7.795 s
Iteration  48: 7.794 s
Iteration  49: 7.825 s
Iteration  50: 7.659 s


Result: 7.762 ?(99.9%) 0.140 s [Average]
  Statistics: (min, avg, max) = (7.571, 7.762, 9.487), stdev = 0.283
  Confidence interval (99.9%): [7.622, 7.902]
  Samples, N = 50
        mean =      7.762 ?(99.9%) 0.140 s
         min =      7.571 s
  p( 0.0000) =      7.571 s
  p(50.0000) =      7.699 s
  p(90.0000) =      7.819 s
  p(95.0000) =      8.218 s
  p(99.0000) =      9.487 s
  p(99.9000) =      9.487 s
  p(99.9900) =      9.487 s
  p(99.9990) =      9.487 s
  p(99.9999) =      9.487 s
         max =      9.487 s


# Run complete. Total time: 00:06:29

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  7.762        0.140      s
{"wallclock_times": [389.936550978], "core_cycle_counts": [[216504452700], [475834194632], [240966495687], [388925161393]], "aperf_counts": [[215352308619], [475700909694], [240890246862], [388868255899]], "mperf_counts": [[215421240668], [475700891064], [240890434666], [388869210118]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 23:42:40: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:42:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 23:42:41: INFO] 165 executions left in scheduler queue
[2019-07-26 23:42:41: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:42:41: INFO] Estimated completion (next execution): 2019-07-26 23:51:41 (0:09:00 from now)
[2019-07-26 23:42:41: INFO] Reboot in preparation for next execution
[2019-07-26 23:46:51: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-26 23:58:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.598 s
Iteration   2: 14.164 s
Iteration   3: 14.031 s
Iteration   4: 14.650 s
Iteration   5: 14.840 s
Iteration   6: 14.195 s
Iteration   7: 14.076 s
Iteration   8: 14.706 s
Iteration   9: 14.124 s
Iteration  10: 14.089 s
Iteration  11: 14.120 s
Iteration  12: 14.012 s
Iteration  13: 14.060 s
Iteration  14: 14.783 s
Iteration  15: 14.787 s
Iteration  16: 14.016 s
Iteration  17: 14.876 s
Iteration  18: 14.079 s
Iteration  19: 14.077 s
Iteration  20: 14.871 s
Iteration  21: 14.120 s
Iteration  22: 14.827 s
Iteration  23: 14.727 s
Iteration  24: 14.101 s
Iteration  25: 14.762 s
Iteration  26: 14.125 s
Iteration  27: 14.166 s
Iteration  28: 14.020 s
Iteration  29: 14.168 s
Iteration  30: 14.095 s
Iteration  31: 14.083 s
Iteration  32: 14.928 s
Iteration  33: 14.129 s
Iteration  34: 14.137 s
Iteration  35: 14.838 s
Iteration  36: 14.231 s
Iteration  37: 14.069 s
Iteration  38: 14.138 s
Iteration  39: 14.915 s
Iteration  40: 14.158 s
Iteration  41: 14.932 s
Iteration  42: 14.180 s
Iteration  43: 14.153 s
Iteration  44: 14.020 s
Iteration  45: 14.148 s
Iteration  46: 14.125 s
Iteration  47: 14.920 s
Iteration  48: 14.163 s
Iteration  49: 14.107 s
Iteration  50: 14.187 s


Result: 14.357 ?(99.9%) 0.188 s [Average]
  Statistics: (min, avg, max) = (14.012, 14.357, 15.598), stdev = 0.379
  Confidence interval (99.9%): [14.169, 14.544]
  Samples, N = 50
        mean =     14.357 ?(99.9%) 0.188 s
         min =     14.012 s
  p( 0.0000) =     14.012 s
  p(50.0000) =     14.156 s
  p(90.0000) =     14.911 s
  p(95.0000) =     14.930 s
  p(99.0000) =     15.598 s
  p(99.9000) =     15.598 s
  p(99.9900) =     15.598 s
  p(99.9990) =     15.598 s
  p(99.9999) =     15.598 s
         max =     15.598 s


# Run complete. Total time: 00:11:59

Benchmark                                                                          (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  14.357        0.188      s
{"wallclock_times": [719.404750333], "core_cycle_counts": [[721942834388], [627021264618], [495923682907], [501545984531]], "aperf_counts": [[720223912089], [626800692983], [495778093120], [501441608139]], "mperf_counts": [[720226742348], [626800616040], [495778052802], [501441789504]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-26 23:58:51: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9_11.0.4'
[2019-07-26 23:58:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-26 23:58:51: INFO] 164 executions left in scheduler queue
[2019-07-26 23:58:51: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-07-26 23:58:51: INFO] Estimated completion (next execution): 2019-07-27 00:13:21 (0:14:29 from now)
[2019-07-26 23:58:51: INFO] Reboot in preparation for next execution
[2019-07-27 00:03:06: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 45 
    [0.000, 0.001) = 4 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564178585533.json
{"wallclock_times": [0.8542790990000242], "core_cycle_counts": [[1606463030], [1347944764], [1055117604], [1589520309]], "aperf_counts": [[1603496430], [1343638166], [1050286840], [1586039066]], "mperf_counts": [[1623105068], [1345852468], [1052698074], [1603431614]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 00:03:06: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ee-19.1.1'
[2019-07-27 00:03:07: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 00:03:07: INFO] 163 executions left in scheduler queue
[2019-07-27 00:03:07: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-07-27 00:03:07: INFO] Estimated completion (next execution): 2019-07-27 00:05:38 (0:02:31 from now)
[2019-07-27 00:03:07: INFO] Reboot in preparation for next execution
[2019-07-27 00:07:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 00:07:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 00:07:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 00:07:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 00:07:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 00:18:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.478 s/op
Iteration   2: 13.150 s/op
Iteration   3: 12.578 s/op
Iteration   4: 12.666 s/op
Iteration   5: 12.490 s/op
Iteration   6: 12.750 s/op
Iteration   7: 12.715 s/op
Iteration   8: 12.843 s/op
Iteration   9: 12.553 s/op
Iteration  10: 12.504 s/op
Iteration  11: 12.744 s/op
Iteration  12: 12.493 s/op
Iteration  13: 12.739 s/op
Iteration  14: 12.666 s/op
Iteration  15: 12.866 s/op
Iteration  16: 12.410 s/op
Iteration  17: 12.862 s/op
Iteration  18: 12.591 s/op
Iteration  19: 12.908 s/op
Iteration  20: 12.808 s/op
Iteration  21: 13.373 s/op
Iteration  22: 12.603 s/op
Iteration  23: 12.684 s/op
Iteration  24: 12.838 s/op
Iteration  25: 12.742 s/op
Iteration  26: 12.738 s/op
Iteration  27: 13.066 s/op
Iteration  28: 12.573 s/op
Iteration  29: 12.651 s/op
Iteration  30: 12.857 s/op
Iteration  31: 12.761 s/op
Iteration  32: 12.759 s/op
Iteration  33: 13.254 s/op
Iteration  34: 12.514 s/op
Iteration  35: 12.897 s/op
Iteration  36: 12.654 s/op
Iteration  37: 12.905 s/op
Iteration  38: 13.091 s/op
Iteration  39: 12.831 s/op
Iteration  40: 12.780 s/op
Iteration  41: 12.656 s/op
Iteration  42: 12.741 s/op
Iteration  43: 12.630 s/op
Iteration  44: 13.074 s/op
Iteration  45: 13.026 s/op
Iteration  46: 12.553 s/op
Iteration  47: 12.777 s/op
Iteration  48: 12.639 s/op
Iteration  49: 12.805 s/op
Iteration  50: 12.829 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     12.782 ?(99.9%) 0.111 s/op

  Histogram, s/op:
    [12.000, 12.125) = 0 
    [12.125, 12.250) = 0 
    [12.250, 12.375) = 0 
    [12.375, 12.500) = 3 
    [12.500, 12.625) = 8 
    [12.625, 12.750) = 15 
    [12.750, 12.875) = 13 
    [12.875, 13.000) = 3 
    [13.000, 13.125) = 4 
    [13.125, 13.250) = 1 
    [13.250, 13.375) = 2 
    [13.375, 13.500) = 1 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     12.410 s/op
     p(50.0000) =     12.747 s/op
     p(90.0000) =     13.089 s/op
     p(95.0000) =     13.308 s/op
     p(99.0000) =     13.478 s/op
     p(99.9000) =     13.478 s/op
     p(99.9900) =     13.478 s/op
     p(99.9990) =     13.478 s/op
     p(99.9999) =     13.478 s/op
    p(100.0000) =     13.478 s/op


# Run complete. Total time: 00:10:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  12.782 ? 0.111   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564178841659.json
{"wallclock_times": [640.174748145], "core_cycle_counts": [[450688987904], [384907788565], [675161625683], [776260088253]], "aperf_counts": [[448794488900], [384697298445], [674939270814], [776061663088]], "mperf_counts": [[456752869830], [391117884291], [690245030629], [788403772661]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 00:18:01: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_hotspot_12.0.2'
[2019-07-27 00:18:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 00:18:02: INFO] 162 executions left in scheduler queue
[2019-07-27 00:18:02: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-27 00:18:02: INFO] Estimated completion (next execution): 2019-07-27 00:31:13 (0:13:10 from now)
[2019-07-27 00:18:02: INFO] Reboot in preparation for next execution
[2019-07-27 00:23:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.311 s/op
Iteration   2: 0.940 s/op
Iteration   3: 0.837 s/op
Iteration   4: 0.921 s/op
Iteration   5: 0.833 s/op
Iteration   6: 0.837 s/op
Iteration   7: 0.833 s/op
Iteration   8: 0.835 s/op
Iteration   9: 0.833 s/op
Iteration  10: 0.838 s/op
Iteration  11: 0.831 s/op
Iteration  12: 0.836 s/op
Iteration  13: 0.832 s/op
Iteration  14: 0.837 s/op
Iteration  15: 0.836 s/op
Iteration  16: 0.836 s/op
Iteration  17: 0.833 s/op
Iteration  18: 0.837 s/op
Iteration  19: 0.828 s/op
Iteration  20: 0.843 s/op
Iteration  21: 0.834 s/op
Iteration  22: 0.829 s/op
Iteration  23: 0.883 s/op
Iteration  24: 0.835 s/op
Iteration  25: 0.834 s/op
Iteration  26: 0.836 s/op
Iteration  27: 0.832 s/op
Iteration  28: 0.835 s/op
Iteration  29: 0.834 s/op
Iteration  30: 0.834 s/op
Iteration  31: 0.833 s/op
Iteration  32: 0.836 s/op
Iteration  33: 0.831 s/op
Iteration  34: 0.831 s/op
Iteration  35: 0.838 s/op
Iteration  36: 0.831 s/op
Iteration  37: 0.834 s/op
Iteration  38: 0.837 s/op
Iteration  39: 0.834 s/op
Iteration  40: 0.839 s/op
Iteration  41: 0.835 s/op
Iteration  42: 0.838 s/op
Iteration  43: 0.839 s/op
Iteration  44: 0.830 s/op
Iteration  45: 0.836 s/op
Iteration  46: 0.833 s/op
Iteration  47: 0.832 s/op
Iteration  48: 0.834 s/op
Iteration  49: 0.832 s/op
Iteration  50: 0.832 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      0.849 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [0.800, 0.850) = 46 
    [0.850, 0.900) = 1 
    [0.900, 0.950) = 2 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.828 s/op
     p(50.0000) =      0.835 s/op
     p(90.0000) =      0.842 s/op
     p(95.0000) =      0.929 s/op
     p(99.0000) =      1.311 s/op
     p(99.9000) =      1.311 s/op
     p(99.9900) =      1.311 s/op
     p(99.9990) =      1.311 s/op
     p(99.9999) =      1.311 s/op
    p(100.0000) =      1.311 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.849 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564179736653.json
{"wallclock_times": [43.34958295999999], "core_cycle_counts": [[23437978995], [76755146901], [28486626776], [22163461374]], "aperf_counts": [[23272006342], [76736665377], [28462191046], [22140355602]], "mperf_counts": [[23283991142], [76736807164], [28473249598], [22145453610]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 00:23:00: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-27 00:23:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 00:23:00: INFO] 161 executions left in scheduler queue
[2019-07-27 00:23:00: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-27 00:23:00: INFO] Estimated completion (next execution): 2019-07-27 00:26:14 (0:03:13 from now)
[2019-07-27 00:23:00: INFO] Reboot in preparation for next execution
[2019-07-27 00:28:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.780 s/op
Iteration   2: 1.420 s/op
Iteration   3: 1.485 s/op
Iteration   4: 1.379 s/op
Iteration   5: 1.376 s/op
Iteration   6: 1.374 s/op
Iteration   7: 1.377 s/op
Iteration   8: 1.374 s/op
Iteration   9: 1.374 s/op
Iteration  10: 1.378 s/op
Iteration  11: 1.378 s/op
Iteration  12: 1.374 s/op
Iteration  13: 1.375 s/op
Iteration  14: 1.374 s/op
Iteration  15: 1.372 s/op
Iteration  16: 1.380 s/op
Iteration  17: 1.379 s/op
Iteration  18: 1.380 s/op
Iteration  19: 1.381 s/op
Iteration  20: 1.375 s/op
Iteration  21: 1.377 s/op
Iteration  22: 1.377 s/op
Iteration  23: 1.377 s/op
Iteration  24: 1.377 s/op
Iteration  25: 1.377 s/op
Iteration  26: 1.377 s/op
Iteration  27: 1.376 s/op
Iteration  28: 1.377 s/op
Iteration  29: 1.377 s/op
Iteration  30: 1.377 s/op
Iteration  31: 1.377 s/op
Iteration  32: 1.375 s/op
Iteration  33: 1.376 s/op
Iteration  34: 1.377 s/op
Iteration  35: 1.377 s/op
Iteration  36: 1.375 s/op
Iteration  37: 1.379 s/op
Iteration  38: 1.377 s/op
Iteration  39: 1.376 s/op
Iteration  40: 1.375 s/op
Iteration  41: 1.376 s/op
Iteration  42: 1.379 s/op
Iteration  43: 1.379 s/op
Iteration  44: 1.381 s/op
Iteration  45: 1.380 s/op
Iteration  46: 1.381 s/op
Iteration  47: 1.382 s/op
Iteration  48: 1.380 s/op
Iteration  49: 1.374 s/op
Iteration  50: 1.376 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.388 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 47 
    [1.400, 1.450) = 1 
    [1.450, 1.500) = 1 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.372 s/op
     p(50.0000) =      1.377 s/op
     p(90.0000) =      1.381 s/op
     p(95.0000) =      1.449 s/op
     p(99.0000) =      1.780 s/op
     p(99.9000) =      1.780 s/op
     p(99.9900) =      1.780 s/op
     p(99.9990) =      1.780 s/op
     p(99.9999) =      1.780 s/op
    p(100.0000) =      1.780 s/op


# Run complete. Total time: 00:01:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.388 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564180032398.json
{"wallclock_times": [70.25387633899999], "core_cycle_counts": [[70972337420], [62990579016], [40242278367], [56102617378]], "aperf_counts": [[70822610031], [62970147171], [40216727092], [56084664915]], "mperf_counts": [[70836265930], [62978830290], [40217550638], [56084730840]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 00:28:22: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_graalvm-ee-19.1.1'
[2019-07-27 00:28:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 00:28:23: INFO] 160 executions left in scheduler queue
[2019-07-27 00:28:23: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-07-27 00:28:23: INFO] Estimated completion (next execution): 2019-07-27 00:32:04 (0:03:40 from now)
[2019-07-27 00:28:23: INFO] Reboot in preparation for next execution
[2019-07-27 00:32:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 41 
    [0.000, 0.001) = 8 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score    Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564180355503.json
{"wallclock_times": [0.8310383749999914], "core_cycle_counts": [[1698939748], [1408314801], [1192717373], [1230227033]], "aperf_counts": [[1696457815], [1405104027], [1188230361], [1225080297]], "mperf_counts": [[1711086348], [1413688416], [1190616288], [1226054914]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 00:32:36: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ee-19.1.1'
[2019-07-27 00:32:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 00:32:37: INFO] 159 executions left in scheduler queue
[2019-07-27 00:32:37: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-07-27 00:32:37: INFO] Estimated completion (next execution): 2019-07-27 00:35:08 (0:02:31 from now)
[2019-07-27 00:32:37: INFO] Reboot in preparation for next execution
[2019-07-27 00:45:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.031 s/op
Iteration   2: 11.825 s/op
Iteration   3: 11.876 s/op
Iteration   4: 11.571 s/op
Iteration   5: 11.567 s/op
Iteration   6: 11.710 s/op
Iteration   7: 11.824 s/op
Iteration   8: 11.706 s/op
Iteration   9: 11.712 s/op
Iteration  10: 11.825 s/op
Iteration  11: 11.650 s/op
Iteration  12: 12.282 s/op
Iteration  13: 11.967 s/op
Iteration  14: 11.558 s/op
Iteration  15: 11.672 s/op
Iteration  16: 11.728 s/op
Iteration  17: 11.788 s/op
Iteration  18: 11.622 s/op
Iteration  19: 11.676 s/op
Iteration  20: 11.766 s/op
Iteration  21: 11.831 s/op
Iteration  22: 11.725 s/op
Iteration  23: 12.235 s/op
Iteration  24: 11.744 s/op
Iteration  25: 11.574 s/op
Iteration  26: 11.673 s/op
Iteration  27: 11.710 s/op
Iteration  28: 11.795 s/op
Iteration  29: 11.629 s/op
Iteration  30: 11.715 s/op
Iteration  31: 11.763 s/op
Iteration  32: 11.655 s/op
Iteration  33: 11.685 s/op
Iteration  34: 12.261 s/op
Iteration  35: 11.766 s/op
Iteration  36: 11.636 s/op
Iteration  37: 11.684 s/op
Iteration  38: 11.699 s/op
Iteration  39: 11.834 s/op
Iteration  40: 11.635 s/op
Iteration  41: 11.707 s/op
Iteration  42: 12.014 s/op
Iteration  43: 11.611 s/op
Iteration  44: 11.670 s/op
Iteration  45: 12.226 s/op
Iteration  46: 11.817 s/op
Iteration  47: 11.595 s/op
Iteration  48: 11.669 s/op
Iteration  49: 11.718 s/op
Iteration  50: 11.804 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.769 ?(99.9%) 0.088 s/op

  Histogram, s/op:
    [11.500, 11.550) = 0 
    [11.550, 11.600) = 5 
    [11.600, 11.650) = 6 
    [11.650, 11.700) = 9 
    [11.700, 11.750) = 10 
    [11.750, 11.800) = 5 
    [11.800, 11.850) = 7 
    [11.850, 11.900) = 1 
    [11.900, 11.950) = 0 
    [11.950, 12.000) = 1 
    [12.000, 12.050) = 2 
    [12.050, 12.100) = 0 
    [12.100, 12.150) = 0 
    [12.150, 12.200) = 0 
    [12.200, 12.250) = 2 
    [12.250, 12.300) = 2 

  Percentiles, s/op:
      p(0.0000) =     11.558 s/op
     p(50.0000) =     11.713 s/op
     p(90.0000) =     12.030 s/op
     p(95.0000) =     12.247 s/op
     p(99.0000) =     12.282 s/op
     p(99.9000) =     12.282 s/op
     p(99.9900) =     12.282 s/op
     p(99.9990) =     12.282 s/op
     p(99.9999) =     12.282 s/op
    p(100.0000) =     12.282 s/op


# Run complete. Total time: 00:09:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.769 ? 0.088   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564180566574.json
{"wallclock_times": [589.827468811], "core_cycle_counts": [[539658832710], [700261999196], [510064015204], [440622329880]], "aperf_counts": [[538028062881], [700107593922], [509965844871], [440534878499]], "mperf_counts": [[538033867126], [700111020306], [509965946130], [440554673662]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 00:45:56: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot-8u222-b10'
[2019-07-27 00:45:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 00:45:57: INFO] 158 executions left in scheduler queue
[2019-07-27 00:45:57: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 00:45:57: INFO] Estimated completion (next execution): 2019-07-27 00:58:17 (0:12:20 from now)
[2019-07-27 00:45:57: INFO] Reboot in preparation for next execution
[2019-07-27 00:50:12: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 00:56:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.239 s
Iteration   2: 7.980 s
Iteration   3: 7.849 s
Iteration   4: 7.379 s
Iteration   5: 7.425 s
Iteration   6: 7.456 s
Iteration   7: 7.466 s
Iteration   8: 7.259 s
Iteration   9: 7.299 s
Iteration  10: 7.423 s
Iteration  11: 7.400 s
Iteration  12: 7.382 s
Iteration  13: 7.401 s
Iteration  14: 7.387 s
Iteration  15: 7.350 s
Iteration  16: 7.361 s
Iteration  17: 7.372 s
Iteration  18: 7.402 s
Iteration  19: 7.371 s
Iteration  20: 7.357 s
Iteration  21: 7.337 s
Iteration  22: 7.377 s
Iteration  23: 7.373 s
Iteration  24: 7.375 s
Iteration  25: 7.349 s
Iteration  26: 7.347 s
Iteration  27: 7.386 s
Iteration  28: 7.290 s
Iteration  29: 7.423 s
Iteration  30: 7.413 s
Iteration  31: 7.373 s
Iteration  32: 7.341 s
Iteration  33: 7.313 s
Iteration  34: 7.400 s
Iteration  35: 7.364 s
Iteration  36: 7.344 s
Iteration  37: 7.369 s
Iteration  38: 7.417 s
Iteration  39: 7.349 s
Iteration  40: 7.375 s
Iteration  41: 7.347 s
Iteration  42: 7.340 s
Iteration  43: 7.420 s
Iteration  44: 7.385 s
Iteration  45: 7.329 s
Iteration  46: 7.306 s
Iteration  47: 7.372 s
Iteration  48: 7.434 s
Iteration  49: 7.340 s
Iteration  50: 7.289 s


Result: 7.429 ?(99.9%) 0.142 s [Average]
  Statistics: (min, avg, max) = (7.259, 7.429, 9.239), stdev = 0.286
  Confidence interval (99.9%): [7.287, 7.570]
  Samples, N = 50
        mean =      7.429 ?(99.9%) 0.142 s
         min =      7.259 s
  p( 0.0000) =      7.259 s
  p(50.0000) =      7.373 s
  p(90.0000) =      7.454 s
  p(95.0000) =      7.908 s
  p(99.0000) =      9.239 s
  p(99.9000) =      9.239 s
  p(99.9900) =      9.239 s
  p(99.9990) =      9.239 s
  p(99.9999) =      9.239 s
         max =      9.239 s


# Run complete. Total time: 00:06:12

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  7.429        0.142      s
{"wallclock_times": [372.98121079699996], "core_cycle_counts": [[297806204169], [301024709165], [321381130735], [344558407135]], "aperf_counts": [[296804872939], [300909384824], [321264054359], [344497629789]], "mperf_counts": [[296806266636], [300909984524], [321264024816], [344497861876]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 00:56:25: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 00:56:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 00:56:26: INFO] 157 executions left in scheduler queue
[2019-07-27 00:56:26: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 00:56:26: INFO] Estimated completion (next execution): 2019-07-27 01:05:10 (0:08:43 from now)
[2019-07-27 00:56:26: INFO] Reboot in preparation for next execution
[2019-07-27 01:00:39: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 01:06:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.989 s
Iteration   2: 7.017 s
Iteration   3: 6.957 s
Iteration   4: 8.313 s
Iteration   5: 6.657 s
Iteration   6: 6.579 s
Iteration   7: 7.017 s
Iteration   8: 6.602 s
Iteration   9: 6.513 s
Iteration  10: 6.667 s
Iteration  11: 6.652 s
Iteration  12: 6.548 s
Iteration  13: 6.751 s
Iteration  14: 6.856 s
Iteration  15: 6.595 s
Iteration  16: 6.753 s
Iteration  17: 6.496 s
Iteration  18: 6.573 s
Iteration  19: 6.548 s
Iteration  20: 6.696 s
Iteration  21: 6.705 s
Iteration  22: 6.412 s
Iteration  23: 6.830 s
Iteration  24: 6.759 s
Iteration  25: 6.664 s
Iteration  26: 6.771 s
Iteration  27: 6.728 s
Iteration  28: 6.728 s
Iteration  29: 6.495 s
Iteration  30: 6.446 s
Iteration  31: 6.627 s
Iteration  32: 6.948 s
Iteration  33: 6.839 s
Iteration  34: 6.734 s
Iteration  35: 6.873 s
Iteration  36: 6.387 s
Iteration  37: 6.571 s
Iteration  38: 6.896 s
Iteration  39: 6.786 s
Iteration  40: 6.929 s
Iteration  41: 6.386 s
Iteration  42: 6.870 s
Iteration  43: 6.618 s
Iteration  44: 6.552 s
Iteration  45: 6.459 s
Iteration  46: 6.504 s
Iteration  47: 6.727 s
Iteration  48: 6.411 s
Iteration  49: 6.677 s
Iteration  50: 6.572 s


Result: 6.734 ?(99.9%) 0.167 s [Average]
  Statistics: (min, avg, max) = (6.386, 6.734, 8.313), stdev = 0.338
  Confidence interval (99.9%): [6.567, 6.901]
  Samples, N = 50
        mean =      6.734 ?(99.9%) 0.167 s
         min =      6.386 s
  p( 0.0000) =      6.386 s
  p(50.0000) =      6.672 s
  p(90.0000) =      6.957 s
  p(95.0000) =      7.454 s
  p(99.0000) =      8.313 s
  p(99.9000) =      8.313 s
  p(99.9900) =      8.313 s
  p(99.9990) =      8.313 s
  p(99.9999) =      8.313 s
         max =      8.313 s


# Run complete. Total time: 00:05:38

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  6.734        0.167      s
{"wallclock_times": [338.44611166], "core_cycle_counts": [[360612761468], [289690373068], [444220595720], [98938019680]], "aperf_counts": [[359821452922], [289550972987], [444094948925], [98850283130]], "mperf_counts": [[359828774716], [289551025166], [444094916356], [98850276972]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 01:06:18: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 01:06:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 01:06:19: INFO] 156 executions left in scheduler queue
[2019-07-27 01:06:19: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 01:06:19: INFO] Estimated completion (next execution): 2019-07-27 01:14:28 (0:08:08 from now)
[2019-07-27 01:06:19: INFO] Reboot in preparation for next execution
[2019-07-27 01:10:32: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 01:15:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.420 s
Iteration   2: 6.147 s
Iteration   3: 5.711 s
Iteration   4: 5.868 s
Iteration   5: 5.553 s
Iteration   6: 5.499 s
Iteration   7: 5.515 s
Iteration   8: 5.510 s
Iteration   9: 5.494 s
Iteration  10: 5.486 s
Iteration  11: 5.496 s
Iteration  12: 5.467 s
Iteration  13: 5.468 s
Iteration  14: 5.436 s
Iteration  15: 5.494 s
Iteration  16: 5.513 s
Iteration  17: 5.531 s
Iteration  18: 5.523 s
Iteration  19: 5.481 s
Iteration  20: 5.476 s
Iteration  21: 5.509 s
Iteration  22: 5.489 s
Iteration  23: 5.522 s
Iteration  24: 5.482 s
Iteration  25: 5.481 s
Iteration  26: 5.506 s
Iteration  27: 5.516 s
Iteration  28: 5.536 s
Iteration  29: 5.490 s
Iteration  30: 5.468 s
Iteration  31: 5.500 s
Iteration  32: 5.562 s
Iteration  33: 5.514 s
Iteration  34: 5.540 s
Iteration  35: 5.523 s
Iteration  36: 5.532 s
Iteration  37: 5.472 s
Iteration  38: 5.557 s
Iteration  39: 5.541 s
Iteration  40: 5.538 s
Iteration  41: 5.518 s
Iteration  42: 5.446 s
Iteration  43: 5.434 s
Iteration  44: 5.431 s
Iteration  45: 5.423 s
Iteration  46: 5.484 s
Iteration  47: 5.605 s
Iteration  48: 5.606 s
Iteration  49: 5.592 s
Iteration  50: 5.529 s


Result: 5.569 ?(99.9%) 0.144 s [Average]
  Statistics: (min, avg, max) = (5.423, 5.569, 7.420), stdev = 0.290
  Confidence interval (99.9%): [5.425, 5.712]
  Samples, N = 50
        mean =      5.569 ?(99.9%) 0.144 s
         min =      5.423 s
  p( 0.0000) =      5.423 s
  p(50.0000) =      5.512 s
  p(90.0000) =      5.606 s
  p(95.0000) =      5.994 s
  p(99.0000) =      7.420 s
  p(99.9000) =      7.420 s
  p(99.9900) =      7.420 s
  p(99.9990) =      7.420 s
  p(99.9999) =      7.420 s
         max =      7.420 s


# Run complete. Total time: 00:04:39

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  5.569        0.144      s
{"wallclock_times": [280.252679867], "core_cycle_counts": [[281277711726], [261172532016], [175483169702], [311650221197]], "aperf_counts": [[280484735679], [261026001320], [175367351364], [311559355981]], "mperf_counts": [[280492073804], [261030210510], [175367698674], [311559585306]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 01:15:12: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 01:15:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 01:15:13: INFO] 155 executions left in scheduler queue
[2019-07-27 01:15:13: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 01:15:13: INFO] Estimated completion (next execution): 2019-07-27 01:22:24 (0:07:10 from now)
[2019-07-27 01:15:13: INFO] Reboot in preparation for next execution
[2019-07-27 01:19:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 01:30:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.019 s
Iteration   2: 13.230 s
Iteration   3: 12.948 s
Iteration   4: 12.970 s
Iteration   5: 13.151 s
Iteration   6: 12.853 s
Iteration   7: 12.942 s
Iteration   8: 12.851 s
Iteration   9: 12.897 s
Iteration  10: 12.997 s
Iteration  11: 13.050 s
Iteration  12: 12.859 s
Iteration  13: 13.532 s
Iteration  14: 12.865 s
Iteration  15: 12.883 s
Iteration  16: 12.848 s
Iteration  17: 12.985 s
Iteration  18: 13.130 s
Iteration  19: 13.544 s
Iteration  20: 12.894 s
Iteration  21: 13.116 s
Iteration  22: 12.880 s
Iteration  23: 12.851 s
Iteration  24: 13.022 s
Iteration  25: 13.380 s
Iteration  26: 12.982 s
Iteration  27: 12.973 s
Iteration  28: 13.045 s
Iteration  29: 12.880 s
Iteration  30: 12.980 s
Iteration  31: 13.069 s
Iteration  32: 13.101 s
Iteration  33: 13.148 s
Iteration  34: 12.854 s
Iteration  35: 13.129 s
Iteration  36: 13.475 s
Iteration  37: 13.058 s
Iteration  38: 12.936 s
Iteration  39: 13.526 s
Iteration  40: 12.913 s
Iteration  41: 12.921 s
Iteration  42: 12.848 s
Iteration  43: 12.847 s
Iteration  44: 13.487 s
Iteration  45: 12.802 s
Iteration  46: 12.951 s
Iteration  47: 12.883 s
Iteration  48: 12.864 s
Iteration  49: 12.872 s
Iteration  50: 12.758 s


Result: 13.060 ?(99.9%) 0.173 s [Average]
  Statistics: (min, avg, max) = (12.758, 13.060, 15.019), stdev = 0.349
  Confidence interval (99.9%): [12.887, 13.233]
  Samples, N = 50
        mean =     13.060 ?(99.9%) 0.173 s
         min =     12.758 s
  p( 0.0000) =     12.758 s
  p(50.0000) =     12.960 s
  p(90.0000) =     13.486 s
  p(95.0000) =     13.538 s
  p(99.0000) =     15.019 s
  p(99.9000) =     15.019 s
  p(99.9900) =     15.019 s
  p(99.9990) =     15.019 s
  p(99.9999) =     15.019 s
         max =     15.019 s


# Run complete. Total time: 00:10:54

Benchmark                                                                           (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  13.060        0.173      s
{"wallclock_times": [654.6953254590001], "core_cycle_counts": [[932095657883], [335440947214], [499137923963], [398474932426]], "aperf_counts": [[930822852834], [335235039928], [498843731143], [398357309098]], "mperf_counts": [[930825733602], [335234971436], [498843623484], [398357696236]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 01:30:21: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_11.0.4'
[2019-07-27 01:30:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 01:30:22: INFO] 154 executions left in scheduler queue
[2019-07-27 01:30:22: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 01:30:22: INFO] Estimated completion (next execution): 2019-07-27 01:43:47 (0:13:25 from now)
[2019-07-27 01:30:22: INFO] Reboot in preparation for next execution
[2019-07-27 01:34:35: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 01:39:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.388 s/op
Iteration   2: 6.573 s/op
Iteration   3: 6.323 s/op
Iteration   4: 6.198 s/op
Iteration   5: 6.170 s/op
Iteration   6: 6.076 s/op
Iteration   7: 5.986 s/op
Iteration   8: 5.914 s/op
Iteration   9: 5.938 s/op
Iteration  10: 5.927 s/op
Iteration  11: 5.969 s/op
Iteration  12: 5.909 s/op
Iteration  13: 5.974 s/op
Iteration  14: 5.987 s/op
Iteration  15: 6.000 s/op
Iteration  16: 5.824 s/op
Iteration  17: 5.845 s/op
Iteration  18: 5.769 s/op
Iteration  19: 5.794 s/op
Iteration  20: 5.764 s/op
Iteration  21: 5.780 s/op
Iteration  22: 5.768 s/op
Iteration  23: 5.869 s/op
Iteration  24: 5.786 s/op
Iteration  25: 5.728 s/op
Iteration  26: 5.795 s/op
Iteration  27: 5.751 s/op
Iteration  28: 5.801 s/op
Iteration  29: 5.825 s/op
Iteration  30: 5.778 s/op
Iteration  31: 5.804 s/op
Iteration  32: 5.831 s/op
Iteration  33: 5.798 s/op
Iteration  34: 5.763 s/op
Iteration  35: 5.788 s/op
Iteration  36: 5.795 s/op
Iteration  37: 5.792 s/op
Iteration  38: 5.788 s/op
Iteration  39: 5.779 s/op
Iteration  40: 5.801 s/op
Iteration  41: 5.794 s/op
Iteration  42: 5.883 s/op
Iteration  43: 5.789 s/op
Iteration  44: 5.883 s/op
Iteration  45: 5.855 s/op
Iteration  46: 5.850 s/op
Iteration  47: 5.833 s/op
Iteration  48: 5.832 s/op
Iteration  49: 5.789 s/op
Iteration  50: 5.855 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      5.910 ?(99.9%) 0.131 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 42 
    [6.000, 6.250) = 4 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.728 s/op
     p(50.0000) =      5.828 s/op
     p(90.0000) =      6.161 s/op
     p(95.0000) =      6.436 s/op
     p(99.0000) =      7.388 s/op
     p(99.9000) =      7.388 s/op
     p(99.9900) =      7.388 s/op
     p(99.9990) =      7.388 s/op
     p(99.9999) =      7.388 s/op
    p(100.0000) =      7.388 s/op


# Run complete. Total time: 00:04:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  5.910 ? 0.131   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564184075589.json
{"wallclock_times": [296.747860254], "core_cycle_counts": [[294939606456], [253121434245], [233815774272], [217011918573]], "aperf_counts": [[294202214757], [253024503523], [233718727741], [216964767561]], "mperf_counts": [[294206072928], [253024478772], [233718698180], [216964760928]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 01:39:32: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 01:39:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 01:39:33: INFO] 153 executions left in scheduler queue
[2019-07-27 01:39:33: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 01:39:33: INFO] Estimated completion (next execution): 2019-07-27 01:47:00 (0:07:27 from now)
[2019-07-27 01:39:33: INFO] Reboot in preparation for next execution
[2019-07-27 01:43:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 01:52:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.503 s/op
Iteration   2: 10.716 s/op
Iteration   3: 10.356 s/op
Iteration   4: 10.116 s/op
Iteration   5: 10.179 s/op
Iteration   6: 10.155 s/op
Iteration   7: 10.050 s/op
Iteration   8: 9.970 s/op
Iteration   9: 10.041 s/op
Iteration  10: 10.086 s/op
Iteration  11: 10.088 s/op
Iteration  12: 10.187 s/op
Iteration  13: 10.035 s/op
Iteration  14: 10.122 s/op
Iteration  15: 10.091 s/op
Iteration  16: 10.214 s/op
Iteration  17: 10.107 s/op
Iteration  18: 10.200 s/op
Iteration  19: 10.084 s/op
Iteration  20: 10.204 s/op
Iteration  21: 10.064 s/op
Iteration  22: 10.168 s/op
Iteration  23: 10.084 s/op
Iteration  24: 10.125 s/op
Iteration  25: 10.027 s/op
Iteration  26: 10.127 s/op
Iteration  27: 10.004 s/op
Iteration  28: 10.213 s/op
Iteration  29: 9.981 s/op
Iteration  30: 10.069 s/op
Iteration  31: 10.025 s/op
Iteration  32: 10.042 s/op
Iteration  33: 10.003 s/op
Iteration  34: 10.067 s/op
Iteration  35: 10.027 s/op
Iteration  36: 10.158 s/op
Iteration  37: 9.992 s/op
Iteration  38: 10.079 s/op
Iteration  39: 9.955 s/op
Iteration  40: 10.090 s/op
Iteration  41: 10.030 s/op
Iteration  42: 10.106 s/op
Iteration  43: 10.169 s/op
Iteration  44: 10.095 s/op
Iteration  45: 10.172 s/op
Iteration  46: 10.144 s/op
Iteration  47: 10.088 s/op
Iteration  48: 9.985 s/op
Iteration  49: 10.223 s/op
Iteration  50: 10.043 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     10.157 ?(99.9%) 0.177 s/op

  Histogram, s/op:
    [ 9.000,  9.250) = 0 
    [ 9.250,  9.500) = 0 
    [ 9.500,  9.750) = 0 
    [ 9.750, 10.000) = 5 
    [10.000, 10.250) = 42 
    [10.250, 10.500) = 1 
    [10.500, 10.750) = 1 
    [10.750, 11.000) = 0 
    [11.000, 11.250) = 0 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 0 
    [12.500, 12.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.955 s/op
     p(50.0000) =     10.089 s/op
     p(90.0000) =     10.214 s/op
     p(95.0000) =     10.518 s/op
     p(99.0000) =     12.503 s/op
     p(99.9000) =     12.503 s/op
     p(99.9900) =     12.503 s/op
     p(99.9990) =     12.503 s/op
     p(99.9999) =     12.503 s/op
    p(100.0000) =     12.503 s/op


# Run complete. Total time: 00:08:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.157 ? 0.177   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564184625664.json
{"wallclock_times": [509.16693637900005], "core_cycle_counts": [[368056147152], [484992279308], [376987344869], [445527426353]], "aperf_counts": [[366688830074], [484866980488], [376884959968], [445451833380]], "mperf_counts": [[366691066136], [484867543300], [376888444986], [445451922246]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 01:52:14: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 01:52:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 01:52:15: INFO] 152 executions left in scheduler queue
[2019-07-27 01:52:15: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 01:52:15: INFO] Estimated completion (next execution): 2019-07-27 02:03:15 (0:10:59 from now)
[2019-07-27 01:52:15: INFO] Reboot in preparation for next execution
[2019-07-27 01:56:30: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 02:00:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.922 s/op
Iteration   2: 6.486 s/op
Iteration   3: 6.136 s/op
Iteration   4: 6.116 s/op
Iteration   5: 5.223 s/op
Iteration   6: 4.607 s/op
Iteration   7: 4.554 s/op
Iteration   8: 4.544 s/op
Iteration   9: 4.549 s/op
Iteration  10: 4.551 s/op
Iteration  11: 4.542 s/op
Iteration  12: 4.527 s/op
Iteration  13: 4.552 s/op
Iteration  14: 4.572 s/op
Iteration  15: 4.567 s/op
Iteration  16: 4.535 s/op
Iteration  17: 4.435 s/op
Iteration  18: 4.398 s/op
Iteration  19: 4.432 s/op
Iteration  20: 4.426 s/op
Iteration  21: 4.446 s/op
Iteration  22: 4.448 s/op
Iteration  23: 4.455 s/op
Iteration  24: 4.461 s/op
Iteration  25: 4.472 s/op
Iteration  26: 4.458 s/op
Iteration  27: 4.385 s/op
Iteration  28: 4.420 s/op
Iteration  29: 4.452 s/op
Iteration  30: 4.427 s/op
Iteration  31: 4.419 s/op
Iteration  32: 4.460 s/op
Iteration  33: 4.459 s/op
Iteration  34: 4.455 s/op
Iteration  35: 4.475 s/op
Iteration  36: 4.428 s/op
Iteration  37: 4.413 s/op
Iteration  38: 4.437 s/op
Iteration  39: 4.413 s/op
Iteration  40: 4.434 s/op
Iteration  41: 4.432 s/op
Iteration  42: 4.459 s/op
Iteration  43: 4.448 s/op
Iteration  44: 4.467 s/op
Iteration  45: 4.446 s/op
Iteration  46: 4.444 s/op
Iteration  47: 4.485 s/op
Iteration  48: 4.479 s/op
Iteration  49: 4.437 s/op
Iteration  50: 4.422 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.640 ?(99.9%) 0.272 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 34 
    [4.500, 4.750) = 11 
    [4.750, 5.000) = 0 
    [5.000, 5.250) = 1 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 2 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.385 s/op
     p(50.0000) =      4.458 s/op
     p(90.0000) =      5.161 s/op
     p(95.0000) =      6.294 s/op
     p(99.0000) =      6.922 s/op
     p(99.9000) =      6.922 s/op
     p(99.9900) =      6.922 s/op
     p(99.9990) =      6.922 s/op
     p(99.9999) =      6.922 s/op
    p(100.0000) =      6.922 s/op


# Run complete. Total time: 00:03:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.640 ? 0.272   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564185390092.json
{"wallclock_times": [233.416979955], "core_cycle_counts": [[262892862182], [237896373390], [167395073929], [209781811205]], "aperf_counts": [[262327848927], [237765798438], [167251119693], [209695379839]], "mperf_counts": [[262328737126], [237767288702], [167251419314], [209695371248]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 02:00:23: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 02:00:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 02:00:24: INFO] 151 executions left in scheduler queue
[2019-07-27 02:00:24: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 02:00:24: INFO] Estimated completion (next execution): 2019-07-27 02:06:48 (0:06:23 from now)
[2019-07-27 02:00:24: INFO] Reboot in preparation for next execution
[2019-07-27 02:04:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 02:10:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.735 s/op
Iteration   2: 6.184 s/op
Iteration   3: 5.990 s/op
Iteration   4: 6.963 s/op
Iteration   5: 6.825 s/op
Iteration   6: 6.909 s/op
Iteration   7: 6.654 s/op
Iteration   8: 6.704 s/op
Iteration   9: 6.866 s/op
Iteration  10: 6.884 s/op
Iteration  11: 6.794 s/op
Iteration  12: 6.884 s/op
Iteration  13: 6.768 s/op
Iteration  14: 6.802 s/op
Iteration  15: 6.885 s/op
Iteration  16: 6.817 s/op
Iteration  17: 6.922 s/op
Iteration  18: 6.911 s/op
Iteration  19: 6.765 s/op
Iteration  20: 6.802 s/op
Iteration  21: 6.854 s/op
Iteration  22: 6.997 s/op
Iteration  23: 6.885 s/op
Iteration  24: 6.755 s/op
Iteration  25: 6.897 s/op
Iteration  26: 6.819 s/op
Iteration  27: 6.918 s/op
Iteration  28: 6.838 s/op
Iteration  29: 6.811 s/op
Iteration  30: 6.930 s/op
Iteration  31: 6.812 s/op
Iteration  32: 6.693 s/op
Iteration  33: 6.870 s/op
Iteration  34: 6.801 s/op
Iteration  35: 6.898 s/op
Iteration  36: 6.841 s/op
Iteration  37: 6.657 s/op
Iteration  38: 6.819 s/op
Iteration  39: 6.840 s/op
Iteration  40: 6.898 s/op
Iteration  41: 6.852 s/op
Iteration  42: 6.618 s/op
Iteration  43: 6.730 s/op
Iteration  44: 6.834 s/op
Iteration  45: 6.896 s/op
Iteration  46: 6.856 s/op
Iteration  47: 6.747 s/op
Iteration  48: 6.828 s/op
Iteration  49: 6.749 s/op
Iteration  50: 6.765 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.795 ?(99.9%) 0.083 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 
    [5.875, 6.000) = 1 
    [6.000, 6.125) = 0 
    [6.125, 6.250) = 1 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 8 
    [6.750, 6.875) = 24 

  Percentiles, s/op:
      p(0.0000) =      5.990 s/op
     p(50.0000) =      6.827 s/op
     p(90.0000) =      6.918 s/op
     p(95.0000) =      6.945 s/op
     p(99.0000) =      6.997 s/op
     p(99.9000) =      6.997 s/op
     p(99.9900) =      6.997 s/op
     p(99.9990) =      6.997 s/op
     p(99.9999) =      6.997 s/op
    p(100.0000) =      6.997 s/op


# Run complete. Total time: 00:05:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.795 ? 0.083   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564185880227.json
{"wallclock_times": [341.158655402], "core_cycle_counts": [[199780426037], [155925555205], [542880483246], [261321153368]], "aperf_counts": [[198831631049], [155836396982], [542802213860], [261262894440]], "mperf_counts": [[198832109762], [155837078590], [542802198724], [261262890756]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 02:10:21: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9-8u222-b10'
[2019-07-27 02:10:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 02:10:22: INFO] 150 executions left in scheduler queue
[2019-07-27 02:10:22: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:10:22: INFO] Estimated completion (next execution): 2019-07-27 02:18:33 (0:08:11 from now)
[2019-07-27 02:10:22: INFO] Reboot in preparation for next execution
[2019-07-27 02:21:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.929 s
Iteration   2: 7.842 s
Iteration   3: 7.703 s
Iteration   4: 7.724 s
Iteration   5: 7.725 s
Iteration   6: 7.708 s
Iteration   7: 7.719 s
Iteration   8: 7.704 s
Iteration   9: 7.720 s
Iteration  10: 7.725 s
Iteration  11: 7.723 s
Iteration  12: 7.733 s
Iteration  13: 7.733 s
Iteration  14: 7.705 s
Iteration  15: 7.731 s
Iteration  16: 7.728 s
Iteration  17: 7.751 s
Iteration  18: 7.747 s
Iteration  19: 7.752 s
Iteration  20: 7.748 s
Iteration  21: 7.754 s
Iteration  22: 7.746 s
Iteration  23: 7.747 s
Iteration  24: 7.760 s
Iteration  25: 7.742 s
Iteration  26: 7.726 s
Iteration  27: 7.745 s
Iteration  28: 7.756 s
Iteration  29: 7.755 s
Iteration  30: 7.722 s
Iteration  31: 7.725 s
Iteration  32: 7.754 s
Iteration  33: 7.753 s
Iteration  34: 7.746 s
Iteration  35: 7.742 s
Iteration  36: 7.745 s
Iteration  37: 7.754 s
Iteration  38: 7.713 s
Iteration  39: 7.754 s
Iteration  40: 7.714 s
Iteration  41: 7.740 s
Iteration  42: 7.738 s
Iteration  43: 7.761 s
Iteration  44: 7.739 s
Iteration  45: 7.738 s
Iteration  46: 7.731 s
Iteration  47: 7.734 s
Iteration  48: 7.740 s
Iteration  49: 7.715 s
Iteration  50: 7.729 s


Result: 7.741 ?(99.9%) 0.017 s [Average]
  Statistics: (min, avg, max) = (7.703, 7.741, 7.929), stdev = 0.035
  Confidence interval (99.9%): [7.724, 7.759]
  Samples, N = 50
        mean =      7.741 ?(99.9%) 0.017 s
         min =      7.703 s
  p( 0.0000) =      7.703 s
  p(50.0000) =      7.738 s
  p(90.0000) =      7.756 s
  p(95.0000) =      7.797 s
  p(99.0000) =      7.929 s
  p(99.9000) =      7.929 s
  p(99.9900) =      7.929 s
  p(99.9990) =      7.929 s
  p(99.9999) =      7.929 s
         max =      7.929 s


# Run complete. Total time: 00:06:27

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  7.741        0.017      s
{"wallclock_times": [388.0506486119999], "core_cycle_counts": [[283314837785], [381347316799], [325584967178], [259867669710]], "aperf_counts": [[282396237829], [381283549386], [325561421582], [259842794832]], "mperf_counts": [[282415416456], [381288035974], [325562650340], [259848310558]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 02:21:17: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:21:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 02:21:18: INFO] 149 executions left in scheduler queue
[2019-07-27 02:21:18: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:21:18: INFO] Estimated completion (next execution): 2019-07-27 02:30:16 (0:08:58 from now)
[2019-07-27 02:21:18: INFO] Reboot in preparation for next execution
[2019-07-27 02:28:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.305 s
Iteration   2: 3.259 s
Iteration   3: 3.141 s
Iteration   4: 3.128 s
Iteration   5: 3.116 s
Iteration   6: 3.138 s
Iteration   7: 3.124 s
Iteration   8: 3.121 s
Iteration   9: 3.122 s
Iteration  10: 3.172 s
Iteration  11: 3.126 s
Iteration  12: 3.127 s
Iteration  13: 3.125 s
Iteration  14: 3.132 s
Iteration  15: 3.114 s
Iteration  16: 3.161 s
Iteration  17: 3.159 s
Iteration  18: 3.123 s
Iteration  19: 3.149 s
Iteration  20: 3.120 s
Iteration  21: 3.125 s
Iteration  22: 3.119 s
Iteration  23: 3.150 s
Iteration  24: 3.136 s
Iteration  25: 3.141 s
Iteration  26: 3.129 s
Iteration  27: 3.153 s
Iteration  28: 3.133 s
Iteration  29: 3.129 s
Iteration  30: 3.133 s
Iteration  31: 3.122 s
Iteration  32: 3.121 s
Iteration  33: 3.112 s
Iteration  34: 3.108 s
Iteration  35: 3.118 s
Iteration  36: 3.120 s
Iteration  37: 3.155 s
Iteration  38: 3.132 s
Iteration  39: 3.123 s
Iteration  40: 3.123 s
Iteration  41: 3.117 s
Iteration  42: 3.136 s
Iteration  43: 3.136 s
Iteration  44: 3.137 s
Iteration  45: 3.142 s
Iteration  46: 3.136 s
Iteration  47: 3.150 s
Iteration  48: 3.136 s
Iteration  49: 3.119 s
Iteration  50: 3.121 s


Result: 3.138 ?(99.9%) 0.016 s [Average]
  Statistics: (min, avg, max) = (3.108, 3.138, 3.305), stdev = 0.033
  Confidence interval (99.9%): [3.121, 3.154]
  Samples, N = 50
        mean =      3.138 ?(99.9%) 0.016 s
         min =      3.108 s
  p( 0.0000) =      3.108 s
  p(50.0000) =      3.129 s
  p(90.0000) =      3.159 s
  p(95.0000) =      3.211 s
  p(99.0000) =      3.305 s
  p(99.9000) =      3.305 s
  p(99.9900) =      3.305 s
  p(99.9990) =      3.305 s
  p(99.9999) =      3.305 s
         max =      3.305 s


# Run complete. Total time: 00:02:37

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  3.138        0.016      s
{"wallclock_times": [157.949543246], "core_cycle_counts": [[111299388885], [109964513200], [159795422202], [136612618311]], "aperf_counts": [[110899367648], [109928065573], [159773314827], [136590169533]], "mperf_counts": [[110921609794], [109941542300], [159779209984], [136592411734]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 02:28:09: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:28:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 02:28:10: INFO] 148 executions left in scheduler queue
[2019-07-27 02:28:10: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:28:10: INFO] Estimated completion (next execution): 2019-07-27 02:33:19 (0:05:08 from now)
[2019-07-27 02:28:10: INFO] Reboot in preparation for next execution
[2019-07-27 02:35:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.198 s
Iteration   2: 3.735 s
Iteration   3: 3.846 s
Iteration   4: 3.827 s
Iteration   5: 3.790 s
Iteration   6: 3.780 s
Iteration   7: 3.794 s
Iteration   8: 3.843 s
Iteration   9: 3.790 s
Iteration  10: 3.803 s
Iteration  11: 3.851 s
Iteration  12: 3.802 s
Iteration  13: 3.802 s
Iteration  14: 3.795 s
Iteration  15: 3.853 s
Iteration  16: 3.796 s
Iteration  17: 3.806 s
Iteration  18: 3.801 s
Iteration  19: 3.865 s
Iteration  20: 3.793 s
Iteration  21: 3.812 s
Iteration  22: 3.796 s
Iteration  23: 3.798 s
Iteration  24: 3.865 s
Iteration  25: 3.807 s
Iteration  26: 3.814 s
Iteration  27: 3.804 s
Iteration  28: 3.860 s
Iteration  29: 3.797 s
Iteration  30: 3.815 s
Iteration  31: 3.797 s
Iteration  32: 3.800 s
Iteration  33: 3.862 s
Iteration  34: 3.804 s
Iteration  35: 3.802 s
Iteration  36: 3.800 s
Iteration  37: 3.862 s
Iteration  38: 3.798 s
Iteration  39: 3.818 s
Iteration  40: 3.809 s
Iteration  41: 3.865 s
Iteration  42: 3.793 s
Iteration  43: 3.811 s
Iteration  44: 3.808 s
Iteration  45: 3.805 s
Iteration  46: 3.870 s
Iteration  47: 3.807 s
Iteration  48: 3.819 s
Iteration  49: 3.814 s
Iteration  50: 3.892 s


Result: 3.823 ?(99.9%) 0.030 s [Average]
  Statistics: (min, avg, max) = (3.735, 3.823, 4.198), stdev = 0.061
  Confidence interval (99.9%): [3.793, 3.854]
  Samples, N = 50
        mean =      3.823 ?(99.9%) 0.030 s
         min =      3.735 s
  p( 0.0000) =      3.735 s
  p(50.0000) =      3.807 s
  p(90.0000) =      3.865 s
  p(95.0000) =      3.880 s
  p(99.0000) =      4.198 s
  p(99.9000) =      4.198 s
  p(99.9900) =      4.198 s
  p(99.9990) =      4.198 s
  p(99.9999) =      4.198 s
         max =      4.198 s


# Run complete. Total time: 00:03:12

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  3.823        0.030      s
{"wallclock_times": [192.31439405900002], "core_cycle_counts": [[205992906663], [194940705154], [174344912954], [112474739754]], "aperf_counts": [[205517952314], [194874654496], [174308032878], [112434799700]], "mperf_counts": [[205540891840], [194880321382], [174311685538], [112439177618]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 02:35:35: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:35:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 02:35:36: INFO] 147 executions left in scheduler queue
[2019-07-27 02:35:36: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:35:36: INFO] Estimated completion (next execution): 2019-07-27 02:41:19 (0:05:42 from now)
[2019-07-27 02:35:36: INFO] Reboot in preparation for next execution
[2019-07-27 02:45:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.045 s
Iteration   2: 6.875 s
Iteration   3: 6.837 s
Iteration   4: 6.859 s
Iteration   5: 6.792 s
Iteration   6: 6.797 s
Iteration   7: 6.813 s
Iteration   8: 6.829 s
Iteration   9: 6.809 s
Iteration  10: 6.780 s
Iteration  11: 6.802 s
Iteration  12: 6.841 s
Iteration  13: 6.819 s
Iteration  14: 6.826 s
Iteration  15: 6.817 s
Iteration  16: 6.792 s
Iteration  17: 6.805 s
Iteration  18: 6.787 s
Iteration  19: 6.827 s
Iteration  20: 6.793 s
Iteration  21: 6.823 s
Iteration  22: 6.820 s
Iteration  23: 6.782 s
Iteration  24: 6.827 s
Iteration  25: 6.812 s
Iteration  26: 6.804 s
Iteration  27: 6.802 s
Iteration  28: 6.825 s
Iteration  29: 6.843 s
Iteration  30: 6.830 s
Iteration  31: 6.825 s
Iteration  32: 6.831 s
Iteration  33: 6.801 s
Iteration  34: 6.814 s
Iteration  35: 6.821 s
Iteration  36: 6.831 s
Iteration  37: 6.857 s
Iteration  38: 6.818 s
Iteration  39: 6.830 s
Iteration  40: 6.818 s
Iteration  41: 6.827 s
Iteration  42: 6.819 s
Iteration  43: 6.827 s
Iteration  44: 6.863 s
Iteration  45: 6.827 s
Iteration  46: 6.812 s
Iteration  47: 6.804 s
Iteration  48: 6.802 s
Iteration  49: 6.817 s
Iteration  50: 6.814 s


Result: 6.823 ?(99.9%) 0.019 s [Average]
  Statistics: (min, avg, max) = (6.780, 6.823, 7.045), stdev = 0.038
  Confidence interval (99.9%): [6.805, 6.842]
  Samples, N = 50
        mean =      6.823 ?(99.9%) 0.019 s
         min =      6.780 s
  p( 0.0000) =      6.780 s
  p(50.0000) =      6.819 s
  p(90.0000) =      6.855 s
  p(95.0000) =      6.868 s
  p(99.0000) =      7.045 s
  p(99.9000) =      7.045 s
  p(99.9900) =      7.045 s
  p(99.9990) =      7.045 s
  p(99.9999) =      7.045 s
         max =      7.045 s


# Run complete. Total time: 00:05:42

Benchmark                                                                           (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  6.823        0.019      s
{"wallclock_times": [342.186772303], "core_cycle_counts": [[492913992346], [231208598103], [189596066465], [191611992232]], "aperf_counts": [[492315774807], [231125824547], [189555503763], [191579702646]], "mperf_counts": [[492334448076], [231140721310], [189558810602], [191589478888]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 02:45:32: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_graalvm-ee-19.1.1'
[2019-07-27 02:45:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 02:45:33: INFO] 146 executions left in scheduler queue
[2019-07-27 02:45:33: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-07-27 02:45:33: INFO] Estimated completion (next execution): 2019-07-27 02:53:46 (0:08:12 from now)
[2019-07-27 02:45:33: INFO] Reboot in preparation for next execution
[2019-07-27 02:56:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.275 s/op
Iteration   2: 8.047 s/op
Iteration   3: 8.018 s/op
Iteration   4: 8.011 s/op
Iteration   5: 8.011 s/op
Iteration   6: 8.278 s/op
Iteration   7: 8.137 s/op
Iteration   8: 7.904 s/op
Iteration   9: 8.122 s/op
Iteration  10: 7.934 s/op
Iteration  11: 7.955 s/op
Iteration  12: 8.157 s/op
Iteration  13: 8.307 s/op
Iteration  14: 7.972 s/op
Iteration  15: 8.034 s/op
Iteration  16: 7.846 s/op
Iteration  17: 7.837 s/op
Iteration  18: 7.911 s/op
Iteration  19: 7.705 s/op
Iteration  20: 7.768 s/op
Iteration  21: 7.877 s/op
Iteration  22: 7.699 s/op
Iteration  23: 7.735 s/op
Iteration  24: 7.913 s/op
Iteration  25: 7.865 s/op
Iteration  26: 7.867 s/op
Iteration  27: 7.783 s/op
Iteration  28: 7.779 s/op
Iteration  29: 7.900 s/op
Iteration  30: 7.704 s/op
Iteration  31: 7.764 s/op
Iteration  32: 7.906 s/op
Iteration  33: 7.700 s/op
Iteration  34: 7.728 s/op
Iteration  35: 7.905 s/op
Iteration  36: 7.867 s/op
Iteration  37: 8.618 s/op
Iteration  38: 7.750 s/op
Iteration  39: 7.840 s/op
Iteration  40: 7.871 s/op
Iteration  41: 7.854 s/op
Iteration  42: 7.861 s/op
Iteration  43: 7.720 s/op
Iteration  44: 7.796 s/op
Iteration  45: 7.884 s/op
Iteration  46: 7.711 s/op
Iteration  47: 7.795 s/op
Iteration  48: 7.878 s/op
Iteration  49: 7.720 s/op
Iteration  50: 7.763 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      7.906 ?(99.9%) 0.092 s/op

  Histogram, s/op:
    [7.600, 7.700) = 1 
    [7.700, 7.800) = 16 
    [7.800, 7.900) = 13 
    [7.900, 8.000) = 8 
    [8.000, 8.100) = 5 
    [8.100, 8.200) = 3 
    [8.200, 8.300) = 2 
    [8.300, 8.400) = 1 
    [8.400, 8.500) = 0 
    [8.500, 8.600) = 0 
    [8.600, 8.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      7.699 s/op
     p(50.0000) =      7.869 s/op
     p(90.0000) =      8.155 s/op
     p(95.0000) =      8.291 s/op
     p(99.0000) =      8.618 s/op
     p(99.9000) =      8.618 s/op
     p(99.9900) =      8.618 s/op
     p(99.9990) =      8.618 s/op
     p(99.9999) =      8.618 s/op
    p(100.0000) =      8.618 s/op


# Run complete. Total time: 00:06:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt  Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  7.906 ? 0.092   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564188586766.json
{"wallclock_times": [396.247997032], "core_cycle_counts": [[315780362400], [237168703455], [626675351497], [214649816346]], "aperf_counts": [[314828342038], [237069100414], [626634355864], [214609533815]], "mperf_counts": [[314843070644], [237069419770], [626635113824], [214614164894]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 02:56:23: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_graalvm-ce-19.1.1'
[2019-07-27 02:56:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 02:56:23: INFO] 145 executions left in scheduler queue
[2019-07-27 02:56:23: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-27 02:56:23: INFO] Estimated completion (next execution): 2019-07-27 03:05:30 (0:09:06 from now)
[2019-07-27 02:56:23: INFO] Reboot in preparation for next execution
[2019-07-27 03:00:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 03:00:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 03:00:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 03:00:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 03:00:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 03:00:36: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 03:02:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.216 s/op
Iteration   2: 2.782 s/op
Iteration   3: 2.479 s/op
Iteration   4: 2.263 s/op
Iteration   5: 2.021 s/op
Iteration   6: 1.975 s/op
Iteration   7: 1.942 s/op
Iteration   8: 1.909 s/op
Iteration   9: 1.928 s/op
Iteration  10: 1.952 s/op
Iteration  11: 1.983 s/op
Iteration  12: 1.994 s/op
Iteration  13: 1.983 s/op
Iteration  14: 1.955 s/op
Iteration  15: 1.979 s/op
Iteration  16: 1.989 s/op
Iteration  17: 1.972 s/op
Iteration  18: 1.975 s/op
Iteration  19: 1.982 s/op
Iteration  20: 1.969 s/op
Iteration  21: 1.979 s/op
Iteration  22: 1.972 s/op
Iteration  23: 1.993 s/op
Iteration  24: 1.966 s/op
Iteration  25: 1.956 s/op
Iteration  26: 1.957 s/op
Iteration  27: 1.970 s/op
Iteration  28: 1.974 s/op
Iteration  29: 1.968 s/op
Iteration  30: 1.964 s/op
Iteration  31: 1.976 s/op
Iteration  32: 1.973 s/op
Iteration  33: 1.939 s/op
Iteration  34: 1.980 s/op
Iteration  35: 1.959 s/op
Iteration  36: 1.977 s/op
Iteration  37: 1.955 s/op
Iteration  38: 1.967 s/op
Iteration  39: 1.988 s/op
Iteration  40: 1.974 s/op
Iteration  41: 1.982 s/op
Iteration  42: 1.966 s/op
Iteration  43: 1.981 s/op
Iteration  44: 1.969 s/op
Iteration  45: 1.971 s/op
Iteration  46: 1.978 s/op
Iteration  47: 1.996 s/op
Iteration  48: 1.977 s/op
Iteration  49: 1.943 s/op
Iteration  50: 1.953 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.027 ?(99.9%) 0.110 s/op

  Histogram, s/op:
    [1.000, 1.250) = 0 
    [1.250, 1.500) = 0 
    [1.500, 1.750) = 0 
    [1.750, 2.000) = 45 
    [2.000, 2.250) = 1 
    [2.250, 2.500) = 2 
    [2.500, 2.750) = 0 
    [2.750, 3.000) = 1 
    [3.000, 3.250) = 1 
    [3.250, 3.500) = 0 
    [3.500, 3.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.909 s/op
     p(50.0000) =      1.974 s/op
     p(90.0000) =      2.018 s/op
     p(95.0000) =      2.615 s/op
     p(99.0000) =      3.216 s/op
     p(99.9000) =      3.216 s/op
     p(99.9900) =      3.216 s/op
     p(99.9990) =      3.216 s/op
     p(99.9999) =      3.216 s/op
    p(100.0000) =      3.216 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.027 ? 0.110   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564189236749.json
{"wallclock_times": [102.99326038999999], "core_cycle_counts": [[157589867283], [55421602735], [78994726072], [65793527443]], "aperf_counts": [[157324998892], [55350030504], [78905153058], [65725632960]], "mperf_counts": [[157326112942], [55350973912], [78905183622], [65725626636]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 03:02:19: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-27 03:02:20: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 03:02:20: INFO] 144 executions left in scheduler queue
[2019-07-27 03:02:20: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-27 03:02:20: INFO] Estimated completion (next execution): 2019-07-27 03:06:34 (0:04:13 from now)
[2019-07-27 03:02:20: INFO] Reboot in preparation for next execution
[2019-07-27 03:06:33: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 03:06:33: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 03:06:33: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 03:06:33: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 03:06:33: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 03:06:33: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 03:09:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.710 s/op
Iteration   2: 3.435 s/op
Iteration   3: 3.505 s/op
Iteration   4: 3.384 s/op
Iteration   5: 3.233 s/op
Iteration   6: 3.234 s/op
Iteration   7: 3.122 s/op
Iteration   8: 3.129 s/op
Iteration   9: 3.130 s/op
Iteration  10: 3.113 s/op
Iteration  11: 3.074 s/op
Iteration  12: 3.187 s/op
Iteration  13: 3.117 s/op
Iteration  14: 3.102 s/op
Iteration  15: 3.080 s/op
Iteration  16: 3.108 s/op
Iteration  17: 3.113 s/op
Iteration  18: 3.113 s/op
Iteration  19: 3.121 s/op
Iteration  20: 3.093 s/op
Iteration  21: 3.141 s/op
Iteration  22: 3.126 s/op
Iteration  23: 3.125 s/op
Iteration  24: 3.118 s/op
Iteration  25: 3.131 s/op
Iteration  26: 3.164 s/op
Iteration  27: 3.114 s/op
Iteration  28: 3.104 s/op
Iteration  29: 3.127 s/op
Iteration  30: 3.087 s/op
Iteration  31: 3.118 s/op
Iteration  32: 3.123 s/op
Iteration  33: 3.091 s/op
Iteration  34: 3.121 s/op
Iteration  35: 3.110 s/op
Iteration  36: 3.143 s/op
Iteration  37: 3.138 s/op
Iteration  38: 3.123 s/op
Iteration  39: 3.084 s/op
Iteration  40: 3.126 s/op
Iteration  41: 3.119 s/op
Iteration  42: 3.094 s/op
Iteration  43: 3.121 s/op
Iteration  44: 3.093 s/op
Iteration  45: 3.119 s/op
Iteration  46: 3.073 s/op
Iteration  47: 3.087 s/op
Iteration  48: 3.100 s/op
Iteration  49: 3.078 s/op
Iteration  50: 3.108 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      3.150 ?(99.9%) 0.058 s/op

  Histogram, s/op:
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 12 
    [3.100, 3.150) = 30 
    [3.150, 3.200) = 2 
    [3.200, 3.250) = 2 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 0 
    [3.350, 3.400) = 1 
    [3.400, 3.450) = 1 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 1 
    [3.550, 3.600) = 0 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 1 
    [3.750, 3.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.073 s/op
     p(50.0000) =      3.119 s/op
     p(90.0000) =      3.234 s/op
     p(95.0000) =      3.466 s/op
     p(99.0000) =      3.710 s/op
     p(99.9000) =      3.710 s/op
     p(99.9900) =      3.710 s/op
     p(99.9990) =      3.710 s/op
     p(99.9999) =      3.710 s/op
    p(100.0000) =      3.710 s/op


# Run complete. Total time: 00:02:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.150 ? 0.058   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564189593765.json
{"wallclock_times": [159.02349006400001], "core_cycle_counts": [[140773336284], [123237848589], [175515072895], [107655573500]], "aperf_counts": [[140337185262], [123159906251], [175454332458], [107608909977]], "mperf_counts": [[140340530564], [123161577258], [175454332158], [107608921418]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 03:09:12: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_openj9_12.0.1'
[2019-07-27 03:09:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 03:09:13: INFO] 143 executions left in scheduler queue
[2019-07-27 03:09:13: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-27 03:09:13: INFO] Estimated completion (next execution): 2019-07-27 03:14:23 (0:05:09 from now)
[2019-07-27 03:09:13: INFO] Reboot in preparation for next execution
[2019-07-27 03:13:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 03:15:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.809 s/op
Iteration   2: 2.210 s/op
Iteration   3: 2.176 s/op
Iteration   4: 2.050 s/op
Iteration   5: 2.065 s/op
Iteration   6: 2.046 s/op
Iteration   7: 2.062 s/op
Iteration   8: 2.055 s/op
Iteration   9: 2.020 s/op
Iteration  10: 1.975 s/op
Iteration  11: 1.991 s/op
Iteration  12: 1.967 s/op
Iteration  13: 2.002 s/op
Iteration  14: 1.982 s/op
Iteration  15: 1.980 s/op
Iteration  16: 1.986 s/op
Iteration  17: 1.993 s/op
Iteration  18: 2.006 s/op
Iteration  19: 1.952 s/op
Iteration  20: 2.006 s/op
Iteration  21: 1.999 s/op
Iteration  22: 1.969 s/op
Iteration  23: 2.005 s/op
Iteration  24: 2.022 s/op
Iteration  25: 1.993 s/op
Iteration  26: 2.014 s/op
Iteration  27: 1.998 s/op
Iteration  28: 1.998 s/op
Iteration  29: 2.002 s/op
Iteration  30: 2.019 s/op
Iteration  31: 2.006 s/op
Iteration  32: 2.024 s/op
Iteration  33: 2.003 s/op
Iteration  34: 2.013 s/op
Iteration  35: 2.017 s/op
Iteration  36: 2.026 s/op
Iteration  37: 2.036 s/op
Iteration  38: 2.011 s/op
Iteration  39: 2.006 s/op
Iteration  40: 2.012 s/op
Iteration  41: 1.989 s/op
Iteration  42: 1.993 s/op
Iteration  43: 2.028 s/op
Iteration  44: 2.007 s/op
Iteration  45: 1.997 s/op
Iteration  46: 1.999 s/op
Iteration  47: 2.024 s/op
Iteration  48: 2.031 s/op
Iteration  49: 2.007 s/op
Iteration  50: 2.018 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.032 ?(99.9%) 0.059 s/op

  Histogram, s/op:
    [1.900, 2.000) = 17 
    [2.000, 2.100) = 30 
    [2.100, 2.200) = 1 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.952 s/op
     p(50.0000) =      2.006 s/op
     p(90.0000) =      2.061 s/op
     p(95.0000) =      2.191 s/op
     p(99.0000) =      2.809 s/op
     p(99.9000) =      2.809 s/op
     p(99.9900) =      2.809 s/op
     p(99.9990) =      2.809 s/op
     p(99.9999) =      2.809 s/op
    p(100.0000) =      2.809 s/op


# Run complete. Total time: 00:01:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.032 ? 0.059   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564190006701.json
{"wallclock_times": [102.82088740800003], "core_cycle_counts": [[83825850299], [87457799514], [87097113177], [97438396287]], "aperf_counts": [[83455032070], [87403890027], [87041699938], [97375862917]], "mperf_counts": [[83456958800], [87404436578], [87041781298], [97375867842]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 03:15:09: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-27 03:15:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 03:15:10: INFO] 142 executions left in scheduler queue
[2019-07-27 03:15:10: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-27 03:15:10: INFO] Estimated completion (next execution): 2019-07-27 03:19:23 (0:04:13 from now)
[2019-07-27 03:15:10: INFO] Reboot in preparation for next execution
[2019-07-27 03:19:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 03:22:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.574 s/op
Iteration   2: 3.547 s/op
Iteration   3: 4.106 s/op
Iteration   4: 3.516 s/op
Iteration   5: 3.460 s/op
Iteration   6: 3.418 s/op
Iteration   7: 3.388 s/op
Iteration   8: 3.390 s/op
Iteration   9: 3.398 s/op
Iteration  10: 3.363 s/op
Iteration  11: 3.388 s/op
Iteration  12: 3.403 s/op
Iteration  13: 3.357 s/op
Iteration  14: 3.386 s/op
Iteration  15: 3.365 s/op
Iteration  16: 3.385 s/op
Iteration  17: 3.396 s/op
Iteration  18: 3.356 s/op
Iteration  19: 3.374 s/op
Iteration  20: 3.369 s/op
Iteration  21: 3.395 s/op
Iteration  22: 3.391 s/op
Iteration  23: 3.358 s/op
Iteration  24: 3.404 s/op
Iteration  25: 3.380 s/op
Iteration  26: 3.407 s/op
Iteration  27: 3.383 s/op
Iteration  28: 3.396 s/op
Iteration  29: 3.400 s/op
Iteration  30: 3.370 s/op
Iteration  31: 3.351 s/op
Iteration  32: 3.390 s/op
Iteration  33: 3.396 s/op
Iteration  34: 3.382 s/op
Iteration  35: 3.364 s/op
Iteration  36: 3.375 s/op
Iteration  37: 3.389 s/op
Iteration  38: 3.393 s/op
Iteration  39: 3.361 s/op
Iteration  40: 3.383 s/op
Iteration  41: 3.396 s/op
Iteration  42: 3.366 s/op
Iteration  43: 3.352 s/op
Iteration  44: 3.402 s/op
Iteration  45: 3.377 s/op
Iteration  46: 3.328 s/op
Iteration  47: 3.353 s/op
Iteration  48: 3.389 s/op
Iteration  49: 3.376 s/op
Iteration  50: 3.386 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.407 ?(99.9%) 0.055 s/op

  Histogram, s/op:
    [3.300, 3.350) = 1 
    [3.350, 3.400) = 38 
    [3.400, 3.450) = 6 
    [3.450, 3.500) = 1 
    [3.500, 3.550) = 2 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 0 
    [3.850, 3.900) = 0 
    [3.900, 3.950) = 0 
    [3.950, 4.000) = 0 
    [4.000, 4.050) = 0 
    [4.050, 4.100) = 0 
    [4.100, 4.150) = 1 

  Percentiles, s/op:
      p(0.0000) =      3.328 s/op
     p(50.0000) =      3.387 s/op
     p(90.0000) =      3.456 s/op
     p(95.0000) =      3.559 s/op
     p(99.0000) =      4.106 s/op
     p(99.9000) =      4.106 s/op
     p(99.9900) =      4.106 s/op
     p(99.9990) =      4.106 s/op
     p(99.9999) =      4.106 s/op
    p(100.0000) =      4.106 s/op


# Run complete. Total time: 00:02:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.407 ? 0.055   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564190366587.json
{"wallclock_times": [171.45588737], "core_cycle_counts": [[161965581247], [122320122747], [138178857017], [163670125835]], "aperf_counts": [[161517335330], [122249488720], [138120456479], [163639161239]], "mperf_counts": [[161521409276], [122250178878], [138120586306], [163639867774]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 03:22:18: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9-8u222-b10'
[2019-07-27 03:22:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 03:22:18: INFO] 141 executions left in scheduler queue
[2019-07-27 03:22:18: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-07-27 03:22:18: INFO] Estimated completion (next execution): 2019-07-27 03:27:40 (0:05:21 from now)
[2019-07-27 03:22:18: INFO] Reboot in preparation for next execution
[2019-07-27 03:26:35: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 03:26:35: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 03:26:35: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 03:26:35: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 03:26:35: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 03:37:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.296 s/op
Iteration   2: 13.455 s/op
Iteration   3: 13.514 s/op
Iteration   4: 13.504 s/op
Iteration   5: 13.464 s/op
Iteration   6: 13.441 s/op
Iteration   7: 13.446 s/op
Iteration   8: 13.469 s/op
Iteration   9: 13.396 s/op
Iteration  10: 13.403 s/op
Iteration  11: 13.428 s/op
Iteration  12: 13.418 s/op
Iteration  13: 13.522 s/op
Iteration  14: 13.454 s/op
Iteration  15: 13.368 s/op
Iteration  16: 13.463 s/op
Iteration  17: 13.451 s/op
Iteration  18: 13.437 s/op
Iteration  19: 13.536 s/op
Iteration  20: 13.486 s/op
Iteration  21: 13.381 s/op
Iteration  22: 13.437 s/op
Iteration  23: 13.444 s/op
Iteration  24: 13.454 s/op
Iteration  25: 13.523 s/op
Iteration  26: 13.470 s/op
Iteration  27: 13.586 s/op
Iteration  28: 13.526 s/op
Iteration  29: 13.464 s/op
Iteration  30: 13.479 s/op
Iteration  31: 13.502 s/op
Iteration  32: 13.458 s/op
Iteration  33: 13.554 s/op
Iteration  34: 13.463 s/op
Iteration  35: 13.409 s/op
Iteration  36: 13.469 s/op
Iteration  37: 13.492 s/op
Iteration  38: 13.455 s/op
Iteration  39: 13.461 s/op
Iteration  40: 13.409 s/op
Iteration  41: 13.463 s/op
Iteration  42: 13.454 s/op
Iteration  43: 13.537 s/op
Iteration  44: 13.436 s/op
Iteration  45: 13.395 s/op
Iteration  46: 13.429 s/op
Iteration  47: 13.414 s/op
Iteration  48: 13.432 s/op
Iteration  49: 13.528 s/op
Iteration  50: 13.464 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.479 ?(99.9%) 0.063 s/op

  Histogram, s/op:
    [13.300, 13.400) = 4 
    [13.400, 13.500) = 34 
    [13.500, 13.600) = 11 
    [13.600, 13.700) = 0 
    [13.700, 13.800) = 0 
    [13.800, 13.900) = 0 
    [13.900, 14.000) = 0 
    [14.000, 14.100) = 0 
    [14.100, 14.200) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.368 s/op
     p(50.0000) =     13.460 s/op
     p(90.0000) =     13.535 s/op
     p(95.0000) =     13.568 s/op
     p(99.0000) =     14.296 s/op
     p(99.9000) =     14.296 s/op
     p(99.9900) =     14.296 s/op
     p(99.9990) =     14.296 s/op
     p(99.9999) =     14.296 s/op
    p(100.0000) =     14.296 s/op


# Run complete. Total time: 00:11:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.479 ? 0.063   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564190795594.json
{"wallclock_times": [675.044292329], "core_cycle_counts": [[714874518906], [476007755229], [687135156095], [546638579033]], "aperf_counts": [[713108318759], [475695754303], [686909241962], [546456804251]], "mperf_counts": [[724034966310], [482424208504], [696599314300], [553900559348]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 03:37:50: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_11.0.4'
[2019-07-27 03:37:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 03:37:51: INFO] 140 executions left in scheduler queue
[2019-07-27 03:37:51: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-07-27 03:37:51: INFO] Estimated completion (next execution): 2019-07-27 03:51:36 (0:13:45 from now)
[2019-07-27 03:37:51: INFO] Reboot in preparation for next execution
[2019-07-27 03:42:04: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 03:56:16: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.951 s/op
Iteration   2: 15.816 s/op
Iteration   3: 17.345 s/op
Iteration   4: 17.399 s/op
Iteration   5: 17.473 s/op
Iteration   6: 17.177 s/op
Iteration   7: 17.020 s/op
Iteration   8: 17.146 s/op
Iteration   9: 17.298 s/op
Iteration  10: 16.966 s/op
Iteration  11: 17.324 s/op
Iteration  12: 17.389 s/op
Iteration  13: 17.268 s/op
Iteration  14: 17.129 s/op
Iteration  15: 17.168 s/op
Iteration  16: 16.960 s/op
Iteration  17: 17.296 s/op
Iteration  18: 16.536 s/op
Iteration  19: 16.547 s/op
Iteration  20: 17.224 s/op
Iteration  21: 17.014 s/op
Iteration  22: 17.165 s/op
Iteration  23: 17.052 s/op
Iteration  24: 17.231 s/op
Iteration  25: 17.450 s/op
Iteration  26: 16.557 s/op
Iteration  27: 17.057 s/op
Iteration  28: 16.889 s/op
Iteration  29: 17.341 s/op
Iteration  30: 17.132 s/op
Iteration  31: 17.025 s/op
Iteration  32: 16.889 s/op
Iteration  33: 17.350 s/op
Iteration  34: 16.255 s/op
Iteration  35: 16.754 s/op
Iteration  36: 16.806 s/op
Iteration  37: 16.622 s/op
Iteration  38: 16.235 s/op
Iteration  39: 17.100 s/op
Iteration  40: 17.096 s/op
Iteration  41: 17.320 s/op
Iteration  42: 17.350 s/op
Iteration  43: 16.968 s/op
Iteration  44: 17.007 s/op
Iteration  45: 16.351 s/op
Iteration  46: 17.289 s/op
Iteration  47: 16.993 s/op
Iteration  48: 16.384 s/op
Iteration  49: 17.089 s/op
Iteration  50: 17.218 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.008 ?(99.9%) 0.178 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 1 
    [16.250, 16.500) = 3 
    [16.500, 16.750) = 4 
    [16.750, 17.000) = 9 
    [17.000, 17.250) = 18 
    [17.250, 17.500) = 14 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.816 s/op
     p(50.0000) =     17.092 s/op
     p(90.0000) =     17.350 s/op
     p(95.0000) =     17.422 s/op
     p(99.0000) =     17.473 s/op
     p(99.9000) =     17.473 s/op
     p(99.9900) =     17.473 s/op
     p(99.9990) =     17.473 s/op
     p(99.9999) =     17.473 s/op
    p(100.0000) =     17.473 s/op


# Run complete. Total time: 00:14:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.008 ? 0.178   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564191724580.json
{"wallclock_times": [851.7125691450001], "core_cycle_counts": [[626328970388], [978455070948], [768356742950], [651742481871]], "aperf_counts": [[623987948147], [978305630453], [768169272535], [651536237308]], "mperf_counts": [[623990333836], [978305606610], [768169408944], [651536233686]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 03:56:16: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9-8u222-b10'
[2019-07-27 03:56:17: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 03:56:17: INFO] 139 executions left in scheduler queue
[2019-07-27 03:56:17: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 03:56:17: INFO] Estimated completion (next execution): 2019-07-27 04:12:59 (0:16:42 from now)
[2019-07-27 03:56:17: INFO] Reboot in preparation for next execution
[2019-07-27 04:00:31: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 04:07:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.244 s
Iteration   2: 8.121 s
Iteration   3: 7.964 s
Iteration   4: 7.703 s
Iteration   5: 7.724 s
Iteration   6: 7.710 s
Iteration   7: 7.697 s
Iteration   8: 7.745 s
Iteration   9: 7.790 s
Iteration  10: 7.800 s
Iteration  11: 7.809 s
Iteration  12: 7.716 s
Iteration  13: 7.743 s
Iteration  14: 7.686 s
Iteration  15: 7.708 s
Iteration  16: 7.697 s
Iteration  17: 7.752 s
Iteration  18: 7.696 s
Iteration  19: 7.685 s
Iteration  20: 7.732 s
Iteration  21: 7.721 s
Iteration  22: 7.703 s
Iteration  23: 7.747 s
Iteration  24: 7.710 s
Iteration  25: 7.713 s
Iteration  26: 7.726 s
Iteration  27: 7.654 s
Iteration  28: 7.727 s
Iteration  29: 7.658 s
Iteration  30: 7.686 s
Iteration  31: 7.644 s
Iteration  32: 7.768 s
Iteration  33: 7.733 s
Iteration  34: 7.738 s
Iteration  35: 7.730 s
Iteration  36: 7.702 s
Iteration  37: 7.730 s
Iteration  38: 7.724 s
Iteration  39: 7.755 s
Iteration  40: 7.752 s
Iteration  41: 7.790 s
Iteration  42: 7.769 s
Iteration  43: 7.646 s
Iteration  44: 7.698 s
Iteration  45: 7.696 s
Iteration  46: 7.728 s
Iteration  47: 7.763 s
Iteration  48: 7.731 s
Iteration  49: 7.710 s
Iteration  50: 7.760 s


Result: 7.767 ?(99.9%) 0.112 s [Average]
  Statistics: (min, avg, max) = (7.644, 7.767, 9.244), stdev = 0.226
  Confidence interval (99.9%): [7.655, 7.879]
  Samples, N = 50
        mean =      7.767 ?(99.9%) 0.112 s
         min =      7.644 s
  p( 0.0000) =      7.644 s
  p(50.0000) =      7.727 s
  p(90.0000) =      7.799 s
  p(95.0000) =      8.035 s
  p(99.0000) =      9.244 s
  p(99.9000) =      9.244 s
  p(99.9900) =      9.244 s
  p(99.9990) =      9.244 s
  p(99.9999) =      9.244 s
         max =      9.244 s


# Run complete. Total time: 00:06:29

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  7.767        0.112      s
{"wallclock_times": [389.893197223], "core_cycle_counts": [[294934699886], [297373043087], [382773257147], [332510556740]], "aperf_counts": [[293871067784], [297222057852], [382696333710], [332450749327]], "mperf_counts": [[293875924546], [297224460576], [382696365838], [332450984474]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 04:07:01: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 04:07:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 04:07:02: INFO] 138 executions left in scheduler queue
[2019-07-27 04:07:02: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 04:07:02: INFO] Estimated completion (next execution): 2019-07-27 04:16:02 (0:09:00 from now)
[2019-07-27 04:07:02: INFO] Reboot in preparation for next execution
[2019-07-27 04:11:20: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 04:16:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.119 s
Iteration   2: 9.150 s
Iteration   3: 8.122 s
Iteration   4: 6.611 s
Iteration   5: 6.587 s
Iteration   6: 6.493 s
Iteration   7: 6.890 s
Iteration   8: 6.712 s
Iteration   9: 6.642 s
Iteration  10: 7.059 s
Iteration  11: 6.931 s
Iteration  12: 6.535 s
Iteration  13: 6.777 s
Iteration  14: 6.608 s
Iteration  15: 6.807 s
Iteration  16: 6.501 s
Iteration  17: 6.681 s
Iteration  18: 6.509 s
Iteration  19: 6.468 s
Iteration  20: 6.637 s
Iteration  21: 6.596 s
Iteration  22: 6.599 s
Iteration  23: 6.744 s
Iteration  24: 6.536 s
Iteration  25: 6.893 s
Iteration  26: 6.640 s
Iteration  27: 6.471 s
Iteration  28: 6.494 s
Iteration  29: 6.580 s
Iteration  30: 6.597 s
Iteration  31: 6.495 s
Iteration  32: 6.585 s
Iteration  33: 6.500 s
Iteration  34: 6.549 s
Iteration  35: 6.672 s
Iteration  36: 6.627 s
Iteration  37: 6.512 s
Iteration  38: 6.601 s
Iteration  39: 6.677 s
Iteration  40: 6.665 s
Iteration  41: 6.426 s
Iteration  42: 6.636 s
Iteration  43: 6.682 s
Iteration  44: 6.522 s
Iteration  45: 6.534 s
Iteration  46: 6.490 s
Iteration  47: 6.602 s
Iteration  48: 6.609 s
Iteration  49: 6.376 s
Iteration  50: 6.530 s


Result: 6.746 ?(99.9%) 0.274 s [Average]
  Statistics: (min, avg, max) = (6.376, 6.746, 9.150), stdev = 0.553
  Confidence interval (99.9%): [6.472, 7.019]
  Samples, N = 50
        mean =      6.746 ?(99.9%) 0.274 s
         min =      6.376 s
  p( 0.0000) =      6.376 s
  p(50.0000) =      6.601 s
  p(90.0000) =      6.927 s
  p(95.0000) =      8.571 s
  p(99.0000) =      9.150 s
  p(99.9000) =      9.150 s
  p(99.9900) =      9.150 s
  p(99.9990) =      9.150 s
  p(99.9999) =      9.150 s
         max =      9.150 s


# Run complete. Total time: 00:05:38

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  6.746        0.274      s
{"wallclock_times": [339.157446218], "core_cycle_counts": [[391100095499], [211473262949], [303805976969], [319064376718]], "aperf_counts": [[390335235666], [211309713403], [303690977344], [318951877551]], "mperf_counts": [[390340321048], [211310006100], [303693436588], [318953686804]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 04:16:58: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 04:16:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 04:16:59: INFO] 137 executions left in scheduler queue
[2019-07-27 04:16:59: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 04:16:59: INFO] Estimated completion (next execution): 2019-07-27 04:25:09 (0:08:09 from now)
[2019-07-27 04:16:59: INFO] Reboot in preparation for next execution
[2019-07-27 04:21:15: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 04:25:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.058 s
Iteration   2: 5.850 s
Iteration   3: 5.369 s
Iteration   4: 5.305 s
Iteration   5: 5.428 s
Iteration   6: 5.406 s
Iteration   7: 5.377 s
Iteration   8: 5.349 s
Iteration   9: 5.306 s
Iteration  10: 5.314 s
Iteration  11: 5.320 s
Iteration  12: 5.297 s
Iteration  13: 5.266 s
Iteration  14: 5.307 s
Iteration  15: 5.321 s
Iteration  16: 5.330 s
Iteration  17: 5.381 s
Iteration  18: 5.277 s
Iteration  19: 5.225 s
Iteration  20: 5.225 s
Iteration  21: 5.216 s
Iteration  22: 5.281 s
Iteration  23: 5.361 s
Iteration  24: 5.340 s
Iteration  25: 5.329 s
Iteration  26: 5.279 s
Iteration  27: 5.258 s
Iteration  28: 5.291 s
Iteration  29: 5.294 s
Iteration  30: 5.322 s
Iteration  31: 5.283 s
Iteration  32: 5.317 s
Iteration  33: 5.315 s
Iteration  34: 5.290 s
Iteration  35: 5.311 s
Iteration  36: 5.249 s
Iteration  37: 5.323 s
Iteration  38: 5.279 s
Iteration  39: 5.280 s
Iteration  40: 5.302 s
Iteration  41: 5.288 s
Iteration  42: 5.265 s
Iteration  43: 5.280 s
Iteration  44: 5.289 s
Iteration  45: 5.301 s
Iteration  46: 5.291 s
Iteration  47: 5.302 s
Iteration  48: 5.300 s
Iteration  49: 5.282 s
Iteration  50: 5.246 s


Result: 5.350 ?(99.9%) 0.130 s [Average]
  Statistics: (min, avg, max) = (5.216, 5.350, 7.058), stdev = 0.262
  Confidence interval (99.9%): [5.220, 5.479]
  Samples, N = 50
        mean =      5.350 ?(99.9%) 0.130 s
         min =      5.216 s
  p( 0.0000) =      5.216 s
  p(50.0000) =      5.301 s
  p(90.0000) =      5.381 s
  p(95.0000) =      5.618 s
  p(99.0000) =      7.058 s
  p(99.9000) =      7.058 s
  p(99.9900) =      7.058 s
  p(99.9990) =      7.058 s
  p(99.9999) =      7.058 s
         max =      7.058 s


# Run complete. Total time: 00:04:29

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  5.350        0.130      s
{"wallclock_times": [269.33934346], "core_cycle_counts": [[266550331176], [304159191747], [229119415432], [296998103905]], "aperf_counts": [[265719995465], [304033656834], [228987177880], [296872090249]], "mperf_counts": [[265723569028], [304033711942], [228987232874], [296873219008]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 04:25:44: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 04:25:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 04:25:45: INFO] 136 executions left in scheduler queue
[2019-07-27 04:25:45: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 04:25:45: INFO] Estimated completion (next execution): 2019-07-27 04:32:44 (0:06:59 from now)
[2019-07-27 04:25:45: INFO] Reboot in preparation for next execution
[2019-07-27 04:30:00: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 04:41:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.057 s
Iteration   2: 14.554 s
Iteration   3: 14.223 s
Iteration   4: 14.008 s
Iteration   5: 13.950 s
Iteration   6: 13.893 s
Iteration   7: 14.528 s
Iteration   8: 14.291 s
Iteration   9: 13.863 s
Iteration  10: 14.070 s
Iteration  11: 13.912 s
Iteration  12: 14.101 s
Iteration  13: 14.628 s
Iteration  14: 13.936 s
Iteration  15: 13.860 s
Iteration  16: 14.294 s
Iteration  17: 13.880 s
Iteration  18: 14.417 s
Iteration  19: 13.860 s
Iteration  20: 13.928 s
Iteration  21: 14.439 s
Iteration  22: 14.419 s
Iteration  23: 13.884 s
Iteration  24: 13.922 s
Iteration  25: 13.854 s
Iteration  26: 13.822 s
Iteration  27: 13.973 s
Iteration  28: 14.397 s
Iteration  29: 14.053 s
Iteration  30: 14.367 s
Iteration  31: 14.523 s
Iteration  32: 13.883 s
Iteration  33: 13.862 s
Iteration  34: 13.991 s
Iteration  35: 13.948 s
Iteration  36: 13.918 s
Iteration  37: 14.396 s
Iteration  38: 13.907 s
Iteration  39: 13.883 s
Iteration  40: 13.946 s
Iteration  41: 14.015 s
Iteration  42: 13.839 s
Iteration  43: 13.971 s
Iteration  44: 14.357 s
Iteration  45: 13.920 s
Iteration  46: 13.910 s
Iteration  47: 14.476 s
Iteration  48: 13.902 s
Iteration  49: 14.418 s
Iteration  50: 14.362 s


Result: 14.116 ?(99.9%) 0.139 s [Average]
  Statistics: (min, avg, max) = (13.822, 14.116, 15.057), stdev = 0.281
  Confidence interval (99.9%): [13.977, 14.255]
  Samples, N = 50
        mean =     14.116 ?(99.9%) 0.139 s
         min =     13.822 s
  p( 0.0000) =     13.822 s
  p(50.0000) =     13.972 s
  p(90.0000) =     14.518 s
  p(95.0000) =     14.587 s
  p(99.0000) =     15.057 s
  p(99.9000) =     15.057 s
  p(99.9900) =     15.057 s
  p(99.9990) =     15.057 s
  p(99.9999) =     15.057 s
         max =     15.057 s


# Run complete. Total time: 00:11:47

Benchmark                                                                           (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  14.116        0.139      s
{"wallclock_times": [707.4154691389999], "core_cycle_counts": [[776133313079], [410229219560], [559344382976], [573464479448]], "aperf_counts": [[774518215548], [410077995570], [559069377334], [573359657884]], "mperf_counts": [[774523584548], [410077956722], [559071055650], [573359635480]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 04:41:48: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9_12.0.1'
[2019-07-27 04:41:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 04:41:49: INFO] 135 executions left in scheduler queue
[2019-07-27 04:41:49: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 04:41:49: INFO] Estimated completion (next execution): 2019-07-27 04:56:07 (0:14:17 from now)
[2019-07-27 04:41:49: INFO] Reboot in preparation for next execution
[2019-07-27 04:46:04: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 04:51:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.961 s
Iteration   2: 7.569 s
Iteration   3: 6.589 s
Iteration   4: 6.675 s
Iteration   5: 6.641 s
Iteration   6: 6.863 s
Iteration   7: 6.899 s
Iteration   8: 6.657 s
Iteration   9: 6.600 s
Iteration  10: 6.590 s
Iteration  11: 6.732 s
Iteration  12: 6.737 s
Iteration  13: 6.598 s
Iteration  14: 6.626 s
Iteration  15: 6.606 s
Iteration  16: 6.510 s
Iteration  17: 6.652 s
Iteration  18: 6.578 s
Iteration  19: 6.684 s
Iteration  20: 6.620 s
Iteration  21: 6.669 s
Iteration  22: 6.667 s
Iteration  23: 6.611 s
Iteration  24: 6.647 s
Iteration  25: 6.622 s
Iteration  26: 6.505 s
Iteration  27: 6.573 s
Iteration  28: 6.557 s
Iteration  29: 6.615 s
Iteration  30: 6.626 s
Iteration  31: 6.580 s
Iteration  32: 6.591 s
Iteration  33: 6.616 s
Iteration  34: 6.643 s
Iteration  35: 6.656 s
Iteration  36: 6.520 s
Iteration  37: 6.625 s
Iteration  38: 6.575 s
Iteration  39: 6.569 s
Iteration  40: 6.548 s
Iteration  41: 6.517 s
Iteration  42: 6.588 s
Iteration  43: 6.547 s
Iteration  44: 6.613 s
Iteration  45: 6.584 s
Iteration  46: 6.571 s
Iteration  47: 6.647 s
Iteration  48: 6.555 s
Iteration  49: 6.678 s
Iteration  50: 6.540 s


Result: 6.685 ?(99.9%) 0.180 s [Average]
  Statistics: (min, avg, max) = (6.505, 6.685, 8.961), stdev = 0.363
  Confidence interval (99.9%): [6.505, 6.864]
  Samples, N = 50
        mean =      6.685 ?(99.9%) 0.180 s
         min =      6.505 s
  p( 0.0000) =      6.505 s
  p(50.0000) =      6.614 s
  p(90.0000) =      6.737 s
  p(95.0000) =      7.200 s
  p(99.0000) =      8.961 s
  p(99.9000) =      8.961 s
  p(99.9900) =      8.961 s
  p(99.9990) =      8.961 s
  p(99.9999) =      8.961 s
         max =      8.961 s


# Run complete. Total time: 00:05:35

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  6.685        0.180      s
{"wallclock_times": [335.708525076], "core_cycle_counts": [[369694218043], [292724352169], [205675390239], [263409297743]], "aperf_counts": [[368918656234], [292596233793], [205562655486], [263338767264]], "mperf_counts": [[368928645102], [292596289234], [205562919490], [263338757672]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 04:51:40: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 04:51:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 04:51:41: INFO] 134 executions left in scheduler queue
[2019-07-27 04:51:41: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 04:51:41: INFO] Estimated completion (next execution): 2019-07-27 04:59:47 (0:08:05 from now)
[2019-07-27 04:51:41: INFO] Reboot in preparation for next execution
[2019-07-27 04:56:09: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 05:03:28: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.510 s
Iteration   2: 8.932 s
Iteration   3: 8.971 s
Iteration   4: 8.904 s
Iteration   5: 8.743 s
Iteration   6: 8.790 s
Iteration   7: 8.789 s
Iteration   8: 8.776 s
Iteration   9: 8.754 s
Iteration  10: 8.765 s
Iteration  11: 8.801 s
Iteration  12: 8.771 s
Iteration  13: 8.715 s
Iteration  14: 8.708 s
Iteration  15: 8.652 s
Iteration  16: 8.680 s
Iteration  17: 8.738 s
Iteration  18: 8.793 s
Iteration  19: 8.672 s
Iteration  20: 8.705 s
Iteration  21: 8.833 s
Iteration  22: 8.683 s
Iteration  23: 8.649 s
Iteration  24: 8.673 s
Iteration  25: 8.655 s
Iteration  26: 8.619 s
Iteration  27: 8.688 s
Iteration  28: 8.723 s
Iteration  29: 8.687 s
Iteration  30: 8.696 s
Iteration  31: 8.677 s
Iteration  32: 8.664 s
Iteration  33: 8.709 s
Iteration  34: 8.577 s
Iteration  35: 8.719 s
Iteration  36: 8.717 s
Iteration  37: 8.646 s
Iteration  38: 8.621 s
Iteration  39: 8.642 s
Iteration  40: 8.709 s
Iteration  41: 8.628 s
Iteration  42: 8.618 s
Iteration  43: 8.680 s
Iteration  44: 8.613 s
Iteration  45: 8.650 s
Iteration  46: 8.730 s
Iteration  47: 8.707 s
Iteration  48: 8.717 s
Iteration  49: 8.694 s
Iteration  50: 8.672 s


Result: 8.749 ?(99.9%) 0.132 s [Average]
  Statistics: (min, avg, max) = (8.577, 8.749, 10.510), stdev = 0.266
  Confidence interval (99.9%): [8.618, 8.881]
  Samples, N = 50
        mean =      8.749 ?(99.9%) 0.132 s
         min =      8.577 s
  p( 0.0000) =      8.577 s
  p(50.0000) =      8.706 s
  p(90.0000) =      8.830 s
  p(95.0000) =      8.950 s
  p(99.0000) =     10.510 s
  p(99.9000) =     10.510 s
  p(99.9900) =     10.510 s
  p(99.9990) =     10.510 s
  p(99.9999) =     10.510 s
         max =     10.510 s


# Run complete. Total time: 00:07:18

Benchmark                                                                                  (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  8.749        0.132      s
{"wallclock_times": [438.74034319], "core_cycle_counts": [[259088131604], [435397782018], [518563085843], [276535144493]], "aperf_counts": [[257834934289], [435332891207], [518413951403], [276491543773]], "mperf_counts": [[257842813624], [435333199832], [518414649480], [276491591452]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 05:03:28: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 05:03:29: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 05:03:29: INFO] 133 executions left in scheduler queue
[2019-07-27 05:03:29: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 05:03:29: INFO] Estimated completion (next execution): 2019-07-27 05:13:18 (0:09:49 from now)
[2019-07-27 05:03:29: INFO] Reboot in preparation for next execution
[2019-07-27 05:07:44: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 05:12:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.734 s
Iteration   2: 6.343 s
Iteration   3: 5.970 s
Iteration   4: 6.018 s
Iteration   5: 6.020 s
Iteration   6: 5.814 s
Iteration   7: 5.821 s
Iteration   8: 5.827 s
Iteration   9: 5.873 s
Iteration  10: 5.833 s
Iteration  11: 5.881 s
Iteration  12: 5.816 s
Iteration  13: 5.889 s
Iteration  14: 5.873 s
Iteration  15: 5.870 s
Iteration  16: 5.894 s
Iteration  17: 5.856 s
Iteration  18: 5.878 s
Iteration  19: 5.845 s
Iteration  20: 5.827 s
Iteration  21: 5.875 s
Iteration  22: 5.900 s
Iteration  23: 5.859 s
Iteration  24: 5.876 s
Iteration  25: 5.820 s
Iteration  26: 5.872 s
Iteration  27: 5.820 s
Iteration  28: 5.823 s
Iteration  29: 5.860 s
Iteration  30: 5.862 s
Iteration  31: 5.847 s
Iteration  32: 5.859 s
Iteration  33: 5.863 s
Iteration  34: 5.794 s
Iteration  35: 5.877 s
Iteration  36: 5.871 s
Iteration  37: 5.866 s
Iteration  38: 5.878 s
Iteration  39: 5.881 s
Iteration  40: 5.827 s
Iteration  41: 5.822 s
Iteration  42: 5.815 s
Iteration  43: 5.838 s
Iteration  44: 5.863 s
Iteration  45: 5.845 s
Iteration  46: 5.855 s
Iteration  47: 5.842 s
Iteration  48: 5.855 s
Iteration  49: 5.808 s
Iteration  50: 5.851 s


Result: 5.908 ?(99.9%) 0.136 s [Average]
  Statistics: (min, avg, max) = (5.794, 5.908, 7.734), stdev = 0.276
  Confidence interval (99.9%): [5.772, 6.045]
  Samples, N = 50
        mean =      5.908 ?(99.9%) 0.136 s
         min =      5.794 s
  p( 0.0000) =      5.794 s
  p(50.0000) =      5.860 s
  p(90.0000) =      5.963 s
  p(95.0000) =      6.166 s
  p(99.0000) =      7.734 s
  p(99.9000) =      7.734 s
  p(99.9900) =      7.734 s
  p(99.9990) =      7.734 s
  p(99.9999) =      7.734 s
         max =      7.734 s


# Run complete. Total time: 00:04:56

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  5.908        0.136      s
{"wallclock_times": [296.999329628], "core_cycle_counts": [[406211704007], [183044052290], [272324797465], [254318684712]], "aperf_counts": [[405532239877], [182885092919], [272187492087], [254131889808]], "mperf_counts": [[405534649796], [182886024740], [272187557386], [254132141664]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 05:12:41: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 05:12:42: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 05:12:42: INFO] 132 executions left in scheduler queue
[2019-07-27 05:12:42: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 05:12:42: INFO] Estimated completion (next execution): 2019-07-27 05:20:09 (0:07:27 from now)
[2019-07-27 05:12:42: INFO] Reboot in preparation for next execution
[2019-07-27 05:16:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 05:26:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.995 s
Iteration   2: 11.552 s
Iteration   3: 11.116 s
Iteration   4: 11.125 s
Iteration   5: 11.226 s
Iteration   6: 11.150 s
Iteration   7: 11.131 s
Iteration   8: 11.084 s
Iteration   9: 11.043 s
Iteration  10: 11.125 s
Iteration  11: 11.185 s
Iteration  12: 11.149 s
Iteration  13: 11.199 s
Iteration  14: 11.789 s
Iteration  15: 11.093 s
Iteration  16: 11.033 s
Iteration  17: 11.059 s
Iteration  18: 11.085 s
Iteration  19: 11.055 s
Iteration  20: 11.138 s
Iteration  21: 11.863 s
Iteration  22: 11.860 s
Iteration  23: 11.025 s
Iteration  24: 11.175 s
Iteration  25: 11.073 s
Iteration  26: 11.171 s
Iteration  27: 11.134 s
Iteration  28: 11.146 s
Iteration  29: 11.034 s
Iteration  30: 11.130 s
Iteration  31: 11.093 s
Iteration  32: 11.075 s
Iteration  33: 11.829 s
Iteration  34: 11.080 s
Iteration  35: 11.015 s
Iteration  36: 10.977 s
Iteration  37: 11.790 s
Iteration  38: 11.819 s
Iteration  39: 11.051 s
Iteration  40: 11.189 s
Iteration  41: 11.027 s
Iteration  42: 11.139 s
Iteration  43: 11.990 s
Iteration  44: 11.046 s
Iteration  45: 11.088 s
Iteration  46: 11.136 s
Iteration  47: 11.061 s
Iteration  48: 11.854 s
Iteration  49: 11.129 s
Iteration  50: 11.782 s


Result: 11.282 ?(99.9%) 0.190 s [Average]
  Statistics: (min, avg, max) = (10.977, 11.282, 12.995), stdev = 0.385
  Confidence interval (99.9%): [11.092, 11.473]
  Samples, N = 50
        mean =     11.282 ?(99.9%) 0.190 s
         min =     10.977 s
  p( 0.0000) =     10.977 s
  p(50.0000) =     11.131 s
  p(90.0000) =     11.851 s
  p(95.0000) =     11.920 s
  p(99.0000) =     12.995 s
  p(99.9000) =     12.995 s
  p(99.9900) =     12.995 s
  p(99.9990) =     12.995 s
  p(99.9999) =     12.995 s
         max =     12.995 s


# Run complete. Total time: 00:09:25

Benchmark                                                                             (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  11.282        0.190      s
{"wallclock_times": [565.443515945], "core_cycle_counts": [[483955487321], [445233169891], [435046774863], [483759101518]], "aperf_counts": [[482536824713], [445117138125], [434875410124], [483692346492]], "mperf_counts": [[482541959524], [445118271468], [434875479596], [483692384964]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 05:26:21: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9-8u222-b10'
[2019-07-27 05:26:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 05:26:21: INFO] 131 executions left in scheduler queue
[2019-07-27 05:26:21: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-07-27 05:26:21: INFO] Estimated completion (next execution): 2019-07-27 05:38:17 (0:11:55 from now)
[2019-07-27 05:26:21: INFO] Reboot in preparation for next execution
[2019-07-27 05:30:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: 0.001 s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 45 
    [0.000, 0.001) = 3 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 1 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564198235451.json
{"wallclock_times": [0.8222803799999951], "core_cycle_counts": [[1762215645], [1420293539], [1267263873], [1339433971]], "aperf_counts": [[1759739799], [1415771783], [1264259862], [1336048008]], "mperf_counts": [[1772062870], [1425359590], [1265639292], [1336811152]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 05:30:36: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ce-19.1.1'
[2019-07-27 05:30:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 05:30:37: INFO] 130 executions left in scheduler queue
[2019-07-27 05:30:37: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-27 05:30:37: INFO] Estimated completion (next execution): 2019-07-27 05:33:08 (0:02:31 from now)
[2019-07-27 05:30:37: INFO] Reboot in preparation for next execution
[2019-07-27 05:35:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.348 s/op
Iteration   2: 0.848 s/op
Iteration   3: 0.844 s/op
Iteration   4: 0.920 s/op
Iteration   5: 0.837 s/op
Iteration   6: 0.839 s/op
Iteration   7: 0.835 s/op
Iteration   8: 0.836 s/op
Iteration   9: 0.836 s/op
Iteration  10: 0.837 s/op
Iteration  11: 0.833 s/op
Iteration  12: 0.835 s/op
Iteration  13: 0.832 s/op
Iteration  14: 0.835 s/op
Iteration  15: 0.832 s/op
Iteration  16: 0.837 s/op
Iteration  17: 0.836 s/op
Iteration  18: 0.837 s/op
Iteration  19: 0.830 s/op
Iteration  20: 0.830 s/op
Iteration  21: 0.833 s/op
Iteration  22: 0.831 s/op
Iteration  23: 0.838 s/op
Iteration  24: 0.836 s/op
Iteration  25: 0.833 s/op
Iteration  26: 0.838 s/op
Iteration  27: 0.836 s/op
Iteration  28: 0.834 s/op
Iteration  29: 0.837 s/op
Iteration  30: 0.839 s/op
Iteration  31: 0.839 s/op
Iteration  32: 0.844 s/op
Iteration  33: 0.836 s/op
Iteration  34: 0.832 s/op
Iteration  35: 0.833 s/op
Iteration  36: 0.829 s/op
Iteration  37: 0.832 s/op
Iteration  38: 0.833 s/op
Iteration  39: 0.830 s/op
Iteration  40: 0.836 s/op
Iteration  41: 0.830 s/op
Iteration  42: 0.840 s/op
Iteration  43: 0.833 s/op
Iteration  44: 0.825 s/op
Iteration  45: 0.835 s/op
Iteration  46: 0.832 s/op
Iteration  47: 0.832 s/op
Iteration  48: 0.835 s/op
Iteration  49: 0.835 s/op
Iteration  50: 0.834 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      0.847 ?(99.9%) 0.036 s/op

  Histogram, s/op:
    [0.800, 0.850) = 48 
    [0.850, 0.900) = 0 
    [0.900, 0.950) = 1 
    [0.950, 1.000) = 0 
    [1.000, 1.050) = 0 
    [1.050, 1.100) = 0 
    [1.100, 1.150) = 0 
    [1.150, 1.200) = 0 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 0 
    [1.300, 1.350) = 1 
    [1.350, 1.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      0.825 s/op
     p(50.0000) =      0.835 s/op
     p(90.0000) =      0.843 s/op
     p(95.0000) =      0.880 s/op
     p(99.0000) =      1.348 s/op
     p(99.9000) =      1.348 s/op
     p(99.9900) =      1.348 s/op
     p(99.9990) =      1.348 s/op
     p(99.9999) =      1.348 s/op
    p(100.0000) =      1.348 s/op


# Run complete. Total time: 00:00:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  0.847 ? 0.036   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564198490650.json
{"wallclock_times": [43.26431531], "core_cycle_counts": [[44350040147], [27284661397], [36014753286], [41895433050]], "aperf_counts": [[44207036496], [27254198078], [35993908023], [41877942567]], "mperf_counts": [[44223073650], [27277305268], [35995899046], [41879064848]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 05:35:33: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-27 05:35:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 05:35:34: INFO] 129 executions left in scheduler queue
[2019-07-27 05:35:34: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-27 05:35:34: INFO] Estimated completion (next execution): 2019-07-27 05:38:48 (0:03:13 from now)
[2019-07-27 05:35:34: INFO] Reboot in preparation for next execution
[2019-07-27 05:41:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.933 s/op
Iteration   2: 1.621 s/op
Iteration   3: 1.667 s/op
Iteration   4: 1.590 s/op
Iteration   5: 1.591 s/op
Iteration   6: 1.593 s/op
Iteration   7: 1.589 s/op
Iteration   8: 1.590 s/op
Iteration   9: 1.587 s/op
Iteration  10: 1.587 s/op
Iteration  11: 1.587 s/op
Iteration  12: 1.555 s/op
Iteration  13: 1.589 s/op
Iteration  14: 1.586 s/op
Iteration  15: 1.556 s/op
Iteration  16: 1.591 s/op
Iteration  17: 1.553 s/op
Iteration  18: 1.553 s/op
Iteration  19: 1.585 s/op
Iteration  20: 1.586 s/op
Iteration  21: 1.589 s/op
Iteration  22: 1.586 s/op
Iteration  23: 1.585 s/op
Iteration  24: 1.578 s/op
Iteration  25: 1.587 s/op
Iteration  26: 1.589 s/op
Iteration  27: 1.554 s/op
Iteration  28: 1.555 s/op
Iteration  29: 1.592 s/op
Iteration  30: 1.555 s/op
Iteration  31: 1.582 s/op
Iteration  32: 1.588 s/op
Iteration  33: 1.553 s/op
Iteration  34: 1.590 s/op
Iteration  35: 1.586 s/op
Iteration  36: 1.576 s/op
Iteration  37: 1.554 s/op
Iteration  38: 1.583 s/op
Iteration  39: 1.570 s/op
Iteration  40: 1.590 s/op
Iteration  41: 1.593 s/op
Iteration  42: 1.593 s/op
Iteration  43: 1.588 s/op
Iteration  44: 1.579 s/op
Iteration  45: 1.558 s/op
Iteration  46: 1.558 s/op
Iteration  47: 1.590 s/op
Iteration  48: 1.562 s/op
Iteration  49: 1.553 s/op
Iteration  50: 1.552 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.587 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 47 
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 1 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.552 s/op
     p(50.0000) =      1.586 s/op
     p(90.0000) =      1.593 s/op
     p(95.0000) =      1.642 s/op
     p(99.0000) =      1.933 s/op
     p(99.9000) =      1.933 s/op
     p(99.9900) =      1.933 s/op
     p(99.9990) =      1.933 s/op
     p(99.9999) =      1.933 s/op
    p(100.0000) =      1.933 s/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.587 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564198788916.json
{"wallclock_times": [80.19607814400001], "core_cycle_counts": [[64568221919], [57504126894], [58717007109], [81401154562]], "aperf_counts": [[64371692625], [57481047860], [58698204277], [81388285402]], "mperf_counts": [[64388795084], [57498602924], [58698249644], [81389816790]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 05:41:09: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_graalvm-ee-19.1.1'
[2019-07-27 05:41:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 05:41:10: INFO] 128 executions left in scheduler queue
[2019-07-27 05:41:10: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-07-27 05:41:10: INFO] Estimated completion (next execution): 2019-07-27 05:45:00 (0:03:50 from now)
[2019-07-27 05:41:10: INFO] Reboot in preparation for next execution
[2019-07-27 05:45:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 05:45:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 05:45:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 05:45:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 05:45:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 05:57:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.854 s/op
Iteration   2: 14.460 s/op
Iteration   3: 14.589 s/op
Iteration   4: 14.607 s/op
Iteration   5: 14.462 s/op
Iteration   6: 14.394 s/op
Iteration   7: 14.401 s/op
Iteration   8: 14.416 s/op
Iteration   9: 14.370 s/op
Iteration  10: 14.381 s/op
Iteration  11: 14.492 s/op
Iteration  12: 14.400 s/op
Iteration  13: 14.351 s/op
Iteration  14: 14.408 s/op
Iteration  15: 14.394 s/op
Iteration  16: 14.644 s/op
Iteration  17: 14.323 s/op
Iteration  18: 14.349 s/op
Iteration  19: 14.424 s/op
Iteration  20: 14.351 s/op
Iteration  21: 14.381 s/op
Iteration  22: 14.380 s/op
Iteration  23: 14.340 s/op
Iteration  24: 14.479 s/op
Iteration  25: 14.341 s/op
Iteration  26: 14.461 s/op
Iteration  27: 14.335 s/op
Iteration  28: 14.354 s/op
Iteration  29: 14.519 s/op
Iteration  30: 14.347 s/op
Iteration  31: 14.413 s/op
Iteration  32: 14.363 s/op
Iteration  33: 14.401 s/op
Iteration  34: 14.505 s/op
Iteration  35: 14.363 s/op
Iteration  36: 14.388 s/op
Iteration  37: 14.442 s/op
Iteration  38: 14.373 s/op
Iteration  39: 14.443 s/op
Iteration  40: 14.406 s/op
Iteration  41: 14.318 s/op
Iteration  42: 14.474 s/op
Iteration  43: 14.323 s/op
Iteration  44: 14.435 s/op
Iteration  45: 14.379 s/op
Iteration  46: 14.406 s/op
Iteration  47: 14.527 s/op
Iteration  48: 14.377 s/op
Iteration  49: 14.440 s/op
Iteration  50: 14.358 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     14.423 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [14.300, 14.350) = 8 
    [14.350, 14.400) = 16 
    [14.400, 14.450) = 13 
    [14.450, 14.500) = 6 
    [14.500, 14.550) = 3 
    [14.550, 14.600) = 1 
    [14.600, 14.650) = 2 
    [14.650, 14.700) = 0 
    [14.700, 14.750) = 0 
    [14.750, 14.800) = 0 
    [14.800, 14.850) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.318 s/op
     p(50.0000) =     14.401 s/op
     p(90.0000) =     14.526 s/op
     p(95.0000) =     14.624 s/op
     p(99.0000) =     14.854 s/op
     p(99.9000) =     14.854 s/op
     p(99.9900) =     14.854 s/op
     p(99.9990) =     14.854 s/op
     p(99.9999) =     14.854 s/op
    p(100.0000) =     14.854 s/op


# Run complete. Total time: 00:12:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.423 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564199124162.json
{"wallclock_times": [722.192767227], "core_cycle_counts": [[332009304592], [475068694012], [1082630398768], [646653658171]], "aperf_counts": [[329695552018], [474808389545], [1082262971355], [646419909041]], "mperf_counts": [[335079654038], [483247135144], [1104308265476], [658448828450]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 05:57:26: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_12.0.2'
[2019-07-27 05:57:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 05:57:27: INFO] 127 executions left in scheduler queue
[2019-07-27 05:57:27: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-07-27 05:57:27: INFO] Estimated completion (next execution): 2019-07-27 06:11:59 (0:14:32 from now)
[2019-07-27 05:57:27: INFO] Reboot in preparation for next execution
[2019-07-27 06:01:42: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 06:01:42: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 06:01:42: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 06:01:42: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 06:01:42: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 06:12:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.231 s/op
Iteration   2: 13.154 s/op
Iteration   3: 13.304 s/op
Iteration   4: 13.212 s/op
Iteration   5: 13.174 s/op
Iteration   6: 13.071 s/op
Iteration   7: 13.103 s/op
Iteration   8: 13.069 s/op
Iteration   9: 13.041 s/op
Iteration  10: 13.055 s/op
Iteration  11: 13.077 s/op
Iteration  12: 13.125 s/op
Iteration  13: 13.051 s/op
Iteration  14: 13.101 s/op
Iteration  15: 13.085 s/op
Iteration  16: 13.000 s/op
Iteration  17: 13.069 s/op
Iteration  18: 13.075 s/op
Iteration  19: 13.095 s/op
Iteration  20: 13.178 s/op
Iteration  21: 13.095 s/op
Iteration  22: 13.188 s/op
Iteration  23: 13.116 s/op
Iteration  24: 13.071 s/op
Iteration  25: 13.086 s/op
Iteration  26: 13.042 s/op
Iteration  27: 13.190 s/op
Iteration  28: 13.027 s/op
Iteration  29: 13.095 s/op
Iteration  30: 13.075 s/op
Iteration  31: 13.101 s/op
Iteration  32: 13.162 s/op
Iteration  33: 13.070 s/op
Iteration  34: 13.097 s/op
Iteration  35: 13.103 s/op
Iteration  36: 13.133 s/op
Iteration  37: 13.103 s/op
Iteration  38: 13.037 s/op
Iteration  39: 13.054 s/op
Iteration  40: 13.160 s/op
Iteration  41: 13.053 s/op
Iteration  42: 13.112 s/op
Iteration  43: 13.092 s/op
Iteration  44: 13.046 s/op
Iteration  45: 13.076 s/op
Iteration  46: 13.028 s/op
Iteration  47: 13.103 s/op
Iteration  48: 13.099 s/op
Iteration  49: 13.082 s/op
Iteration  50: 13.141 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.102 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [13.000, 13.025) = 1 
    [13.025, 13.050) = 6 
    [13.050, 13.075) = 9 
    [13.075, 13.100) = 13 
    [13.100, 13.125) = 9 
    [13.125, 13.150) = 2 
    [13.150, 13.175) = 4 
    [13.175, 13.200) = 3 
    [13.200, 13.225) = 1 
    [13.225, 13.250) = 1 
    [13.250, 13.275) = 0 
    [13.275, 13.300) = 0 
    [13.300, 13.325) = 1 
    [13.325, 13.350) = 0 
    [13.350, 13.375) = 0 
    [13.375, 13.400) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.000 s/op
     p(50.0000) =     13.095 s/op
     p(90.0000) =     13.187 s/op
     p(95.0000) =     13.220 s/op
     p(99.0000) =     13.304 s/op
     p(99.9000) =     13.304 s/op
     p(99.9900) =     13.304 s/op
     p(99.9990) =     13.304 s/op
     p(99.9999) =     13.304 s/op
    p(100.0000) =     13.304 s/op


# Run complete. Total time: 00:10:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.102 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564200102009.json
{"wallclock_times": [656.210965961], "core_cycle_counts": [[759495075305], [580944900316], [546821579960], [512734286732]], "aperf_counts": [[757994403107], [580729209316], [546697468498], [512641168121]], "mperf_counts": [[759153569458], [581332961552], [547243317362], [513190154690]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 06:12:38: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot_11.0.4'
[2019-07-27 06:12:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 06:12:39: INFO] 126 executions left in scheduler queue
[2019-07-27 06:12:39: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:12:39: INFO] Estimated completion (next execution): 2019-07-27 06:26:05 (0:13:26 from now)
[2019-07-27 06:12:39: INFO] Reboot in preparation for next execution
[2019-07-27 06:21:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.851 s
Iteration   2: 5.284 s
Iteration   3: 5.221 s
Iteration   4: 5.291 s
Iteration   5: 5.276 s
Iteration   6: 5.255 s
Iteration   7: 5.268 s
Iteration   8: 5.259 s
Iteration   9: 5.268 s
Iteration  10: 5.268 s
Iteration  11: 5.262 s
Iteration  12: 5.265 s
Iteration  13: 5.258 s
Iteration  14: 5.261 s
Iteration  15: 5.258 s
Iteration  16: 5.256 s
Iteration  17: 5.262 s
Iteration  18: 5.261 s
Iteration  19: 5.271 s
Iteration  20: 5.256 s
Iteration  21: 5.267 s
Iteration  22: 5.273 s
Iteration  23: 5.264 s
Iteration  24: 5.268 s
Iteration  25: 5.274 s
Iteration  26: 5.268 s
Iteration  27: 5.281 s
Iteration  28: 5.260 s
Iteration  29: 5.275 s
Iteration  30: 5.211 s
Iteration  31: 5.261 s
Iteration  32: 5.271 s
Iteration  33: 5.258 s
Iteration  34: 5.263 s
Iteration  35: 5.284 s
Iteration  36: 5.279 s
Iteration  37: 5.266 s
Iteration  38: 5.269 s
Iteration  39: 5.277 s
Iteration  40: 5.271 s
Iteration  41: 5.277 s
Iteration  42: 5.269 s
Iteration  43: 5.278 s
Iteration  44: 5.282 s
Iteration  45: 5.274 s
Iteration  46: 5.286 s
Iteration  47: 5.274 s
Iteration  48: 5.634 s
Iteration  49: 5.213 s
Iteration  50: 5.213 s


Result: 5.284 ?(99.9%) 0.049 s [Average]
  Statistics: (min, avg, max) = (5.211, 5.284, 5.851), stdev = 0.099
  Confidence interval (99.9%): [5.235, 5.333]
  Samples, N = 50
        mean =      5.284 ?(99.9%) 0.049 s
         min =      5.211 s
  p( 0.0000) =      5.211 s
  p(50.0000) =      5.268 s
  p(90.0000) =      5.284 s
  p(95.0000) =      5.445 s
  p(99.0000) =      5.851 s
  p(99.9000) =      5.851 s
  p(99.9900) =      5.851 s
  p(99.9990) =      5.851 s
  p(99.9999) =      5.851 s
         max =      5.851 s


# Run complete. Total time: 00:04:25

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  5.284        0.049      s
{"wallclock_times": [265.376332522], "core_cycle_counts": [[192611462915], [269247442891], [269881907997], [198115697666]], "aperf_counts": [[191864841637], [269181977130], [269831605843], [198067128053]], "mperf_counts": [[191885490916], [269200974296], [269836907244], [198072066220]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 06:21:20: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:21:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 06:21:21: INFO] 125 executions left in scheduler queue
[2019-07-27 06:21:21: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:21:21: INFO] Estimated completion (next execution): 2019-07-27 06:28:17 (0:06:55 from now)
[2019-07-27 06:21:21: INFO] Reboot in preparation for next execution
[2019-07-27 06:33:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.458 s
Iteration   2: 9.399 s
Iteration   3: 9.299 s
Iteration   4: 9.307 s
Iteration   5: 9.307 s
Iteration   6: 9.324 s
Iteration   7: 9.283 s
Iteration   8: 9.284 s
Iteration   9: 9.268 s
Iteration  10: 9.298 s
Iteration  11: 9.249 s
Iteration  12: 9.281 s
Iteration  13: 9.357 s
Iteration  14: 9.281 s
Iteration  15: 9.292 s
Iteration  16: 9.306 s
Iteration  17: 9.301 s
Iteration  18: 9.331 s
Iteration  19: 9.321 s
Iteration  20: 9.368 s
Iteration  21: 9.327 s
Iteration  22: 9.312 s
Iteration  23: 9.329 s
Iteration  24: 9.302 s
Iteration  25: 9.294 s
Iteration  26: 9.322 s
Iteration  27: 9.324 s
Iteration  28: 9.282 s
Iteration  29: 9.306 s
Iteration  30: 9.301 s
Iteration  31: 9.311 s
Iteration  32: 9.292 s
Iteration  33: 9.276 s
Iteration  34: 9.306 s
Iteration  35: 9.308 s
Iteration  36: 9.299 s
Iteration  37: 9.327 s
Iteration  38: 9.325 s
Iteration  39: 9.306 s
Iteration  40: 9.298 s
Iteration  41: 9.312 s
Iteration  42: 9.307 s
Iteration  43: 9.334 s
Iteration  44: 9.310 s
Iteration  45: 9.307 s
Iteration  46: 9.292 s
Iteration  47: 9.297 s
Iteration  48: 9.266 s
Iteration  49: 9.320 s
Iteration  50: 9.323 s


Result: 9.311 ?(99.9%) 0.016 s [Average]
  Statistics: (min, avg, max) = (9.249, 9.311, 9.458), stdev = 0.033
  Confidence interval (99.9%): [9.294, 9.327]
  Samples, N = 50
        mean =      9.311 ?(99.9%) 0.016 s
         min =      9.249 s
  p( 0.0000) =      9.249 s
  p(50.0000) =      9.307 s
  p(90.0000) =      9.333 s
  p(95.0000) =      9.382 s
  p(99.0000) =      9.458 s
  p(99.9000) =      9.458 s
  p(99.9900) =      9.458 s
  p(99.9990) =      9.458 s
  p(99.9999) =      9.458 s
         max =      9.458 s


# Run complete. Total time: 00:07:46

Benchmark                                                                               (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  9.311        0.016      s
{"wallclock_times": [466.4862184599999], "core_cycle_counts": [[302975176633], [501102454444], [455812876905], [242495174221]], "aperf_counts": [[301842734217], [501028784995], [455762933554], [242449906801]], "mperf_counts": [[301867371396], [501034111156], [455765235784], [242452669718]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 06:33:22: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:33:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 06:33:23: INFO] 124 executions left in scheduler queue
[2019-07-27 06:33:23: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:33:23: INFO] Estimated completion (next execution): 2019-07-27 06:43:39 (0:10:16 from now)
[2019-07-27 06:33:23: INFO] Reboot in preparation for next execution
[2019-07-27 06:41:34: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.983 s
Iteration   2: 4.844 s
Iteration   3: 4.724 s
Iteration   4: 4.706 s
Iteration   5: 4.712 s
Iteration   6: 4.695 s
Iteration   7: 4.680 s
Iteration   8: 4.692 s
Iteration   9: 4.709 s
Iteration  10: 4.721 s
Iteration  11: 4.725 s
Iteration  12: 4.707 s
Iteration  13: 4.714 s
Iteration  14: 4.696 s
Iteration  15: 4.692 s
Iteration  16: 4.713 s
Iteration  17: 4.666 s
Iteration  18: 4.715 s
Iteration  19: 4.731 s
Iteration  20: 4.665 s
Iteration  21: 4.698 s
Iteration  22: 4.721 s
Iteration  23: 4.728 s
Iteration  24: 4.685 s
Iteration  25: 4.698 s
Iteration  26: 4.683 s
Iteration  27: 4.682 s
Iteration  28: 4.680 s
Iteration  29: 4.684 s
Iteration  30: 4.684 s
Iteration  31: 4.706 s
Iteration  32: 4.703 s
Iteration  33: 4.691 s
Iteration  34: 4.691 s
Iteration  35: 4.686 s
Iteration  36: 4.705 s
Iteration  37: 4.725 s
Iteration  38: 4.724 s
Iteration  39: 4.670 s
Iteration  40: 4.696 s
Iteration  41: 4.676 s
Iteration  42: 4.684 s
Iteration  43: 4.710 s
Iteration  44: 4.693 s
Iteration  45: 4.710 s
Iteration  46: 4.674 s
Iteration  47: 4.692 s
Iteration  48: 4.712 s
Iteration  49: 4.694 s
Iteration  50: 4.709 s


Result: 4.708 ?(99.9%) 0.024 s [Average]
  Statistics: (min, avg, max) = (4.665, 4.708, 4.983), stdev = 0.048
  Confidence interval (99.9%): [4.684, 4.731]
  Samples, N = 50
        mean =      4.708 ?(99.9%) 0.024 s
         min =      4.665 s
  p( 0.0000) =      4.665 s
  p(50.0000) =      4.698 s
  p(90.0000) =      4.725 s
  p(95.0000) =      4.782 s
  p(99.0000) =      4.983 s
  p(99.9000) =      4.983 s
  p(99.9900) =      4.983 s
  p(99.9990) =      4.983 s
  p(99.9999) =      4.983 s
         max =      4.983 s


# Run complete. Total time: 00:03:56

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  4.708        0.024      s
{"wallclock_times": [236.44292205999997], "core_cycle_counts": [[239350432477], [217225010361], [173829318285], [137472334472]], "aperf_counts": [[238841912545], [217163569822], [173805985623], [137448282589]], "mperf_counts": [[238863888906], [217173749246], [173824292332], [137450611604]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 06:41:34: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:41:35: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 06:41:35: INFO] 123 executions left in scheduler queue
[2019-07-27 06:41:35: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:41:35: INFO] Estimated completion (next execution): 2019-07-27 06:48:02 (0:06:26 from now)
[2019-07-27 06:41:35: INFO] Reboot in preparation for next execution
[2019-07-27 06:52:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.905 s
Iteration   2: 7.716 s
Iteration   3: 7.725 s
Iteration   4: 7.696 s
Iteration   5: 7.659 s
Iteration   6: 7.694 s
Iteration   7: 7.726 s
Iteration   8: 7.663 s
Iteration   9: 7.691 s
Iteration  10: 7.634 s
Iteration  11: 7.703 s
Iteration  12: 7.720 s
Iteration  13: 7.702 s
Iteration  14: 7.720 s
Iteration  15: 7.703 s
Iteration  16: 7.639 s
Iteration  17: 7.700 s
Iteration  18: 7.711 s
Iteration  19: 7.697 s
Iteration  20: 7.698 s
Iteration  21: 7.647 s
Iteration  22: 7.784 s
Iteration  23: 7.693 s
Iteration  24: 7.745 s
Iteration  25: 7.642 s
Iteration  26: 7.736 s
Iteration  27: 7.697 s
Iteration  28: 7.720 s
Iteration  29: 7.650 s
Iteration  30: 7.714 s
Iteration  31: 7.695 s
Iteration  32: 7.699 s
Iteration  33: 7.727 s
Iteration  34: 7.683 s
Iteration  35: 7.698 s
Iteration  36: 7.683 s
Iteration  37: 7.694 s
Iteration  38: 7.732 s
Iteration  39: 7.705 s
Iteration  40: 7.630 s
Iteration  41: 7.686 s
Iteration  42: 7.706 s
Iteration  43: 7.630 s
Iteration  44: 7.659 s
Iteration  45: 7.709 s
Iteration  46: 7.633 s
Iteration  47: 7.724 s
Iteration  48: 7.714 s
Iteration  49: 7.719 s
Iteration  50: 7.669 s


Result: 7.698 ?(99.9%) 0.022 s [Average]
  Statistics: (min, avg, max) = (7.630, 7.698, 7.905), stdev = 0.044
  Confidence interval (99.9%): [7.677, 7.720]
  Samples, N = 50
        mean =      7.698 ?(99.9%) 0.022 s
         min =      7.630 s
  p( 0.0000) =      7.630 s
  p(50.0000) =      7.699 s
  p(90.0000) =      7.731 s
  p(95.0000) =      7.762 s
  p(99.0000) =      7.905 s
  p(99.9000) =      7.905 s
  p(99.9900) =      7.905 s
  p(99.9990) =      7.905 s
  p(99.9999) =      7.905 s
         max =      7.905 s


# Run complete. Total time: 00:06:25

Benchmark                                                                          (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  7.698        0.022      s
{"wallclock_times": [385.921969561], "core_cycle_counts": [[170573247915], [396088865497], [352915488646], [325789430236]], "aperf_counts": [[169528377476], [396043221557], [352882364997], [325762546808]], "mperf_counts": [[169553739040], [396049302792], [352883263072], [325765468376]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 06:52:17: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ee-19.1.1'
[2019-07-27 06:52:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 06:52:18: INFO] 122 executions left in scheduler queue
[2019-07-27 06:52:18: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-07-27 06:52:18: INFO] Estimated completion (next execution): 2019-07-27 07:01:14 (0:08:56 from now)
[2019-07-27 06:52:18: INFO] Reboot in preparation for next execution
[2019-07-27 06:56:34: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 06:56:34: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 06:56:34: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 06:56:34: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 06:56:34: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 06:56:34: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 06:56:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.001) = 49 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 
    [0.004, 0.005) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564203394106.json
{"wallclock_times": [1.5207833519999951], "core_cycle_counts": [[3497643511], [2011091419], [2242654815], [2512416955]], "aperf_counts": [[3488745560], [2002516397], [2217690228], [2500290953]], "mperf_counts": [[3493811094], [2002517396], [2217699268], [2500293492]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 06:56:35: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9_12.0.1'
[2019-07-27 06:56:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 06:56:36: INFO] 121 executions left in scheduler queue
[2019-07-27 06:56:36: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-27 06:56:36: INFO] Estimated completion (next execution): 2019-07-27 06:59:08 (0:02:32 from now)
[2019-07-27 06:56:36: INFO] Reboot in preparation for next execution
[2019-07-27 07:00:53: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 07:00:53: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 07:00:53: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 07:00:53: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 07:00:53: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 07:02:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.332 s/op
Iteration   2: 2.572 s/op
Iteration   3: 2.330 s/op
Iteration   4: 2.012 s/op
Iteration   5: 2.308 s/op
Iteration   6: 2.298 s/op
Iteration   7: 2.362 s/op
Iteration   8: 2.342 s/op
Iteration   9: 2.351 s/op
Iteration  10: 2.350 s/op
Iteration  11: 2.355 s/op
Iteration  12: 2.337 s/op
Iteration  13: 2.258 s/op
Iteration  14: 2.348 s/op
Iteration  15: 2.325 s/op
Iteration  16: 2.344 s/op
Iteration  17: 2.332 s/op
Iteration  18: 2.340 s/op
Iteration  19: 2.275 s/op
Iteration  20: 2.343 s/op
Iteration  21: 2.334 s/op
Iteration  22: 2.124 s/op
Iteration  23: 2.347 s/op
Iteration  24: 2.346 s/op
Iteration  25: 2.338 s/op
Iteration  26: 2.219 s/op
Iteration  27: 2.197 s/op
Iteration  28: 2.350 s/op
Iteration  29: 2.346 s/op
Iteration  30: 2.331 s/op
Iteration  31: 2.161 s/op
Iteration  32: 2.325 s/op
Iteration  33: 2.344 s/op
Iteration  34: 2.334 s/op
Iteration  35: 2.117 s/op
Iteration  36: 2.231 s/op
Iteration  37: 2.348 s/op
Iteration  38: 2.345 s/op
Iteration  39: 2.332 s/op
Iteration  40: 2.194 s/op
Iteration  41: 2.307 s/op
Iteration  42: 2.341 s/op
Iteration  43: 2.335 s/op
Iteration  44: 2.153 s/op
Iteration  45: 2.266 s/op
Iteration  46: 2.340 s/op
Iteration  47: 2.334 s/op
Iteration  48: 2.341 s/op
Iteration  49: 2.225 s/op
Iteration  50: 2.344 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.303 ?(99.9%) 0.043 s/op

  Histogram, s/op:
    [2.000, 2.050) = 1 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 2 
    [2.150, 2.200) = 4 
    [2.200, 2.250) = 3 
    [2.250, 2.300) = 4 
    [2.300, 2.350) = 31 
    [2.350, 2.400) = 4 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.012 s/op
     p(50.0000) =      2.334 s/op
     p(90.0000) =      2.350 s/op
     p(95.0000) =      2.358 s/op
     p(99.0000) =      2.572 s/op
     p(99.9000) =      2.572 s/op
     p(99.9900) =      2.572 s/op
     p(99.9990) =      2.572 s/op
     p(99.9999) =      2.572 s/op
    p(100.0000) =      2.572 s/op


# Run complete. Total time: 00:01:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.303 ? 0.043   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564203653380.json
{"wallclock_times": [116.17643956699999], "core_cycle_counts": [[38399749564], [42291800188], [192603579364], [75504539937]], "aperf_counts": [[38015255347], [42246923800], [192585393558], [75484271741]], "mperf_counts": [[42092923380], [46731096046], [214665061376], [85136452948]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 07:02:49: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-27 07:02:50: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:02:50: INFO] 120 executions left in scheduler queue
[2019-07-27 07:02:50: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-27 07:02:50: INFO] Estimated completion (next execution): 2019-07-27 07:07:16 (0:04:26 from now)
[2019-07-27 07:02:50: INFO] Reboot in preparation for next execution
[2019-07-27 07:07:08: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 07:07:08: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 07:07:08: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 07:07:08: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 07:07:08: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 07:09:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.502 s/op
Iteration   2: 2.788 s/op
Iteration   3: 2.725 s/op
Iteration   4: 2.734 s/op
Iteration   5: 2.791 s/op
Iteration   6: 2.633 s/op
Iteration   7: 2.608 s/op
Iteration   8: 2.601 s/op
Iteration   9: 2.603 s/op
Iteration  10: 2.605 s/op
Iteration  11: 2.608 s/op
Iteration  12: 2.602 s/op
Iteration  13: 2.605 s/op
Iteration  14: 2.603 s/op
Iteration  15: 2.602 s/op
Iteration  16: 2.600 s/op
Iteration  17: 2.595 s/op
Iteration  18: 2.603 s/op
Iteration  19: 2.592 s/op
Iteration  20: 2.598 s/op
Iteration  21: 2.591 s/op
Iteration  22: 2.596 s/op
Iteration  23: 2.598 s/op
Iteration  24: 2.595 s/op
Iteration  25: 2.598 s/op
Iteration  26: 2.592 s/op
Iteration  27: 2.596 s/op
Iteration  28: 2.598 s/op
Iteration  29: 2.594 s/op
Iteration  30: 2.592 s/op
Iteration  31: 2.598 s/op
Iteration  32: 2.596 s/op
Iteration  33: 2.596 s/op
Iteration  34: 2.597 s/op
Iteration  35: 2.596 s/op
Iteration  36: 2.594 s/op
Iteration  37: 2.602 s/op
Iteration  38: 2.601 s/op
Iteration  39: 2.597 s/op
Iteration  40: 2.598 s/op
Iteration  41: 2.596 s/op
Iteration  42: 2.594 s/op
Iteration  43: 2.594 s/op
Iteration  44: 2.597 s/op
Iteration  45: 2.596 s/op
Iteration  46: 2.596 s/op
Iteration  47: 2.602 s/op
Iteration  48: 2.599 s/op
Iteration  49: 2.601 s/op
Iteration  50: 2.595 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.610 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [2.500, 2.525) = 1 
    [2.525, 2.550) = 0 
    [2.550, 2.575) = 0 
    [2.575, 2.600) = 30 
    [2.600, 2.625) = 14 
    [2.625, 2.650) = 1 
    [2.650, 2.675) = 0 
    [2.675, 2.700) = 0 
    [2.700, 2.725) = 1 
    [2.725, 2.750) = 1 
    [2.750, 2.775) = 0 
    [2.775, 2.800) = 2 

  Percentiles, s/op:
      p(0.0000) =      2.502 s/op
     p(50.0000) =      2.598 s/op
     p(90.0000) =      2.630 s/op
     p(95.0000) =      2.759 s/op
     p(99.0000) =      2.791 s/op
     p(99.9000) =      2.791 s/op
     p(99.9900) =      2.791 s/op
     p(99.9990) =      2.791 s/op
     p(99.9999) =      2.791 s/op
    p(100.0000) =      2.791 s/op


# Run complete. Total time: 00:02:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.610 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564204028288.json
{"wallclock_times": [131.44060599000002], "core_cycle_counts": [[94211269025], [110571805362], [95979793274], [127342530695]], "aperf_counts": [[93863705928], [110534197266], [95959438308], [127324232564]], "mperf_counts": [[94264590314], [110635926024], [96098886200], [127405143518]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 07:09:19: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot_12.0.2'
[2019-07-27 07:09:20: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:09:20: INFO] 119 executions left in scheduler queue
[2019-07-27 07:09:20: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-07-27 07:09:20: INFO] Estimated completion (next execution): 2019-07-27 07:14:02 (0:04:41 from now)
[2019-07-27 07:09:20: INFO] Reboot in preparation for next execution
[2019-07-27 07:13:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 07:13:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 07:13:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 07:13:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 07:13:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 07:13:37: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 07:13:38: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.002 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 17 
    [0.000, 0.001) = 32 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 1 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.002 s/op
     p(99.9000) =      0.002 s/op
     p(99.9900) =      0.002 s/op
     p(99.9990) =      0.002 s/op
     p(99.9999) =      0.002 s/op
    p(100.0000) =      0.002 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564204417007.json
{"wallclock_times": [1.4696979450000072], "core_cycle_counts": [[3488598766], [1443200011], [2696479424], [2744533264]], "aperf_counts": [[3480794975], [1429377455], [2681349852], [2732076412]], "mperf_counts": [[3485594724], [1429434346], [2682396534], [2732846390]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 07:13:38: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9_12.0.1'
[2019-07-27 07:13:39: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:13:39: INFO] 118 executions left in scheduler queue
[2019-07-27 07:13:39: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-07-27 07:13:39: INFO] Estimated completion (next execution): 2019-07-27 07:16:11 (0:02:31 from now)
[2019-07-27 07:13:39: INFO] Reboot in preparation for next execution
[2019-07-27 07:28:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.250 s/op
Iteration   2: 12.069 s/op
Iteration   3: 11.880 s/op
Iteration   4: 11.929 s/op
Iteration   5: 12.188 s/op
Iteration   6: 11.831 s/op
Iteration   7: 11.903 s/op
Iteration   8: 11.942 s/op
Iteration   9: 11.969 s/op
Iteration  10: 12.044 s/op
Iteration  11: 11.861 s/op
Iteration  12: 12.534 s/op
Iteration  13: 11.900 s/op
Iteration  14: 11.909 s/op
Iteration  15: 11.942 s/op
Iteration  16: 12.037 s/op
Iteration  17: 11.817 s/op
Iteration  18: 11.851 s/op
Iteration  19: 11.900 s/op
Iteration  20: 11.904 s/op
Iteration  21: 12.014 s/op
Iteration  22: 11.979 s/op
Iteration  23: 12.740 s/op
Iteration  24: 11.843 s/op
Iteration  25: 11.898 s/op
Iteration  26: 11.898 s/op
Iteration  27: 11.942 s/op
Iteration  28: 11.951 s/op
Iteration  29: 12.021 s/op
Iteration  30: 11.865 s/op
Iteration  31: 11.846 s/op
Iteration  32: 11.977 s/op
Iteration  33: 11.924 s/op
Iteration  34: 12.474 s/op
Iteration  35: 11.928 s/op
Iteration  36: 12.060 s/op
Iteration  37: 11.836 s/op
Iteration  38: 11.921 s/op
Iteration  39: 11.948 s/op
Iteration  40: 11.959 s/op
Iteration  41: 12.003 s/op
Iteration  42: 12.042 s/op
Iteration  43: 11.838 s/op
Iteration  44: 11.909 s/op
Iteration  45: 12.503 s/op
Iteration  46: 11.948 s/op
Iteration  47: 11.922 s/op
Iteration  48: 11.987 s/op
Iteration  49: 11.802 s/op
Iteration  50: 11.833 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     11.989 ?(99.9%) 0.096 s/op

  Histogram, s/op:
    [11.800, 11.900) = 14 
    [11.900, 12.000) = 22 
    [12.000, 12.100) = 8 
    [12.100, 12.200) = 1 
    [12.200, 12.300) = 1 
    [12.300, 12.400) = 0 
    [12.400, 12.500) = 1 
    [12.500, 12.600) = 2 
    [12.600, 12.700) = 0 

  Percentiles, s/op:
      p(0.0000) =     11.802 s/op
     p(50.0000) =     11.935 s/op
     p(90.0000) =     12.243 s/op
     p(95.0000) =     12.517 s/op
     p(99.0000) =     12.740 s/op
     p(99.9000) =     12.740 s/op
     p(99.9900) =     12.740 s/op
     p(99.9990) =     12.740 s/op
     p(99.9999) =     12.740 s/op
    p(100.0000) =     12.740 s/op


# Run complete. Total time: 00:10:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  11.989 ? 0.096   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564204688853.json
{"wallclock_times": [600.637370508], "core_cycle_counts": [[468652579257], [798701117651], [589358017016], [363090684718]], "aperf_counts": [[466941851622], [798558135243], [589258155766], [362998907708]], "mperf_counts": [[466945462670], [798571812142], [589264992078], [363001855626]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 07:28:09: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_hotspot-8u222-b10'
[2019-07-27 07:28:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:28:10: INFO] 117 executions left in scheduler queue
[2019-07-27 07:28:10: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-07-27 07:28:10: INFO] Estimated completion (next execution): 2019-07-27 07:40:41 (0:12:30 from now)
[2019-07-27 07:28:10: INFO] Reboot in preparation for next execution
[2019-07-27 07:32:26: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 07:32:26: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 07:32:26: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 07:32:26: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 07:32:26: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 07:32:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 42 
    [0.000, 0.001) = 7 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564205546070.json
{"wallclock_times": [0.9160042629999907], "core_cycle_counts": [[1983057275], [1320165969], [1258234714], [1192054037]], "aperf_counts": [[1980972929], [1316020632], [1253622238], [1186868311]], "mperf_counts": [[2210739600], [1381320524], [1309311762], [1218124600]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 07:32:26: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot_12.0.2'
[2019-07-27 07:32:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:32:27: INFO] 116 executions left in scheduler queue
[2019-07-27 07:32:27: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-27 07:32:27: INFO] Estimated completion (next execution): 2019-07-27 07:34:59 (0:02:31 from now)
[2019-07-27 07:32:27: INFO] Reboot in preparation for next execution
[2019-07-27 07:38:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.094 s/op
Iteration   2: 1.595 s/op
Iteration   3: 1.591 s/op
Iteration   4: 1.670 s/op
Iteration   5: 1.703 s/op
Iteration   6: 1.696 s/op
Iteration   7: 1.694 s/op
Iteration   8: 1.697 s/op
Iteration   9: 1.707 s/op
Iteration  10: 1.697 s/op
Iteration  11: 1.696 s/op
Iteration  12: 1.697 s/op
Iteration  13: 1.701 s/op
Iteration  14: 1.701 s/op
Iteration  15: 1.699 s/op
Iteration  16: 1.698 s/op
Iteration  17: 1.699 s/op
Iteration  18: 1.698 s/op
Iteration  19: 1.707 s/op
Iteration  20: 1.694 s/op
Iteration  21: 1.696 s/op
Iteration  22: 1.700 s/op
Iteration  23: 1.699 s/op
Iteration  24: 1.701 s/op
Iteration  25: 1.707 s/op
Iteration  26: 1.701 s/op
Iteration  27: 1.698 s/op
Iteration  28: 1.702 s/op
Iteration  29: 1.707 s/op
Iteration  30: 1.705 s/op
Iteration  31: 1.697 s/op
Iteration  32: 1.702 s/op
Iteration  33: 1.698 s/op
Iteration  34: 1.701 s/op
Iteration  35: 1.701 s/op
Iteration  36: 1.700 s/op
Iteration  37: 1.702 s/op
Iteration  38: 1.699 s/op
Iteration  39: 1.694 s/op
Iteration  40: 1.696 s/op
Iteration  41: 1.693 s/op
Iteration  42: 1.698 s/op
Iteration  43: 1.700 s/op
Iteration  44: 1.698 s/op
Iteration  45: 1.700 s/op
Iteration  46: 1.702 s/op
Iteration  47: 1.700 s/op
Iteration  48: 1.700 s/op
Iteration  49: 1.703 s/op
Iteration  50: 1.701 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      1.703 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 2 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 25 
    [1.700, 1.750) = 22 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 0 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.591 s/op
     p(50.0000) =      1.699 s/op
     p(90.0000) =      1.707 s/op
     p(95.0000) =      1.707 s/op
     p(99.0000) =      2.094 s/op
     p(99.9000) =      2.094 s/op
     p(99.9900) =      2.094 s/op
     p(99.9990) =      2.094 s/op
     p(99.9999) =      2.094 s/op
    p(100.0000) =      2.094 s/op


# Run complete. Total time: 00:01:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.703 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564205804169.json
{"wallclock_times": [85.990220217], "core_cycle_counts": [[87851889872], [24160580782], [45360875748], [134250177038]], "aperf_counts": [[87588905546], [24117412134], [45337057522], [134234906495]], "mperf_counts": [[87595213508], [24117426922], [45337718442], [134235960446]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 07:38:10: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-27 07:38:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:38:11: INFO] 115 executions left in scheduler queue
[2019-07-27 07:38:11: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-27 07:38:11: INFO] Estimated completion (next execution): 2019-07-27 07:42:07 (0:03:56 from now)
[2019-07-27 07:38:11: INFO] Reboot in preparation for next execution
[2019-07-27 07:44:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.405 s/op
Iteration   2: 1.990 s/op
Iteration   3: 2.202 s/op
Iteration   4: 2.084 s/op
Iteration   5: 2.186 s/op
Iteration   6: 2.296 s/op
Iteration   7: 2.286 s/op
Iteration   8: 2.290 s/op
Iteration   9: 2.314 s/op
Iteration  10: 2.287 s/op
Iteration  11: 2.290 s/op
Iteration  12: 2.284 s/op
Iteration  13: 2.286 s/op
Iteration  14: 2.286 s/op
Iteration  15: 2.289 s/op
Iteration  16: 2.288 s/op
Iteration  17: 2.287 s/op
Iteration  18: 2.288 s/op
Iteration  19: 2.287 s/op
Iteration  20: 2.288 s/op
Iteration  21: 2.287 s/op
Iteration  22: 2.290 s/op
Iteration  23: 2.291 s/op
Iteration  24: 2.308 s/op
Iteration  25: 2.293 s/op
Iteration  26: 2.287 s/op
Iteration  27: 2.289 s/op
Iteration  28: 2.284 s/op
Iteration  29: 2.287 s/op
Iteration  30: 2.332 s/op
Iteration  31: 2.315 s/op
Iteration  32: 2.301 s/op
Iteration  33: 2.289 s/op
Iteration  34: 2.285 s/op
Iteration  35: 2.317 s/op
Iteration  36: 2.286 s/op
Iteration  37: 2.286 s/op
Iteration  38: 2.287 s/op
Iteration  39: 2.285 s/op
Iteration  40: 2.289 s/op
Iteration  41: 2.285 s/op
Iteration  42: 2.293 s/op
Iteration  43: 2.295 s/op
Iteration  44: 2.290 s/op
Iteration  45: 2.291 s/op
Iteration  46: 2.291 s/op
Iteration  47: 2.294 s/op
Iteration  48: 2.292 s/op
Iteration  49: 2.289 s/op
Iteration  50: 2.290 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.280 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 1 
    [2.250, 2.300) = 39 
    [2.300, 2.350) = 6 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.990 s/op
     p(50.0000) =      2.289 s/op
     p(90.0000) =      2.313 s/op
     p(95.0000) =      2.323 s/op
     p(99.0000) =      2.405 s/op
     p(99.9000) =      2.405 s/op
     p(99.9900) =      2.405 s/op
     p(99.9990) =      2.405 s/op
     p(99.9999) =      2.405 s/op
    p(100.0000) =      2.405 s/op


# Run complete. Total time: 00:01:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.280 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564206138938.json
{"wallclock_times": [114.80563626], "core_cycle_counts": [[112326935169], [30655922115], [127964269599], [104418071548]], "aperf_counts": [[112077683860], [30623020594], [127948743612], [104407588244]], "mperf_counts": [[112088904110], [30623701596], [127948823496], [104418408198]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 07:44:13: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_hotspot-8u222-b10'
[2019-07-27 07:44:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:44:14: INFO] 114 executions left in scheduler queue
[2019-07-27 07:44:14: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-07-27 07:44:14: INFO] Estimated completion (next execution): 2019-07-27 07:48:39 (0:04:25 from now)
[2019-07-27 07:44:14: INFO] Reboot in preparation for next execution
[2019-07-27 07:52:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.040 s/op
Iteration   2: 5.580 s/op
Iteration   3: 6.053 s/op
Iteration   4: 5.915 s/op
Iteration   5: 5.782 s/op
Iteration   6: 5.826 s/op
Iteration   7: 5.753 s/op
Iteration   8: 5.810 s/op
Iteration   9: 5.819 s/op
Iteration  10: 5.674 s/op
Iteration  11: 5.698 s/op
Iteration  12: 5.843 s/op
Iteration  13: 6.528 s/op
Iteration  14: 5.752 s/op
Iteration  15: 5.678 s/op
Iteration  16: 5.842 s/op
Iteration  17: 5.718 s/op
Iteration  18: 5.845 s/op
Iteration  19: 5.702 s/op
Iteration  20: 5.871 s/op
Iteration  21: 5.719 s/op
Iteration  22: 5.870 s/op
Iteration  23: 5.721 s/op
Iteration  24: 6.927 s/op
Iteration  25: 5.658 s/op
Iteration  26: 5.854 s/op
Iteration  27: 5.721 s/op
Iteration  28: 5.855 s/op
Iteration  29: 5.715 s/op
Iteration  30: 5.726 s/op
Iteration  31: 5.720 s/op
Iteration  32: 5.715 s/op
Iteration  33: 5.834 s/op
Iteration  34: 5.692 s/op
Iteration  35: 6.849 s/op
Iteration  36: 5.647 s/op
Iteration  37: 5.846 s/op
Iteration  38: 5.722 s/op
Iteration  39: 5.862 s/op
Iteration  40: 5.728 s/op
Iteration  41: 5.846 s/op
Iteration  42: 5.720 s/op
Iteration  43: 5.694 s/op
Iteration  44: 5.833 s/op
Iteration  45: 5.720 s/op
Iteration  46: 6.833 s/op
Iteration  47: 5.628 s/op
Iteration  48: 5.836 s/op
Iteration  49: 5.701 s/op
Iteration  50: 5.865 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =      5.856 ?(99.9%) 0.146 s/op

  Histogram, s/op:
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 1 
    [5.625, 5.750) = 22 
    [5.750, 5.875) = 20 
    [5.875, 6.000) = 1 
    [6.000, 6.125) = 2 
    [6.125, 6.250) = 0 
    [6.250, 6.375) = 0 
    [6.375, 6.500) = 0 
    [6.500, 6.625) = 1 
    [6.625, 6.750) = 0 
    [6.750, 6.875) = 2 

  Percentiles, s/op:
      p(0.0000) =      5.580 s/op
     p(50.0000) =      5.767 s/op
     p(90.0000) =      6.052 s/op
     p(95.0000) =      6.840 s/op
     p(99.0000) =      6.927 s/op
     p(99.9000) =      6.927 s/op
     p(99.9900) =      6.927 s/op
     p(99.9990) =      6.927 s/op
     p(99.9999) =      6.927 s/op
    p(100.0000) =      6.927 s/op


# Run complete. Total time: 00:04:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  5.856 ? 0.146   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564206462176.json
{"wallclock_times": [294.110651185], "core_cycle_counts": [[280848501217], [283527446065], [254369441794], [347782381985]], "aperf_counts": [[280079493976], [283454703103], [254326615314], [347743312517]], "mperf_counts": [[280097639906], [283465942154], [254328358624], [347743652446]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 07:52:36: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_graalvm-ee-19.1.1'
[2019-07-27 07:52:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:52:37: INFO] 113 executions left in scheduler queue
[2019-07-27 07:52:37: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-07-27 07:52:37: INFO] Estimated completion (next execution): 2019-07-27 08:00:01 (0:07:24 from now)
[2019-07-27 07:52:37: INFO] Reboot in preparation for next execution
[2019-07-27 07:56:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: 0.001 s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 43 
    [0.000, 0.001) = 5 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 1 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564207004338.json
{"wallclock_times": [0.8157349029999921], "core_cycle_counts": [[1878513341], [1118359181], [1250353150], [1369258448]], "aperf_counts": [[1876301687], [1115030069], [1246173653], [1364047828]], "mperf_counts": [[1891573590], [1115691682], [1246472912], [1367576672]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 07:56:45: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_graalvm-ce-19.1.1'
[2019-07-27 07:56:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 07:56:46: INFO] 112 executions left in scheduler queue
[2019-07-27 07:56:46: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 07:56:46: INFO] Estimated completion (next execution): 2019-07-27 07:59:17 (0:02:31 from now)
[2019-07-27 07:56:46: INFO] Reboot in preparation for next execution
[2019-07-27 08:09:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.749 s
Iteration   2: 10.772 s
Iteration   3: 10.753 s
Iteration   4: 10.415 s
Iteration   5: 10.431 s
Iteration   6: 10.424 s
Iteration   7: 10.441 s
Iteration   8: 10.451 s
Iteration   9: 10.432 s
Iteration  10: 10.440 s
Iteration  11: 10.445 s
Iteration  12: 10.452 s
Iteration  13: 10.448 s
Iteration  14: 10.444 s
Iteration  15: 10.434 s
Iteration  16: 10.437 s
Iteration  17: 10.405 s
Iteration  18: 10.427 s
Iteration  19: 10.411 s
Iteration  20: 10.407 s
Iteration  21: 10.443 s
Iteration  22: 10.411 s
Iteration  23: 10.417 s
Iteration  24: 10.409 s
Iteration  25: 10.417 s
Iteration  26: 10.464 s
Iteration  27: 10.425 s
Iteration  28: 10.396 s
Iteration  29: 10.443 s
Iteration  30: 10.430 s
Iteration  31: 10.438 s
Iteration  32: 10.430 s
Iteration  33: 10.413 s
Iteration  34: 10.440 s
Iteration  35: 10.448 s
Iteration  36: 10.415 s
Iteration  37: 10.455 s
Iteration  38: 10.415 s
Iteration  39: 10.411 s
Iteration  40: 10.430 s
Iteration  41: 10.444 s
Iteration  42: 10.423 s
Iteration  43: 10.434 s
Iteration  44: 10.428 s
Iteration  45: 10.432 s
Iteration  46: 10.425 s
Iteration  47: 10.426 s
Iteration  48: 10.422 s
Iteration  49: 10.446 s
Iteration  50: 10.447 s


Result: 10.450 ?(99.9%) 0.040 s [Average]
  Statistics: (min, avg, max) = (10.396, 10.450, 10.772), stdev = 0.080
  Confidence interval (99.9%): [10.410, 10.489]
  Samples, N = 50
        mean =     10.450 ?(99.9%) 0.040 s
         min =     10.396 s
  p( 0.0000) =     10.396 s
  p(50.0000) =     10.431 s
  p(90.0000) =     10.455 s
  p(95.0000) =     10.750 s
  p(99.0000) =     10.772 s
  p(99.9000) =     10.772 s
  p(99.9900) =     10.772 s
  p(99.9990) =     10.772 s
  p(99.9999) =     10.772 s
         max =     10.772 s


# Run complete. Total time: 00:08:43

Benchmark                                                                                (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  10.450        0.040      s
{"wallclock_times": [523.5777130800001], "core_cycle_counts": [[233719844084], [492256663529], [336548665858], [632203588538]], "aperf_counts": [[232238878964], [492181236855], [336490876895], [632166968138]], "mperf_counts": [[232610916832], [492216103944], [336516448514], [632196152528]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 08:09:37: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 08:09:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 08:09:38: INFO] 111 executions left in scheduler queue
[2019-07-27 08:09:38: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 08:09:38: INFO] Estimated completion (next execution): 2019-07-27 08:20:51 (0:11:13 from now)
[2019-07-27 08:09:38: INFO] Reboot in preparation for next execution
[2019-07-27 08:19:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.473 s
Iteration   2: 7.237 s
Iteration   3: 7.873 s
Iteration   4: 7.446 s
Iteration   5: 7.615 s
Iteration   6: 7.545 s
Iteration   7: 7.521 s
Iteration   8: 7.542 s
Iteration   9: 7.532 s
Iteration  10: 7.542 s
Iteration  11: 7.534 s
Iteration  12: 6.598 s
Iteration  13: 7.519 s
Iteration  14: 7.521 s
Iteration  15: 7.506 s
Iteration  16: 7.522 s
Iteration  17: 7.529 s
Iteration  18: 7.542 s
Iteration  19: 7.247 s
Iteration  20: 7.433 s
Iteration  21: 7.501 s
Iteration  22: 7.538 s
Iteration  23: 7.528 s
Iteration  24: 7.511 s
Iteration  25: 7.476 s
Iteration  26: 7.193 s
Iteration  27: 7.243 s
Iteration  28: 7.569 s
Iteration  29: 7.555 s
Iteration  30: 7.516 s
Iteration  31: 7.583 s
Iteration  32: 7.544 s
Iteration  33: 7.609 s
Iteration  34: 7.530 s
Iteration  35: 7.555 s
Iteration  36: 7.546 s
Iteration  37: 7.540 s
Iteration  38: 7.510 s
Iteration  39: 7.554 s
Iteration  40: 7.564 s
Iteration  41: 7.530 s
Iteration  42: 6.644 s
Iteration  43: 7.544 s
Iteration  44: 7.536 s
Iteration  45: 7.507 s
Iteration  46: 6.899 s
Iteration  47: 7.529 s
Iteration  48: 7.515 s
Iteration  49: 7.533 s
Iteration  50: 7.519 s


Result: 7.464 ?(99.9%) 0.109 s [Average]
  Statistics: (min, avg, max) = (6.598, 7.464, 7.873), stdev = 0.219
  Confidence interval (99.9%): [7.355, 7.573]
  Samples, N = 50
        mean =      7.464 ?(99.9%) 0.109 s
         min =      6.598 s
  p( 0.0000) =      6.598 s
  p(50.0000) =      7.529 s
  p(90.0000) =      7.568 s
  p(95.0000) =      7.612 s
  p(99.0000) =      7.873 s
  p(99.9000) =      7.873 s
  p(99.9900) =      7.873 s
  p(99.9990) =      7.873 s
  p(99.9999) =      7.873 s
         max =      7.873 s


# Run complete. Total time: 00:06:14

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  7.464        0.109      s
{"wallclock_times": [374.38273485099995], "core_cycle_counts": [[154209106866], [534211732737], [146207344429], [250291148535]], "aperf_counts": [[153140674454], [534153046288], [146155317080], [250261259481]], "mperf_counts": [[170341138532], [603154398996], [165857592452], [280185991292]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 08:19:19: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 08:19:20: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 08:19:20: INFO] 110 executions left in scheduler queue
[2019-07-27 08:19:20: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 08:19:20: INFO] Estimated completion (next execution): 2019-07-27 08:28:05 (0:08:44 from now)
[2019-07-27 08:19:20: INFO] Reboot in preparation for next execution
[2019-07-27 08:29:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.315 s
Iteration   2: 7.452 s
Iteration   3: 6.852 s
Iteration   4: 6.934 s
Iteration   5: 6.823 s
Iteration   6: 6.921 s
Iteration   7: 6.947 s
Iteration   8: 6.826 s
Iteration   9: 6.969 s
Iteration  10: 6.948 s
Iteration  11: 6.840 s
Iteration  12: 6.960 s
Iteration  13: 6.979 s
Iteration  14: 6.829 s
Iteration  15: 6.977 s
Iteration  16: 6.828 s
Iteration  17: 6.965 s
Iteration  18: 6.972 s
Iteration  19: 6.833 s
Iteration  20: 6.950 s
Iteration  21: 6.826 s
Iteration  22: 6.960 s
Iteration  23: 6.962 s
Iteration  24: 6.967 s
Iteration  25: 6.820 s
Iteration  26: 6.943 s
Iteration  27: 6.919 s
Iteration  28: 6.927 s
Iteration  29: 6.909 s
Iteration  30: 7.044 s
Iteration  31: 6.906 s
Iteration  32: 6.877 s
Iteration  33: 6.913 s
Iteration  34: 6.943 s
Iteration  35: 6.822 s
Iteration  36: 6.952 s
Iteration  37: 6.978 s
Iteration  38: 6.829 s
Iteration  39: 6.961 s
Iteration  40: 6.831 s
Iteration  41: 6.951 s
Iteration  42: 6.962 s
Iteration  43: 6.828 s
Iteration  44: 6.974 s
Iteration  45: 6.818 s
Iteration  46: 6.940 s
Iteration  47: 6.962 s
Iteration  48: 6.831 s
Iteration  49: 6.937 s
Iteration  50: 6.931 s


Result: 6.931 ?(99.9%) 0.055 s [Average]
  Statistics: (min, avg, max) = (6.818, 6.931, 7.452), stdev = 0.112
  Confidence interval (99.9%): [6.875, 6.986]
  Samples, N = 50
        mean =      6.931 ?(99.9%) 0.055 s
         min =      6.818 s
  p( 0.0000) =      6.818 s
  p(50.0000) =      6.938 s
  p(90.0000) =      6.978 s
  p(95.0000) =      7.166 s
  p(99.0000) =      7.452 s
  p(99.9000) =      7.452 s
  p(99.9900) =      7.452 s
  p(99.9990) =      7.452 s
  p(99.9999) =      7.452 s
         max =      7.452 s


# Run complete. Total time: 00:05:47

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.931        0.055      s
{"wallclock_times": [347.78317638600004], "core_cycle_counts": [[319969016501], [238773382199], [427811415659], [252039990001]], "aperf_counts": [[319110933190], [238677444985], [427764917386], [251989708056]], "mperf_counts": [[319369205738], [238762239024], [427835349212], [252150449602]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 08:29:17: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 08:29:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 08:29:18: INFO] 109 executions left in scheduler queue
[2019-07-27 08:29:18: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 08:29:18: INFO] Estimated completion (next execution): 2019-07-27 08:37:36 (0:08:18 from now)
[2019-07-27 08:29:18: INFO] Reboot in preparation for next execution
[2019-07-27 08:47:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.207 s
Iteration   2: 16.677 s
Iteration   3: 17.455 s
Iteration   4: 16.458 s
Iteration   5: 16.307 s
Iteration   6: 16.370 s
Iteration   7: 16.320 s
Iteration   8: 16.270 s
Iteration   9: 16.305 s
Iteration  10: 16.292 s
Iteration  11: 16.281 s
Iteration  12: 16.283 s
Iteration  13: 16.295 s
Iteration  14: 16.333 s
Iteration  15: 16.360 s
Iteration  16: 16.319 s
Iteration  17: 16.289 s
Iteration  18: 16.568 s
Iteration  19: 16.262 s
Iteration  20: 16.303 s
Iteration  21: 16.344 s
Iteration  22: 16.268 s
Iteration  23: 16.273 s
Iteration  24: 16.354 s
Iteration  25: 16.327 s
Iteration  26: 16.310 s
Iteration  27: 16.322 s
Iteration  28: 16.348 s
Iteration  29: 16.306 s
Iteration  30: 16.286 s
Iteration  31: 16.410 s
Iteration  32: 16.248 s
Iteration  33: 16.266 s
Iteration  34: 16.374 s
Iteration  35: 16.318 s
Iteration  36: 16.364 s
Iteration  37: 16.391 s
Iteration  38: 16.285 s
Iteration  39: 16.228 s
Iteration  40: 16.273 s
Iteration  41: 16.410 s
Iteration  42: 16.297 s
Iteration  43: 16.306 s
Iteration  44: 16.328 s
Iteration  45: 16.273 s
Iteration  46: 16.282 s
Iteration  47: 16.345 s
Iteration  48: 16.276 s
Iteration  49: 16.265 s
Iteration  50: 16.342 s


Result: 16.347 ?(99.9%) 0.088 s [Average]
  Statistics: (min, avg, max) = (16.207, 16.347, 17.455), stdev = 0.178
  Confidence interval (99.9%): [16.259, 16.436]
  Samples, N = 50
        mean =     16.347 ?(99.9%) 0.088 s
         min =     16.207 s
  p( 0.0000) =     16.207 s
  p(50.0000) =     16.306 s
  p(90.0000) =     16.410 s
  p(95.0000) =     16.617 s
  p(99.0000) =     17.455 s
  p(99.9000) =     17.455 s
  p(99.9900) =     17.455 s
  p(99.9990) =     17.455 s
  p(99.9999) =     17.455 s
         max =     17.455 s


# Run complete. Total time: 00:13:38

Benchmark                                                                           (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  16.347        0.088      s
{"wallclock_times": [818.499922295], "core_cycle_counts": [[475249150488], [658969214654], [633047142461], [871169859517]], "aperf_counts": [[473068812745], [658820814292], [632978878939], [871095094247]], "mperf_counts": [[475964966008], [659114308442], [633427390640], [871211667932]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 08:47:05: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot_11.0.4'
[2019-07-27 08:47:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 08:47:06: INFO] 108 executions left in scheduler queue
[2019-07-27 08:47:06: INFO] Next execution is 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-27 08:47:06: INFO] Estimated completion (next execution): 2019-07-27 09:03:15 (0:16:08 from now)
[2019-07-27 08:47:06: INFO] Reboot in preparation for next execution
[2019-07-27 08:51:15: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 08:51:15: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 08:51:15: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 08:51:15: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 08:51:15: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 08:51:15: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 08:52:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.831 s/op
Iteration   2: 2.229 s/op
Iteration   3: 2.106 s/op
Iteration   4: 2.102 s/op
Iteration   5: 2.109 s/op
Iteration   6: 2.002 s/op
Iteration   7: 1.980 s/op
Iteration   8: 1.987 s/op
Iteration   9: 1.958 s/op
Iteration  10: 1.992 s/op
Iteration  11: 1.963 s/op
Iteration  12: 1.975 s/op
Iteration  13: 1.974 s/op
Iteration  14: 1.955 s/op
Iteration  15: 1.966 s/op
Iteration  16: 1.976 s/op
Iteration  17: 2.002 s/op
Iteration  18: 1.994 s/op
Iteration  19: 1.976 s/op
Iteration  20: 1.953 s/op
Iteration  21: 1.951 s/op
Iteration  22: 1.944 s/op
Iteration  23: 1.973 s/op
Iteration  24: 1.978 s/op
Iteration  25: 1.963 s/op
Iteration  26: 1.970 s/op
Iteration  27: 1.966 s/op
Iteration  28: 1.958 s/op
Iteration  29: 1.977 s/op
Iteration  30: 1.982 s/op
Iteration  31: 1.952 s/op
Iteration  32: 1.988 s/op
Iteration  33: 1.990 s/op
Iteration  34: 1.993 s/op
Iteration  35: 1.977 s/op
Iteration  36: 1.964 s/op
Iteration  37: 1.953 s/op
Iteration  38: 1.988 s/op
Iteration  39: 1.968 s/op
Iteration  40: 1.996 s/op
Iteration  41: 2.017 s/op
Iteration  42: 1.998 s/op
Iteration  43: 1.983 s/op
Iteration  44: 2.007 s/op
Iteration  45: 1.995 s/op
Iteration  46: 1.979 s/op
Iteration  47: 2.010 s/op
Iteration  48: 1.990 s/op
Iteration  49: 1.977 s/op
Iteration  50: 2.017 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      2.009 ?(99.9%) 0.064 s/op

  Histogram, s/op:
    [1.900, 2.000) = 39 
    [2.000, 2.100) = 6 
    [2.100, 2.200) = 3 
    [2.200, 2.300) = 1 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.944 s/op
     p(50.0000) =      1.980 s/op
     p(90.0000) =      2.093 s/op
     p(95.0000) =      2.163 s/op
     p(99.0000) =      2.831 s/op
     p(99.9000) =      2.831 s/op
     p(99.9900) =      2.831 s/op
     p(99.9990) =      2.831 s/op
     p(99.9999) =      2.831 s/op
    p(100.0000) =      2.831 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.009 ? 0.064   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_sort_1564210275203.json
{"wallclock_times": [102.03812973500001], "core_cycle_counts": [[133091987484], [65574647860], [99610832296], [57555681088]], "aperf_counts": [[132790989180], [65497968960], [99551967466], [57469708235]], "mperf_counts": [[132791952720], [65497993698], [99552410288], [57473075782]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 08:52:57: INFO] Finished 'boa_switch_sort(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-27 08:52:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 08:52:58: INFO] 107 executions left in scheduler queue
[2019-07-27 08:52:58: INFO] Next execution is 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-27 08:52:58: INFO] Estimated completion (next execution): 2019-07-27 08:57:10 (0:04:12 from now)
[2019-07-27 08:52:58: INFO] Reboot in preparation for next execution
[2019-07-27 08:57:11: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 08:57:11: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 08:57:11: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 08:57:11: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 08:57:11: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 08:57:11: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 08:59:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.832 s/op
Iteration   2: 3.588 s/op
Iteration   3: 3.331 s/op
Iteration   4: 3.102 s/op
Iteration   5: 3.217 s/op
Iteration   6: 3.100 s/op
Iteration   7: 3.187 s/op
Iteration   8: 3.120 s/op
Iteration   9: 3.152 s/op
Iteration  10: 3.174 s/op
Iteration  11: 3.152 s/op
Iteration  12: 3.140 s/op
Iteration  13: 3.137 s/op
Iteration  14: 3.134 s/op
Iteration  15: 3.135 s/op
Iteration  16: 3.131 s/op
Iteration  17: 3.169 s/op
Iteration  18: 3.174 s/op
Iteration  19: 3.136 s/op
Iteration  20: 3.136 s/op
Iteration  21: 3.130 s/op
Iteration  22: 3.096 s/op
Iteration  23: 3.165 s/op
Iteration  24: 3.132 s/op
Iteration  25: 3.154 s/op
Iteration  26: 3.129 s/op
Iteration  27: 3.116 s/op
Iteration  28: 3.143 s/op
Iteration  29: 3.142 s/op
Iteration  30: 3.130 s/op
Iteration  31: 3.126 s/op
Iteration  32: 3.147 s/op
Iteration  33: 3.150 s/op
Iteration  34: 3.140 s/op
Iteration  35: 3.096 s/op
Iteration  36: 3.148 s/op
Iteration  37: 3.139 s/op
Iteration  38: 3.175 s/op
Iteration  39: 3.146 s/op
Iteration  40: 3.140 s/op
Iteration  41: 3.156 s/op
Iteration  42: 3.144 s/op
Iteration  43: 3.132 s/op
Iteration  44: 3.174 s/op
Iteration  45: 3.155 s/op
Iteration  46: 3.122 s/op
Iteration  47: 3.145 s/op
Iteration  48: 3.094 s/op
Iteration  49: 3.125 s/op
Iteration  50: 3.083 s/op


Result "fr.mleduc.boa.BoaSwitchBenchmark.boaInterpreter":
  N = 50
  mean =      3.166 ?(99.9%) 0.060 s/op

  Histogram, s/op:
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 5 
    [3.100, 3.150) = 29 
    [3.150, 3.200) = 12 
    [3.200, 3.250) = 1 
    [3.250, 3.300) = 0 
    [3.300, 3.350) = 1 
    [3.350, 3.400) = 0 
    [3.400, 3.450) = 0 
    [3.450, 3.500) = 0 
    [3.500, 3.550) = 0 
    [3.550, 3.600) = 1 
    [3.600, 3.650) = 0 
    [3.650, 3.700) = 0 
    [3.700, 3.750) = 0 
    [3.750, 3.800) = 0 
    [3.800, 3.850) = 1 
    [3.850, 3.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.083 s/op
     p(50.0000) =      3.140 s/op
     p(90.0000) =      3.186 s/op
     p(95.0000) =      3.446 s/op
     p(99.0000) =      3.832 s/op
     p(99.9000) =      3.832 s/op
     p(99.9900) =      3.832 s/op
     p(99.9990) =      3.832 s/op
     p(99.9999) =      3.832 s/op
    p(100.0000) =      3.832 s/op


# Run complete. Total time: 00:02:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaSwitchBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  3.166 ? 0.060   s/op

Benchmark result is saved to /home/benchmarks/results/boa_switch_fibonacci_1564210631070.json
{"wallclock_times": [159.80942003099997], "core_cycle_counts": [[153720384068], [131677316208], [137398012760], [119563511881]], "aperf_counts": [[153296649788], [131607742734], [137334484120], [119500040100]], "mperf_counts": [[153302008670], [131608760820], [137334483118], [119500042704]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 08:59:50: INFO] Finished 'boa_switch_fibonacci(50)' (default-java variant) under 'boa_switch_openj9_11.0.4'
[2019-07-27 08:59:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 08:59:51: INFO] 106 executions left in scheduler queue
[2019-07-27 08:59:51: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 08:59:51: INFO] Estimated completion (next execution): 2019-07-27 09:05:02 (0:05:10 from now)
[2019-07-27 08:59:51: INFO] Reboot in preparation for next execution
[2019-07-27 09:06:33: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.358 s
Iteration   2: 3.193 s
Iteration   3: 3.022 s
Iteration   4: 3.028 s
Iteration   5: 3.016 s
Iteration   6: 3.039 s
Iteration   7: 3.020 s
Iteration   8: 3.033 s
Iteration   9: 3.028 s
Iteration  10: 3.021 s
Iteration  11: 3.031 s
Iteration  12: 3.019 s
Iteration  13: 3.017 s
Iteration  14: 3.031 s
Iteration  15: 3.024 s
Iteration  16: 3.021 s
Iteration  17: 3.034 s
Iteration  18: 3.022 s
Iteration  19: 3.038 s
Iteration  20: 3.032 s
Iteration  21: 3.029 s
Iteration  22: 3.033 s
Iteration  23: 3.019 s
Iteration  24: 3.028 s
Iteration  25: 3.022 s
Iteration  26: 3.025 s
Iteration  27: 3.020 s
Iteration  28: 3.032 s
Iteration  29: 3.033 s
Iteration  30: 3.019 s
Iteration  31: 3.024 s
Iteration  32: 3.030 s
Iteration  33: 3.020 s
Iteration  34: 3.031 s
Iteration  35: 3.012 s
Iteration  36: 3.023 s
Iteration  37: 3.028 s
Iteration  38: 3.039 s
Iteration  39: 3.018 s
Iteration  40: 3.040 s
Iteration  41: 3.041 s
Iteration  42: 3.047 s
Iteration  43: 3.023 s
Iteration  44: 3.027 s
Iteration  45: 3.031 s
Iteration  46: 3.020 s
Iteration  47: 3.027 s
Iteration  48: 3.030 s
Iteration  49: 3.010 s
Iteration  50: 3.030 s


Result: 3.037 ?(99.9%) 0.026 s [Average]
  Statistics: (min, avg, max) = (3.010, 3.037, 3.358), stdev = 0.053
  Confidence interval (99.9%): [3.011, 3.063]
  Samples, N = 50
        mean =      3.037 ?(99.9%) 0.026 s
         min =      3.010 s
  p( 0.0000) =      3.010 s
  p(50.0000) =      3.028 s
  p(90.0000) =      3.040 s
  p(95.0000) =      3.112 s
  p(99.0000) =      3.358 s
  p(99.9000) =      3.358 s
  p(99.9900) =      3.358 s
  p(99.9990) =      3.358 s
  p(99.9999) =      3.358 s
         max =      3.358 s


# Run complete. Total time: 00:02:32

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  3.037        0.026      s
{"wallclock_times": [152.890406043], "core_cycle_counts": [[120294904805], [150443507058], [132823404165], [100978538949]], "aperf_counts": [[119924236435], [150407499749], [132799964783], [100956723614]], "mperf_counts": [[119944070076], [150422015922], [132801402814], [100961481594]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 09:06:33: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 09:06:34: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 09:06:34: INFO] 105 executions left in scheduler queue
[2019-07-27 09:06:34: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 09:06:34: INFO] Estimated completion (next execution): 2019-07-27 09:11:37 (0:05:03 from now)
[2019-07-27 09:06:34: INFO] Reboot in preparation for next execution
[2019-07-27 09:17:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.215 s
Iteration   2: 8.113 s
Iteration   3: 7.959 s
Iteration   4: 7.988 s
Iteration   5: 7.985 s
Iteration   6: 8.019 s
Iteration   7: 8.016 s
Iteration   8: 7.988 s
Iteration   9: 8.003 s
Iteration  10: 7.951 s
Iteration  11: 8.002 s
Iteration  12: 7.998 s
Iteration  13: 7.989 s
Iteration  14: 7.996 s
Iteration  15: 8.007 s
Iteration  16: 8.009 s
Iteration  17: 8.030 s
Iteration  18: 8.032 s
Iteration  19: 8.022 s
Iteration  20: 8.054 s
Iteration  21: 8.052 s
Iteration  22: 8.057 s
Iteration  23: 8.022 s
Iteration  24: 8.012 s
Iteration  25: 8.029 s
Iteration  26: 8.031 s
Iteration  27: 8.009 s
Iteration  28: 8.036 s
Iteration  29: 7.994 s
Iteration  30: 8.009 s
Iteration  31: 8.029 s
Iteration  32: 8.034 s
Iteration  33: 8.027 s
Iteration  34: 7.995 s
Iteration  35: 8.047 s
Iteration  36: 8.004 s
Iteration  37: 7.984 s
Iteration  38: 8.028 s
Iteration  39: 8.015 s
Iteration  40: 8.020 s
Iteration  41: 8.010 s
Iteration  42: 8.021 s
Iteration  43: 8.026 s
Iteration  44: 8.031 s
Iteration  45: 8.040 s
Iteration  46: 8.021 s
Iteration  47: 8.021 s
Iteration  48: 7.995 s
Iteration  49: 8.006 s
Iteration  50: 8.038 s


Result: 8.020 ?(99.9%) 0.019 s [Average]
  Statistics: (min, avg, max) = (7.951, 8.020, 8.215), stdev = 0.038
  Confidence interval (99.9%): [8.002, 8.039]
  Samples, N = 50
        mean =      8.020 ?(99.9%) 0.019 s
         min =      7.951 s
  p( 0.0000) =      7.951 s
  p(50.0000) =      8.019 s
  p(90.0000) =      8.051 s
  p(95.0000) =      8.082 s
  p(99.0000) =      8.215 s
  p(99.9000) =      8.215 s
  p(99.9900) =      8.215 s
  p(99.9990) =      8.215 s
  p(99.9999) =      8.215 s
         max =      8.215 s


# Run complete. Total time: 00:06:41

Benchmark                                                                                  (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  8.020        0.019      s
{"wallclock_times": [401.976758046], "core_cycle_counts": [[467815910737], [421774167741], [206258901105], [198460730445]], "aperf_counts": [[467035028761], [421697732329], [206215176396], [198430062871]], "mperf_counts": [[467051951052], [421703083600], [206221115684], [198449971672]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 09:17:25: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 09:17:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 09:17:26: INFO] 104 executions left in scheduler queue
[2019-07-27 09:17:26: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 09:17:26: INFO] Estimated completion (next execution): 2019-07-27 09:26:38 (0:09:12 from now)
[2019-07-27 09:17:26: INFO] Reboot in preparation for next execution
[2019-07-27 09:24:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.303 s
Iteration   2: 3.720 s
Iteration   3: 3.715 s
Iteration   4: 3.696 s
Iteration   5: 3.709 s
Iteration   6: 3.759 s
Iteration   7: 3.690 s
Iteration   8: 3.727 s
Iteration   9: 3.671 s
Iteration  10: 3.737 s
Iteration  11: 3.676 s
Iteration  12: 3.742 s
Iteration  13: 3.667 s
Iteration  14: 3.678 s
Iteration  15: 3.731 s
Iteration  16: 3.690 s
Iteration  17: 3.680 s
Iteration  18: 3.725 s
Iteration  19: 3.679 s
Iteration  20: 3.730 s
Iteration  21: 3.685 s
Iteration  22: 3.683 s
Iteration  23: 3.734 s
Iteration  24: 3.665 s
Iteration  25: 3.681 s
Iteration  26: 3.737 s
Iteration  27: 3.692 s
Iteration  28: 3.747 s
Iteration  29: 3.678 s
Iteration  30: 3.681 s
Iteration  31: 3.747 s
Iteration  32: 3.686 s
Iteration  33: 3.686 s
Iteration  34: 3.737 s
Iteration  35: 3.681 s
Iteration  36: 3.685 s
Iteration  37: 3.735 s
Iteration  38: 3.665 s
Iteration  39: 3.689 s
Iteration  40: 3.746 s
Iteration  41: 3.689 s
Iteration  42: 3.740 s
Iteration  43: 3.687 s
Iteration  44: 3.691 s
Iteration  45: 3.732 s
Iteration  46: 3.691 s
Iteration  47: 3.681 s
Iteration  48: 3.745 s
Iteration  49: 3.677 s
Iteration  50: 3.761 s


Result: 3.717 ?(99.9%) 0.044 s [Average]
  Statistics: (min, avg, max) = (3.665, 3.717, 4.303), stdev = 0.089
  Confidence interval (99.9%): [3.673, 3.761]
  Samples, N = 50
        mean =      3.717 ?(99.9%) 0.044 s
         min =      3.665 s
  p( 0.0000) =      3.665 s
  p(50.0000) =      3.691 s
  p(90.0000) =      3.747 s
  p(95.0000) =      3.760 s
  p(99.0000) =      4.303 s
  p(99.9000) =      4.303 s
  p(99.9900) =      4.303 s
  p(99.9990) =      4.303 s
  p(99.9999) =      4.303 s
         max =      4.303 s


# Run complete. Total time: 00:03:06

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  3.717        0.044      s
{"wallclock_times": [187.00135987], "core_cycle_counts": [[186804683120], [181392762317], [156854595389], [148438167664]], "aperf_counts": [[186335966448], [181327691380], [156810919373], [148395591125]], "mperf_counts": [[186347919164], [181342141478], [156811988468], [148398393932]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 09:24:42: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 09:24:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 09:24:43: INFO] 103 executions left in scheduler queue
[2019-07-27 09:24:43: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 09:24:43: INFO] Estimated completion (next execution): 2019-07-27 09:30:20 (0:05:37 from now)
[2019-07-27 09:24:43: INFO] Reboot in preparation for next execution
[2019-07-27 09:34:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.153 s
Iteration   2: 7.105 s
Iteration   3: 7.022 s
Iteration   4: 7.045 s
Iteration   5: 7.097 s
Iteration   6: 7.044 s
Iteration   7: 7.027 s
Iteration   8: 7.064 s
Iteration   9: 7.056 s
Iteration  10: 7.029 s
Iteration  11: 7.079 s
Iteration  12: 7.037 s
Iteration  13: 7.068 s
Iteration  14: 7.043 s
Iteration  15: 7.088 s
Iteration  16: 7.072 s
Iteration  17: 7.072 s
Iteration  18: 7.038 s
Iteration  19: 7.075 s
Iteration  20: 7.062 s
Iteration  21: 7.092 s
Iteration  22: 7.095 s
Iteration  23: 7.038 s
Iteration  24: 7.110 s
Iteration  25: 7.089 s
Iteration  26: 7.095 s
Iteration  27: 7.096 s
Iteration  28: 7.091 s
Iteration  29: 7.040 s
Iteration  30: 7.043 s
Iteration  31: 7.029 s
Iteration  32: 7.060 s
Iteration  33: 7.009 s
Iteration  34: 7.087 s
Iteration  35: 7.061 s
Iteration  36: 7.122 s
Iteration  37: 7.049 s
Iteration  38: 7.074 s
Iteration  39: 7.080 s
Iteration  40: 7.056 s
Iteration  41: 7.058 s
Iteration  42: 7.049 s
Iteration  43: 7.064 s
Iteration  44: 7.067 s
Iteration  45: 7.041 s
Iteration  46: 7.064 s
Iteration  47: 7.094 s
Iteration  48: 7.057 s
Iteration  49: 7.026 s
Iteration  50: 7.054 s


Result: 7.065 ?(99.9%) 0.014 s [Average]
  Statistics: (min, avg, max) = (7.009, 7.065, 7.153), stdev = 0.028
  Confidence interval (99.9%): [7.051, 7.079]
  Samples, N = 50
        mean =      7.065 ?(99.9%) 0.014 s
         min =      7.009 s
  p( 0.0000) =      7.009 s
  p(50.0000) =      7.063 s
  p(90.0000) =      7.097 s
  p(95.0000) =      7.115 s
  p(99.0000) =      7.153 s
  p(99.9000) =      7.153 s
  p(99.9900) =      7.153 s
  p(99.9990) =      7.153 s
  p(99.9999) =      7.153 s
         max =      7.153 s


# Run complete. Total time: 00:05:54

Benchmark                                                                             (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  7.065        0.014      s
{"wallclock_times": [354.319275151], "core_cycle_counts": [[423656239233], [216936109124], [270954447527], [231308628155]], "aperf_counts": [[422962148791], [216846817213], [270918977072], [231275153824]], "mperf_counts": [[422982004132], [216849713742], [270924175514], [231285711202]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 09:34:46: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_graalvm-ee-19.1.1'
[2019-07-27 09:34:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 09:34:47: INFO] 102 executions left in scheduler queue
[2019-07-27 09:34:47: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 09:34:47: INFO] Estimated completion (next execution): 2019-07-27 09:43:12 (0:08:24 from now)
[2019-07-27 09:34:47: INFO] Reboot in preparation for next execution
[2019-07-27 09:38:57: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 09:45:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.943 s
Iteration   2: 7.867 s
Iteration   3: 7.854 s
Iteration   4: 7.584 s
Iteration   5: 7.589 s
Iteration   6: 7.584 s
Iteration   7: 7.619 s
Iteration   8: 7.558 s
Iteration   9: 7.589 s
Iteration  10: 7.660 s
Iteration  11: 7.666 s
Iteration  12: 7.535 s
Iteration  13: 7.494 s
Iteration  14: 7.551 s
Iteration  15: 7.521 s
Iteration  16: 7.507 s
Iteration  17: 7.584 s
Iteration  18: 7.556 s
Iteration  19: 7.462 s
Iteration  20: 7.566 s
Iteration  21: 7.483 s
Iteration  22: 7.548 s
Iteration  23: 7.500 s
Iteration  24: 7.463 s
Iteration  25: 7.478 s
Iteration  26: 7.472 s
Iteration  27: 7.462 s
Iteration  28: 7.465 s
Iteration  29: 7.485 s
Iteration  30: 7.344 s
Iteration  31: 7.468 s
Iteration  32: 7.496 s
Iteration  33: 7.449 s
Iteration  34: 7.487 s
Iteration  35: 7.490 s
Iteration  36: 7.472 s
Iteration  37: 7.452 s
Iteration  38: 7.423 s
Iteration  39: 7.354 s
Iteration  40: 7.418 s
Iteration  41: 7.360 s
Iteration  42: 7.408 s
Iteration  43: 7.396 s
Iteration  44: 7.436 s
Iteration  45: 7.426 s
Iteration  46: 7.421 s
Iteration  47: 7.441 s
Iteration  48: 7.428 s
Iteration  49: 7.478 s
Iteration  50: 7.452 s


Result: 7.535 ?(99.9%) 0.113 s [Average]
  Statistics: (min, avg, max) = (7.344, 7.535, 8.943), stdev = 0.228
  Confidence interval (99.9%): [7.422, 7.648]
  Samples, N = 50
        mean =      7.535 ?(99.9%) 0.113 s
         min =      7.344 s
  p( 0.0000) =      7.344 s
  p(50.0000) =      7.484 s
  p(90.0000) =      7.656 s
  p(95.0000) =      7.860 s
  p(99.0000) =      8.943 s
  p(99.9000) =      8.943 s
  p(99.9900) =      8.943 s
  p(99.9990) =      8.943 s
  p(99.9999) =      8.943 s
         max =      8.943 s


# Run complete. Total time: 00:06:17

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  7.535        0.113      s
{"wallclock_times": [377.9749376010001], "core_cycle_counts": [[448109622636], [160741268131], [301641296910], [356127705943]], "aperf_counts": [[447262453764], [160609199036], [301500339930], [356068645563]], "mperf_counts": [[447264891310], [160609305934], [301500290316], [356068634984]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 09:45:15: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 09:45:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 09:45:16: INFO] 101 executions left in scheduler queue
[2019-07-27 09:45:16: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 09:45:16: INFO] Estimated completion (next execution): 2019-07-27 09:54:04 (0:08:48 from now)
[2019-07-27 09:45:16: INFO] Reboot in preparation for next execution
[2019-07-27 09:49:39: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 09:54:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.626 s
Iteration   2: 7.711 s
Iteration   3: 7.510 s
Iteration   4: 6.375 s
Iteration   5: 6.065 s
Iteration   6: 5.831 s
Iteration   7: 5.710 s
Iteration   8: 5.624 s
Iteration   9: 5.693 s
Iteration  10: 5.718 s
Iteration  11: 5.785 s
Iteration  12: 5.658 s
Iteration  13: 5.679 s
Iteration  14: 5.637 s
Iteration  15: 5.738 s
Iteration  16: 5.677 s
Iteration  17: 5.704 s
Iteration  18: 5.752 s
Iteration  19: 5.691 s
Iteration  20: 5.606 s
Iteration  21: 5.575 s
Iteration  22: 5.677 s
Iteration  23: 5.718 s
Iteration  24: 5.686 s
Iteration  25: 5.778 s
Iteration  26: 5.636 s
Iteration  27: 5.615 s
Iteration  28: 5.654 s
Iteration  29: 5.761 s
Iteration  30: 5.726 s
Iteration  31: 5.679 s
Iteration  32: 5.708 s
Iteration  33: 5.668 s
Iteration  34: 5.638 s
Iteration  35: 5.619 s
Iteration  36: 5.705 s
Iteration  37: 5.708 s
Iteration  38: 5.673 s
Iteration  39: 5.702 s
Iteration  40: 5.659 s
Iteration  41: 5.603 s
Iteration  42: 5.582 s
Iteration  43: 5.700 s
Iteration  44: 5.735 s
Iteration  45: 5.670 s
Iteration  46: 5.622 s
Iteration  47: 5.651 s
Iteration  48: 5.620 s
Iteration  49: 5.734 s
Iteration  50: 5.726 s


Result: 5.820 ?(99.9%) 0.235 s [Average]
  Statistics: (min, avg, max) = (5.575, 5.820, 7.711), stdev = 0.475
  Confidence interval (99.9%): [5.585, 6.055]
  Samples, N = 50
        mean =      5.820 ?(99.9%) 0.235 s
         min =      5.575 s
  p( 0.0000) =      5.575 s
  p(50.0000) =      5.692 s
  p(90.0000) =      6.042 s
  p(95.0000) =      7.562 s
  p(99.0000) =      7.711 s
  p(99.9000) =      7.711 s
  p(99.9900) =      7.711 s
  p(99.9990) =      7.711 s
  p(99.9999) =      7.711 s
         max =      7.711 s


# Run complete. Total time: 00:04:52

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  5.820        0.235      s
{"wallclock_times": [292.509743062], "core_cycle_counts": [[341733548553], [386174434753], [98306796122], [220110920388]], "aperf_counts": [[341066431569], [386056030292], [98142513390], [220047207932]], "mperf_counts": [[341066875282], [386056819838], [98142484576], [220048160658]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 09:54:32: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 09:54:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 09:54:32: INFO] 100 executions left in scheduler queue
[2019-07-27 09:54:32: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 09:54:32: INFO] Estimated completion (next execution): 2019-07-27 10:01:55 (0:07:22 from now)
[2019-07-27 09:54:32: INFO] Reboot in preparation for next execution
[2019-07-27 09:58:41: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 10:03:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.881 s
Iteration   2: 5.876 s
Iteration   3: 5.510 s
Iteration   4: 5.585 s
Iteration   5: 5.600 s
Iteration   6: 5.567 s
Iteration   7: 5.926 s
Iteration   8: 5.407 s
Iteration   9: 5.397 s
Iteration  10: 5.386 s
Iteration  11: 5.380 s
Iteration  12: 5.378 s
Iteration  13: 5.355 s
Iteration  14: 5.398 s
Iteration  15: 5.371 s
Iteration  16: 5.392 s
Iteration  17: 5.394 s
Iteration  18: 5.393 s
Iteration  19: 5.403 s
Iteration  20: 5.349 s
Iteration  21: 5.374 s
Iteration  22: 5.422 s
Iteration  23: 5.392 s
Iteration  24: 5.415 s
Iteration  25: 5.377 s
Iteration  26: 5.374 s
Iteration  27: 5.385 s
Iteration  28: 5.423 s
Iteration  29: 5.408 s
Iteration  30: 5.392 s
Iteration  31: 5.439 s
Iteration  32: 5.406 s
Iteration  33: 5.382 s
Iteration  34: 5.403 s
Iteration  35: 5.368 s
Iteration  36: 5.409 s
Iteration  37: 5.423 s
Iteration  38: 5.394 s
Iteration  39: 5.397 s
Iteration  40: 5.396 s
Iteration  41: 5.372 s
Iteration  42: 5.347 s
Iteration  43: 5.384 s
Iteration  44: 5.348 s
Iteration  45: 5.398 s
Iteration  46: 5.401 s
Iteration  47: 5.373 s
Iteration  48: 5.376 s
Iteration  49: 5.367 s
Iteration  50: 5.314 s


Result: 5.452 ?(99.9%) 0.116 s [Average]
  Statistics: (min, avg, max) = (5.314, 5.452, 6.881), stdev = 0.235
  Confidence interval (99.9%): [5.336, 5.568]
  Samples, N = 50
        mean =      5.452 ?(99.9%) 0.116 s
         min =      5.314 s
  p( 0.0000) =      5.314 s
  p(50.0000) =      5.394 s
  p(90.0000) =      5.583 s
  p(95.0000) =      5.898 s
  p(99.0000) =      6.881 s
  p(99.9000) =      6.881 s
  p(99.9900) =      6.881 s
  p(99.9990) =      6.881 s
  p(99.9999) =      6.881 s
         max =      6.881 s


# Run complete. Total time: 00:04:34

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  5.452        0.116      s
{"wallclock_times": [274.153322934], "core_cycle_counts": [[296745656312], [310214969975], [248829826715], [210807717878]], "aperf_counts": [[296000894687], [310086946583], [248678484384], [210685568812]], "mperf_counts": [[296001322140], [310086928412], [248679202072], [210685556308]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 10:03:15: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 10:03:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 10:03:16: INFO] 99 executions left in scheduler queue
[2019-07-27 10:03:16: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 10:03:16: INFO] Estimated completion (next execution): 2019-07-27 10:10:20 (0:07:04 from now)
[2019-07-27 10:03:16: INFO] Reboot in preparation for next execution
[2019-07-27 10:07:24: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 10:15:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.262 s
Iteration   2: 10.540 s
Iteration   3: 10.397 s
Iteration   4: 10.129 s
Iteration   5: 10.152 s
Iteration   6: 10.109 s
Iteration   7: 10.225 s
Iteration   8: 10.201 s
Iteration   9: 10.105 s
Iteration  10: 10.094 s
Iteration  11: 10.264 s
Iteration  12: 10.129 s
Iteration  13: 10.117 s
Iteration  14: 10.244 s
Iteration  15: 10.074 s
Iteration  16: 10.268 s
Iteration  17: 10.226 s
Iteration  18: 10.110 s
Iteration  19: 10.201 s
Iteration  20: 10.199 s
Iteration  21: 10.184 s
Iteration  22: 10.174 s
Iteration  23: 10.215 s
Iteration  24: 10.244 s
Iteration  25: 10.138 s
Iteration  26: 10.217 s
Iteration  27: 10.094 s
Iteration  28: 10.217 s
Iteration  29: 10.239 s
Iteration  30: 10.117 s
Iteration  31: 10.113 s
Iteration  32: 10.226 s
Iteration  33: 10.147 s
Iteration  34: 10.202 s
Iteration  35: 10.240 s
Iteration  36: 10.140 s
Iteration  37: 10.183 s
Iteration  38: 10.243 s
Iteration  39: 10.197 s
Iteration  40: 10.240 s
Iteration  41: 10.242 s
Iteration  42: 10.232 s
Iteration  43: 10.221 s
Iteration  44: 10.128 s
Iteration  45: 10.153 s
Iteration  46: 10.307 s
Iteration  47: 10.193 s
Iteration  48: 10.118 s
Iteration  49: 10.237 s
Iteration  50: 10.202 s


Result: 10.237 ?(99.9%) 0.150 s [Average]
  Statistics: (min, avg, max) = (10.074, 10.237, 12.262), stdev = 0.303
  Confidence interval (99.9%): [10.087, 10.387]
  Samples, N = 50
        mean =     10.237 ?(99.9%) 0.150 s
         min =     10.074 s
  p( 0.0000) =     10.074 s
  p(50.0000) =     10.201 s
  p(90.0000) =     10.268 s
  p(95.0000) =     10.461 s
  p(99.0000) =     12.262 s
  p(99.9000) =     12.262 s
  p(99.9900) =     12.262 s
  p(99.9990) =     12.262 s
  p(99.9999) =     12.262 s
         max =     12.262 s


# Run complete. Total time: 00:08:33

Benchmark                                                                           (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  10.237        0.150      s
{"wallclock_times": [513.257532598], "core_cycle_counts": [[350211135059], [515218774747], [398572257397], [446692414015]], "aperf_counts": [[348789781157], [515076198292], [398446457088], [446609821765]], "mperf_counts": [[348797886826], [515077335840], [398446609950], [446609964166]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 10:15:57: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_openj9-8u222-b10'
[2019-07-27 10:15:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 10:15:58: INFO] 98 executions left in scheduler queue
[2019-07-27 10:15:58: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-27 10:15:58: INFO] Estimated completion (next execution): 2019-07-27 10:27:02 (0:11:03 from now)
[2019-07-27 10:15:58: INFO] Reboot in preparation for next execution
[2019-07-27 10:20:07: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 10:20:07: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 10:20:07: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 10:20:07: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 10:20:07: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 10:21:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.076 s/op
Iteration   2: 2.491 s/op
Iteration   3: 1.901 s/op
Iteration   4: 1.861 s/op
Iteration   5: 1.880 s/op
Iteration   6: 1.978 s/op
Iteration   7: 2.002 s/op
Iteration   8: 1.989 s/op
Iteration   9: 1.879 s/op
Iteration  10: 2.001 s/op
Iteration  11: 2.014 s/op
Iteration  12: 1.982 s/op
Iteration  13: 1.875 s/op
Iteration  14: 1.977 s/op
Iteration  15: 1.988 s/op
Iteration  16: 1.982 s/op
Iteration  17: 1.968 s/op
Iteration  18: 2.002 s/op
Iteration  19: 1.983 s/op
Iteration  20: 1.980 s/op
Iteration  21: 1.960 s/op
Iteration  22: 1.961 s/op
Iteration  23: 1.998 s/op
Iteration  24: 1.982 s/op
Iteration  25: 1.840 s/op
Iteration  26: 1.948 s/op
Iteration  27: 1.983 s/op
Iteration  28: 1.979 s/op
Iteration  29: 1.840 s/op
Iteration  30: 1.945 s/op
Iteration  31: 1.997 s/op
Iteration  32: 1.980 s/op
Iteration  33: 1.980 s/op
Iteration  34: 1.948 s/op
Iteration  35: 1.997 s/op
Iteration  36: 1.983 s/op
Iteration  37: 1.844 s/op
Iteration  38: 1.955 s/op
Iteration  39: 1.985 s/op
Iteration  40: 1.982 s/op
Iteration  41: 1.841 s/op
Iteration  42: 1.946 s/op
Iteration  43: 1.983 s/op
Iteration  44: 1.978 s/op
Iteration  45: 1.838 s/op
Iteration  46: 1.945 s/op
Iteration  47: 1.984 s/op
Iteration  48: 1.987 s/op
Iteration  49: 1.980 s/op
Iteration  50: 1.943 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.966 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [1.800, 1.850) = 5 
    [1.850, 1.900) = 4 
    [1.900, 1.950) = 7 
    [1.950, 2.000) = 28 
    [2.000, 2.050) = 4 
    [2.050, 2.100) = 1 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.838 s/op
     p(50.0000) =      1.980 s/op
     p(90.0000) =      2.002 s/op
     p(95.0000) =      2.042 s/op
     p(99.0000) =      2.491 s/op
     p(99.9000) =      2.491 s/op
     p(99.9900) =      2.491 s/op
     p(99.9990) =      2.491 s/op
     p(99.9999) =      2.491 s/op
    p(100.0000) =      2.491 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.966 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564215607493.json
{"wallclock_times": [99.37307139000004], "core_cycle_counts": [[21859732772], [17791237053], [89354824352], [172754200380]], "aperf_counts": [[21483577151], [17764984612], [89334361368], [172741855229]], "mperf_counts": [[23846405886], [18941739928], [99865770972], [193157888940]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 10:21:46: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-27 10:21:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 10:21:47: INFO] 97 executions left in scheduler queue
[2019-07-27 10:21:47: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-27 10:21:47: INFO] Estimated completion (next execution): 2019-07-27 10:25:57 (0:04:09 from now)
[2019-07-27 10:21:47: INFO] Reboot in preparation for next execution
[2019-07-27 10:25:56: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 10:25:56: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 10:25:56: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 10:25:56: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 10:25:56: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 10:27:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.185 s/op
Iteration   2: 2.423 s/op
Iteration   3: 2.367 s/op
Iteration   4: 2.369 s/op
Iteration   5: 2.656 s/op
Iteration   6: 2.313 s/op
Iteration   7: 2.293 s/op
Iteration   8: 2.294 s/op
Iteration   9: 2.292 s/op
Iteration  10: 2.292 s/op
Iteration  11: 2.292 s/op
Iteration  12: 2.294 s/op
Iteration  13: 2.293 s/op
Iteration  14: 2.295 s/op
Iteration  15: 2.292 s/op
Iteration  16: 2.295 s/op
Iteration  17: 2.288 s/op
Iteration  18: 2.290 s/op
Iteration  19: 2.290 s/op
Iteration  20: 2.291 s/op
Iteration  21: 2.292 s/op
Iteration  22: 2.289 s/op
Iteration  23: 2.291 s/op
Iteration  24: 2.290 s/op
Iteration  25: 2.290 s/op
Iteration  26: 2.291 s/op
Iteration  27: 2.292 s/op
Iteration  28: 2.287 s/op
Iteration  29: 2.288 s/op
Iteration  30: 2.289 s/op
Iteration  31: 2.290 s/op
Iteration  32: 2.289 s/op
Iteration  33: 2.292 s/op
Iteration  34: 2.293 s/op
Iteration  35: 2.290 s/op
Iteration  36: 2.292 s/op
Iteration  37: 2.287 s/op
Iteration  38: 2.294 s/op
Iteration  39: 2.290 s/op
Iteration  40: 2.291 s/op
Iteration  41: 2.290 s/op
Iteration  42: 2.289 s/op
Iteration  43: 2.289 s/op
Iteration  44: 2.289 s/op
Iteration  45: 2.292 s/op
Iteration  46: 2.295 s/op
Iteration  47: 2.288 s/op
Iteration  48: 2.290 s/op
Iteration  49: 2.293 s/op
Iteration  50: 2.290 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.302 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 1 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 44 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 2 
    [2.400, 2.450) = 1 
    [2.450, 2.500) = 0 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 0 
    [2.650, 2.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.185 s/op
     p(50.0000) =      2.291 s/op
     p(90.0000) =      2.311 s/op
     p(95.0000) =      2.393 s/op
     p(99.0000) =      2.656 s/op
     p(99.9000) =      2.656 s/op
     p(99.9900) =      2.656 s/op
     p(99.9990) =      2.656 s/op
     p(99.9999) =      2.656 s/op
    p(100.0000) =      2.656 s/op


# Run complete. Total time: 00:01:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.302 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564215956670.json
{"wallclock_times": [116.11257342999997], "core_cycle_counts": [[82583792538], [91061372291], [126163169239], [80071920624]], "aperf_counts": [[82272686925], [91021848072], [126143308867], [80055252579]], "mperf_counts": [[82648556586], [91055176500], [126193217508], [80206604314]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 10:27:52: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_11.0.4'
[2019-07-27 10:27:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 10:27:53: INFO] 96 executions left in scheduler queue
[2019-07-27 10:27:53: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 10:27:53: INFO] Estimated completion (next execution): 2019-07-27 10:32:20 (0:04:26 from now)
[2019-07-27 10:27:53: INFO] Reboot in preparation for next execution
[2019-07-27 10:38:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.363 s
Iteration   2: 7.995 s
Iteration   3: 8.069 s
Iteration   4: 7.840 s
Iteration   5: 7.908 s
Iteration   6: 7.862 s
Iteration   7: 7.879 s
Iteration   8: 7.904 s
Iteration   9: 7.867 s
Iteration  10: 7.892 s
Iteration  11: 7.900 s
Iteration  12: 7.879 s
Iteration  13: 7.761 s
Iteration  14: 7.870 s
Iteration  15: 7.883 s
Iteration  16: 7.882 s
Iteration  17: 7.892 s
Iteration  18: 7.882 s
Iteration  19: 7.879 s
Iteration  20: 7.896 s
Iteration  21: 7.910 s
Iteration  22: 7.843 s
Iteration  23: 7.861 s
Iteration  24: 7.836 s
Iteration  25: 7.938 s
Iteration  26: 7.819 s
Iteration  27: 7.794 s
Iteration  28: 7.892 s
Iteration  29: 7.781 s
Iteration  30: 7.886 s
Iteration  31: 7.859 s
Iteration  32: 7.817 s
Iteration  33: 7.809 s
Iteration  34: 7.875 s
Iteration  35: 7.872 s
Iteration  36: 7.911 s
Iteration  37: 7.914 s
Iteration  38: 7.875 s
Iteration  39: 7.871 s
Iteration  40: 7.874 s
Iteration  41: 7.891 s
Iteration  42: 7.856 s
Iteration  43: 7.863 s
Iteration  44: 7.868 s
Iteration  45: 7.745 s
Iteration  46: 7.859 s
Iteration  47: 7.908 s
Iteration  48: 7.853 s
Iteration  49: 7.842 s
Iteration  50: 7.931 s


Result: 7.883 ?(99.9%) 0.043 s [Average]
  Statistics: (min, avg, max) = (7.745, 7.883, 8.363), stdev = 0.086
  Confidence interval (99.9%): [7.840, 7.926]
  Samples, N = 50
        mean =      7.883 ?(99.9%) 0.043 s
         min =      7.745 s
  p( 0.0000) =      7.745 s
  p(50.0000) =      7.875 s
  p(90.0000) =      7.929 s
  p(95.0000) =      8.028 s
  p(99.0000) =      8.363 s
  p(99.9000) =      8.363 s
  p(99.9900) =      8.363 s
  p(99.9990) =      8.363 s
  p(99.9999) =      8.363 s
         max =      8.363 s


# Run complete. Total time: 00:06:35

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  7.883        0.043      s
{"wallclock_times": [395.378553084], "core_cycle_counts": [[394619409622], [307369042396], [358499761023], [345427730793]], "aperf_counts": [[393674701043], [307248105660], [358439369247], [345387458556]], "mperf_counts": [[394136982356], [307276639258], [358481828442], [345506478638]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 10:38:37: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 10:38:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 10:38:38: INFO] 95 executions left in scheduler queue
[2019-07-27 10:38:38: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 10:38:38: INFO] Estimated completion (next execution): 2019-07-27 10:47:44 (0:09:05 from now)
[2019-07-27 10:38:38: INFO] Reboot in preparation for next execution
[2019-07-27 10:53:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.834 s
Iteration   2: 13.264 s
Iteration   3: 12.627 s
Iteration   4: 12.597 s
Iteration   5: 12.603 s
Iteration   6: 12.585 s
Iteration   7: 12.599 s
Iteration   8: 12.568 s
Iteration   9: 12.588 s
Iteration  10: 12.564 s
Iteration  11: 12.612 s
Iteration  12: 12.598 s
Iteration  13: 12.598 s
Iteration  14: 12.584 s
Iteration  15: 12.587 s
Iteration  16: 12.556 s
Iteration  17: 12.570 s
Iteration  18: 12.615 s
Iteration  19: 12.651 s
Iteration  20: 12.615 s
Iteration  21: 12.607 s
Iteration  22: 12.604 s
Iteration  23: 12.599 s
Iteration  24: 12.599 s
Iteration  25: 12.611 s
Iteration  26: 12.580 s
Iteration  27: 12.605 s
Iteration  28: 12.602 s
Iteration  29: 12.595 s
Iteration  30: 12.604 s
Iteration  31: 12.607 s
Iteration  32: 12.608 s
Iteration  33: 12.561 s
Iteration  34: 12.588 s
Iteration  35: 12.631 s
Iteration  36: 12.637 s
Iteration  37: 12.620 s
Iteration  38: 12.608 s
Iteration  39: 12.626 s
Iteration  40: 12.606 s
Iteration  41: 12.607 s
Iteration  42: 12.591 s
Iteration  43: 12.620 s
Iteration  44: 12.576 s
Iteration  45: 12.618 s
Iteration  46: 12.637 s
Iteration  47: 12.585 s
Iteration  48: 12.634 s
Iteration  49: 12.618 s
Iteration  50: 12.590 s


Result: 12.620 ?(99.9%) 0.050 s [Average]
  Statistics: (min, avg, max) = (12.556, 12.620, 13.264), stdev = 0.101
  Confidence interval (99.9%): [12.570, 12.670]
  Samples, N = 50
        mean =     12.620 ?(99.9%) 0.050 s
         min =     12.556 s
  p( 0.0000) =     12.556 s
  p(50.0000) =     12.604 s
  p(90.0000) =     12.636 s
  p(95.0000) =     12.734 s
  p(99.0000) =     13.264 s
  p(99.9000) =     13.264 s
  p(99.9900) =     13.264 s
  p(99.9990) =     13.264 s
  p(99.9999) =     13.264 s
         max =     13.264 s


# Run complete. Total time: 00:10:31

Benchmark                                                                               (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  12.620        0.050      s
{"wallclock_times": [632.076988825], "core_cycle_counts": [[344834754367], [658241770935], [682570849844], [356678671220]], "aperf_counts": [[343115735425], [658136164317], [682511448661], [356621236633]], "mperf_counts": [[343345233240], [658209941990], [682548808908], [356645357036]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 10:53:21: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 10:53:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 10:53:22: INFO] 94 executions left in scheduler queue
[2019-07-27 10:53:22: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 10:53:22: INFO] Estimated completion (next execution): 2019-07-27 11:06:24 (0:13:02 from now)
[2019-07-27 10:53:22: INFO] Reboot in preparation for next execution
[2019-07-27 11:04:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.395 s
Iteration   2: 8.244 s
Iteration   3: 8.959 s
Iteration   4: 8.555 s
Iteration   5: 7.866 s
Iteration   6: 8.584 s
Iteration   7: 8.584 s
Iteration   8: 8.602 s
Iteration   9: 8.612 s
Iteration  10: 8.582 s
Iteration  11: 8.536 s
Iteration  12: 7.911 s
Iteration  13: 8.517 s
Iteration  14: 8.566 s
Iteration  15: 8.547 s
Iteration  16: 8.587 s
Iteration  17: 8.552 s
Iteration  18: 8.571 s
Iteration  19: 8.560 s
Iteration  20: 8.254 s
Iteration  21: 8.582 s
Iteration  22: 8.518 s
Iteration  23: 8.539 s
Iteration  24: 8.519 s
Iteration  25: 8.531 s
Iteration  26: 8.528 s
Iteration  27: 8.548 s
Iteration  28: 7.620 s
Iteration  29: 8.549 s
Iteration  30: 8.562 s
Iteration  31: 8.582 s
Iteration  32: 8.590 s
Iteration  33: 8.551 s
Iteration  34: 8.556 s
Iteration  35: 7.468 s
Iteration  36: 8.561 s
Iteration  37: 8.599 s
Iteration  38: 8.558 s
Iteration  39: 8.593 s
Iteration  40: 8.562 s
Iteration  41: 8.570 s
Iteration  42: 8.597 s
Iteration  43: 8.551 s
Iteration  44: 8.563 s
Iteration  45: 8.539 s
Iteration  46: 8.531 s
Iteration  47: 8.534 s
Iteration  48: 8.555 s
Iteration  49: 8.547 s
Iteration  50: 8.544 s


Result: 8.485 ?(99.9%) 0.124 s [Average]
  Statistics: (min, avg, max) = (7.468, 8.485, 8.959), stdev = 0.251
  Confidence interval (99.9%): [8.360, 8.609]
  Samples, N = 50
        mean =      8.485 ?(99.9%) 0.124 s
         min =      7.468 s
  p( 0.0000) =      7.468 s
  p(50.0000) =      8.553 s
  p(90.0000) =      8.596 s
  p(95.0000) =      8.607 s
  p(99.0000) =      8.959 s
  p(99.9000) =      8.959 s
  p(99.9900) =      8.959 s
  p(99.9990) =      8.959 s
  p(99.9999) =      8.959 s
         max =      8.959 s


# Run complete. Total time: 00:07:05

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  8.485        0.124      s
{"wallclock_times": [425.402832729], "core_cycle_counts": [[139050570355], [517951845899], [384541787526], [185346610284]], "aperf_counts": [[137799976676], [517892171449], [384497357529], [185305334719]], "mperf_counts": [[155396997722], [585191914382], [429518904336], [211192935106]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 11:04:36: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 11:04:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 11:04:37: INFO] 93 executions left in scheduler queue
[2019-07-27 11:04:37: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 11:04:37: INFO] Estimated completion (next execution): 2019-07-27 11:14:13 (0:09:35 from now)
[2019-07-27 11:04:37: INFO] Reboot in preparation for next execution
[2019-07-27 11:22:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.210 s
Iteration   2: 17.356 s
Iteration   3: 17.287 s
Iteration   4: 16.904 s
Iteration   5: 16.933 s
Iteration   6: 16.917 s
Iteration   7: 16.911 s
Iteration   8: 16.962 s
Iteration   9: 16.947 s
Iteration  10: 17.067 s
Iteration  11: 16.961 s
Iteration  12: 16.906 s
Iteration  13: 16.905 s
Iteration  14: 16.968 s
Iteration  15: 16.956 s
Iteration  16: 17.059 s
Iteration  17: 16.942 s
Iteration  18: 16.910 s
Iteration  19: 16.883 s
Iteration  20: 16.927 s
Iteration  21: 16.939 s
Iteration  22: 16.954 s
Iteration  23: 17.071 s
Iteration  24: 16.971 s
Iteration  25: 16.915 s
Iteration  26: 16.945 s
Iteration  27: 16.967 s
Iteration  28: 16.912 s
Iteration  29: 16.922 s
Iteration  30: 16.919 s
Iteration  31: 16.923 s
Iteration  32: 16.962 s
Iteration  33: 17.010 s
Iteration  34: 16.947 s
Iteration  35: 16.923 s
Iteration  36: 16.987 s
Iteration  37: 17.017 s
Iteration  38: 16.950 s
Iteration  39: 16.925 s
Iteration  40: 16.876 s
Iteration  41: 16.935 s
Iteration  42: 16.933 s
Iteration  43: 17.041 s
Iteration  44: 16.924 s
Iteration  45: 16.898 s
Iteration  46: 16.930 s
Iteration  47: 16.948 s
Iteration  48: 16.949 s
Iteration  49: 17.200 s
Iteration  50: 16.970 s


Result: 16.973 ?(99.9%) 0.049 s [Average]
  Statistics: (min, avg, max) = (16.876, 16.973, 17.356), stdev = 0.098
  Confidence interval (99.9%): [16.925, 17.022]
  Samples, N = 50
        mean =     16.973 ?(99.9%) 0.049 s
         min =     16.876 s
  p( 0.0000) =     16.876 s
  p(50.0000) =     16.946 s
  p(90.0000) =     17.071 s
  p(95.0000) =     17.245 s
  p(99.0000) =     17.356 s
  p(99.9000) =     17.356 s
  p(99.9900) =     17.356 s
  p(99.9990) =     17.356 s
  p(99.9999) =     17.356 s
         max =     17.356 s


# Run complete. Total time: 00:14:09

Benchmark                                                                          (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  16.973        0.049      s
{"wallclock_times": [849.786945606], "core_cycle_counts": [[503328750493], [409704364822], [879006433940], [948735809939]], "aperf_counts": [[501109563487], [409530578540], [878925854724], [948663620327]], "mperf_counts": [[501495784204], [409602577088], [879586668070], [948717708918]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 11:22:56: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_11.0.4'
[2019-07-27 11:22:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 11:22:57: INFO] 92 executions left in scheduler queue
[2019-07-27 11:22:57: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-07-27 11:22:57: INFO] Estimated completion (next execution): 2019-07-27 11:39:37 (0:16:40 from now)
[2019-07-27 11:22:57: INFO] Reboot in preparation for next execution
[2019-07-27 11:27:08: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 11:27:08: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 11:27:08: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 11:27:08: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 11:27:08: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 11:27:08: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 11:27:09: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: 0.001 s/op
Iteration   4: 0.001 s/op
Iteration   5: 0.001 s/op
Iteration   6: 0.001 s/op
Iteration   7: 0.001 s/op
Iteration   8: 0.001 s/op
Iteration   9: 0.001 s/op
Iteration  10: 0.001 s/op
Iteration  11: 0.001 s/op
Iteration  12: 0.001 s/op
Iteration  13: 0.001 s/op
Iteration  14: 0.001 s/op
Iteration  15: 0.001 s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 7 
    [0.000, 0.001) = 29 
    [0.001, 0.001) = 13 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =      0.001 s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564219628247.json
{"wallclock_times": [1.4967346310000096], "core_cycle_counts": [[3039400155], [1958746012], [2515285345], [2695665467]], "aperf_counts": [[3032160361], [1945917165], [2501795737], [2677675708]], "mperf_counts": [[3037681932], [1946001792], [2501805248], [2684035552]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 11:27:09: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_11.0.4'
[2019-07-27 11:27:10: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 11:27:10: INFO] 91 executions left in scheduler queue
[2019-07-27 11:27:10: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-07-27 11:27:10: INFO] Estimated completion (next execution): 2019-07-27 11:29:42 (0:02:31 from now)
[2019-07-27 11:27:10: INFO] Reboot in preparation for next execution
[2019-07-27 11:31:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 11:31:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 11:31:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 11:31:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 11:31:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 11:31:21: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 11:43:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.299 s/op
Iteration   2: 15.839 s/op
Iteration   3: 15.225 s/op
Iteration   4: 14.313 s/op
Iteration   5: 13.951 s/op
Iteration   6: 14.639 s/op
Iteration   7: 14.595 s/op
Iteration   8: 14.101 s/op
Iteration   9: 14.873 s/op
Iteration  10: 15.030 s/op
Iteration  11: 13.936 s/op
Iteration  12: 14.322 s/op
Iteration  13: 14.570 s/op
Iteration  14: 14.210 s/op
Iteration  15: 14.334 s/op
Iteration  16: 14.767 s/op
Iteration  17: 14.725 s/op
Iteration  18: 14.424 s/op
Iteration  19: 14.197 s/op
Iteration  20: 15.538 s/op
Iteration  21: 15.372 s/op
Iteration  22: 14.143 s/op
Iteration  23: 14.148 s/op
Iteration  24: 14.121 s/op
Iteration  25: 13.849 s/op
Iteration  26: 14.451 s/op
Iteration  27: 15.447 s/op
Iteration  28: 14.551 s/op
Iteration  29: 14.488 s/op
Iteration  30: 14.223 s/op
Iteration  31: 14.187 s/op
Iteration  32: 15.294 s/op
Iteration  33: 15.156 s/op
Iteration  34: 14.529 s/op
Iteration  35: 14.527 s/op
Iteration  36: 14.614 s/op
Iteration  37: 14.005 s/op
Iteration  38: 14.403 s/op
Iteration  39: 15.284 s/op
Iteration  40: 15.341 s/op
Iteration  41: 15.282 s/op
Iteration  42: 15.498 s/op
Iteration  43: 14.269 s/op
Iteration  44: 14.942 s/op
Iteration  45: 14.362 s/op
Iteration  46: 15.081 s/op
Iteration  47: 14.689 s/op
Iteration  48: 14.636 s/op
Iteration  49: 15.465 s/op
Iteration  50: 14.269 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.670 ?(99.9%) 0.253 s/op

  Histogram, s/op:
    [13.000, 13.250) = 0 
    [13.250, 13.500) = 0 
    [13.500, 13.750) = 0 
    [13.750, 14.000) = 3 
    [14.000, 14.250) = 9 
    [14.250, 14.500) = 10 
    [14.500, 14.750) = 10 
    [14.750, 15.000) = 3 
    [15.000, 15.250) = 4 
    [15.250, 15.500) = 9 
    [15.500, 15.750) = 1 

  Percentiles, s/op:
      p(0.0000) =     13.849 s/op
     p(50.0000) =     14.560 s/op
     p(90.0000) =     15.439 s/op
     p(95.0000) =     15.516 s/op
     p(99.0000) =     15.839 s/op
     p(99.9000) =     15.839 s/op
     p(99.9900) =     15.839 s/op
     p(99.9990) =     15.839 s/op
     p(99.9999) =     15.839 s/op
    p(100.0000) =     15.839 s/op


# Run complete. Total time: 00:12:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.670 ? 0.253   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564219880847.json
{"wallclock_times": [735.251722492], "core_cycle_counts": [[531441248281], [690802563075], [744302096209], [942690593630]], "aperf_counts": [[529423233703], [690633252047], [744173698872], [942568850217]], "mperf_counts": [[529428201104], [690635181908], [744173671456], [942568819292]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 11:43:36: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9_11.0.4'
[2019-07-27 11:43:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 11:43:37: INFO] 90 executions left in scheduler queue
[2019-07-27 11:43:37: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-07-27 11:43:37: INFO] Estimated completion (next execution): 2019-07-27 11:58:22 (0:14:45 from now)
[2019-07-27 11:43:37: INFO] Reboot in preparation for next execution
[2019-07-27 11:47:47: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 11:47:47: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 11:47:47: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 11:47:47: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 11:47:47: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 11:47:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 12:03:01: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.101 s/op
Iteration   2: 18.036 s/op
Iteration   3: 17.917 s/op
Iteration   4: 17.999 s/op
Iteration   5: 18.721 s/op
Iteration   6: 18.394 s/op
Iteration   7: 18.666 s/op
Iteration   8: 17.697 s/op
Iteration   9: 18.678 s/op
Iteration  10: 18.692 s/op
Iteration  11: 17.729 s/op
Iteration  12: 18.579 s/op
Iteration  13: 17.335 s/op
Iteration  14: 18.358 s/op
Iteration  15: 18.517 s/op
Iteration  16: 17.346 s/op
Iteration  17: 18.653 s/op
Iteration  18: 18.339 s/op
Iteration  19: 18.500 s/op
Iteration  20: 18.269 s/op
Iteration  21: 18.019 s/op
Iteration  22: 18.620 s/op
Iteration  23: 18.601 s/op
Iteration  24: 18.024 s/op
Iteration  25: 18.504 s/op
Iteration  26: 17.090 s/op
Iteration  27: 18.692 s/op
Iteration  28: 18.785 s/op
Iteration  29: 18.256 s/op
Iteration  30: 17.570 s/op
Iteration  31: 18.700 s/op
Iteration  32: 18.569 s/op
Iteration  33: 17.526 s/op
Iteration  34: 17.527 s/op
Iteration  35: 18.616 s/op
Iteration  36: 17.361 s/op
Iteration  37: 18.308 s/op
Iteration  38: 18.676 s/op
Iteration  39: 18.486 s/op
Iteration  40: 18.541 s/op
Iteration  41: 18.324 s/op
Iteration  42: 18.691 s/op
Iteration  43: 18.609 s/op
Iteration  44: 18.609 s/op
Iteration  45: 18.437 s/op
Iteration  46: 18.612 s/op
Iteration  47: 18.353 s/op
Iteration  48: 18.646 s/op
Iteration  49: 17.938 s/op
Iteration  50: 18.491 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     18.254 ?(99.9%) 0.237 s/op

  Histogram, s/op:
    [17.000, 17.125) = 2 
    [17.125, 17.250) = 0 
    [17.250, 17.375) = 3 
    [17.375, 17.500) = 0 
    [17.500, 17.625) = 3 
    [17.625, 17.750) = 2 
    [17.750, 17.875) = 0 
    [17.875, 18.000) = 3 
    [18.000, 18.125) = 3 
    [18.125, 18.250) = 0 
    [18.250, 18.375) = 7 
    [18.375, 18.500) = 4 
    [18.500, 18.625) = 12 
    [18.625, 18.750) = 10 
    [18.750, 18.875) = 1 

  Percentiles, s/op:
      p(0.0000) =     17.090 s/op
     p(50.0000) =     18.461 s/op
     p(90.0000) =     18.692 s/op
     p(95.0000) =     18.709 s/op
     p(99.0000) =     18.785 s/op
     p(99.9000) =     18.785 s/op
     p(99.9900) =     18.785 s/op
     p(99.9990) =     18.785 s/op
     p(99.9999) =     18.785 s/op
    p(100.0000) =     18.785 s/op


# Run complete. Total time: 00:15:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  18.254 ? 0.237   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564220867238.json
{"wallclock_times": [914.489470083], "core_cycle_counts": [[537446059138], [886433290903], [1171881083845], [993456667191]], "aperf_counts": [[534812278843], [886287451838], [1171716044309], [993313683116]], "mperf_counts": [[534815654070], [886288177580], [1171716004528], [993313654472]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 12:03:01: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_12.0.1'
[2019-07-27 12:03:02: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 12:03:02: INFO] 89 executions left in scheduler queue
[2019-07-27 12:03:02: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-07-27 12:03:02: INFO] Estimated completion (next execution): 2019-07-27 12:20:47 (0:17:44 from now)
[2019-07-27 12:03:02: INFO] Reboot in preparation for next execution
[2019-07-27 12:07:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 12:07:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 12:07:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 12:07:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 12:07:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 12:18:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.910 s/op
Iteration   2: 14.174 s/op
Iteration   3: 14.211 s/op
Iteration   4: 14.146 s/op
Iteration   5: 14.038 s/op
Iteration   6: 14.150 s/op
Iteration   7: 14.014 s/op
Iteration   8: 14.029 s/op
Iteration   9: 14.080 s/op
Iteration  10: 14.019 s/op
Iteration  11: 13.980 s/op
Iteration  12: 14.028 s/op
Iteration  13: 14.082 s/op
Iteration  14: 14.004 s/op
Iteration  15: 13.985 s/op
Iteration  16: 14.008 s/op
Iteration  17: 13.899 s/op
Iteration  18: 13.906 s/op
Iteration  19: 14.050 s/op
Iteration  20: 13.871 s/op
Iteration  21: 14.017 s/op
Iteration  22: 13.860 s/op
Iteration  23: 14.112 s/op
Iteration  24: 13.934 s/op
Iteration  25: 13.882 s/op
Iteration  26: 13.979 s/op
Iteration  27: 13.920 s/op
Iteration  28: 13.991 s/op
Iteration  29: 14.038 s/op
Iteration  30: 13.948 s/op
Iteration  31: 13.888 s/op
Iteration  32: 13.978 s/op
Iteration  33: 14.005 s/op
Iteration  34: 13.845 s/op
Iteration  35: 14.033 s/op
Iteration  36: 13.954 s/op
Iteration  37: 13.925 s/op
Iteration  38: 13.968 s/op
Iteration  39: 13.879 s/op
Iteration  40: 14.085 s/op
Iteration  41: 13.952 s/op
Iteration  42: 13.949 s/op
Iteration  43: 13.924 s/op
Iteration  44: 14.001 s/op
Iteration  45: 13.926 s/op
Iteration  46: 13.948 s/op
Iteration  47: 14.001 s/op
Iteration  48: 13.918 s/op
Iteration  49: 13.910 s/op
Iteration  50: 13.968 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     14.007 ?(99.9%) 0.076 s/op

  Histogram, s/op:
    [13.000, 13.125) = 0 
    [13.125, 13.250) = 0 
    [13.250, 13.375) = 0 
    [13.375, 13.500) = 0 
    [13.500, 13.625) = 0 
    [13.625, 13.750) = 0 
    [13.750, 13.875) = 3 
    [13.875, 14.000) = 24 
    [14.000, 14.125) = 18 
    [14.125, 14.250) = 4 
    [14.250, 14.375) = 0 
    [14.375, 14.500) = 0 
    [14.500, 14.625) = 0 
    [14.625, 14.750) = 0 
    [14.750, 14.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.845 s/op
     p(50.0000) =     13.983 s/op
     p(90.0000) =     14.143 s/op
     p(95.0000) =     14.191 s/op
     p(99.0000) =     14.910 s/op
     p(99.9000) =     14.910 s/op
     p(99.9900) =     14.910 s/op
     p(99.9990) =     14.910 s/op
     p(99.9999) =     14.910 s/op
    p(100.0000) =     14.910 s/op


# Run complete. Total time: 00:11:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.007 ? 0.076   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564222032772.json
{"wallclock_times": [701.421312569], "core_cycle_counts": [[777902169565], [519785111320], [680269420743], [543752059399]], "aperf_counts": [[776168836227], [519496893193], [680054032181], [543588991362]], "mperf_counts": [[784203541536], [523871183780], [686797694806], [548331663812]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 12:18:54: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_hotspot_11.0.4'
[2019-07-27 12:18:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 12:18:55: INFO] 88 executions left in scheduler queue
[2019-07-27 12:18:55: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-27 12:18:55: INFO] Estimated completion (next execution): 2019-07-27 12:33:06 (0:14:11 from now)
[2019-07-27 12:18:55: INFO] Reboot in preparation for next execution
[2019-07-27 12:23:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 12:23:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 12:23:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 12:23:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 12:23:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 12:24:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.502 s/op
Iteration   2: 2.486 s/op
Iteration   3: 2.079 s/op
Iteration   4: 2.032 s/op
Iteration   5: 2.171 s/op
Iteration   6: 2.164 s/op
Iteration   7: 2.191 s/op
Iteration   8: 2.166 s/op
Iteration   9: 2.026 s/op
Iteration  10: 2.108 s/op
Iteration  11: 2.178 s/op
Iteration  12: 2.161 s/op
Iteration  13: 2.008 s/op
Iteration  14: 2.051 s/op
Iteration  15: 2.161 s/op
Iteration  16: 2.159 s/op
Iteration  17: 2.139 s/op
Iteration  18: 2.168 s/op
Iteration  19: 2.148 s/op
Iteration  20: 2.160 s/op
Iteration  21: 1.981 s/op
Iteration  22: 2.168 s/op
Iteration  23: 2.169 s/op
Iteration  24: 2.159 s/op
Iteration  25: 2.156 s/op
Iteration  26: 2.070 s/op
Iteration  27: 2.166 s/op
Iteration  28: 2.162 s/op
Iteration  29: 1.922 s/op
Iteration  30: 2.167 s/op
Iteration  31: 2.144 s/op
Iteration  32: 2.159 s/op
Iteration  33: 2.157 s/op
Iteration  34: 2.030 s/op
Iteration  35: 2.141 s/op
Iteration  36: 2.161 s/op
Iteration  37: 2.157 s/op
Iteration  38: 2.164 s/op
Iteration  39: 2.167 s/op
Iteration  40: 2.158 s/op
Iteration  41: 2.154 s/op
Iteration  42: 2.164 s/op
Iteration  43: 2.165 s/op
Iteration  44: 2.163 s/op
Iteration  45: 1.909 s/op
Iteration  46: 2.027 s/op
Iteration  47: 2.168 s/op
Iteration  48: 2.164 s/op
Iteration  49: 2.122 s/op
Iteration  50: 2.091 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.139 ?(99.9%) 0.049 s/op

  Histogram, s/op:
    [1.900, 1.950) = 2 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 5 
    [2.050, 2.100) = 4 
    [2.100, 2.150) = 6 
    [2.150, 2.200) = 30 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.909 s/op
     p(50.0000) =      2.159 s/op
     p(90.0000) =      2.171 s/op
     p(95.0000) =      2.324 s/op
     p(99.0000) =      2.502 s/op
     p(99.9000) =      2.502 s/op
     p(99.9900) =      2.502 s/op
     p(99.9990) =      2.502 s/op
     p(99.9999) =      2.502 s/op
    p(100.0000) =      2.502 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.139 ? 0.049   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564222984592.json
{"wallclock_times": [107.97146802999998], "core_cycle_counts": [[138258117652], [57144389128], [79110127563], [48747809929]], "aperf_counts": [[138029527412], [57098069553], [79082219813], [48721533863]], "mperf_counts": [[153753392406], [64605949732], [89458047032], [53276626896]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 12:24:52: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-27 12:24:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 12:24:53: INFO] 87 executions left in scheduler queue
[2019-07-27 12:24:53: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-27 12:24:53: INFO] Estimated completion (next execution): 2019-07-27 12:29:11 (0:04:18 from now)
[2019-07-27 12:24:53: INFO] Reboot in preparation for next execution
[2019-07-27 12:29:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 12:29:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 12:29:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 12:29:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 12:29:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 12:30:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.060 s/op
Iteration   2: 1.828 s/op
Iteration   3: 1.994 s/op
Iteration   4: 1.996 s/op
Iteration   5: 2.031 s/op
Iteration   6: 1.855 s/op
Iteration   7: 1.846 s/op
Iteration   8: 1.850 s/op
Iteration   9: 1.848 s/op
Iteration  10: 1.852 s/op
Iteration  11: 1.854 s/op
Iteration  12: 1.850 s/op
Iteration  13: 1.853 s/op
Iteration  14: 1.849 s/op
Iteration  15: 1.851 s/op
Iteration  16: 1.851 s/op
Iteration  17: 1.854 s/op
Iteration  18: 1.853 s/op
Iteration  19: 1.858 s/op
Iteration  20: 1.854 s/op
Iteration  21: 1.861 s/op
Iteration  22: 1.859 s/op
Iteration  23: 1.852 s/op
Iteration  24: 1.852 s/op
Iteration  25: 1.855 s/op
Iteration  26: 1.851 s/op
Iteration  27: 1.851 s/op
Iteration  28: 1.851 s/op
Iteration  29: 1.857 s/op
Iteration  30: 1.858 s/op
Iteration  31: 1.864 s/op
Iteration  32: 1.854 s/op
Iteration  33: 1.863 s/op
Iteration  34: 1.856 s/op
Iteration  35: 1.854 s/op
Iteration  36: 1.855 s/op
Iteration  37: 1.855 s/op
Iteration  38: 1.853 s/op
Iteration  39: 1.853 s/op
Iteration  40: 1.861 s/op
Iteration  41: 1.849 s/op
Iteration  42: 1.853 s/op
Iteration  43: 1.857 s/op
Iteration  44: 1.858 s/op
Iteration  45: 1.854 s/op
Iteration  46: 1.863 s/op
Iteration  47: 1.858 s/op
Iteration  48: 1.856 s/op
Iteration  49: 1.853 s/op
Iteration  50: 1.851 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.867 ?(99.9%) 0.023 s/op

  Histogram, s/op:
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 6 
    [1.850, 1.875) = 40 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 0 
    [1.950, 1.975) = 0 
    [1.975, 2.000) = 2 
    [2.000, 2.025) = 0 
    [2.025, 2.050) = 1 
    [2.050, 2.075) = 1 
    [2.075, 2.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.828 s/op
     p(50.0000) =      1.854 s/op
     p(90.0000) =      1.864 s/op
     p(95.0000) =      2.012 s/op
     p(99.0000) =      2.060 s/op
     p(99.9000) =      2.060 s/op
     p(99.9900) =      2.060 s/op
     p(99.9990) =      2.060 s/op
     p(99.9999) =      2.060 s/op
    p(100.0000) =      2.060 s/op


# Run complete. Total time: 00:01:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.867 ? 0.023   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564223342644.json
{"wallclock_times": [94.30829042299999], "core_cycle_counts": [[77177194004], [41436990775], [124834767692], [66009551333]], "aperf_counts": [[76931305066], [41402838331], [124818456102], [65992400680]], "mperf_counts": [[77246636290], [41498581386], [125265717014], [66110364350]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 12:30:36: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_12.0.2'
[2019-07-27 12:30:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 12:30:37: INFO] 86 executions left in scheduler queue
[2019-07-27 12:30:37: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-07-27 12:30:37: INFO] Estimated completion (next execution): 2019-07-27 12:34:42 (0:04:04 from now)
[2019-07-27 12:30:37: INFO] Reboot in preparation for next execution
[2019-07-27 12:34:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 12:34:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 12:34:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 12:34:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 12:34:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 12:34:48: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 12:48:58: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.894 s/op
Iteration   2: 17.047 s/op
Iteration   3: 17.239 s/op
Iteration   4: 16.688 s/op
Iteration   5: 17.304 s/op
Iteration   6: 16.541 s/op
Iteration   7: 17.740 s/op
Iteration   8: 17.250 s/op
Iteration   9: 17.421 s/op
Iteration  10: 17.600 s/op
Iteration  11: 16.659 s/op
Iteration  12: 17.442 s/op
Iteration  13: 17.519 s/op
Iteration  14: 17.283 s/op
Iteration  15: 17.306 s/op
Iteration  16: 17.460 s/op
Iteration  17: 17.208 s/op
Iteration  18: 17.147 s/op
Iteration  19: 17.180 s/op
Iteration  20: 16.731 s/op
Iteration  21: 17.179 s/op
Iteration  22: 17.083 s/op
Iteration  23: 17.230 s/op
Iteration  24: 16.287 s/op
Iteration  25: 17.179 s/op
Iteration  26: 16.535 s/op
Iteration  27: 16.695 s/op
Iteration  28: 16.426 s/op
Iteration  29: 16.037 s/op
Iteration  30: 17.245 s/op
Iteration  31: 17.005 s/op
Iteration  32: 17.032 s/op
Iteration  33: 17.158 s/op
Iteration  34: 16.986 s/op
Iteration  35: 17.284 s/op
Iteration  36: 16.196 s/op
Iteration  37: 17.197 s/op
Iteration  38: 16.245 s/op
Iteration  39: 16.487 s/op
Iteration  40: 16.568 s/op
Iteration  41: 16.474 s/op
Iteration  42: 15.762 s/op
Iteration  43: 17.420 s/op
Iteration  44: 17.293 s/op
Iteration  45: 17.098 s/op
Iteration  46: 17.330 s/op
Iteration  47: 15.394 s/op
Iteration  48: 17.371 s/op
Iteration  49: 17.409 s/op
Iteration  50: 17.111 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.968 ?(99.9%) 0.244 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 1 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 3 
    [16.250, 16.500) = 4 
    [16.500, 16.750) = 7 
    [16.750, 17.000) = 2 
    [17.000, 17.250) = 16 
    [17.250, 17.500) = 13 
    [17.500, 17.750) = 3 

  Percentiles, s/op:
      p(0.0000) =     15.394 s/op
     p(50.0000) =     17.153 s/op
     p(90.0000) =     17.440 s/op
     p(95.0000) =     17.556 s/op
     p(99.0000) =     17.740 s/op
     p(99.9000) =     17.740 s/op
     p(99.9900) =     17.740 s/op
     p(99.9990) =     17.740 s/op
     p(99.9999) =     17.740 s/op
    p(100.0000) =     17.740 s/op


# Run complete. Total time: 00:14:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.968 ? 0.244   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564223688679.json
{"wallclock_times": [850.162733116], "core_cycle_counts": [[911600443873], [783744473164], [665813798827], [946433553650]], "aperf_counts": [[909599145104], [783540194595], [665596210635], [946225104706]], "mperf_counts": [[909606952634], [783541018604], [665596155294], [946225223132]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 12:48:58: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_11.0.4'
[2019-07-27 12:48:59: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 12:48:59: INFO] 85 executions left in scheduler queue
[2019-07-27 12:48:59: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-07-27 12:48:59: INFO] Estimated completion (next execution): 2019-07-27 13:05:40 (0:16:40 from now)
[2019-07-27 12:48:59: INFO] Reboot in preparation for next execution
[2019-07-27 12:53:24: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 12:53:24: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 12:53:24: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 12:53:24: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 12:53:24: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 12:53:25: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 13:07:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.748 s/op
Iteration   2: 17.672 s/op
Iteration   3: 17.515 s/op
Iteration   4: 17.623 s/op
Iteration   5: 16.842 s/op
Iteration   6: 17.719 s/op
Iteration   7: 17.324 s/op
Iteration   8: 17.681 s/op
Iteration   9: 17.675 s/op
Iteration  10: 17.719 s/op
Iteration  11: 17.764 s/op
Iteration  12: 17.833 s/op
Iteration  13: 17.828 s/op
Iteration  14: 17.624 s/op
Iteration  15: 17.692 s/op
Iteration  16: 17.492 s/op
Iteration  17: 17.212 s/op
Iteration  18: 17.343 s/op
Iteration  19: 17.448 s/op
Iteration  20: 17.446 s/op
Iteration  21: 16.814 s/op
Iteration  22: 16.760 s/op
Iteration  23: 17.218 s/op
Iteration  24: 17.083 s/op
Iteration  25: 16.697 s/op
Iteration  26: 17.199 s/op
Iteration  27: 17.152 s/op
Iteration  28: 17.463 s/op
Iteration  29: 17.591 s/op
Iteration  30: 17.277 s/op
Iteration  31: 17.390 s/op
Iteration  32: 16.634 s/op
Iteration  33: 16.716 s/op
Iteration  34: 17.451 s/op
Iteration  35: 16.062 s/op
Iteration  36: 17.204 s/op
Iteration  37: 17.356 s/op
Iteration  38: 17.681 s/op
Iteration  39: 17.363 s/op
Iteration  40: 17.408 s/op
Iteration  41: 17.422 s/op
Iteration  42: 17.653 s/op
Iteration  43: 16.997 s/op
Iteration  44: 17.671 s/op
Iteration  45: 17.644 s/op
Iteration  46: 17.467 s/op
Iteration  47: 17.254 s/op
Iteration  48: 17.041 s/op
Iteration  49: 17.852 s/op
Iteration  50: 17.372 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     17.362 ?(99.9%) 0.184 s/op

  Histogram, s/op:
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 0 
    [16.250, 16.375) = 0 
    [16.375, 16.500) = 0 
    [16.500, 16.625) = 0 
    [16.625, 16.750) = 3 
    [16.750, 16.875) = 3 
    [16.875, 17.000) = 1 
    [17.000, 17.125) = 2 
    [17.125, 17.250) = 5 
    [17.250, 17.375) = 7 
    [17.375, 17.500) = 9 
    [17.500, 17.625) = 4 
    [17.625, 17.750) = 11 
    [17.750, 17.875) = 4 

  Percentiles, s/op:
      p(0.0000) =     16.062 s/op
     p(50.0000) =     17.434 s/op
     p(90.0000) =     17.745 s/op
     p(95.0000) =     17.830 s/op
     p(99.0000) =     17.852 s/op
     p(99.9000) =     17.852 s/op
     p(99.9900) =     17.852 s/op
     p(99.9990) =     17.852 s/op
     p(99.9999) =     17.852 s/op
    p(100.0000) =     17.852 s/op


# Run complete. Total time: 00:14:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.362 ? 0.184   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564224804793.json
{"wallclock_times": [869.879674973], "core_cycle_counts": [[532651445120], [816557023474], [967371284252], [796805601091]], "aperf_counts": [[530172076486], [816393759634], [967251874742], [796624049558]], "mperf_counts": [[530177819440], [816393736538], [967251913374], [796626411546]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 13:07:54: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_openj9_12.0.1'
[2019-07-27 13:07:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 13:07:55: INFO] 84 executions left in scheduler queue
[2019-07-27 13:07:55: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-07-27 13:07:55: INFO] Estimated completion (next execution): 2019-07-27 13:24:56 (0:17:00 from now)
[2019-07-27 13:07:55: INFO] Reboot in preparation for next execution
[2019-07-27 13:11:23: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 13:24:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.808 s/op
Iteration   2: 16.675 s/op
Iteration   3: 16.627 s/op
Iteration   4: 16.203 s/op
Iteration   5: 15.892 s/op
Iteration   6: 16.121 s/op
Iteration   7: 16.287 s/op
Iteration   8: 16.365 s/op
Iteration   9: 16.082 s/op
Iteration  10: 16.335 s/op
Iteration  11: 16.367 s/op
Iteration  12: 16.474 s/op
Iteration  13: 16.480 s/op
Iteration  14: 16.469 s/op
Iteration  15: 16.409 s/op
Iteration  16: 16.416 s/op
Iteration  17: 15.248 s/op
Iteration  18: 16.140 s/op
Iteration  19: 15.748 s/op
Iteration  20: 16.327 s/op
Iteration  21: 16.485 s/op
Iteration  22: 15.504 s/op
Iteration  23: 16.120 s/op
Iteration  24: 15.659 s/op
Iteration  25: 16.389 s/op
Iteration  26: 16.367 s/op
Iteration  27: 16.094 s/op
Iteration  28: 16.265 s/op
Iteration  29: 16.384 s/op
Iteration  30: 16.378 s/op
Iteration  31: 15.908 s/op
Iteration  32: 15.615 s/op
Iteration  33: 16.288 s/op
Iteration  34: 16.439 s/op
Iteration  35: 16.344 s/op
Iteration  36: 16.378 s/op
Iteration  37: 16.511 s/op
Iteration  38: 16.463 s/op
Iteration  39: 16.331 s/op
Iteration  40: 16.273 s/op
Iteration  41: 15.812 s/op
Iteration  42: 16.364 s/op
Iteration  43: 16.302 s/op
Iteration  44: 16.247 s/op
Iteration  45: 16.061 s/op
Iteration  46: 15.484 s/op
Iteration  47: 16.134 s/op
Iteration  48: 16.562 s/op
Iteration  49: 15.779 s/op
Iteration  50: 16.488 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.198 ?(99.9%) 0.159 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 1 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 1 
    [15.500, 15.625) = 2 
    [15.625, 15.750) = 2 
    [15.750, 15.875) = 3 
    [15.875, 16.000) = 2 
    [16.000, 16.125) = 5 
    [16.125, 16.250) = 4 
    [16.250, 16.375) = 13 
    [16.375, 16.500) = 13 
    [16.500, 16.625) = 2 
    [16.625, 16.750) = 2 
    [16.750, 16.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.248 s/op
     p(50.0000) =     16.314 s/op
     p(90.0000) =     16.488 s/op
     p(95.0000) =     16.591 s/op
     p(99.0000) =     16.675 s/op
     p(99.9000) =     16.675 s/op
     p(99.9900) =     16.675 s/op
     p(99.9990) =     16.675 s/op
     p(99.9999) =     16.675 s/op
    p(100.0000) =     16.675 s/op


# Run complete. Total time: 00:13:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.198 ? 0.159   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564225883620.json
{"wallclock_times": [811.237683026], "core_cycle_counts": [[626612367183], [1034255045246], [454143093562], [791448384419]], "aperf_counts": [[624392324602], [1034093258557], [453892826325], [791319271666]], "mperf_counts": [[624392095332], [1034093267520], [453892762564], [791319310738]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 13:24:54: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9-8u222-b10'
[2019-07-27 13:24:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 13:24:55: INFO] 83 executions left in scheduler queue
[2019-07-27 13:24:55: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-07-27 13:24:55: INFO] Estimated completion (next execution): 2019-07-27 13:40:57 (0:16:01 from now)
[2019-07-27 13:24:55: INFO] Reboot in preparation for next execution
[2019-07-27 13:29:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 13:29:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 13:29:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 13:29:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 13:29:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 13:29:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: 0.003 s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 43 
    [0.000, 0.001) = 5 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564226944567.json
{"wallclock_times": [0.9481730939999977], "core_cycle_counts": [[1934467183], [1401161954], [1320339264], [1359236934]], "aperf_counts": [[1932178505], [1396150050], [1316226288], [1355427508]], "mperf_counts": [[2091583368], [1453448030], [1363936002], [1403073974]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 13:29:05: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_11.0.4'
[2019-07-27 13:29:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 13:29:06: INFO] 82 executions left in scheduler queue
[2019-07-27 13:29:06: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-07-27 13:29:06: INFO] Estimated completion (next execution): 2019-07-27 13:31:37 (0:02:31 from now)
[2019-07-27 13:29:06: INFO] Reboot in preparation for next execution
[2019-07-27 13:33:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 13:33:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 13:33:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 13:33:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 13:33:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 13:33:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: 0.006 s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.001) = 48 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 1 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 
    [0.004, 0.005) = 0 
    [0.005, 0.005) = 0 
    [0.005, 0.006) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.006 s/op
     p(99.9000) =      0.006 s/op
     p(99.9900) =      0.006 s/op
     p(99.9990) =      0.006 s/op
     p(99.9999) =      0.006 s/op
    p(100.0000) =      0.006 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score    Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564227194593.json
{"wallclock_times": [0.9543819470000017], "core_cycle_counts": [[1964740992], [1189209098], [1156771784], [1721972155]], "aperf_counts": [[1962198259], [1183757939], [1152030589], [1718176298]], "mperf_counts": [[2142629826], [1239767176], [1195416936], [1752512098]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 13:33:15: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_11.0.4'
[2019-07-27 13:33:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 13:33:16: INFO] 81 executions left in scheduler queue
[2019-07-27 13:33:16: INFO] Next execution is 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-07-27 13:33:16: INFO] Estimated completion (next execution): 2019-07-27 13:35:47 (0:02:31 from now)
[2019-07-27 13:33:16: INFO] Reboot in preparation for next execution
[2019-07-27 13:37:26: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 13:49:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.030 s/op
Iteration   2: 14.353 s/op
Iteration   3: 14.303 s/op
Iteration   4: 14.262 s/op
Iteration   5: 14.806 s/op
Iteration   6: 15.116 s/op
Iteration   7: 14.606 s/op
Iteration   8: 14.403 s/op
Iteration   9: 14.467 s/op
Iteration  10: 15.135 s/op
Iteration  11: 14.708 s/op
Iteration  12: 14.600 s/op
Iteration  13: 14.906 s/op
Iteration  14: 14.790 s/op
Iteration  15: 14.439 s/op
Iteration  16: 14.367 s/op
Iteration  17: 14.448 s/op
Iteration  18: 14.868 s/op
Iteration  19: 14.706 s/op
Iteration  20: 14.684 s/op
Iteration  21: 14.484 s/op
Iteration  22: 14.475 s/op
Iteration  23: 14.872 s/op
Iteration  24: 14.820 s/op
Iteration  25: 14.981 s/op
Iteration  26: 15.703 s/op
Iteration  27: 14.661 s/op
Iteration  28: 14.872 s/op
Iteration  29: 15.336 s/op
Iteration  30: 14.633 s/op
Iteration  31: 14.821 s/op
Iteration  32: 14.822 s/op
Iteration  33: 14.806 s/op
Iteration  34: 14.849 s/op
Iteration  35: 14.699 s/op
Iteration  36: 14.598 s/op
Iteration  37: 14.817 s/op
Iteration  38: 14.556 s/op
Iteration  39: 14.857 s/op
Iteration  40: 14.601 s/op
Iteration  41: 14.926 s/op
Iteration  42: 14.646 s/op
Iteration  43: 14.826 s/op
Iteration  44: 15.197 s/op
Iteration  45: 14.601 s/op
Iteration  46: 14.838 s/op
Iteration  47: 15.473 s/op
Iteration  48: 14.506 s/op
Iteration  49: 14.721 s/op
Iteration  50: 14.726 s/op


Result "fr.mleduc.logo.LogoInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.754 ?(99.9%) 0.143 s/op

  Histogram, s/op:
    [14.000, 14.125) = 0 
    [14.125, 14.250) = 0 
    [14.250, 14.375) = 4 
    [14.375, 14.500) = 6 
    [14.500, 14.625) = 7 
    [14.625, 14.750) = 9 
    [14.750, 14.875) = 14 
    [14.875, 15.000) = 3 
    [15.000, 15.125) = 2 
    [15.125, 15.250) = 2 
    [15.250, 15.375) = 1 
    [15.375, 15.500) = 1 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 1 
    [15.750, 15.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     14.262 s/op
     p(50.0000) =     14.724 s/op
     p(90.0000) =     15.133 s/op
     p(95.0000) =     15.398 s/op
     p(99.0000) =     15.703 s/op
     p(99.9000) =     15.703 s/op
     p(99.9900) =     15.703 s/op
     p(99.9990) =     15.703 s/op
     p(99.9999) =     15.703 s/op
    p(100.0000) =     15.703 s/op


# Run complete. Total time: 00:12:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  (program)  Mode  Cnt   Score   Error  Units
LogoInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  14.754 ? 0.143   s/op

Benchmark result is saved to /home/benchmarks/results/logo_interpreter_fractal_1564227446690.json
{"wallclock_times": [739.048725902], "core_cycle_counts": [[361314346571], [838336838794], [581701202657], [881594398010]], "aperf_counts": [[359093675496], [838196004747], [581566116738], [881486936531]], "mperf_counts": [[359096307602], [838198256060], [581566198942], [881486940390]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 13:49:45: INFO] Finished 'logo_interpreter_fractal(50)' (default-java variant) under 'logo_interpreter_openj9-8u222-b10'
[2019-07-27 13:49:46: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 13:49:46: INFO] 80 executions left in scheduler queue
[2019-07-27 13:49:46: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-07-27 13:49:46: INFO] Estimated completion (next execution): 2019-07-27 14:04:36 (0:14:49 from now)
[2019-07-27 13:49:46: INFO] Reboot in preparation for next execution
[2019-07-27 13:53:59: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 13:54:00: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.001) = 49 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 
    [0.004, 0.005) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564228439031.json
{"wallclock_times": [1.151739200999998], "core_cycle_counts": [[2231707699], [1991483630], [2086004151], [1102981428]], "aperf_counts": [[2225115759], [1975067359], [2077849594], [1093354856]], "mperf_counts": [[2231487104], [1975791970], [2077857746], [1093363662]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 13:54:00: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_openj9-8u222-b10'
[2019-07-27 13:54:01: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 13:54:01: INFO] 79 executions left in scheduler queue
[2019-07-27 13:54:01: INFO] Next execution is 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-07-27 13:54:01: INFO] Estimated completion (next execution): 2019-07-27 13:56:32 (0:02:31 from now)
[2019-07-27 13:54:01: INFO] Reboot in preparation for next execution
[2019-07-27 13:58:12: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 13:58:12: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 13:58:12: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 13:58:12: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 13:58:12: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 13:58:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmRevisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 42 
    [0.000, 0.001) = 7 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score    Error  Units
FsmRevisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_revisitor_buffers_1564228692535.json
{"wallclock_times": [0.9227821009999957], "core_cycle_counts": [[2003770811], [1295858636], [1339500531], [1141774678]], "aperf_counts": [[2001821527], [1291148362], [1335355040], [1136754285]], "mperf_counts": [[2215092298], [1342982638], [1424738064], [1177458128]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 13:58:13: INFO] Finished 'fsm_revisitor_buffers(50)' (default-java variant) under 'fsm_revisitor_hotspot_12.0.2'
[2019-07-27 13:58:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 13:58:14: INFO] 78 executions left in scheduler queue
[2019-07-27 13:58:14: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-07-27 13:58:14: INFO] Estimated completion (next execution): 2019-07-27 14:00:45 (0:02:31 from now)
[2019-07-27 13:58:14: INFO] Reboot in preparation for next execution
[2019-07-27 14:01:44: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 14:01:44: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 14:01:44: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 14:01:44: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 14:01:44: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 14:01:44: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 14:15:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.882 s/op
Iteration   2: 16.938 s/op
Iteration   3: 16.383 s/op
Iteration   4: 16.740 s/op
Iteration   5: 16.641 s/op
Iteration   6: 16.719 s/op
Iteration   7: 16.607 s/op
Iteration   8: 16.366 s/op
Iteration   9: 16.528 s/op
Iteration  10: 16.796 s/op
Iteration  11: 16.445 s/op
Iteration  12: 16.283 s/op
Iteration  13: 16.895 s/op
Iteration  14: 16.619 s/op
Iteration  15: 16.088 s/op
Iteration  16: 16.570 s/op
Iteration  17: 16.555 s/op
Iteration  18: 16.591 s/op
Iteration  19: 16.505 s/op
Iteration  20: 16.332 s/op
Iteration  21: 16.533 s/op
Iteration  22: 16.627 s/op
Iteration  23: 16.714 s/op
Iteration  24: 16.598 s/op
Iteration  25: 16.297 s/op
Iteration  26: 15.776 s/op
Iteration  27: 16.453 s/op
Iteration  28: 16.372 s/op
Iteration  29: 16.232 s/op
Iteration  30: 16.764 s/op
Iteration  31: 16.490 s/op
Iteration  32: 16.574 s/op
Iteration  33: 15.791 s/op
Iteration  34: 16.408 s/op
Iteration  35: 16.711 s/op
Iteration  36: 16.484 s/op
Iteration  37: 16.519 s/op
Iteration  38: 16.335 s/op
Iteration  39: 16.652 s/op
Iteration  40: 16.745 s/op
Iteration  41: 16.499 s/op
Iteration  42: 16.559 s/op
Iteration  43: 15.848 s/op
Iteration  44: 16.358 s/op
Iteration  45: 16.382 s/op
Iteration  46: 16.596 s/op
Iteration  47: 16.472 s/op
Iteration  48: 16.336 s/op
Iteration  49: 16.410 s/op
Iteration  50: 16.412 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.489 ?(99.9%) 0.123 s/op

  Histogram, s/op:
    [15.000, 15.125) = 0 
    [15.125, 15.250) = 0 
    [15.250, 15.375) = 0 
    [15.375, 15.500) = 0 
    [15.500, 15.625) = 0 
    [15.625, 15.750) = 0 
    [15.750, 15.875) = 3 
    [15.875, 16.000) = 0 
    [16.000, 16.125) = 1 
    [16.125, 16.250) = 1 
    [16.250, 16.375) = 8 
    [16.375, 16.500) = 11 
    [16.500, 16.625) = 13 
    [16.625, 16.750) = 8 
    [16.750, 16.875) = 2 

  Percentiles, s/op:
      p(0.0000) =     15.776 s/op
     p(50.0000) =     16.512 s/op
     p(90.0000) =     16.762 s/op
     p(95.0000) =     16.888 s/op
     p(99.0000) =     16.938 s/op
     p(99.9000) =     16.938 s/op
     p(99.9900) =     16.938 s/op
     p(99.9990) =     16.938 s/op
     p(99.9999) =     16.938 s/op
    p(100.0000) =     16.938 s/op


# Run complete. Total time: 00:13:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.489 ? 0.123   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564228904725.json
{"wallclock_times": [826.2113607590001], "core_cycle_counts": [[477256845674], [866585137660], [1017634123627], [862543732366]], "aperf_counts": [[474824574104], [866429172286], [1017498375059], [862398143782]], "mperf_counts": [[474834399076], [866429143666], [1017499104476], [862398223210]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 14:15:30: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_11.0.4'
[2019-07-27 14:15:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 14:15:31: INFO] 77 executions left in scheduler queue
[2019-07-27 14:15:31: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-07-27 14:15:31: INFO] Estimated completion (next execution): 2019-07-27 14:31:48 (0:16:16 from now)
[2019-07-27 14:15:31: INFO] Reboot in preparation for next execution
[2019-07-27 14:19:42: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 14:19:43: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.002 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 7 
    [0.000, 0.001) = 42 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 1 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.002 s/op
     p(99.9000) =      0.002 s/op
     p(99.9900) =      0.002 s/op
     p(99.9990) =      0.002 s/op
     p(99.9999) =      0.002 s/op
    p(100.0000) =      0.002 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564229982626.json
{"wallclock_times": [1.1329070810000132], "core_cycle_counts": [[2239377945], [2034292635], [1507519222], [1724533069]], "aperf_counts": [[2226360626], [2027320343], [1499026560], [1711566719]], "mperf_counts": [[2229726992], [2027321412], [1499027284], [1711573804]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 14:19:43: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_openj9-8u222-b10'
[2019-07-27 14:19:44: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 14:19:44: INFO] 76 executions left in scheduler queue
[2019-07-27 14:19:44: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-07-27 14:19:44: INFO] Estimated completion (next execution): 2019-07-27 14:22:16 (0:02:31 from now)
[2019-07-27 14:19:44: INFO] Reboot in preparation for next execution
[2019-07-27 14:23:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 44 
    [0.000, 0.001) = 5 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564230235789.json
{"wallclock_times": [0.7794689260000212], "core_cycle_counts": [[1524212057], [1468584793], [935050226], [867682351]], "aperf_counts": [[1521844130], [1465556522], [931230575], [863241118]], "mperf_counts": [[1532747814], [1476002288], [931357350], [863251808]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 14:23:56: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_hotspot-8u222-b10'
[2019-07-27 14:23:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 14:23:57: INFO] 75 executions left in scheduler queue
[2019-07-27 14:23:57: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-07-27 14:23:57: INFO] Estimated completion (next execution): 2019-07-27 14:26:28 (0:02:31 from now)
[2019-07-27 14:23:57: INFO] Reboot in preparation for next execution
[2019-07-27 14:29:50: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.026 s/op
Iteration   2: 1.773 s/op
Iteration   3: 1.987 s/op
Iteration   4: 2.061 s/op
Iteration   5: 2.035 s/op
Iteration   6: 2.030 s/op
Iteration   7: 2.029 s/op
Iteration   8: 2.028 s/op
Iteration   9: 2.040 s/op
Iteration  10: 2.030 s/op
Iteration  11: 2.029 s/op
Iteration  12: 2.027 s/op
Iteration  13: 2.025 s/op
Iteration  14: 2.029 s/op
Iteration  15: 2.028 s/op
Iteration  16: 2.034 s/op
Iteration  17: 2.043 s/op
Iteration  18: 2.031 s/op
Iteration  19: 2.034 s/op
Iteration  20: 2.029 s/op
Iteration  21: 2.022 s/op
Iteration  22: 2.027 s/op
Iteration  23: 2.025 s/op
Iteration  24: 2.026 s/op
Iteration  25: 2.027 s/op
Iteration  26: 2.028 s/op
Iteration  27: 2.021 s/op
Iteration  28: 2.027 s/op
Iteration  29: 2.030 s/op
Iteration  30: 2.025 s/op
Iteration  31: 2.027 s/op
Iteration  32: 2.031 s/op
Iteration  33: 2.029 s/op
Iteration  34: 2.031 s/op
Iteration  35: 2.030 s/op
Iteration  36: 2.027 s/op
Iteration  37: 2.031 s/op
Iteration  38: 2.030 s/op
Iteration  39: 2.033 s/op
Iteration  40: 2.027 s/op
Iteration  41: 2.032 s/op
Iteration  42: 2.028 s/op
Iteration  43: 2.021 s/op
Iteration  44: 2.025 s/op
Iteration  45: 2.029 s/op
Iteration  46: 2.029 s/op
Iteration  47: 2.026 s/op
Iteration  48: 2.029 s/op
Iteration  49: 2.028 s/op
Iteration  50: 2.023 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.023 ?(99.9%) 0.018 s/op

  Histogram, s/op:
    [1.700, 1.725) = 0 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 1 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 0 
    [1.950, 1.975) = 0 
    [1.975, 2.000) = 1 
    [2.000, 2.025) = 6 
    [2.025, 2.050) = 41 
    [2.050, 2.075) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.773 s/op
     p(50.0000) =      2.028 s/op
     p(90.0000) =      2.034 s/op
     p(95.0000) =      2.042 s/op
     p(99.0000) =      2.061 s/op
     p(99.9000) =      2.061 s/op
     p(99.9900) =      2.061 s/op
     p(99.9990) =      2.061 s/op
     p(99.9999) =      2.061 s/op
    p(100.0000) =      2.061 s/op


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.023 ? 0.018   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564230488530.json
{"wallclock_times": [102.035489547], "core_cycle_counts": [[46266260535], [133754013472], [60325620886], [101266479429]], "aperf_counts": [[45939079797], [133719341978], [60294336351], [101246521277]], "mperf_counts": [[45951521230], [133720355018], [60309393720], [101249516626]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 14:29:50: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-07-27 14:29:51: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 14:29:51: INFO] 74 executions left in scheduler queue
[2019-07-27 14:29:51: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-07-27 14:29:51: INFO] Estimated completion (next execution): 2019-07-27 14:34:03 (0:04:12 from now)
[2019-07-27 14:29:51: INFO] Reboot in preparation for next execution
[2019-07-27 14:35:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.340 s/op
Iteration   2: 1.546 s/op
Iteration   3: 1.766 s/op
Iteration   4: 1.647 s/op
Iteration   5: 1.886 s/op
Iteration   6: 2.006 s/op
Iteration   7: 1.995 s/op
Iteration   8: 1.998 s/op
Iteration   9: 1.995 s/op
Iteration  10: 1.996 s/op
Iteration  11: 1.994 s/op
Iteration  12: 1.993 s/op
Iteration  13: 1.999 s/op
Iteration  14: 1.995 s/op
Iteration  15: 1.997 s/op
Iteration  16: 1.997 s/op
Iteration  17: 1.994 s/op
Iteration  18: 1.995 s/op
Iteration  19: 1.995 s/op
Iteration  20: 1.995 s/op
Iteration  21: 1.999 s/op
Iteration  22: 1.997 s/op
Iteration  23: 1.995 s/op
Iteration  24: 2.000 s/op
Iteration  25: 1.996 s/op
Iteration  26: 1.999 s/op
Iteration  27: 1.997 s/op
Iteration  28: 1.997 s/op
Iteration  29: 1.995 s/op
Iteration  30: 1.997 s/op
Iteration  31: 2.000 s/op
Iteration  32: 1.994 s/op
Iteration  33: 1.997 s/op
Iteration  34: 1.998 s/op
Iteration  35: 1.995 s/op
Iteration  36: 1.997 s/op
Iteration  37: 1.995 s/op
Iteration  38: 1.995 s/op
Iteration  39: 1.999 s/op
Iteration  40: 1.996 s/op
Iteration  41: 1.995 s/op
Iteration  42: 2.000 s/op
Iteration  43: 1.996 s/op
Iteration  44: 1.996 s/op
Iteration  45: 1.995 s/op
Iteration  46: 1.996 s/op
Iteration  47: 1.994 s/op
Iteration  48: 1.997 s/op
Iteration  49: 1.993 s/op
Iteration  50: 1.996 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.980 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [1.500, 1.550) = 1 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 0 
    [1.750, 1.800) = 1 
    [1.800, 1.850) = 0 
    [1.850, 1.900) = 1 
    [1.900, 1.950) = 0 
    [1.950, 2.000) = 43 
    [2.000, 2.050) = 2 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 0 
    [2.150, 2.200) = 0 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.546 s/op
     p(50.0000) =      1.996 s/op
     p(90.0000) =      2.000 s/op
     p(95.0000) =      2.003 s/op
     p(99.0000) =      2.340 s/op
     p(99.9000) =      2.340 s/op
     p(99.9900) =      2.340 s/op
     p(99.9990) =      2.340 s/op
     p(99.9999) =      2.340 s/op
    p(100.0000) =      2.340 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.980 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564230844600.json
{"wallclock_times": [99.827545867], "core_cycle_counts": [[95719588461], [134120229061], [65582345355], [35369093220]], "aperf_counts": [[95509979943], [134094785858], [65553627166], [35351424324]], "mperf_counts": [[95519232810], [134094785178], [65553703320], [35373995888]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 14:35:44: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot-8u222-b10'
[2019-07-27 14:35:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 14:35:45: INFO] 73 executions left in scheduler queue
[2019-07-27 14:35:45: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-07-27 14:35:45: INFO] Estimated completion (next execution): 2019-07-27 14:39:55 (0:04:10 from now)
[2019-07-27 14:35:45: INFO] Reboot in preparation for next execution
[2019-07-27 14:47:17: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.965 s/op
Iteration   2: 8.554 s/op
Iteration   3: 9.041 s/op
Iteration   4: 8.873 s/op
Iteration   5: 8.740 s/op
Iteration   6: 8.636 s/op
Iteration   7: 8.680 s/op
Iteration   8: 8.688 s/op
Iteration   9: 8.754 s/op
Iteration  10: 8.768 s/op
Iteration  11: 8.618 s/op
Iteration  12: 8.785 s/op
Iteration  13: 9.462 s/op
Iteration  14: 8.673 s/op
Iteration  15: 8.614 s/op
Iteration  16: 8.775 s/op
Iteration  17: 8.630 s/op
Iteration  18: 8.624 s/op
Iteration  19: 8.781 s/op
Iteration  20: 8.643 s/op
Iteration  21: 8.799 s/op
Iteration  22: 8.642 s/op
Iteration  23: 8.673 s/op
Iteration  24: 9.809 s/op
Iteration  25: 8.566 s/op
Iteration  26: 8.787 s/op
Iteration  27: 8.637 s/op
Iteration  28: 8.653 s/op
Iteration  29: 8.794 s/op
Iteration  30: 8.630 s/op
Iteration  31: 8.681 s/op
Iteration  32: 8.780 s/op
Iteration  33: 8.666 s/op
Iteration  34: 8.623 s/op
Iteration  35: 9.734 s/op
Iteration  36: 8.603 s/op
Iteration  37: 8.785 s/op
Iteration  38: 8.652 s/op
Iteration  39: 8.627 s/op
Iteration  40: 8.840 s/op
Iteration  41: 8.620 s/op
Iteration  42: 8.670 s/op
Iteration  43: 8.790 s/op
Iteration  44: 8.664 s/op
Iteration  45: 8.828 s/op
Iteration  46: 9.529 s/op
Iteration  47: 8.578 s/op
Iteration  48: 8.785 s/op
Iteration  49: 8.615 s/op
Iteration  50: 8.648 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.780 ?(99.9%) 0.137 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 10 
    [ 8.625,  8.750) = 19 
    [ 8.750,  8.875) = 15 
    [ 8.875,  9.000) = 1 
    [ 9.000,  9.125) = 1 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 1 
    [ 9.625,  9.750) = 1 
    [ 9.750,  9.875) = 1 

  Percentiles, s/op:
      p(0.0000) =      8.554 s/op
     p(50.0000) =      8.676 s/op
     p(90.0000) =      9.033 s/op
     p(95.0000) =      9.622 s/op
     p(99.0000) =      9.809 s/op
     p(99.9000) =      9.809 s/op
     p(99.9900) =      9.809 s/op
     p(99.9990) =      9.809 s/op
     p(99.9999) =      9.809 s/op
    p(100.0000) =      9.809 s/op


# Run complete. Total time: 00:07:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt  Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.780 ? 0.137   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564231197469.json
{"wallclock_times": [439.99183580799996], "core_cycle_counts": [[412717609850], [403460187649], [466729994494], [345555287904]], "aperf_counts": [[411597518433], [403355571408], [466692701100], [345518158358]], "mperf_counts": [[411605202364], [403356198890], [466698873810], [345533059198]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 14:47:17: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_graalvm-ce-19.1.1'
[2019-07-27 14:47:18: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 14:47:18: INFO] 72 executions left in scheduler queue
[2019-07-27 14:47:18: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-07-27 14:47:18: INFO] Estimated completion (next execution): 2019-07-27 14:57:08 (0:09:50 from now)
[2019-07-27 14:47:18: INFO] Reboot in preparation for next execution
[2019-07-27 14:51:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.002 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 30 
    [0.000, 0.000) = 19 
    [0.000, 0.000) = 0 
    [0.000, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 1 
    [0.002, 0.002) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.002 s/op
     p(99.9000) =      0.002 s/op
     p(99.9900) =      0.002 s/op
     p(99.9990) =      0.002 s/op
     p(99.9999) =      0.002 s/op
    p(100.0000) =      0.002 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564231891485.json
{"wallclock_times": [0.7762072499999988], "core_cycle_counts": [[1173859498], [1430867419], [1419309693], [851793117]], "aperf_counts": [[1171310265], [1427827598], [1415749093], [847247430]], "mperf_counts": [[1177899558], [1435222044], [1427561502], [847326886]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 14:51:32: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot-8u222-b10'
[2019-07-27 14:51:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 14:51:33: INFO] 71 executions left in scheduler queue
[2019-07-27 14:51:33: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-07-27 14:51:33: INFO] Estimated completion (next execution): 2019-07-27 14:54:04 (0:02:31 from now)
[2019-07-27 14:51:33: INFO] Reboot in preparation for next execution
[2019-07-27 15:03:07: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.055 s/op
Iteration   2: 8.997 s/op
Iteration   3: 8.903 s/op
Iteration   4: 9.016 s/op
Iteration   5: 8.829 s/op
Iteration   6: 8.707 s/op
Iteration   7: 8.845 s/op
Iteration   8: 8.780 s/op
Iteration   9: 8.799 s/op
Iteration  10: 8.671 s/op
Iteration  11: 8.833 s/op
Iteration  12: 9.483 s/op
Iteration  13: 8.747 s/op
Iteration  14: 8.673 s/op
Iteration  15: 8.696 s/op
Iteration  16: 8.830 s/op
Iteration  17: 8.716 s/op
Iteration  18: 8.700 s/op
Iteration  19: 8.863 s/op
Iteration  20: 8.696 s/op
Iteration  21: 8.706 s/op
Iteration  22: 8.721 s/op
Iteration  23: 9.890 s/op
Iteration  24: 8.621 s/op
Iteration  25: 8.713 s/op
Iteration  26: 8.681 s/op
Iteration  27: 8.694 s/op
Iteration  28: 8.730 s/op
Iteration  29: 8.711 s/op
Iteration  30: 8.880 s/op
Iteration  31: 8.711 s/op
Iteration  32: 8.706 s/op
Iteration  33: 8.720 s/op
Iteration  34: 9.979 s/op
Iteration  35: 8.671 s/op
Iteration  36: 8.682 s/op
Iteration  37: 8.717 s/op
Iteration  38: 8.837 s/op
Iteration  39: 8.723 s/op
Iteration  40: 8.693 s/op
Iteration  41: 8.731 s/op
Iteration  42: 8.880 s/op
Iteration  43: 8.736 s/op
Iteration  44: 8.748 s/op
Iteration  45: 8.726 s/op
Iteration  46: 8.954 s/op
Iteration  47: 8.698 s/op
Iteration  48: 8.689 s/op
Iteration  49: 8.713 s/op
Iteration  50: 8.853 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =      8.827 ?(99.9%) 0.133 s/op

  Histogram, s/op:
    [ 8.000,  8.125) = 0 
    [ 8.125,  8.250) = 0 
    [ 8.250,  8.375) = 0 
    [ 8.375,  8.500) = 0 
    [ 8.500,  8.625) = 1 
    [ 8.625,  8.750) = 30 
    [ 8.750,  8.875) = 9 
    [ 8.875,  9.000) = 5 
    [ 9.000,  9.125) = 2 
    [ 9.125,  9.250) = 0 
    [ 9.250,  9.375) = 0 
    [ 9.375,  9.500) = 1 
    [ 9.500,  9.625) = 0 
    [ 9.625,  9.750) = 0 
    [ 9.750,  9.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.621 s/op
     p(50.0000) =      8.724 s/op
     p(90.0000) =      9.014 s/op
     p(95.0000) =      9.666 s/op
     p(99.0000) =      9.979 s/op
     p(99.9000) =      9.979 s/op
     p(99.9900) =      9.979 s/op
     p(99.9990) =      9.979 s/op
     p(99.9999) =      9.979 s/op
    p(100.0000) =      9.979 s/op


# Run complete. Total time: 00:07:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt  Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  8.827 ? 0.133   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564232144577.json
{"wallclock_times": [442.502852848], "core_cycle_counts": [[467116361215], [467116460264], [430356706417], [268800314548]], "aperf_counts": [[466063417051], [467021916418], [430307727047], [268756574475]], "mperf_counts": [[466076058944], [467034215736], [430309989658], [268756974292]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 15:03:07: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_graalvm-ce-19.1.1'
[2019-07-27 15:03:08: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 15:03:08: INFO] 70 executions left in scheduler queue
[2019-07-27 15:03:08: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:03:08: INFO] Estimated completion (next execution): 2019-07-27 15:13:00 (0:09:52 from now)
[2019-07-27 15:03:08: INFO] Reboot in preparation for next execution
[2019-07-27 15:07:20: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 15:13:10: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.732 s
Iteration   2: 7.492 s
Iteration   3: 7.016 s
Iteration   4: 7.096 s
Iteration   5: 7.005 s
Iteration   6: 6.991 s
Iteration   7: 6.978 s
Iteration   8: 6.881 s
Iteration   9: 6.953 s
Iteration  10: 6.920 s
Iteration  11: 6.953 s
Iteration  12: 6.894 s
Iteration  13: 6.857 s
Iteration  14: 6.900 s
Iteration  15: 6.854 s
Iteration  16: 6.838 s
Iteration  17: 6.903 s
Iteration  18: 6.939 s
Iteration  19: 6.992 s
Iteration  20: 6.858 s
Iteration  21: 6.811 s
Iteration  22: 6.973 s
Iteration  23: 6.845 s
Iteration  24: 7.012 s
Iteration  25: 6.924 s
Iteration  26: 6.900 s
Iteration  27: 6.949 s
Iteration  28: 6.949 s
Iteration  29: 6.849 s
Iteration  30: 7.002 s
Iteration  31: 6.843 s
Iteration  32: 6.958 s
Iteration  33: 6.928 s
Iteration  34: 6.860 s
Iteration  35: 6.907 s
Iteration  36: 6.861 s
Iteration  37: 6.788 s
Iteration  38: 6.889 s
Iteration  39: 6.880 s
Iteration  40: 6.940 s
Iteration  41: 6.894 s
Iteration  42: 6.879 s
Iteration  43: 6.892 s
Iteration  44: 6.892 s
Iteration  45: 6.889 s
Iteration  46: 6.919 s
Iteration  47: 6.840 s
Iteration  48: 6.932 s
Iteration  49: 6.872 s
Iteration  50: 6.841 s


Result: 6.959 ?(99.9%) 0.136 s [Average]
  Statistics: (min, avg, max) = (6.788, 6.959, 8.732), stdev = 0.275
  Confidence interval (99.9%): [6.823, 7.096]
  Samples, N = 50
        mean =      6.959 ?(99.9%) 0.136 s
         min =      6.788 s
  p( 0.0000) =      6.788 s
  p(50.0000) =      6.902 s
  p(90.0000) =      7.012 s
  p(95.0000) =      7.274 s
  p(99.0000) =      8.732 s
  p(99.9000) =      8.732 s
  p(99.9900) =      8.732 s
  p(99.9990) =      8.732 s
  p(99.9999) =      8.732 s
         max =      8.732 s


# Run complete. Total time: 00:05:49

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  6.959        0.136      s
{"wallclock_times": [349.74950174900005], "core_cycle_counts": [[485428746696], [264770454340], [205679803956], [270080875136]], "aperf_counts": [[484728589136], [264626323680], [205493021934], [269998247418]], "mperf_counts": [[484732309700], [264626294592], [205493647164], [269998282188]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 15:13:10: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:13:11: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 15:13:11: INFO] 69 executions left in scheduler queue
[2019-07-27 15:13:11: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:13:11: INFO] Estimated completion (next execution): 2019-07-27 15:21:31 (0:08:20 from now)
[2019-07-27 15:13:11: INFO] Reboot in preparation for next execution
[2019-07-27 15:17:36: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 15:24:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.977 s
Iteration   2: 8.602 s
Iteration   3: 8.504 s
Iteration   4: 8.728 s
Iteration   5: 8.700 s
Iteration   6: 8.668 s
Iteration   7: 8.613 s
Iteration   8: 8.731 s
Iteration   9: 8.744 s
Iteration  10: 8.700 s
Iteration  11: 8.692 s
Iteration  12: 8.672 s
Iteration  13: 8.695 s
Iteration  14: 8.696 s
Iteration  15: 8.784 s
Iteration  16: 8.762 s
Iteration  17: 8.744 s
Iteration  18: 8.738 s
Iteration  19: 8.778 s
Iteration  20: 8.753 s
Iteration  21: 8.765 s
Iteration  22: 8.785 s
Iteration  23: 8.695 s
Iteration  24: 8.678 s
Iteration  25: 8.735 s
Iteration  26: 8.739 s
Iteration  27: 8.737 s
Iteration  28: 8.691 s
Iteration  29: 8.704 s
Iteration  30: 8.727 s
Iteration  31: 8.754 s
Iteration  32: 8.672 s
Iteration  33: 8.776 s
Iteration  34: 8.644 s
Iteration  35: 8.724 s
Iteration  36: 8.800 s
Iteration  37: 8.726 s
Iteration  38: 8.703 s
Iteration  39: 8.771 s
Iteration  40: 8.745 s
Iteration  41: 8.804 s
Iteration  42: 8.855 s
Iteration  43: 8.777 s
Iteration  44: 8.789 s
Iteration  45: 8.755 s
Iteration  46: 8.797 s
Iteration  47: 8.771 s
Iteration  48: 8.888 s
Iteration  49: 8.847 s
Iteration  50: 8.743 s


Result: 8.778 ?(99.9%) 0.160 s [Average]
  Statistics: (min, avg, max) = (8.504, 8.778, 10.977), stdev = 0.324
  Confidence interval (99.9%): [8.617, 8.938]
  Samples, N = 50
        mean =      8.778 ?(99.9%) 0.160 s
         min =      8.504 s
  p( 0.0000) =      8.504 s
  p(50.0000) =      8.738 s
  p(90.0000) =      8.804 s
  p(95.0000) =      8.870 s
  p(99.0000) =     10.977 s
  p(99.9000) =     10.977 s
  p(99.9900) =     10.977 s
  p(99.9990) =     10.977 s
  p(99.9999) =     10.977 s
         max =     10.977 s


# Run complete. Total time: 00:07:20

Benchmark                                                                                  (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  8.778        0.160      s
{"wallclock_times": [440.39423314], "core_cycle_counts": [[673309290537], [309903019345], [181502304738], [312824196900]], "aperf_counts": [[672489508894], [309767107419], [181351445833], [312668962291]], "mperf_counts": [[672494039726], [309767210786], [181351924456], [312668926460]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 15:24:57: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:24:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 15:24:57: INFO] 68 executions left in scheduler queue
[2019-07-27 15:24:57: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:24:57: INFO] Estimated completion (next execution): 2019-07-27 15:34:48 (0:09:50 from now)
[2019-07-27 15:24:57: INFO] Reboot in preparation for next execution
[2019-07-27 15:29:10: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 15:34:39: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.021 s
Iteration   2: 7.035 s
Iteration   3: 6.644 s
Iteration   4: 6.609 s
Iteration   5: 6.663 s
Iteration   6: 6.525 s
Iteration   7: 6.477 s
Iteration   8: 6.572 s
Iteration   9: 6.546 s
Iteration  10: 6.465 s
Iteration  11: 6.477 s
Iteration  12: 6.448 s
Iteration  13: 6.462 s
Iteration  14: 6.515 s
Iteration  15: 6.456 s
Iteration  16: 6.444 s
Iteration  17: 6.445 s
Iteration  18: 6.468 s
Iteration  19: 6.414 s
Iteration  20: 6.406 s
Iteration  21: 6.473 s
Iteration  22: 6.472 s
Iteration  23: 6.507 s
Iteration  24: 6.461 s
Iteration  25: 6.423 s
Iteration  26: 6.385 s
Iteration  27: 6.445 s
Iteration  28: 6.578 s
Iteration  29: 6.579 s
Iteration  30: 6.506 s
Iteration  31: 6.481 s
Iteration  32: 6.462 s
Iteration  33: 6.485 s
Iteration  34: 6.515 s
Iteration  35: 6.497 s
Iteration  36: 6.528 s
Iteration  37: 6.455 s
Iteration  38: 6.464 s
Iteration  39: 6.462 s
Iteration  40: 6.455 s
Iteration  41: 6.463 s
Iteration  42: 6.503 s
Iteration  43: 6.479 s
Iteration  44: 6.483 s
Iteration  45: 6.437 s
Iteration  46: 6.456 s
Iteration  47: 6.487 s
Iteration  48: 6.511 s
Iteration  49: 6.532 s
Iteration  50: 6.548 s


Result: 6.532 ?(99.9%) 0.116 s [Average]
  Statistics: (min, avg, max) = (6.385, 6.532, 8.021), stdev = 0.235
  Confidence interval (99.9%): [6.416, 6.649]
  Samples, N = 50
        mean =      6.532 ?(99.9%) 0.116 s
         min =      6.385 s
  p( 0.0000) =      6.385 s
  p(50.0000) =      6.478 s
  p(90.0000) =      6.606 s
  p(95.0000) =      6.830 s
  p(99.0000) =      8.021 s
  p(99.9000) =      8.021 s
  p(99.9900) =      8.021 s
  p(99.9990) =      8.021 s
  p(99.9999) =      8.021 s
         max =      8.021 s


# Run complete. Total time: 00:05:28

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.532        0.116      s
{"wallclock_times": [328.46740282999997], "core_cycle_counts": [[233644683272], [456988570194], [248881089910], [289015513795]], "aperf_counts": [[232619046953], [456873662210], [248780670899], [288876753196]], "mperf_counts": [[232621659778], [456873644080], [248781126512], [288876897928]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 15:34:39: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:34:40: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 15:34:40: INFO] 67 executions left in scheduler queue
[2019-07-27 15:34:40: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:34:40: INFO] Estimated completion (next execution): 2019-07-27 15:42:39 (0:07:59 from now)
[2019-07-27 15:34:40: INFO] Reboot in preparation for next execution
[2019-07-27 15:38:52: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 15:50:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.148 s
Iteration   2: 13.555 s
Iteration   3: 13.552 s
Iteration   4: 13.538 s
Iteration   5: 13.351 s
Iteration   6: 13.692 s
Iteration   7: 13.452 s
Iteration   8: 13.530 s
Iteration   9: 13.510 s
Iteration  10: 14.329 s
Iteration  11: 14.292 s
Iteration  12: 13.708 s
Iteration  13: 13.463 s
Iteration  14: 14.491 s
Iteration  15: 13.600 s
Iteration  16: 13.468 s
Iteration  17: 13.414 s
Iteration  18: 13.521 s
Iteration  19: 13.435 s
Iteration  20: 13.240 s
Iteration  21: 13.276 s
Iteration  22: 13.190 s
Iteration  23: 14.235 s
Iteration  24: 14.314 s
Iteration  25: 13.695 s
Iteration  26: 13.333 s
Iteration  27: 13.360 s
Iteration  28: 13.297 s
Iteration  29: 14.285 s
Iteration  30: 13.178 s
Iteration  31: 13.311 s
Iteration  32: 13.363 s
Iteration  33: 13.289 s
Iteration  34: 13.284 s
Iteration  35: 14.126 s
Iteration  36: 13.246 s
Iteration  37: 13.240 s
Iteration  38: 13.348 s
Iteration  39: 14.217 s
Iteration  40: 13.393 s
Iteration  41: 13.261 s
Iteration  42: 13.300 s
Iteration  43: 13.118 s
Iteration  44: 13.259 s
Iteration  45: 13.249 s
Iteration  46: 14.257 s
Iteration  47: 13.149 s
Iteration  48: 14.381 s
Iteration  49: 14.118 s
Iteration  50: 13.280 s


Result: 13.613 ?(99.9%) 0.227 s [Average]
  Statistics: (min, avg, max) = (13.118, 13.613, 15.148), stdev = 0.458
  Confidence interval (99.9%): [13.386, 13.839]
  Samples, N = 50
        mean =     13.613 ?(99.9%) 0.227 s
         min =     13.118 s
  p( 0.0000) =     13.118 s
  p(50.0000) =     13.444 s
  p(90.0000) =     14.311 s
  p(95.0000) =     14.430 s
  p(99.0000) =     15.148 s
  p(99.9000) =     15.148 s
  p(99.9900) =     15.148 s
  p(99.9990) =     15.148 s
  p(99.9999) =     15.148 s
         max =     15.148 s


# Run complete. Total time: 00:11:21

Benchmark                                                                             (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  13.613        0.227      s
{"wallclock_times": [682.237029463], "core_cycle_counts": [[680962623703], [204754156950], [600044143066], [737132676064]], "aperf_counts": [[679349797593], [204590015979], [599910808528], [736964155228]], "mperf_counts": [[679353717976], [204590000626], [599911016910], [736964103212]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 15:50:14: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_11.0.4'
[2019-07-27 15:50:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 15:50:15: INFO] 66 executions left in scheduler queue
[2019-07-27 15:50:15: INFO] Next execution is 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 15:50:15: INFO] Estimated completion (next execution): 2019-07-27 16:04:08 (0:13:52 from now)
[2019-07-27 15:50:15: INFO] Reboot in preparation for next execution
[2019-07-27 16:02:42: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.849 s
Iteration   2: 10.298 s
Iteration   3: 9.879 s
Iteration   4: 9.889 s
Iteration   5: 9.874 s
Iteration   6: 9.869 s
Iteration   7: 9.867 s
Iteration   8: 9.890 s
Iteration   9: 9.893 s
Iteration  10: 9.876 s
Iteration  11: 9.859 s
Iteration  12: 9.852 s
Iteration  13: 9.863 s
Iteration  14: 9.861 s
Iteration  15: 9.863 s
Iteration  16: 9.836 s
Iteration  17: 9.851 s
Iteration  18: 9.859 s
Iteration  19: 9.846 s
Iteration  20: 9.865 s
Iteration  21: 9.873 s
Iteration  22: 9.857 s
Iteration  23: 9.876 s
Iteration  24: 9.857 s
Iteration  25: 9.863 s
Iteration  26: 9.847 s
Iteration  27: 9.861 s
Iteration  28: 9.848 s
Iteration  29: 9.854 s
Iteration  30: 9.869 s
Iteration  31: 9.857 s
Iteration  32: 9.869 s
Iteration  33: 9.882 s
Iteration  34: 9.846 s
Iteration  35: 9.858 s
Iteration  36: 9.864 s
Iteration  37: 9.874 s
Iteration  38: 9.855 s
Iteration  39: 9.851 s
Iteration  40: 9.858 s
Iteration  41: 9.869 s
Iteration  42: 9.869 s
Iteration  43: 9.856 s
Iteration  44: 9.857 s
Iteration  45: 9.871 s
Iteration  46: 9.863 s
Iteration  47: 9.854 s
Iteration  48: 9.850 s
Iteration  49: 9.853 s
Iteration  50: 9.848 s


Result: 9.871 ?(99.9%) 0.031 s [Average]
  Statistics: (min, avg, max) = (9.836, 9.871, 10.298), stdev = 0.063
  Confidence interval (99.9%): [9.840, 9.902]
  Samples, N = 50
        mean =      9.871 ?(99.9%) 0.031 s
         min =      9.836 s
  p( 0.0000) =      9.836 s
  p(50.0000) =      9.861 s
  p(90.0000) =      9.882 s
  p(95.0000) =      9.891 s
  p(99.0000) =     10.298 s
  p(99.9000) =     10.298 s
  p(99.9900) =     10.298 s
  p(99.9990) =     10.298 s
  p(99.9999) =     10.298 s
         max =     10.298 s


# Run complete. Total time: 00:08:14

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  9.871        0.031      s
{"wallclock_times": [494.471840998], "core_cycle_counts": [[491983059784], [358897231275], [432654954585], [311888450886]], "aperf_counts": [[490959510878], [358812248062], [432617191099], [311851335986]], "mperf_counts": [[490975083708], [358815590300], [432617923350], [311852340052]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 16:02:42: INFO] Finished 'minijava_visitor_fibonacci(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 16:02:43: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 16:02:43: INFO] 65 executions left in scheduler queue
[2019-07-27 16:02:43: INFO] Next execution is 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 16:02:43: INFO] Estimated completion (next execution): 2019-07-27 16:13:28 (0:10:44 from now)
[2019-07-27 16:02:43: INFO] Reboot in preparation for next execution
[2019-07-27 16:11:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.333 s
Iteration   2: 6.053 s
Iteration   3: 5.893 s
Iteration   4: 5.885 s
Iteration   5: 5.915 s
Iteration   6: 5.908 s
Iteration   7: 5.915 s
Iteration   8: 5.926 s
Iteration   9: 5.902 s
Iteration  10: 5.907 s
Iteration  11: 5.916 s
Iteration  12: 5.910 s
Iteration  13: 5.937 s
Iteration  14: 5.919 s
Iteration  15: 5.904 s
Iteration  16: 5.925 s
Iteration  17: 5.895 s
Iteration  18: 5.926 s
Iteration  19: 5.897 s
Iteration  20: 5.886 s
Iteration  21: 5.900 s
Iteration  22: 5.907 s
Iteration  23: 5.899 s
Iteration  24: 5.889 s
Iteration  25: 5.883 s
Iteration  26: 5.879 s
Iteration  27: 5.914 s
Iteration  28: 5.902 s
Iteration  29: 5.895 s
Iteration  30: 5.931 s
Iteration  31: 5.910 s
Iteration  32: 5.891 s
Iteration  33: 5.894 s
Iteration  34: 5.916 s
Iteration  35: 5.913 s
Iteration  36: 5.910 s
Iteration  37: 5.903 s
Iteration  38: 5.909 s
Iteration  39: 5.914 s
Iteration  40: 5.883 s
Iteration  41: 5.894 s
Iteration  42: 5.885 s
Iteration  43: 5.902 s
Iteration  44: 5.909 s
Iteration  45: 5.889 s
Iteration  46: 5.899 s
Iteration  47: 5.898 s
Iteration  48: 5.901 s
Iteration  49: 5.918 s
Iteration  50: 5.901 s


Result: 5.916 ?(99.9%) 0.032 s [Average]
  Statistics: (min, avg, max) = (5.879, 5.916, 6.333), stdev = 0.065
  Confidence interval (99.9%): [5.884, 5.948]
  Samples, N = 50
        mean =      5.916 ?(99.9%) 0.032 s
         min =      5.879 s
  p( 0.0000) =      5.879 s
  p(50.0000) =      5.904 s
  p(90.0000) =      5.926 s
  p(95.0000) =      5.989 s
  p(99.0000) =      6.333 s
  p(99.9000) =      6.333 s
  p(99.9900) =      6.333 s
  p(99.9990) =      6.333 s
  p(99.9999) =      6.333 s
         max =      6.333 s


# Run complete. Total time: 00:04:56

Benchmark                                                                                    (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  5.916        0.032      s
{"wallclock_times": [296.791020429], "core_cycle_counts": [[332406687825], [174770408533], [243287790122], [230185706362]], "aperf_counts": [[331810658019], [174691438008], [243265524688], [230164743876]], "mperf_counts": [[331818046430], [174699609224], [243266530970], [230165562288]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 16:11:53: INFO] Finished 'minijava_visitor_fannkuchredux(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 16:11:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 16:11:54: INFO] 64 executions left in scheduler queue
[2019-07-27 16:11:54: INFO] Next execution is 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 16:11:54: INFO] Estimated completion (next execution): 2019-07-27 16:19:21 (0:07:27 from now)
[2019-07-27 16:11:54: INFO] Reboot in preparation for next execution
[2019-07-27 16:21:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.851 s
Iteration   2: 6.313 s
Iteration   3: 6.220 s
Iteration   4: 6.206 s
Iteration   5: 6.254 s
Iteration   6: 6.277 s
Iteration   7: 6.277 s
Iteration   8: 6.275 s
Iteration   9: 6.247 s
Iteration  10: 6.289 s
Iteration  11: 6.292 s
Iteration  12: 6.307 s
Iteration  13: 6.253 s
Iteration  14: 6.300 s
Iteration  15: 6.307 s
Iteration  16: 6.299 s
Iteration  17: 6.259 s
Iteration  18: 6.291 s
Iteration  19: 6.303 s
Iteration  20: 6.237 s
Iteration  21: 6.293 s
Iteration  22: 6.285 s
Iteration  23: 6.305 s
Iteration  24: 6.235 s
Iteration  25: 6.293 s
Iteration  26: 6.301 s
Iteration  27: 6.297 s
Iteration  28: 6.247 s
Iteration  29: 6.292 s
Iteration  30: 6.296 s
Iteration  31: 6.261 s
Iteration  32: 6.303 s
Iteration  33: 6.307 s
Iteration  34: 6.299 s
Iteration  35: 6.231 s
Iteration  36: 6.302 s
Iteration  37: 6.298 s
Iteration  38: 6.251 s
Iteration  39: 6.305 s
Iteration  40: 6.304 s
Iteration  41: 6.284 s
Iteration  42: 6.251 s
Iteration  43: 6.295 s
Iteration  44: 6.310 s
Iteration  45: 6.257 s
Iteration  46: 6.268 s
Iteration  47: 6.305 s
Iteration  48: 6.312 s
Iteration  49: 6.261 s
Iteration  50: 6.329 s


Result: 6.293 ?(99.9%) 0.042 s [Average]
  Statistics: (min, avg, max) = (6.206, 6.293, 6.851), stdev = 0.085
  Confidence interval (99.9%): [6.251, 6.335]
  Samples, N = 50
        mean =      6.293 ?(99.9%) 0.042 s
         min =      6.206 s
  p( 0.0000) =      6.206 s
  p(50.0000) =      6.292 s
  p(90.0000) =      6.310 s
  p(95.0000) =      6.320 s
  p(99.0000) =      6.851 s
  p(99.9000) =      6.851 s
  p(99.9900) =      6.851 s
  p(99.9990) =      6.851 s
  p(99.9999) =      6.851 s
         max =      6.851 s


# Run complete. Total time: 00:05:15

Benchmark                                                                                 (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.293        0.042      s
{"wallclock_times": [315.77336091399997], "core_cycle_counts": [[262761891674], [262590709094], [274168945705], [296790411366]], "aperf_counts": [[261971171793], [262514008463], [274106994470], [296734148338]], "mperf_counts": [[261980011496], [262518377394], [274107130068], [296734371776]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 16:21:23: INFO] Finished 'minijava_visitor_binarytree(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 16:21:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 16:21:24: INFO] 63 executions left in scheduler queue
[2019-07-27 16:21:24: INFO] Next execution is 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 16:21:24: INFO] Estimated completion (next execution): 2019-07-27 16:29:10 (0:07:46 from now)
[2019-07-27 16:21:24: INFO] Reboot in preparation for next execution
[2019-07-27 16:38:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.277 s
Iteration   2: 15.589 s
Iteration   3: 15.383 s
Iteration   4: 15.331 s
Iteration   5: 15.360 s
Iteration   6: 15.327 s
Iteration   7: 15.335 s
Iteration   8: 15.355 s
Iteration   9: 15.344 s
Iteration  10: 15.394 s
Iteration  11: 15.372 s
Iteration  12: 15.366 s
Iteration  13: 15.354 s
Iteration  14: 15.331 s
Iteration  15: 15.372 s
Iteration  16: 15.333 s
Iteration  17: 15.366 s
Iteration  18: 15.379 s
Iteration  19: 15.376 s
Iteration  20: 15.424 s
Iteration  21: 15.377 s
Iteration  22: 15.409 s
Iteration  23: 15.425 s
Iteration  24: 15.381 s
Iteration  25: 15.376 s
Iteration  26: 15.394 s
Iteration  27: 15.364 s
Iteration  28: 15.371 s
Iteration  29: 15.386 s
Iteration  30: 15.360 s
Iteration  31: 15.351 s
Iteration  32: 15.338 s
Iteration  33: 15.410 s
Iteration  34: 15.377 s
Iteration  35: 15.332 s
Iteration  36: 15.375 s
Iteration  37: 15.366 s
Iteration  38: 15.392 s
Iteration  39: 15.408 s
Iteration  40: 15.391 s
Iteration  41: 15.383 s
Iteration  42: 15.394 s
Iteration  43: 15.338 s
Iteration  44: 15.377 s
Iteration  45: 15.354 s
Iteration  46: 15.378 s
Iteration  47: 15.321 s
Iteration  48: 15.356 s
Iteration  49: 15.335 s
Iteration  50: 15.351 s


Result: 15.371 ?(99.9%) 0.021 s [Average]
  Statistics: (min, avg, max) = (15.277, 15.371, 15.589), stdev = 0.042
  Confidence interval (99.9%): [15.350, 15.392]
  Samples, N = 50
        mean =     15.371 ?(99.9%) 0.021 s
         min =     15.277 s
  p( 0.0000) =     15.277 s
  p(50.0000) =     15.372 s
  p(90.0000) =     15.409 s
  p(95.0000) =     15.425 s
  p(99.0000) =     15.589 s
  p(99.9000) =     15.589 s
  p(99.9900) =     15.589 s
  p(99.9990) =     15.589 s
  p(99.9999) =     15.589 s
         max =     15.589 s


# Run complete. Total time: 00:12:49

Benchmark                                                                           (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaVisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  15.371        0.021      s
{"wallclock_times": [769.4825297870001], "core_cycle_counts": [[336295936979], [322304757177], [924026661897], [895735371602]], "aperf_counts": [[334242675840], [322219247525], [923991715420], [895706804481]], "mperf_counts": [[334249350062], [322233374490], [923991837026], [895707247676]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 16:38:26: INFO] Finished 'minijava_visitor_sort(50)' (default-java variant) under 'minijava_visitor_hotspot-8u222-b10'
[2019-07-27 16:38:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 16:38:26: INFO] 62 executions left in scheduler queue
[2019-07-27 16:38:26: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-07-27 16:38:26: INFO] Estimated completion (next execution): 2019-07-27 16:53:46 (0:15:19 from now)
[2019-07-27 16:38:26: INFO] Reboot in preparation for next execution
[2019-07-27 16:42:39: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 16:42:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: 0.008 s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =      0.001 ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.001) = 48 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 
    [0.004, 0.005) = 1 
    [0.005, 0.005) = 0 
    [0.005, 0.006) = 0 
    [0.006, 0.006) = 0 
    [0.006, 0.007) = 0 
    [0.007, 0.007) = 0 
    [0.007, 0.008) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =      0.002 s/op
     p(99.0000) =      0.008 s/op
     p(99.9000) =      0.008 s/op
     p(99.9900) =      0.008 s/op
     p(99.9990) =      0.008 s/op
     p(99.9999) =      0.008 s/op
    p(100.0000) =      0.008 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt  Score   Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  0.001 ? 0.001   s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564238559067.json
{"wallclock_times": [1.165380099999993], "core_cycle_counts": [[2878243905], [2321555652], [1172559076], [1614474124]], "aperf_counts": [[2873002434], [2309135037], [1163241393], [1602113346]], "mperf_counts": [[2878014770], [2310199102], [1163243308], [1602171584]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 16:42:40: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9-8u222-b10'
[2019-07-27 16:42:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 16:42:41: INFO] 61 executions left in scheduler queue
[2019-07-27 16:42:41: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 16:42:41: INFO] Estimated completion (next execution): 2019-07-27 16:45:12 (0:02:31 from now)
[2019-07-27 16:42:41: INFO] Reboot in preparation for next execution
[2019-07-27 16:46:54: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 16:46:54: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 16:46:54: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 16:46:54: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 16:46:54: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 16:54:55: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.774 s/op
Iteration   2: 9.845 s/op
Iteration   3: 9.695 s/op
Iteration   4: 9.938 s/op
Iteration   5: 9.587 s/op
Iteration   6: 9.626 s/op
Iteration   7: 9.579 s/op
Iteration   8: 9.626 s/op
Iteration   9: 9.585 s/op
Iteration  10: 9.580 s/op
Iteration  11: 9.588 s/op
Iteration  12: 9.582 s/op
Iteration  13: 9.584 s/op
Iteration  14: 9.588 s/op
Iteration  15: 9.579 s/op
Iteration  16: 9.569 s/op
Iteration  17: 9.588 s/op
Iteration  18: 9.583 s/op
Iteration  19: 9.603 s/op
Iteration  20: 9.570 s/op
Iteration  21: 9.582 s/op
Iteration  22: 9.594 s/op
Iteration  23: 9.578 s/op
Iteration  24: 9.560 s/op
Iteration  25: 9.576 s/op
Iteration  26: 9.599 s/op
Iteration  27: 9.616 s/op
Iteration  28: 9.599 s/op
Iteration  29: 9.602 s/op
Iteration  30: 9.584 s/op
Iteration  31: 9.592 s/op
Iteration  32: 9.571 s/op
Iteration  33: 9.587 s/op
Iteration  34: 9.587 s/op
Iteration  35: 9.585 s/op
Iteration  36: 9.564 s/op
Iteration  37: 9.563 s/op
Iteration  38: 9.563 s/op
Iteration  39: 9.603 s/op
Iteration  40: 9.578 s/op
Iteration  41: 9.573 s/op
Iteration  42: 9.621 s/op
Iteration  43: 9.589 s/op
Iteration  44: 9.585 s/op
Iteration  45: 9.571 s/op
Iteration  46: 9.630 s/op
Iteration  47: 9.606 s/op
Iteration  48: 9.590 s/op
Iteration  49: 9.574 s/op
Iteration  50: 9.590 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      9.606 ?(99.9%) 0.034 s/op

  Histogram, s/op:
    [ 9.500,  9.550) = 0 
    [ 9.550,  9.600) = 37 
    [ 9.600,  9.650) = 9 
    [ 9.650,  9.700) = 1 
    [ 9.700,  9.750) = 0 
    [ 9.750,  9.800) = 1 
    [ 9.800,  9.850) = 1 
    [ 9.850,  9.900) = 0 
    [ 9.900,  9.950) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.560 s/op
     p(50.0000) =      9.587 s/op
     p(90.0000) =      9.629 s/op
     p(95.0000) =      9.806 s/op
     p(99.0000) =      9.938 s/op
     p(99.9000) =      9.938 s/op
     p(99.9900) =      9.938 s/op
     p(99.9990) =      9.938 s/op
     p(99.9999) =      9.938 s/op
    p(100.0000) =      9.938 s/op


# Run complete. Total time: 00:08:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.606 ? 0.034   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564238814067.json
{"wallclock_times": [481.26202335000005], "core_cycle_counts": [[178382090325], [457858714814], [317650268164], [600358289200]], "aperf_counts": [[177043147631], [457749218532], [317565433065], [600323675689]], "mperf_counts": [[177292567698], [457809944158], [317624520806], [600369965576]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 16:54:55: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 16:54:56: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 16:54:56: INFO] 60 executions left in scheduler queue
[2019-07-27 16:54:56: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 16:54:56: INFO] Estimated completion (next execution): 2019-07-27 17:05:27 (0:10:31 from now)
[2019-07-27 16:54:56: INFO] Reboot in preparation for next execution
[2019-07-27 16:59:32: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 16:59:32: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 16:59:32: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 16:59:32: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 16:59:32: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 17:12:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.920 s/op
Iteration   2: 16.108 s/op
Iteration   3: 16.158 s/op
Iteration   4: 15.973 s/op
Iteration   5: 16.162 s/op
Iteration   6: 16.106 s/op
Iteration   7: 15.955 s/op
Iteration   8: 15.984 s/op
Iteration   9: 16.007 s/op
Iteration  10: 16.008 s/op
Iteration  11: 15.975 s/op
Iteration  12: 15.943 s/op
Iteration  13: 15.908 s/op
Iteration  14: 15.910 s/op
Iteration  15: 15.852 s/op
Iteration  16: 15.911 s/op
Iteration  17: 15.964 s/op
Iteration  18: 15.965 s/op
Iteration  19: 15.997 s/op
Iteration  20: 15.965 s/op
Iteration  21: 15.976 s/op
Iteration  22: 15.932 s/op
Iteration  23: 15.881 s/op
Iteration  24: 15.916 s/op
Iteration  25: 15.914 s/op
Iteration  26: 16.011 s/op
Iteration  27: 15.944 s/op
Iteration  28: 16.272 s/op
Iteration  29: 15.959 s/op
Iteration  30: 15.943 s/op
Iteration  31: 15.975 s/op
Iteration  32: 15.967 s/op
Iteration  33: 15.950 s/op
Iteration  34: 15.943 s/op
Iteration  35: 15.889 s/op
Iteration  36: 15.878 s/op
Iteration  37: 15.902 s/op
Iteration  38: 15.878 s/op
Iteration  39: 15.956 s/op
Iteration  40: 15.936 s/op
Iteration  41: 15.999 s/op
Iteration  42: 15.959 s/op
Iteration  43: 15.963 s/op
Iteration  44: 15.966 s/op
Iteration  45: 15.913 s/op
Iteration  46: 15.906 s/op
Iteration  47: 15.874 s/op
Iteration  48: 15.877 s/op
Iteration  49: 15.938 s/op
Iteration  50: 15.958 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     15.963 ?(99.9%) 0.039 s/op

  Histogram, s/op:
    [15.800, 15.850) = 0 
    [15.850, 15.900) = 7 
    [15.900, 15.950) = 17 
    [15.950, 16.000) = 18 
    [16.000, 16.050) = 3 
    [16.050, 16.100) = 0 
    [16.100, 16.150) = 2 
    [16.150, 16.200) = 2 
    [16.200, 16.250) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.852 s/op
     p(50.0000) =     15.955 s/op
     p(90.0000) =     16.096 s/op
     p(95.0000) =     16.160 s/op
     p(99.0000) =     16.272 s/op
     p(99.9000) =     16.272 s/op
     p(99.9900) =     16.272 s/op
     p(99.9990) =     16.272 s/op
     p(99.9999) =     16.272 s/op
    p(100.0000) =     16.272 s/op


# Run complete. Total time: 00:13:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  15.963 ? 0.039   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564239572053.json
{"wallclock_times": [799.182390485], "core_cycle_counts": [[457729151562], [719275994360], [536060459417], [861916917081]], "aperf_counts": [[455567032986], [719153323669], [536010588017], [861872911001]], "mperf_counts": [[456221753154], [719424370118], [536124945636], [862836428704]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 17:12:51: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 17:12:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 17:12:52: INFO] 59 executions left in scheduler queue
[2019-07-27 17:12:52: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 17:12:52: INFO] Estimated completion (next execution): 2019-07-27 17:28:41 (0:15:49 from now)
[2019-07-27 17:12:52: INFO] Reboot in preparation for next execution
[2019-07-27 17:17:31: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 17:17:31: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 17:17:31: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 17:17:31: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 17:17:31: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 17:22:53: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.793 s/op
Iteration   2: 6.447 s/op
Iteration   3: 6.427 s/op
Iteration   4: 6.401 s/op
Iteration   5: 6.426 s/op
Iteration   6: 6.378 s/op
Iteration   7: 6.835 s/op
Iteration   8: 6.530 s/op
Iteration   9: 6.373 s/op
Iteration  10: 6.370 s/op
Iteration  11: 6.408 s/op
Iteration  12: 6.397 s/op
Iteration  13: 6.367 s/op
Iteration  14: 6.400 s/op
Iteration  15: 6.364 s/op
Iteration  16: 6.500 s/op
Iteration  17: 6.428 s/op
Iteration  18: 6.387 s/op
Iteration  19: 6.387 s/op
Iteration  20: 6.414 s/op
Iteration  21: 6.387 s/op
Iteration  22: 6.380 s/op
Iteration  23: 6.385 s/op
Iteration  24: 6.365 s/op
Iteration  25: 6.506 s/op
Iteration  26: 6.372 s/op
Iteration  27: 6.367 s/op
Iteration  28: 6.350 s/op
Iteration  29: 6.522 s/op
Iteration  30: 6.353 s/op
Iteration  31: 6.456 s/op
Iteration  32: 6.356 s/op
Iteration  33: 6.438 s/op
Iteration  34: 6.322 s/op
Iteration  35: 6.361 s/op
Iteration  36: 6.402 s/op
Iteration  37: 6.397 s/op
Iteration  38: 6.384 s/op
Iteration  39: 6.508 s/op
Iteration  40: 6.401 s/op
Iteration  41: 6.396 s/op
Iteration  42: 6.394 s/op
Iteration  43: 6.380 s/op
Iteration  44: 6.426 s/op
Iteration  45: 6.368 s/op
Iteration  46: 6.368 s/op
Iteration  47: 6.377 s/op
Iteration  48: 6.365 s/op
Iteration  49: 6.378 s/op
Iteration  50: 6.368 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.417 ?(99.9%) 0.047 s/op

  Histogram, s/op:
    [6.300, 6.350) = 2 
    [6.350, 6.400) = 28 
    [6.400, 6.450) = 12 
    [6.450, 6.500) = 1 
    [6.500, 6.550) = 5 
    [6.550, 6.600) = 0 
    [6.600, 6.650) = 0 
    [6.650, 6.700) = 0 
    [6.700, 6.750) = 0 
    [6.750, 6.800) = 1 
    [6.800, 6.850) = 1 

  Percentiles, s/op:
      p(0.0000) =      6.322 s/op
     p(50.0000) =      6.387 s/op
     p(90.0000) =      6.508 s/op
     p(95.0000) =      6.648 s/op
     p(99.0000) =      6.835 s/op
     p(99.9000) =      6.835 s/op
     p(99.9900) =      6.835 s/op
     p(99.9990) =      6.835 s/op
     p(99.9999) =      6.835 s/op
    p(100.0000) =      6.835 s/op


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  6.417 ? 0.047   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564240651113.json
{"wallclock_times": [321.99840934300005], "core_cycle_counts": [[378407656403], [179201374743], [325943593020], [236906118376]], "aperf_counts": [[377711458719], [179119823884], [325903571641], [236859181640]], "mperf_counts": [[378154303668], [179238098178], [327027453126], [237282254478]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 17:22:53: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 17:22:54: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 17:22:54: INFO] 58 executions left in scheduler queue
[2019-07-27 17:22:54: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 17:22:54: INFO] Estimated completion (next execution): 2019-07-27 17:30:46 (0:07:52 from now)
[2019-07-27 17:22:54: INFO] Reboot in preparation for next execution
[2019-07-27 17:27:13: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 17:27:13: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 17:27:13: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 17:27:13: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 17:27:13: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 17:32:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.123 s/op
Iteration   2: 6.302 s/op
Iteration   3: 6.494 s/op
Iteration   4: 6.139 s/op
Iteration   5: 5.880 s/op
Iteration   6: 6.444 s/op
Iteration   7: 6.637 s/op
Iteration   8: 6.603 s/op
Iteration   9: 6.626 s/op
Iteration  10: 6.632 s/op
Iteration  11: 6.646 s/op
Iteration  12: 6.616 s/op
Iteration  13: 6.632 s/op
Iteration  14: 6.607 s/op
Iteration  15: 6.598 s/op
Iteration  16: 6.626 s/op
Iteration  17: 6.652 s/op
Iteration  18: 6.630 s/op
Iteration  19: 6.644 s/op
Iteration  20: 6.611 s/op
Iteration  21: 6.651 s/op
Iteration  22: 6.636 s/op
Iteration  23: 6.619 s/op
Iteration  24: 6.692 s/op
Iteration  25: 6.637 s/op
Iteration  26: 6.680 s/op
Iteration  27: 6.641 s/op
Iteration  28: 6.630 s/op
Iteration  29: 6.672 s/op
Iteration  30: 6.391 s/op
Iteration  31: 6.641 s/op
Iteration  32: 6.655 s/op
Iteration  33: 6.674 s/op
Iteration  34: 6.663 s/op
Iteration  35: 6.649 s/op
Iteration  36: 6.626 s/op
Iteration  37: 6.626 s/op
Iteration  38: 6.638 s/op
Iteration  39: 6.608 s/op
Iteration  40: 6.637 s/op
Iteration  41: 6.669 s/op
Iteration  42: 6.628 s/op
Iteration  43: 6.677 s/op
Iteration  44: 6.663 s/op
Iteration  45: 6.659 s/op
Iteration  46: 6.650 s/op
Iteration  47: 6.625 s/op
Iteration  48: 6.683 s/op
Iteration  49: 6.624 s/op
Iteration  50: 6.644 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.587 ?(99.9%) 0.078 s/op

  Histogram, s/op:
    [5.800, 5.850) = 0 
    [5.850, 5.900) = 1 
    [5.900, 5.950) = 0 
    [5.950, 6.000) = 0 
    [6.000, 6.050) = 0 
    [6.050, 6.100) = 0 
    [6.100, 6.150) = 2 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 1 
    [6.350, 6.400) = 1 
    [6.400, 6.450) = 1 
    [6.450, 6.500) = 1 
    [6.500, 6.550) = 0 
    [6.550, 6.600) = 1 
    [6.600, 6.650) = 28 

  Percentiles, s/op:
      p(0.0000) =      5.880 s/op
     p(50.0000) =      6.634 s/op
     p(90.0000) =      6.674 s/op
     p(95.0000) =      6.682 s/op
     p(99.0000) =      6.692 s/op
     p(99.9000) =      6.692 s/op
     p(99.9900) =      6.692 s/op
     p(99.9990) =      6.692 s/op
     p(99.9999) =      6.692 s/op
    p(100.0000) =      6.692 s/op


# Run complete. Total time: 00:05:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  6.587 ? 0.078   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564241233923.json
{"wallclock_times": [330.425174927], "core_cycle_counts": [[223309189016], [227053448738], [221741567443], [279365989829]], "aperf_counts": [[222486901068], [226971648896], [221701071580], [279332554094]], "mperf_counts": [[247249199542], [257981916342], [252440046564], [315854711182]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 17:32:44: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot_12.0.2'
[2019-07-27 17:32:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 17:32:45: INFO] 57 executions left in scheduler queue
[2019-07-27 17:32:45: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 17:32:45: INFO] Estimated completion (next execution): 2019-07-27 17:40:45 (0:08:00 from now)
[2019-07-27 17:32:45: INFO] Reboot in preparation for next execution
[2019-07-27 17:43:23: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.224 s
Iteration   2: 6.735 s
Iteration   3: 7.081 s
Iteration   4: 7.211 s
Iteration   5: 7.074 s
Iteration   6: 7.074 s
Iteration   7: 7.040 s
Iteration   8: 7.048 s
Iteration   9: 7.068 s
Iteration  10: 7.058 s
Iteration  11: 7.074 s
Iteration  12: 7.062 s
Iteration  13: 7.047 s
Iteration  14: 7.063 s
Iteration  15: 7.097 s
Iteration  16: 7.096 s
Iteration  17: 6.644 s
Iteration  18: 7.117 s
Iteration  19: 6.812 s
Iteration  20: 7.085 s
Iteration  21: 6.253 s
Iteration  22: 7.079 s
Iteration  23: 7.101 s
Iteration  24: 7.083 s
Iteration  25: 7.103 s
Iteration  26: 7.088 s
Iteration  27: 7.102 s
Iteration  28: 7.084 s
Iteration  29: 7.084 s
Iteration  30: 7.087 s
Iteration  31: 7.076 s
Iteration  32: 7.087 s
Iteration  33: 7.100 s
Iteration  34: 7.089 s
Iteration  35: 7.102 s
Iteration  36: 7.084 s
Iteration  37: 7.102 s
Iteration  38: 7.096 s
Iteration  39: 7.091 s
Iteration  40: 7.097 s
Iteration  41: 7.099 s
Iteration  42: 7.089 s
Iteration  43: 7.103 s
Iteration  44: 7.087 s
Iteration  45: 7.099 s
Iteration  46: 7.088 s
Iteration  47: 7.078 s
Iteration  48: 7.103 s
Iteration  49: 7.106 s
Iteration  50: 7.088 s


Result: 7.053 ?(99.9%) 0.073 s [Average]
  Statistics: (min, avg, max) = (6.253, 7.053, 7.224), stdev = 0.148
  Confidence interval (99.9%): [6.979, 7.126]
  Samples, N = 50
        mean =      7.053 ?(99.9%) 0.073 s
         min =      6.253 s
  p( 0.0000) =      6.253 s
  p(50.0000) =      7.087 s
  p(90.0000) =      7.103 s
  p(95.0000) =      7.159 s
  p(99.0000) =      7.224 s
  p(99.9000) =      7.224 s
  p(99.9900) =      7.224 s
  p(99.9990) =      7.224 s
  p(99.9999) =      7.224 s
         max =      7.224 s


# Run complete. Total time: 00:05:53

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  7.053        0.073      s
{"wallclock_times": [353.8149129589999], "core_cycle_counts": [[143506461901], [237820074571], [326719845967], [310796851976]], "aperf_counts": [[142485583255], [237755136134], [326672973791], [310766939172]], "mperf_counts": [[160696620534], [264325977012], [372675112506], [353229470994]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 17:43:23: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 17:43:24: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 17:43:24: INFO] 56 executions left in scheduler queue
[2019-07-27 17:43:24: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 17:43:24: INFO] Estimated completion (next execution): 2019-07-27 17:51:48 (0:08:24 from now)
[2019-07-27 17:43:24: INFO] Reboot in preparation for next execution
[2019-07-27 17:57:26: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 10.778 s
Iteration   2: 11.086 s
Iteration   3: 10.954 s
Iteration   4: 10.590 s
Iteration   5: 10.602 s
Iteration   6: 10.593 s
Iteration   7: 10.582 s
Iteration   8: 10.592 s
Iteration   9: 10.588 s
Iteration  10: 10.590 s
Iteration  11: 10.572 s
Iteration  12: 10.581 s
Iteration  13: 10.597 s
Iteration  14: 10.571 s
Iteration  15: 10.575 s
Iteration  16: 10.608 s
Iteration  17: 10.607 s
Iteration  18: 10.578 s
Iteration  19: 10.580 s
Iteration  20: 10.592 s
Iteration  21: 10.602 s
Iteration  22: 10.576 s
Iteration  23: 10.605 s
Iteration  24: 10.584 s
Iteration  25: 10.613 s
Iteration  26: 10.581 s
Iteration  27: 10.577 s
Iteration  28: 10.582 s
Iteration  29: 10.600 s
Iteration  30: 10.589 s
Iteration  31: 10.595 s
Iteration  32: 10.599 s
Iteration  33: 10.580 s
Iteration  34: 10.597 s
Iteration  35: 10.574 s
Iteration  36: 10.582 s
Iteration  37: 10.566 s
Iteration  38: 10.594 s
Iteration  39: 10.610 s
Iteration  40: 10.604 s
Iteration  41: 10.563 s
Iteration  42: 10.613 s
Iteration  43: 10.583 s
Iteration  44: 10.578 s
Iteration  45: 10.577 s
Iteration  46: 10.602 s
Iteration  47: 10.611 s
Iteration  48: 10.616 s
Iteration  49: 10.609 s
Iteration  50: 10.606 s


Result: 10.612 ?(99.9%) 0.045 s [Average]
  Statistics: (min, avg, max) = (10.563, 10.612, 11.086), stdev = 0.090
  Confidence interval (99.9%): [10.567, 10.656]
  Samples, N = 50
        mean =     10.612 ?(99.9%) 0.045 s
         min =     10.563 s
  p( 0.0000) =     10.563 s
  p(50.0000) =     10.592 s
  p(90.0000) =     10.613 s
  p(95.0000) =     10.857 s
  p(99.0000) =     11.086 s
  p(99.9000) =     11.086 s
  p(99.9900) =     11.086 s
  p(99.9990) =     11.086 s
  p(99.9999) =     11.086 s
         max =     11.086 s


# Run complete. Total time: 00:08:51

Benchmark                                                                                  (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  10.612        0.045      s
{"wallclock_times": [531.671230627], "core_cycle_counts": [[252523858351], [721086386980], [401514056194], [343354592161]], "aperf_counts": [[251070300541], [720993905684], [401418584608], [343315910611]], "mperf_counts": [[251914382824], [721058563386], [401446381872], [343331487668]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 17:57:26: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 17:57:27: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 17:57:27: INFO] 55 executions left in scheduler queue
[2019-07-27 17:57:27: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 17:57:27: INFO] Estimated completion (next execution): 2019-07-27 18:08:48 (0:11:21 from now)
[2019-07-27 17:57:27: INFO] Reboot in preparation for next execution
[2019-07-27 18:07:25: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.454 s
Iteration   2: 6.845 s
Iteration   3: 6.930 s
Iteration   4: 6.791 s
Iteration   5: 6.904 s
Iteration   6: 6.875 s
Iteration   7: 6.892 s
Iteration   8: 6.752 s
Iteration   9: 6.870 s
Iteration  10: 6.872 s
Iteration  11: 6.733 s
Iteration  12: 6.896 s
Iteration  13: 6.766 s
Iteration  14: 6.859 s
Iteration  15: 6.872 s
Iteration  16: 6.745 s
Iteration  17: 6.868 s
Iteration  18: 6.884 s
Iteration  19: 6.738 s
Iteration  20: 6.872 s
Iteration  21: 6.862 s
Iteration  22: 6.749 s
Iteration  23: 6.854 s
Iteration  24: 6.869 s
Iteration  25: 6.862 s
Iteration  26: 6.836 s
Iteration  27: 6.828 s
Iteration  28: 6.812 s
Iteration  29: 6.815 s
Iteration  30: 6.812 s
Iteration  31: 6.774 s
Iteration  32: 6.813 s
Iteration  33: 6.819 s
Iteration  34: 6.856 s
Iteration  35: 6.717 s
Iteration  36: 6.856 s
Iteration  37: 6.913 s
Iteration  38: 6.729 s
Iteration  39: 6.871 s
Iteration  40: 6.728 s
Iteration  41: 6.861 s
Iteration  42: 6.896 s
Iteration  43: 6.722 s
Iteration  44: 6.890 s
Iteration  45: 6.731 s
Iteration  46: 6.867 s
Iteration  47: 6.871 s
Iteration  48: 6.733 s
Iteration  49: 6.855 s
Iteration  50: 6.845 s


Result: 6.841 ?(99.9%) 0.053 s [Average]
  Statistics: (min, avg, max) = (6.717, 6.841, 7.454), stdev = 0.107
  Confidence interval (99.9%): [6.788, 6.894]
  Samples, N = 50
        mean =      6.841 ?(99.9%) 0.053 s
         min =      6.717 s
  p( 0.0000) =      6.717 s
  p(50.0000) =      6.855 s
  p(90.0000) =      6.896 s
  p(95.0000) =      6.921 s
  p(99.0000) =      7.454 s
  p(99.9000) =      7.454 s
  p(99.9900) =      7.454 s
  p(99.9990) =      7.454 s
  p(99.9999) =      7.454 s
         max =      7.454 s


# Run complete. Total time: 00:05:43

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.841        0.053      s
{"wallclock_times": [343.309003668], "core_cycle_counts": [[279505021635], [243044384782], [340549338992], [362319333132]], "aperf_counts": [[278620090034], [242958505928], [340501768324], [362282104048]], "mperf_counts": [[278915427056], [243012607604], [340546698512], [362445299498]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 18:07:25: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 18:07:26: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 18:07:26: INFO] 54 executions left in scheduler queue
[2019-07-27 18:07:26: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 18:07:26: INFO] Estimated completion (next execution): 2019-07-27 18:15:40 (0:08:13 from now)
[2019-07-27 18:07:26: INFO] Reboot in preparation for next execution
[2019-07-27 18:26:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 15.843 s
Iteration   2: 16.724 s
Iteration   3: 16.918 s
Iteration   4: 16.280 s
Iteration   5: 16.236 s
Iteration   6: 16.248 s
Iteration   7: 16.251 s
Iteration   8: 16.248 s
Iteration   9: 16.288 s
Iteration  10: 16.463 s
Iteration  11: 16.242 s
Iteration  12: 16.287 s
Iteration  13: 17.245 s
Iteration  14: 16.248 s
Iteration  15: 16.267 s
Iteration  16: 16.272 s
Iteration  17: 16.292 s
Iteration  18: 16.237 s
Iteration  19: 16.280 s
Iteration  20: 16.273 s
Iteration  21: 16.253 s
Iteration  22: 16.241 s
Iteration  23: 16.230 s
Iteration  24: 16.265 s
Iteration  25: 16.261 s
Iteration  26: 16.261 s
Iteration  27: 16.300 s
Iteration  28: 16.302 s
Iteration  29: 16.255 s
Iteration  30: 16.223 s
Iteration  31: 16.256 s
Iteration  32: 16.274 s
Iteration  33: 16.232 s
Iteration  34: 16.222 s
Iteration  35: 16.216 s
Iteration  36: 16.275 s
Iteration  37: 16.317 s
Iteration  38: 16.210 s
Iteration  39: 16.238 s
Iteration  40: 16.273 s
Iteration  41: 16.233 s
Iteration  42: 16.241 s
Iteration  43: 16.235 s
Iteration  44: 16.330 s
Iteration  45: 16.218 s
Iteration  46: 16.237 s
Iteration  47: 16.213 s
Iteration  48: 16.291 s
Iteration  49: 16.233 s
Iteration  50: 16.211 s


Result: 16.294 ?(99.9%) 0.095 s [Average]
  Statistics: (min, avg, max) = (15.843, 16.294, 17.245), stdev = 0.192
  Confidence interval (99.9%): [16.199, 16.389]
  Samples, N = 50
        mean =     16.294 ?(99.9%) 0.095 s
         min =     15.843 s
  p( 0.0000) =     15.843 s
  p(50.0000) =     16.254 s
  p(90.0000) =     16.328 s
  p(95.0000) =     16.811 s
  p(99.0000) =     17.245 s
  p(99.9000) =     17.245 s
  p(99.9900) =     17.245 s
  p(99.9990) =     17.245 s
  p(99.9999) =     17.245 s
         max =     17.245 s


# Run complete. Total time: 00:13:35

Benchmark                                                                             (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  16.294        0.095      s
{"wallclock_times": [815.817341551], "core_cycle_counts": [[289977235111], [958014272322], [1096172746803], [285775652114]], "aperf_counts": [[287618936713], [957905833849], [1096110703483], [285688979169]], "mperf_counts": [[287885598686], [957963916158], [1097291913752], [286141315066]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 18:26:36: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_hotspot_11.0.4'
[2019-07-27 18:26:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 18:26:37: INFO] 53 executions left in scheduler queue
[2019-07-27 18:26:37: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-07-27 18:26:37: INFO] Estimated completion (next execution): 2019-07-27 18:42:43 (0:16:06 from now)
[2019-07-27 18:26:37: INFO] Reboot in preparation for next execution
[2019-07-27 18:32:56: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.094 s/op
Iteration   2: 1.716 s/op
Iteration   3: 1.950 s/op
Iteration   4: 2.018 s/op
Iteration   5: 1.934 s/op
Iteration   6: 1.931 s/op
Iteration   7: 1.930 s/op
Iteration   8: 1.936 s/op
Iteration   9: 1.933 s/op
Iteration  10: 1.935 s/op
Iteration  11: 1.930 s/op
Iteration  12: 1.932 s/op
Iteration  13: 1.930 s/op
Iteration  14: 1.927 s/op
Iteration  15: 1.930 s/op
Iteration  16: 1.932 s/op
Iteration  17: 1.942 s/op
Iteration  18: 1.934 s/op
Iteration  19: 1.935 s/op
Iteration  20: 1.927 s/op
Iteration  21: 1.931 s/op
Iteration  22: 1.930 s/op
Iteration  23: 1.932 s/op
Iteration  24: 1.932 s/op
Iteration  25: 1.933 s/op
Iteration  26: 1.930 s/op
Iteration  27: 1.922 s/op
Iteration  28: 1.932 s/op
Iteration  29: 1.934 s/op
Iteration  30: 1.930 s/op
Iteration  31: 1.933 s/op
Iteration  32: 1.935 s/op
Iteration  33: 1.933 s/op
Iteration  34: 1.934 s/op
Iteration  35: 1.935 s/op
Iteration  36: 1.936 s/op
Iteration  37: 1.935 s/op
Iteration  38: 1.929 s/op
Iteration  39: 1.933 s/op
Iteration  40: 1.933 s/op
Iteration  41: 1.933 s/op
Iteration  42: 1.934 s/op
Iteration  43: 1.926 s/op
Iteration  44: 1.933 s/op
Iteration  45: 1.932 s/op
Iteration  46: 1.934 s/op
Iteration  47: 1.937 s/op
Iteration  48: 1.931 s/op
Iteration  49: 1.930 s/op
Iteration  50: 1.938 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.933 ?(99.9%) 0.020 s/op

  Histogram, s/op:
    [1.700, 1.725) = 1 
    [1.725, 1.750) = 0 
    [1.750, 1.775) = 0 
    [1.775, 1.800) = 0 
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 0 
    [1.875, 1.900) = 0 
    [1.900, 1.925) = 1 
    [1.925, 1.950) = 46 
    [1.950, 1.975) = 0 
    [1.975, 2.000) = 0 
    [2.000, 2.025) = 1 
    [2.025, 2.050) = 0 
    [2.050, 2.075) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.716 s/op
     p(50.0000) =      1.933 s/op
     p(90.0000) =      1.938 s/op
     p(95.0000) =      1.980 s/op
     p(99.0000) =      2.094 s/op
     p(99.9000) =      2.094 s/op
     p(99.9900) =      2.094 s/op
     p(99.9990) =      2.094 s/op
     p(99.9999) =      2.094 s/op
    p(100.0000) =      2.094 s/op


# Run complete. Total time: 00:01:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.933 ? 0.020   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564245078624.json
{"wallclock_times": [97.519810356], "core_cycle_counts": [[56781006111], [117549422660], [29320727619], [124397227362]], "aperf_counts": [[56484379764], [117515829800], [29286203441], [124382268002]], "mperf_counts": [[56492019508], [117521050368], [29286776154], [124393671452]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 18:32:56: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-07-27 18:32:57: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 18:32:57: INFO] 52 executions left in scheduler queue
[2019-07-27 18:32:57: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-07-27 18:32:57: INFO] Estimated completion (next execution): 2019-07-27 18:37:04 (0:04:07 from now)
[2019-07-27 18:32:57: INFO] Reboot in preparation for next execution
[2019-07-27 18:38:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.813 s/op
Iteration   2: 1.370 s/op
Iteration   3: 1.707 s/op
Iteration   4: 1.622 s/op
Iteration   5: 1.569 s/op
Iteration   6: 1.580 s/op
Iteration   7: 1.573 s/op
Iteration   8: 1.571 s/op
Iteration   9: 1.572 s/op
Iteration  10: 1.570 s/op
Iteration  11: 1.573 s/op
Iteration  12: 1.576 s/op
Iteration  13: 1.576 s/op
Iteration  14: 1.576 s/op
Iteration  15: 1.572 s/op
Iteration  16: 1.571 s/op
Iteration  17: 1.568 s/op
Iteration  18: 1.572 s/op
Iteration  19: 1.573 s/op
Iteration  20: 1.570 s/op
Iteration  21: 1.570 s/op
Iteration  22: 1.575 s/op
Iteration  23: 1.569 s/op
Iteration  24: 1.568 s/op
Iteration  25: 1.566 s/op
Iteration  26: 1.569 s/op
Iteration  27: 1.567 s/op
Iteration  28: 1.568 s/op
Iteration  29: 1.570 s/op
Iteration  30: 1.574 s/op
Iteration  31: 1.570 s/op
Iteration  32: 1.568 s/op
Iteration  33: 1.568 s/op
Iteration  34: 1.566 s/op
Iteration  35: 1.565 s/op
Iteration  36: 1.572 s/op
Iteration  37: 1.572 s/op
Iteration  38: 1.569 s/op
Iteration  39: 1.569 s/op
Iteration  40: 1.567 s/op
Iteration  41: 1.567 s/op
Iteration  42: 1.567 s/op
Iteration  43: 1.569 s/op
Iteration  44: 1.570 s/op
Iteration  45: 1.570 s/op
Iteration  46: 1.573 s/op
Iteration  47: 1.574 s/op
Iteration  48: 1.566 s/op
Iteration  49: 1.568 s/op
Iteration  50: 1.569 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.575 ?(99.9%) 0.024 s/op

  Histogram, s/op:
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 1 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 46 
    [1.600, 1.650) = 1 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 1 
    [1.750, 1.800) = 0 
    [1.800, 1.850) = 1 
    [1.850, 1.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.370 s/op
     p(50.0000) =      1.570 s/op
     p(90.0000) =      1.576 s/op
     p(95.0000) =      1.660 s/op
     p(99.0000) =      1.813 s/op
     p(99.9000) =      1.813 s/op
     p(99.9900) =      1.813 s/op
     p(99.9990) =      1.813 s/op
     p(99.9999) =      1.813 s/op
    p(100.0000) =      1.813 s/op


# Run complete. Total time: 00:01:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.575 ? 0.024   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564245430353.json
{"wallclock_times": [79.543973349], "core_cycle_counts": [[40262783858], [91700759441], [70101961220], [57900966277]], "aperf_counts": [[40051761899], [91685897953], [70087911362], [57889230788]], "mperf_counts": [[40063041374], [91694222678], [70089694772], [57889361554]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 18:38:29: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot-8u222-b10'
[2019-07-27 18:38:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 18:38:30: INFO] 51 executions left in scheduler queue
[2019-07-27 18:38:30: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 18:38:30: INFO] Estimated completion (next execution): 2019-07-27 18:42:20 (0:03:49 from now)
[2019-07-27 18:38:30: INFO] Reboot in preparation for next execution
[2019-07-27 18:42:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 18:48:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.472 s
Iteration   2: 7.512 s
Iteration   3: 8.903 s
Iteration   4: 7.723 s
Iteration   5: 6.546 s
Iteration   6: 6.502 s
Iteration   7: 6.492 s
Iteration   8: 6.493 s
Iteration   9: 6.556 s
Iteration  10: 6.500 s
Iteration  11: 6.546 s
Iteration  12: 6.440 s
Iteration  13: 6.381 s
Iteration  14: 6.351 s
Iteration  15: 6.378 s
Iteration  16: 6.400 s
Iteration  17: 6.359 s
Iteration  18: 6.426 s
Iteration  19: 6.386 s
Iteration  20: 6.352 s
Iteration  21: 6.397 s
Iteration  22: 6.406 s
Iteration  23: 6.354 s
Iteration  24: 6.365 s
Iteration  25: 6.338 s
Iteration  26: 6.324 s
Iteration  27: 6.364 s
Iteration  28: 6.410 s
Iteration  29: 6.375 s
Iteration  30: 6.353 s
Iteration  31: 6.350 s
Iteration  32: 6.341 s
Iteration  33: 6.388 s
Iteration  34: 6.388 s
Iteration  35: 6.378 s
Iteration  36: 6.370 s
Iteration  37: 6.379 s
Iteration  38: 6.365 s
Iteration  39: 6.386 s
Iteration  40: 6.368 s
Iteration  41: 6.392 s
Iteration  42: 6.362 s
Iteration  43: 6.383 s
Iteration  44: 6.334 s
Iteration  45: 6.357 s
Iteration  46: 6.381 s
Iteration  47: 6.355 s
Iteration  48: 6.348 s
Iteration  49: 6.343 s
Iteration  50: 6.386 s


Result: 6.535 ?(99.9%) 0.253 s [Average]
  Statistics: (min, avg, max) = (6.324, 6.535, 8.903), stdev = 0.511
  Confidence interval (99.9%): [6.282, 6.788]
  Samples, N = 50
        mean =      6.535 ?(99.9%) 0.253 s
         min =      6.324 s
  p( 0.0000) =      6.324 s
  p(50.0000) =      6.381 s
  p(90.0000) =      6.555 s
  p(95.0000) =      8.060 s
  p(99.0000) =      8.903 s
  p(99.9000) =      8.903 s
  p(99.9900) =      8.903 s
  p(99.9990) =      8.903 s
  p(99.9999) =      8.903 s
         max =      8.903 s


# Run complete. Total time: 00:05:28

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  6.535        0.253      s
{"wallclock_times": [328.31038850699997], "core_cycle_counts": [[296304816015], [320932262500], [367865704478], [220214321403]], "aperf_counts": [[295345392783], [320801892632], [367734356714], [220094509617]], "mperf_counts": [[295356841424], [320802977182], [367734531916], [220094499254]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 18:48:15: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 18:48:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 18:48:16: INFO] 50 executions left in scheduler queue
[2019-07-27 18:48:16: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 18:48:16: INFO] Estimated completion (next execution): 2019-07-27 18:56:15 (0:07:58 from now)
[2019-07-27 18:48:16: INFO] Reboot in preparation for next execution
[2019-07-27 18:54:02: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 19:03:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 13.327 s
Iteration   2: 12.003 s
Iteration   3: 11.841 s
Iteration   4: 11.790 s
Iteration   5: 11.774 s
Iteration   6: 11.627 s
Iteration   7: 11.653 s
Iteration   8: 11.625 s
Iteration   9: 11.637 s
Iteration  10: 11.616 s
Iteration  11: 11.582 s
Iteration  12: 11.640 s
Iteration  13: 11.651 s
Iteration  14: 11.589 s
Iteration  15: 11.623 s
Iteration  16: 11.596 s
Iteration  17: 11.618 s
Iteration  18: 11.601 s
Iteration  19: 11.636 s
Iteration  20: 11.624 s
Iteration  21: 11.629 s
Iteration  22: 11.620 s
Iteration  23: 11.606 s
Iteration  24: 11.644 s
Iteration  25: 11.629 s
Iteration  26: 11.678 s
Iteration  27: 11.629 s
Iteration  28: 11.635 s
Iteration  29: 11.622 s
Iteration  30: 11.586 s
Iteration  31: 11.557 s
Iteration  32: 11.628 s
Iteration  33: 11.564 s
Iteration  34: 11.627 s
Iteration  35: 11.644 s
Iteration  36: 11.688 s
Iteration  37: 11.610 s
Iteration  38: 11.597 s
Iteration  39: 11.610 s
Iteration  40: 11.538 s
Iteration  41: 11.547 s
Iteration  42: 11.607 s
Iteration  43: 11.610 s
Iteration  44: 11.619 s
Iteration  45: 11.620 s
Iteration  46: 11.625 s
Iteration  47: 11.609 s
Iteration  48: 11.580 s
Iteration  49: 11.565 s
Iteration  50: 11.613 s


Result: 11.668 ?(99.9%) 0.124 s [Average]
  Statistics: (min, avg, max) = (11.538, 11.668, 13.327), stdev = 0.251
  Confidence interval (99.9%): [11.544, 11.792]
  Samples, N = 50
        mean =     11.668 ?(99.9%) 0.124 s
         min =     11.538 s
  p( 0.0000) =     11.538 s
  p(50.0000) =     11.623 s
  p(90.0000) =     11.765 s
  p(95.0000) =     11.914 s
  p(99.0000) =     13.327 s
  p(99.9000) =     13.327 s
  p(99.9900) =     13.327 s
  p(99.9990) =     13.327 s
  p(99.9999) =     13.327 s
         max =     13.327 s


# Run complete. Total time: 00:09:44

Benchmark                                                                               (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  11.668        0.124      s
{"wallclock_times": [584.6168591539999], "core_cycle_counts": [[372576098251], [408099535492], [646097377117], [512376069348]], "aperf_counts": [[370952368734], [408017016429], [645955516761], [512304911731]], "mperf_counts": [[370957246114], [408022427952], [645956135008], [512305295800]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 19:03:47: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 19:03:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 19:03:48: INFO] 49 executions left in scheduler queue
[2019-07-27 19:03:48: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 19:03:48: INFO] Estimated completion (next execution): 2019-07-27 19:16:02 (0:12:14 from now)
[2019-07-27 19:03:48: INFO] Reboot in preparation for next execution
[2019-07-27 19:10:44: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 19:17:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.276 s
Iteration   2: 8.070 s
Iteration   3: 8.337 s
Iteration   4: 7.799 s
Iteration   5: 7.702 s
Iteration   6: 7.787 s
Iteration   7: 7.799 s
Iteration   8: 7.863 s
Iteration   9: 7.848 s
Iteration  10: 7.779 s
Iteration  11: 7.801 s
Iteration  12: 7.770 s
Iteration  13: 7.835 s
Iteration  14: 7.720 s
Iteration  15: 7.848 s
Iteration  16: 7.804 s
Iteration  17: 7.779 s
Iteration  18: 7.843 s
Iteration  19: 7.749 s
Iteration  20: 7.821 s
Iteration  21: 7.786 s
Iteration  22: 7.871 s
Iteration  23: 7.830 s
Iteration  24: 7.788 s
Iteration  25: 7.817 s
Iteration  26: 7.783 s
Iteration  27: 7.829 s
Iteration  28: 7.751 s
Iteration  29: 7.868 s
Iteration  30: 7.816 s
Iteration  31: 7.737 s
Iteration  32: 7.865 s
Iteration  33: 7.764 s
Iteration  34: 7.831 s
Iteration  35: 7.756 s
Iteration  36: 7.735 s
Iteration  37: 7.830 s
Iteration  38: 7.839 s
Iteration  39: 7.893 s
Iteration  40: 7.779 s
Iteration  41: 7.761 s
Iteration  42: 7.798 s
Iteration  43: 7.803 s
Iteration  44: 7.889 s
Iteration  45: 7.788 s
Iteration  46: 7.815 s
Iteration  47: 7.746 s
Iteration  48: 7.756 s
Iteration  49: 7.822 s
Iteration  50: 7.782 s


Result: 7.847 ?(99.9%) 0.112 s [Average]
  Statistics: (min, avg, max) = (7.702, 7.847, 9.276), stdev = 0.227
  Confidence interval (99.9%): [7.735, 7.959]
  Samples, N = 50
        mean =      7.847 ?(99.9%) 0.112 s
         min =      7.702 s
  p( 0.0000) =      7.702 s
  p(50.0000) =      7.802 s
  p(90.0000) =      7.887 s
  p(95.0000) =      8.190 s
  p(99.0000) =      9.276 s
  p(99.9000) =      9.276 s
  p(99.9900) =      9.276 s
  p(99.9990) =      9.276 s
  p(99.9999) =      9.276 s
         max =      9.276 s


# Run complete. Total time: 00:06:33

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  7.847        0.112      s
{"wallclock_times": [393.84625892400004], "core_cycle_counts": [[588374727909], [191750551950], [341349092792], [201816380167]], "aperf_counts": [[587609878762], [191562482079], [341241135815], [201713640147]], "mperf_counts": [[587611844888], [191563369626], [341241267562], [201713698398]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 19:17:18: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 19:17:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 19:17:19: INFO] 48 executions left in scheduler queue
[2019-07-27 19:17:19: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 19:17:19: INFO] Estimated completion (next execution): 2019-07-27 19:26:23 (0:09:04 from now)
[2019-07-27 19:17:19: INFO] Reboot in preparation for next execution
[2019-07-27 19:24:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.
[2019-07-27 19:36:14: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.990 s
Iteration   2: 13.310 s
Iteration   3: 14.029 s
Iteration   4: 13.040 s
Iteration   5: 13.149 s
Iteration   6: 13.965 s
Iteration   7: 13.150 s
Iteration   8: 13.993 s
Iteration   9: 13.210 s
Iteration  10: 13.974 s
Iteration  11: 13.199 s
Iteration  12: 13.850 s
Iteration  13: 13.151 s
Iteration  14: 14.055 s
Iteration  15: 13.099 s
Iteration  16: 13.117 s
Iteration  17: 14.013 s
Iteration  18: 13.199 s
Iteration  19: 13.158 s
Iteration  20: 13.223 s
Iteration  21: 13.094 s
Iteration  22: 13.193 s
Iteration  23: 13.992 s
Iteration  24: 13.159 s
Iteration  25: 13.229 s
Iteration  26: 13.194 s
Iteration  27: 13.172 s
Iteration  28: 13.967 s
Iteration  29: 13.117 s
Iteration  30: 13.082 s
Iteration  31: 14.096 s
Iteration  32: 13.222 s
Iteration  33: 13.935 s
Iteration  34: 13.915 s
Iteration  35: 13.139 s
Iteration  36: 14.041 s
Iteration  37: 13.202 s
Iteration  38: 13.111 s
Iteration  39: 13.952 s
Iteration  40: 13.107 s
Iteration  41: 13.849 s
Iteration  42: 14.037 s
Iteration  43: 13.957 s
Iteration  44: 13.223 s
Iteration  45: 13.107 s
Iteration  46: 13.092 s
Iteration  47: 13.147 s
Iteration  48: 13.179 s
Iteration  49: 14.174 s
Iteration  50: 13.171 s


Result: 13.495 ?(99.9%) 0.227 s [Average]
  Statistics: (min, avg, max) = (13.040, 13.495, 14.990), stdev = 0.459
  Confidence interval (99.9%): [13.268, 13.722]
  Samples, N = 50
        mean =     13.495 ?(99.9%) 0.227 s
         min =     13.040 s
  p( 0.0000) =     13.040 s
  p(50.0000) =     13.206 s
  p(90.0000) =     14.040 s
  p(95.0000) =     14.131 s
  p(99.0000) =     14.990 s
  p(99.9000) =     14.990 s
  p(99.9900) =     14.990 s
  p(99.9990) =     14.990 s
  p(99.9999) =     14.990 s
         max =     14.990 s


# Run complete. Total time: 00:11:15

Benchmark                                                                          (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  13.495        0.227      s
{"wallclock_times": [676.0419202359999], "core_cycle_counts": [[559773868528], [582219186803], [569738818627], [508663925166]], "aperf_counts": [[557992911917], [582065804193], [569589984935], [508579248013]], "mperf_counts": [[557995072702], [582067571174], [569590014362], [508579460954]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-1.8.0_222"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 19:36:14: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_openj9-8u222-b10'
[2019-07-27 19:36:15: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 19:36:15: INFO] 47 executions left in scheduler queue
[2019-07-27 19:36:15: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-07-27 19:36:15: INFO] Estimated completion (next execution): 2019-07-27 19:50:02 (0:13:46 from now)
[2019-07-27 19:36:15: INFO] Reboot in preparation for next execution
[2019-07-27 19:43:21: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 19:43:21: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 19:43:21: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 19:43:21: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 19:43:21: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 19:45:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.338 s/op
Iteration   2: 2.500 s/op
Iteration   3: 2.054 s/op
Iteration   4: 2.032 s/op
Iteration   5: 1.981 s/op
Iteration   6: 2.100 s/op
Iteration   7: 2.175 s/op
Iteration   8: 2.160 s/op
Iteration   9: 2.011 s/op
Iteration  10: 2.178 s/op
Iteration  11: 2.171 s/op
Iteration  12: 2.141 s/op
Iteration  13: 2.040 s/op
Iteration  14: 2.160 s/op
Iteration  15: 2.158 s/op
Iteration  16: 1.948 s/op
Iteration  17: 2.081 s/op
Iteration  18: 2.161 s/op
Iteration  19: 2.157 s/op
Iteration  20: 2.162 s/op
Iteration  21: 2.164 s/op
Iteration  22: 2.159 s/op
Iteration  23: 2.157 s/op
Iteration  24: 2.026 s/op
Iteration  25: 2.166 s/op
Iteration  26: 2.161 s/op
Iteration  27: 2.158 s/op
Iteration  28: 2.062 s/op
Iteration  29: 2.160 s/op
Iteration  30: 2.154 s/op
Iteration  31: 1.974 s/op
Iteration  32: 2.103 s/op
Iteration  33: 2.161 s/op
Iteration  34: 2.164 s/op
Iteration  35: 2.160 s/op
Iteration  36: 2.169 s/op
Iteration  37: 2.158 s/op
Iteration  38: 2.016 s/op
Iteration  39: 2.053 s/op
Iteration  40: 2.160 s/op
Iteration  41: 2.155 s/op
Iteration  42: 1.962 s/op
Iteration  43: 2.095 s/op
Iteration  44: 2.164 s/op
Iteration  45: 2.155 s/op
Iteration  46: 2.001 s/op
Iteration  47: 2.165 s/op
Iteration  48: 2.158 s/op
Iteration  49: 2.156 s/op
Iteration  50: 2.040 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.125 ?(99.9%) 0.046 s/op

  Histogram, s/op:
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 3 
    [2.000, 2.050) = 7 
    [2.050, 2.100) = 5 
    [2.100, 2.150) = 3 
    [2.150, 2.200) = 29 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 1 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.948 s/op
     p(50.0000) =      2.158 s/op
     p(90.0000) =      2.170 s/op
     p(95.0000) =      2.250 s/op
     p(99.0000) =      2.500 s/op
     p(99.9000) =      2.500 s/op
     p(99.9900) =      2.500 s/op
     p(99.9990) =      2.500 s/op
     p(99.9999) =      2.500 s/op
    p(100.0000) =      2.500 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.125 ? 0.046   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564249401024.json
{"wallclock_times": [107.29047082200003], "core_cycle_counts": [[76642346661], [69629043408], [123557698711], [53337339843]], "aperf_counts": [[76313845034], [69588020223], [123537474785], [53316941728]], "mperf_counts": [[84652028672], [76694138162], [137483939522], [60320538364]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 19:45:08: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-07-27 19:45:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 19:45:09: INFO] 46 executions left in scheduler queue
[2019-07-27 19:45:09: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-07-27 19:45:09: INFO] Estimated completion (next execution): 2019-07-27 19:49:26 (0:04:17 from now)
[2019-07-27 19:45:09: INFO] Reboot in preparation for next execution
[2019-07-27 19:51:00: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 19:51:00: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 19:51:00: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 19:51:00: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 19:51:00: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 19:52:49: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.916 s/op
Iteration   2: 2.211 s/op
Iteration   3: 2.276 s/op
Iteration   4: 2.194 s/op
Iteration   5: 2.483 s/op
Iteration   6: 2.232 s/op
Iteration   7: 2.134 s/op
Iteration   8: 2.142 s/op
Iteration   9: 2.129 s/op
Iteration  10: 2.133 s/op
Iteration  11: 2.134 s/op
Iteration  12: 2.133 s/op
Iteration  13: 2.130 s/op
Iteration  14: 2.134 s/op
Iteration  15: 2.135 s/op
Iteration  16: 2.135 s/op
Iteration  17: 2.149 s/op
Iteration  18: 2.138 s/op
Iteration  19: 2.133 s/op
Iteration  20: 2.139 s/op
Iteration  21: 2.132 s/op
Iteration  22: 2.138 s/op
Iteration  23: 2.134 s/op
Iteration  24: 2.134 s/op
Iteration  25: 2.132 s/op
Iteration  26: 2.133 s/op
Iteration  27: 2.131 s/op
Iteration  28: 2.154 s/op
Iteration  29: 2.131 s/op
Iteration  30: 2.139 s/op
Iteration  31: 2.131 s/op
Iteration  32: 2.134 s/op
Iteration  33: 2.133 s/op
Iteration  34: 2.129 s/op
Iteration  35: 2.156 s/op
Iteration  36: 2.142 s/op
Iteration  37: 2.127 s/op
Iteration  38: 2.134 s/op
Iteration  39: 2.129 s/op
Iteration  40: 2.137 s/op
Iteration  41: 2.129 s/op
Iteration  42: 2.149 s/op
Iteration  43: 2.134 s/op
Iteration  44: 2.136 s/op
Iteration  45: 2.141 s/op
Iteration  46: 2.131 s/op
Iteration  47: 2.145 s/op
Iteration  48: 2.156 s/op
Iteration  49: 2.132 s/op
Iteration  50: 2.128 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.146 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [1.900, 1.950) = 1 
    [1.950, 2.000) = 0 
    [2.000, 2.050) = 0 
    [2.050, 2.100) = 0 
    [2.100, 2.150) = 41 
    [2.150, 2.200) = 4 
    [2.200, 2.250) = 2 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.916 s/op
     p(50.0000) =      2.134 s/op
     p(90.0000) =      2.190 s/op
     p(95.0000) =      2.252 s/op
     p(99.0000) =      2.483 s/op
     p(99.9000) =      2.483 s/op
     p(99.9900) =      2.483 s/op
     p(99.9990) =      2.483 s/op
     p(99.9999) =      2.483 s/op
    p(100.0000) =      2.483 s/op


# Run complete. Total time: 00:01:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.146 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564249860913.json
{"wallclock_times": [108.291958109], "core_cycle_counts": [[114740827861], [69488708457], [88629911686], [80760589096]], "aperf_counts": [[114493831121], [69452951354], [88606359387], [80741801061]], "mperf_counts": [[114863996404], [69516014812], [88718941380], [80884321736]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 19:52:49: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_hotspot_11.0.4'
[2019-07-27 19:52:50: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 19:52:50: INFO] 45 executions left in scheduler queue
[2019-07-27 19:52:50: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-07-27 19:52:50: INFO] Estimated completion (next execution): 2019-07-27 19:57:08 (0:04:18 from now)
[2019-07-27 19:52:50: INFO] Reboot in preparation for next execution
[2019-07-27 19:58:18: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 45 
    [0.000, 0.001) = 4 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 1 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score    Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564250297677.json
{"wallclock_times": [0.8352360959999885], "core_cycle_counts": [[1678235628], [1372048419], [1437317392], [1269571041]], "aperf_counts": [[1675853594], [1368935893], [1432554353], [1266499012]], "mperf_counts": [[1686692894], [1382736352], [1434160350], [1268208988]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 19:58:18: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_graalvm-ce-19.1.1'
[2019-07-27 19:58:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 19:58:19: INFO] 44 executions left in scheduler queue
[2019-07-27 19:58:19: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-07-27 19:58:19: INFO] Estimated completion (next execution): 2019-07-27 20:00:50 (0:02:31 from now)
[2019-07-27 19:58:19: INFO] Reboot in preparation for next execution
[2019-07-27 20:03:58: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 20:03:58: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 20:03:58: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 20:03:58: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 20:03:58: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 20:03:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 20:03:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 0 
    [0.000, 0.001) = 49 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score    Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564250638081.json
{"wallclock_times": [1.515322344000026], "core_cycle_counts": [[3172789477], [2760589270], [2623412746], [1645089370]], "aperf_counts": [[3163535003], [2739132269], [2611559782], [1630450773]], "mperf_counts": [[3168591360], [2739141862], [2611645208], [1630453724]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 20:03:59: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_openj9_12.0.1'
[2019-07-27 20:04:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 20:04:00: INFO] 43 executions left in scheduler queue
[2019-07-27 20:04:00: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:04:00: INFO] Estimated completion (next execution): 2019-07-27 20:06:32 (0:02:32 from now)
[2019-07-27 20:04:00: INFO] Reboot in preparation for next execution
[2019-07-27 20:12:36: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 20:12:36: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 20:12:36: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 20:12:36: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 20:12:36: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 20:12:36: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 20:17:41: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.943 s/op
Iteration   2: 6.625 s/op
Iteration   3: 6.111 s/op
Iteration   4: 6.179 s/op
Iteration   5: 6.042 s/op
Iteration   6: 5.975 s/op
Iteration   7: 6.016 s/op
Iteration   8: 5.959 s/op
Iteration   9: 6.010 s/op
Iteration  10: 5.966 s/op
Iteration  11: 5.980 s/op
Iteration  12: 6.111 s/op
Iteration  13: 5.994 s/op
Iteration  14: 6.095 s/op
Iteration  15: 6.036 s/op
Iteration  16: 6.020 s/op
Iteration  17: 6.063 s/op
Iteration  18: 5.952 s/op
Iteration  19: 6.073 s/op
Iteration  20: 5.997 s/op
Iteration  21: 6.068 s/op
Iteration  22: 5.954 s/op
Iteration  23: 6.113 s/op
Iteration  24: 5.982 s/op
Iteration  25: 5.922 s/op
Iteration  26: 5.917 s/op
Iteration  27: 6.000 s/op
Iteration  28: 5.993 s/op
Iteration  29: 6.004 s/op
Iteration  30: 5.946 s/op
Iteration  31: 6.026 s/op
Iteration  32: 5.956 s/op
Iteration  33: 6.045 s/op
Iteration  34: 5.931 s/op
Iteration  35: 5.924 s/op
Iteration  36: 5.979 s/op
Iteration  37: 5.957 s/op
Iteration  38: 6.029 s/op
Iteration  39: 5.937 s/op
Iteration  40: 6.004 s/op
Iteration  41: 6.000 s/op
Iteration  42: 5.955 s/op
Iteration  43: 5.975 s/op
Iteration  44: 5.959 s/op
Iteration  45: 6.013 s/op
Iteration  46: 5.975 s/op
Iteration  47: 6.043 s/op
Iteration  48: 6.015 s/op
Iteration  49: 5.970 s/op
Iteration  50: 6.040 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.056 ?(99.9%) 0.144 s/op

  Histogram, s/op:
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 25 
    [6.000, 6.250) = 23 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 0 
    [7.250, 7.500) = 0 
    [7.500, 7.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      5.917 s/op
     p(50.0000) =      6.000 s/op
     p(90.0000) =      6.111 s/op
     p(95.0000) =      6.380 s/op
     p(99.0000) =      7.943 s/op
     p(99.9000) =      7.943 s/op
     p(99.9900) =      7.943 s/op
     p(99.9990) =      7.943 s/op
     p(99.9999) =      7.943 s/op
    p(100.0000) =      7.943 s/op


# Run complete. Total time: 00:05:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  6.056 ? 0.144   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564251156664.json
{"wallclock_times": [304.3978689190001], "core_cycle_counts": [[276341122606], [270673715994], [264076199922], [277844051030]], "aperf_counts": [[275568685570], [270576752362], [263972665752], [277773648651]], "mperf_counts": [[275578408068], [270576823778], [263972813308], [277774280408]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 20:17:41: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:17:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 20:17:41: INFO] 42 executions left in scheduler queue
[2019-07-27 20:17:41: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:17:41: INFO] Estimated completion (next execution): 2019-07-27 20:25:16 (0:07:34 from now)
[2019-07-27 20:17:41: INFO] Reboot in preparation for next execution
[2019-07-27 20:22:53: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 20:22:53: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 20:22:53: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 20:22:53: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 20:22:53: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 20:22:54: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 20:31:57: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.388 s/op
Iteration   2: 10.815 s/op
Iteration   3: 11.001 s/op
Iteration   4: 10.827 s/op
Iteration   5: 10.904 s/op
Iteration   6: 10.790 s/op
Iteration   7: 10.866 s/op
Iteration   8: 10.768 s/op
Iteration   9: 10.937 s/op
Iteration  10: 10.883 s/op
Iteration  11: 10.802 s/op
Iteration  12: 10.870 s/op
Iteration  13: 10.785 s/op
Iteration  14: 10.751 s/op
Iteration  15: 10.827 s/op
Iteration  16: 10.783 s/op
Iteration  17: 10.735 s/op
Iteration  18: 10.800 s/op
Iteration  19: 10.712 s/op
Iteration  20: 10.877 s/op
Iteration  21: 10.717 s/op
Iteration  22: 10.922 s/op
Iteration  23: 10.807 s/op
Iteration  24: 10.774 s/op
Iteration  25: 10.822 s/op
Iteration  26: 10.714 s/op
Iteration  27: 10.926 s/op
Iteration  28: 10.927 s/op
Iteration  29: 10.720 s/op
Iteration  30: 10.723 s/op
Iteration  31: 10.701 s/op
Iteration  32: 10.823 s/op
Iteration  33: 10.686 s/op
Iteration  34: 10.782 s/op
Iteration  35: 10.733 s/op
Iteration  36: 10.946 s/op
Iteration  37: 10.840 s/op
Iteration  38: 10.666 s/op
Iteration  39: 10.837 s/op
Iteration  40: 10.734 s/op
Iteration  41: 10.776 s/op
Iteration  42: 10.765 s/op
Iteration  43: 10.840 s/op
Iteration  44: 10.708 s/op
Iteration  45: 10.867 s/op
Iteration  46: 10.732 s/op
Iteration  47: 10.891 s/op
Iteration  48: 10.757 s/op
Iteration  49: 10.678 s/op
Iteration  50: 10.837 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     10.835 ?(99.9%) 0.118 s/op

  Histogram, s/op:
    [10.000, 10.250) = 0 
    [10.250, 10.500) = 0 
    [10.500, 10.750) = 14 
    [10.750, 11.000) = 34 
    [11.000, 11.250) = 1 
    [11.250, 11.500) = 0 
    [11.500, 11.750) = 0 
    [11.750, 12.000) = 0 
    [12.000, 12.250) = 0 
    [12.250, 12.500) = 1 
    [12.500, 12.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     10.666 s/op
     p(50.0000) =     10.801 s/op
     p(90.0000) =     10.927 s/op
     p(95.0000) =     10.971 s/op
     p(99.0000) =     12.388 s/op
     p(99.9000) =     12.388 s/op
     p(99.9900) =     12.388 s/op
     p(99.9990) =     12.388 s/op
     p(99.9999) =     12.388 s/op
    p(100.0000) =     12.388 s/op


# Run complete. Total time: 00:09:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  10.835 ? 0.118   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564251773929.json
{"wallclock_times": [543.4695074020001], "core_cycle_counts": [[729746652990], [283892088161], [475251869992], [301738205746]], "aperf_counts": [[728631742131], [283670347480], [475083478731], [301621268951]], "mperf_counts": [[728634157906], [283670268020], [475083427094], [301623469266]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 20:31:57: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:31:58: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 20:31:58: INFO] 41 executions left in scheduler queue
[2019-07-27 20:31:58: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:31:58: INFO] Estimated completion (next execution): 2019-07-27 20:43:32 (0:11:33 from now)
[2019-07-27 20:31:58: INFO] Reboot in preparation for next execution
[2019-07-27 20:36:16: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 20:36:16: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 20:36:16: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 20:36:16: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 20:36:16: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 20:36:16: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 20:40:19: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.454 s/op
Iteration   2: 5.451 s/op
Iteration   3: 4.762 s/op
Iteration   4: 4.809 s/op
Iteration   5: 4.877 s/op
Iteration   6: 4.867 s/op
Iteration   7: 4.911 s/op
Iteration   8: 4.773 s/op
Iteration   9: 4.810 s/op
Iteration  10: 4.804 s/op
Iteration  11: 4.728 s/op
Iteration  12: 4.751 s/op
Iteration  13: 4.757 s/op
Iteration  14: 4.761 s/op
Iteration  15: 4.787 s/op
Iteration  16: 4.775 s/op
Iteration  17: 4.818 s/op
Iteration  18: 4.705 s/op
Iteration  19: 4.751 s/op
Iteration  20: 4.743 s/op
Iteration  21: 4.770 s/op
Iteration  22: 4.740 s/op
Iteration  23: 4.778 s/op
Iteration  24: 4.762 s/op
Iteration  25: 4.716 s/op
Iteration  26: 4.717 s/op
Iteration  27: 4.701 s/op
Iteration  28: 4.732 s/op
Iteration  29: 4.720 s/op
Iteration  30: 4.765 s/op
Iteration  31: 4.747 s/op
Iteration  32: 4.768 s/op
Iteration  33: 4.773 s/op
Iteration  34: 4.709 s/op
Iteration  35: 4.743 s/op
Iteration  36: 4.713 s/op
Iteration  37: 4.771 s/op
Iteration  38: 4.760 s/op
Iteration  39: 4.768 s/op
Iteration  40: 4.787 s/op
Iteration  41: 4.707 s/op
Iteration  42: 4.715 s/op
Iteration  43: 4.734 s/op
Iteration  44: 4.720 s/op
Iteration  45: 4.715 s/op
Iteration  46: 4.740 s/op
Iteration  47: 4.791 s/op
Iteration  48: 4.808 s/op
Iteration  49: 4.792 s/op
Iteration  50: 4.739 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.810 ?(99.9%) 0.129 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 20 
    [4.750, 5.000) = 28 
    [5.000, 5.250) = 0 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 0 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 1 
    [6.500, 6.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.701 s/op
     p(50.0000) =      4.762 s/op
     p(90.0000) =      4.862 s/op
     p(95.0000) =      5.154 s/op
     p(99.0000) =      6.454 s/op
     p(99.9000) =      6.454 s/op
     p(99.9900) =      6.454 s/op
     p(99.9990) =      6.454 s/op
     p(99.9999) =      6.454 s/op
    p(100.0000) =      6.454 s/op


# Run complete. Total time: 00:04:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.810 ? 0.129   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564252576716.json
{"wallclock_times": [242.280731291], "core_cycle_counts": [[287618841744], [153219834577], [271521085481], [195338313754]], "aperf_counts": [[287015723556], [153073269567], [271438468327], [195224682639]], "mperf_counts": [[287023634404], [153073243568], [271439029152], [195224861646]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 20:40:19: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:40:19: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 20:40:19: INFO] 40 executions left in scheduler queue
[2019-07-27 20:40:19: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:40:19: INFO] Estimated completion (next execution): 2019-07-27 20:46:52 (0:06:32 from now)
[2019-07-27 20:40:19: INFO] Reboot in preparation for next execution
[2019-07-27 20:45:01: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 20:45:01: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 20:45:01: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 20:45:01: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 20:45:01: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 20:45:02: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 20:49:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.629 s/op
Iteration   2: 5.558 s/op
Iteration   3: 4.937 s/op
Iteration   4: 5.040 s/op
Iteration   5: 4.858 s/op
Iteration   6: 4.907 s/op
Iteration   7: 4.835 s/op
Iteration   8: 5.017 s/op
Iteration   9: 4.878 s/op
Iteration  10: 4.797 s/op
Iteration  11: 4.915 s/op
Iteration  12: 4.839 s/op
Iteration  13: 4.961 s/op
Iteration  14: 4.884 s/op
Iteration  15: 4.854 s/op
Iteration  16: 4.934 s/op
Iteration  17: 4.793 s/op
Iteration  18: 4.708 s/op
Iteration  19: 4.885 s/op
Iteration  20: 4.769 s/op
Iteration  21: 4.918 s/op
Iteration  22: 4.805 s/op
Iteration  23: 4.761 s/op
Iteration  24: 4.890 s/op
Iteration  25: 4.791 s/op
Iteration  26: 4.750 s/op
Iteration  27: 4.886 s/op
Iteration  28: 4.789 s/op
Iteration  29: 4.902 s/op
Iteration  30: 4.799 s/op
Iteration  31: 4.774 s/op
Iteration  32: 4.888 s/op
Iteration  33: 4.814 s/op
Iteration  34: 4.912 s/op
Iteration  35: 4.856 s/op
Iteration  36: 4.774 s/op
Iteration  37: 4.881 s/op
Iteration  38: 4.829 s/op
Iteration  39: 4.752 s/op
Iteration  40: 4.851 s/op
Iteration  41: 4.793 s/op
Iteration  42: 4.912 s/op
Iteration  43: 4.843 s/op
Iteration  44: 4.748 s/op
Iteration  45: 4.885 s/op
Iteration  46: 4.781 s/op
Iteration  47: 4.747 s/op
Iteration  48: 4.837 s/op
Iteration  49: 4.767 s/op
Iteration  50: 4.912 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.897 ?(99.9%) 0.138 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 4 
    [4.750, 5.000) = 42 
    [5.000, 5.250) = 2 
    [5.250, 5.500) = 0 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 0 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.708 s/op
     p(50.0000) =      4.852 s/op
     p(90.0000) =      4.959 s/op
     p(95.0000) =      5.273 s/op
     p(99.0000) =      6.629 s/op
     p(99.9000) =      6.629 s/op
     p(99.9900) =      6.629 s/op
     p(99.9990) =      6.629 s/op
     p(99.9999) =      6.629 s/op
    p(100.0000) =      6.629 s/op


# Run complete. Total time: 00:04:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.897 ? 0.138   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564253101861.json
{"wallclock_times": [246.702775792], "core_cycle_counts": [[228948854271], [264584101581], [214562892465], [183054191175]], "aperf_counts": [[228303380599], [264493659574], [214448016408], [182990773783]], "mperf_counts": [[228307560540], [264493642134], [214448233522], [182990771056]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 20:49:08: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_11.0.4'
[2019-07-27 20:49:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 20:49:09: INFO] 39 executions left in scheduler queue
[2019-07-27 20:49:09: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-07-27 20:49:09: INFO] Estimated completion (next execution): 2019-07-27 20:55:46 (0:06:37 from now)
[2019-07-27 20:49:09: INFO] Reboot in preparation for next execution
[2019-07-27 20:53:48: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 20:53:48: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 20:53:48: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 20:53:48: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 20:53:48: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 20:55:36: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.487 s/op
Iteration   2: 2.486 s/op
Iteration   3: 2.088 s/op
Iteration   4: 2.047 s/op
Iteration   5: 2.121 s/op
Iteration   6: 2.126 s/op
Iteration   7: 2.193 s/op
Iteration   8: 2.182 s/op
Iteration   9: 2.183 s/op
Iteration  10: 2.060 s/op
Iteration  11: 2.180 s/op
Iteration  12: 2.174 s/op
Iteration  13: 2.057 s/op
Iteration  14: 2.179 s/op
Iteration  15: 2.172 s/op
Iteration  16: 2.176 s/op
Iteration  17: 1.933 s/op
Iteration  18: 2.049 s/op
Iteration  19: 2.179 s/op
Iteration  20: 2.174 s/op
Iteration  21: 2.074 s/op
Iteration  22: 2.138 s/op
Iteration  23: 2.162 s/op
Iteration  24: 2.175 s/op
Iteration  25: 1.927 s/op
Iteration  26: 2.133 s/op
Iteration  27: 2.178 s/op
Iteration  28: 2.176 s/op
Iteration  29: 2.169 s/op
Iteration  30: 2.175 s/op
Iteration  31: 2.161 s/op
Iteration  32: 2.178 s/op
Iteration  33: 2.134 s/op
Iteration  34: 2.179 s/op
Iteration  35: 2.157 s/op
Iteration  36: 2.174 s/op
Iteration  37: 1.984 s/op
Iteration  38: 2.041 s/op
Iteration  39: 2.156 s/op
Iteration  40: 2.175 s/op
Iteration  41: 2.169 s/op
Iteration  42: 2.042 s/op
Iteration  43: 2.154 s/op
Iteration  44: 2.176 s/op
Iteration  45: 2.172 s/op
Iteration  46: 2.176 s/op
Iteration  47: 2.177 s/op
Iteration  48: 2.174 s/op
Iteration  49: 1.916 s/op
Iteration  50: 2.039 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.142 ?(99.9%) 0.050 s/op

  Histogram, s/op:
    [1.900, 1.950) = 3 
    [1.950, 2.000) = 1 
    [2.000, 2.050) = 5 
    [2.050, 2.100) = 4 
    [2.100, 2.150) = 5 
    [2.150, 2.200) = 30 
    [2.200, 2.250) = 0 
    [2.250, 2.300) = 0 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.916 s/op
     p(50.0000) =      2.171 s/op
     p(90.0000) =      2.182 s/op
     p(95.0000) =      2.325 s/op
     p(99.0000) =      2.487 s/op
     p(99.9000) =      2.487 s/op
     p(99.9900) =      2.487 s/op
     p(99.9990) =      2.487 s/op
     p(99.9999) =      2.487 s/op
    p(100.0000) =      2.487 s/op


# Run complete. Total time: 00:01:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.142 ? 0.050   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564253628537.json
{"wallclock_times": [108.10920160399999], "core_cycle_counts": [[76416489134], [39506366751], [62973228359], [146459453027]], "aperf_counts": [[76110337489], [39465668192], [62945053110], [146441359248]], "mperf_counts": [[84832040724], [43183376884], [70912339166], [162991326844]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 20:55:36: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-07-27 20:55:37: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 20:55:37: INFO] 38 executions left in scheduler queue
[2019-07-27 20:55:37: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-07-27 20:55:37: INFO] Estimated completion (next execution): 2019-07-27 20:59:55 (0:04:18 from now)
[2019-07-27 20:55:37: INFO] Reboot in preparation for next execution
[2019-07-27 21:00:18: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 21:00:18: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 21:00:18: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 21:00:18: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 21:00:18: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 21:01:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.084 s/op
Iteration   2: 2.025 s/op
Iteration   3: 1.984 s/op
Iteration   4: 2.017 s/op
Iteration   5: 1.982 s/op
Iteration   6: 2.093 s/op
Iteration   7: 1.879 s/op
Iteration   8: 1.884 s/op
Iteration   9: 1.880 s/op
Iteration  10: 1.877 s/op
Iteration  11: 1.877 s/op
Iteration  12: 1.877 s/op
Iteration  13: 1.876 s/op
Iteration  14: 1.877 s/op
Iteration  15: 1.877 s/op
Iteration  16: 1.879 s/op
Iteration  17: 1.878 s/op
Iteration  18: 1.881 s/op
Iteration  19: 1.880 s/op
Iteration  20: 1.876 s/op
Iteration  21: 1.876 s/op
Iteration  22: 1.881 s/op
Iteration  23: 1.881 s/op
Iteration  24: 1.877 s/op
Iteration  25: 1.876 s/op
Iteration  26: 1.876 s/op
Iteration  27: 1.877 s/op
Iteration  28: 1.877 s/op
Iteration  29: 1.880 s/op
Iteration  30: 1.877 s/op
Iteration  31: 1.877 s/op
Iteration  32: 1.877 s/op
Iteration  33: 1.878 s/op
Iteration  34: 1.876 s/op
Iteration  35: 1.881 s/op
Iteration  36: 1.879 s/op
Iteration  37: 1.878 s/op
Iteration  38: 1.878 s/op
Iteration  39: 1.877 s/op
Iteration  40: 1.876 s/op
Iteration  41: 1.881 s/op
Iteration  42: 1.878 s/op
Iteration  43: 1.877 s/op
Iteration  44: 1.875 s/op
Iteration  45: 1.874 s/op
Iteration  46: 1.878 s/op
Iteration  47: 1.879 s/op
Iteration  48: 1.880 s/op
Iteration  49: 1.877 s/op
Iteration  50: 1.878 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.896 ?(99.9%) 0.026 s/op

  Histogram, s/op:
    [1.800, 1.825) = 0 
    [1.825, 1.850) = 0 
    [1.850, 1.875) = 1 
    [1.875, 1.900) = 43 
    [1.900, 1.925) = 0 
    [1.925, 1.950) = 0 
    [1.950, 1.975) = 0 
    [1.975, 2.000) = 2 
    [2.000, 2.025) = 2 
    [2.025, 2.050) = 0 
    [2.050, 2.075) = 0 
    [2.075, 2.100) = 2 

  Percentiles, s/op:
      p(0.0000) =      1.874 s/op
     p(50.0000) =      1.878 s/op
     p(90.0000) =      1.984 s/op
     p(95.0000) =      2.052 s/op
     p(99.0000) =      2.093 s/op
     p(99.9000) =      2.093 s/op
     p(99.9900) =      2.093 s/op
     p(99.9990) =      2.093 s/op
     p(99.9999) =      2.093 s/op
    p(100.0000) =      2.093 s/op


# Run complete. Total time: 00:01:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.896 ? 0.026   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564254018563.json
{"wallclock_times": [95.767584855], "core_cycle_counts": [[86539919507], [60219771187], [90605683245], [75849929407]], "aperf_counts": [[86311196376], [60179925848], [90576975268], [75830780415]], "mperf_counts": [[86826220038], [60505576456], [90969403330], [76004627342]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 21:01:54: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_hotspot_12.0.2'
[2019-07-27 21:01:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:01:55: INFO] 37 executions left in scheduler queue
[2019-07-27 21:01:55: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-07-27 21:01:55: INFO] Estimated completion (next execution): 2019-07-27 21:06:01 (0:04:06 from now)
[2019-07-27 21:01:55: INFO] Reboot in preparation for next execution
[2019-07-27 21:07:15: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.690 s/op
Iteration   2: 1.367 s/op
Iteration   3: 1.321 s/op
Iteration   4: 1.407 s/op
Iteration   5: 1.320 s/op
Iteration   6: 1.326 s/op
Iteration   7: 1.319 s/op
Iteration   8: 1.319 s/op
Iteration   9: 1.319 s/op
Iteration  10: 1.322 s/op
Iteration  11: 1.324 s/op
Iteration  12: 1.322 s/op
Iteration  13: 1.321 s/op
Iteration  14: 1.326 s/op
Iteration  15: 1.321 s/op
Iteration  16: 1.330 s/op
Iteration  17: 1.317 s/op
Iteration  18: 1.315 s/op
Iteration  19: 1.318 s/op
Iteration  20: 1.320 s/op
Iteration  21: 1.328 s/op
Iteration  22: 1.321 s/op
Iteration  23: 1.317 s/op
Iteration  24: 1.318 s/op
Iteration  25: 1.317 s/op
Iteration  26: 1.320 s/op
Iteration  27: 1.320 s/op
Iteration  28: 1.316 s/op
Iteration  29: 1.317 s/op
Iteration  30: 1.317 s/op
Iteration  31: 1.320 s/op
Iteration  32: 1.316 s/op
Iteration  33: 1.313 s/op
Iteration  34: 1.322 s/op
Iteration  35: 1.322 s/op
Iteration  36: 1.321 s/op
Iteration  37: 1.323 s/op
Iteration  38: 1.322 s/op
Iteration  39: 1.318 s/op
Iteration  40: 1.323 s/op
Iteration  41: 1.322 s/op
Iteration  42: 1.325 s/op
Iteration  43: 1.321 s/op
Iteration  44: 1.318 s/op
Iteration  45: 1.319 s/op
Iteration  46: 1.312 s/op
Iteration  47: 1.313 s/op
Iteration  48: 1.317 s/op
Iteration  49: 1.318 s/op
Iteration  50: 1.321 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.330 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.300, 1.325) = 42 
    [1.325, 1.350) = 5 
    [1.350, 1.375) = 1 
    [1.375, 1.400) = 0 
    [1.400, 1.425) = 1 
    [1.425, 1.450) = 0 
    [1.450, 1.475) = 0 
    [1.475, 1.500) = 0 
    [1.500, 1.525) = 0 
    [1.525, 1.550) = 0 
    [1.550, 1.575) = 0 
    [1.575, 1.600) = 0 
    [1.600, 1.625) = 0 
    [1.625, 1.650) = 0 
    [1.650, 1.675) = 0 
    [1.675, 1.700) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.312 s/op
     p(50.0000) =      1.320 s/op
     p(90.0000) =      1.328 s/op
     p(95.0000) =      1.385 s/op
     p(99.0000) =      1.690 s/op
     p(99.9000) =      1.690 s/op
     p(99.9900) =      1.690 s/op
     p(99.9990) =      1.690 s/op
     p(99.9999) =      1.690 s/op
    p(100.0000) =      1.690 s/op


# Run complete. Total time: 00:01:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.330 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564254368525.json
{"wallclock_times": [67.417111691], "core_cycle_counts": [[80920073797], [91321650026], [24321324650], [29284156858]], "aperf_counts": [[80747558643], [91292390110], [24288237779], [29263971686]], "mperf_counts": [[80763730652], [91309851670], [24290762664], [29267525186]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 21:07:15: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-07-27 21:07:16: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:07:16: INFO] 36 executions left in scheduler queue
[2019-07-27 21:07:16: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-07-27 21:07:16: INFO] Estimated completion (next execution): 2019-07-27 21:10:54 (0:03:37 from now)
[2019-07-27 21:07:16: INFO] Reboot in preparation for next execution
[2019-07-27 21:12:31: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.567 s/op
Iteration   2: 1.168 s/op
Iteration   3: 1.158 s/op
Iteration   4: 1.256 s/op
Iteration   5: 1.146 s/op
Iteration   6: 1.146 s/op
Iteration   7: 1.146 s/op
Iteration   8: 1.146 s/op
Iteration   9: 1.146 s/op
Iteration  10: 1.146 s/op
Iteration  11: 1.146 s/op
Iteration  12: 1.147 s/op
Iteration  13: 1.145 s/op
Iteration  14: 1.147 s/op
Iteration  15: 1.147 s/op
Iteration  16: 1.147 s/op
Iteration  17: 1.147 s/op
Iteration  18: 1.147 s/op
Iteration  19: 1.145 s/op
Iteration  20: 1.148 s/op
Iteration  21: 1.146 s/op
Iteration  22: 1.146 s/op
Iteration  23: 1.148 s/op
Iteration  24: 1.144 s/op
Iteration  25: 1.146 s/op
Iteration  26: 1.148 s/op
Iteration  27: 1.146 s/op
Iteration  28: 1.146 s/op
Iteration  29: 1.146 s/op
Iteration  30: 1.145 s/op
Iteration  31: 1.144 s/op
Iteration  32: 1.148 s/op
Iteration  33: 1.153 s/op
Iteration  34: 1.145 s/op
Iteration  35: 1.146 s/op
Iteration  36: 1.148 s/op
Iteration  37: 1.147 s/op
Iteration  38: 1.147 s/op
Iteration  39: 1.147 s/op
Iteration  40: 1.148 s/op
Iteration  41: 1.144 s/op
Iteration  42: 1.146 s/op
Iteration  43: 1.145 s/op
Iteration  44: 1.145 s/op
Iteration  45: 1.147 s/op
Iteration  46: 1.145 s/op
Iteration  47: 1.142 s/op
Iteration  48: 1.142 s/op
Iteration  49: 1.143 s/op
Iteration  50: 1.145 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.157 ?(99.9%) 0.030 s/op

  Histogram, s/op:
    [1.100, 1.150) = 45 
    [1.150, 1.200) = 3 
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 1 
    [1.300, 1.350) = 0 
    [1.350, 1.400) = 0 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.142 s/op
     p(50.0000) =      1.146 s/op
     p(90.0000) =      1.153 s/op
     p(95.0000) =      1.208 s/op
     p(99.0000) =      1.567 s/op
     p(99.9000) =      1.567 s/op
     p(99.9900) =      1.567 s/op
     p(99.9990) =      1.567 s/op
     p(99.9999) =      1.567 s/op
    p(100.0000) =      1.567 s/op


# Run complete. Total time: 00:00:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.157 ? 0.030   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564254692899.json
{"wallclock_times": [58.71009699000001], "core_cycle_counts": [[19668363840], [59534148342], [56959747289], [57614349203]], "aperf_counts": [[19506434683], [59513378622], [56941878238], [57601324070]], "mperf_counts": [[19520815122], [59514900968], [56942664100], [57604747644]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 21:12:31: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_graalvm-ee-19.1.1'
[2019-07-27 21:12:32: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:12:32: INFO] 35 executions left in scheduler queue
[2019-07-27 21:12:32: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-07-27 21:12:32: INFO] Estimated completion (next execution): 2019-07-27 21:16:01 (0:03:28 from now)
[2019-07-27 21:12:32: INFO] Reboot in preparation for next execution
[2019-07-27 21:16:47: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit GraalVM CE 19.1.1, 25.222-b08-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.002 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 25 
    [0.000, 0.000) = 24 
    [0.000, 0.000) = 0 
    [0.000, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 1 
    [0.002, 0.002) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.002 s/op
     p(99.9000) =      0.002 s/op
     p(99.9900) =      0.002 s/op
     p(99.9990) =      0.002 s/op
     p(99.9999) =      0.002 s/op
    p(100.0000) =      0.002 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564255006549.json
{"wallclock_times": [0.8319141059999993], "core_cycle_counts": [[1695830041], [1341530352], [1449042648], [1198756598]], "aperf_counts": [[1693222780], [1337669253], [1445558285], [1193613530]], "mperf_counts": [[1708248986], [1338106788], [1459615942], [1198031928]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 21:16:47: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ce-19.1.1'
[2019-07-27 21:16:48: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:16:48: INFO] 34 executions left in scheduler queue
[2019-07-27 21:16:48: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-07-27 21:16:48: INFO] Estimated completion (next execution): 2019-07-27 21:19:19 (0:02:31 from now)
[2019-07-27 21:16:48: INFO] Reboot in preparation for next execution
[2019-07-27 21:21:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 21:21:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 21:21:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 21:21:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 21:21:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 21:21:03: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.001 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 23 
    [0.000, 0.000) = 26 
    [0.000, 0.000) = 0 
    [0.000, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 1 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.001 s/op
     p(99.9000) =      0.001 s/op
     p(99.9900) =      0.001 s/op
     p(99.9990) =      0.001 s/op
     p(99.9999) =      0.001 s/op
    p(100.0000) =      0.001 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564255262562.json
{"wallclock_times": [0.9123067359999766], "core_cycle_counts": [[2126283772], [1475051710], [1011531865], [1159961123]], "aperf_counts": [[2124687274], [1469924367], [1006786406], [1155455110]], "mperf_counts": [[2387408288], [1520897068], [1032806184], [1205859632]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 21:21:03: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_hotspot_12.0.2'
[2019-07-27 21:21:04: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:21:04: INFO] 33 executions left in scheduler queue
[2019-07-27 21:21:04: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-07-27 21:21:04: INFO] Estimated completion (next execution): 2019-07-27 21:23:35 (0:02:31 from now)
[2019-07-27 21:21:04: INFO] Reboot in preparation for next execution
[2019-07-27 21:25:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 21:25:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 21:25:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 21:25:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 21:25:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 21:25:20: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 21:25:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.004 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: 0.001 s/op
Iteration   7: 0.001 s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: 0.001 s/op
Iteration  12: 0.001 s/op
Iteration  13: 0.001 s/op
Iteration  14: 0.001 s/op
Iteration  15: 0.001 s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 11 
    [0.000, 0.001) = 31 
    [0.001, 0.001) = 7 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.003) = 0 
    [0.003, 0.004) = 0 
    [0.004, 0.004) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =      0.001 s/op
     p(95.0000) =      0.001 s/op
     p(99.0000) =      0.004 s/op
     p(99.9000) =      0.004 s/op
     p(99.9900) =      0.004 s/op
     p(99.9990) =      0.004 s/op
     p(99.9999) =      0.004 s/op
    p(100.0000) =      0.004 s/op


# Run complete. Total time: 00:00:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564255520088.json
{"wallclock_times": [1.5401607770000112], "core_cycle_counts": [[3482835935], [1931258024], [3009110499], [2094352055]], "aperf_counts": [[3478566622], [1910438256], [2996872777], [2080093851]], "mperf_counts": [[3485026400], [1910717306], [3001591136], [2081695392]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 21:25:21: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_openj9_12.0.1'
[2019-07-27 21:25:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:25:22: INFO] 32 executions left in scheduler queue
[2019-07-27 21:25:22: INFO] Next execution is 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-07-27 21:25:22: INFO] Estimated completion (next execution): 2019-07-27 21:27:54 (0:02:32 from now)
[2019-07-27 21:25:22: INFO] Reboot in preparation for next execution
[2019-07-27 21:29:37: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 21:29:37: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 21:29:37: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 21:29:37: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 21:29:37: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 21:29:37: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 21:43:37: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.112 s/op
Iteration   2: 16.915 s/op
Iteration   3: 17.020 s/op
Iteration   4: 17.133 s/op
Iteration   5: 16.941 s/op
Iteration   6: 17.101 s/op
Iteration   7: 17.014 s/op
Iteration   8: 17.049 s/op
Iteration   9: 16.761 s/op
Iteration  10: 16.963 s/op
Iteration  11: 16.896 s/op
Iteration  12: 16.179 s/op
Iteration  13: 16.827 s/op
Iteration  14: 16.914 s/op
Iteration  15: 16.171 s/op
Iteration  16: 16.841 s/op
Iteration  17: 17.056 s/op
Iteration  18: 16.692 s/op
Iteration  19: 16.161 s/op
Iteration  20: 16.678 s/op
Iteration  21: 17.043 s/op
Iteration  22: 17.134 s/op
Iteration  23: 16.569 s/op
Iteration  24: 16.828 s/op
Iteration  25: 16.061 s/op
Iteration  26: 16.820 s/op
Iteration  27: 15.940 s/op
Iteration  28: 16.939 s/op
Iteration  29: 17.055 s/op
Iteration  30: 16.582 s/op
Iteration  31: 16.753 s/op
Iteration  32: 16.667 s/op
Iteration  33: 16.598 s/op
Iteration  34: 17.088 s/op
Iteration  35: 17.133 s/op
Iteration  36: 16.946 s/op
Iteration  37: 16.984 s/op
Iteration  38: 17.045 s/op
Iteration  39: 16.616 s/op
Iteration  40: 16.895 s/op
Iteration  41: 16.351 s/op
Iteration  42: 17.160 s/op
Iteration  43: 16.308 s/op
Iteration  44: 16.027 s/op
Iteration  45: 16.830 s/op
Iteration  46: 16.876 s/op
Iteration  47: 16.603 s/op
Iteration  48: 16.989 s/op
Iteration  49: 16.951 s/op
Iteration  50: 16.106 s/op


Result "fr.mleduc.logo.LogoVisitorBenchmark.logoInterpreter":
  N = 50
  mean =     16.766 ?(99.9%) 0.167 s/op

  Histogram, s/op:
    [15.000, 15.250) = 0 
    [15.250, 15.500) = 0 
    [15.500, 15.750) = 0 
    [15.750, 16.000) = 1 
    [16.000, 16.250) = 6 
    [16.250, 16.500) = 2 
    [16.500, 16.750) = 8 
    [16.750, 17.000) = 19 
    [17.000, 17.250) = 14 
    [17.250, 17.500) = 0 
    [17.500, 17.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     15.940 s/op
     p(50.0000) =     16.886 s/op
     p(90.0000) =     17.111 s/op
     p(95.0000) =     17.133 s/op
     p(99.0000) =     17.160 s/op
     p(99.9000) =     17.160 s/op
     p(99.9900) =     17.160 s/op
     p(99.9990) =     17.160 s/op
     p(99.9999) =     17.160 s/op
    p(100.0000) =     17.160 s/op


# Run complete. Total time: 00:13:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              (program)  Mode  Cnt   Score   Error  Units
LogoVisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  16.766 ? 0.167   s/op

Benchmark result is saved to /home/benchmarks/results/logo_visitor_fractal_1564255777791.json
{"wallclock_times": [840.118448982], "core_cycle_counts": [[436084284065], [626553426004], [656152137882], [1293025027242]], "aperf_counts": [[433602046351], [626398663257], [655992914035], [1292923398320]], "mperf_counts": [[433608460860], [626400253500], [655993035806], [1292923382316]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 21:43:37: INFO] Finished 'logo_visitor_fractal(50)' (default-java variant) under 'logo_visitor_openj9_12.0.1'
[2019-07-27 21:43:38: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:43:38: INFO] 31 executions left in scheduler queue
[2019-07-27 21:43:38: INFO] Next execution is 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 21:43:38: INFO] Estimated completion (next execution): 2019-07-27 22:00:09 (0:16:30 from now)
[2019-07-27 21:43:38: INFO] Reboot in preparation for next execution
[2019-07-27 21:47:55: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 21:53:40: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.701 s
Iteration   2: 7.595 s
Iteration   3: 6.892 s
Iteration   4: 6.895 s
Iteration   5: 6.771 s
Iteration   6: 6.940 s
Iteration   7: 6.736 s
Iteration   8: 6.835 s
Iteration   9: 6.748 s
Iteration  10: 6.683 s
Iteration  11: 6.745 s
Iteration  12: 6.814 s
Iteration  13: 6.820 s
Iteration  14: 6.821 s
Iteration  15: 6.768 s
Iteration  16: 6.767 s
Iteration  17: 6.834 s
Iteration  18: 6.780 s
Iteration  19: 6.833 s
Iteration  20: 6.881 s
Iteration  21: 6.874 s
Iteration  22: 6.936 s
Iteration  23: 6.879 s
Iteration  24: 6.743 s
Iteration  25: 6.899 s
Iteration  26: 6.822 s
Iteration  27: 6.863 s
Iteration  28: 6.799 s
Iteration  29: 6.758 s
Iteration  30: 6.934 s
Iteration  31: 6.938 s
Iteration  32: 6.888 s
Iteration  33: 6.814 s
Iteration  34: 6.906 s
Iteration  35: 6.849 s
Iteration  36: 6.810 s
Iteration  37: 6.876 s
Iteration  38: 6.813 s
Iteration  39: 6.942 s
Iteration  40: 6.808 s
Iteration  41: 6.845 s
Iteration  42: 6.816 s
Iteration  43: 6.816 s
Iteration  44: 6.877 s
Iteration  45: 6.784 s
Iteration  46: 6.846 s
Iteration  47: 6.869 s
Iteration  48: 6.780 s
Iteration  49: 6.860 s
Iteration  50: 6.814 s


Result: 6.886 ?(99.9%) 0.143 s [Average]
  Statistics: (min, avg, max) = (6.683, 6.886, 8.701), stdev = 0.289
  Confidence interval (99.9%): [6.743, 7.030]
  Samples, N = 50
        mean =      6.886 ?(99.9%) 0.143 s
         min =      6.683 s
  p( 0.0000) =      6.683 s
  p(50.0000) =      6.834 s
  p(90.0000) =      6.938 s
  p(95.0000) =      7.236 s
  p(99.0000) =      8.701 s
  p(99.9000) =      8.701 s
  p(99.9900) =      8.701 s
  p(99.9990) =      8.701 s
  p(99.9999) =      8.701 s
         max =      8.701 s


# Run complete. Total time: 00:05:45

Benchmark                                                                                      (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  6.886        0.143      s
{"wallclock_times": [346.14978705299995], "core_cycle_counts": [[240449076301], [359015132863], [248075700767], [385628494230]], "aperf_counts": [[239430948693], [358918570796], [247968194489], [385563743283]], "mperf_counts": [[239437950314], [358918924658], [247969159330], [385564738310]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 21:53:40: INFO] Finished 'minijava_revisitor_fannkuchredux(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 21:53:41: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 21:53:41: INFO] 30 executions left in scheduler queue
[2019-07-27 21:53:41: INFO] Next execution is 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 21:53:41: INFO] Estimated completion (next execution): 2019-07-27 22:01:58 (0:08:16 from now)
[2019-07-27 21:53:41: INFO] Reboot in preparation for next execution
[2019-07-27 21:57:58: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 22:06:11: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 11.306 s
Iteration   2: 9.820 s
Iteration   3: 9.857 s
Iteration   4: 9.943 s
Iteration   5: 9.777 s
Iteration   6: 9.773 s
Iteration   7: 9.809 s
Iteration   8: 9.806 s
Iteration   9: 9.832 s
Iteration  10: 9.812 s
Iteration  11: 9.834 s
Iteration  12: 9.772 s
Iteration  13: 9.806 s
Iteration  14: 9.766 s
Iteration  15: 9.771 s
Iteration  16: 9.785 s
Iteration  17: 9.765 s
Iteration  18: 9.749 s
Iteration  19: 9.796 s
Iteration  20: 9.850 s
Iteration  21: 9.908 s
Iteration  22: 9.810 s
Iteration  23: 9.768 s
Iteration  24: 9.753 s
Iteration  25: 9.728 s
Iteration  26: 9.758 s
Iteration  27: 9.763 s
Iteration  28: 9.784 s
Iteration  29: 9.799 s
Iteration  30: 9.764 s
Iteration  31: 9.829 s
Iteration  32: 9.859 s
Iteration  33: 9.676 s
Iteration  34: 9.822 s
Iteration  35: 9.737 s
Iteration  36: 9.829 s
Iteration  37: 9.669 s
Iteration  38: 9.761 s
Iteration  39: 9.830 s
Iteration  40: 9.790 s
Iteration  41: 9.806 s
Iteration  42: 9.765 s
Iteration  43: 9.756 s
Iteration  44: 9.699 s
Iteration  45: 9.896 s
Iteration  46: 9.787 s
Iteration  47: 9.816 s
Iteration  48: 9.815 s
Iteration  49: 9.802 s
Iteration  50: 9.808 s


Result: 9.824 ?(99.9%) 0.109 s [Average]
  Statistics: (min, avg, max) = (9.669, 9.824, 11.306), stdev = 0.220
  Confidence interval (99.9%): [9.715, 9.933]
  Samples, N = 50
        mean =      9.824 ?(99.9%) 0.109 s
         min =      9.669 s
  p( 0.0000) =      9.669 s
  p(50.0000) =      9.798 s
  p(90.0000) =      9.858 s
  p(95.0000) =      9.924 s
  p(99.0000) =     11.306 s
  p(99.9000) =     11.306 s
  p(99.9900) =     11.306 s
  p(99.9990) =     11.306 s
  p(99.9999) =     11.306 s
         max =     11.306 s


# Run complete. Total time: 00:08:12

Benchmark                                                                                  (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  9.824        0.109      s
{"wallclock_times": [492.79274998799997], "core_cycle_counts": [[481830527526], [457945484518], [198804229225], [546068668938]], "aperf_counts": [[480649854026], [457767919825], [198633661944], [546015496044]], "mperf_counts": [[480655743158], [457767923394], [198633611212], [546015518774]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 22:06:11: INFO] Finished 'minijava_revisitor_fibonacci(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 22:06:12: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 22:06:12: INFO] 29 executions left in scheduler queue
[2019-07-27 22:06:12: INFO] Next execution is 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 22:06:12: INFO] Estimated completion (next execution): 2019-07-27 22:16:55 (0:10:43 from now)
[2019-07-27 22:06:12: INFO] Reboot in preparation for next execution
[2019-07-27 22:10:29: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 22:15:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.816 s
Iteration   2: 6.557 s
Iteration   3: 6.098 s
Iteration   4: 5.822 s
Iteration   5: 5.825 s
Iteration   6: 5.809 s
Iteration   7: 5.745 s
Iteration   8: 5.819 s
Iteration   9: 5.811 s
Iteration  10: 5.763 s
Iteration  11: 5.795 s
Iteration  12: 5.803 s
Iteration  13: 5.786 s
Iteration  14: 5.790 s
Iteration  15: 5.774 s
Iteration  16: 5.777 s
Iteration  17: 5.735 s
Iteration  18: 5.739 s
Iteration  19: 5.787 s
Iteration  20: 5.757 s
Iteration  21: 5.798 s
Iteration  22: 5.829 s
Iteration  23: 5.779 s
Iteration  24: 5.774 s
Iteration  25: 5.775 s
Iteration  26: 5.805 s
Iteration  27: 5.790 s
Iteration  28: 5.776 s
Iteration  29: 5.774 s
Iteration  30: 5.798 s
Iteration  31: 5.739 s
Iteration  32: 5.794 s
Iteration  33: 5.800 s
Iteration  34: 5.794 s
Iteration  35: 5.748 s
Iteration  36: 5.750 s
Iteration  37: 5.775 s
Iteration  38: 5.785 s
Iteration  39: 5.760 s
Iteration  40: 5.812 s
Iteration  41: 5.826 s
Iteration  42: 5.799 s
Iteration  43: 5.775 s
Iteration  44: 5.779 s
Iteration  45: 5.780 s
Iteration  46: 5.761 s
Iteration  47: 5.745 s
Iteration  48: 5.717 s
Iteration  49: 5.777 s
Iteration  50: 5.743 s


Result: 5.843 ?(99.9%) 0.153 s [Average]
  Statistics: (min, avg, max) = (5.717, 5.843, 7.816), stdev = 0.309
  Confidence interval (99.9%): [5.690, 5.996]
  Samples, N = 50
        mean =      5.843 ?(99.9%) 0.153 s
         min =      5.717 s
  p( 0.0000) =      5.717 s
  p(50.0000) =      5.782 s
  p(90.0000) =      5.826 s
  p(95.0000) =      6.305 s
  p(99.0000) =      7.816 s
  p(99.9000) =      7.816 s
  p(99.9900) =      7.816 s
  p(99.9990) =      7.816 s
  p(99.9999) =      7.816 s
         max =      7.816 s


# Run complete. Total time: 00:04:53

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  5.843        0.153      s
{"wallclock_times": [293.988226704], "core_cycle_counts": [[344996599392], [221923049890], [100496129874], [400208729360]], "aperf_counts": [[344262121864], [221779629957], [100332427055], [400090638340]], "mperf_counts": [[344271844500], [221779669802], [100332393948], [400091764186]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 22:15:22: INFO] Finished 'minijava_revisitor_binarytree(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 22:15:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 22:15:23: INFO] 28 executions left in scheduler queue
[2019-07-27 22:15:23: INFO] Next execution is 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 22:15:23: INFO] Estimated completion (next execution): 2019-07-27 22:22:48 (0:07:24 from now)
[2019-07-27 22:15:23: INFO] Reboot in preparation for next execution
[2019-07-27 22:19:39: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-27 22:31:59: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 16.201 s
Iteration   2: 14.976 s
Iteration   3: 14.791 s
Iteration   4: 14.887 s
Iteration   5: 14.882 s
Iteration   6: 14.517 s
Iteration   7: 14.605 s
Iteration   8: 14.599 s
Iteration   9: 14.576 s
Iteration  10: 14.501 s
Iteration  11: 15.168 s
Iteration  12: 14.475 s
Iteration  13: 15.146 s
Iteration  14: 14.504 s
Iteration  15: 14.508 s
Iteration  16: 14.542 s
Iteration  17: 14.580 s
Iteration  18: 14.573 s
Iteration  19: 14.567 s
Iteration  20: 14.547 s
Iteration  21: 14.470 s
Iteration  22: 14.619 s
Iteration  23: 14.831 s
Iteration  24: 15.244 s
Iteration  25: 14.557 s
Iteration  26: 14.599 s
Iteration  27: 14.550 s
Iteration  28: 15.193 s
Iteration  29: 14.524 s
Iteration  30: 14.664 s
Iteration  31: 14.492 s
Iteration  32: 15.098 s
Iteration  33: 14.522 s
Iteration  34: 14.629 s
Iteration  35: 14.540 s
Iteration  36: 15.203 s
Iteration  37: 15.258 s
Iteration  38: 14.541 s
Iteration  39: 15.181 s
Iteration  40: 14.531 s
Iteration  41: 15.169 s
Iteration  42: 14.653 s
Iteration  43: 15.186 s
Iteration  44: 15.368 s
Iteration  45: 14.658 s
Iteration  46: 14.577 s
Iteration  47: 14.494 s
Iteration  48: 14.507 s
Iteration  49: 14.520 s
Iteration  50: 15.208 s


Result: 14.775 ?(99.9%) 0.173 s [Average]
  Statistics: (min, avg, max) = (14.470, 14.775, 16.201), stdev = 0.349
  Confidence interval (99.9%): [14.602, 14.948]
  Samples, N = 50
        mean =     14.775 ?(99.9%) 0.173 s
         min =     14.470 s
  p( 0.0000) =     14.470 s
  p(50.0000) =     14.599 s
  p(90.0000) =     15.208 s
  p(95.0000) =     15.307 s
  p(99.0000) =     16.201 s
  p(99.9000) =     16.201 s
  p(99.9900) =     16.201 s
  p(99.9990) =     16.201 s
  p(99.9999) =     16.201 s
         max =     16.201 s


# Run complete. Total time: 00:12:20

Benchmark                                                                             (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaRevisitorBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  14.775        0.173      s
{"wallclock_times": [740.410763376], "core_cycle_counts": [[948845834372], [372257920576], [471529063311], [615831397287]], "aperf_counts": [[947324536854], [372103746583], [471256038848], [615667766034]], "mperf_counts": [[947330091056], [372103696928], [471256557080], [615667783388]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 22:31:59: INFO] Finished 'minijava_revisitor_sort(50)' (default-java variant) under 'minijava_revisitor_openj9_12.0.1'
[2019-07-27 22:32:00: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 22:32:00: INFO] 27 executions left in scheduler queue
[2019-07-27 22:32:00: INFO] Next execution is 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-07-27 22:32:00: INFO] Estimated completion (next execution): 2019-07-27 22:46:51 (0:14:50 from now)
[2019-07-27 22:32:00: INFO] Reboot in preparation for next execution
[2019-07-27 22:36:17: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 22:36:17: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 22:36:17: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 22:36:17: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 22:36:17: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 22:38:12: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.439 s/op
Iteration   2: 2.163 s/op
Iteration   3: 2.397 s/op
Iteration   4: 2.239 s/op
Iteration   5: 2.304 s/op
Iteration   6: 2.296 s/op
Iteration   7: 2.307 s/op
Iteration   8: 2.301 s/op
Iteration   9: 2.291 s/op
Iteration  10: 2.302 s/op
Iteration  11: 2.300 s/op
Iteration  12: 2.297 s/op
Iteration  13: 2.291 s/op
Iteration  14: 2.260 s/op
Iteration  15: 2.125 s/op
Iteration  16: 2.300 s/op
Iteration  17: 2.289 s/op
Iteration  18: 2.283 s/op
Iteration  19: 2.288 s/op
Iteration  20: 2.305 s/op
Iteration  21: 2.295 s/op
Iteration  22: 2.261 s/op
Iteration  23: 2.285 s/op
Iteration  24: 2.268 s/op
Iteration  25: 2.290 s/op
Iteration  26: 2.285 s/op
Iteration  27: 2.269 s/op
Iteration  28: 2.295 s/op
Iteration  29: 2.282 s/op
Iteration  30: 2.292 s/op
Iteration  31: 2.267 s/op
Iteration  32: 2.274 s/op
Iteration  33: 2.283 s/op
Iteration  34: 2.289 s/op
Iteration  35: 2.285 s/op
Iteration  36: 2.289 s/op
Iteration  37: 2.283 s/op
Iteration  38: 2.292 s/op
Iteration  39: 2.256 s/op
Iteration  40: 2.276 s/op
Iteration  41: 2.286 s/op
Iteration  42: 2.288 s/op
Iteration  43: 2.284 s/op
Iteration  44: 2.284 s/op
Iteration  45: 2.288 s/op
Iteration  46: 2.297 s/op
Iteration  47: 2.293 s/op
Iteration  48: 2.283 s/op
Iteration  49: 2.291 s/op
Iteration  50: 2.266 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.285 ?(99.9%) 0.021 s/op

  Histogram, s/op:
    [2.100, 2.125) = 1 
    [2.125, 2.150) = 0 
    [2.150, 2.175) = 1 
    [2.175, 2.200) = 0 
    [2.200, 2.225) = 0 
    [2.225, 2.250) = 1 
    [2.250, 2.275) = 8 
    [2.275, 2.300) = 31 
    [2.300, 2.325) = 6 
    [2.325, 2.350) = 0 
    [2.350, 2.375) = 0 
    [2.375, 2.400) = 1 
    [2.400, 2.425) = 0 
    [2.425, 2.450) = 1 
    [2.450, 2.475) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.125 s/op
     p(50.0000) =      2.288 s/op
     p(90.0000) =      2.304 s/op
     p(95.0000) =      2.348 s/op
     p(99.0000) =      2.439 s/op
     p(99.9000) =      2.439 s/op
     p(99.9900) =      2.439 s/op
     p(99.9990) =      2.439 s/op
     p(99.9999) =      2.439 s/op
    p(100.0000) =      2.439 s/op


# Run complete. Total time: 00:01:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  2.285 ? 0.021   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_sort_1564259777488.json
{"wallclock_times": [115.31419943499998], "core_cycle_counts": [[99598316052], [71481274070], [100905264601], [69953068482]], "aperf_counts": [[99271763950], [71438833046], [100878591981], [69933085024]], "mperf_counts": [[112292374796], [80423714796], [114111577242], [79133223550]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 22:38:12: INFO] Finished 'boa_revisitor_sort(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-07-27 22:38:13: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 22:38:13: INFO] 26 executions left in scheduler queue
[2019-07-27 22:38:13: INFO] Next execution is 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-07-27 22:38:13: INFO] Estimated completion (next execution): 2019-07-27 22:42:39 (0:04:25 from now)
[2019-07-27 22:38:13: INFO] Reboot in preparation for next execution
[2019-07-27 22:42:28: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 22:42:28: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 22:42:28: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 22:42:28: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 22:42:28: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 22:44:22: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, OpenJDK 64-Bit Server VM, 11.0.4+11
# VM invoker: /home/benchmarks/jvms/hotspot_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.585 s/op
Iteration   2: 2.234 s/op
Iteration   3: 2.464 s/op
Iteration   4: 2.625 s/op
Iteration   5: 2.276 s/op
Iteration   6: 2.239 s/op
Iteration   7: 2.235 s/op
Iteration   8: 2.230 s/op
Iteration   9: 2.235 s/op
Iteration  10: 2.232 s/op
Iteration  11: 2.234 s/op
Iteration  12: 2.234 s/op
Iteration  13: 2.234 s/op
Iteration  14: 2.234 s/op
Iteration  15: 2.232 s/op
Iteration  16: 2.236 s/op
Iteration  17: 2.230 s/op
Iteration  18: 2.230 s/op
Iteration  19: 2.229 s/op
Iteration  20: 2.230 s/op
Iteration  21: 2.229 s/op
Iteration  22: 2.232 s/op
Iteration  23: 2.231 s/op
Iteration  24: 2.229 s/op
Iteration  25: 2.231 s/op
Iteration  26: 2.232 s/op
Iteration  27: 2.231 s/op
Iteration  28: 2.233 s/op
Iteration  29: 2.232 s/op
Iteration  30: 2.231 s/op
Iteration  31: 2.231 s/op
Iteration  32: 2.230 s/op
Iteration  33: 2.232 s/op
Iteration  34: 2.233 s/op
Iteration  35: 2.233 s/op
Iteration  36: 2.232 s/op
Iteration  37: 2.233 s/op
Iteration  38: 2.223 s/op
Iteration  39: 2.232 s/op
Iteration  40: 2.237 s/op
Iteration  41: 2.229 s/op
Iteration  42: 2.231 s/op
Iteration  43: 2.230 s/op
Iteration  44: 2.233 s/op
Iteration  45: 2.230 s/op
Iteration  46: 2.230 s/op
Iteration  47: 2.231 s/op
Iteration  48: 2.232 s/op
Iteration  49: 2.230 s/op
Iteration  50: 2.229 s/op


Result "fr.mleduc.boa.BoaRevisitorBenchmark.boaInterpreter":
  N = 50
  mean =      2.252 ?(99.9%) 0.040 s/op

  Histogram, s/op:
    [2.200, 2.250) = 46 
    [2.250, 2.300) = 1 
    [2.300, 2.350) = 0 
    [2.350, 2.400) = 0 
    [2.400, 2.450) = 0 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 0 
    [2.550, 2.600) = 1 
    [2.600, 2.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.223 s/op
     p(50.0000) =      2.232 s/op
     p(90.0000) =      2.239 s/op
     p(95.0000) =      2.518 s/op
     p(99.0000) =      2.625 s/op
     p(99.9000) =      2.625 s/op
     p(99.9900) =      2.625 s/op
     p(99.9990) =      2.625 s/op
     p(99.9999) =      2.625 s/op
    p(100.0000) =      2.625 s/op


# Run complete. Total time: 00:01:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt  Score   Error  Units
BoaRevisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.252 ? 0.040   s/op

Benchmark result is saved to /home/benchmarks/results/boa_revisitor_fibonacci_1564260148499.json
{"wallclock_times": [113.60716181400002], "core_cycle_counts": [[69480029097], [34984137851], [52178480113], [218255467455]], "aperf_counts": [[69167332944], [34950045019], [52156219269], [218242104532]], "mperf_counts": [[69352390296], [35005723350], [52188258006], [218484260890]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 22:44:22: INFO] Finished 'boa_revisitor_fibonacci(50)' (default-java variant) under 'boa_revisitor_hotspot_11.0.4'
[2019-07-27 22:44:23: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 22:44:23: INFO] 25 executions left in scheduler queue
[2019-07-27 22:44:23: INFO] Next execution is 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-07-27 22:44:23: INFO] Estimated completion (next execution): 2019-07-27 22:48:46 (0:04:23 from now)
[2019-07-27 22:44:23: INFO] Reboot in preparation for next execution
[2019-07-27 22:48:39: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 22:48:39: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 22:48:39: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 22:48:39: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 22:48:39: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 22:48:40: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-27 23:03:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.359 s/op
Iteration   2: 18.125 s/op
Iteration   3: 17.907 s/op
Iteration   4: 18.143 s/op
Iteration   5: 18.216 s/op
Iteration   6: 18.005 s/op
Iteration   7: 18.247 s/op
Iteration   8: 18.074 s/op
Iteration   9: 16.771 s/op
Iteration  10: 18.145 s/op
Iteration  11: 17.605 s/op
Iteration  12: 16.692 s/op
Iteration  13: 18.210 s/op
Iteration  14: 17.144 s/op
Iteration  15: 17.507 s/op
Iteration  16: 17.796 s/op
Iteration  17: 17.887 s/op
Iteration  18: 17.883 s/op
Iteration  19: 17.312 s/op
Iteration  20: 17.953 s/op
Iteration  21: 17.873 s/op
Iteration  22: 17.489 s/op
Iteration  23: 18.237 s/op
Iteration  24: 18.164 s/op
Iteration  25: 17.881 s/op
Iteration  26: 17.867 s/op
Iteration  27: 17.692 s/op
Iteration  28: 18.177 s/op
Iteration  29: 18.026 s/op
Iteration  30: 18.175 s/op
Iteration  31: 18.044 s/op
Iteration  32: 17.328 s/op
Iteration  33: 16.857 s/op
Iteration  34: 17.880 s/op
Iteration  35: 18.223 s/op
Iteration  36: 18.154 s/op
Iteration  37: 18.356 s/op
Iteration  38: 17.427 s/op
Iteration  39: 18.135 s/op
Iteration  40: 17.860 s/op
Iteration  41: 18.228 s/op
Iteration  42: 17.251 s/op
Iteration  43: 17.683 s/op
Iteration  44: 17.936 s/op
Iteration  45: 18.267 s/op
Iteration  46: 18.183 s/op
Iteration  47: 17.067 s/op
Iteration  48: 18.163 s/op
Iteration  49: 18.074 s/op
Iteration  50: 17.466 s/op


Result "fr.mleduc.logo.LogoSwitchBenchmark.logoInterpreter":
  N = 50
  mean =     17.823 ?(99.9%) 0.211 s/op

  Histogram, s/op:
    [16.000, 16.250) = 0 
    [16.250, 16.500) = 0 
    [16.500, 16.750) = 1 
    [16.750, 17.000) = 2 
    [17.000, 17.250) = 2 
    [17.250, 17.500) = 7 
    [17.500, 17.750) = 4 
    [17.750, 18.000) = 11 
    [18.000, 18.250) = 21 
    [18.250, 18.500) = 2 
    [18.500, 18.750) = 0 

  Percentiles, s/op:
      p(0.0000) =     16.692 s/op
     p(50.0000) =     17.921 s/op
     p(90.0000) =     18.227 s/op
     p(95.0000) =     18.256 s/op
     p(99.0000) =     18.356 s/op
     p(99.9000) =     18.356 s/op
     p(99.9900) =     18.356 s/op
     p(99.9990) =     18.356 s/op
     p(99.9999) =     18.356 s/op
    p(100.0000) =     18.356 s/op


# Run complete. Total time: 00:14:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt   Score   Error  Units
LogoSwitchBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  17.823 ? 0.211   s/op

Benchmark result is saved to /home/benchmarks/results/logo_switch_fractal_1564260519840.json
{"wallclock_times": [892.8729923080001], "core_cycle_counts": [[634074713289], [876851955696], [952972907217], [993064864140]], "aperf_counts": [[631618306355], [876713629320], [952793782573], [992874085052]], "mperf_counts": [[631623499762], [876713648596], [952793781126], [992874040266]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/switch/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-27 23:03:32: INFO] Finished 'logo_switch_fractal(50)' (default-java variant) under 'logo_switch_openj9_11.0.4'
[2019-07-27 23:03:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 23:03:33: INFO] 24 executions left in scheduler queue
[2019-07-27 23:03:33: INFO] Next execution is 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-07-27 23:03:33: INFO] Estimated completion (next execution): 2019-07-27 23:20:57 (0:17:23 from now)
[2019-07-27 23:03:33: INFO] Reboot in preparation for next execution
[2019-07-27 23:08:04: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 23:08:04: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 23:08:04: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 23:08:04: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 23:08:04: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 23:08:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmVisitorBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 40 
    [0.000, 0.001) = 9 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (program)  Mode  Cnt   Score    Error  Units
FsmVisitorBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_visitor_buffers_1564261684029.json
{"wallclock_times": [0.9123165480000068], "core_cycle_counts": [[1896196586], [1293626419], [1244586179], [1353662718]], "aperf_counts": [[1894020747], [1289139263], [1239878863], [1349705195]], "mperf_counts": [[2102357030], [1364581492], [1285471228], [1398292530]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/fsm/visitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-27 23:08:04: INFO] Finished 'fsm_visitor_buffers(50)' (default-java variant) under 'fsm_visitor_hotspot_12.0.2'
[2019-07-27 23:08:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 23:08:05: INFO] 23 executions left in scheduler queue
[2019-07-27 23:08:05: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:08:05: INFO] Estimated completion (next execution): 2019-07-27 23:10:37 (0:02:31 from now)
[2019-07-27 23:08:05: INFO] Reboot in preparation for next execution
[2019-07-27 23:20:05: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 9.208 s/op
Iteration   2: 9.466 s/op
Iteration   3: 9.391 s/op
Iteration   4: 9.327 s/op
Iteration   5: 9.291 s/op
Iteration   6: 9.324 s/op
Iteration   7: 9.305 s/op
Iteration   8: 9.317 s/op
Iteration   9: 9.306 s/op
Iteration  10: 9.314 s/op
Iteration  11: 9.301 s/op
Iteration  12: 9.288 s/op
Iteration  13: 9.302 s/op
Iteration  14: 9.310 s/op
Iteration  15: 9.315 s/op
Iteration  16: 9.322 s/op
Iteration  17: 9.306 s/op
Iteration  18: 9.290 s/op
Iteration  19: 9.304 s/op
Iteration  20: 9.332 s/op
Iteration  21: 9.302 s/op
Iteration  22: 9.310 s/op
Iteration  23: 9.305 s/op
Iteration  24: 9.294 s/op
Iteration  25: 9.300 s/op
Iteration  26: 9.310 s/op
Iteration  27: 9.304 s/op
Iteration  28: 9.311 s/op
Iteration  29: 9.310 s/op
Iteration  30: 9.309 s/op
Iteration  31: 9.313 s/op
Iteration  32: 9.310 s/op
Iteration  33: 9.288 s/op
Iteration  34: 9.295 s/op
Iteration  35: 9.298 s/op
Iteration  36: 9.271 s/op
Iteration  37: 9.295 s/op
Iteration  38: 9.269 s/op
Iteration  39: 9.306 s/op
Iteration  40: 9.305 s/op
Iteration  41: 9.265 s/op
Iteration  42: 9.338 s/op
Iteration  43: 9.329 s/op
Iteration  44: 9.297 s/op
Iteration  45: 9.325 s/op
Iteration  46: 9.308 s/op
Iteration  47: 9.310 s/op
Iteration  48: 9.327 s/op
Iteration  49: 9.294 s/op
Iteration  50: 9.286 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      9.308 ?(99.9%) 0.016 s/op

  Histogram, s/op:
    [9.200, 9.225) = 1 
    [9.225, 9.250) = 0 
    [9.250, 9.275) = 3 
    [9.275, 9.300) = 11 
    [9.300, 9.325) = 28 
    [9.325, 9.350) = 5 
    [9.350, 9.375) = 0 
    [9.375, 9.400) = 1 
    [9.400, 9.425) = 0 
    [9.425, 9.450) = 0 
    [9.450, 9.475) = 1 

  Percentiles, s/op:
      p(0.0000) =      9.208 s/op
     p(50.0000) =      9.306 s/op
     p(90.0000) =      9.329 s/op
     p(95.0000) =      9.362 s/op
     p(99.0000) =      9.466 s/op
     p(99.9000) =      9.466 s/op
     p(99.9900) =      9.466 s/op
     p(99.9990) =      9.466 s/op
     p(99.9999) =      9.466 s/op
    p(100.0000) =      9.466 s/op


# Run complete. Total time: 00:07:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  9.308 ? 0.016   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564261939086.json
{"wallclock_times": [466.24358123], "core_cycle_counts": [[540180054650], [195836345049], [280990047361], [484810050583]], "aperf_counts": [[539293105446], [195750877717], [280947343859], [484787488134]], "mperf_counts": [[539301305114], [195758276578], [280949031848], [484787788614]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 23:20:05: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:20:06: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 23:20:06: INFO] 22 executions left in scheduler queue
[2019-07-27 23:20:06: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:20:06: INFO] Estimated completion (next execution): 2019-07-27 23:30:22 (0:10:16 from now)
[2019-07-27 23:20:06: INFO] Reboot in preparation for next execution
[2019-07-27 23:36:44: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.934 s/op
Iteration   2: 14.880 s/op
Iteration   3: 14.974 s/op
Iteration   4: 14.816 s/op
Iteration   5: 14.810 s/op
Iteration   6: 14.860 s/op
Iteration   7: 14.792 s/op
Iteration   8: 14.798 s/op
Iteration   9: 14.807 s/op
Iteration  10: 14.841 s/op
Iteration  11: 14.842 s/op
Iteration  12: 14.853 s/op
Iteration  13: 14.825 s/op
Iteration  14: 14.842 s/op
Iteration  15: 14.873 s/op
Iteration  16: 14.892 s/op
Iteration  17: 14.882 s/op
Iteration  18: 14.932 s/op
Iteration  19: 14.908 s/op
Iteration  20: 14.897 s/op
Iteration  21: 14.830 s/op
Iteration  22: 14.848 s/op
Iteration  23: 14.892 s/op
Iteration  24: 14.833 s/op
Iteration  25: 14.790 s/op
Iteration  26: 14.820 s/op
Iteration  27: 14.825 s/op
Iteration  28: 14.896 s/op
Iteration  29: 14.882 s/op
Iteration  30: 14.838 s/op
Iteration  31: 14.898 s/op
Iteration  32: 14.901 s/op
Iteration  33: 14.915 s/op
Iteration  34: 14.833 s/op
Iteration  35: 14.855 s/op
Iteration  36: 14.849 s/op
Iteration  37: 14.865 s/op
Iteration  38: 14.826 s/op
Iteration  39: 14.884 s/op
Iteration  40: 14.836 s/op
Iteration  41: 14.863 s/op
Iteration  42: 14.854 s/op
Iteration  43: 14.860 s/op
Iteration  44: 14.821 s/op
Iteration  45: 14.827 s/op
Iteration  46: 14.862 s/op
Iteration  47: 14.832 s/op
Iteration  48: 14.826 s/op
Iteration  49: 14.827 s/op
Iteration  50: 14.843 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     14.856 ?(99.9%) 0.019 s/op

  Histogram, s/op:
    [14.700, 14.725) = 0 
    [14.725, 14.750) = 0 
    [14.750, 14.775) = 0 
    [14.775, 14.800) = 3 
    [14.800, 14.825) = 6 
    [14.825, 14.850) = 17 
    [14.850, 14.875) = 9 
    [14.875, 14.900) = 9 
    [14.900, 14.925) = 3 
    [14.925, 14.950) = 2 
    [14.950, 14.975) = 1 

  Percentiles, s/op:
      p(0.0000) =     14.790 s/op
     p(50.0000) =     14.849 s/op
     p(90.0000) =     14.907 s/op
     p(95.0000) =     14.933 s/op
     p(99.0000) =     14.974 s/op
     p(99.9000) =     14.974 s/op
     p(99.9900) =     14.974 s/op
     p(99.9990) =     14.974 s/op
     p(99.9999) =     14.974 s/op
    p(100.0000) =     14.974 s/op


# Run complete. Total time: 00:12:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  14.856 ? 0.019   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564262660439.json
{"wallclock_times": [743.667793199], "core_cycle_counts": [[657675017505], [519435417921], [658803181155], [565345401647]], "aperf_counts": [[655977996992], [519301607922], [658772053547], [565282850809]], "mperf_counts": [[655989293366], [519317618646], [658772669600], [565283052382]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 23:36:44: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:36:45: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 23:36:45: INFO] 21 executions left in scheduler queue
[2019-07-27 23:36:45: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:36:45: INFO] Estimated completion (next execution): 2019-07-27 23:51:38 (0:14:53 from now)
[2019-07-27 23:36:45: INFO] Reboot in preparation for next execution
[2019-07-27 23:45:52: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.363 s/op
Iteration   2: 5.865 s/op
Iteration   3: 5.956 s/op
Iteration   4: 5.947 s/op
Iteration   5: 6.008 s/op
Iteration   6: 5.937 s/op
Iteration   7: 5.935 s/op
Iteration   8: 5.954 s/op
Iteration   9: 5.867 s/op
Iteration  10: 5.867 s/op
Iteration  11: 5.860 s/op
Iteration  12: 5.861 s/op
Iteration  13: 5.853 s/op
Iteration  14: 5.865 s/op
Iteration  15: 5.852 s/op
Iteration  16: 5.865 s/op
Iteration  17: 5.864 s/op
Iteration  18: 5.858 s/op
Iteration  19: 5.874 s/op
Iteration  20: 5.800 s/op
Iteration  21: 5.941 s/op
Iteration  22: 5.859 s/op
Iteration  23: 5.855 s/op
Iteration  24: 5.867 s/op
Iteration  25: 5.883 s/op
Iteration  26: 5.894 s/op
Iteration  27: 5.862 s/op
Iteration  28: 5.871 s/op
Iteration  29: 5.865 s/op
Iteration  30: 5.855 s/op
Iteration  31: 5.794 s/op
Iteration  32: 5.775 s/op
Iteration  33: 5.876 s/op
Iteration  34: 5.875 s/op
Iteration  35: 5.881 s/op
Iteration  36: 5.860 s/op
Iteration  37: 5.887 s/op
Iteration  38: 5.872 s/op
Iteration  39: 5.796 s/op
Iteration  40: 5.760 s/op
Iteration  41: 5.850 s/op
Iteration  42: 5.853 s/op
Iteration  43: 5.881 s/op
Iteration  44: 5.871 s/op
Iteration  45: 5.876 s/op
Iteration  46: 5.868 s/op
Iteration  47: 5.864 s/op
Iteration  48: 5.799 s/op
Iteration  49: 5.775 s/op
Iteration  50: 5.849 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      5.877 ?(99.9%) 0.042 s/op

  Histogram, s/op:
    [5.700, 5.750) = 0 
    [5.750, 5.800) = 7 
    [5.800, 5.850) = 2 
    [5.850, 5.900) = 33 
    [5.900, 5.950) = 4 
    [5.950, 6.000) = 2 
    [6.000, 6.050) = 1 
    [6.050, 6.100) = 0 
    [6.100, 6.150) = 0 
    [6.150, 6.200) = 0 
    [6.200, 6.250) = 0 
    [6.250, 6.300) = 0 
    [6.300, 6.350) = 0 
    [6.350, 6.400) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.760 s/op
     p(50.0000) =      5.865 s/op
     p(90.0000) =      5.946 s/op
     p(95.0000) =      5.980 s/op
     p(99.0000) =      6.363 s/op
     p(99.9000) =      6.363 s/op
     p(99.9900) =      6.363 s/op
     p(99.9990) =      6.363 s/op
     p(99.9999) =      6.363 s/op
    p(100.0000) =      6.363 s/op


# Run complete. Total time: 00:04:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  5.877 ? 0.042   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564263657380.json
{"wallclock_times": [294.85341175299993], "core_cycle_counts": [[222870358427], [157329702634], [379383463003], [256164953917]], "aperf_counts": [[222127906262], [157257414759], [379340613032], [256126552428]], "mperf_counts": [[222135812514], [157258810050], [379357492616], [256126593012]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 23:45:52: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:45:53: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 23:45:53: INFO] 20 executions left in scheduler queue
[2019-07-27 23:45:53: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:45:53: INFO] Estimated completion (next execution): 2019-07-27 23:53:18 (0:07:25 from now)
[2019-07-27 23:45:53: INFO] Reboot in preparation for next execution
[2019-07-27 23:54:32: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_222, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: /home/benchmarks/jvms/hotspot-8u222-b10/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.645 s/op
Iteration   2: 5.303 s/op
Iteration   3: 5.372 s/op
Iteration   4: 5.276 s/op
Iteration   5: 5.218 s/op
Iteration   6: 5.224 s/op
Iteration   7: 5.242 s/op
Iteration   8: 5.227 s/op
Iteration   9: 5.231 s/op
Iteration  10: 5.234 s/op
Iteration  11: 5.229 s/op
Iteration  12: 5.239 s/op
Iteration  13: 5.225 s/op
Iteration  14: 5.231 s/op
Iteration  15: 5.218 s/op
Iteration  16: 5.232 s/op
Iteration  17: 5.224 s/op
Iteration  18: 5.247 s/op
Iteration  19: 5.214 s/op
Iteration  20: 5.216 s/op
Iteration  21: 5.224 s/op
Iteration  22: 5.242 s/op
Iteration  23: 5.247 s/op
Iteration  24: 5.216 s/op
Iteration  25: 5.237 s/op
Iteration  26: 5.277 s/op
Iteration  27: 5.242 s/op
Iteration  28: 5.213 s/op
Iteration  29: 5.276 s/op
Iteration  30: 5.216 s/op
Iteration  31: 5.226 s/op
Iteration  32: 5.235 s/op
Iteration  33: 5.225 s/op
Iteration  34: 5.234 s/op
Iteration  35: 5.224 s/op
Iteration  36: 5.243 s/op
Iteration  37: 5.228 s/op
Iteration  38: 5.220 s/op
Iteration  39: 5.223 s/op
Iteration  40: 5.241 s/op
Iteration  41: 5.207 s/op
Iteration  42: 5.233 s/op
Iteration  43: 5.228 s/op
Iteration  44: 5.242 s/op
Iteration  45: 5.220 s/op
Iteration  46: 5.215 s/op
Iteration  47: 5.220 s/op
Iteration  48: 5.241 s/op
Iteration  49: 5.245 s/op
Iteration  50: 5.219 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      5.244 ?(99.9%) 0.032 s/op

  Histogram, s/op:
    [5.200, 5.250) = 44 
    [5.250, 5.300) = 3 
    [5.300, 5.350) = 1 
    [5.350, 5.400) = 1 
    [5.400, 5.450) = 0 
    [5.450, 5.500) = 0 
    [5.500, 5.550) = 0 
    [5.550, 5.600) = 0 
    [5.600, 5.650) = 1 

  Percentiles, s/op:
      p(0.0000) =      5.207 s/op
     p(50.0000) =      5.230 s/op
     p(90.0000) =      5.276 s/op
     p(95.0000) =      5.334 s/op
     p(99.0000) =      5.645 s/op
     p(99.9000) =      5.645 s/op
     p(99.9900) =      5.645 s/op
     p(99.9990) =      5.645 s/op
     p(99.9999) =      5.645 s/op
    p(100.0000) =      5.645 s/op


# Run complete. Total time: 00:04:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  5.244 ? 0.032   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564264209109.json
{"wallclock_times": [263.124254845], "core_cycle_counts": [[256976164077], [167109630115], [218156813608], [213035778931]], "aperf_counts": [[256435696053], [167043853634], [218113222482], [213010823280]], "mperf_counts": [[256446496936], [167043899576], [218115230246], [213010910234]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-27 23:54:32: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_hotspot-8u222-b10'
[2019-07-27 23:54:33: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-27 23:54:33: INFO] 19 executions left in scheduler queue
[2019-07-27 23:54:33: INFO] Next execution is 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-07-27 23:54:33: INFO] Estimated completion (next execution): 2019-07-28 00:01:26 (0:06:53 from now)
[2019-07-27 23:54:33: INFO] Reboot in preparation for next execution
[2019-07-27 23:58:47: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-27 23:58:47: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-27 23:58:47: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-27 23:58:47: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-27 23:58:47: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-27 23:58:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-28 00:00:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 2.835 s/op
Iteration   2: 2.187 s/op
Iteration   3: 2.144 s/op
Iteration   4: 1.963 s/op
Iteration   5: 1.977 s/op
Iteration   6: 1.912 s/op
Iteration   7: 1.912 s/op
Iteration   8: 1.918 s/op
Iteration   9: 1.918 s/op
Iteration  10: 1.900 s/op
Iteration  11: 1.947 s/op
Iteration  12: 1.957 s/op
Iteration  13: 1.915 s/op
Iteration  14: 1.942 s/op
Iteration  15: 1.935 s/op
Iteration  16: 1.895 s/op
Iteration  17: 1.947 s/op
Iteration  18: 1.946 s/op
Iteration  19: 1.901 s/op
Iteration  20: 1.930 s/op
Iteration  21: 1.936 s/op
Iteration  22: 1.935 s/op
Iteration  23: 1.941 s/op
Iteration  24: 1.928 s/op
Iteration  25: 1.949 s/op
Iteration  26: 1.953 s/op
Iteration  27: 1.947 s/op
Iteration  28: 1.935 s/op
Iteration  29: 1.924 s/op
Iteration  30: 1.931 s/op
Iteration  31: 1.891 s/op
Iteration  32: 1.908 s/op
Iteration  33: 1.924 s/op
Iteration  34: 1.949 s/op
Iteration  35: 1.920 s/op
Iteration  36: 1.928 s/op
Iteration  37: 1.922 s/op
Iteration  38: 1.936 s/op
Iteration  39: 1.923 s/op
Iteration  40: 1.924 s/op
Iteration  41: 1.908 s/op
Iteration  42: 1.926 s/op
Iteration  43: 1.902 s/op
Iteration  44: 1.947 s/op
Iteration  45: 1.914 s/op
Iteration  46: 1.912 s/op
Iteration  47: 1.943 s/op
Iteration  48: 1.915 s/op
Iteration  49: 1.944 s/op
Iteration  50: 1.926 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      1.956 ?(99.9%) 0.068 s/op

  Histogram, s/op:
    [1.800, 1.900) = 3 
    [1.900, 2.000) = 44 
    [2.000, 2.100) = 0 
    [2.100, 2.200) = 2 
    [2.200, 2.300) = 0 
    [2.300, 2.400) = 0 
    [2.400, 2.500) = 0 
    [2.500, 2.600) = 0 
    [2.600, 2.700) = 0 
    [2.700, 2.800) = 0 
    [2.800, 2.900) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.891 s/op
     p(50.0000) =      1.929 s/op
     p(90.0000) =      1.962 s/op
     p(95.0000) =      2.164 s/op
     p(99.0000) =      2.835 s/op
     p(99.9000) =      2.835 s/op
     p(99.9900) =      2.835 s/op
     p(99.9990) =      2.835 s/op
     p(99.9999) =      2.835 s/op
    p(100.0000) =      2.835 s/op


# Run complete. Total time: 00:01:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.956 ? 0.068   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_sort_1564264727774.json
{"wallclock_times": [99.45936240999998], "core_cycle_counts": [[102108533645], [40969314530], [144343460349], [59081515272]], "aperf_counts": [[101774379017], [40885317870], [144282480408], [59020966352]], "mperf_counts": [[101775491378], [40885341348], [144285184240], [59021143798]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-28 00:00:27: INFO] Finished 'boa_interpreter_sort(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-07-28 00:00:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 00:00:28: INFO] 18 executions left in scheduler queue
[2019-07-28 00:00:28: INFO] Next execution is 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-07-28 00:00:28: INFO] Estimated completion (next execution): 2019-07-28 00:04:38 (0:04:09 from now)
[2019-07-28 00:00:28: INFO] Reboot in preparation for next execution
[2019-07-28 00:04:45: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-28 00:04:45: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-28 00:04:45: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-28 00:04:45: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-28 00:04:45: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-28 00:04:45: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.
[2019-07-28 00:06:46: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 11.0.4, Eclipse OpenJ9 VM, openj9-0.15.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_11.0.4/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 3.109 s/op
Iteration   2: 2.512 s/op
Iteration   3: 2.346 s/op
Iteration   4: 2.475 s/op
Iteration   5: 2.644 s/op
Iteration   6: 2.326 s/op
Iteration   7: 2.395 s/op
Iteration   8: 2.363 s/op
Iteration   9: 2.417 s/op
Iteration  10: 2.337 s/op
Iteration  11: 2.383 s/op
Iteration  12: 2.376 s/op
Iteration  13: 2.380 s/op
Iteration  14: 2.364 s/op
Iteration  15: 2.351 s/op
Iteration  16: 2.394 s/op
Iteration  17: 2.335 s/op
Iteration  18: 2.350 s/op
Iteration  19: 2.360 s/op
Iteration  20: 2.382 s/op
Iteration  21: 2.390 s/op
Iteration  22: 2.407 s/op
Iteration  23: 2.352 s/op
Iteration  24: 2.369 s/op
Iteration  25: 2.367 s/op
Iteration  26: 2.405 s/op
Iteration  27: 2.409 s/op
Iteration  28: 2.375 s/op
Iteration  29: 2.395 s/op
Iteration  30: 2.379 s/op
Iteration  31: 2.337 s/op
Iteration  32: 2.380 s/op
Iteration  33: 2.373 s/op
Iteration  34: 2.404 s/op
Iteration  35: 2.394 s/op
Iteration  36: 2.411 s/op
Iteration  37: 2.360 s/op
Iteration  38: 2.380 s/op
Iteration  39: 2.407 s/op
Iteration  40: 2.362 s/op
Iteration  41: 2.373 s/op
Iteration  42: 2.387 s/op
Iteration  43: 2.400 s/op
Iteration  44: 2.424 s/op
Iteration  45: 2.368 s/op
Iteration  46: 2.374 s/op
Iteration  47: 2.404 s/op
Iteration  48: 2.393 s/op
Iteration  49: 2.375 s/op
Iteration  50: 2.376 s/op


Result "fr.mleduc.boa.BoaInterpreterBenchmark.boaInterpreter":
  N = 50
  mean =      2.403 ?(99.9%) 0.056 s/op

  Histogram, s/op:
    [2.300, 2.350) = 5 
    [2.350, 2.400) = 32 
    [2.400, 2.450) = 9 
    [2.450, 2.500) = 1 
    [2.500, 2.550) = 1 
    [2.550, 2.600) = 0 
    [2.600, 2.650) = 1 
    [2.650, 2.700) = 0 
    [2.700, 2.750) = 0 
    [2.750, 2.800) = 0 
    [2.800, 2.850) = 0 
    [2.850, 2.900) = 0 
    [2.900, 2.950) = 0 
    [2.950, 3.000) = 0 
    [3.000, 3.050) = 0 
    [3.050, 3.100) = 0 
    [3.100, 3.150) = 1 

  Percentiles, s/op:
      p(0.0000) =      2.326 s/op
     p(50.0000) =      2.380 s/op
     p(90.0000) =      2.423 s/op
     p(95.0000) =      2.571 s/op
     p(99.0000) =      3.109 s/op
     p(99.9000) =      3.109 s/op
     p(99.9900) =      3.109 s/op
     p(99.9990) =      3.109 s/op
     p(99.9999) =      3.109 s/op
    p(100.0000) =      3.109 s/op


# Run complete. Total time: 00:02:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 (program)  Mode  Cnt  Score   Error  Units
BoaInterpreterBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  2.403 ? 0.056   s/op

Benchmark result is saved to /home/benchmarks/results/boa_interpreter_fibonacci_1564265085386.json
{"wallclock_times": [121.60533353299999], "core_cycle_counts": [[103288910536], [114208638886], [73705667981], [126646842321]], "aperf_counts": [[102940429689], [114149816777], [73645868955], [126611717706]], "mperf_counts": [[102950293702], [114155089352], [73645866732], [126612741934]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/boa/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-11.0.4"), compilerHints are disabled.

--------------------------------------------------

[2019-07-28 00:06:46: INFO] Finished 'boa_interpreter_fibonacci(50)' (default-java variant) under 'boa_interpreter_openj9_11.0.4'
[2019-07-28 00:06:47: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 00:06:47: INFO] 17 executions left in scheduler queue
[2019-07-28 00:06:47: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 00:06:47: INFO] Estimated completion (next execution): 2019-07-28 00:11:20 (0:04:32 from now)
[2019-07-28 00:06:47: INFO] Reboot in preparation for next execution
[2019-07-28 00:17:35: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.268 s
Iteration   2: 7.928 s
Iteration   3: 7.931 s
Iteration   4: 7.947 s
Iteration   5: 7.867 s
Iteration   6: 7.841 s
Iteration   7: 7.809 s
Iteration   8: 7.828 s
Iteration   9: 7.862 s
Iteration  10: 7.831 s
Iteration  11: 7.831 s
Iteration  12: 7.813 s
Iteration  13: 7.825 s
Iteration  14: 7.867 s
Iteration  15: 7.722 s
Iteration  16: 7.866 s
Iteration  17: 7.834 s
Iteration  18: 7.834 s
Iteration  19: 7.829 s
Iteration  20: 7.836 s
Iteration  21: 7.807 s
Iteration  22: 7.790 s
Iteration  23: 7.796 s
Iteration  24: 7.919 s
Iteration  25: 7.786 s
Iteration  26: 7.754 s
Iteration  27: 7.791 s
Iteration  28: 7.850 s
Iteration  29: 7.745 s
Iteration  30: 7.851 s
Iteration  31: 7.805 s
Iteration  32: 7.744 s
Iteration  33: 7.759 s
Iteration  34: 7.823 s
Iteration  35: 7.836 s
Iteration  36: 7.794 s
Iteration  37: 7.814 s
Iteration  38: 7.841 s
Iteration  39: 7.823 s
Iteration  40: 7.849 s
Iteration  41: 7.826 s
Iteration  42: 7.820 s
Iteration  43: 7.823 s
Iteration  44: 7.828 s
Iteration  45: 7.833 s
Iteration  46: 7.816 s
Iteration  47: 7.826 s
Iteration  48: 7.847 s
Iteration  49: 7.814 s
Iteration  50: 7.797 s


Result: 7.835 ?(99.9%) 0.038 s [Average]
  Statistics: (min, avg, max) = (7.722, 7.835, 8.268), stdev = 0.077
  Confidence interval (99.9%): [7.798, 7.873]
  Samples, N = 50
        mean =      7.835 ?(99.9%) 0.038 s
         min =      7.722 s
  p( 0.0000) =      7.722 s
  p(50.0000) =      7.827 s
  p(90.0000) =      7.914 s
  p(95.0000) =      7.938 s
  p(99.0000) =      8.268 s
  p(99.9000) =      8.268 s
  p(99.9900) =      8.268 s
  p(99.9990) =      8.268 s
  p(99.9999) =      8.268 s
         max =      8.268 s


# Run complete. Total time: 00:06:32

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  7.835        0.038      s
{"wallclock_times": [392.953799256], "core_cycle_counts": [[252603826742], [312475778100], [403159006737], [428621984361]], "aperf_counts": [[251511126985], [312396161610], [403109910894], [428575050974]], "mperf_counts": [[252281574246], [312493220106], [403571104342], [428739651028]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 00:17:35: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 00:17:36: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 00:17:36: INFO] 16 executions left in scheduler queue
[2019-07-28 00:17:36: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 00:17:36: INFO] Estimated completion (next execution): 2019-07-28 00:26:39 (0:09:03 from now)
[2019-07-28 00:17:36: INFO] Reboot in preparation for next execution
[2019-07-28 00:32:20: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.528 s
Iteration   2: 13.115 s
Iteration   3: 12.603 s
Iteration   4: 12.525 s
Iteration   5: 12.570 s
Iteration   6: 12.537 s
Iteration   7: 12.524 s
Iteration   8: 12.517 s
Iteration   9: 12.528 s
Iteration  10: 12.530 s
Iteration  11: 12.546 s
Iteration  12: 12.567 s
Iteration  13: 12.545 s
Iteration  14: 12.527 s
Iteration  15: 12.525 s
Iteration  16: 12.539 s
Iteration  17: 12.494 s
Iteration  18: 12.528 s
Iteration  19: 12.539 s
Iteration  20: 12.565 s
Iteration  21: 12.536 s
Iteration  22: 12.523 s
Iteration  23: 12.506 s
Iteration  24: 12.494 s
Iteration  25: 12.507 s
Iteration  26: 12.503 s
Iteration  27: 12.556 s
Iteration  28: 12.536 s
Iteration  29: 12.529 s
Iteration  30: 12.505 s
Iteration  31: 12.527 s
Iteration  32: 12.527 s
Iteration  33: 12.498 s
Iteration  34: 12.523 s
Iteration  35: 12.534 s
Iteration  36: 12.556 s
Iteration  37: 12.526 s
Iteration  38: 12.519 s
Iteration  39: 12.525 s
Iteration  40: 12.514 s
Iteration  41: 12.513 s
Iteration  42: 12.497 s
Iteration  43: 12.552 s
Iteration  44: 12.517 s
Iteration  45: 12.545 s
Iteration  46: 12.512 s
Iteration  47: 12.503 s
Iteration  48: 12.512 s
Iteration  49: 12.506 s
Iteration  50: 12.506 s


Result: 12.539 ?(99.9%) 0.042 s [Average]
  Statistics: (min, avg, max) = (12.494, 12.539, 13.115), stdev = 0.086
  Confidence interval (99.9%): [12.497, 12.582]
  Samples, N = 50
        mean =     12.539 ?(99.9%) 0.042 s
         min =     12.494 s
  p( 0.0000) =     12.494 s
  p(50.0000) =     12.526 s
  p(90.0000) =     12.564 s
  p(95.0000) =     12.585 s
  p(99.0000) =     13.115 s
  p(99.9000) =     13.115 s
  p(99.9900) =     13.115 s
  p(99.9990) =     13.115 s
  p(99.9999) =     13.115 s
         max =     13.115 s


# Run complete. Total time: 00:10:27

Benchmark                                                                               (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  12.539        0.042      s
{"wallclock_times": [627.977360598], "core_cycle_counts": [[349461434622], [347014058878], [886040579495], [445440002792]], "aperf_counts": [[347759235452], [346868042517], [886003587383], [445403291771]], "mperf_counts": [[348262670210], [346909608068], [886063710578], [445430878070]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 00:32:20: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 00:32:21: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 00:32:21: INFO] 15 executions left in scheduler queue
[2019-07-28 00:32:21: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 00:32:21: INFO] Estimated completion (next execution): 2019-07-28 00:45:19 (0:12:58 from now)
[2019-07-28 00:32:21: INFO] Reboot in preparation for next execution
[2019-07-28 00:43:21: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.236 s
Iteration   2: 8.150 s
Iteration   3: 7.602 s
Iteration   4: 8.214 s
Iteration   5: 8.216 s
Iteration   6: 8.093 s
Iteration   7: 7.396 s
Iteration   8: 7.873 s
Iteration   9: 8.351 s
Iteration  10: 7.585 s
Iteration  11: 7.589 s
Iteration  12: 8.324 s
Iteration  13: 7.756 s
Iteration  14: 8.300 s
Iteration  15: 8.014 s
Iteration  16: 7.474 s
Iteration  17: 8.313 s
Iteration  18: 8.289 s
Iteration  19: 8.338 s
Iteration  20: 8.283 s
Iteration  21: 7.805 s
Iteration  22: 8.306 s
Iteration  23: 8.242 s
Iteration  24: 7.345 s
Iteration  25: 7.878 s
Iteration  26: 7.835 s
Iteration  27: 8.310 s
Iteration  28: 8.332 s
Iteration  29: 7.789 s
Iteration  30: 7.750 s
Iteration  31: 7.922 s
Iteration  32: 7.426 s
Iteration  33: 7.908 s
Iteration  34: 8.297 s
Iteration  35: 8.296 s
Iteration  36: 8.291 s
Iteration  37: 8.314 s
Iteration  38: 8.185 s
Iteration  39: 8.135 s
Iteration  40: 8.299 s
Iteration  41: 8.314 s
Iteration  42: 8.299 s
Iteration  43: 8.178 s
Iteration  44: 8.339 s
Iteration  45: 8.301 s
Iteration  46: 8.307 s
Iteration  47: 8.297 s
Iteration  48: 8.305 s
Iteration  49: 8.309 s
Iteration  50: 7.991 s


Result: 8.074 ?(99.9%) 0.149 s [Average]
  Statistics: (min, avg, max) = (7.345, 8.074, 8.351), stdev = 0.301
  Confidence interval (99.9%): [7.925, 8.223]
  Samples, N = 50
        mean =      8.074 ?(99.9%) 0.149 s
         min =      7.345 s
  p( 0.0000) =      7.345 s
  p(50.0000) =      8.226 s
  p(90.0000) =      8.323 s
  p(95.0000) =      8.339 s
  p(99.0000) =      8.351 s
  p(99.9000) =      8.351 s
  p(99.9900) =      8.351 s
  p(99.9990) =      8.351 s
  p(99.9999) =      8.351 s
         max =      8.351 s


# Run complete. Total time: 00:06:44

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  8.074        0.149      s
{"wallclock_times": [404.8239788369999], "core_cycle_counts": [[181836231395], [166324365191], [621930882812], [221996523313]], "aperf_counts": [[180694134345], [166251621964], [621898323464], [221950147202]], "mperf_counts": [[197863068212], [178969677906], [697001055022], [240658252460]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 00:43:21: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 00:43:22: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 00:43:22: INFO] 14 executions left in scheduler queue
[2019-07-28 00:43:22: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 00:43:22: INFO] Estimated completion (next execution): 2019-07-28 00:52:37 (0:09:15 from now)
[2019-07-28 00:43:22: INFO] Reboot in preparation for next execution
[2019-07-28 01:02:27: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 17.889 s
Iteration   2: 18.125 s
Iteration   3: 17.965 s
Iteration   4: 17.853 s
Iteration   5: 17.678 s
Iteration   6: 17.805 s
Iteration   7: 17.873 s
Iteration   8: 17.814 s
Iteration   9: 17.669 s
Iteration  10: 17.696 s
Iteration  11: 17.696 s
Iteration  12: 17.796 s
Iteration  13: 17.702 s
Iteration  14: 17.739 s
Iteration  15: 17.743 s
Iteration  16: 17.666 s
Iteration  17: 17.657 s
Iteration  18: 17.787 s
Iteration  19: 17.694 s
Iteration  20: 17.850 s
Iteration  21: 17.669 s
Iteration  22: 17.632 s
Iteration  23: 17.737 s
Iteration  24: 17.753 s
Iteration  25: 17.795 s
Iteration  26: 17.683 s
Iteration  27: 17.808 s
Iteration  28: 17.772 s
Iteration  29: 17.743 s
Iteration  30: 17.677 s
Iteration  31: 17.827 s
Iteration  32: 17.833 s
Iteration  33: 17.706 s
Iteration  34: 17.828 s
Iteration  35: 17.693 s
Iteration  36: 17.757 s
Iteration  37: 17.773 s
Iteration  38: 17.821 s
Iteration  39: 17.766 s
Iteration  40: 17.675 s
Iteration  41: 17.707 s
Iteration  42: 17.744 s
Iteration  43: 17.667 s
Iteration  44: 17.624 s
Iteration  45: 17.645 s
Iteration  46: 17.694 s
Iteration  47: 17.651 s
Iteration  48: 17.760 s
Iteration  49: 17.764 s
Iteration  50: 17.790 s


Result: 17.754 ?(99.9%) 0.045 s [Average]
  Statistics: (min, avg, max) = (17.624, 17.754, 18.125), stdev = 0.092
  Confidence interval (99.9%): [17.708, 17.799]
  Samples, N = 50
        mean =     17.754 ?(99.9%) 0.045 s
         min =     17.624 s
  p( 0.0000) =     17.624 s
  p(50.0000) =     17.744 s
  p(90.0000) =     17.853 s
  p(95.0000) =     17.924 s
  p(99.0000) =     18.125 s
  p(99.9000) =     18.125 s
  p(99.9900) =     18.125 s
  p(99.9990) =     18.125 s
  p(99.9999) =     18.125 s
         max =     18.125 s


# Run complete. Total time: 00:14:48

Benchmark                                                                          (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  17.754        0.045      s
{"wallclock_times": [888.7720901570001], "core_cycle_counts": [[684070921400], [527096826559], [972754436067], [678615672843]], "aperf_counts": [[681932175698], [526918932077], [972669011595], [678531788773]], "mperf_counts": [[683329260026], [527046030364], [972800100106], [678760667978]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 01:02:27: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_hotspot_12.0.2'
[2019-07-28 01:02:28: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 01:02:28: INFO] 13 executions left in scheduler queue
[2019-07-28 01:02:28: INFO] Next execution is 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-07-28 01:02:28: INFO] Estimated completion (next execution): 2019-07-28 01:19:47 (0:17:19 from now)
[2019-07-28 01:02:28: INFO] Reboot in preparation for next execution
[2019-07-28 01:07:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.713 s/op
Iteration   2: 1.326 s/op
Iteration   3: 1.316 s/op
Iteration   4: 1.390 s/op
Iteration   5: 1.295 s/op
Iteration   6: 1.321 s/op
Iteration   7: 1.302 s/op
Iteration   8: 1.295 s/op
Iteration   9: 1.298 s/op
Iteration  10: 1.298 s/op
Iteration  11: 1.296 s/op
Iteration  12: 1.301 s/op
Iteration  13: 1.305 s/op
Iteration  14: 1.298 s/op
Iteration  15: 1.315 s/op
Iteration  16: 1.308 s/op
Iteration  17: 1.331 s/op
Iteration  18: 1.304 s/op
Iteration  19: 1.302 s/op
Iteration  20: 1.303 s/op
Iteration  21: 1.299 s/op
Iteration  22: 1.309 s/op
Iteration  23: 1.303 s/op
Iteration  24: 1.299 s/op
Iteration  25: 1.303 s/op
Iteration  26: 1.301 s/op
Iteration  27: 1.302 s/op
Iteration  28: 1.341 s/op
Iteration  29: 1.303 s/op
Iteration  30: 1.304 s/op
Iteration  31: 1.339 s/op
Iteration  32: 1.332 s/op
Iteration  33: 1.305 s/op
Iteration  34: 1.303 s/op
Iteration  35: 1.301 s/op
Iteration  36: 1.303 s/op
Iteration  37: 1.331 s/op
Iteration  38: 1.339 s/op
Iteration  39: 1.304 s/op
Iteration  40: 1.300 s/op
Iteration  41: 1.305 s/op
Iteration  42: 1.313 s/op
Iteration  43: 1.298 s/op
Iteration  44: 1.295 s/op
Iteration  45: 1.305 s/op
Iteration  46: 1.298 s/op
Iteration  47: 1.309 s/op
Iteration  48: 1.316 s/op
Iteration  49: 1.333 s/op
Iteration  50: 1.309 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.318 ?(99.9%) 0.029 s/op

  Histogram, s/op:
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 12 
    [1.300, 1.350) = 36 
    [1.350, 1.400) = 1 
    [1.400, 1.450) = 0 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 
    [1.650, 1.700) = 0 
    [1.700, 1.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      1.295 s/op
     p(50.0000) =      1.304 s/op
     p(90.0000) =      1.338 s/op
     p(95.0000) =      1.363 s/op
     p(99.0000) =      1.713 s/op
     p(99.9000) =      1.713 s/op
     p(99.9900) =      1.713 s/op
     p(99.9990) =      1.713 s/op
     p(99.9999) =      1.713 s/op
    p(100.0000) =      1.713 s/op


# Run complete. Total time: 00:01:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_sort.xmi    ss   50  1.318 ? 0.029   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_sort_1564268804501.json
{"wallclock_times": [66.83214176999999], "core_cycle_counts": [[90097257926], [26694974895], [50565434101], [57055089408]], "aperf_counts": [[89934482353], [26656819281], [50539773544], [57032318467]], "mperf_counts": [[89951370580], [26658316524], [50539958422], [57036635906]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 01:07:51: INFO] Finished 'boa_visitor_sort(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-07-28 01:07:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 01:07:52: INFO] 12 executions left in scheduler queue
[2019-07-28 01:07:52: INFO] Next execution is 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-07-28 01:07:52: INFO] Estimated completion (next execution): 2019-07-28 01:11:29 (0:03:37 from now)
[2019-07-28 01:07:52: INFO] Reboot in preparation for next execution
[2019-07-28 01:13:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter
# Parameters: (program = /home/benchmarks/programs/boa_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 1.655 s/op
Iteration   2: 1.333 s/op
Iteration   3: 1.405 s/op
Iteration   4: 1.293 s/op
Iteration   5: 1.331 s/op
Iteration   6: 1.292 s/op
Iteration   7: 1.290 s/op
Iteration   8: 1.290 s/op
Iteration   9: 1.291 s/op
Iteration  10: 1.289 s/op
Iteration  11: 1.292 s/op
Iteration  12: 1.295 s/op
Iteration  13: 1.292 s/op
Iteration  14: 1.292 s/op
Iteration  15: 1.292 s/op
Iteration  16: 1.290 s/op
Iteration  17: 1.290 s/op
Iteration  18: 1.291 s/op
Iteration  19: 1.290 s/op
Iteration  20: 1.291 s/op
Iteration  21: 1.292 s/op
Iteration  22: 1.292 s/op
Iteration  23: 1.291 s/op
Iteration  24: 1.292 s/op
Iteration  25: 1.292 s/op
Iteration  26: 1.289 s/op
Iteration  27: 1.290 s/op
Iteration  28: 1.290 s/op
Iteration  29: 1.290 s/op
Iteration  30: 1.289 s/op
Iteration  31: 1.290 s/op
Iteration  32: 1.290 s/op
Iteration  33: 1.290 s/op
Iteration  34: 1.291 s/op
Iteration  35: 1.291 s/op
Iteration  36: 1.290 s/op
Iteration  37: 1.290 s/op
Iteration  38: 1.291 s/op
Iteration  39: 1.291 s/op
Iteration  40: 1.290 s/op
Iteration  41: 1.290 s/op
Iteration  42: 1.290 s/op
Iteration  43: 1.291 s/op
Iteration  44: 1.291 s/op
Iteration  45: 1.289 s/op
Iteration  46: 1.289 s/op
Iteration  47: 1.290 s/op
Iteration  48: 1.289 s/op
Iteration  49: 1.291 s/op
Iteration  50: 1.292 s/op


Result "fr.mleduc.boa.BoaVisitorBenchmark.boaInterpreter":
  N = 50
  mean =      1.302 ?(99.9%) 0.027 s/op

  Histogram, s/op:
    [1.200, 1.250) = 0 
    [1.250, 1.300) = 46 
    [1.300, 1.350) = 2 
    [1.350, 1.400) = 0 
    [1.400, 1.450) = 1 
    [1.450, 1.500) = 0 
    [1.500, 1.550) = 0 
    [1.550, 1.600) = 0 
    [1.600, 1.650) = 0 

  Percentiles, s/op:
      p(0.0000) =      1.289 s/op
     p(50.0000) =      1.291 s/op
     p(90.0000) =      1.294 s/op
     p(95.0000) =      1.366 s/op
     p(99.0000) =      1.655 s/op
     p(99.9000) =      1.655 s/op
     p(99.9900) =      1.655 s/op
     p(99.9990) =      1.655 s/op
     p(99.9999) =      1.655 s/op
    p(100.0000) =      1.655 s/op


# Run complete. Total time: 00:01:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             (program)  Mode  Cnt  Score   Error  Units
BoaVisitorBenchmark.boaInterpreter  /home/benchmarks/programs/boa_fibonacci.xmi    ss   50  1.302 ? 0.027   s/op

Benchmark result is saved to /home/benchmarks/results/boa_visitor_fibonacci_1564269127369.json
{"wallclock_times": [65.946058529], "core_cycle_counts": [[59635325543], [71027753015], [20889394361], [64932763004]], "aperf_counts": [[59487630005], [71007561560], [20865655008], [64916510666]], "mperf_counts": [[59511287498], [71008677936], [20865929236], [64920420566]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 01:13:13: INFO] Finished 'boa_visitor_fibonacci(50)' (default-java variant) under 'boa_visitor_graalvm-ee-19.1.1'
[2019-07-28 01:13:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 01:13:14: INFO] 11 executions left in scheduler queue
[2019-07-28 01:13:14: INFO] Next execution is 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-07-28 01:13:14: INFO] Estimated completion (next execution): 2019-07-28 01:16:50 (0:03:36 from now)
[2019-07-28 01:13:14: INFO] Reboot in preparation for next execution
[2019-07-28 01:17:30: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.003 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmSwitchBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 41 
    [0.000, 0.001) = 8 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.003) = 0 
    [0.003, 0.003) = 0 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.003 s/op
     p(99.9000) =      0.003 s/op
     p(99.9900) =      0.003 s/op
     p(99.9990) =      0.003 s/op
     p(99.9999) =      0.003 s/op
    p(100.0000) =      0.003 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          (program)  Mode  Cnt   Score    Error  Units
FsmSwitchBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_switch_buffers_1564269449971.json
{"wallclock_times": [0.8474366110000062], "core_cycle_counts": [[1890518509], [1085184977], [1445173537], [1269305753]], "aperf_counts": [[1887919521], [1080969171], [1440341835], [1265005989]], "mperf_counts": [[1898010280], [1085797446], [1444729148], [1265257832]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 01:17:30: INFO] Finished 'fsm_switch_buffers(50)' (default-java variant) under 'fsm_switch_graalvm-ee-19.1.1'
[2019-07-28 01:17:31: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 01:17:31: INFO] 10 executions left in scheduler queue
[2019-07-28 01:17:31: INFO] Next execution is 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-07-28 01:17:31: INFO] Estimated completion (next execution): 2019-07-28 01:20:02 (0:02:31 from now)
[2019-07-28 01:17:31: INFO] Reboot in preparation for next execution
[2019-07-28 01:21:48: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit GraalVM EE 19.1.1, 25.221-b11-jvmci-19.1-b01
# VM invoker: /home/benchmarks/jvms/graalvm-ee-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter
# Parameters: (program = /home/benchmarks/programs/fsm_buffers.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 0.002 s/op
Iteration   2: ? 10?? s/op
Iteration   3: ? 10?? s/op
Iteration   4: ? 10?? s/op
Iteration   5: ? 10?? s/op
Iteration   6: ? 10?? s/op
Iteration   7: ? 10?? s/op
Iteration   8: ? 10?? s/op
Iteration   9: ? 10?? s/op
Iteration  10: ? 10?? s/op
Iteration  11: ? 10?? s/op
Iteration  12: ? 10?? s/op
Iteration  13: ? 10?? s/op
Iteration  14: ? 10?? s/op
Iteration  15: ? 10?? s/op
Iteration  16: ? 10?? s/op
Iteration  17: ? 10?? s/op
Iteration  18: ? 10?? s/op
Iteration  19: ? 10?? s/op
Iteration  20: ? 10?? s/op
Iteration  21: ? 10?? s/op
Iteration  22: ? 10?? s/op
Iteration  23: ? 10?? s/op
Iteration  24: ? 10?? s/op
Iteration  25: ? 10?? s/op
Iteration  26: ? 10?? s/op
Iteration  27: ? 10?? s/op
Iteration  28: ? 10?? s/op
Iteration  29: ? 10?? s/op
Iteration  30: ? 10?? s/op
Iteration  31: ? 10?? s/op
Iteration  32: ? 10?? s/op
Iteration  33: ? 10?? s/op
Iteration  34: ? 10?? s/op
Iteration  35: ? 10?? s/op
Iteration  36: ? 10?? s/op
Iteration  37: ? 10?? s/op
Iteration  38: ? 10?? s/op
Iteration  39: ? 10?? s/op
Iteration  40: ? 10?? s/op
Iteration  41: ? 10?? s/op
Iteration  42: ? 10?? s/op
Iteration  43: ? 10?? s/op
Iteration  44: ? 10?? s/op
Iteration  45: ? 10?? s/op
Iteration  46: ? 10?? s/op
Iteration  47: ? 10?? s/op
Iteration  48: ? 10?? s/op
Iteration  49: ? 10?? s/op
Iteration  50: ? 10?? s/op


Result "fr.mleduc.fsm.FsmInterpreterBenchmark.fsmInterpreter":
  N = 50
  mean =     ? 10?? ?(99.9%) 0.001 s/op

  Histogram, s/op:
    [0.000, 0.000) = 23 
    [0.000, 0.000) = 26 
    [0.000, 0.000) = 0 
    [0.000, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.001) = 0 
    [0.001, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 0 
    [0.002, 0.002) = 1 

  Percentiles, s/op:
      p(0.0000) =     ? 10?? s/op
     p(50.0000) =     ? 10?? s/op
     p(90.0000) =     ? 10?? s/op
     p(95.0000) =     ? 10?? s/op
     p(99.0000) =      0.002 s/op
     p(99.9000) =      0.002 s/op
     p(99.9900) =      0.002 s/op
     p(99.9990) =      0.002 s/op
     p(99.9999) =      0.002 s/op
    p(100.0000) =      0.002 s/op


# Run complete. Total time: 00:00:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               (program)  Mode  Cnt   Score    Error  Units
FsmInterpreterBenchmark.fsmInterpreter  /home/benchmarks/programs/fsm_buffers.xmi    ss   50  ? 10??            s/op

Benchmark result is saved to /home/benchmarks/results/fsm_interpreter_buffers_1564269707466.json
{"wallclock_times": [0.842668419000006], "core_cycle_counts": [[1909826677], [1280284479], [1052986375], [1328659826]], "aperf_counts": [[1907375219], [1275421146], [1048744882], [1324043872]], "mperf_counts": [[1928797640], [1283838320], [1050507744], [1325561676]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 01:21:48: INFO] Finished 'fsm_interpreter_buffers(50)' (default-java variant) under 'fsm_interpreter_graalvm-ee-19.1.1'
[2019-07-28 01:21:49: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 01:21:49: INFO] 9 executions left in scheduler queue
[2019-07-28 01:21:49: INFO] Next execution is 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-07-28 01:21:49: INFO] Estimated completion (next execution): 2019-07-28 01:24:20 (0:02:31 from now)
[2019-07-28 01:21:49: INFO] Reboot in preparation for next execution
[2019-07-28 01:26:20: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-28 01:26:20: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-28 01:26:20: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-28 01:26:20: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-28 01:26:20: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-28 01:37:29: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.2, OpenJDK 64-Bit Server VM, 12.0.2+10
# VM invoker: /home/benchmarks/jvms/hotspot_12.0.2/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/logo_fractal.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 14.047 s/op
Iteration   2: 13.397 s/op
Iteration   3: 13.617 s/op
Iteration   4: 13.412 s/op
Iteration   5: 13.344 s/op
Iteration   6: 13.526 s/op
Iteration   7: 13.351 s/op
Iteration   8: 13.312 s/op
Iteration   9: 13.313 s/op
Iteration  10: 13.316 s/op
Iteration  11: 13.325 s/op
Iteration  12: 13.411 s/op
Iteration  13: 13.316 s/op
Iteration  14: 13.272 s/op
Iteration  15: 13.280 s/op
Iteration  16: 13.357 s/op
Iteration  17: 13.315 s/op
Iteration  18: 13.415 s/op
Iteration  19: 13.315 s/op
Iteration  20: 13.326 s/op
Iteration  21: 13.425 s/op
Iteration  22: 13.332 s/op
Iteration  23: 13.298 s/op
Iteration  24: 13.280 s/op
Iteration  25: 13.322 s/op
Iteration  26: 13.372 s/op
Iteration  27: 13.327 s/op
Iteration  28: 13.283 s/op
Iteration  29: 13.338 s/op
Iteration  30: 13.357 s/op
Iteration  31: 13.323 s/op
Iteration  32: 13.290 s/op
Iteration  33: 13.474 s/op
Iteration  34: 13.327 s/op
Iteration  35: 13.378 s/op
Iteration  36: 13.296 s/op
Iteration  37: 13.396 s/op
Iteration  38: 13.203 s/op
Iteration  39: 13.312 s/op
Iteration  40: 13.459 s/op
Iteration  41: 13.363 s/op
Iteration  42: 13.272 s/op
Iteration  43: 13.326 s/op
Iteration  44: 13.408 s/op
Iteration  45: 13.271 s/op
Iteration  46: 13.314 s/op
Iteration  47: 13.426 s/op
Iteration  48: 13.232 s/op
Iteration  49: 13.441 s/op
Iteration  50: 13.185 s/op


Result "fr.mleduc.logo.LogoRevisitorBenchmark.logoInterpreter":
  N = 50
  mean =     13.360 ?(99.9%) 0.062 s/op

  Histogram, s/op:
    [13.100, 13.200) = 1 
    [13.200, 13.300) = 11 
    [13.300, 13.400) = 26 
    [13.400, 13.500) = 9 
    [13.500, 13.600) = 1 
    [13.600, 13.700) = 1 
    [13.700, 13.800) = 0 
    [13.800, 13.900) = 0 
    [13.900, 14.000) = 0 

  Percentiles, s/op:
      p(0.0000) =     13.185 s/op
     p(50.0000) =     13.326 s/op
     p(90.0000) =     13.457 s/op
     p(95.0000) =     13.567 s/op
     p(99.0000) =     14.047 s/op
     p(99.9000) =     14.047 s/op
     p(99.9900) =     14.047 s/op
     p(99.9990) =     14.047 s/op
     p(99.9999) =     14.047 s/op
    p(100.0000) =     14.047 s/op


# Run complete. Total time: 00:11:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (program)  Mode  Cnt   Score   Error  Units
LogoRevisitorBenchmark.logoInterpreter  /home/benchmarks/programs/logo_fractal.xmi    ss   50  13.360 ? 0.062   s/op

Benchmark result is saved to /home/benchmarks/results/logo_revisitor_fractal_1564269980525.json
{"wallclock_times": [669.058855082], "core_cycle_counts": [[423265316507], [411274561558], [871364930183], [667464460686]], "aperf_counts": [[421206480094], [411044331509], [871080685118], [667232911528]], "mperf_counts": [[427792226390], [417714115292], [887205605496], [680049183990]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/logo/revisitor/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

--------------------------------------------------

[2019-07-28 01:37:29: INFO] Finished 'logo_revisitor_fractal(50)' (default-java variant) under 'logo_revisitor_hotspot_12.0.2'
[2019-07-28 01:37:30: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 01:37:30: INFO] 8 executions left in scheduler queue
[2019-07-28 01:37:30: INFO] Next execution is 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 01:37:30: INFO] Estimated completion (next execution): 2019-07-28 01:51:09 (0:13:39 from now)
[2019-07-28 01:37:30: INFO] Reboot in preparation for next execution
[2019-07-28 01:41:47: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-28 01:41:47: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-28 01:41:47: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-28 01:41:47: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-28 01:41:47: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-28 01:41:47: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-28 01:47:08: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 8.258 s/op
Iteration   2: 7.010 s/op
Iteration   3: 7.278 s/op
Iteration   4: 7.102 s/op
Iteration   5: 6.458 s/op
Iteration   6: 6.368 s/op
Iteration   7: 6.420 s/op
Iteration   8: 6.364 s/op
Iteration   9: 6.374 s/op
Iteration  10: 6.355 s/op
Iteration  11: 6.395 s/op
Iteration  12: 6.367 s/op
Iteration  13: 6.365 s/op
Iteration  14: 6.343 s/op
Iteration  15: 6.334 s/op
Iteration  16: 6.314 s/op
Iteration  17: 6.365 s/op
Iteration  18: 6.325 s/op
Iteration  19: 6.269 s/op
Iteration  20: 6.223 s/op
Iteration  21: 6.271 s/op
Iteration  22: 6.330 s/op
Iteration  23: 6.199 s/op
Iteration  24: 6.279 s/op
Iteration  25: 6.274 s/op
Iteration  26: 6.335 s/op
Iteration  27: 6.321 s/op
Iteration  28: 6.307 s/op
Iteration  29: 6.285 s/op
Iteration  30: 6.305 s/op
Iteration  31: 6.280 s/op
Iteration  32: 6.317 s/op
Iteration  33: 6.291 s/op
Iteration  34: 6.276 s/op
Iteration  35: 6.258 s/op
Iteration  36: 6.327 s/op
Iteration  37: 6.283 s/op
Iteration  38: 6.308 s/op
Iteration  39: 6.292 s/op
Iteration  40: 6.296 s/op
Iteration  41: 6.204 s/op
Iteration  42: 6.313 s/op
Iteration  43: 6.272 s/op
Iteration  44: 6.215 s/op
Iteration  45: 6.214 s/op
Iteration  46: 6.280 s/op
Iteration  47: 6.257 s/op
Iteration  48: 6.301 s/op
Iteration  49: 6.281 s/op
Iteration  50: 6.280 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      6.395 ?(99.9%) 0.168 s/op

  Histogram, s/op:
    [6.000, 6.250) = 5 
    [6.250, 6.500) = 41 
    [6.500, 6.750) = 0 
    [6.750, 7.000) = 0 
    [7.000, 7.250) = 2 
    [7.250, 7.500) = 1 
    [7.500, 7.750) = 0 
    [7.750, 8.000) = 0 
    [8.000, 8.250) = 0 
    [8.250, 8.500) = 1 
    [8.500, 8.750) = 0 

  Percentiles, s/op:
      p(0.0000) =      6.199 s/op
     p(50.0000) =      6.307 s/op
     p(90.0000) =      6.454 s/op
     p(95.0000) =      7.181 s/op
     p(99.0000) =      8.258 s/op
     p(99.9000) =      8.258 s/op
     p(99.9900) =      8.258 s/op
     p(99.9990) =      8.258 s/op
     p(99.9999) =      8.258 s/op
    p(100.0000) =      8.258 s/op


# Run complete. Total time: 00:05:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fibonacci.xmi    ss   50  6.395 ? 0.168   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fibonacci_1564270907442.json
{"wallclock_times": [321.357488278], "core_cycle_counts": [[293259834945], [281335067899], [331086602898], [209707793658]], "aperf_counts": [[292429929767], [281254442691], [330966634134], [209624455353]], "mperf_counts": [[292432269262], [281254423460], [330966687090], [209625395264]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-28 01:47:08: INFO] Finished 'minijava_interpreter_fibonacci(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 01:47:09: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 01:47:09: INFO] 7 executions left in scheduler queue
[2019-07-28 01:47:09: INFO] Next execution is 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 01:47:09: INFO] Estimated completion (next execution): 2019-07-28 01:55:01 (0:07:51 from now)
[2019-07-28 01:47:09: INFO] Reboot in preparation for next execution
[2019-07-28 01:51:27: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-28 01:51:27: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-28 01:51:27: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-28 01:51:27: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-28 01:51:27: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-28 01:51:27: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-28 02:08:04: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 20.915 s/op
Iteration   2: 20.162 s/op
Iteration   3: 20.240 s/op
Iteration   4: 20.379 s/op
Iteration   5: 20.129 s/op
Iteration   6: 20.232 s/op
Iteration   7: 20.305 s/op
Iteration   8: 20.094 s/op
Iteration   9: 20.167 s/op
Iteration  10: 20.117 s/op
Iteration  11: 19.971 s/op
Iteration  12: 20.138 s/op
Iteration  13: 20.093 s/op
Iteration  14: 20.016 s/op
Iteration  15: 20.040 s/op
Iteration  16: 20.156 s/op
Iteration  17: 19.971 s/op
Iteration  18: 19.820 s/op
Iteration  19: 19.807 s/op
Iteration  20: 19.931 s/op
Iteration  21: 19.754 s/op
Iteration  22: 19.729 s/op
Iteration  23: 19.780 s/op
Iteration  24: 19.751 s/op
Iteration  25: 19.780 s/op
Iteration  26: 19.750 s/op
Iteration  27: 19.695 s/op
Iteration  28: 19.785 s/op
Iteration  29: 19.875 s/op
Iteration  30: 19.901 s/op
Iteration  31: 19.728 s/op
Iteration  32: 19.822 s/op
Iteration  33: 19.835 s/op
Iteration  34: 19.732 s/op
Iteration  35: 19.854 s/op
Iteration  36: 19.823 s/op
Iteration  37: 19.912 s/op
Iteration  38: 19.727 s/op
Iteration  39: 19.759 s/op
Iteration  40: 19.833 s/op
Iteration  41: 19.765 s/op
Iteration  42: 19.740 s/op
Iteration  43: 19.803 s/op
Iteration  44: 19.670 s/op
Iteration  45: 19.758 s/op
Iteration  46: 19.834 s/op
Iteration  47: 19.777 s/op
Iteration  48: 19.737 s/op
Iteration  49: 19.824 s/op
Iteration  50: 19.798 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =     19.924 ?(99.9%) 0.114 s/op

  Histogram, s/op:
    [19.000, 19.125) = 0 
    [19.125, 19.250) = 0 
    [19.250, 19.375) = 0 
    [19.375, 19.500) = 0 
    [19.500, 19.625) = 0 
    [19.625, 19.750) = 9 
    [19.750, 19.875) = 20 
    [19.875, 20.000) = 6 
    [20.000, 20.125) = 5 
    [20.125, 20.250) = 7 
    [20.250, 20.375) = 1 
    [20.375, 20.500) = 1 
    [20.500, 20.625) = 0 
    [20.625, 20.750) = 0 
    [20.750, 20.875) = 0 

  Percentiles, s/op:
      p(0.0000) =     19.670 s/op
     p(50.0000) =     19.828 s/op
     p(90.0000) =     20.226 s/op
     p(95.0000) =     20.338 s/op
     p(99.0000) =     20.915 s/op
     p(99.9000) =     20.915 s/op
     p(99.9900) =     20.915 s/op
     p(99.9990) =     20.915 s/op
     p(99.9999) =     20.915 s/op
    p(100.0000) =     20.915 s/op


# Run complete. Total time: 00:16:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       (program)  Mode  Cnt   Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_sort.xmi    ss   50  19.924 ? 0.114   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_sort_1564271487018.json
{"wallclock_times": [997.918871593], "core_cycle_counts": [[1220341902662], [759970809999], [569294627340], [697849981292]], "aperf_counts": [[1218245646574], [759708411030], [569011692752], [697667300267]], "mperf_counts": [[1218248796628], [759708316544], [569011596932], [697667230988]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-28 02:08:04: INFO] Finished 'minijava_interpreter_sort(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 02:08:05: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 02:08:05: INFO] 6 executions left in scheduler queue
[2019-07-28 02:08:05: INFO] Next execution is 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 02:08:05: INFO] Estimated completion (next execution): 2019-07-28 02:27:14 (0:19:08 from now)
[2019-07-28 02:08:05: INFO] Reboot in preparation for next execution
[2019-07-28 02:12:14: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-28 02:12:14: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-28 02:12:14: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-28 02:12:14: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-28 02:12:14: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-28 02:12:14: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-28 02:15:54: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.889 s/op
Iteration   2: 4.988 s/op
Iteration   3: 4.364 s/op
Iteration   4: 4.372 s/op
Iteration   5: 4.414 s/op
Iteration   6: 4.383 s/op
Iteration   7: 4.407 s/op
Iteration   8: 4.660 s/op
Iteration   9: 4.376 s/op
Iteration  10: 4.338 s/op
Iteration  11: 4.349 s/op
Iteration  12: 4.371 s/op
Iteration  13: 4.319 s/op
Iteration  14: 4.333 s/op
Iteration  15: 4.354 s/op
Iteration  16: 4.346 s/op
Iteration  17: 4.397 s/op
Iteration  18: 4.385 s/op
Iteration  19: 4.347 s/op
Iteration  20: 4.312 s/op
Iteration  21: 4.357 s/op
Iteration  22: 4.337 s/op
Iteration  23: 4.308 s/op
Iteration  24: 4.298 s/op
Iteration  25: 4.313 s/op
Iteration  26: 4.265 s/op
Iteration  27: 4.287 s/op
Iteration  28: 4.274 s/op
Iteration  29: 4.300 s/op
Iteration  30: 4.286 s/op
Iteration  31: 4.286 s/op
Iteration  32: 4.320 s/op
Iteration  33: 4.318 s/op
Iteration  34: 4.234 s/op
Iteration  35: 4.278 s/op
Iteration  36: 4.265 s/op
Iteration  37: 4.284 s/op
Iteration  38: 4.266 s/op
Iteration  39: 4.308 s/op
Iteration  40: 4.274 s/op
Iteration  41: 4.246 s/op
Iteration  42: 4.239 s/op
Iteration  43: 4.222 s/op
Iteration  44: 4.282 s/op
Iteration  45: 4.298 s/op
Iteration  46: 4.320 s/op
Iteration  47: 4.294 s/op
Iteration  48: 4.326 s/op
Iteration  49: 4.313 s/op
Iteration  50: 4.243 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.367 ?(99.9%) 0.123 s/op

  Histogram, s/op:
    [4.000, 4.125) = 0 
    [4.125, 4.250) = 5 
    [4.250, 4.375) = 36 
    [4.375, 4.500) = 6 
    [4.500, 4.625) = 0 
    [4.625, 4.750) = 1 
    [4.750, 4.875) = 0 
    [4.875, 5.000) = 1 
    [5.000, 5.125) = 0 
    [5.125, 5.250) = 0 
    [5.250, 5.375) = 0 
    [5.375, 5.500) = 0 
    [5.500, 5.625) = 0 
    [5.625, 5.750) = 0 
    [5.750, 5.875) = 0 

  Percentiles, s/op:
      p(0.0000) =      4.222 s/op
     p(50.0000) =      4.316 s/op
     p(90.0000) =      4.406 s/op
     p(95.0000) =      4.808 s/op
     p(99.0000) =      5.889 s/op
     p(99.9000) =      5.889 s/op
     p(99.9900) =      5.889 s/op
     p(99.9990) =      5.889 s/op
     p(99.9999) =      5.889 s/op
    p(100.0000) =      5.889 s/op


# Run complete. Total time: 00:03:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_binarytree.xmi    ss   50  4.367 ? 0.123   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_binarytree_1564272734110.json
{"wallclock_times": [220.24629554900002], "core_cycle_counts": [[165006565154], [227065884997], [229652136179], [226899247936]], "aperf_counts": [[164332932740], [226965228833], [229558328410], [226813362014]], "mperf_counts": [[164336548296], [226965219210], [229558317432], [226814430478]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-28 02:15:54: INFO] Finished 'minijava_interpreter_binarytree(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 02:15:55: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 02:15:55: INFO] 5 executions left in scheduler queue
[2019-07-28 02:15:55: INFO] Next execution is 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 02:15:55: INFO] Estimated completion (next execution): 2019-07-28 02:22:06 (0:06:10 from now)
[2019-07-28 02:15:55: INFO] Reboot in preparation for next execution
[2019-07-28 02:20:02: INFO] stderr: WARNING: An illegal reflective access operation has occurred
[2019-07-28 02:20:02: INFO] stderr: WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
[2019-07-28 02:20:02: INFO] stderr: WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[2019-07-28 02:20:02: INFO] stderr: WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[2019-07-28 02:20:02: INFO] stderr: WARNING: All illegal access operations will be denied in a future release
[2019-07-28 02:20:02: INFO] stderr: WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.
[2019-07-28 02:24:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# JMH version: 1.21
# VM version: JDK 12.0.1, Eclipse OpenJ9 VM, openj9-0.14.1
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /home/benchmarks/jvms/openj9_12.0.1/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.707 s/op
Iteration   2: 5.959 s/op
Iteration   3: 5.528 s/op
Iteration   4: 5.404 s/op
Iteration   5: 4.951 s/op
Iteration   6: 4.879 s/op
Iteration   7: 5.058 s/op
Iteration   8: 4.892 s/op
Iteration   9: 5.012 s/op
Iteration  10: 4.921 s/op
Iteration  11: 4.828 s/op
Iteration  12: 4.999 s/op
Iteration  13: 4.922 s/op
Iteration  14: 4.848 s/op
Iteration  15: 4.971 s/op
Iteration  16: 4.887 s/op
Iteration  17: 4.813 s/op
Iteration  18: 4.943 s/op
Iteration  19: 4.833 s/op
Iteration  20: 4.765 s/op
Iteration  21: 4.952 s/op
Iteration  22: 4.892 s/op
Iteration  23: 4.959 s/op
Iteration  24: 4.919 s/op
Iteration  25: 4.862 s/op
Iteration  26: 4.950 s/op
Iteration  27: 4.921 s/op
Iteration  28: 4.819 s/op
Iteration  29: 4.878 s/op
Iteration  30: 4.811 s/op
Iteration  31: 4.742 s/op
Iteration  32: 4.893 s/op
Iteration  33: 4.821 s/op
Iteration  34: 4.970 s/op
Iteration  35: 4.906 s/op
Iteration  36: 4.801 s/op
Iteration  37: 4.929 s/op
Iteration  38: 4.930 s/op
Iteration  39: 4.821 s/op
Iteration  40: 4.934 s/op
Iteration  41: 4.905 s/op
Iteration  42: 4.792 s/op
Iteration  43: 4.946 s/op
Iteration  44: 4.809 s/op
Iteration  45: 4.948 s/op
Iteration  46: 4.924 s/op
Iteration  47: 4.864 s/op
Iteration  48: 4.947 s/op
Iteration  49: 4.917 s/op
Iteration  50: 4.809 s/op


Result "fr.mleduc.minijava.MinijavaInterpreterBenchmark.logoInterpreter":
  N = 50
  mean =      4.974 ?(99.9%) 0.158 s/op

  Histogram, s/op:
    [4.000, 4.250) = 0 
    [4.250, 4.500) = 0 
    [4.500, 4.750) = 1 
    [4.750, 5.000) = 43 
    [5.000, 5.250) = 2 
    [5.250, 5.500) = 1 
    [5.500, 5.750) = 1 
    [5.750, 6.000) = 1 
    [6.000, 6.250) = 0 
    [6.250, 6.500) = 0 
    [6.500, 6.750) = 1 

  Percentiles, s/op:
      p(0.0000) =      4.742 s/op
     p(50.0000) =      4.918 s/op
     p(90.0000) =      5.054 s/op
     p(95.0000) =      5.722 s/op
     p(99.0000) =      6.707 s/op
     p(99.9000) =      6.707 s/op
     p(99.9900) =      6.707 s/op
     p(99.9990) =      6.707 s/op
     p(99.9999) =      6.707 s/op
    p(100.0000) =      6.707 s/op


# Run complete. Total time: 00:04:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                (program)  Mode  Cnt  Score   Error  Units
MinijavaInterpreterBenchmark.logoInterpreter  /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss   50  4.974 ? 0.158   s/op

Benchmark result is saved to /home/benchmarks/results/minijava_interpreter_fannkuchredux_1564273202579.json
{"wallclock_times": [250.55012007300002], "core_cycle_counts": [[188756701732], [244670384006], [282739476503], [170893066116]], "aperf_counts": [[188040460718], [244587778307], [282661699960], [170822154609]], "mperf_counts": [[188050028048], [244588752742], [282665801180], [170822169064]]}

--------------------------------------------------

stderr:
--------------------------------------------------
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/benchmarks/benchmark/minijava/interpreter/benchmarks.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
WARNING: Not a HotSpot compiler command compatible VM ("Eclipse OpenJ9 VM-12.0.1"), compilerHints are disabled.

--------------------------------------------------

[2019-07-28 02:24:13: INFO] Finished 'minijava_interpreter_fannkuchredux(50)' (default-java variant) under 'minijava_interpreter_openj9_12.0.1'
[2019-07-28 02:24:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 02:24:14: INFO] 4 executions left in scheduler queue
[2019-07-28 02:24:14: INFO] Next execution is 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 02:24:14: INFO] Estimated completion (next execution): 2019-07-28 02:30:55 (0:06:41 from now)
[2019-07-28 02:24:14: INFO] Reboot in preparation for next execution
[2019-07-28 02:32:13: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_binarytree.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 5.321 s
Iteration   2: 4.648 s
Iteration   3: 4.556 s
Iteration   4: 4.600 s
Iteration   5: 4.581 s
Iteration   6: 4.623 s
Iteration   7: 4.566 s
Iteration   8: 4.562 s
Iteration   9: 4.579 s
Iteration  10: 4.567 s
Iteration  11: 4.570 s
Iteration  12: 4.573 s
Iteration  13: 4.578 s
Iteration  14: 4.579 s
Iteration  15: 4.579 s
Iteration  16: 4.582 s
Iteration  17: 4.582 s
Iteration  18: 4.582 s
Iteration  19: 4.591 s
Iteration  20: 4.607 s
Iteration  21: 4.587 s
Iteration  22: 4.586 s
Iteration  23: 4.529 s
Iteration  24: 4.577 s
Iteration  25: 4.582 s
Iteration  26: 4.567 s
Iteration  27: 4.574 s
Iteration  28: 4.598 s
Iteration  29: 4.595 s
Iteration  30: 4.593 s
Iteration  31: 4.590 s
Iteration  32: 4.583 s
Iteration  33: 4.589 s
Iteration  34: 4.593 s
Iteration  35: 4.600 s
Iteration  36: 4.599 s
Iteration  37: 4.583 s
Iteration  38: 4.540 s
Iteration  39: 4.573 s
Iteration  40: 4.595 s
Iteration  41: 4.579 s
Iteration  42: 4.568 s
Iteration  43: 4.583 s
Iteration  44: 4.578 s
Iteration  45: 4.588 s
Iteration  46: 4.589 s
Iteration  47: 4.592 s
Iteration  48: 4.915 s
Iteration  49: 4.555 s
Iteration  50: 4.589 s


Result: 4.604 ?(99.9%) 0.057 s [Average]
  Statistics: (min, avg, max) = (4.529, 4.604, 5.321), stdev = 0.115
  Confidence interval (99.9%): [4.547, 4.661]
  Samples, N = 50
        mean =      4.604 ?(99.9%) 0.057 s
         min =      4.529 s
  p( 0.0000) =      4.529 s
  p(50.0000) =      4.583 s
  p(90.0000) =      4.606 s
  p(95.0000) =      4.768 s
  p(99.0000) =      5.321 s
  p(99.9000) =      5.321 s
  p(99.9900) =      5.321 s
  p(99.9990) =      5.321 s
  p(99.9999) =      5.321 s
         max =      5.321 s


# Run complete. Total time: 00:03:51

Benchmark                                                                                (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_binarytree.xmi    ss       50  4.604        0.057      s
{"wallclock_times": [231.31986013400004], "core_cycle_counts": [[207813432657], [184216606071], [212808248600], [219062211311]], "aperf_counts": [[207194735770], [184145573718], [212754768126], [219017621422]], "mperf_counts": [[207205786592], [184159256342], [212758836280], [219021599518]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 02:32:13: INFO] Finished 'minijava_switch_binarytree(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 02:32:14: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 02:32:14: INFO] 3 executions left in scheduler queue
[2019-07-28 02:32:14: INFO] Next execution is 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 02:32:14: INFO] Estimated completion (next execution): 2019-07-28 02:38:35 (0:06:21 from now)
[2019-07-28 02:32:14: INFO] Reboot in preparation for next execution
[2019-07-28 02:43:02: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fibonacci.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.689 s
Iteration   2: 8.038 s
Iteration   3: 7.825 s
Iteration   4: 7.828 s
Iteration   5: 7.833 s
Iteration   6: 7.816 s
Iteration   7: 7.826 s
Iteration   8: 7.831 s
Iteration   9: 7.821 s
Iteration  10: 7.827 s
Iteration  11: 7.821 s
Iteration  12: 7.811 s
Iteration  13: 7.843 s
Iteration  14: 7.832 s
Iteration  15: 7.810 s
Iteration  16: 7.824 s
Iteration  17: 7.824 s
Iteration  18: 7.807 s
Iteration  19: 7.827 s
Iteration  20: 7.815 s
Iteration  21: 7.824 s
Iteration  22: 7.821 s
Iteration  23: 7.823 s
Iteration  24: 7.807 s
Iteration  25: 7.813 s
Iteration  26: 7.823 s
Iteration  27: 7.816 s
Iteration  28: 7.819 s
Iteration  29: 7.824 s
Iteration  30: 7.816 s
Iteration  31: 7.829 s
Iteration  32: 7.826 s
Iteration  33: 7.820 s
Iteration  34: 7.824 s
Iteration  35: 7.838 s
Iteration  36: 7.824 s
Iteration  37: 7.820 s
Iteration  38: 7.835 s
Iteration  39: 7.810 s
Iteration  40: 7.814 s
Iteration  41: 7.826 s
Iteration  42: 7.834 s
Iteration  43: 7.832 s
Iteration  44: 7.809 s
Iteration  45: 7.822 s
Iteration  46: 7.823 s
Iteration  47: 7.828 s
Iteration  48: 7.823 s
Iteration  49: 7.827 s
Iteration  50: 7.822 s


Result: 7.824 ?(99.9%) 0.018 s [Average]
  Statistics: (min, avg, max) = (7.689, 7.824, 8.038), stdev = 0.037
  Confidence interval (99.9%): [7.806, 7.843]
  Samples, N = 50
        mean =      7.824 ?(99.9%) 0.018 s
         min =      7.689 s
  p( 0.0000) =      7.689 s
  p(50.0000) =      7.824 s
  p(90.0000) =      7.834 s
  p(95.0000) =      7.840 s
  p(99.0000) =      8.038 s
  p(99.9000) =      8.038 s
  p(99.9900) =      8.038 s
  p(99.9990) =      8.038 s
  p(99.9999) =      8.038 s
         max =      8.038 s


# Run complete. Total time: 00:06:32

Benchmark                                                                               (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fibonacci.xmi    ss       50  7.824        0.018      s
{"wallclock_times": [392.1614871229999], "core_cycle_counts": [[456084215515], [238703134419], [256466185571], [312805769820]], "aperf_counts": [[455320701386], [238614719729], [256433870097], [312773650844]], "mperf_counts": [[455328899718], [238632211418], [256434325944], [312782865560]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 02:43:02: INFO] Finished 'minijava_switch_fibonacci(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 02:43:03: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 02:43:03: INFO] 2 executions left in scheduler queue
[2019-07-28 02:43:03: INFO] Next execution is 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 02:43:03: INFO] Estimated completion (next execution): 2019-07-28 02:52:05 (0:09:02 from now)
[2019-07-28 02:43:03: INFO] Reboot in preparation for next execution
[2019-07-28 02:50:51: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_fannkuchredux.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 4.929 s
Iteration   2: 4.576 s
Iteration   3: 4.403 s
Iteration   4: 4.412 s
Iteration   5: 4.376 s
Iteration   6: 4.373 s
Iteration   7: 4.391 s
Iteration   8: 4.377 s
Iteration   9: 4.377 s
Iteration  10: 4.388 s
Iteration  11: 4.414 s
Iteration  12: 4.393 s
Iteration  13: 4.376 s
Iteration  14: 4.392 s
Iteration  15: 4.384 s
Iteration  16: 4.396 s
Iteration  17: 4.353 s
Iteration  18: 4.362 s
Iteration  19: 4.361 s
Iteration  20: 4.362 s
Iteration  21: 4.366 s
Iteration  22: 4.389 s
Iteration  23: 4.380 s
Iteration  24: 4.389 s
Iteration  25: 4.381 s
Iteration  26: 4.352 s
Iteration  27: 4.384 s
Iteration  28: 4.379 s
Iteration  29: 4.380 s
Iteration  30: 4.394 s
Iteration  31: 4.368 s
Iteration  32: 4.384 s
Iteration  33: 4.368 s
Iteration  34: 4.379 s
Iteration  35: 4.362 s
Iteration  36: 4.360 s
Iteration  37: 4.393 s
Iteration  38: 4.377 s
Iteration  39: 4.403 s
Iteration  40: 4.370 s
Iteration  41: 4.383 s
Iteration  42: 4.380 s
Iteration  43: 4.365 s
Iteration  44: 4.370 s
Iteration  45: 4.381 s
Iteration  46: 4.382 s
Iteration  47: 4.401 s
Iteration  48: 4.369 s
Iteration  49: 4.373 s
Iteration  50: 4.388 s


Result: 4.395 ?(99.9%) 0.041 s [Average]
  Statistics: (min, avg, max) = (4.352, 4.395, 4.929), stdev = 0.083
  Confidence interval (99.9%): [4.354, 4.436]
  Samples, N = 50
        mean =      4.395 ?(99.9%) 0.041 s
         min =      4.352 s
  p( 0.0000) =      4.352 s
  p(50.0000) =      4.380 s
  p(90.0000) =      4.403 s
  p(95.0000) =      4.487 s
  p(99.0000) =      4.929 s
  p(99.9000) =      4.929 s
  p(99.9900) =      4.929 s
  p(99.9990) =      4.929 s
  p(99.9999) =      4.929 s
         max =      4.929 s


# Run complete. Total time: 00:03:40

Benchmark                                                                                   (program)  Mode  Samples  Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_fannkuchredux.xmi    ss       50  4.395        0.041      s
{"wallclock_times": [220.796897065], "core_cycle_counts": [[190027513038], [189504037571], [197692204592], [143728895012]], "aperf_counts": [[189513254173], [189454595983], [197670395892], [143707451437]], "mperf_counts": [[189532542534], [189458370414], [197673011316], [143708273866]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 02:50:51: INFO] Finished 'minijava_switch_fannkuchredux(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 02:50:52: INFO] Estimated completion (whole session): ????-??-?? ??:??:?? (?:??:?? from now)
[2019-07-28 02:50:52: INFO] 1 executions left in scheduler queue
[2019-07-28 02:50:52: INFO] Next execution is 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 02:50:52: INFO] Estimated completion (next execution): 2019-07-28 02:57:03 (0:06:11 from now)
[2019-07-28 02:50:52: INFO] Reboot in preparation for next execution
[2019-07-28 03:05:45: ERROR] Benchmark returned non-zero or emitted invalid JSON.
Exception string: No JSON object could be decoded
return code: 0
stdout:
--------------------------------------------------
# VM invoker: /home/benchmarks/jvms/graalvm-ce-19.1.1/jre/bin/java
# VM options: -Xms4G -Xmx4G
# Warmup: <none>
# Measurement: 50 iterations, 1 s each
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: fr.mleduc.minijava.MinijavaSwitchBenchmark.logoInterpreter
# Parameters: (program = /home/benchmarks/programs/minijava_sort.xmi)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 12.834 s
Iteration   2: 12.690 s
Iteration   3: 12.595 s
Iteration   4: 12.619 s
Iteration   5: 12.618 s
Iteration   6: 12.619 s
Iteration   7: 12.599 s
Iteration   8: 12.584 s
Iteration   9: 12.637 s
Iteration  10: 12.636 s
Iteration  11: 12.590 s
Iteration  12: 12.583 s
Iteration  13: 12.638 s
Iteration  14: 12.588 s
Iteration  15: 12.613 s
Iteration  16: 12.921 s
Iteration  17: 12.611 s
Iteration  18: 12.650 s
Iteration  19: 12.582 s
Iteration  20: 12.560 s
Iteration  21: 12.617 s
Iteration  22: 12.598 s
Iteration  23: 12.550 s
Iteration  24: 12.577 s
Iteration  25: 12.626 s
Iteration  26: 12.616 s
Iteration  27: 12.602 s
Iteration  28: 12.626 s
Iteration  29: 12.566 s
Iteration  30: 12.560 s
Iteration  31: 12.620 s
Iteration  32: 12.623 s
Iteration  33: 12.586 s
Iteration  34: 12.622 s
Iteration  35: 12.627 s
Iteration  36: 12.668 s
Iteration  37: 12.597 s
Iteration  38: 12.588 s
Iteration  39: 12.607 s
Iteration  40: 12.564 s
Iteration  41: 12.639 s
Iteration  42: 12.609 s
Iteration  43: 12.591 s
Iteration  44: 12.577 s
Iteration  45: 12.598 s
Iteration  46: 12.593 s
Iteration  47: 12.631 s
Iteration  48: 12.832 s
Iteration  49: 12.573 s
Iteration  50: 12.557 s


Result: 12.620 ?(99.9%) 0.034 s [Average]
  Statistics: (min, avg, max) = (12.550, 12.620, 12.921), stdev = 0.069
  Confidence interval (99.9%): [12.586, 12.654]
  Samples, N = 50
        mean =     12.620 ?(99.9%) 0.034 s
         min =     12.550 s
  p( 0.0000) =     12.550 s
  p(50.0000) =     12.608 s
  p(90.0000) =     12.666 s
  p(95.0000) =     12.833 s
  p(99.0000) =     12.921 s
  p(99.9000) =     12.921 s
  p(99.9900) =     12.921 s
  p(99.9990) =     12.921 s
  p(99.9999) =     12.921 s
         max =     12.921 s


# Run complete. Total time: 00:10:31

Benchmark                                                                          (program)  Mode  Samples   Score  Score error  Units
f.m.m.MinijavaSwitchBenchmark.logoInterpreter    /home/benchmarks/programs/minijava_sort.xmi    ss       50  12.620        0.034      s
{"wallclock_times": [631.973252404], "core_cycle_counts": [[571940882125], [591436696502], [286480913730], [584329621986]], "aperf_counts": [[570547907524], [591313360786], [286430673596], [584301258949]], "mperf_counts": [[570559745444], [591316829142], [286430927324], [584302062874]]}

--------------------------------------------------

stderr:
--------------------------------------------------

--------------------------------------------------

[2019-07-28 03:05:45: INFO] Finished 'minijava_switch_sort(50)' (default-java variant) under 'minijava_switch_graalvm-ce-19.1.1'
[2019-07-28 03:05:46: INFO] Estimated completion (whole session): 2019-07-28 03:05:46 (0:00:00 from now)
[2019-07-28 03:05:46: INFO] 0 executions left in scheduler queue
[2019-07-28 03:05:46: INFO] Done: Results dumped to /home/benchmarks/krun/examples/benchmarks_results.json.bz2
[2019-07-28 03:05:46: WARNING] Errors/warnings occurred -- read the log!
[2019-07-28 03:05:46: INFO] Session completed. Log file at: '/home/benchmarks/krun/examples/benchmarks.log'

Errors/warnings occurred -- read the log!

Don't forget to disable Krun at boot.
